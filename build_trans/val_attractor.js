
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-translator/webcl/js/val_attractor.data';
    var REMOTE_PACKAGE_NAME = (Module['filePackagePrefixURL'] || '') + 'val_attractor.data';
    var REMOTE_PACKAGE_SIZE = 22613;
    var PACKAGE_UUID = '8d15a269-bd62-441a-9739-93c318a2acfc';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'kernel', true, true);
Module['FS_createPath']('/', 'shader', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 17202, 0, 0).open('GET', '/kernel/lorenz.cl');
    new DataRequest(17202, 21105, 0, 0).open('GET', '/shader/lorenz.frag');
    new DataRequest(21105, 22613, 0, 0).open('GET', '/shader/lorenz.vert');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/kernel/lorenz.cl"].onload();
          DataRequest.prototype.requests["/shader/lorenz.frag"].onload();
          DataRequest.prototype.requests["/shader/lorenz.vert"].onload();
          Module['removeRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-translator/webcl/js/val_attractor.data');

    };
    Module['addRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-translator/webcl/js/val_attractor.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 17224;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 17264;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(19051);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a35() } }, { func: function() { __GLOBAL__I_a47() } }, { func: function() { __GLOBAL__I_a126() } }, { func: function() { __GLOBAL__I_a154() } }, { func: function() { __GLOBAL__I_a268() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,72,2,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,0,0,0,0,0,0,115,114,99,47,65,112,112,108,105,99,97,116,105,111,110,46,99,112,112,0,0,0,0,0,119,105,110,100,111,119,84,105,116,108,101,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,71,76,70,87,32,119,105,110,100,111,119,0,0,0,0,117,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,69,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,37,115,93,32,80,97,114,116,105,99,108,101,115,58,32,37,100,32,32,68,105,115,112,108,97,121,58,32,37,100,32,102,112,115,32,40,37,115,37,115,41,10,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,71,80,85,0,0,0,0,0,67,80,85,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,97,116,116,97,99,104,101,100,0,0,0,0,0,0,0,0,99,111,112,121,105,110,103,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,38,102,105,108,116,101,114,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,0,0,115,104,97,100,101,114,47,108,111,114,101,110,122,46,118,101,114,116,0,0,0,0,0,0,102,114,97,103,109,101,110,116,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,115,104,97,100,101,114,47,108,111,114,101,110,122,46,102,114,97,103,0,0,0,0,0,0,107,101,114,110,101,108,70,105,108,101,110,97,109,101,0,0,107,101,114,110,101,108,47,108,111,114,101,110,122,46,99,108,0,0,0,0,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,112,111,115,0,0,0,0,0,99,111,108,111,114,0,0,0,108,105,102,101,116,105,109,101,0,0,0,0,0,0,0,0,49,49,65,112,112,108,105,99,97,116,105,111,110,0,0,0,80,67,0,0,56,2,0,0,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,100,101,109,111,0,0,0,115,114,99,47,68,101,109,111,46,99,112,112,0,0,0,0,32,105,110,32,0,0,0,0,44,32,108,105,110,101,32,0,64,0,0,0,0,0,0,0,64,3,0,0,3,0,0,0,4,0,0,0,56,0,0,0,248,255,255,255,64,3,0,0,5,0,0,0,6,0,0,0,192,255,255,255,192,255,255,255,64,3,0,0,7,0,0,0,8,0,0,0,0,0,0,0,156,2,0,0,92,3,0,0,156,3,0,0,176,3,0,0,196,3,0,0,216,3,0,0,132,3,0,0,112,3,0,0,196,2,0,0,176,2,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,120,67,0,0,248,2,0,0,240,28,0,0,0,0,0,0,64,0,0,0,0,0,0,0,240,28,0,0,9,0,0,0,10,0,0,0,56,0,0,0,248,255,255,255,240,28,0,0,11,0,0,0,12,0,0,0,192,255,255,255,192,255,255,255,240,28,0,0,13,0,0,0,14,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,208,27,0,0,15,0,0,0,16,0,0,0,192,255,255,255,192,255,255,255,208,27,0,0,17,0,0,0,18,0,0,0,56,0,0,0,0,0,0,0,96,28,0,0,19,0,0,0,20,0,0,0,200,255,255,255,200,255,255,255,96,28,0,0,21,0,0,0,22,0,0,0,0,0,0,0,104,4,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,120,67,0,0,32,4,0,0,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,115,104,97,100,101,114,32,102,105,108,101,32,0,0,0,0,0,115,114,99,47,103,108,116,111,111,108,115,46,99,112,112,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,115,104,97,100,101,114,32,111,98,106,101,99,116,0,0,83,104,97,100,101,114,32,99,111,109,112,105,108,101,32,108,111,103,58,32,0,0,0,0,102,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,115,104,97,100,101,114,32,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,208,5,0,0,37,0,0,0,38,0,0,0,148,255,255,255,148,255,255,255,208,5,0,0,39,0,0,0,40,0,0,0,116,5,0,0,236,5,0,0,0,6,0,0,136,5,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,120,67,0,0,160,5,0,0,208,27,0,0,0,0,0,0,108,0,0,0,0,0,0,0,208,27,0,0,15,0,0,0,16,0,0,0,148,255,255,255,148,255,255,255,208,27,0,0,17,0,0,0,18,0,0,0,0,0,0,0,120,6,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,30,0,0,0,31,0,0,0,48,0,0,0,33,0,0,0,49,0,0,0,35,0,0,0,50,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,120,67,0,0,72,6,0,0,88,27,0,0,0,0,0,0,119,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,119,43,0,0,0,0,0,0,97,43,0,0,0,0,0,0,119,98,0,0,0,0,0,0,97,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,119,43,98,0,0,0,0,0,97,43,98,0,0,0,0,0,0,0,0,0,224,8,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,118,101,114,116,101,120,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,0,0,102,114,97,103,109,101,110,116,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,103,101,111,109,101,116,114,121,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,71,76,83,76,32,112,114,111,103,114,97,109,0,0,0,115,114,99,47,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,68,101,109,111,46,99,112,112,0,0,0,0,0,118,101,114,116,101,120,80,111,115,0,0,0,0,0,0,0,118,101,114,116,101,120,67,111,108,111,114,0,0,0,0,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,0,71,76,83,76,32,112,114,111,103,114,97,109,32,98,117,105,108,100,32,102,97,105,108,101,100,0,0,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,112,111,115,0,0,0,0,0,99,111,108,111,114,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,118,98,111,80,111,115,0,0,118,98,111,67,111,108,111,114,0,0,0,0,0,0,0,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,191,0,0,128,63,0,0,0,0,116,105,109,101,0,0,0,0,77,86,80,0,0,0,0,0,116,97,115,107,0,0,0,0,119,105,110,100,111,119,87,105,100,116,104,0,0,0,0,0,119,105,110,100,111,119,72,101,105,103,104,116,0,0,0,0,49,57,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,68,101,109,111,0,0,0,52,68,101,109,111,0,0,0,80,67,0,0,208,8,0,0,120,67,0,0,184,8,0,0,216,8,0,0,0,0,0,0,105,32,60,32,116,104,105,115,45,62,108,101,110,103,116,104,40,41,0,0,0,0,0,0,46,47,103,108,109,47,99,111,114,101,47,116,121,112,101,95,118,101,99,52,46,105,110,108,0,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,46,47,103,108,109,47,99,111,114,101,47,116,121,112,101,95,109,97,116,52,120,52,46,105,110,108,0,0,0,0,0,0,0,0,0,0,216,8,0,0,57,0,0,0,58,0,0,0,59,0,0,0,59,0,0,0,59,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,11,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,78,50,99,108,53,69,114,114,111,114,69,0,0,0,0,0,120,67,0,0,168,9,0,0,0,0,0,0,0,0,0,0,79,112,101,110,67,76,32,101,114,114,111,114,44,32,0,0,32,0,0,0,0,0,0,0,115,114,99,47,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,79,112,101,110,67,76,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,110,111,32,79,112,101,110,67,76,32,112,108,97,116,102,111,114,109,115,32,102,111,117,110,100,0,0,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,110,111,32,79,112,101,110,67,76,32,100,101,118,105,99,101,115,32,102,111,117,110,100,0,107,101,114,110,101,108,70,105,108,101,110,97,109,101,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,107,101,114,110,101,108,32,102,105,108,101,0,0,0,0,0,0,79,112,101,110,67,76,32,98,117,105,108,100,32,102,97,105,108,101,100,58,0,0,0,0,107,101,114,110,101,108,83,116,101,112,0,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,118,98,111,80,111,115,0,0,118,98,111,67,111,108,111,114,0,0,0,0,0,0,0,0,112,111,115,0,0,0,0,0,99,111,108,111,114,0,0,0,108,105,102,101,116,105,109,101,0,0,0,0,0,0,0,0,50,55,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,79,112,101,110,67,76,83,111,108,118,101,114,0,0,0,54,83,111,108,118,101,114,0,80,67,0,0,32,11,0,0,120,67,0,0,0,11,0,0,40,11,0,0,0,0,0,0,99,108,83,101,116,75,101,114,110,101,108,65,114,103,0,0,0,0,0,0,184,9,0,0,64,0,0,0,65,0,0,0,66,0,0,0,0,0,0,0,101,109,112,116,121,0,0,0,99,108,71,101,116,80,114,111,103,114,97,109,66,117,105,108,100,73,110,102,111,0,0,0,56,0,0,0,0,0,0,0,8,12,0,0,67,0,0,0,68,0,0,0,200,255,255,255,200,255,255,255,8,12,0,0,69,0,0,0,70,0,0,0,148,11,0,0,36,12,0,0,56,12,0,0,168,11,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,120,67,0,0,192,11,0,0,96,28,0,0,0,0,0,0,56,0,0,0,0,0,0,0,96,28,0,0,19,0,0,0,20,0,0,0,200,255,255,255,200,255,255,255,96,28,0,0,21,0,0,0,22,0,0,0,99,108,71,101,116,67,111,110,116,101,120,116,73,110,102,111,0,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,82,101,97,100,66,117,102,102,101,114,0,0,0,0,0,99,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,82,101,108,101,97,115,101,71,76,79,98,106,101,99,116,115,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,78,68,82,97,110,103,101,75,101,114,110,101,108,0,0,99,108,69,110,113,117,101,117,101,65,99,113,117,105,114,101,71,76,79,98,106,101,99,116,115,0,0,0,0,0,0,0,99,108,67,114,101,97,116,101,66,117,102,102,101,114,0,0,99,108,67,114,101,97,116,101,70,114,111,109,71,76,66,117,102,102,101,114,0,0,0,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,0,0,0,0,99,108,67,114,101,97,116,101,75,101,114,110,101,108,0,0,99,108,66,117,105,108,100,80,114,111,103,114,97,109,0,0,99,108,67,114,101,97,116,101,80,114,111,103,114,97,109,87,105,116,104,83,111,117,114,99,101,0,0,0,0,0,0,0,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,70,114,111,109,84,121,112,101,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,0,0,0,0,0,0,0,0,0,0,0,0,40,11,0,0,71,0,0,0,72,0,0,0,59,0,0,0,59,0,0,0,119,105,110,100,111,119,84,105,116,108,101,0,0,0,0,0,68,101,109,111,32,65,84,0,99,112,117,0,0,0,0,0,103,112,117,0,0,0,0,0,105,110,116,101,114,111,112,0,102,105,108,116,101,114,0,0,80,97,114,97,109,101,116,101,114,32,100,101,116,101,99,116,32,37,115,32,100,101,118,105,99,101,10,0,0,0,0,0,71,80,85,0,0,0,0,0,67,80,85,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,69,82,82,79,82,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,112,112,108,105,99,97,116,105,111,110,0,0,0,0,0,69,82,82,79,82,58,32,117,110,107,110,111,119,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,109,111,32,109,117,115,116,32,98,101,32,99,114,101,97,116,101,32,98,101,102,111,114,101,32,115,111,108,118,101,114,0,0,0,0,0,0,0,115,114,99,47,83,111,108,118,101,114,46,99,112,112,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,115,111,108,118,101,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([128,19,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,120,67,0,0,96,19,0,0,152,27,0,0,0,0,0,0,0,0,0,0,232,19,0,0,87,0,0,0,88,0,0,0,89,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,90,0,0,0,80,0,0,0,81,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,120,67,0,0,208,19,0,0,152,27,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,128,20,0,0,96,0,0,0,97,0,0,0,98,0,0,0,26,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,30,0,0,0,31,0,0,0,102,0,0,0,33,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,120,67,0,0,96,20,0,0,88,27,0,0,0,0,0,0,0,0,0,0,232,20,0,0,106,0,0,0,107,0,0,0,108,0,0,0,26,0,0,0,99,0,0,0,100,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,35,0,0,0,112,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,120,67,0,0,208,20,0,0,88,27,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,80,67,0,0,248,20,0,0,0,0,0,0,96,21,0,0,113,0,0,0,114,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,200,21,0,0,116,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,120,67,0,0,80,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,21,0,0,113,0,0,0,119,0,0,0,115,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,120,67,0,0,136,21,0,0,96,21,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,120,67,0,0,176,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,22,0,0,116,0,0,0,120,0,0,0,118,0,0,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,120,67,0,0,240,21,0,0,200,21,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,80,22,0,0,121,0,0,0,122,0,0,0,118,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,120,67,0,0,56,22,0,0,200,21,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,80,67,0,0,96,22,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,120,67,0,0,136,22,0,0,128,22,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,208,26,0,0,123,0,0,0,124,0,0,0,0,0,0,0,88,27,0,0,125,0,0,0,126,0,0,0,25,0,0,0,26,0,0,0,99,0,0,0,100,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,102,0,0,0,33,0,0,0,103,0,0,0,35,0,0,0,112,0,0,0,0,0,0,0,152,27,0,0,127,0,0,0,128,0,0,0,129,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,90,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,94,0,0,0,95,0,0,0,8,0,0,0,0,0,0,0,208,27,0,0,15,0,0,0,16,0,0,0,248,255,255,255,248,255,255,255,208,27,0,0,17,0,0,0,18,0,0,0,8,0,0,0,0,0,0,0,24,28,0,0,130,0,0,0,131,0,0,0,248,255,255,255,248,255,255,255,24,28,0,0,132,0,0,0,133,0,0,0,4,0,0,0,0,0,0,0,96,28,0,0,19,0,0,0,20,0,0,0,252,255,255,255,252,255,255,255,96,28,0,0,21,0,0,0,22,0,0,0,4,0,0,0,0,0,0,0,168,28,0,0,134,0,0,0,135,0,0,0,252,255,255,255,252,255,255,255,168,28,0,0,136,0,0,0,137,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,26,0,0,138,0,0,0,139,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,152,26,0,0,140,0,0,0,141,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,120,67,0,0,80,26,0,0,80,22,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,80,67,0,0,128,26,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,120,67,0,0,160,26,0,0,152,26,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,120,67,0,0,224,26,0,0,152,26,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,80,67,0,0,32,27,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,80,67,0,0,96,27,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,216,67,0,0,160,27,0,0,0,0,0,0,1,0,0,0,208,26,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,216,67,0,0,232,27,0,0,0,0,0,0,1,0,0,0,16,27,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,216,67,0,0,48,28,0,0,0,0,0,0,1,0,0,0,208,26,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,216,67,0,0,120,28,0,0,0,0,0,0,1,0,0,0,16,27,0,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,216,67,0,0,192,28,0,0,3,0,0,0,2,0,0,0,208,27,0,0,2,0,0,0,96,28,0,0,2,8,0,0,0,0,0,0,88,29,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,120,67,0,0,56,29,0,0,160,22,0,0,0,0,0,0,0,0,0,0,128,43,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,43,0,0,155,0,0,0,156,0,0,0,151,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,48,0,0,160,0,0,0,161,0,0,0,151,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,240,48,0,0,173,0,0,0,174,0,0,0,151,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,49,0,0,186,0,0,0,187,0,0,0,151,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,50,0,0,196,0,0,0,197,0,0,0,151,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,112,45,0,0,206,0,0,0,207,0,0,0,151,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,248,255,255,255,112,45,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,16,46,0,0,222,0,0,0,223,0,0,0,151,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,248,255,255,255,16,46,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,160,46,0,0,238,0,0,0,239,0,0,0,151,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,47,0,0,241,0,0,0,242,0,0,0,151,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,43,0,0,244,0,0,0,245,0,0,0,151,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,44,0,0,255,0,0,0,0,1,0,0,151,0,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,44,0,0,10,1,0,0,11,1,0,0,151,0,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,44,0,0,21,1,0,0,22,1,0,0,151,0,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,50,0,0,32,1,0,0,33,1,0,0,151,0,0,0,34,1,0,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,104,51,0,0,36,1,0,0,37,1,0,0,151,0,0,0,38,1,0,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,248,51,0,0,40,1,0,0,41,1,0,0,151,0,0,0,42,1,0,0,43,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,136,52,0,0,44,1,0,0,45,1,0,0,151,0,0,0,46,1,0,0,47,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,47,0,0,48,1,0,0,49,1,0,0,151,0,0,0,50,1,0,0,51,1,0,0,52,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,47,0,0,53,1,0,0,54,1,0,0,151,0,0,0,55,1,0,0,56,1,0,0,57,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,88,43,0,0,58,1,0,0,59,1,0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,40,0,0,60,1,0,0,61,1,0,0,151,0,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,41,0,0,70,1,0,0,71,1,0,0,151,0,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,43,0,0,79,1,0,0,80,1,0,0,151,0,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,0,0,0,0,48,43,0,0,86,1,0,0,87,1,0,0,151,0,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,104,39,0,0,93,1,0,0,94,1,0,0,151,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,120,67,0,0,80,39,0,0,24,21,0,0,0,0,0,0,0,0,0,0,248,39,0,0,93,1,0,0,95,1,0,0,151,0,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,80,67,0,0,216,39,0,0,216,67,0,0,192,39,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,39,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,216,67,0,0,24,40,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,39,0,0,2,0,0,0,0,0,0,0,200,40,0,0,93,1,0,0,108,1,0,0,151,0,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,80,67,0,0,168,40,0,0,216,67,0,0,128,40,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,216,67,0,0,232,40,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,0,0,0,0,136,41,0,0,93,1,0,0,116,1,0,0,151,0,0,0,117,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,216,67,0,0,96,41,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,0,0,0,0,0,42,0,0,93,1,0,0,124,1,0,0,151,0,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,131,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,216,67,0,0,216,41,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,0,0,0,0,120,42,0,0,93,1,0,0,132,1,0,0,151,0,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,131,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,120,67,0,0,80,42,0,0,0,42,0,0,0,0,0,0,0,0,0,0,224,42,0,0,93,1,0,0,133,1,0,0,151,0,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,131,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,120,67,0,0,184,42,0,0,0,42,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,120,67,0,0,240,42,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,120,67,0,0,24,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,120,67,0,0,64,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,120,67,0,0,104,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,120,67,0,0,144,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,80,67,0,0,216,43,0,0,216,67,0,0,184,43,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,216,67,0,0,24,44,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,216,67,0,0,88,44,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,216,67,0,0,152,44,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,80,67,0,0,32,45,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,80,67,0,0,64,45,0,0,216,67,0,0,216,44,0,0,0,0,0,0,3,0,0,0,104,39,0,0,2,0,0,0,56,45,0,0,2,0,0,0,104,45,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,80,67,0,0,224,45,0,0,216,67,0,0,152,45,0,0,0,0,0,0,3,0,0,0,104,39,0,0,2,0,0,0,56,45,0,0,2,0,0,0,8,46,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,80,67,0,0,128,46,0,0,216,67,0,0,56,46,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,152,46,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,216,67,0,0,192,46,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,152,46,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,80,67,0,0,64,47,0,0,216,67,0,0,40,47,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,88,47,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,216,67,0,0,128,47,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,88,47,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,80,67,0,0,24,48,0,0,216,67,0,0,0,48,0,0,0,0,0,0,1,0,0,0,56,48,0,0,0,0,0,0,216,67,0,0,184,47,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,64,48,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,216,67,0,0,192,48,0,0,0,0,0,0,1,0,0,0,56,48,0,0,0,0,0,0,216,67,0,0,120,48,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,216,48,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,80,67,0,0,112,49,0,0,216,67,0,0,88,49,0,0,0,0,0,0,1,0,0,0,144,49,0,0,0,0,0,0,216,67,0,0,16,49,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,152,49,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,216,67,0,0,24,50,0,0,0,0,0,0,1,0,0,0,144,49,0,0,0,0,0,0,216,67,0,0,208,49,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,48,50,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,80,67,0,0,176,50,0,0,216,67,0,0,104,50,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,208,50,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,80,67,0,0,64,51,0,0,216,67,0,0,248,50,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,96,51,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,80,67,0,0,208,51,0,0,216,67,0,0,136,51,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,51,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,80,67,0,0,96,52,0,0,216,67,0,0,24,52,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,128,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4892);
/* memory initializer */ allocate([111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,66,0,0,134,1,0,0,135,1,0,0,136,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,80,67,0,0,160,66,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,120,67,0,0,184,66,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,120,67,0,0,216,66,0,0,176,66,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,120,67,0,0,16,67,0,0,0,67,0,0,0,0,0,0,0,0,0,0,56,67,0,0,137,1,0,0,138,1,0,0,139,1,0,0,140,1,0,0,141,1,0,0,142,1,0,0,143,1,0,0,144,1,0,0,0,0,0,0,192,67,0,0,137,1,0,0,145,1,0,0,139,1,0,0,140,1,0,0,141,1,0,0,146,1,0,0,147,1,0,0,148,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,120,67,0,0,152,67,0,0,56,67,0,0,0,0,0,0,0,0,0,0,32,68,0,0,137,1,0,0,149,1,0,0,139,1,0,0,140,1,0,0,141,1,0,0,150,1,0,0,151,1,0,0,152,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,120,67,0,0,248,67,0,0,56,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,70,0,0,153,1,0,0,154,1,0,0,155,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,120,67,0,0,80,70,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+15132);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],clientBuffers:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.maxVertexAttribs; ++i) {
          var cb = GL.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, buf);
          GLctx.bufferSubData(GLctx.ARRAY_BUFFER,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          GLctx.vertexAttribPointer(i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, GL.buffers[GL.currArrayBuffer]);
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
        for (var i = 0; i < GL.maxVertexAttribs; i++) {
          GL.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0 };
        }
  
        GL.generateTempBuffers();
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  var ___cxa_exception_header_size=8;
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_last_thrown_exception=0;
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }


  
  var CL={cl_init:0,cl_extensions:["KHR_GL_SHARING","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},cl_validator:{},cl_validator_argsize:{},init:function () {
        if (CL.cl_init == 0) {
          console.log('%c WebCL-Translator + Validator V2.0 ! ', 'background: #222; color: #bada55');
          var nodejs = (typeof window === 'undefined');
          if(nodejs) {
            webcl = require('../webcl');
          }
  
          if (webcl == undefined) {
            alert("Unfortunately your system does not support WebCL. " +
            "Make sure that you have WebKit Samsung or Firefox Nokia plugin");
  
            console.error("Unfortunately your system does not support WebCL.\n");
            console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin\n");  
          } else {
  
            // Add webcl constant for parser
            // Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
            // Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
            // Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });          
            // Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
            // Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
            // Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
            // Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
  
            for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
              if (webcl.enableExtension(CL.cl_extensions[i])) {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
              } else {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
              }
            }
            CL.cl_init = 1;
          }
        }
  
        return CL.cl_init;
      },udid:function (obj) {    
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
  
        var _uuid = [];
  
        _uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
        for (var i = 1; i < 6; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
  
        _id = _uuid.join('');
  
      
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          Object.defineProperty(obj, "udid", { value : _id,writable : false });
          CL.cl_objects[_id]=obj;
        }
  
        return _id;      
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';       
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';   
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';   
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';        
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';            
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
      
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ???? 
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;  
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;                     
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;          
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;        
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
          
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
      
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
            
            CL.parseStruct(kernel_string,_res);
          }
          
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
        
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(","); 
          
          // Get type of the line
          var _type = CL.parseType(_var[i]);
        
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/); 
          if (_res != null) _arrayNum = _res;
        
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" "); 
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
            
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);  
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for 
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)  
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
        
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 50;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 50 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) { 
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
   
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _param_validator = [];
          var _param_argsize_validator = [];
          var _array = _second_part.split(","); 
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else if (_type == -1) {
                         
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" "); 
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }             
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
              
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);         
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else {
              _param.push(_type);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
            }
          }        
  
          CL.cl_kernels_sig[_name] = _param;
  
          CL.cl_validator[_name] = _param_validator;
          CL.cl_validator_argsize[_name] = _param_argsize_validator;
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
        
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;      
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:      
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;        
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break; 
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:      
            _sizeOrder = 4;
            break;        
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;         
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) { 
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;         
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getCopyPointerToArrayPowTwo:function (ptr,size,type) { 
        var _host_ptr = null
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int8Array(_offset);
              _host_ptr.set( HEAP8.subarray((ptr),(ptr+size)) );            
              break;
            case webcl.SIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int16Array(_offset);
              _host_ptr.set( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int32Array(_offset);      
              _host_ptr.set( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint8Array(_offset);      
              _host_ptr.set( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint16Array(_offset);       
              _host_ptr.set( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;     
            case webcl.UNSIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint32Array(_offset);       
              _host_ptr.set( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;      
            default:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Float32Array(_offset);   
              _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          var _size = size >> 2;
          var _offset = CL.getNextPowOfTwo(_size);
          _host_ptr = new Float32Array(_offset);    
          _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;           
      },getNextPowOfTwo:function (v) { 
        // Accept 1 / 2 / 3 / 4
        if (v <= 4) return v;
        // Accept 8 / 16 / 32 
        var _v = v;
        _v--;
        _v |= _v >> 1;
        _v |= _v >> 2;
        _v |= _v >> 4;
        _v |= _v >> 8;
        _v |= _v >> 16;
        _v++;
        return _v
      },copyDataToHeap:function (dest, src, size, type) { 
  
        // Copy data to Emscripten heap
        //var dataHeap = new Uint8Array(Module.HEAPU8.buffer, dataPtr, nDataBytes);
        //dataHeap.set( new Uint8Array(_host_ptr.buffer) );
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _data_heap = new Int8Array(Module.HEAP8.buffer, dest, size);
              _data_heap.set( new Int8Array(src) );
              break;
            case webcl.SIGNED_INT16:
              var _data_heap = new Int16Array(Module.HEAP16.buffer, dest, size >> 1);
              _data_heap.set( new Int16Array(src) );
              break;
            case webcl.SIGNED_INT32:
              var _data_heap = new Int32Array(Module.HEAP32.buffer, dest, size >> 2);
              _data_heap.set( new Int32Array(src) );
              break;
            case webcl.UNSIGNED_INT8:
              var _data_heap = new Uint8Array(Module.HEAPU8.buffer, dest, size);
              _data_heap.set( new Uint8Array(src) );
              break;
            case webcl.UNSIGNED_INT16:
              var _data_heap = new Uint16Array(Module.HEAPU16.buffer, dest, size >> 1);
              _data_heap.set( new Uint16Array(src) );
              break;
            case webcl.UNSIGNED_INT32:
              var _data_heap = new Uint32Array(Module.HEAPU32.buffer, dest, size >> 2);
              _data_heap.set( new Uint32Array(src) );
              break;         
            default:
              var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
              _data_heap.set( new Float32Array(src) );
              break;
          }
        } else {
          var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
          _data_heap.set( new Float32Array(src) );
        }
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
  
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
        
        return _error;
      }};function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try { 
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      } 
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  var GLFW={keyFunc:null,charFunc:null,mouseButtonFunc:null,mousePosFunc:null,mouseWheelFunc:null,resizeFunc:null,closeFunc:null,refreshFunc:null,params:null,initTime:null,wheelPos:0,buttons:0,keys:0,initWindowWidth:640,initWindowHeight:480,windowX:0,windowY:0,windowWidth:0,windowHeight:0,DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x08: return 295 ; // DOM_VK_BACKSPACE -> GLFW_KEY_BACKSPACE
          case 0x09: return 293 ; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x0D: return 294 ; // DOM_VK_ENTER -> GLFW_KEY_ENTER
          case 0x1B: return 257 ; // DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x6A: return 313 ; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6B: return 315 ; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6D: return 314 ; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6E: return 316 ; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F: return 312 ; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x70: return 258 ; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71: return 259 ; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72: return 260 ; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73: return 261 ; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74: return 262 ; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75: return 263 ; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76: return 264 ; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77: return 265 ; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78: return 266 ; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79: return 267 ; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7a: return 268 ; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7b: return 269 ; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x25: return 285 ; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x26: return 283 ; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x27: return 286 ; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x28: return 284 ; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x21: return 298 ; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22: return 299 ; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24: return 300 ; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23: return 301 ; // DOM_VK_END -> GLFW_KEY_END
          case 0x2d: return 296 ; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 16  : return 287 ; // DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          case 0x05: return 287 ; // DOM_VK_LEFT_SHIFT -> GLFW_KEY_LSHIFT
          case 0x06: return 288 ; // DOM_VK_RIGHT_SHIFT -> GLFW_KEY_RSHIFT
          case 17  : return 289 ; // DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          case 0x03: return 289 ; // DOM_VK_LEFT_CONTROL -> GLFW_KEY_LCTRL
          case 0x04: return 290 ; // DOM_VK_RIGHT_CONTROL -> GLFW_KEY_RCTRL
          case 18  : return 291 ; // DOM_VK_ALT -> GLFW_KEY_LALT
          case 0x02: return 291 ; // DOM_VK_LEFT_ALT -> GLFW_KEY_LALT
          case 0x01: return 292 ; // DOM_VK_RIGHT_ALT -> GLFW_KEY_RALT
          case 96  : return 302 ; // GLFW_KEY_KP_0
          case 97  : return 303 ; // GLFW_KEY_KP_1
          case 98  : return 304 ; // GLFW_KEY_KP_2
          case 99  : return 305 ; // GLFW_KEY_KP_3
          case 100 : return 306 ; // GLFW_KEY_KP_4
          case 101 : return 307 ; // GLFW_KEY_KP_5
          case 102 : return 308 ; // GLFW_KEY_KP_6
          case 103 : return 309 ; // GLFW_KEY_KP_7
          case 104 : return 310 ; // GLFW_KEY_KP_8
          case 105 : return 311 ; // GLFW_KEY_KP_9
          default  : return keycode;
        };
      },getUnicodeChar:function (value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
      },onKeyPress:function (event) {
        // charCode is only available whith onKeyPress event
        var char = GLFW.getUnicodeChar(event.charCode);
  
        if (event.charCode) {
          var char = GLFW.getUnicodeChar(event.charCode);
          if (char !== null && GLFW.charFunc) {
            Runtime.dynCall('vii', GLFW.charFunc, [event.charCode, 1]);
          }
        }
      },onKeyChanged:function (event, status) {
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key) {
          GLFW.keys[key] = status;
          if (GLFW.keyFunc) {
            Runtime.dynCall('vii', GLFW.keyFunc, [key, status]);
          }
        }
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1);// GLFW_PRESS
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0);// GLFW_RELEASE
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
  
        if (event.target == Module["canvas"] && GLFW.mousePosFunc) {
          event.preventDefault();
          Runtime.dynCall('vii', GLFW.mousePosFunc, [lastX, lastY]);
        }
      },onMouseButtonChanged:function (event, status) {
        if (GLFW.mouseButtonFunc == null) {
          return;
        }
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) {
          return;
        }
  
        if (status == 1) {// GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        event.preventDefault();
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        Runtime.dynCall('vii', GLFW.mouseButtonFunc, [eventButton, status]);
      },onMouseButtonDown:function (event) {
        GLFW.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1);// GLFW_PRESS
      },onMouseButtonUp:function (event) {
        GLFW.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0);// GLFW_RELEASE
      },onMouseWheel:function (event) {
        GLFW.wheelPos -= Browser.getMouseWheelDelta(event);
  
        if (GLFW.mouseWheelFunc && event.target == Module["canvas"]) {
          Runtime.dynCall('vi', GLFW.mouseWheelFunc, [GLFW.wheelPos]);
          event.preventDefault();
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLFW.windowWidth;
          height = GLFW.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLFW.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
  
        if (GLFW.resizeFunc) {
          Runtime.dynCall('vii', GLFW.resizeFunc, [width, height]);
        }
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      }};function _glfwGetTime() {
      return (Date.now()/1000) - GLFW.initTime;
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas ||
                                  document['msPointerLockElement'] === canvas;
          }
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.shouldPause = true;
    }

  function _clReleaseCommandQueue(command_queue) {
  
      // If is an object retain don't release it until retains > 0...
      if (command_queue in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[command_queue] - 1;
  
        CL.cl_objects_retains[command_queue] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glfwSetWindowSizeCallback(cbfun) {
      GLFW.resizeFunc = cbfun;
      if (GLFW.resizeFunc) {
        Runtime.dynCall('vii', GLFW.resizeFunc, [Module['canvas'].width, Module['canvas'].height]);
      }
    }

  function _glfwSetWindowTitle(title) {
      document.title = Pointer_stringify(title);
    }

  function _clGetContextInfo(context,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var _info = null;
  
      try { 
  
  
        if (param_name == 0x1080 /* CL_CONTEXT_REFERENCE_COUNT */) {
          _info = 0;
  
          if (context in CL.cl_objects) {
            _info++;
          }
  
          if (context in CL.cl_objects_retains) {
            _info+=CL.cl_objects_retains[context];
          }
  
        }  else if (param_name == 0x1082 /* CL_CONTEXT_PROPERTIES */) {
        
          _info = "WebCLContextProperties";
  
        } else {
  
          _info = CL.cl_objects[context].getInfo(param_name);
  
        }
        
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
      
       if (_info == "WebCLContextProperties") {
  
        var _size = 0;
  
        if (param_value != 0) {
  
          if ( CL.cl_objects[context].hasOwnProperty('properties') ) {
            var _properties = CL.cl_objects[context].properties;
  
            for (elt in _properties) {
              HEAP32[(((param_value)+(_size*4))>>2)]=_properties[elt];
              _size ++;
  
            }
          }
        }
  
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_size*4;
  
      } else if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof WebCLPlatform) {
       
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            var _id = CL.udid(_info[i]);
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_id;
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length*4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clRetainCommandQueue(command_queue) {
  
  
      if (!(command_queue in CL.cl_objects_retains)) {
        CL.cl_objects_retains[command_queue] = 1;
      } else {
        CL.cl_objects_retains[command_queue] = CL.cl_objects_retains[command_queue] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glfwSetMousePosCallback(cbfun) {
      GLFW.mousePosFunc = cbfun;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  var _emscripten_preinvoke=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function _glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  var _cosf=Math_cos;

  function _clEnqueueReleaseGLObjects(command_queue,num_objects,mem_objects,num_events_in_wait_list,event_wait_list,event) {
        
      var _event_wait_list = [];
      var _mem_objects = [];
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      for (var i = 0; i < num_objects; i++) {
        var _id = HEAP32[(((mem_objects)+(i*4))>>2)];
  
        
        _mem_objects.push(CL.cl_objects[_id]);
      }
  
      try { 
  
        if (event != 0) {
          var _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueReleaseGLObjects(_mem_objects,_event_wait_list,_event);    
        
        if (event != 0) { 
          HEAP32[((event)>>2)]=CL.udid(_event);  
        }
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;
    }

  function _glfwCloseWindow() {
      if (GLFW.closeFunc) {
        Runtime.dynCall('v', GLFW.closeFunc, []);
      }
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
    }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
          
          // Call the callback 
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback 
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _clReleaseContext(context) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (context in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[context] - 1;
  
        CL.cl_objects_retains[context] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];     
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.clientBuffers[index];
      assert(cb, index);
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;


  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _clEnqueueAcquireGLObjects(command_queue,num_objects,mem_objects,num_events_in_wait_list,event_wait_list,event) {
        
      var _event_wait_list = [];
      var _mem_objects = [];
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      for (var i = 0; i < num_objects; i++) {
        var _id = HEAP32[(((mem_objects)+(i*4))>>2)];
  
        
        _mem_objects.push(CL.cl_objects[_id]);
      }
  
      try { 
  
        if (event != 0) {
          var _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueAcquireGLObjects(_mem_objects,_event_wait_list,_event); 
          
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  function ___cxa_guard_abort() {}

  var _sqrtf=Math_sqrt;

  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _clRetainProgram(program) {
  
  
      if (!(program in CL.cl_objects_retains)) {
        CL.cl_objects_retains[program] = 1;
      } else {
        CL.cl_objects_retains[program] = CL.cl_objects_retains[program] + 1;
      }
          
      return webcl.SUCCESS;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwPollEvents() {}

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC); 
  Module["_llvm_ctlz_i32"] = _llvm_ctlz_i32;

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _clRetainKernel(kernel) {
  
      if (!(kernel in CL.cl_objects_retains)) {
        CL.cl_objects_retains[kernel] = 1;
      } else {
        CL.cl_objects_retains[kernel] = CL.cl_objects_retains[kernel] + 1;
      }
  
      return webcl.SUCCESS;
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function _glfwTerminate() {}

  function _glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.vaos);
        var vao = GL.vaoExt.createVertexArrayOES();
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }


  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _clReleaseKernel(kernel) {
  
      // If is an object retain don't release it until retains > 0...
      if (kernel in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[kernel] - 1;
  
        CL.cl_objects_retains[kernel] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[kernel].release();
          
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[kernel];
  
  
      return webcl.SUCCESS;
    }

  var _emscripten_landingpad=true;

  var _sinf=Math_sin;

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _glDrawArrays(mode, first, count) {
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(first + count);
  
      GLctx.drawArrays(mode, first, count);
  
      GL.postDrawHandleClientVertexAttribBindings();
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _emscripten_postinvoke=true;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  function _glClear(x0) { GLctx.clear(x0) }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
      var _local_work_size = (local_work_size != 0) ? [] : null;
  
      var _global_work_offset = [];
      var _global_work_size = [];
      
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
        else
          _global_work_offset.push(0);
  
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
         
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
             
      try { 
        
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);  
         
        if (event != 0) { 
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;    
  
    }

  function _clReleaseProgram(program) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (program in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[program] - 1;
  
        CL.cl_objects_retains[program] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[program].release();
          delete CL.cl_objects[program]; 
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clCreateFromGLBuffer(context,flags_i64_1,flags_i64_2,bufobj,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
   
      var _id = null;
      var _buffer = null;
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        return 0; 
      }
  
  
      try {
  
        _buffer = CL.cl_objects[context].createFromGLBuffer(_flags,GL.buffers[bufobj]);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=_error;
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=0;
  
      _id = CL.udid(_buffer);
  
  
      return _id;
    }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.clientBuffers[index];
      assert(cb, index);
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      if (width == 0 && height > 0) {
        width = 4 * height / 3;
      }
      if (width > 0 && height == 0) {
        height = 3 * width / 4;
      }
      GLFW.params[0x00020005] = redbits; // GLFW_RED_BITS
      GLFW.params[0x00020006] = greenbits; // GLFW_GREEN_BITS
      GLFW.params[0x00020007] = bluebits; // GLFW_BLUE_BITS
      GLFW.params[0x00020008] = alphabits; // GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = depthbits; // GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = stencilbits; // GLFW_STENCIL_BITS
  
      if (mode == 0x00010001) {// GLFW_WINDOW
        Browser.setCanvasSize(GLFW.initWindowWidth = width,
                              GLFW.initWindowHeight = height);
        GLFW.params[0x00030003] = true; // GLFW_STICKY_MOUSE_BUTTONS
      } else if (mode == 0x00010002) {// GLFW_FULLSCREEN
        GLFW.requestFullScreen();
        GLFW.params[0x00030003] = false; // GLFW_STICKY_MOUSE_BUTTONS
      } else {
        throw "Invalid glfwOpenWindow mode.";
      }
  
      var contextAttributes = {
        antialias: (GLFW.params[0x00020013] > 1), // GLFW_FSAA_SAMPLES
        depth: (GLFW.params[0x00020009] > 0), // GLFW_DEPTH_BITS
        stencil: (GLFW.params[0x0002000A] > 0) // GLFW_STENCIL_BITS
      }
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return 1; // GL_TRUE
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
    
      var _block = blocking_read ? true : false;
      var _event = null;
      var _event_wait_list = [];
      var _host_ptr = CL.getHostPtrArray(cb,CL.cl_pn_type);
    
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
        
        CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
         
      
        // Copy array to heap
        CL.copyDataToHeap(ptr,_host_ptr.buffer,cb,CL.cl_pn_type);
        
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
          
  
        return _error;
      }
  
      return webcl.SUCCESS;    
    }

  function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var id = GL.getNewId(GL.framebuffers);
        var framebuffer = GLctx.createFramebuffer();
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function __ZNSt9exceptionD2Ev() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  var _tanf=Math_tan;

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _glfwInit() {
      GLFW.initTime = Date.now() / 1000;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("mousemove", GLFW.onMousemove, true);
      window.addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      window.addEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
      window.addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLFW.onKeydown, true);
        window.removeEventListener("keypress", GLFW.onKeyPress, true);
        window.removeEventListener("keyup", GLFW.onKeyup, true);
        window.removeEventListener("mousemove", GLFW.onMousemove, true);
        window.removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
        window.removeEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
        window.removeEventListener('mousewheel', GLFW.onMouseWheel, true);
        Module["canvas"].width = Module["canvas"].height = 1;
      }});
  
      //TODO: Init with correct values
      GLFW.params = new Array();
      GLFW.params[0x00030001] = true; // GLFW_MOUSE_CURSOR
      GLFW.params[0x00030002] = false; // GLFW_STICKY_KEYS
      GLFW.params[0x00030003] = true; // GLFW_STICKY_MOUSE_BUTTONS
      GLFW.params[0x00030004] = false; // GLFW_SYSTEM_KEYS
      GLFW.params[0x00030005] = false; // GLFW_KEY_REPEAT
      GLFW.params[0x00030006] = true; // GLFW_AUTO_POLL_EVENTS
      GLFW.params[0x00020001] = true; // GLFW_OPENED
      GLFW.params[0x00020002] = true; // GLFW_ACTIVE
      GLFW.params[0x00020003] = false; // GLFW_ICONIFIED
      GLFW.params[0x00020004] = true; // GLFW_ACCELERATED
      GLFW.params[0x00020005] = 0; // GLFW_RED_BITS
      GLFW.params[0x00020006] = 0; // GLFW_GREEN_BITS
      GLFW.params[0x00020007] = 0; // GLFW_BLUE_BITS
      GLFW.params[0x00020008] = 0; // GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = 0; // GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = 0; // GLFW_STENCIL_BITS
      GLFW.params[0x0002000B] = 0; // GLFW_REFRESH_RATE
      GLFW.params[0x0002000C] = 0; // GLFW_ACCUM_RED_BITS
      GLFW.params[0x0002000D] = 0; // GLFW_ACCUM_GREEN_BITS
      GLFW.params[0x0002000E] = 0; // GLFW_ACCUM_BLUE_BITS
      GLFW.params[0x0002000F] = 0; // GLFW_ACCUM_ALPHA_BITS
      GLFW.params[0x00020010] = 0; // GLFW_AUX_BUFFERS
      GLFW.params[0x00020011] = 0; // GLFW_STEREO
      GLFW.params[0x00020012] = 0; // GLFW_WINDOW_NO_RESIZE
      GLFW.params[0x00020013] = 0; // GLFW_FSAA_SAMPLES
      GLFW.params[0x00020014] = 0; // GLFW_OPENGL_VERSION_MAJOR
      GLFW.params[0x00020015] = 0; // GLFW_OPENGL_VERSION_MINOR
      GLFW.params[0x00020016] = 0; // GLFW_OPENGL_FORWARD_COMPAT
      GLFW.params[0x00020017] = 0; // GLFW_OPENGL_DEBUG_CONTEXT
      GLFW.params[0x00020018] = 0; // GLFW_OPENGL_PROFILE
  
      GLFW.keys = new Array();
  
      return 1; // GL_TRUE
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
      
      var _event = null;
      var _block = blocking_write ? true : false;
      var _event_wait_list = [];
      var _host_ptr = CL.getCopyPointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
        
        CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);    
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
   
  
        return _error;
      }
  
  
      return webcl.SUCCESS;  
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
      
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
      
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type); 
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      } 
  
      try {
  
      
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _id = CL.udid(_buffer);
    
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
          
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0; 
          }
        }
      }
      **** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try { 
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _glfwSwapBuffers() {}

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _glfwGetWindowSize(width, height) {
      setValue(width, Module['canvas'].width, 'i32');
      setValue(height, Module['canvas'].height, 'i32');
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;          
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = _kernel.val_param[arg_index];
  
      var _sig = _kernel.sig[_posarg];
      
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
          var _sizearg = CL.cast_long(arg_size);
  
          if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
            _kernel.setArg(_posarg+1,_sizearg);
          }
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
            
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
            
              var _size = CL.cl_objects[_value].getInfo(webcl.MEM_SIZE);
              var _sizearg = CL.cast_long(_size);
  
              if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
                _kernel.setArg(_posarg+1,_sizearg);
              }
            }
            
          } else {
    
            var _array = CL.getCopyPointerToArrayPowTwo(arg_value,arg_size,[[_sig,1]]);
           
            _kernel.setArg(_posarg,_array);
  
            var _sizearg = CL.cast_long(arg_size);
  
            if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
              _kernel.setArg(_posarg+1,_sizearg);
            }
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glBindVertexArray(vao) {
  
      GL.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32 
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try { 
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options); 
  
        if (_option) {
          // Add space after -D
          _option = _option.replace(/-D/g, "-D ");
  
          // Remove all the multispace
          _option = _option.replace(/\s{2,}/g, " ");
        }
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES); 
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return 
           */
          _callback = function() { 
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data) 
          };
        }
  
        
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;      
  
    }

  function _clRetainContext(context) {
  
  
      if (!(context in CL.cl_objects_retains)) {
        CL.cl_objects_retains[context] = 1;
      } else {
        CL.cl_objects_retains[context] = CL.cl_objects_retains[context] + 1;
      }
         
      return webcl.SUCCESS;
    }


  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _clRetainMemObject(memobj) {
  
  
      if (!(memobj in CL.cl_objects_retains)) {
        CL.cl_objects_retains[memobj] = 1;
      } else {
        CL.cl_objects_retains[memobj] = CL.cl_objects_retains[memobj] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.buffers);
        var buffer = GLctx.createBuffer();
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glFinish() { GLctx.finish() }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function _glDeleteShader(shader) {
      GLctx.deleteShader(GL.shaders[shader]);
      GL.shaders[shader] = null;
    }

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  var _ceilf=Math_ceil;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
      
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
      
  
        _kernel = CL.cl_objects[program].createKernel(_name);
        
        Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
  
        Object.defineProperty(_kernel, "val_param", { value : CL.cl_validator[_name],writable : false });
        Object.defineProperty(_kernel, "val_param_argsize", { value : CL.cl_validator_argsize[_name],writable : false });
  
        
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
      
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
        
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);   
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);   
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]); 
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
    
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.scheduler, 'there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one, if you want to');
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  var _BItoD=true;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glfwSetKeyCallback(cbfun) {
      GLFW.keyFunc = cbfun;
    }

  function _clCreateContextFromType(properties,device_type_i64_1,device_type_i64_2,pfn_notify,user_data,cl_errcode_ret) {
      // Assume the device_type is i32 
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
      
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer      
      }
  
      var _id = null;
      var _context = null;
  
      try { 
  
        var _platform = null;
        var _deviceType = device_type_i64_1;
        var _glclSharedContext = false;
        var _properties = [];
  
        // Verify the property
        if (properties != 0) {
          var _propertiesCounter = 0;
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200B) /*CL_WGL_HDC_KHR*/:
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:            
                _propertiesCounter ++;
                _glclSharedContext = true;
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0; 
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (_deviceType != 0 && _platform != null) {
  
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
            _context = webcl.createContext(Module.ctx, _platform,_deviceType);  
          } else {
            _context = webcl.createContext(_platform,_deviceType);  
          }
              
        } else if (_deviceType != 0) {
  
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
            _context = webcl.createContext(Module.ctx,_deviceType);  
          } else {
            _context = webcl.createContext(_deviceType);  
          }
  
        } else {
          if (cl_errcode_ret != 0) {
            HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_CONTEXT;
          }
  
          return 0; // NULL Pointer   
        }
     
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      Object.defineProperty(_context, "properties", { value : _properties,writable : false });
  
  
      return _id;
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }var _getc=_fgetc;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  function __ZTVSt9exception() {
  Module['printErr']('missing function: _ZTVSt9exception'); abort(-1);
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var __ZTVSt9exception=env.__ZTVSt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiiiiiiii=env.nullFunc_iiiiiiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _clReleaseProgram=env._clReleaseProgram;
  var _fread=env._fread;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glfwInit=env._glfwInit;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var _clEnqueueNDRangeKernel=env._clEnqueueNDRangeKernel;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _clCreateProgramWithSource=env._clCreateProgramWithSource;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var __addDays=env.__addDays;
  var _fsync=env._fsync;
  var _catgets=env._catgets;
  var _ceilf=env._ceilf;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var _sysconf=env._sysconf;
  var _clRetainKernel=env._clRetainKernel;
  var _close=env._close;
  var _tanf=env._tanf;
  var _fprintf=env._fprintf;
  var _glfwTerminate=env._glfwTerminate;
  var _clCreateCommandQueue=env._clCreateCommandQueue;
  var _clCreateContextFromType=env._clCreateContextFromType;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _clEnqueueReleaseGLObjects=env._clEnqueueReleaseGLObjects;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _glTexParameteri=env._glTexParameteri;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _send=env._send;
  var _clReleaseKernel=env._clReleaseKernel;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var _glfwOpenWindow=env._glfwOpenWindow;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _clGetProgramBuildInfo=env._clGetProgramBuildInfo;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glBufferSubData=env._glBufferSubData;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _clReleaseCommandQueue=env._clReleaseCommandQueue;
  var _glGetString=env._glGetString;
  var _fopen=env._fopen;
  var _glCreateShader=env._glCreateShader;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var _clCreateKernel=env._clCreateKernel;
  var _clSetKernelArg=env._clSetKernelArg;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _glfwPollEvents=env._glfwPollEvents;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _sbrk=env._sbrk;
  var _glBlendFuncSeparate=env._glBlendFuncSeparate;
  var _glfwSetMousePosCallback=env._glfwSetMousePosCallback;
  var _pwrite=env._pwrite;
  var _glFinish=env._glFinish;
  var _open=env._open;
  var _uselocale=env._uselocale;
  var _glBindTexture=env._glBindTexture;
  var _glUniform1f=env._glUniform1f;
  var _clReleaseMemObject=env._clReleaseMemObject;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _clGetPlatformIDs=env._clGetPlatformIDs;
  var _glUniform1i=env._glUniform1i;
  var _strftime=env._strftime;
  var _glDrawArrays=env._glDrawArrays;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _clFinish=env._clFinish;
  var _fseek=env._fseek;
  var _clEnqueueAcquireGLObjects=env._clEnqueueAcquireGLObjects;
  var _fclose=env._fclose;
  var _sqrtf=env._sqrtf;
  var _glActiveTexture=env._glActiveTexture;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _clCreateBuffer=env._clCreateBuffer;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glBindVertexArray=env._glBindVertexArray;
  var _clBuildProgram=env._clBuildProgram;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _glewInit=env._glewInit;
  var _clGetContextInfo=env._clGetContextInfo;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _glDeleteShader=env._glDeleteShader;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwGetTime=env._glfwGetTime;
  var _clReleaseContext=env._clReleaseContext;
  var _clCreateFromGLBuffer=env._clCreateFromGLBuffer;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _glfwGetWindowSize=env._glfwGetWindowSize;
  var _glfwCloseWindow=env._glfwCloseWindow;
  var _ungetc=env._ungetc;
  var _clEnqueueWriteBuffer=env._clEnqueueWriteBuffer;
  var _clRetainContext=env._clRetainContext;
  var _glLinkProgram=env._glLinkProgram;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _glGetShaderiv=env._glGetShaderiv;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _strerror=env._strerror;
  var _clRetainCommandQueue=env._clRetainCommandQueue;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var _read=env._read;
  var __exit=env.__exit;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _clRetainProgram=env._clRetainProgram;
  var _fflush=env._fflush;
  var _clEnqueueReadBuffer=env._clEnqueueReadBuffer;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var ___cxa_throw=env.___cxa_throw;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _glfwSetWindowTitle=env._glfwSetWindowTitle;
  var _clRetainMemObject=env._clRetainMemObject;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = sp + 12|0;
 $3 = $5;
 $4 = -1;
 $7 = $3;
 $8 = $4;
 $1 = $7;
 $2 = $8;
 $9 = $1;
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $10;
 $0 = $6;
 HEAP32[8>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN11Application3getEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = HEAP32[8>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $10 = HEAP32[8>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 $4 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vi(413,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch(-1,-1)|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  __ZdlPv($4);
  $11 = $0;
  $12 = $1;
  ___resumeException($11|0);
  // unreachable;
 } else {
  HEAP32[8>>2] = $4;
  $7 = HEAP32[8>>2]|0;
  __ZN11Application4initEv($7);
  $10 = HEAP32[8>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function __ZN11Application4initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0;
 var $b_window = 0, $windowHeight = 0, $windowTitle = 0, $windowWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $windowTitle = sp + 76|0;
 $34 = sp + 156|0;
 $35 = sp;
 $33 = $this;
 $38 = (_glfwInit()|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  __ZN5error8throw_exEPKcS1_i(40,72,156);
 }
 $windowWidth = 512;
 $windowHeight = 512;
 $40 = (__ZN6global3parEv()|0);
 $31 = $34;
 $32 = 96;
 $41 = $31;
 $42 = $32;
 $29 = $41;
 $30 = $42;
 $43 = $29;
 $28 = $43;
 $44 = $28;
 $27 = $44;
 $45 = $27;
 $26 = $45;
 $46 = $26;
 $25 = $46;
 $47 = $30;
 $48 = $30;
 $24 = $48;
 $49 = $24;
 $50 = (_strlen(($49|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($43,$47,$50);
 $23 = $35;
 $51 = $23;
 $22 = $51;
 $52 = $22;
 $21 = $52;
 $53 = $21;
 $20 = $53;
 $54 = $20;
 $19 = $54;
 $55 = $19;
 $18 = $55;
 $17 = $52;
 $56 = $17;
 $16 = $56;
 $57 = $16;
 $15 = $57;
 $58 = $15;
 $__a$i$i$i = $58;
 $__i$i$i$i = 0;
 while(1) {
  $59 = $__i$i$i$i;
  $60 = ($59>>>0)<(3);
  if (!($60)) {
   break;
  }
  $61 = $__i$i$i$i;
  $62 = $__a$i$i$i;
  $63 = (($62) + ($61<<2)|0);
  HEAP32[$63>>2] = 0;
  $64 = $__i$i$i$i;
  $65 = (($64) + 1)|0;
  $__i$i$i$i = $65;
 }
 __THREW__ = 0;
 invoke_viiii(414,($windowTitle|0),($40|0),($34|0),($35|0));
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 do {
  if ($67) {
   $108 = ___cxa_find_matching_catch(-1,-1)|0;
   $109 = tempRet0;
   $36 = $108;
   $37 = $109;
   __THREW__ = 0;
   invoke_vi(415,($35|0));
   $110 = __THREW__; __THREW__ = 0;
   $111 = $110&1;
   if ($111) {
    $136 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $137 = tempRet0;
    ___clang_call_terminate($136);
    // unreachable;
   } else {
    break;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(415,($35|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    $106 = ___cxa_find_matching_catch(-1,-1)|0;
    $107 = tempRet0;
    $36 = $106;
    $37 = $107;
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($34);
   $70 = $windowWidth;
   $71 = $windowHeight;
   __THREW__ = 0;
   $72 = (invoke_iiiiiiiiii(416,($70|0),($71|0),8,8,8,0,0,0,65537)|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   do {
    if (!($74)) {
     $b_window = $72;
     $14 = $windowTitle;
     $75 = $14;
     $13 = $75;
     $76 = $13;
     $12 = $76;
     $77 = $12;
     $11 = $77;
     $78 = $11;
     $10 = $78;
     $79 = $10;
     $9 = $79;
     $80 = $9;
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = $82 & 1;
     $84 = ($83|0)!=(0);
     if ($84) {
      $3 = $77;
      $85 = $3;
      $2 = $85;
      $86 = $2;
      $1 = $86;
      $87 = $1;
      $88 = (($87) + 8|0);
      $89 = HEAP32[$88>>2]|0;
      $96 = $89;
     } else {
      $8 = $77;
      $90 = $8;
      $7 = $90;
      $91 = $7;
      $6 = $91;
      $92 = $6;
      $93 = (($92) + 1|0);
      $5 = $93;
      $94 = $5;
      $4 = $94;
      $95 = $4;
      $96 = $95;
     }
     $0 = $96;
     $97 = $0;
     __THREW__ = 0;
     invoke_vi(417,($97|0));
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if (!($99)) {
      $100 = $b_window;
      $101 = ($100|0)!=(0);
      if (!($101)) {
       __THREW__ = 0;
       invoke_v(418);
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        break;
       }
       __THREW__ = 0;
       invoke_viii(419,(112|0),(72|0),172);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        break;
       }
      }
      __THREW__ = 0;
      $118 = (invoke_i(420)|0);
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       $121 = ($118|0)!=(0);
       if ($121) {
        __THREW__ = 0;
        invoke_viii(419,(144|0),(72|0),180);
        $122 = __THREW__; __THREW__ = 0;
        $123 = $122&1;
        if ($123) {
         break;
        }
       }
       __THREW__ = 0;
       invoke_vi(421,(422|0));
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if (!($125)) {
        __THREW__ = 0;
        invoke_vi(423,(424|0));
        $126 = __THREW__; __THREW__ = 0;
        $127 = $126&1;
        if (!($127)) {
         __THREW__ = 0;
         invoke_vi(425,(426|0));
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if (!($129)) {
          $130 = $windowWidth;
          $131 = $windowHeight;
          __THREW__ = 0;
          invoke_viiii(427,0,0,($130|0),($131|0));
          $132 = __THREW__; __THREW__ = 0;
          $133 = $132&1;
          if (!($133)) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($windowTitle);
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $114 = ___cxa_find_matching_catch(-1,-1)|0;
   $115 = tempRet0;
   $36 = $114;
   $37 = $115;
   __THREW__ = 0;
   invoke_vi(415,($windowTitle|0));
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    $136 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $137 = tempRet0;
    ___clang_call_terminate($136);
    // unreachable;
   }
   $134 = $36;
   $135 = $37;
   ___resumeException($134|0);
   // unreachable;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(415,($34|0));
 $112 = __THREW__; __THREW__ = 0;
 $113 = $112&1;
 if ($113) {
  $136 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $137 = tempRet0;
  ___clang_call_terminate($136);
  // unreachable;
 }
 $134 = $36;
 $135 = $37;
 ___resumeException($134|0);
 // unreachable;
}
function __ZN11ApplicationC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $7 = sp + 24|0;
 $6 = $this;
 $8 = $6;
 $9 = (16 + 8|0);
 HEAP32[$8>>2] = $9;
 $3 = $5;
 $4 = -1;
 $10 = $3;
 $11 = $4;
 $1 = $10;
 $2 = $11;
 $12 = $1;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$7>>2] = $13;
 $0 = $7;
 $14 = (($8) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = (($8) + 48|0);
 HEAPF32[$15>>2] = 0.0;
 $16 = (($8) + 52|0);
 HEAPF32[$16>>2] = 0.0;
 $17 = (($8) + 8|0);
 HEAPF32[$17>>2] = 0.0;
 $18 = (($8) + 12|0);
 HEAPF32[$18>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN11ApplicationD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN11ApplicationD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $7 = sp + 24|0;
 $6 = $this;
 $8 = $6;
 $9 = (16 + 8|0);
 HEAP32[$8>>2] = $9;
 $10 = (($8) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 _glfwCloseWindow();
 $3 = $5;
 $4 = -1;
 $13 = $3;
 $14 = $4;
 $1 = $13;
 $2 = $14;
 $15 = $1;
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$5>>2]|0;
 HEAP32[$7>>2] = $16;
 $0 = $7;
 $17 = (($8) + 4|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __Z12key_callbackii($key,$action) {
 $key = $key|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $key;
 $1 = $action;
 $2 = $0;
 $3 = ($2|0)==(255);
 if ($3) {
  label = 3;
 } else {
  $4 = $0;
  $5 = ($4|0)==(81);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = $1;
  $7 = ($6|0)==(1);
  if ($7) {
   _glViewport(0,0,0,0);
   _glfwCloseWindow();
   _glfwTerminate();
   _emscripten_cancel_main_loop();
   _exit(0);
   // unreachable;
  }
 }
 $8 = $0;
 $9 = ($8|0)==(32);
 if ($9) {
  $10 = $1;
  $11 = ($10|0)==(1);
  if ($11) {
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $12 = $0;
  $13 = ($12|0)==(70);
  if ($13) {
   $14 = $1;
   $15 = ($14|0)==(1);
   if ($15) {
    $16 = HEAP8[32>>0]|0;
    $17 = $16&1;
    $18 = $17 ^ 1;
    $19 = $18&1;
    HEAP8[32>>0] = $19;
    $20 = HEAP8[32>>0]|0;
    $21 = $20&1;
    if ($21) {
     (_glfwOpenWindow(512,512,8,8,8,0,0,0,65538)|0);
    } else {
     (_glfwOpenWindow(512,512,8,8,8,0,0,0,65537)|0);
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function __Z19cursor_pos_callbackii($dx,$dy) {
 $dx = $dx|0;
 $dy = $dy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $dx;
 $1 = $dy;
 $2 = (__ZN11Application3getEv()|0);
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (__ZN11Application3getEv()|0);
 $5 = $0;
 $6 = (+($5|0));
 $7 = $1;
 $8 = (+($7|0));
 __ZN11Application12setCursorPosEff($4,$6,$8);
 STACKTOP = sp;return;
}
function __ZN11Application12setCursorPosEff($this,$x,$y) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = $1;
 $5 = (($3) + 8|0);
 HEAPF32[$5>>2] = $4;
 $6 = $2;
 $7 = (($3) + 12|0);
 HEAPF32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __Z25framebuffer_size_callbackii($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $width;
 $1 = $height;
 $2 = (__ZN11Application3getEv()|0);
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (__ZN11Application3getEv()|0);
 $5 = $0;
 $6 = $1;
 __ZN11Application12resizeWindowEii($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN11Application12resizeWindowEii($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $width;
 $2 = $height;
 $3 = $1;
 $4 = $2;
 _glViewport(0,0,($3|0),($4|0));
 $5 = (__ZN4Demo3getEv()|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 FUNCTION_TABLE_viii[$8 & 1023]($5,$9,$10);
 STACKTOP = sp;return;
}
function __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($agg$result,$this,$key,$def) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__i1$i$i1 = sp + 16|0;
 $14 = sp + 8|0;
 $24 = sp + 172|0;
 $26 = sp + 116|0;
 $28 = sp + 124|0;
 $__i1$i$i = sp;
 $31 = sp + 24|0;
 $34 = sp + 76|0;
 $it = sp + 152|0;
 $37 = sp + 132|0;
 $35 = $this;
 $36 = $key;
 $38 = $35;
 $39 = (($38) + 60|0);
 $40 = $36;
 $32 = $39;
 $33 = $40;
 $41 = $32;
 $42 = $33;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($34,$41,$42);
 ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$31+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$34+3>>0]|0;
 $30 = $it;
 $43 = $30;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$31+3>>0]|0;
 $29 = $43;
 $44 = $29;
 ;HEAP32[$44+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $45 = (($38) + 60|0);
 $27 = $45;
 $46 = $27;
 $25 = $46;
 $22 = $24;
 $23 = -1;
 $47 = $22;
 $48 = $23;
 $20 = $47;
 $21 = $48;
 $49 = $20;
 HEAP32[$49>>2] = 0;
 $50 = HEAP32[$24>>2]|0;
 HEAP32[$26>>2] = $50;
 $15 = $26;
 $18 = $28;
 $19 = 0;
 $51 = $18;
 $52 = $19;
 $16 = $51;
 $17 = $52;
 $53 = $16;
 $54 = $17;
 HEAP32[$53>>2] = $54;
 ;HEAP8[$14+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$28+3>>0]|0;
 $13 = $37;
 $55 = $13;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$14+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$14+3>>0]|0;
 $12 = $55;
 $56 = $12;
 ;HEAP32[$56+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $10 = $it;
 $11 = $37;
 $57 = $10;
 $58 = $11;
 $8 = $57;
 $9 = $58;
 $59 = $8;
 $60 = $9;
 $6 = $59;
 $7 = $60;
 $61 = $6;
 $62 = HEAP32[$61>>2]|0;
 $63 = $7;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($62|0)==($64|0);
 $66 = $65 ^ 1;
 if ($66) {
  $5 = $it;
  $67 = $5;
  $4 = $67;
  $68 = $4;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 8|0);
  $3 = $70;
  $71 = $3;
  $2 = $71;
  $72 = $2;
  $1 = $72;
  $73 = $1;
  $0 = $73;
  $74 = $0;
  $75 = (($74) + 12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$75);
  STACKTOP = sp;return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$def);
  STACKTOP = sp;return;
 }
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __Z24emscripten_loop_callbackv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11Application3getEv()|0);
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (__ZN11Application3getEv()|0);
 __ZN11Application8mainLoopEv($2);
 STACKTOP = sp;return;
}
function __ZN11Application8mainLoopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $realTime = 0.0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp;
 $37 = sp + 172|0;
 $40 = sp + 96|0;
 $41 = sp + 188|0;
 $42 = sp + 20|0;
 $36 = $this;
 $43 = $36;
 $44 = (+__ZN11Application11getRealTimeEv());
 $realTime = $44;
 $45 = HEAP32[176>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[176>>2] = $46;
 $47 = HEAP32[184>>2]|0;
 $48 = $realTime;
 $49 = (~~(($48)));
 $50 = ($47|0)!=($49|0);
 if (!($50)) {
  $156 = (__ZN4Demo3getEv()|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($43) + 48|0);
  $161 = +HEAPF32[$160>>2];
  FUNCTION_TABLE_vid[$159 & 63]($156,$161);
  _glfwSwapBuffers();
  $162 = (__ZN6Solver3getEv()|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($43) + 48|0);
  $167 = +HEAPF32[$166>>2];
  $168 = (($43) + 52|0);
  $169 = +HEAPF32[$168>>2];
  FUNCTION_TABLE_vidd[$165 & 1023]($162,$167,$169);
  $170 = (__ZN4Demo3getEv()|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + 12|0);
  $173 = HEAP32[$172>>2]|0;
  FUNCTION_TABLE_vi[$173 & 1023]($170);
  _glfwPollEvents();
  $174 = (($43) + 52|0);
  $175 = +HEAPF32[$174>>2];
  $176 = (($43) + 48|0);
  $177 = +HEAPF32[$176>>2];
  $178 = $177 + $175;
  HEAPF32[$176>>2] = $178;
  $179 = HEAP32[192>>2]|0;
  $180 = (($179) + 1)|0;
  HEAP32[192>>2] = $180;
  STACKTOP = sp;return;
 }
 $51 = $realTime;
 $52 = (~~(($51)));
 HEAP32[184>>2] = $52;
 $53 = (__ZN6global3parEv()|0);
 $34 = $37;
 $35 = 248;
 $54 = $34;
 $55 = $35;
 $32 = $54;
 $33 = $55;
 $56 = $32;
 $31 = $56;
 $57 = $31;
 $30 = $57;
 $58 = $30;
 $29 = $58;
 $59 = $29;
 $28 = $59;
 $60 = $33;
 $61 = $33;
 $27 = $61;
 $62 = $27;
 $63 = (_strlen(($62|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($56,$60,$63);
 __THREW__ = 0;
 $64 = (invoke_iiii(428,($53|0),($37|0),0)|0);
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 L4: do {
  if ($66) {
   label = 26;
  } else {
   $67 = ($64|0)!=(0);
   if ($67) {
    $131 = 264;
   } else {
    $131 = 272;
   }
   __THREW__ = 0;
   $68 = (invoke_i(429)|0);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if ($70) {
    label = 26;
   } else {
    $25 = $40;
    $26 = 280;
    $71 = $25;
    $72 = $26;
    $23 = $71;
    $24 = $72;
    $73 = $23;
    $22 = $73;
    $74 = $22;
    $21 = $74;
    $75 = $21;
    $20 = $75;
    $76 = $20;
    $19 = $76;
    $77 = $24;
    $78 = $24;
    $18 = $78;
    $79 = $18;
    __THREW__ = 0;
    $80 = (invoke_ii(430,($79|0))|0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     label = 26;
    } else {
     __THREW__ = 0;
     invoke_viii(431,($73|0),($77|0),($80|0));
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     if ($84) {
      label = 26;
     } else {
      __THREW__ = 0;
      $85 = (invoke_iiii(428,($68|0),($40|0),0)|0);
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      L14: do {
       if ($87) {
        label = 27;
       } else {
        $88 = HEAP32[176>>2]|0;
        __THREW__ = 0;
        $89 = (invoke_i(429)|0);
        $90 = __THREW__; __THREW__ = 0;
        $91 = $90&1;
        if ($91) {
         label = 27;
        } else {
         $16 = $41;
         $17 = 296;
         $92 = $16;
         $93 = $17;
         $14 = $92;
         $15 = $93;
         $94 = $14;
         $13 = $94;
         $95 = $13;
         $12 = $95;
         $96 = $12;
         $11 = $96;
         $97 = $11;
         $10 = $97;
         $98 = $15;
         $99 = $15;
         $9 = $99;
         $100 = $9;
         __THREW__ = 0;
         $101 = (invoke_ii(430,($100|0))|0);
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if ($103) {
          label = 27;
         } else {
          __THREW__ = 0;
          invoke_viii(431,($94|0),($98|0),($101|0));
          $104 = __THREW__; __THREW__ = 0;
          $105 = $104&1;
          if ($105) {
           label = 27;
          } else {
           __THREW__ = 0;
           $106 = (invoke_iii(432,($89|0),($41|0))|0);
           $107 = __THREW__; __THREW__ = 0;
           $108 = $107&1;
           do {
            if ($108) {
             label = 28;
            } else {
             $109 = $106 ? 312 : 328;
             __THREW__ = 0;
             $110 = (invoke_i(429)|0);
             $111 = __THREW__; __THREW__ = 0;
             $112 = $111&1;
             if ($112) {
              label = 28;
             } else {
              $7 = $42;
              $8 = 336;
              $113 = $7;
              $114 = $8;
              $5 = $113;
              $6 = $114;
              $115 = $5;
              $4 = $115;
              $116 = $4;
              $3 = $116;
              $117 = $3;
              $2 = $117;
              $118 = $2;
              $1 = $118;
              $119 = $6;
              $120 = $6;
              $0 = $120;
              $121 = $0;
              __THREW__ = 0;
              $122 = (invoke_ii(430,($121|0))|0);
              $123 = __THREW__; __THREW__ = 0;
              $124 = $123&1;
              if ($124) {
               label = 28;
              } else {
               __THREW__ = 0;
               invoke_viii(431,($115|0),($119|0),($122|0));
               $125 = __THREW__; __THREW__ = 0;
               $126 = $125&1;
               if ($126) {
                label = 28;
               } else {
                __THREW__ = 0;
                $127 = (invoke_iii(432,($110|0),($42|0))|0);
                $128 = __THREW__; __THREW__ = 0;
                $129 = $128&1;
                if (!($129)) {
                 $130 = $127 ? 352 : 360;
                 __THREW__ = 0;
                 HEAP32[$vararg_buffer>>2] = $131;
                 $vararg_ptr1 = (($vararg_buffer) + 4|0);
                 HEAP32[$vararg_ptr1>>2] = $85;
                 $vararg_ptr2 = (($vararg_buffer) + 8|0);
                 HEAP32[$vararg_ptr2>>2] = $88;
                 $vararg_ptr3 = (($vararg_buffer) + 12|0);
                 HEAP32[$vararg_ptr3>>2] = $109;
                 $vararg_ptr4 = (($vararg_buffer) + 16|0);
                 HEAP32[$vararg_ptr4>>2] = $130;
                 (invoke_iii(433,(200|0),($vararg_buffer|0))|0);
                 $132 = __THREW__; __THREW__ = 0;
                 $133 = $132&1;
                 if (!($133)) {
                  __THREW__ = 0;
                  invoke_vi(415,($42|0));
                  $134 = __THREW__; __THREW__ = 0;
                  $135 = $134&1;
                  if ($135) {
                   label = 28;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vi(415,($41|0));
                  $136 = __THREW__; __THREW__ = 0;
                  $137 = $136&1;
                  if ($137) {
                   label = 27;
                   break L14;
                  }
                  __THREW__ = 0;
                  invoke_vi(415,($40|0));
                  $138 = __THREW__; __THREW__ = 0;
                  $139 = $138&1;
                  if ($139) {
                   label = 26;
                   break L4;
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($37);
                  HEAP32[176>>2] = 0;
                  $156 = (__ZN4Demo3getEv()|0);
                  $157 = HEAP32[$156>>2]|0;
                  $158 = (($157) + 8|0);
                  $159 = HEAP32[$158>>2]|0;
                  $160 = (($43) + 48|0);
                  $161 = +HEAPF32[$160>>2];
                  FUNCTION_TABLE_vid[$159 & 63]($156,$161);
                  _glfwSwapBuffers();
                  $162 = (__ZN6Solver3getEv()|0);
                  $163 = HEAP32[$162>>2]|0;
                  $164 = (($163) + 12|0);
                  $165 = HEAP32[$164>>2]|0;
                  $166 = (($43) + 48|0);
                  $167 = +HEAPF32[$166>>2];
                  $168 = (($43) + 52|0);
                  $169 = +HEAPF32[$168>>2];
                  FUNCTION_TABLE_vidd[$165 & 1023]($162,$167,$169);
                  $170 = (__ZN4Demo3getEv()|0);
                  $171 = HEAP32[$170>>2]|0;
                  $172 = (($171) + 12|0);
                  $173 = HEAP32[$172>>2]|0;
                  FUNCTION_TABLE_vi[$173 & 1023]($170);
                  _glfwPollEvents();
                  $174 = (($43) + 52|0);
                  $175 = +HEAPF32[$174>>2];
                  $176 = (($43) + 48|0);
                  $177 = +HEAPF32[$176>>2];
                  $178 = $177 + $175;
                  HEAPF32[$176>>2] = $178;
                  $179 = HEAP32[192>>2]|0;
                  $180 = (($179) + 1)|0;
                  HEAP32[192>>2] = $180;
                  STACKTOP = sp;return;
                 }
                }
                $146 = ___cxa_find_matching_catch(-1,-1)|0;
                $147 = tempRet0;
                $38 = $146;
                $39 = $147;
                __THREW__ = 0;
                invoke_vi(415,($42|0));
                $148 = __THREW__; __THREW__ = 0;
                $149 = $148&1;
                if ($149) {
                 $183 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                 $184 = tempRet0;
                 ___clang_call_terminate($183);
                 // unreachable;
                } else {
                 break;
                }
               }
              }
             }
            }
           } while(0);
           if ((label|0) == 28) {
            $144 = ___cxa_find_matching_catch(-1,-1)|0;
            $145 = tempRet0;
            $38 = $144;
            $39 = $145;
           }
           __THREW__ = 0;
           invoke_vi(415,($41|0));
           $150 = __THREW__; __THREW__ = 0;
           $151 = $150&1;
           if ($151) {
            $183 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
            $184 = tempRet0;
            ___clang_call_terminate($183);
            // unreachable;
           } else {
            break;
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 27) {
       $142 = ___cxa_find_matching_catch(-1,-1)|0;
       $143 = tempRet0;
       $38 = $142;
       $39 = $143;
      }
      __THREW__ = 0;
      invoke_vi(415,($40|0));
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       $183 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $184 = tempRet0;
       ___clang_call_terminate($183);
       // unreachable;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $140 = ___cxa_find_matching_catch(-1,-1)|0;
  $141 = tempRet0;
  $38 = $140;
  $39 = $141;
 }
 __THREW__ = 0;
 invoke_vi(415,($37|0));
 $154 = __THREW__; __THREW__ = 0;
 $155 = $154&1;
 if ($155) {
  $183 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $184 = tempRet0;
  ___clang_call_terminate($183);
  // unreachable;
 }
 $181 = $38;
 $182 = $39;
 ___resumeException($181|0);
 // unreachable;
}
function __ZN11Application3runEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN11Application20setupLorenzAttractorEv($1);
 _emscripten_set_main_loop((434|0),-1,0);
 STACKTOP = sp;return;
}
function __ZN11Application20setupLorenzAttractorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color = 0;
 var $i = 0, $idx = 0, $j = 0, $k = 0, $lifetime = 0, $nParticles = 0, $nX = 0, $nY = 0, $nZ = 0, $onePiece = 0, $pos = 0, $side = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $32 = sp + 124|0;
 $38 = sp + 148|0;
 $103 = sp + 440|0;
 $106 = sp + 460|0;
 $107 = sp + 472|0;
 $108 = sp + 484|0;
 $109 = sp + 496|0;
 $110 = sp + 508|0;
 $111 = sp + 520|0;
 $112 = sp + 16|0;
 $113 = sp + 4|0;
 $114 = sp + 236|0;
 $115 = sp + 556|0;
 $116 = sp + 252|0;
 $102 = $this;
 $117 = $102;
 $118 = (($117) + 48|0);
 HEAPF32[$118>>2] = 0.0;
 $119 = (($117) + 52|0);
 HEAPF32[$119>>2] = 0.0166666675359010696411;
 $nX = 128;
 $nY = 128;
 $nZ = 128;
 $120 = $nX;
 $121 = $nY;
 $122 = Math_imul($120, $121)|0;
 $123 = $nZ;
 $124 = Math_imul($122, $123)|0;
 $nParticles = $124;
 $125 = (__ZN6global3parEv()|0);
 $100 = $103;
 $101 = 280;
 $126 = $100;
 $127 = $101;
 $98 = $126;
 $99 = $127;
 $128 = $98;
 $97 = $128;
 $129 = $97;
 $96 = $129;
 $130 = $96;
 $95 = $130;
 $131 = $95;
 $94 = $131;
 $132 = $99;
 $133 = $99;
 $93 = $133;
 $134 = $93;
 $135 = (_strlen(($134|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($128,$132,$135);
 $136 = $nParticles;
 __THREW__ = 0;
 invoke_viii(435,($125|0),($103|0),($136|0));
 $137 = __THREW__; __THREW__ = 0;
 $138 = $137&1;
 if ($138) {
  $240 = ___cxa_find_matching_catch(-1,-1)|0;
  $241 = tempRet0;
  $104 = $240;
  $105 = $241;
  __THREW__ = 0;
  invoke_vi(415,($103|0));
  $242 = __THREW__; __THREW__ = 0;
  $243 = $242&1;
  if ($243) {
   $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $418 = tempRet0;
   ___clang_call_terminate($417);
   // unreachable;
  }
  $415 = $104;
  $416 = $105;
  ___resumeException($415|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 $139 = (__ZN6global3parEv()|0);
 $91 = $106;
 $92 = 368;
 $140 = $91;
 $141 = $92;
 $89 = $140;
 $90 = $141;
 $142 = $89;
 $88 = $142;
 $143 = $88;
 $87 = $143;
 $144 = $87;
 $86 = $144;
 $145 = $86;
 $85 = $145;
 $146 = $90;
 $147 = $90;
 $84 = $147;
 $148 = $84;
 $149 = (_strlen(($148|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($142,$146,$149);
 $82 = $107;
 $83 = 392;
 $150 = $82;
 $151 = $83;
 $80 = $150;
 $81 = $151;
 $152 = $80;
 $79 = $152;
 $153 = $79;
 $78 = $153;
 $154 = $78;
 $77 = $154;
 $155 = $77;
 $76 = $155;
 $156 = $81;
 $157 = $81;
 $75 = $157;
 $158 = $75;
 __THREW__ = 0;
 $159 = (invoke_ii(430,($158|0))|0);
 $160 = __THREW__; __THREW__ = 0;
 $161 = $160&1;
 do {
  if ($161) {
   label = 21;
  } else {
   __THREW__ = 0;
   invoke_viii(431,($152|0),($156|0),($159|0));
   $162 = __THREW__; __THREW__ = 0;
   $163 = $162&1;
   if ($163) {
    label = 21;
   } else {
    __THREW__ = 0;
    invoke_viii(436,($139|0),($106|0),($107|0));
    $164 = __THREW__; __THREW__ = 0;
    $165 = $164&1;
    if ($165) {
     $246 = ___cxa_find_matching_catch(-1,-1)|0;
     $247 = tempRet0;
     $104 = $246;
     $105 = $247;
     __THREW__ = 0;
     invoke_vi(415,($107|0));
     $248 = __THREW__; __THREW__ = 0;
     $249 = $248&1;
     if ($249) {
      $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $418 = tempRet0;
      ___clang_call_terminate($417);
      // unreachable;
     } else {
      break;
     }
    }
    __THREW__ = 0;
    invoke_vi(415,($107|0));
    $166 = __THREW__; __THREW__ = 0;
    $167 = $166&1;
    if ($167) {
     label = 21;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($106);
     $168 = (__ZN6global3parEv()|0);
     $73 = $108;
     $74 = 416;
     $169 = $73;
     $170 = $74;
     $71 = $169;
     $72 = $170;
     $171 = $71;
     $70 = $171;
     $172 = $70;
     $69 = $172;
     $173 = $69;
     $68 = $173;
     $174 = $68;
     $67 = $174;
     $175 = $72;
     $176 = $72;
     $66 = $176;
     $177 = $66;
     $178 = (_strlen(($177|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($171,$175,$178);
     $64 = $109;
     $65 = 440;
     $179 = $64;
     $180 = $65;
     $62 = $179;
     $63 = $180;
     $181 = $62;
     $61 = $181;
     $182 = $61;
     $60 = $182;
     $183 = $60;
     $59 = $183;
     $184 = $59;
     $58 = $184;
     $185 = $63;
     $186 = $63;
     $57 = $186;
     $187 = $57;
     __THREW__ = 0;
     $188 = (invoke_ii(430,($187|0))|0);
     $189 = __THREW__; __THREW__ = 0;
     $190 = $189&1;
     do {
      if ($190) {
       label = 26;
      } else {
       __THREW__ = 0;
       invoke_viii(431,($181|0),($185|0),($188|0));
       $191 = __THREW__; __THREW__ = 0;
       $192 = $191&1;
       if ($192) {
        label = 26;
       } else {
        __THREW__ = 0;
        invoke_viii(436,($168|0),($108|0),($109|0));
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         $254 = ___cxa_find_matching_catch(-1,-1)|0;
         $255 = tempRet0;
         $104 = $254;
         $105 = $255;
         __THREW__ = 0;
         invoke_vi(415,($109|0));
         $256 = __THREW__; __THREW__ = 0;
         $257 = $256&1;
         if ($257) {
          $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
          $418 = tempRet0;
          ___clang_call_terminate($417);
          // unreachable;
         } else {
          break;
         }
        }
        __THREW__ = 0;
        invoke_vi(415,($109|0));
        $195 = __THREW__; __THREW__ = 0;
        $196 = $195&1;
        if ($196) {
         label = 26;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($108);
         $197 = (__ZN6global3parEv()|0);
         $55 = $110;
         $56 = 464;
         $198 = $55;
         $199 = $56;
         $53 = $198;
         $54 = $199;
         $200 = $53;
         $52 = $200;
         $201 = $52;
         $51 = $201;
         $202 = $51;
         $50 = $202;
         $203 = $50;
         $49 = $203;
         $204 = $54;
         $205 = $54;
         $48 = $205;
         $206 = $48;
         $207 = (_strlen(($206|0))|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($200,$204,$207);
         $46 = $111;
         $47 = 480;
         $208 = $46;
         $209 = $47;
         $44 = $208;
         $45 = $209;
         $210 = $44;
         $43 = $210;
         $211 = $43;
         $42 = $211;
         $212 = $42;
         $41 = $212;
         $213 = $41;
         $40 = $213;
         $214 = $45;
         $215 = $45;
         $39 = $215;
         $216 = $39;
         __THREW__ = 0;
         $217 = (invoke_ii(430,($216|0))|0);
         $218 = __THREW__; __THREW__ = 0;
         $219 = $218&1;
         do {
          if ($219) {
           label = 31;
          } else {
           __THREW__ = 0;
           invoke_viii(431,($210|0),($214|0),($217|0));
           $220 = __THREW__; __THREW__ = 0;
           $221 = $220&1;
           if ($221) {
            label = 31;
           } else {
            __THREW__ = 0;
            invoke_viii(436,($197|0),($110|0),($111|0));
            $222 = __THREW__; __THREW__ = 0;
            $223 = $222&1;
            if ($223) {
             $262 = ___cxa_find_matching_catch(-1,-1)|0;
             $263 = tempRet0;
             $104 = $262;
             $105 = $263;
             __THREW__ = 0;
             invoke_vi(415,($111|0));
             $264 = __THREW__; __THREW__ = 0;
             $265 = $264&1;
             if ($265) {
              $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $418 = tempRet0;
              ___clang_call_terminate($417);
              // unreachable;
             } else {
              break;
             }
            }
            __THREW__ = 0;
            invoke_vi(415,($111|0));
            $224 = __THREW__; __THREW__ = 0;
            $225 = $224&1;
            if ($225) {
             label = 31;
            } else {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($110);
             $36 = $38;
             $37 = -1;
             $226 = $36;
             $227 = $37;
             $34 = $226;
             $35 = $227;
             $228 = $34;
             HEAP32[$228>>2] = 0;
             $229 = HEAP32[$38>>2]|0;
             HEAP32[$112>>2] = $229;
             $33 = $112;
             $onePiece = 0;
             $230 = $nParticles;
             $231 = ($230*9)|0;
             $232 = $231<<2;
             $233 = (_malloc($232)|0);
             $onePiece = $233;
             $234 = $onePiece;
             $30 = $32;
             $31 = -1;
             $235 = $30;
             $236 = $31;
             $28 = $235;
             $29 = $236;
             $237 = $28;
             HEAP32[$237>>2] = 0;
             $238 = HEAP32[$32>>2]|0;
             HEAP32[$113>>2] = $238;
             $27 = $113;
             $239 = ($234|0)==(0|0);
             if ($239) {
              __ZN5error8throw_exEPKcS1_i(504,72,408);
             }
             $268 = $onePiece;
             $pos = $268;
             $269 = $pos;
             $270 = $nParticles;
             $271 = $270<<2;
             $272 = (($269) + ($271<<2)|0);
             $color = $272;
             $273 = $pos;
             $274 = $nParticles;
             $275 = $274<<3;
             $276 = (($273) + ($275<<2)|0);
             $lifetime = $276;
             $277 = $color;
             $278 = $nParticles;
             $279 = $278<<2;
             $280 = $279<<2;
             _memset(($277|0),0,($280|0))|0;
             $side = 100.0;
             $i = 0;
             while(1) {
              $281 = $i;
              $282 = $nX;
              $283 = ($281|0)<($282|0);
              if (!($283)) {
               break;
              }
              $j = 0;
              while(1) {
               $284 = $j;
               $285 = $nY;
               $286 = ($284|0)<($285|0);
               if (!($286)) {
                break;
               }
               $k = 0;
               while(1) {
                $287 = $k;
                $288 = $nZ;
                $289 = ($287|0)<($288|0);
                if (!($289)) {
                 break;
                }
                $290 = $i;
                $291 = $nY;
                $292 = Math_imul($290, $291)|0;
                $293 = $j;
                $294 = (($292) + ($293))|0;
                $295 = $nZ;
                $296 = Math_imul($294, $295)|0;
                $297 = $k;
                $298 = (($296) + ($297))|0;
                $idx = $298;
                $299 = (_rand()|0);
                $300 = (+($299|0));
                $301 = 30.0 * $300;
                $302 = $301 / 2147483648.0;
                $303 = 0.0 + $302;
                $304 = $idx;
                $305 = $lifetime;
                $306 = (($305) + ($304<<2)|0);
                HEAPF32[$306>>2] = $303;
                $307 = $idx;
                $308 = $307<<2;
                $idx = $308;
                $309 = $side;
                $310 = $i;
                $311 = $310<<1;
                $312 = $nX;
                $313 = (($311) - ($312))|0;
                $314 = (+($313|0));
                $315 = $309 * $314;
                $316 = $nX;
                $317 = (+($316|0));
                $318 = $315 / $317;
                $319 = $idx;
                $320 = (($319) + 0)|0;
                $321 = $pos;
                $322 = (($321) + ($320<<2)|0);
                HEAPF32[$322>>2] = $318;
                $323 = $side;
                $324 = $j;
                $325 = $324<<1;
                $326 = $nY;
                $327 = (($325) - ($326))|0;
                $328 = (+($327|0));
                $329 = $323 * $328;
                $330 = $nY;
                $331 = (+($330|0));
                $332 = $329 / $331;
                $333 = $idx;
                $334 = (($333) + 1)|0;
                $335 = $pos;
                $336 = (($335) + ($334<<2)|0);
                HEAPF32[$336>>2] = $332;
                $337 = $side;
                $338 = $k;
                $339 = $338<<1;
                $340 = $nZ;
                $341 = (($339) - ($340))|0;
                $342 = (+($341|0));
                $343 = $337 * $342;
                $344 = $nZ;
                $345 = (+($344|0));
                $346 = $343 / $345;
                $347 = $idx;
                $348 = (($347) + 2)|0;
                $349 = $pos;
                $350 = (($349) + ($348<<2)|0);
                HEAPF32[$350>>2] = $346;
                $351 = $idx;
                $352 = (($351) + 3)|0;
                $353 = $pos;
                $354 = (($353) + ($352<<2)|0);
                HEAPF32[$354>>2] = 1.0;
                $355 = $k;
                $356 = (($355) + 1)|0;
                $k = $356;
               }
               $357 = $j;
               $358 = (($357) + 1)|0;
               $j = $358;
              }
              $359 = $i;
              $360 = (($359) + 1)|0;
              $i = $360;
             }
             $361 = (__ZN6global3parEv()|0);
             $25 = $114;
             $26 = 536;
             $362 = $25;
             $363 = $26;
             $23 = $362;
             $24 = $363;
             $364 = $23;
             $22 = $364;
             $365 = $22;
             $21 = $365;
             $366 = $21;
             $20 = $366;
             $367 = $20;
             $19 = $367;
             $368 = $24;
             $369 = $24;
             $18 = $369;
             $370 = $18;
             $371 = (_strlen(($370|0))|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($364,$368,$371);
             $372 = $pos;
             __THREW__ = 0;
             invoke_viii(437,($361|0),($114|0),($372|0));
             $373 = __THREW__; __THREW__ = 0;
             $374 = $373&1;
             if ($374) {
              $403 = ___cxa_find_matching_catch(-1,-1)|0;
              $404 = tempRet0;
              $104 = $403;
              $105 = $404;
              __THREW__ = 0;
              invoke_vi(415,($114|0));
              $405 = __THREW__; __THREW__ = 0;
              $406 = $405&1;
              if ($406) {
               $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
               $418 = tempRet0;
               ___clang_call_terminate($417);
               // unreachable;
              }
              $415 = $104;
              $416 = $105;
              ___resumeException($415|0);
              // unreachable;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($114);
             $375 = (__ZN6global3parEv()|0);
             $16 = $115;
             $17 = 544;
             $376 = $16;
             $377 = $17;
             $14 = $376;
             $15 = $377;
             $378 = $14;
             $13 = $378;
             $379 = $13;
             $12 = $379;
             $380 = $12;
             $11 = $380;
             $381 = $11;
             $10 = $381;
             $382 = $15;
             $383 = $15;
             $9 = $383;
             $384 = $9;
             $385 = (_strlen(($384|0))|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($378,$382,$385);
             $386 = $color;
             __THREW__ = 0;
             invoke_viii(437,($375|0),($115|0),($386|0));
             $387 = __THREW__; __THREW__ = 0;
             $388 = $387&1;
             if ($388) {
              $407 = ___cxa_find_matching_catch(-1,-1)|0;
              $408 = tempRet0;
              $104 = $407;
              $105 = $408;
              __THREW__ = 0;
              invoke_vi(415,($115|0));
              $409 = __THREW__; __THREW__ = 0;
              $410 = $409&1;
              if ($410) {
               $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
               $418 = tempRet0;
               ___clang_call_terminate($417);
               // unreachable;
              }
              $415 = $104;
              $416 = $105;
              ___resumeException($415|0);
              // unreachable;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($115);
             $389 = (__ZN6global3parEv()|0);
             $7 = $116;
             $8 = 552;
             $390 = $7;
             $391 = $8;
             $5 = $390;
             $6 = $391;
             $392 = $5;
             $4 = $392;
             $393 = $4;
             $3 = $393;
             $394 = $3;
             $2 = $394;
             $395 = $2;
             $1 = $395;
             $396 = $6;
             $397 = $6;
             $0 = $397;
             $398 = $0;
             $399 = (_strlen(($398|0))|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($392,$396,$399);
             $400 = $lifetime;
             __THREW__ = 0;
             invoke_viii(437,($389|0),($116|0),($400|0));
             $401 = __THREW__; __THREW__ = 0;
             $402 = $401&1;
             if (!($402)) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($116);
              __ZN4Demo6createENS_4TypeE(0);
              __ZN6Solver6createENS_4TypeE(0);
              STACKTOP = sp;return;
             }
             $411 = ___cxa_find_matching_catch(-1,-1)|0;
             $412 = tempRet0;
             $104 = $411;
             $105 = $412;
             __THREW__ = 0;
             invoke_vi(415,($116|0));
             $413 = __THREW__; __THREW__ = 0;
             $414 = $413&1;
             if ($414) {
              $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $418 = tempRet0;
              ___clang_call_terminate($417);
              // unreachable;
             }
             $415 = $104;
             $416 = $105;
             ___resumeException($415|0);
             // unreachable;
            }
           }
          }
         } while(0);
         if ((label|0) == 31) {
          $260 = ___cxa_find_matching_catch(-1,-1)|0;
          $261 = tempRet0;
          $104 = $260;
          $105 = $261;
         }
         __THREW__ = 0;
         invoke_vi(415,($110|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
          $418 = tempRet0;
          ___clang_call_terminate($417);
          // unreachable;
         }
         $415 = $104;
         $416 = $105;
         ___resumeException($415|0);
         // unreachable;
        }
       }
      }
     } while(0);
     if ((label|0) == 26) {
      $252 = ___cxa_find_matching_catch(-1,-1)|0;
      $253 = tempRet0;
      $104 = $252;
      $105 = $253;
     }
     __THREW__ = 0;
     invoke_vi(415,($108|0));
     $258 = __THREW__; __THREW__ = 0;
     $259 = $258&1;
     if ($259) {
      $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $418 = tempRet0;
      ___clang_call_terminate($417);
      // unreachable;
     }
     $415 = $104;
     $416 = $105;
     ___resumeException($415|0);
     // unreachable;
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $244 = ___cxa_find_matching_catch(-1,-1)|0;
  $245 = tempRet0;
  $104 = $244;
  $105 = $245;
 }
 __THREW__ = 0;
 invoke_vi(415,($106|0));
 $250 = __THREW__; __THREW__ = 0;
 $251 = $250&1;
 if ($251) {
  $417 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $418 = tempRet0;
  ___clang_call_terminate($417);
  // unreachable;
 }
 $415 = $104;
 $416 = $105;
 ___resumeException($415|0);
 // unreachable;
}
function __ZN11Application11getRealTimeEv() {
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_glfwGetTime());
 $1 = $0;
 STACKTOP = sp;return (+$1);
}
function __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($this,$key,$def) {
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $__i1$i$i = 0;
 var $__i1$i$i1 = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $__i1$i$i1 = sp;
 $14 = sp + 16|0;
 $24 = sp + 172|0;
 $26 = sp + 60|0;
 $28 = sp + 124|0;
 $__i1$i$i = sp + 8|0;
 $31 = sp + 24|0;
 $34 = sp + 68|0;
 $it = sp + 136|0;
 $39 = sp + 84|0;
 $36 = $this;
 $37 = $key;
 $38 = $def;
 $40 = $36;
 $41 = $37;
 $32 = $40;
 $33 = $41;
 $42 = $32;
 $43 = $33;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($34,$42,$43);
 ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$31+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$34+3>>0]|0;
 $30 = $it;
 $44 = $30;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$31+3>>0]|0;
 $29 = $44;
 $45 = $29;
 ;HEAP32[$45+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $27 = $40;
 $46 = $27;
 $25 = $46;
 $22 = $24;
 $23 = -1;
 $47 = $22;
 $48 = $23;
 $20 = $47;
 $21 = $48;
 $49 = $20;
 HEAP32[$49>>2] = 0;
 $50 = HEAP32[$24>>2]|0;
 HEAP32[$26>>2] = $50;
 $15 = $26;
 $18 = $28;
 $19 = 0;
 $51 = $18;
 $52 = $19;
 $16 = $51;
 $17 = $52;
 $53 = $16;
 $54 = $17;
 HEAP32[$53>>2] = $54;
 ;HEAP8[$14+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$28+3>>0]|0;
 $13 = $39;
 $55 = $13;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$14+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$14+3>>0]|0;
 $12 = $55;
 $56 = $12;
 ;HEAP32[$56+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $4 = $it;
 $5 = $39;
 $57 = $4;
 $58 = $5;
 $2 = $57;
 $3 = $58;
 $59 = $2;
 $60 = $3;
 $0 = $59;
 $1 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($62|0)==($64|0);
 $66 = $65 ^ 1;
 if ($66) {
  $11 = $it;
  $67 = $11;
  $10 = $67;
  $68 = $10;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 8|0);
  $9 = $70;
  $71 = $9;
  $8 = $71;
  $72 = $8;
  $7 = $72;
  $73 = $7;
  $6 = $73;
  $74 = $6;
  $75 = (($74) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $35 = $76;
  $78 = $35;
  STACKTOP = sp;return ($78|0);
 } else {
  $77 = $38;
  $35 = $77;
  $78 = $35;
  STACKTOP = sp;return ($78|0);
 }
 return 0|0;
}
function __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($2,$3,0)|0);
 $5 = ($4|0)!=(0);
 $6 = $5 ? 1 : 0;
 STACKTOP = sp;return ($6|0);
}
function __ZNK11Application13getWindowSizeERiS0_($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $width;
 $2 = $height;
 $3 = $1;
 $4 = $2;
 _glfwGetWindowSize(($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZNK11Application14getCursorPos01ERfS0_($this,$x,$y) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $height = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $width = sp + 4|0;
 $height = sp;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 HEAP32[$width>>2] = -1;
 HEAP32[$height>>2] = -1;
 __ZNK11Application13getWindowSizeERiS0_($3,$width,$height);
 $4 = (($3) + 8|0);
 $5 = +HEAPF32[$4>>2];
 $6 = HEAP32[$width>>2]|0;
 $7 = (+($6|0));
 $8 = $5 / $7;
 $9 = $1;
 HEAPF32[$9>>2] = $8;
 $10 = (($3) + 12|0);
 $11 = +HEAPF32[$10>>2];
 $12 = HEAP32[$height>>2]|0;
 $13 = (+($12|0));
 $14 = $11 / $13;
 $15 = $2;
 HEAPF32[$15>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN11Application12setCursorRayEPfS0_($this,$origin,$dir) {
 $this = $this|0;
 $origin = $origin|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $origin;
 $2 = $dir;
 $3 = $0;
 $4 = (($3) + 16|0);
 $5 = $1;
 ;HEAP32[$4+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;
 $6 = (($3) + 32|0);
 $7 = $2;
 ;HEAP32[$6+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11Application12getCursorRayEPfS0_($this,$origin,$dir) {
 $this = $this|0;
 $origin = $origin|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $origin;
 $2 = $dir;
 $3 = $0;
 $4 = $1;
 $5 = (($3) + 16|0);
 ;HEAP32[$4+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;
 $6 = $2;
 $7 = (($3) + 32|0);
 ;HEAP32[$6+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($this,$key,$val) {
 $this = $this|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $val;
 $3 = $0;
 $4 = $2;
 $5 = $1;
 $6 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($3,$5)|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($this,$key,$val) {
 $this = $this|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $val;
 $3 = $0;
 $4 = (($3) + 60|0);
 $5 = $1;
 $6 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSC_($4,$5)|0);
 $7 = $2;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($6,$7)|0);
 STACKTOP = sp;return;
}
function __ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($this,$key,$ptr) {
 $this = $this|0;
 $key = $key|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $ptr;
 $3 = $0;
 $4 = $2;
 $5 = $4;
 $6 = (($3) + 80|0);
 $7 = $1;
 $8 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($6,$7)|0);
 HEAP32[$8>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0;
 var $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i17 = 0, $__tmp$i$i$i29 = 0, $__tmp$i$i$i9 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $7 = sp + 104|0;
 $10 = sp + 1078|0;
 $13 = sp + 144|0;
 $16 = sp + 1075|0;
 $__i1$i$i$i = sp + 128|0;
 $47 = sp + 72|0;
 $50 = sp + 260|0;
 $63 = sp + 8|0;
 $66 = sp + 1072|0;
 $69 = sp + 120|0;
 $72 = sp + 1079|0;
 $97 = sp + 56|0;
 $100 = sp + 1077|0;
 $103 = sp + 32|0;
 $106 = sp + 1074|0;
 $138 = sp + 628|0;
 $139 = sp + 88|0;
 $142 = sp + 660|0;
 $143 = sp + 664|0;
 $__t21$i$i$i = sp + 80|0;
 $146 = sp + 24|0;
 $149 = sp + 688|0;
 $__u1$i = sp + 64|0;
 $151 = sp + 48|0;
 $170 = sp;
 $173 = sp + 1076|0;
 $176 = sp + 16|0;
 $179 = sp + 1073|0;
 $__i1$i$i1 = sp + 40|0;
 $205 = sp + 136|0;
 $215 = sp + 972|0;
 $217 = sp + 980|0;
 $219 = sp + 1000|0;
 $__i1$i$i = sp + 112|0;
 $222 = sp + 96|0;
 $225 = sp + 576|0;
 $__i = sp + 156|0;
 $229 = sp + 1060|0;
 $__h = sp + 812|0;
 $230 = sp + 788|0;
 $231 = sp + 484|0;
 $__r = sp + 584|0;
 $234 = sp + 648|0;
 $227 = $this;
 $228 = $__k;
 $236 = $227;
 $237 = $228;
 $223 = $236;
 $224 = $237;
 $238 = $223;
 $239 = $224;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($225,$238,$239);
 ;HEAP8[$222+0>>0]=HEAP8[$225+0>>0]|0;HEAP8[$222+1>>0]=HEAP8[$225+1>>0]|0;HEAP8[$222+2>>0]=HEAP8[$225+2>>0]|0;HEAP8[$222+3>>0]=HEAP8[$225+3>>0]|0;
 $221 = $__i;
 $240 = $221;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$222+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$222+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$222+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$222+3>>0]|0;
 $220 = $240;
 $241 = $220;
 ;HEAP32[$241+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $218 = $236;
 $242 = $218;
 $216 = $242;
 $213 = $215;
 $214 = -1;
 $243 = $213;
 $244 = $214;
 $211 = $243;
 $212 = $244;
 $245 = $211;
 HEAP32[$245>>2] = 0;
 $246 = HEAP32[$215>>2]|0;
 HEAP32[$217>>2] = $246;
 $206 = $217;
 $209 = $219;
 $210 = 0;
 $247 = $209;
 $248 = $210;
 $207 = $247;
 $208 = $248;
 $249 = $207;
 $250 = $208;
 HEAP32[$249>>2] = $250;
 ;HEAP8[$205+0>>0]=HEAP8[$219+0>>0]|0;HEAP8[$205+1>>0]=HEAP8[$219+1>>0]|0;HEAP8[$205+2>>0]=HEAP8[$219+2>>0]|0;HEAP8[$205+3>>0]=HEAP8[$219+3>>0]|0;
 $204 = $229;
 $251 = $204;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$205+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$205+3>>0]|0;
 $203 = $251;
 $252 = $203;
 ;HEAP32[$252+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $201 = $__i;
 $202 = $229;
 $253 = $201;
 $254 = $202;
 $199 = $253;
 $200 = $254;
 $255 = $199;
 $256 = $200;
 $197 = $255;
 $198 = $256;
 $257 = $197;
 $258 = HEAP32[$257>>2]|0;
 $259 = $198;
 $260 = HEAP32[$259>>2]|0;
 $261 = ($258|0)==($260|0);
 $262 = $261 ^ 1;
 if ($262) {
  $162 = $__i;
  $263 = $162;
  $161 = $263;
  $264 = $161;
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + 8|0);
  $160 = $266;
  $267 = $160;
  $159 = $267;
  $268 = $159;
  $158 = $268;
  $269 = $158;
  $157 = $269;
  $270 = $157;
  $271 = (($270) + 12|0);
  $226 = $271;
  $489 = $226;
  STACKTOP = sp;return ($489|0);
 }
 $272 = $228;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSC_($231,$236,$272);
 $156 = $231;
 $273 = $156;
 $154 = $230;
 $155 = $273;
 $274 = $154;
 $275 = $155;
 $152 = $274;
 $153 = $275;
 $276 = $152;
 $277 = $153;
 HEAP32[$276>>2] = $277;
 ;HEAP8[$151+0>>0]=HEAP8[$230+0>>0]|0;HEAP8[$151+1>>0]=HEAP8[$230+1>>0]|0;HEAP8[$151+2>>0]=HEAP8[$230+2>>0]|0;HEAP8[$151+3>>0]=HEAP8[$230+3>>0]|0;
 $150 = $__h;
 $278 = $150;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$151+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$151+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$151+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$151+3>>0]|0;
 $148 = $278;
 $279 = $148;
 $147 = $__u1$i;
 $280 = $147;
 $281 = HEAP32[$280>>2]|0;
 $128 = $281;
 $282 = $128;
 $127 = $282;
 $283 = $127;
 $126 = $283;
 $284 = $126;
 $285 = HEAP32[$284>>2]|0;
 $__t$i$i$i = $285;
 $125 = $282;
 $286 = $125;
 $124 = $286;
 $287 = $124;
 HEAP32[$287>>2] = 0;
 $288 = $__t$i$i$i;
 $129 = $__u1$i;
 $289 = $129;
 $290 = HEAP32[$289>>2]|0;
 $132 = $290;
 $291 = $132;
 $131 = $291;
 $292 = $131;
 $130 = $292;
 $293 = $130;
 $294 = (($293) + 4|0);
 $133 = $294;
 $295 = $133;
 ;HEAP32[$149+0>>2]=HEAP32[$295+0>>2]|0;HEAP32[$149+4>>2]=HEAP32[$295+4>>2]|0;
 ;HEAP8[$146+0>>0]=HEAP8[$149+0>>0]|0;HEAP8[$146+1>>0]=HEAP8[$149+1>>0]|0;HEAP8[$146+2>>0]=HEAP8[$149+2>>0]|0;HEAP8[$146+3>>0]=HEAP8[$149+3>>0]|0;HEAP8[$146+4>>0]=HEAP8[$149+4>>0]|0;HEAP8[$146+5>>0]=HEAP8[$149+5>>0]|0;HEAP8[$146+6>>0]=HEAP8[$149+6>>0]|0;HEAP8[$146+7>>0]=HEAP8[$149+7>>0]|0;
 $144 = $279;
 $145 = $288;
 $296 = $144;
 $297 = $145;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$146+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$146+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$146+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$146+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$146+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$146+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$146+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$146+7>>0]|0;
 $141 = $296;
 HEAP32[$142>>2] = $297;
 $298 = $141;
 $140 = $142;
 $299 = $140;
 $300 = HEAP32[$299>>2]|0;
 $134 = $__t21$i$i$i;
 $301 = $134;
 ;HEAP32[$143+0>>2]=HEAP32[$301+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$301+4>>2]|0;
 ;HEAP8[$139+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$139+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$143+3>>0]|0;HEAP8[$139+4>>0]=HEAP8[$143+4>>0]|0;HEAP8[$139+5>>0]=HEAP8[$143+5>>0]|0;HEAP8[$139+6>>0]=HEAP8[$143+6>>0]|0;HEAP8[$139+7>>0]=HEAP8[$143+7>>0]|0;
 $137 = $298;
 HEAP32[$138>>2] = $300;
 $302 = $137;
 $136 = $138;
 $303 = $136;
 $304 = HEAP32[$303>>2]|0;
 HEAP32[$302>>2] = $304;
 $305 = (($302) + 4|0);
 $135 = $139;
 $306 = $135;
 ;HEAP32[$305+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$305+4>>2]=HEAP32[$306+4>>2]|0;
 $89 = $231;
 $307 = $89;
 $88 = $307;
 $308 = $88;
 $86 = $308;
 $87 = 0;
 $309 = $86;
 $85 = $309;
 $310 = $85;
 $84 = $310;
 $311 = $84;
 $312 = HEAP32[$311>>2]|0;
 $__tmp$i$i$i17 = $312;
 $313 = $87;
 $59 = $309;
 $314 = $59;
 $58 = $314;
 $315 = $58;
 HEAP32[$315>>2] = $313;
 $316 = $__tmp$i$i$i17;
 $317 = ($316|0)!=(0|0);
 if ($317) {
  $57 = $309;
  $318 = $57;
  $56 = $318;
  $319 = $56;
  $320 = (($319) + 4|0);
  $321 = $__tmp$i$i$i17;
  $80 = $320;
  $81 = $321;
  $322 = $80;
  $323 = (($322) + 5|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&1;
  if ($325) {
   $326 = HEAP32[$322>>2]|0;
   $327 = $81;
   $328 = (($327) + 8|0);
   $329 = (($328) + 12|0);
   $79 = $329;
   $330 = $79;
   $70 = $326;
   $71 = $330;
   $331 = $70;
   $332 = $71;
   ;HEAP8[$69+0>>0]=HEAP8[$72+0>>0]|0;
   $67 = $331;
   $68 = $332;
  }
  $336 = (($322) + 4|0);
  $337 = HEAP8[$336>>0]|0;
  $338 = $337&1;
  do {
   if ($338) {
    $339 = HEAP32[$322>>2]|0;
    $340 = $81;
    $341 = (($340) + 8|0);
    $60 = $341;
    $342 = $60;
    $64 = $339;
    $65 = $342;
    $343 = $64;
    $344 = $65;
    ;HEAP8[$63+0>>0]=HEAP8[$66+0>>0]|0;
    $61 = $343;
    $62 = $344;
    $345 = $62;
    __THREW__ = 0;
    invoke_vi(415,($345|0));
    $346 = __THREW__; __THREW__ = 0;
    $347 = $346&1;
    if ($347) {
     $333 = ___cxa_find_matching_catch(-1,-1)|0;
     $334 = tempRet0;
     $82 = $333;
     $83 = $334;
     $335 = $82;
     ___cxa_call_unexpected(($335|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $348 = $81;
  $349 = ($348|0)!=(0|0);
  if ($349) {
   $350 = HEAP32[$322>>2]|0;
   $351 = $81;
   $76 = $350;
   $77 = $351;
   $78 = 1;
   $352 = $76;
   $353 = $77;
   $354 = $78;
   $73 = $352;
   $74 = $353;
   $75 = $354;
   $355 = $74;
   __ZdlPv($355);
  }
 }
 $55 = $__h;
 $356 = $55;
 $54 = $356;
 $357 = $54;
 $53 = $357;
 $358 = $53;
 $359 = HEAP32[$358>>2]|0;
 __THREW__ = 0;
 invoke_viii(438,($234|0),($236|0),($359|0));
 $360 = __THREW__; __THREW__ = 0;
 $361 = $360&1;
 if ($361) {
  $438 = ___cxa_find_matching_catch(-1,-1)|0;
  $439 = tempRet0;
  $232 = $438;
  $233 = $439;
  $196 = $__h;
  $440 = $196;
  $195 = $440;
  $441 = $195;
  $193 = $441;
  $194 = 0;
  $442 = $193;
  $192 = $442;
  $443 = $192;
  $191 = $443;
  $444 = $191;
  $445 = HEAP32[$444>>2]|0;
  $__tmp$i$i$i = $445;
  $446 = $194;
  $166 = $442;
  $447 = $166;
  $165 = $447;
  $448 = $165;
  HEAP32[$448>>2] = $446;
  $449 = $__tmp$i$i$i;
  $450 = ($449|0)!=(0|0);
  if ($450) {
   $164 = $442;
   $451 = $164;
   $163 = $451;
   $452 = $163;
   $453 = (($452) + 4|0);
   $454 = $__tmp$i$i$i;
   $187 = $453;
   $188 = $454;
   $455 = $187;
   $456 = (($455) + 5|0);
   $457 = HEAP8[$456>>0]|0;
   $458 = $457&1;
   if ($458) {
    $459 = HEAP32[$455>>2]|0;
    $460 = $188;
    $461 = (($460) + 8|0);
    $462 = (($461) + 12|0);
    $186 = $462;
    $463 = $186;
    $177 = $459;
    $178 = $463;
    $464 = $177;
    $465 = $178;
    ;HEAP8[$176+0>>0]=HEAP8[$179+0>>0]|0;
    $174 = $464;
    $175 = $465;
   }
   $469 = (($455) + 4|0);
   $470 = HEAP8[$469>>0]|0;
   $471 = $470&1;
   do {
    if ($471) {
     $472 = HEAP32[$455>>2]|0;
     $473 = $188;
     $474 = (($473) + 8|0);
     $167 = $474;
     $475 = $167;
     $171 = $472;
     $172 = $475;
     $476 = $171;
     $477 = $172;
     ;HEAP8[$170+0>>0]=HEAP8[$173+0>>0]|0;
     $168 = $476;
     $169 = $477;
     $478 = $169;
     __THREW__ = 0;
     invoke_vi(415,($478|0));
     $479 = __THREW__; __THREW__ = 0;
     $480 = $479&1;
     if ($480) {
      $466 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $467 = tempRet0;
      $189 = $466;
      $190 = $467;
      $468 = $189;
      ___cxa_call_unexpected(($468|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $481 = $188;
   $482 = ($481|0)!=(0|0);
   if ($482) {
    $483 = HEAP32[$455>>2]|0;
    $484 = $188;
    $183 = $483;
    $184 = $484;
    $185 = 1;
    $485 = $183;
    $486 = $184;
    $487 = $185;
    $180 = $485;
    $181 = $486;
    $182 = $487;
    $488 = $181;
    __ZdlPv($488);
   }
  }
  $490 = $232;
  $491 = $233;
  ___resumeException($490|0);
  // unreachable;
 }
 $51 = $__r;
 $52 = $234;
 $362 = $51;
 $363 = $52;
 $48 = $362;
 $49 = $363;
 $364 = $48;
 $365 = $49;
 ;HEAP32[$50+0>>2]=HEAP32[$365+0>>2]|0;
 ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;HEAP8[$47+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$50+3>>0]|0;
 $46 = $364;
 $366 = $46;
 ;HEAP8[$__i1$i$i$i+0>>0]=HEAP8[$47+0>>0]|0;HEAP8[$__i1$i$i$i+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$__i1$i$i$i+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$__i1$i$i$i+3>>0]=HEAP8[$47+3>>0]|0;
 $45 = $366;
 $367 = $45;
 ;HEAP32[$367+0>>2]=HEAP32[$__i1$i$i$i+0>>2]|0;
 $368 = (($364) + 4|0);
 $369 = $49;
 $370 = (($369) + 4|0);
 $371 = HEAP8[$370>>0]|0;
 $372 = $371&1;
 $373 = $372&1;
 HEAP8[$368>>0] = $373;
 $44 = $__h;
 $374 = $44;
 $43 = $374;
 $375 = $43;
 $42 = $375;
 $376 = $42;
 $377 = HEAP32[$376>>2]|0;
 $__t$i = $377;
 $41 = $374;
 $378 = $41;
 $40 = $378;
 $379 = $40;
 HEAP32[$379>>2] = 0;
 $39 = $__r;
 $380 = $39;
 $38 = $380;
 $381 = $38;
 $382 = HEAP32[$381>>2]|0;
 $383 = (($382) + 8|0);
 $37 = $383;
 $384 = $37;
 $36 = $384;
 $385 = $36;
 $35 = $385;
 $386 = $35;
 $34 = $386;
 $387 = $34;
 $388 = (($387) + 12|0);
 $226 = $388;
 $235 = 1;
 $33 = $__h;
 $389 = $33;
 $32 = $389;
 $390 = $32;
 $30 = $390;
 $31 = 0;
 $391 = $30;
 $29 = $391;
 $392 = $29;
 $28 = $392;
 $393 = $28;
 $394 = HEAP32[$393>>2]|0;
 $__tmp$i$i$i29 = $394;
 $395 = $31;
 $3 = $391;
 $396 = $3;
 $2 = $396;
 $397 = $2;
 HEAP32[$397>>2] = $395;
 $398 = $__tmp$i$i$i29;
 $399 = ($398|0)!=(0|0);
 if ($399) {
  $1 = $391;
  $400 = $1;
  $0 = $400;
  $401 = $0;
  $402 = (($401) + 4|0);
  $403 = $__tmp$i$i$i29;
  $24 = $402;
  $25 = $403;
  $404 = $24;
  $405 = (($404) + 5|0);
  $406 = HEAP8[$405>>0]|0;
  $407 = $406&1;
  if ($407) {
   $408 = HEAP32[$404>>2]|0;
   $409 = $25;
   $410 = (($409) + 8|0);
   $411 = (($410) + 12|0);
   $23 = $411;
   $412 = $23;
   $14 = $408;
   $15 = $412;
   $413 = $14;
   $414 = $15;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $11 = $413;
   $12 = $414;
  }
  $418 = (($404) + 4|0);
  $419 = HEAP8[$418>>0]|0;
  $420 = $419&1;
  do {
   if ($420) {
    $421 = HEAP32[$404>>2]|0;
    $422 = $25;
    $423 = (($422) + 8|0);
    $4 = $423;
    $424 = $4;
    $8 = $421;
    $9 = $424;
    $425 = $8;
    $426 = $9;
    ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
    $5 = $425;
    $6 = $426;
    $427 = $6;
    __THREW__ = 0;
    invoke_vi(415,($427|0));
    $428 = __THREW__; __THREW__ = 0;
    $429 = $428&1;
    if ($429) {
     $415 = ___cxa_find_matching_catch(-1,-1)|0;
     $416 = tempRet0;
     $26 = $415;
     $27 = $416;
     $417 = $26;
     ___cxa_call_unexpected(($417|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $430 = $25;
  $431 = ($430|0)!=(0|0);
  if ($431) {
   $432 = HEAP32[$404>>2]|0;
   $433 = $25;
   $20 = $432;
   $21 = $433;
   $22 = 1;
   $434 = $20;
   $435 = $21;
   $436 = $22;
   $17 = $434;
   $18 = $435;
   $19 = $436;
   $437 = $18;
   __ZdlPv($437);
  }
 }
 $489 = $226;
 STACKTOP = sp;return ($489|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__d1$i = 0, $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i4$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i$i = 0, $__t21$i$i$i27 = 0, $__t21$i$i$i5$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i10 = 0, $__tmp$i$i$i15$i = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i36 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i6$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568|0;
 $7 = sp + 16|0;
 $10 = sp + 1558|0;
 $13 = sp + 216|0;
 $16 = sp + 1561|0;
 $48 = sp + 312|0;
 $49 = sp + 200|0;
 $52 = sp + 328|0;
 $53 = sp + 336|0;
 $__t21$i$i$i27 = sp + 136|0;
 $56 = sp + 72|0;
 $59 = sp + 368|0;
 $__u1$i = sp + 88|0;
 $61 = sp + 176|0;
 $74 = sp + 40|0;
 $77 = sp + 1562|0;
 $80 = sp + 32|0;
 $83 = sp + 1559|0;
 $115 = sp + 608|0;
 $116 = sp + 192|0;
 $119 = sp + 624|0;
 $120 = sp + 632|0;
 $__t21$i$i$i5$i = sp + 232|0;
 $123 = sp + 56|0;
 $126 = sp + 1192|0;
 $__u1$i6$i = sp + 184|0;
 $128 = sp + 208|0;
 $148 = sp + 640|0;
 $149 = sp + 224|0;
 $152 = sp + 772|0;
 $153 = sp + 776|0;
 $__t21$i$i$i$i = sp + 80|0;
 $156 = sp + 96|0;
 $159 = sp + 456|0;
 $__u1$i$i = sp + 112|0;
 $161 = sp + 48|0;
 $167 = sp + 828|0;
 $168 = sp + 832|0;
 $169 = sp + 844|0;
 $182 = sp + 152|0;
 $185 = sp + 1565|0;
 $188 = sp + 168|0;
 $191 = sp + 1564|0;
 $226 = sp + 120|0;
 $229 = sp + 1557|0;
 $232 = sp + 128|0;
 $235 = sp + 1563|0;
 $262 = sp + 1256|0;
 $263 = sp + 160|0;
 $266 = sp + 1268|0;
 $267 = sp + 1272|0;
 $__t21$i$i$i = sp + 144|0;
 $270 = sp;
 $273 = sp + 1296|0;
 $274 = sp + 1304|0;
 $__d1$i = sp + 8|0;
 $277 = sp + 104|0;
 $285 = sp + 64|0;
 $288 = sp + 1560|0;
 $291 = sp + 24|0;
 $294 = sp + 1556|0;
 $__h = sp + 1088|0;
 $326 = sp + 1488|0;
 $329 = sp + 444|0;
 $330 = sp + 1172|0;
 $324 = $this;
 $325 = $__k;
 $332 = $324;
 $323 = $332;
 $333 = $323;
 $334 = (($333) + 8|0);
 $322 = $334;
 $335 = $322;
 $321 = $335;
 $336 = $321;
 $__na = $336;
 $337 = $__na;
 $319 = $337;
 $320 = 1;
 $338 = $319;
 $339 = $320;
 $316 = $338;
 $317 = $339;
 $318 = 0;
 $340 = $317;
 $341 = ($340*24)|0;
 $342 = (__Znwj($341)|0);
 $343 = $__na;
 $314 = $326;
 $315 = $343;
 $344 = $314;
 $345 = $315;
 $312 = $344;
 $313 = $345;
 $346 = $312;
 $347 = $313;
 HEAP32[$346>>2] = $347;
 $348 = (($346) + 4|0);
 HEAP8[$348>>0] = 0;
 $349 = (($346) + 5|0);
 HEAP8[$349>>0] = 0;
 ;HEAP8[$277+0>>0]=HEAP8[$326+0>>0]|0;HEAP8[$277+1>>0]=HEAP8[$326+1>>0]|0;HEAP8[$277+2>>0]=HEAP8[$326+2>>0]|0;HEAP8[$277+3>>0]=HEAP8[$326+3>>0]|0;HEAP8[$277+4>>0]=HEAP8[$326+4>>0]|0;HEAP8[$277+5>>0]=HEAP8[$326+5>>0]|0;HEAP8[$277+6>>0]=HEAP8[$326+6>>0]|0;HEAP8[$277+7>>0]=HEAP8[$326+7>>0]|0;
 $275 = $__h;
 $276 = $342;
 $350 = $275;
 $351 = $276;
 ;HEAP8[$__d1$i+0>>0]=HEAP8[$277+0>>0]|0;HEAP8[$__d1$i+1>>0]=HEAP8[$277+1>>0]|0;HEAP8[$__d1$i+2>>0]=HEAP8[$277+2>>0]|0;HEAP8[$__d1$i+3>>0]=HEAP8[$277+3>>0]|0;HEAP8[$__d1$i+4>>0]=HEAP8[$277+4>>0]|0;HEAP8[$__d1$i+5>>0]=HEAP8[$277+5>>0]|0;HEAP8[$__d1$i+6>>0]=HEAP8[$277+6>>0]|0;HEAP8[$__d1$i+7>>0]=HEAP8[$277+7>>0]|0;
 $272 = $350;
 HEAP32[$273>>2] = $351;
 $352 = $272;
 $271 = $273;
 $353 = $271;
 $354 = HEAP32[$353>>2]|0;
 $257 = $__d1$i;
 $355 = $257;
 ;HEAP32[$274+0>>2]=HEAP32[$355+0>>2]|0;HEAP32[$274+4>>2]=HEAP32[$355+4>>2]|0;
 ;HEAP8[$270+0>>0]=HEAP8[$274+0>>0]|0;HEAP8[$270+1>>0]=HEAP8[$274+1>>0]|0;HEAP8[$270+2>>0]=HEAP8[$274+2>>0]|0;HEAP8[$270+3>>0]=HEAP8[$274+3>>0]|0;HEAP8[$270+4>>0]=HEAP8[$274+4>>0]|0;HEAP8[$270+5>>0]=HEAP8[$274+5>>0]|0;HEAP8[$270+6>>0]=HEAP8[$274+6>>0]|0;HEAP8[$270+7>>0]=HEAP8[$274+7>>0]|0;
 $268 = $352;
 $269 = $354;
 $356 = $268;
 $357 = $269;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$270+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$270+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$270+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$270+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$270+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$270+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$270+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$270+7>>0]|0;
 $265 = $356;
 HEAP32[$266>>2] = $357;
 $358 = $265;
 $264 = $266;
 $359 = $264;
 $360 = HEAP32[$359>>2]|0;
 $258 = $__t21$i$i$i;
 $361 = $258;
 ;HEAP32[$267+0>>2]=HEAP32[$361+0>>2]|0;HEAP32[$267+4>>2]=HEAP32[$361+4>>2]|0;
 ;HEAP8[$263+0>>0]=HEAP8[$267+0>>0]|0;HEAP8[$263+1>>0]=HEAP8[$267+1>>0]|0;HEAP8[$263+2>>0]=HEAP8[$267+2>>0]|0;HEAP8[$263+3>>0]=HEAP8[$267+3>>0]|0;HEAP8[$263+4>>0]=HEAP8[$267+4>>0]|0;HEAP8[$263+5>>0]=HEAP8[$267+5>>0]|0;HEAP8[$263+6>>0]=HEAP8[$267+6>>0]|0;HEAP8[$263+7>>0]=HEAP8[$267+7>>0]|0;
 $261 = $358;
 HEAP32[$262>>2] = $360;
 $362 = $261;
 $260 = $262;
 $363 = $260;
 $364 = HEAP32[$363>>2]|0;
 HEAP32[$362>>2] = $364;
 $365 = (($362) + 4|0);
 $259 = $263;
 $366 = $259;
 ;HEAP32[$365+0>>2]=HEAP32[$366+0>>2]|0;HEAP32[$365+4>>2]=HEAP32[$366+4>>2]|0;
 $367 = $__na;
 $256 = $__h;
 $368 = $256;
 $255 = $368;
 $369 = $255;
 $254 = $369;
 $370 = $254;
 $371 = HEAP32[$370>>2]|0;
 $372 = (($371) + 8|0);
 $253 = $372;
 $373 = $253;
 $374 = $325;
 $216 = $367;
 $217 = $373;
 $218 = $374;
 $375 = $217;
 $376 = ($375|0)==(0|0);
 do {
  if (!($376)) {
   $377 = $218;
   __THREW__ = 0;
   invoke_vii(439,($375|0),($377|0));
   $378 = __THREW__; __THREW__ = 0;
   $379 = $378&1;
   if (!($379)) {
    break;
   }
   $649 = ___cxa_find_matching_catch(-1,-1)|0;
   $650 = tempRet0;
   $327 = $649;
   $328 = $650;
   $311 = $__h;
   $651 = $311;
   $310 = $651;
   $652 = $310;
   $308 = $652;
   $309 = 0;
   $653 = $308;
   $307 = $653;
   $654 = $307;
   $306 = $654;
   $655 = $306;
   $656 = HEAP32[$655>>2]|0;
   $__tmp$i$i$i = $656;
   $657 = $309;
   $281 = $653;
   $658 = $281;
   $280 = $658;
   $659 = $280;
   HEAP32[$659>>2] = $657;
   $660 = $__tmp$i$i$i;
   $661 = ($660|0)!=(0|0);
   if ($661) {
    $279 = $653;
    $662 = $279;
    $278 = $662;
    $663 = $278;
    $664 = (($663) + 4|0);
    $665 = $__tmp$i$i$i;
    $302 = $664;
    $303 = $665;
    $666 = $302;
    $667 = (($666) + 5|0);
    $668 = HEAP8[$667>>0]|0;
    $669 = $668&1;
    if ($669) {
     $670 = HEAP32[$666>>2]|0;
     $671 = $303;
     $672 = (($671) + 8|0);
     $673 = (($672) + 12|0);
     $301 = $673;
     $674 = $301;
     $292 = $670;
     $293 = $674;
     $675 = $292;
     $676 = $293;
     ;HEAP8[$291+0>>0]=HEAP8[$294+0>>0]|0;
     $289 = $675;
     $290 = $676;
    }
    $680 = (($666) + 4|0);
    $681 = HEAP8[$680>>0]|0;
    $682 = $681&1;
    do {
     if ($682) {
      $683 = HEAP32[$666>>2]|0;
      $684 = $303;
      $685 = (($684) + 8|0);
      $282 = $685;
      $686 = $282;
      $286 = $683;
      $287 = $686;
      $687 = $286;
      $688 = $287;
      ;HEAP8[$285+0>>0]=HEAP8[$288+0>>0]|0;
      $283 = $687;
      $284 = $688;
      $689 = $284;
      __THREW__ = 0;
      invoke_vi(415,($689|0));
      $690 = __THREW__; __THREW__ = 0;
      $691 = $690&1;
      if ($691) {
       $677 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $678 = tempRet0;
       $304 = $677;
       $305 = $678;
       $679 = $304;
       ___cxa_call_unexpected(($679|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $692 = $303;
    $693 = ($692|0)!=(0|0);
    if ($693) {
     $694 = HEAP32[$666>>2]|0;
     $695 = $303;
     $298 = $694;
     $299 = $695;
     $300 = 1;
     $696 = $298;
     $697 = $299;
     $698 = $300;
     $295 = $696;
     $296 = $697;
     $297 = $698;
     $699 = $296;
     __ZdlPv($699);
    }
   }
   $700 = $327;
   $701 = $328;
   ___resumeException($700|0);
   // unreachable;
  }
 } while(0);
 $215 = $__h;
 $380 = $215;
 $214 = $380;
 $381 = $214;
 $213 = $381;
 $382 = $213;
 $383 = (($382) + 4|0);
 $384 = (($383) + 4|0);
 HEAP8[$384>>0] = 1;
 $385 = $__na;
 $212 = $__h;
 $386 = $212;
 $211 = $386;
 $387 = $211;
 $210 = $387;
 $388 = $210;
 $389 = HEAP32[$388>>2]|0;
 $390 = (($389) + 8|0);
 $391 = (($390) + 12|0);
 $209 = $391;
 $392 = $209;
 $173 = $385;
 $174 = $392;
 $393 = $174;
 $394 = ($393|0)==(0|0);
 if (!($394)) {
  HEAP32[$393>>2] = 0;
 }
 $172 = $__h;
 $395 = $172;
 $171 = $395;
 $396 = $171;
 $170 = $396;
 $397 = $170;
 $398 = (($397) + 4|0);
 $399 = (($398) + 5|0);
 HEAP8[$399>>0] = 1;
 $166 = $__h;
 $400 = $166;
 $164 = $169;
 $165 = $400;
 $401 = $164;
 $402 = $165;
 $162 = $401;
 $163 = $402;
 $403 = $162;
 $404 = $163;
 HEAP32[$403>>2] = $404;
 ;HEAP8[$161+0>>0]=HEAP8[$169+0>>0]|0;HEAP8[$161+1>>0]=HEAP8[$169+1>>0]|0;HEAP8[$161+2>>0]=HEAP8[$169+2>>0]|0;HEAP8[$161+3>>0]=HEAP8[$169+3>>0]|0;
 $160 = $168;
 $405 = $160;
 ;HEAP8[$__u1$i$i+0>>0]=HEAP8[$161+0>>0]|0;HEAP8[$__u1$i$i+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$__u1$i$i+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$__u1$i$i+3>>0]=HEAP8[$161+3>>0]|0;
 $158 = $405;
 $406 = $158;
 $157 = $__u1$i$i;
 $407 = $157;
 $408 = HEAP32[$407>>2]|0;
 $138 = $408;
 $409 = $138;
 $137 = $409;
 $410 = $137;
 $136 = $410;
 $411 = $136;
 $412 = HEAP32[$411>>2]|0;
 $__t$i$i$i$i = $412;
 $135 = $409;
 $413 = $135;
 $134 = $413;
 $414 = $134;
 HEAP32[$414>>2] = 0;
 $415 = $__t$i$i$i$i;
 $139 = $__u1$i$i;
 $416 = $139;
 $417 = HEAP32[$416>>2]|0;
 $142 = $417;
 $418 = $142;
 $141 = $418;
 $419 = $141;
 $140 = $419;
 $420 = $140;
 $421 = (($420) + 4|0);
 $143 = $421;
 $422 = $143;
 ;HEAP32[$159+0>>2]=HEAP32[$422+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$422+4>>2]|0;
 ;HEAP8[$156+0>>0]=HEAP8[$159+0>>0]|0;HEAP8[$156+1>>0]=HEAP8[$159+1>>0]|0;HEAP8[$156+2>>0]=HEAP8[$159+2>>0]|0;HEAP8[$156+3>>0]=HEAP8[$159+3>>0]|0;HEAP8[$156+4>>0]=HEAP8[$159+4>>0]|0;HEAP8[$156+5>>0]=HEAP8[$159+5>>0]|0;HEAP8[$156+6>>0]=HEAP8[$159+6>>0]|0;HEAP8[$156+7>>0]=HEAP8[$159+7>>0]|0;
 $154 = $406;
 $155 = $415;
 $423 = $154;
 $424 = $155;
 ;HEAP8[$__t21$i$i$i$i+0>>0]=HEAP8[$156+0>>0]|0;HEAP8[$__t21$i$i$i$i+1>>0]=HEAP8[$156+1>>0]|0;HEAP8[$__t21$i$i$i$i+2>>0]=HEAP8[$156+2>>0]|0;HEAP8[$__t21$i$i$i$i+3>>0]=HEAP8[$156+3>>0]|0;HEAP8[$__t21$i$i$i$i+4>>0]=HEAP8[$156+4>>0]|0;HEAP8[$__t21$i$i$i$i+5>>0]=HEAP8[$156+5>>0]|0;HEAP8[$__t21$i$i$i$i+6>>0]=HEAP8[$156+6>>0]|0;HEAP8[$__t21$i$i$i$i+7>>0]=HEAP8[$156+7>>0]|0;
 $151 = $423;
 HEAP32[$152>>2] = $424;
 $425 = $151;
 $150 = $152;
 $426 = $150;
 $427 = HEAP32[$426>>2]|0;
 $144 = $__t21$i$i$i$i;
 $428 = $144;
 ;HEAP32[$153+0>>2]=HEAP32[$428+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$428+4>>2]|0;
 ;HEAP8[$149+0>>0]=HEAP8[$153+0>>0]|0;HEAP8[$149+1>>0]=HEAP8[$153+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$153+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$153+3>>0]|0;HEAP8[$149+4>>0]=HEAP8[$153+4>>0]|0;HEAP8[$149+5>>0]=HEAP8[$153+5>>0]|0;HEAP8[$149+6>>0]=HEAP8[$153+6>>0]|0;HEAP8[$149+7>>0]=HEAP8[$153+7>>0]|0;
 $147 = $425;
 HEAP32[$148>>2] = $427;
 $429 = $147;
 $146 = $148;
 $430 = $146;
 $431 = HEAP32[$430>>2]|0;
 HEAP32[$429>>2] = $431;
 $432 = (($429) + 4|0);
 $145 = $149;
 $433 = $145;
 ;HEAP32[$432+0>>2]=HEAP32[$433+0>>2]|0;HEAP32[$432+4>>2]=HEAP32[$433+4>>2]|0;
 $133 = $168;
 $434 = $133;
 $131 = $167;
 $132 = $434;
 $435 = $131;
 $436 = $132;
 $129 = $435;
 $130 = $436;
 $437 = $129;
 $438 = $130;
 HEAP32[$437>>2] = $438;
 ;HEAP8[$128+0>>0]=HEAP8[$167+0>>0]|0;HEAP8[$128+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$167+3>>0]|0;
 $127 = $330;
 $439 = $127;
 ;HEAP8[$__u1$i6$i+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$__u1$i6$i+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$__u1$i6$i+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$__u1$i6$i+3>>0]=HEAP8[$128+3>>0]|0;
 $125 = $439;
 $440 = $125;
 $124 = $__u1$i6$i;
 $441 = $124;
 $442 = HEAP32[$441>>2]|0;
 $105 = $442;
 $443 = $105;
 $104 = $443;
 $444 = $104;
 $103 = $444;
 $445 = $103;
 $446 = HEAP32[$445>>2]|0;
 $__t$i$i$i4$i = $446;
 $102 = $443;
 $447 = $102;
 $101 = $447;
 $448 = $101;
 HEAP32[$448>>2] = 0;
 $449 = $__t$i$i$i4$i;
 $106 = $__u1$i6$i;
 $450 = $106;
 $451 = HEAP32[$450>>2]|0;
 $109 = $451;
 $452 = $109;
 $108 = $452;
 $453 = $108;
 $107 = $453;
 $454 = $107;
 $455 = (($454) + 4|0);
 $110 = $455;
 $456 = $110;
 ;HEAP32[$126+0>>2]=HEAP32[$456+0>>2]|0;HEAP32[$126+4>>2]=HEAP32[$456+4>>2]|0;
 ;HEAP8[$123+0>>0]=HEAP8[$126+0>>0]|0;HEAP8[$123+1>>0]=HEAP8[$126+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$126+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$126+3>>0]|0;HEAP8[$123+4>>0]=HEAP8[$126+4>>0]|0;HEAP8[$123+5>>0]=HEAP8[$126+5>>0]|0;HEAP8[$123+6>>0]=HEAP8[$126+6>>0]|0;HEAP8[$123+7>>0]=HEAP8[$126+7>>0]|0;
 $121 = $440;
 $122 = $449;
 $457 = $121;
 $458 = $122;
 ;HEAP8[$__t21$i$i$i5$i+0>>0]=HEAP8[$123+0>>0]|0;HEAP8[$__t21$i$i$i5$i+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$__t21$i$i$i5$i+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$__t21$i$i$i5$i+3>>0]=HEAP8[$123+3>>0]|0;HEAP8[$__t21$i$i$i5$i+4>>0]=HEAP8[$123+4>>0]|0;HEAP8[$__t21$i$i$i5$i+5>>0]=HEAP8[$123+5>>0]|0;HEAP8[$__t21$i$i$i5$i+6>>0]=HEAP8[$123+6>>0]|0;HEAP8[$__t21$i$i$i5$i+7>>0]=HEAP8[$123+7>>0]|0;
 $118 = $457;
 HEAP32[$119>>2] = $458;
 $459 = $118;
 $117 = $119;
 $460 = $117;
 $461 = HEAP32[$460>>2]|0;
 $111 = $__t21$i$i$i5$i;
 $462 = $111;
 ;HEAP32[$120+0>>2]=HEAP32[$462+0>>2]|0;HEAP32[$120+4>>2]=HEAP32[$462+4>>2]|0;
 ;HEAP8[$116+0>>0]=HEAP8[$120+0>>0]|0;HEAP8[$116+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$120+3>>0]|0;HEAP8[$116+4>>0]=HEAP8[$120+4>>0]|0;HEAP8[$116+5>>0]=HEAP8[$120+5>>0]|0;HEAP8[$116+6>>0]=HEAP8[$120+6>>0]|0;HEAP8[$116+7>>0]=HEAP8[$120+7>>0]|0;
 $114 = $459;
 HEAP32[$115>>2] = $461;
 $463 = $114;
 $113 = $115;
 $464 = $113;
 $465 = HEAP32[$464>>2]|0;
 HEAP32[$463>>2] = $465;
 $466 = (($463) + 4|0);
 $112 = $116;
 $467 = $112;
 ;HEAP32[$466+0>>2]=HEAP32[$467+0>>2]|0;HEAP32[$466+4>>2]=HEAP32[$467+4>>2]|0;
 $100 = $168;
 $468 = $100;
 $99 = $468;
 $469 = $99;
 $97 = $469;
 $98 = 0;
 $470 = $97;
 $96 = $470;
 $471 = $96;
 $95 = $471;
 $472 = $95;
 $473 = HEAP32[$472>>2]|0;
 $__tmp$i$i$i15$i = $473;
 $474 = $98;
 $70 = $470;
 $475 = $70;
 $69 = $475;
 $476 = $69;
 HEAP32[$476>>2] = $474;
 $477 = $__tmp$i$i$i15$i;
 $478 = ($477|0)!=(0|0);
 if ($478) {
  $68 = $470;
  $479 = $68;
  $67 = $479;
  $480 = $67;
  $481 = (($480) + 4|0);
  $482 = $__tmp$i$i$i15$i;
  $91 = $481;
  $92 = $482;
  $483 = $91;
  $484 = (($483) + 5|0);
  $485 = HEAP8[$484>>0]|0;
  $486 = $485&1;
  if ($486) {
   $487 = HEAP32[$483>>2]|0;
   $488 = $92;
   $489 = (($488) + 8|0);
   $490 = (($489) + 12|0);
   $90 = $490;
   $491 = $90;
   $81 = $487;
   $82 = $491;
   $492 = $81;
   $493 = $82;
   ;HEAP8[$80+0>>0]=HEAP8[$83+0>>0]|0;
   $78 = $492;
   $79 = $493;
  }
  $497 = (($483) + 4|0);
  $498 = HEAP8[$497>>0]|0;
  $499 = $498&1;
  do {
   if ($499) {
    $500 = HEAP32[$483>>2]|0;
    $501 = $92;
    $502 = (($501) + 8|0);
    $71 = $502;
    $503 = $71;
    $75 = $500;
    $76 = $503;
    $504 = $75;
    $505 = $76;
    ;HEAP8[$74+0>>0]=HEAP8[$77+0>>0]|0;
    $72 = $504;
    $73 = $505;
    $506 = $73;
    __THREW__ = 0;
    invoke_vi(415,($506|0));
    $507 = __THREW__; __THREW__ = 0;
    $508 = $507&1;
    if ($508) {
     $494 = ___cxa_find_matching_catch(-1,-1)|0;
     $495 = tempRet0;
     $93 = $494;
     $94 = $495;
     $496 = $93;
     ___cxa_call_unexpected(($496|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $509 = $92;
  $510 = ($509|0)!=(0|0);
  if ($510) {
   $511 = HEAP32[$483>>2]|0;
   $512 = $92;
   $87 = $511;
   $88 = $512;
   $89 = 1;
   $513 = $87;
   $514 = $88;
   $515 = $89;
   $84 = $513;
   $85 = $514;
   $86 = $515;
   $516 = $85;
   __ZdlPv($516);
  }
 }
 $66 = $330;
 $517 = $66;
 $64 = $329;
 $65 = $517;
 $518 = $64;
 $519 = $65;
 $62 = $518;
 $63 = $519;
 $520 = $62;
 $521 = $63;
 HEAP32[$520>>2] = $521;
 ;HEAP8[$61+0>>0]=HEAP8[$329+0>>0]|0;HEAP8[$61+1>>0]=HEAP8[$329+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$329+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$329+3>>0]|0;
 $60 = $agg$result;
 $522 = $60;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$61+3>>0]|0;
 $58 = $522;
 $523 = $58;
 $57 = $__u1$i;
 $524 = $57;
 $525 = HEAP32[$524>>2]|0;
 $38 = $525;
 $526 = $38;
 $37 = $526;
 $527 = $37;
 $36 = $527;
 $528 = $36;
 $529 = HEAP32[$528>>2]|0;
 $__t$i$i$i = $529;
 $35 = $526;
 $530 = $35;
 $34 = $530;
 $531 = $34;
 HEAP32[$531>>2] = 0;
 $532 = $__t$i$i$i;
 $39 = $__u1$i;
 $533 = $39;
 $534 = HEAP32[$533>>2]|0;
 $42 = $534;
 $535 = $42;
 $41 = $535;
 $536 = $41;
 $40 = $536;
 $537 = $40;
 $538 = (($537) + 4|0);
 $43 = $538;
 $539 = $43;
 ;HEAP32[$59+0>>2]=HEAP32[$539+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$539+4>>2]|0;
 ;HEAP8[$56+0>>0]=HEAP8[$59+0>>0]|0;HEAP8[$56+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$56+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$56+3>>0]=HEAP8[$59+3>>0]|0;HEAP8[$56+4>>0]=HEAP8[$59+4>>0]|0;HEAP8[$56+5>>0]=HEAP8[$59+5>>0]|0;HEAP8[$56+6>>0]=HEAP8[$59+6>>0]|0;HEAP8[$56+7>>0]=HEAP8[$59+7>>0]|0;
 $54 = $523;
 $55 = $532;
 $540 = $54;
 $541 = $55;
 ;HEAP8[$__t21$i$i$i27+0>>0]=HEAP8[$56+0>>0]|0;HEAP8[$__t21$i$i$i27+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$__t21$i$i$i27+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$__t21$i$i$i27+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$__t21$i$i$i27+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$__t21$i$i$i27+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$__t21$i$i$i27+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$__t21$i$i$i27+7>>0]=HEAP8[$56+7>>0]|0;
 $51 = $540;
 HEAP32[$52>>2] = $541;
 $542 = $51;
 $50 = $52;
 $543 = $50;
 $544 = HEAP32[$543>>2]|0;
 $44 = $__t21$i$i$i27;
 $545 = $44;
 ;HEAP32[$53+0>>2]=HEAP32[$545+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$545+4>>2]|0;
 ;HEAP8[$49+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$53+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$53+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$53+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$53+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$53+7>>0]|0;
 $47 = $542;
 HEAP32[$48>>2] = $544;
 $546 = $47;
 $46 = $48;
 $547 = $46;
 $548 = HEAP32[$547>>2]|0;
 HEAP32[$546>>2] = $548;
 $549 = (($546) + 4|0);
 $45 = $49;
 $550 = $45;
 ;HEAP32[$549+0>>2]=HEAP32[$550+0>>2]|0;HEAP32[$549+4>>2]=HEAP32[$550+4>>2]|0;
 $33 = $330;
 $551 = $33;
 $32 = $551;
 $552 = $32;
 $30 = $552;
 $31 = 0;
 $553 = $30;
 $29 = $553;
 $554 = $29;
 $28 = $554;
 $555 = $28;
 $556 = HEAP32[$555>>2]|0;
 $__tmp$i$i$i36 = $556;
 $557 = $31;
 $3 = $553;
 $558 = $3;
 $2 = $558;
 $559 = $2;
 HEAP32[$559>>2] = $557;
 $560 = $__tmp$i$i$i36;
 $561 = ($560|0)!=(0|0);
 if ($561) {
  $1 = $553;
  $562 = $1;
  $0 = $562;
  $563 = $0;
  $564 = (($563) + 4|0);
  $565 = $__tmp$i$i$i36;
  $24 = $564;
  $25 = $565;
  $566 = $24;
  $567 = (($566) + 5|0);
  $568 = HEAP8[$567>>0]|0;
  $569 = $568&1;
  if ($569) {
   $570 = HEAP32[$566>>2]|0;
   $571 = $25;
   $572 = (($571) + 8|0);
   $573 = (($572) + 12|0);
   $23 = $573;
   $574 = $23;
   $14 = $570;
   $15 = $574;
   $575 = $14;
   $576 = $15;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $11 = $575;
   $12 = $576;
  }
  $580 = (($566) + 4|0);
  $581 = HEAP8[$580>>0]|0;
  $582 = $581&1;
  do {
   if ($582) {
    $583 = HEAP32[$566>>2]|0;
    $584 = $25;
    $585 = (($584) + 8|0);
    $4 = $585;
    $586 = $4;
    $8 = $583;
    $9 = $586;
    $587 = $8;
    $588 = $9;
    ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
    $5 = $587;
    $6 = $588;
    $589 = $6;
    __THREW__ = 0;
    invoke_vi(415,($589|0));
    $590 = __THREW__; __THREW__ = 0;
    $591 = $590&1;
    if ($591) {
     $577 = ___cxa_find_matching_catch(-1,-1)|0;
     $578 = tempRet0;
     $26 = $577;
     $27 = $578;
     $579 = $26;
     ___cxa_call_unexpected(($579|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $592 = $25;
  $593 = ($592|0)!=(0|0);
  if ($593) {
   $594 = HEAP32[$566>>2]|0;
   $595 = $25;
   $20 = $594;
   $21 = $595;
   $22 = 1;
   $596 = $20;
   $597 = $21;
   $598 = $22;
   $17 = $596;
   $18 = $597;
   $19 = $598;
   $599 = $18;
   __ZdlPv($599);
  }
 }
 $331 = 1;
 $208 = $__h;
 $600 = $208;
 $207 = $600;
 $601 = $207;
 $205 = $601;
 $206 = 0;
 $602 = $205;
 $204 = $602;
 $603 = $204;
 $203 = $603;
 $604 = $203;
 $605 = HEAP32[$604>>2]|0;
 $__tmp$i$i$i10 = $605;
 $606 = $206;
 $178 = $602;
 $607 = $178;
 $177 = $607;
 $608 = $177;
 HEAP32[$608>>2] = $606;
 $609 = $__tmp$i$i$i10;
 $610 = ($609|0)!=(0|0);
 if (!($610)) {
  STACKTOP = sp;return;
 }
 $176 = $602;
 $611 = $176;
 $175 = $611;
 $612 = $175;
 $613 = (($612) + 4|0);
 $614 = $__tmp$i$i$i10;
 $199 = $613;
 $200 = $614;
 $615 = $199;
 $616 = (($615) + 5|0);
 $617 = HEAP8[$616>>0]|0;
 $618 = $617&1;
 if ($618) {
  $619 = HEAP32[$615>>2]|0;
  $620 = $200;
  $621 = (($620) + 8|0);
  $622 = (($621) + 12|0);
  $198 = $622;
  $623 = $198;
  $189 = $619;
  $190 = $623;
  $624 = $189;
  $625 = $190;
  ;HEAP8[$188+0>>0]=HEAP8[$191+0>>0]|0;
  $186 = $624;
  $187 = $625;
 }
 $629 = (($615) + 4|0);
 $630 = HEAP8[$629>>0]|0;
 $631 = $630&1;
 do {
  if ($631) {
   $632 = HEAP32[$615>>2]|0;
   $633 = $200;
   $634 = (($633) + 8|0);
   $179 = $634;
   $635 = $179;
   $183 = $632;
   $184 = $635;
   $636 = $183;
   $637 = $184;
   ;HEAP8[$182+0>>0]=HEAP8[$185+0>>0]|0;
   $180 = $636;
   $181 = $637;
   $638 = $181;
   __THREW__ = 0;
   invoke_vi(415,($638|0));
   $639 = __THREW__; __THREW__ = 0;
   $640 = $639&1;
   if ($640) {
    $626 = ___cxa_find_matching_catch(-1,-1)|0;
    $627 = tempRet0;
    $201 = $626;
    $202 = $627;
    $628 = $201;
    ___cxa_call_unexpected(($628|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $641 = $200;
 $642 = ($641|0)!=(0|0);
 if ($642) {
  $643 = HEAP32[$615>>2]|0;
  $644 = $200;
  $195 = $643;
  $196 = $644;
  $197 = 1;
  $645 = $195;
  $646 = $196;
  $647 = $197;
  $192 = $645;
  $193 = $646;
  $194 = $647;
  $648 = $193;
  __ZdlPv($648);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0;
 var $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $5 = sp + 16|0;
 $16 = sp + 104|0;
 $107 = sp;
 $110 = sp + 757|0;
 $137 = sp + 528|0;
 $151 = sp + 584|0;
 $__inserted = sp + 758|0;
 $177 = sp + 684|0;
 $178 = sp + 4|0;
 $179 = sp + 332|0;
 $180 = sp + 716|0;
 $181 = sp + 692|0;
 $182 = sp + 424|0;
 $183 = sp + 272|0;
 $175 = $this;
 $176 = $__nd;
 $184 = $175;
 $174 = $184;
 $185 = $174;
 $186 = (($185) + 12|0);
 $173 = $186;
 $187 = $173;
 $172 = $187;
 $188 = $172;
 $189 = $176;
 $190 = (($189) + 8|0);
 $118 = $188;
 $119 = $190;
 $191 = $118;
 $192 = $119;
 $193 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($191,$192)|0);
 $194 = $176;
 $195 = (($194) + 4|0);
 HEAP32[$195>>2] = $193;
 $117 = $184;
 $196 = $117;
 $116 = $196;
 $197 = $116;
 $115 = $197;
 $198 = $115;
 $114 = $198;
 $199 = $114;
 $200 = (($199) + 4|0);
 $113 = $200;
 $201 = $113;
 $112 = $201;
 $202 = $112;
 $111 = $202;
 $203 = $111;
 $204 = HEAP32[$203>>2]|0;
 $__bc = $204;
 HEAP8[$__inserted>>0] = 0;
 $205 = $__bc;
 $206 = ($205|0)!=(0);
 if ($206) {
  $207 = $176;
  $208 = (($207) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $__bc;
  $99 = $209;
  $100 = $210;
  $211 = $100;
  $212 = $100;
  $213 = (($212) - 1)|0;
  $214 = $211 & $213;
  $215 = ($214|0)!=(0);
  if ($215) {
   $220 = $99;
   $221 = $100;
   $222 = (($220>>>0) % ($221>>>0))&-1;
   $223 = $222;
  } else {
   $216 = $99;
   $217 = $100;
   $218 = (($217) - 1)|0;
   $219 = $216 & $218;
   $223 = $219;
  }
  $__chash = $223;
  $224 = $__chash;
  $19 = $184;
  $20 = $224;
  $225 = $19;
  $226 = $20;
  $18 = $225;
  $227 = $18;
  $17 = $227;
  $228 = $17;
  $229 = HEAP32[$228>>2]|0;
  $230 = (($229) + ($226<<2)|0);
  $231 = HEAP32[$230>>2]|0;
  $__ndptr = $231;
  $232 = $__ndptr;
  $14 = $16;
  $15 = -1;
  $233 = $14;
  $234 = $15;
  $12 = $233;
  $13 = $234;
  $235 = $12;
  HEAP32[$235>>2] = 0;
  $236 = HEAP32[$16>>2]|0;
  HEAP32[$177>>2] = $236;
  $0 = $177;
  $237 = ($232|0)!=(0|0);
  do {
   if ($237) {
    $238 = $__ndptr;
    $239 = HEAP32[$238>>2]|0;
    $__ndptr = $239;
    L9: while(1) {
     $240 = $__ndptr;
     $3 = $5;
     $4 = -1;
     $241 = $3;
     $242 = $4;
     $1 = $241;
     $2 = $242;
     $243 = $1;
     HEAP32[$243>>2] = 0;
     $244 = HEAP32[$5>>2]|0;
     HEAP32[$178>>2] = $244;
     $6 = $178;
     $245 = ($240|0)!=(0|0);
     if ($245) {
      $246 = $__ndptr;
      $247 = (($246) + 4|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $__bc;
      $7 = $248;
      $8 = $249;
      $250 = $8;
      $251 = $8;
      $252 = (($251) - 1)|0;
      $253 = $250 & $252;
      $254 = ($253|0)!=(0);
      if ($254) {
       $259 = $7;
       $260 = $8;
       $261 = (($259>>>0) % ($260>>>0))&-1;
       $264 = $261;
      } else {
       $255 = $7;
       $256 = $8;
       $257 = (($256) - 1)|0;
       $258 = $255 & $257;
       $264 = $258;
      }
      $262 = $__chash;
      $263 = ($264|0)==($262|0);
      $586 = $263;
     } else {
      $586 = 0;
     }
     if (!($586)) {
      label = 41;
      break;
     }
     $11 = $184;
     $265 = $11;
     $266 = (($265) + 16|0);
     $10 = $266;
     $267 = $10;
     $9 = $267;
     $268 = $9;
     $269 = $__ndptr;
     $270 = (($269) + 8|0);
     $271 = $176;
     $272 = (($271) + 8|0);
     $83 = $268;
     $84 = $270;
     $85 = $272;
     $273 = $83;
     $274 = $84;
     $275 = $85;
     $80 = $273;
     $81 = $274;
     $82 = $275;
     $276 = $81;
     $277 = $82;
     $76 = $276;
     $77 = $277;
     $278 = $76;
     $74 = $278;
     $279 = $74;
     $73 = $279;
     $280 = $73;
     $72 = $280;
     $281 = $72;
     $71 = $281;
     $282 = $71;
     $283 = HEAP8[$282>>0]|0;
     $284 = $283&255;
     $285 = $284 & 1;
     $286 = ($285|0)!=(0);
     if ($286) {
      $67 = $279;
      $287 = $67;
      $66 = $287;
      $288 = $66;
      $65 = $288;
      $289 = $65;
      $290 = (($289) + 4|0);
      $291 = HEAP32[$290>>2]|0;
      $298 = $291;
     } else {
      $70 = $279;
      $292 = $70;
      $69 = $292;
      $293 = $69;
      $68 = $293;
      $294 = $68;
      $295 = HEAP8[$294>>0]|0;
      $296 = $295&255;
      $297 = $296 >> 1;
      $298 = $297;
     }
     $__lhs_sz$i$i$i = $298;
     $299 = $__lhs_sz$i$i$i;
     $300 = $77;
     $61 = $300;
     $301 = $61;
     $60 = $301;
     $302 = $60;
     $59 = $302;
     $303 = $59;
     $58 = $303;
     $304 = $58;
     $305 = HEAP8[$304>>0]|0;
     $306 = $305&255;
     $307 = $306 & 1;
     $308 = ($307|0)!=(0);
     if ($308) {
      $54 = $301;
      $309 = $54;
      $53 = $309;
      $310 = $53;
      $52 = $310;
      $311 = $52;
      $312 = (($311) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      $321 = $313;
     } else {
      $57 = $301;
      $314 = $57;
      $56 = $314;
      $315 = $56;
      $55 = $315;
      $316 = $55;
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = $318 >> 1;
      $321 = $319;
     }
     $320 = ($299|0)!=($321|0);
     do {
      if ($320) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $322 = $76;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $31 = $325;
       $326 = $31;
       $30 = $326;
       $327 = $30;
       $328 = HEAP8[$327>>0]|0;
       $329 = $328&255;
       $330 = $329 & 1;
       $331 = ($330|0)!=(0);
       if ($331) {
        $24 = $324;
        $332 = $24;
        $23 = $332;
        $333 = $23;
        $22 = $333;
        $334 = $22;
        $335 = (($334) + 8|0);
        $336 = HEAP32[$335>>2]|0;
        $343 = $336;
       } else {
        $29 = $324;
        $337 = $29;
        $28 = $337;
        $338 = $28;
        $27 = $338;
        $339 = $27;
        $340 = (($339) + 1|0);
        $26 = $340;
        $341 = $26;
        $25 = $341;
        $342 = $25;
        $343 = $342;
       }
       $21 = $343;
       $344 = $21;
       $__lp$i$i$i = $344;
       $345 = $77;
       $48 = $345;
       $346 = $48;
       $47 = $346;
       $347 = $47;
       $46 = $347;
       $348 = $46;
       $45 = $348;
       $349 = $45;
       $44 = $349;
       $350 = $44;
       $351 = HEAP8[$350>>0]|0;
       $352 = $351&255;
       $353 = $352 & 1;
       $354 = ($353|0)!=(0);
       if ($354) {
        $38 = $347;
        $355 = $38;
        $37 = $355;
        $356 = $37;
        $36 = $356;
        $357 = $36;
        $358 = (($357) + 8|0);
        $359 = HEAP32[$358>>2]|0;
        $366 = $359;
       } else {
        $43 = $347;
        $360 = $43;
        $42 = $360;
        $361 = $42;
        $41 = $361;
        $362 = $41;
        $363 = (($362) + 1|0);
        $40 = $363;
        $364 = $40;
        $39 = $364;
        $365 = $39;
        $366 = $365;
       }
       $35 = $366;
       $367 = $35;
       $__rp$i$i$i = $367;
       $368 = $76;
       $51 = $368;
       $369 = $51;
       $50 = $369;
       $370 = $50;
       $49 = $370;
       $371 = $49;
       $372 = HEAP8[$371>>0]|0;
       $373 = $372&255;
       $374 = $373 & 1;
       $375 = ($374|0)!=(0);
       if ($375) {
        $376 = $__lp$i$i$i;
        $377 = $__rp$i$i$i;
        $378 = $__lhs_sz$i$i$i;
        $62 = $376;
        $63 = $377;
        $64 = $378;
        $379 = $62;
        $380 = $63;
        $381 = $64;
        __THREW__ = 0;
        $382 = (invoke_iiii(440,($379|0),($380|0),($381|0))|0);
        $383 = __THREW__; __THREW__ = 0;
        $384 = $383&1;
        if ($384) {
         label = 30;
         break L9;
        }
        $385 = ($382|0)==(0);
        $$expand_i1_val2 = $385&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $389 = $__lhs_sz$i$i$i;
        $390 = ($389|0)!=(0);
        if (!($390)) {
         label = 36;
         break;
        }
        $391 = $__lp$i$i$i;
        $392 = HEAP8[$391>>0]|0;
        $393 = $392 << 24 >> 24;
        $394 = $__rp$i$i$i;
        $395 = HEAP8[$394>>0]|0;
        $396 = $395 << 24 >> 24;
        $397 = ($393|0)!=($396|0);
        if ($397) {
         label = 34;
         break;
        }
        $398 = $__lhs_sz$i$i$i;
        $399 = (($398) + -1)|0;
        $__lhs_sz$i$i$i = $399;
        $400 = $__lp$i$i$i;
        $401 = (($400) + 1|0);
        $__lp$i$i$i = $401;
        $402 = $__rp$i$i$i;
        $403 = (($402) + 1|0);
        $__rp$i$i$i = $403;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $405 = $__ndptr;
     $406 = HEAP32[$405>>2]|0;
     $__ndptr = $406;
    }
    if ((label|0) == 30) {
     $386 = ___cxa_find_matching_catch(-1,-1)|0;
     $387 = tempRet0;
     $78 = $386;
     $79 = $387;
     $388 = $78;
     ___cxa_call_unexpected(($388|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $571 = $__ndptr;
     $164 = $183;
     $165 = $571;
     $572 = $164;
     $573 = $165;
     $162 = $572;
     $163 = $573;
     $574 = $162;
     $575 = $163;
     HEAP32[$574>>2] = $575;
     $169 = $agg$result;
     $170 = $183;
     $171 = $__inserted;
     $576 = $169;
     $577 = $171;
     $578 = $170;
     $166 = $576;
     $167 = $578;
     $168 = $577;
     $579 = $166;
     $580 = $167;
     ;HEAP32[$579+0>>2]=HEAP32[$580+0>>2]|0;
     $581 = (($579) + 4|0);
     $582 = $168;
     $583 = HEAP8[$582>>0]|0;
     $584 = $583&1;
     $585 = $584&1;
     HEAP8[$581>>0] = $585;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $88 = $184;
 $407 = $88;
 $408 = (($407) + 12|0);
 $87 = $408;
 $409 = $87;
 $86 = $409;
 $410 = $86;
 $411 = HEAP32[$410>>2]|0;
 $412 = (($411) + 1)|0;
 $413 = (+($412>>>0));
 $414 = $__bc;
 $415 = (+($414>>>0));
 $91 = $184;
 $416 = $91;
 $417 = (($416) + 16|0);
 $90 = $417;
 $418 = $90;
 $89 = $418;
 $419 = $89;
 $420 = +HEAPF32[$419>>2];
 $421 = $415 * $420;
 $422 = $413 > $421;
 if ($422) {
  label = 45;
 } else {
  $423 = $__bc;
  $424 = ($423|0)==(0);
  if ($424) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $425 = $__bc;
  $426 = $425<<1;
  $427 = $__bc;
  $92 = $427;
  $428 = $92;
  $429 = ($428>>>0)>(2);
  if ($429) {
   $430 = $92;
   $431 = $92;
   $432 = (($431) - 1)|0;
   $433 = $430 & $432;
   $434 = ($433|0)!=(0);
   $435 = $434 ^ 1;
   $437 = $435;
  } else {
   $437 = 0;
  }
  $436 = $437 ^ 1;
  $438 = $436&1;
  $439 = (($426) + ($438))|0;
  HEAP32[$179>>2] = $439;
  $95 = $184;
  $440 = $95;
  $441 = (($440) + 12|0);
  $94 = $441;
  $442 = $94;
  $93 = $442;
  $443 = $93;
  $444 = HEAP32[$443>>2]|0;
  $445 = (($444) + 1)|0;
  $446 = (+($445>>>0));
  $98 = $184;
  $447 = $98;
  $448 = (($447) + 16|0);
  $97 = $448;
  $449 = $97;
  $96 = $449;
  $450 = $96;
  $451 = +HEAPF32[$450>>2];
  $452 = $446 / $451;
  $101 = $452;
  $453 = $101;
  $454 = (+Math_ceil((+$453)));
  $455 = (~~(($454))>>>0);
  HEAP32[$180>>2] = $455;
  $108 = $179;
  $109 = $180;
  $456 = $108;
  $457 = $109;
  ;HEAP8[$107+0>>0]=HEAP8[$110+0>>0]|0;
  $105 = $456;
  $106 = $457;
  $458 = $105;
  $459 = $106;
  $102 = $107;
  $103 = $458;
  $104 = $459;
  $460 = $103;
  $461 = HEAP32[$460>>2]|0;
  $462 = $104;
  $463 = HEAP32[$462>>2]|0;
  $464 = ($461>>>0)<($463>>>0);
  if ($464) {
   $465 = $106;
   $468 = $465;
  } else {
   $466 = $105;
   $468 = $466;
  }
  $467 = HEAP32[$468>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($184,$467);
  $126 = $184;
  $469 = $126;
  $125 = $469;
  $470 = $125;
  $124 = $470;
  $471 = $124;
  $123 = $471;
  $472 = $123;
  $473 = (($472) + 4|0);
  $122 = $473;
  $474 = $122;
  $121 = $474;
  $475 = $121;
  $120 = $475;
  $476 = $120;
  $477 = HEAP32[$476>>2]|0;
  $__bc = $477;
  $478 = $176;
  $479 = (($478) + 4|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $__bc;
  $127 = $480;
  $128 = $481;
  $482 = $128;
  $483 = $128;
  $484 = (($483) - 1)|0;
  $485 = $482 & $484;
  $486 = ($485|0)!=(0);
  if ($486) {
   $491 = $127;
   $492 = $128;
   $493 = (($491>>>0) % ($492>>>0))&-1;
   $494 = $493;
  } else {
   $487 = $127;
   $488 = $128;
   $489 = (($488) - 1)|0;
   $490 = $487 & $489;
   $494 = $490;
  }
  $__chash = $494;
 }
 $495 = $__chash;
 $131 = $184;
 $132 = $495;
 $496 = $131;
 $497 = $132;
 $130 = $496;
 $498 = $130;
 $129 = $498;
 $499 = $129;
 $500 = HEAP32[$499>>2]|0;
 $501 = (($500) + ($497<<2)|0);
 $502 = HEAP32[$501>>2]|0;
 $__pn = $502;
 $503 = $__pn;
 $135 = $137;
 $136 = -1;
 $504 = $135;
 $505 = $136;
 $133 = $504;
 $134 = $505;
 $506 = $133;
 HEAP32[$506>>2] = 0;
 $507 = HEAP32[$137>>2]|0;
 HEAP32[$181>>2] = $507;
 $138 = $181;
 $508 = ($503|0)==(0|0);
 if ($508) {
  $509 = (($184) + 8|0);
  $140 = $509;
  $510 = $140;
  $139 = $510;
  $511 = $139;
  $142 = $511;
  $512 = $142;
  $141 = $512;
  $513 = $141;
  $__pn = $513;
  $514 = $__pn;
  $515 = HEAP32[$514>>2]|0;
  $516 = $176;
  HEAP32[$516>>2] = $515;
  $517 = $176;
  $518 = $__pn;
  HEAP32[$518>>2] = $517;
  $519 = $__pn;
  $520 = $__chash;
  $145 = $184;
  $146 = $520;
  $521 = $145;
  $522 = $146;
  $144 = $521;
  $523 = $144;
  $143 = $523;
  $524 = $143;
  $525 = HEAP32[$524>>2]|0;
  $526 = (($525) + ($522<<2)|0);
  HEAP32[$526>>2] = $519;
  $527 = $176;
  $528 = HEAP32[$527>>2]|0;
  $149 = $151;
  $150 = -1;
  $529 = $149;
  $530 = $150;
  $147 = $529;
  $148 = $530;
  $531 = $147;
  HEAP32[$531>>2] = 0;
  $532 = HEAP32[$151>>2]|0;
  HEAP32[$182>>2] = $532;
  $152 = $182;
  $533 = ($528|0)!=(0|0);
  if ($533) {
   $534 = $176;
   $535 = $176;
   $536 = HEAP32[$535>>2]|0;
   $537 = (($536) + 4|0);
   $538 = HEAP32[$537>>2]|0;
   $539 = $__bc;
   $153 = $538;
   $154 = $539;
   $540 = $154;
   $541 = $154;
   $542 = (($541) - 1)|0;
   $543 = $540 & $542;
   $544 = ($543|0)!=(0);
   if ($544) {
    $549 = $153;
    $550 = $154;
    $551 = (($549>>>0) % ($550>>>0))&-1;
    $552 = $551;
   } else {
    $545 = $153;
    $546 = $154;
    $547 = (($546) - 1)|0;
    $548 = $545 & $547;
    $552 = $548;
   }
   $157 = $184;
   $158 = $552;
   $553 = $157;
   $554 = $158;
   $156 = $553;
   $555 = $156;
   $155 = $555;
   $556 = $155;
   $557 = HEAP32[$556>>2]|0;
   $558 = (($557) + ($554<<2)|0);
   HEAP32[$558>>2] = $534;
  }
 } else {
  $559 = $__pn;
  $560 = HEAP32[$559>>2]|0;
  $561 = $176;
  HEAP32[$561>>2] = $560;
  $562 = $176;
  $563 = $__pn;
  HEAP32[$563>>2] = $562;
 }
 $564 = $176;
 $__ndptr = $564;
 $161 = $184;
 $565 = $161;
 $566 = (($565) + 12|0);
 $160 = $566;
 $567 = $160;
 $159 = $567;
 $568 = $159;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($569) + 1)|0;
 HEAP32[$568>>2] = $570;
 HEAP8[$__inserted>>0] = 1;
 $571 = $__ndptr;
 $164 = $183;
 $165 = $571;
 $572 = $164;
 $573 = $165;
 $162 = $572;
 $163 = $573;
 $574 = $162;
 $575 = $163;
 HEAP32[$574>>2] = $575;
 $169 = $agg$result;
 $170 = $183;
 $171 = $__inserted;
 $576 = $169;
 $577 = $171;
 $578 = $170;
 $166 = $576;
 $167 = $578;
 $168 = $577;
 $579 = $166;
 $580 = $167;
 ;HEAP32[$579+0>>2]=HEAP32[$580+0>>2]|0;
 $581 = (($579) + 4|0);
 $582 = $168;
 $583 = HEAP8[$582>>0]|0;
 $584 = $583&1;
 $585 = $584&1;
 HEAP8[$581>>0] = $585;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 76|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = (($49) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 if ($57) {
  $58 = HEAP32[$34>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = $__bc;
 $61 = ($59>>>0)<($60>>>0);
 if ($61) {
  $62 = $__bc;
  $25 = $62;
  $63 = $25;
  $64 = ($63>>>0)>(2);
  if ($64) {
   $65 = $25;
   $66 = $25;
   $67 = (($66) - 1)|0;
   $68 = $65 & $67;
   $69 = ($68|0)!=(0);
   $70 = $69 ^ 1;
   $126 = $70;
  } else {
   $126 = 0;
  }
  if ($126) {
   $14 = $36;
   $71 = $14;
   $72 = (($71) + 12|0);
   $13 = $72;
   $73 = $13;
   $12 = $73;
   $74 = $12;
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75>>>0));
   $2 = $36;
   $77 = $2;
   $78 = (($77) + 16|0);
   $1 = $78;
   $79 = $1;
   $0 = $79;
   $80 = $0;
   $81 = +HEAPF32[$80>>2];
   $82 = $76 / $81;
   $3 = $82;
   $83 = $3;
   $84 = (+Math_ceil((+$83)));
   $85 = (~~(($84))>>>0);
   $5 = $85;
   $86 = $5;
   $87 = (($86) - 1)|0;
   $4 = $87;
   $88 = $4;
   $89 = (_llvm_ctlz_i32(($88|0))|0);
   $90 = (32 - ($89))|0;
   $91 = 1 << $90;
   $108 = $91;
  } else {
   $8 = $36;
   $92 = $8;
   $93 = (($92) + 12|0);
   $7 = $93;
   $94 = $7;
   $6 = $94;
   $95 = $6;
   $96 = HEAP32[$95>>2]|0;
   $97 = (+($96>>>0));
   $11 = $36;
   $98 = $11;
   $99 = (($98) + 16|0);
   $10 = $99;
   $100 = $10;
   $9 = $100;
   $101 = $9;
   $102 = +HEAPF32[$101>>2];
   $103 = $97 / $102;
   $15 = $103;
   $104 = $15;
   $105 = (+Math_ceil((+$104)));
   $106 = (~~(($105))>>>0);
   $107 = (__ZNSt3__112__next_primeEj($106)|0);
   $108 = $107;
  }
  HEAP32[$35>>2] = $108;
  $22 = $34;
  $23 = $35;
  $109 = $22;
  $110 = $23;
  ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;
  $19 = $109;
  $20 = $110;
  $111 = $19;
  $112 = $20;
  $16 = $21;
  $17 = $111;
  $18 = $112;
  $113 = $17;
  $114 = HEAP32[$113>>2]|0;
  $115 = $18;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114>>>0)<($116>>>0);
  if ($117) {
   $118 = $20;
   $121 = $118;
  } else {
   $119 = $19;
   $121 = $119;
  }
  $120 = HEAP32[$121>>2]|0;
  HEAP32[$34>>2] = $120;
  $122 = HEAP32[$34>>2]|0;
  $123 = $__bc;
  $124 = ($122>>>0)<($123>>>0);
  if ($124) {
   $125 = HEAP32[$34>>2]|0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($36,$125);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0;
 var $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0;
 $33 = sp + 112|0;
 $47 = sp + 168|0;
 $59 = sp + 216|0;
 $71 = sp + 260|0;
 $81 = sp + 300|0;
 $90 = sp + 728|0;
 $177 = sp + 20|0;
 $178 = sp + 700|0;
 $179 = sp + 716|0;
 $180 = sp + 336|0;
 $181 = sp + 724|0;
 $182 = sp + 584|0;
 $175 = $this;
 $176 = $__nbc;
 $183 = $175;
 $174 = $183;
 $184 = $174;
 $173 = $184;
 $185 = $173;
 $172 = $185;
 $186 = $172;
 $187 = (($186) + 4|0);
 $98 = $187;
 $188 = $98;
 $97 = $188;
 $189 = $97;
 $96 = $189;
 $190 = $96;
 $__npa = $190;
 $191 = $176;
 $192 = ($191>>>0)>(0);
 if ($192) {
  $193 = $__npa;
  $194 = $176;
  $94 = $193;
  $95 = $194;
  $195 = $94;
  $196 = $95;
  $91 = $195;
  $92 = $196;
  $93 = 0;
  $197 = $92;
  $198 = $197<<2;
  $199 = (__Znwj($198)|0);
  $204 = $199;
 } else {
  $88 = $90;
  $89 = -1;
  $200 = $88;
  $201 = $89;
  $86 = $200;
  $87 = $201;
  $202 = $86;
  HEAP32[$202>>2] = 0;
  $203 = HEAP32[$90>>2]|0;
  HEAP32[$177>>2] = $203;
  $0 = $177;
  $204 = 0;
 }
 $21 = $183;
 $22 = $204;
 $205 = $21;
 $20 = $205;
 $206 = $20;
 $19 = $206;
 $207 = $19;
 $208 = HEAP32[$207>>2]|0;
 $__tmp$i = $208;
 $209 = $22;
 $4 = $205;
 $210 = $4;
 $3 = $210;
 $211 = $3;
 HEAP32[$211>>2] = $209;
 $212 = $__tmp$i;
 $213 = ($212|0)!=(0|0);
 if ($213) {
  $2 = $205;
  $214 = $2;
  $1 = $214;
  $215 = $1;
  $216 = (($215) + 4|0);
  $217 = $__tmp$i;
  $17 = $216;
  $18 = $217;
  $218 = $17;
  $16 = $218;
  $219 = $16;
  $15 = $219;
  $220 = $15;
  $14 = $220;
  $221 = $14;
  $222 = $18;
  $7 = $218;
  $223 = $7;
  $6 = $223;
  $224 = $6;
  $5 = $224;
  $225 = $5;
  $226 = HEAP32[$225>>2]|0;
  $11 = $221;
  $12 = $222;
  $13 = $226;
  $227 = $11;
  $228 = $12;
  $229 = $13;
  $8 = $227;
  $9 = $228;
  $10 = $229;
  $230 = $9;
  __ZdlPv($230);
 }
 $231 = $176;
 $25 = $183;
 $232 = $25;
 $24 = $232;
 $233 = $24;
 $23 = $233;
 $234 = $23;
 $235 = (($234) + 4|0);
 $28 = $235;
 $236 = $28;
 $27 = $236;
 $237 = $27;
 $26 = $237;
 $238 = $26;
 HEAP32[$238>>2] = $231;
 $239 = $176;
 $240 = ($239>>>0)>(0);
 if (!($240)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $241 = $__i;
  $242 = $176;
  $243 = ($241>>>0)<($242>>>0);
  if (!($243)) {
   break;
  }
  $31 = $33;
  $32 = -1;
  $244 = $31;
  $245 = $32;
  $29 = $244;
  $30 = $245;
  $246 = $29;
  HEAP32[$246>>2] = 0;
  $247 = HEAP32[$33>>2]|0;
  HEAP32[$178>>2] = $247;
  $34 = $178;
  $248 = $__i;
  $37 = $183;
  $38 = $248;
  $249 = $37;
  $250 = $38;
  $36 = $249;
  $251 = $36;
  $35 = $251;
  $252 = $35;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + ($250<<2)|0);
  HEAP32[$254>>2] = 0;
  $255 = $__i;
  $256 = (($255) + 1)|0;
  $__i = $256;
 }
 $257 = (($183) + 8|0);
 $40 = $257;
 $258 = $40;
 $39 = $258;
 $259 = $39;
 $42 = $259;
 $260 = $42;
 $41 = $260;
 $261 = $41;
 $__pp = $261;
 $262 = $__pp;
 $263 = HEAP32[$262>>2]|0;
 $__cp = $263;
 $264 = $__cp;
 $45 = $47;
 $46 = -1;
 $265 = $45;
 $266 = $46;
 $43 = $265;
 $44 = $266;
 $267 = $43;
 HEAP32[$267>>2] = 0;
 $268 = HEAP32[$47>>2]|0;
 HEAP32[$179>>2] = $268;
 $48 = $179;
 $269 = ($264|0)!=(0|0);
 do {
  if ($269) {
   $270 = $__cp;
   $271 = (($270) + 4|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $176;
   $49 = $272;
   $50 = $273;
   $274 = $50;
   $275 = $50;
   $276 = (($275) - 1)|0;
   $277 = $274 & $276;
   $278 = ($277|0)!=(0);
   if ($278) {
    $283 = $49;
    $284 = $50;
    $285 = (($283>>>0) % ($284>>>0))&-1;
    $286 = $285;
   } else {
    $279 = $49;
    $280 = $50;
    $281 = (($280) - 1)|0;
    $282 = $279 & $281;
    $286 = $282;
   }
   $__chash = $286;
   $287 = $__pp;
   $288 = $__chash;
   $53 = $183;
   $54 = $288;
   $289 = $53;
   $290 = $54;
   $52 = $289;
   $291 = $52;
   $51 = $291;
   $292 = $51;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + ($290<<2)|0);
   HEAP32[$294>>2] = $287;
   $295 = $__chash;
   $__phash = $295;
   $296 = $__cp;
   $__pp = $296;
   $297 = $__cp;
   $298 = HEAP32[$297>>2]|0;
   $__cp = $298;
   L22: while(1) {
    $299 = $__cp;
    $57 = $59;
    $58 = -1;
    $300 = $57;
    $301 = $58;
    $55 = $300;
    $56 = $301;
    $302 = $55;
    HEAP32[$302>>2] = 0;
    $303 = HEAP32[$59>>2]|0;
    HEAP32[$180>>2] = $303;
    $60 = $180;
    $304 = ($299|0)!=(0|0);
    if (!($304)) {
     label = 58;
     break;
    }
    $305 = $__cp;
    $306 = (($305) + 4|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $176;
    $61 = $307;
    $62 = $308;
    $309 = $62;
    $310 = $62;
    $311 = (($310) - 1)|0;
    $312 = $309 & $311;
    $313 = ($312|0)!=(0);
    if ($313) {
     $318 = $61;
     $319 = $62;
     $320 = (($318>>>0) % ($319>>>0))&-1;
     $321 = $320;
    } else {
     $314 = $61;
     $315 = $62;
     $316 = (($315) - 1)|0;
     $317 = $314 & $316;
     $321 = $317;
    }
    $__chash = $321;
    $322 = $__chash;
    $323 = $__phash;
    $324 = ($322|0)==($323|0);
    if ($324) {
     $325 = $__cp;
     $__pp = $325;
    } else {
     $326 = $__chash;
     $65 = $183;
     $66 = $326;
     $327 = $65;
     $328 = $66;
     $64 = $327;
     $329 = $64;
     $63 = $329;
     $330 = $63;
     $331 = HEAP32[$330>>2]|0;
     $332 = (($331) + ($328<<2)|0);
     $333 = HEAP32[$332>>2]|0;
     $69 = $71;
     $70 = -1;
     $334 = $69;
     $335 = $70;
     $67 = $334;
     $68 = $335;
     $336 = $67;
     HEAP32[$336>>2] = 0;
     $337 = HEAP32[$71>>2]|0;
     HEAP32[$181>>2] = $337;
     $72 = $181;
     $338 = ($333|0)==(0|0);
     if ($338) {
      $339 = $__pp;
      $340 = $__chash;
      $75 = $183;
      $76 = $340;
      $341 = $75;
      $342 = $76;
      $74 = $341;
      $343 = $74;
      $73 = $343;
      $344 = $73;
      $345 = HEAP32[$344>>2]|0;
      $346 = (($345) + ($342<<2)|0);
      HEAP32[$346>>2] = $339;
      $347 = $__cp;
      $__pp = $347;
      $348 = $__chash;
      $__phash = $348;
     } else {
      $349 = $__cp;
      $__np = $349;
      while(1) {
       $350 = $__np;
       $351 = HEAP32[$350>>2]|0;
       $79 = $81;
       $80 = -1;
       $352 = $79;
       $353 = $80;
       $77 = $352;
       $78 = $353;
       $354 = $77;
       HEAP32[$354>>2] = 0;
       $355 = HEAP32[$81>>2]|0;
       HEAP32[$182>>2] = $355;
       $82 = $182;
       $356 = ($351|0)!=(0|0);
       if ($356) {
        $85 = $183;
        $357 = $85;
        $358 = (($357) + 16|0);
        $84 = $358;
        $359 = $84;
        $83 = $359;
        $360 = $83;
        $361 = $__cp;
        $362 = (($361) + 8|0);
        $363 = $__np;
        $364 = HEAP32[$363>>2]|0;
        $365 = (($364) + 8|0);
        $161 = $360;
        $162 = $362;
        $163 = $365;
        $366 = $161;
        $367 = $162;
        $368 = $163;
        $158 = $366;
        $159 = $367;
        $160 = $368;
        $369 = $159;
        $370 = $160;
        $154 = $369;
        $155 = $370;
        $371 = $154;
        $152 = $371;
        $372 = $152;
        $151 = $372;
        $373 = $151;
        $150 = $373;
        $374 = $150;
        $149 = $374;
        $375 = $149;
        $376 = HEAP8[$375>>0]|0;
        $377 = $376&255;
        $378 = $377 & 1;
        $379 = ($378|0)!=(0);
        if ($379) {
         $145 = $372;
         $380 = $145;
         $144 = $380;
         $381 = $144;
         $143 = $381;
         $382 = $143;
         $383 = (($382) + 4|0);
         $384 = HEAP32[$383>>2]|0;
         $391 = $384;
        } else {
         $148 = $372;
         $385 = $148;
         $147 = $385;
         $386 = $147;
         $146 = $386;
         $387 = $146;
         $388 = HEAP8[$387>>0]|0;
         $389 = $388&255;
         $390 = $389 >> 1;
         $391 = $390;
        }
        $__lhs_sz$i$i$i = $391;
        $392 = $__lhs_sz$i$i$i;
        $393 = $155;
        $139 = $393;
        $394 = $139;
        $138 = $394;
        $395 = $138;
        $137 = $395;
        $396 = $137;
        $136 = $396;
        $397 = $136;
        $398 = HEAP8[$397>>0]|0;
        $399 = $398&255;
        $400 = $399 & 1;
        $401 = ($400|0)!=(0);
        if ($401) {
         $132 = $394;
         $402 = $132;
         $131 = $402;
         $403 = $131;
         $130 = $403;
         $404 = $130;
         $405 = (($404) + 4|0);
         $406 = HEAP32[$405>>2]|0;
         $414 = $406;
        } else {
         $135 = $394;
         $407 = $135;
         $134 = $407;
         $408 = $134;
         $133 = $408;
         $409 = $133;
         $410 = HEAP8[$409>>0]|0;
         $411 = $410&255;
         $412 = $411 >> 1;
         $414 = $412;
        }
        $413 = ($392|0)!=($414|0);
        do {
         if ($413) {
          $$expand_i1_val = 0;
          $153 = $$expand_i1_val;
         } else {
          $415 = $154;
          $112 = $415;
          $416 = $112;
          $111 = $416;
          $417 = $111;
          $110 = $417;
          $418 = $110;
          $109 = $418;
          $419 = $109;
          $108 = $419;
          $420 = $108;
          $421 = HEAP8[$420>>0]|0;
          $422 = $421&255;
          $423 = $422 & 1;
          $424 = ($423|0)!=(0);
          if ($424) {
           $102 = $417;
           $425 = $102;
           $101 = $425;
           $426 = $101;
           $100 = $426;
           $427 = $100;
           $428 = (($427) + 8|0);
           $429 = HEAP32[$428>>2]|0;
           $436 = $429;
          } else {
           $107 = $417;
           $430 = $107;
           $106 = $430;
           $431 = $106;
           $105 = $431;
           $432 = $105;
           $433 = (($432) + 1|0);
           $104 = $433;
           $434 = $104;
           $103 = $434;
           $435 = $103;
           $436 = $435;
          }
          $99 = $436;
          $437 = $99;
          $__lp$i$i$i = $437;
          $438 = $155;
          $126 = $438;
          $439 = $126;
          $125 = $439;
          $440 = $125;
          $124 = $440;
          $441 = $124;
          $123 = $441;
          $442 = $123;
          $122 = $442;
          $443 = $122;
          $444 = HEAP8[$443>>0]|0;
          $445 = $444&255;
          $446 = $445 & 1;
          $447 = ($446|0)!=(0);
          if ($447) {
           $116 = $440;
           $448 = $116;
           $115 = $448;
           $449 = $115;
           $114 = $449;
           $450 = $114;
           $451 = (($450) + 8|0);
           $452 = HEAP32[$451>>2]|0;
           $459 = $452;
          } else {
           $121 = $440;
           $453 = $121;
           $120 = $453;
           $454 = $120;
           $119 = $454;
           $455 = $119;
           $456 = (($455) + 1|0);
           $118 = $456;
           $457 = $118;
           $117 = $457;
           $458 = $117;
           $459 = $458;
          }
          $113 = $459;
          $460 = $113;
          $__rp$i$i$i = $460;
          $461 = $154;
          $129 = $461;
          $462 = $129;
          $128 = $462;
          $463 = $128;
          $127 = $463;
          $464 = $127;
          $465 = HEAP8[$464>>0]|0;
          $466 = $465&255;
          $467 = $466 & 1;
          $468 = ($467|0)!=(0);
          if ($468) {
           $469 = $__lp$i$i$i;
           $470 = $__rp$i$i$i;
           $471 = $__lhs_sz$i$i$i;
           $140 = $469;
           $141 = $470;
           $142 = $471;
           $472 = $140;
           $473 = $141;
           $474 = $142;
           __THREW__ = 0;
           $475 = (invoke_iiii(440,($472|0),($473|0),($474|0))|0);
           $476 = __THREW__; __THREW__ = 0;
           $477 = $476&1;
           if ($477) {
            label = 43;
            break L22;
           }
           $478 = ($475|0)==(0);
           $$expand_i1_val2 = $478&1;
           $153 = $$expand_i1_val2;
           break;
          }
          while(1) {
           $482 = $__lhs_sz$i$i$i;
           $483 = ($482|0)!=(0);
           if (!($483)) {
            label = 49;
            break;
           }
           $484 = $__lp$i$i$i;
           $485 = HEAP8[$484>>0]|0;
           $486 = $485 << 24 >> 24;
           $487 = $__rp$i$i$i;
           $488 = HEAP8[$487>>0]|0;
           $489 = $488 << 24 >> 24;
           $490 = ($486|0)!=($489|0);
           if ($490) {
            label = 47;
            break;
           }
           $491 = $__lhs_sz$i$i$i;
           $492 = (($491) + -1)|0;
           $__lhs_sz$i$i$i = $492;
           $493 = $__lp$i$i$i;
           $494 = (($493) + 1|0);
           $__lp$i$i$i = $494;
           $495 = $__rp$i$i$i;
           $496 = (($495) + 1|0);
           $__rp$i$i$i = $496;
          }
          if ((label|0) == 47) {
           label = 0;
           $$expand_i1_val4 = 0;
           $153 = $$expand_i1_val4;
           break;
          }
          else if ((label|0) == 49) {
           label = 0;
           $$expand_i1_val6 = 1;
           $153 = $$expand_i1_val6;
           break;
          }
         }
        } while(0);
        $$pre_trunc = $153;
        $497 = $$pre_trunc&1;
        $524 = $497;
       } else {
        $524 = 0;
       }
       if (!($524)) {
        break;
       }
       $498 = $__np;
       $499 = HEAP32[$498>>2]|0;
       $__np = $499;
      }
      $500 = $__np;
      $501 = HEAP32[$500>>2]|0;
      $502 = $__pp;
      HEAP32[$502>>2] = $501;
      $503 = $__chash;
      $166 = $183;
      $167 = $503;
      $504 = $166;
      $505 = $167;
      $165 = $504;
      $506 = $165;
      $164 = $506;
      $507 = $164;
      $508 = HEAP32[$507>>2]|0;
      $509 = (($508) + ($505<<2)|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = HEAP32[$510>>2]|0;
      $512 = $__np;
      HEAP32[$512>>2] = $511;
      $513 = $__cp;
      $514 = $__chash;
      $170 = $183;
      $171 = $514;
      $515 = $170;
      $516 = $171;
      $169 = $515;
      $517 = $169;
      $168 = $517;
      $518 = $168;
      $519 = HEAP32[$518>>2]|0;
      $520 = (($519) + ($516<<2)|0);
      $521 = HEAP32[$520>>2]|0;
      HEAP32[$521>>2] = $513;
     }
    }
    $522 = $__pp;
    $523 = HEAP32[$522>>2]|0;
    $__cp = $523;
   }
   if ((label|0) == 43) {
    $479 = ___cxa_find_matching_catch(-1,-1)|0;
    $480 = tempRet0;
    $156 = $479;
    $157 = $480;
    $481 = $156;
    ___cxa_call_unexpected(($481|0));
    // unreachable;
   }
   else if ((label|0) == 58) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($this,$__val) {
 $this = $this|0;
 $__val = $__val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $26 = sp + 176|0;
 $41 = $this;
 $42 = $__val;
 $45 = $42;
 $40 = $45;
 $46 = $40;
 $39 = $46;
 $47 = $39;
 $38 = $47;
 $48 = $38;
 $37 = $48;
 $49 = $37;
 $36 = $49;
 $50 = $36;
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $52 & 1;
 $54 = ($53|0)!=(0);
 if ($54) {
  $30 = $47;
  $55 = $30;
  $29 = $55;
  $56 = $29;
  $28 = $56;
  $57 = $28;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $66 = $59;
 } else {
  $35 = $47;
  $60 = $35;
  $34 = $60;
  $61 = $34;
  $33 = $61;
  $62 = $33;
  $63 = (($62) + 1|0);
  $32 = $63;
  $64 = $32;
  $31 = $64;
  $65 = $31;
  $66 = $65;
 }
 $27 = $66;
 $67 = $27;
 $68 = $42;
 $23 = $68;
 $69 = $23;
 $22 = $69;
 $70 = $22;
 $21 = $70;
 $71 = $21;
 $20 = $71;
 $72 = $20;
 $19 = $72;
 $73 = $19;
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = $75 & 1;
 $77 = ($76|0)!=(0);
 if ($77) {
  $13 = $70;
  $78 = $13;
  $12 = $78;
  $79 = $12;
  $11 = $79;
  $80 = $11;
  $81 = (($80) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $89 = $82;
 } else {
  $18 = $70;
  $83 = $18;
  $17 = $83;
  $84 = $17;
  $16 = $84;
  $85 = $16;
  $86 = (($85) + 1|0);
  $15 = $86;
  $87 = $15;
  $14 = $87;
  $88 = $14;
  $89 = $88;
 }
 $10 = $89;
 $90 = $10;
 $91 = $42;
 $9 = $91;
 $92 = $9;
 $8 = $92;
 $93 = $8;
 $7 = $93;
 $94 = $7;
 $6 = $94;
 $95 = $6;
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = $97 & 1;
 $99 = ($98|0)!=(0);
 if ($99) {
  $2 = $92;
  $100 = $2;
  $1 = $100;
  $101 = $1;
  $0 = $101;
  $102 = $0;
  $103 = (($102) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $112 = $104;
 } else {
  $5 = $92;
  $105 = $5;
  $4 = $105;
  $106 = $4;
  $3 = $106;
  $107 = $3;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 >> 1;
  $112 = $110;
 }
 $111 = (($90) + ($112)|0);
 $24 = $67;
 $25 = $111;
 $113 = $24;
 $114 = $25;
 $115 = $24;
 $116 = $114;
 $117 = $115;
 $118 = (($116) - ($117))|0;
 __THREW__ = 0;
 $119 = (invoke_iiii(441,($26|0),($113|0),($118|0))|0);
 $120 = __THREW__; __THREW__ = 0;
 $121 = $120&1;
 if ($121) {
  $122 = ___cxa_find_matching_catch(-1,-1)|0;
  $123 = tempRet0;
  $43 = $122;
  $44 = $123;
  $124 = $43;
  ___cxa_call_unexpected(($124|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($119|0);
 }
 return 0|0;
}
function __ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj($this,$__key,$__len) {
 $this = $this|0;
 $__key = $__key|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__data = 0, $__h = 0, $__k = 0, $__m = 0, $__r = 0, $__r$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__r$i = sp + 16|0;
 $1 = $this;
 $2 = $__key;
 $3 = $__len;
 $__m = 1540483477;
 $__r = 24;
 $4 = $3;
 $__h = $4;
 $5 = $2;
 $__data = $5;
 while(1) {
  $6 = $3;
  $7 = ($6>>>0)>=(4);
  if (!($7)) {
   break;
  }
  $8 = $__data;
  $0 = $8;
  $9 = $0;
  ;HEAP8[$__r$i+0>>0]=HEAP8[$9+0>>0]|0;HEAP8[$__r$i+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$__r$i+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$__r$i+3>>0]=HEAP8[$9+3>>0]|0;
  $10 = HEAP32[$__r$i>>2]|0;
  $__k = $10;
  $11 = $__k;
  $12 = Math_imul($11, 1540483477)|0;
  $__k = $12;
  $13 = $__k;
  $14 = $13 >>> 24;
  $15 = $__k;
  $16 = $15 ^ $14;
  $__k = $16;
  $17 = $__k;
  $18 = Math_imul($17, 1540483477)|0;
  $__k = $18;
  $19 = $__h;
  $20 = Math_imul($19, 1540483477)|0;
  $__h = $20;
  $21 = $__k;
  $22 = $__h;
  $23 = $22 ^ $21;
  $__h = $23;
  $24 = $__data;
  $25 = (($24) + 4|0);
  $__data = $25;
  $26 = $3;
  $27 = (($26) - 4)|0;
  $3 = $27;
 }
 $28 = $3;
 if ((($28|0) == 3)) {
  $29 = $__data;
  $30 = (($29) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 16;
  $34 = $__h;
  $35 = $34 ^ $33;
  $__h = $35;
  label = 7;
 } else if ((($28|0) == 2)) {
  label = 7;
 } else if (!((($28|0) == 1))) {
  $50 = $__h;
  $51 = $50 >>> 13;
  $52 = $__h;
  $53 = $52 ^ $51;
  $__h = $53;
  $54 = $__h;
  $55 = Math_imul($54, 1540483477)|0;
  $__h = $55;
  $56 = $__h;
  $57 = $56 >>> 15;
  $58 = $__h;
  $59 = $58 ^ $57;
  $__h = $59;
  $60 = $__h;
  STACKTOP = sp;return ($60|0);
 }
 if ((label|0) == 7) {
  $36 = $__data;
  $37 = (($36) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 << 8;
  $41 = $__h;
  $42 = $41 ^ $40;
  $__h = $42;
 }
 $43 = $__data;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $__h;
 $47 = $46 ^ $45;
 $__h = $47;
 $48 = $__h;
 $49 = Math_imul($48, 1540483477)|0;
 $__h = $49;
 $50 = $__h;
 $51 = $50 >>> 13;
 $52 = $__h;
 $53 = $52 ^ $51;
 $__h = $53;
 $54 = $__h;
 $55 = Math_imul($54, 1540483477)|0;
 $__h = $55;
 $56 = $__h;
 $57 = $56 >>> 15;
 $58 = $__h;
 $59 = $58 ^ $57;
 $__h = $59;
 $60 = $__h;
 STACKTOP = sp;return ($60|0);
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0;
 var $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $8 = sp + 212|0;
 $14 = sp + 40|0;
 $110 = sp + 424|0;
 $112 = sp + 12|0;
 $118 = sp + 492|0;
 $119 = sp + 316|0;
 $116 = $this;
 $117 = $__k;
 $120 = $116;
 $115 = $120;
 $121 = $115;
 $122 = (($121) + 12|0);
 $114 = $122;
 $123 = $114;
 $113 = $123;
 $124 = $113;
 $125 = $117;
 $30 = $124;
 $31 = $125;
 $126 = $30;
 $127 = $31;
 $128 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($126,$127)|0);
 $__hash = $128;
 $29 = $120;
 $129 = $29;
 $28 = $129;
 $130 = $28;
 $27 = $130;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = (($132) + 4|0);
 $25 = $133;
 $134 = $25;
 $24 = $134;
 $135 = $24;
 $23 = $135;
 $136 = $23;
 $137 = HEAP32[$136>>2]|0;
 $__bc = $137;
 $138 = $__bc;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $__hash;
  $141 = $__bc;
  $21 = $140;
  $22 = $141;
  $142 = $22;
  $143 = $22;
  $144 = (($143) - 1)|0;
  $145 = $142 & $144;
  $146 = ($145|0)!=(0);
  if ($146) {
   $151 = $21;
   $152 = $22;
   $153 = (($151>>>0) % ($152>>>0))&-1;
   $154 = $153;
  } else {
   $147 = $21;
   $148 = $22;
   $149 = (($148) - 1)|0;
   $150 = $147 & $149;
   $154 = $150;
  }
  $__chash = $154;
  $155 = $__chash;
  $2 = $120;
  $3 = $155;
  $156 = $2;
  $157 = $3;
  $1 = $156;
  $158 = $1;
  $0 = $158;
  $159 = $0;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($157<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $__nd = $162;
  $163 = $__nd;
  $6 = $8;
  $7 = -1;
  $164 = $6;
  $165 = $7;
  $4 = $164;
  $5 = $165;
  $166 = $4;
  HEAP32[$166>>2] = 0;
  $167 = HEAP32[$8>>2]|0;
  HEAP32[$118>>2] = $167;
  $9 = $118;
  $168 = ($163|0)!=(0|0);
  do {
   if ($168) {
    $169 = $__nd;
    $170 = HEAP32[$169>>2]|0;
    $__nd = $170;
    L9: while(1) {
     $171 = $__nd;
     $12 = $14;
     $13 = -1;
     $172 = $12;
     $173 = $13;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     HEAP32[$174>>2] = 0;
     $175 = HEAP32[$14>>2]|0;
     HEAP32[$119>>2] = $175;
     $15 = $119;
     $176 = ($171|0)!=(0|0);
     if ($176) {
      $177 = $__nd;
      $178 = (($177) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $__bc;
      $16 = $179;
      $17 = $180;
      $181 = $17;
      $182 = $17;
      $183 = (($182) - 1)|0;
      $184 = $181 & $183;
      $185 = ($184|0)!=(0);
      if ($185) {
       $190 = $16;
       $191 = $17;
       $192 = (($190>>>0) % ($191>>>0))&-1;
       $195 = $192;
      } else {
       $186 = $16;
       $187 = $17;
       $188 = (($187) - 1)|0;
       $189 = $186 & $188;
       $195 = $189;
      }
      $193 = $__chash;
      $194 = ($195|0)==($193|0);
      $350 = $194;
     } else {
      $350 = 0;
     }
     if (!($350)) {
      label = 41;
      break;
     }
     $20 = $120;
     $196 = $20;
     $197 = (($196) + 16|0);
     $19 = $197;
     $198 = $19;
     $18 = $198;
     $199 = $18;
     $200 = $__nd;
     $201 = (($200) + 8|0);
     $202 = $117;
     $94 = $199;
     $95 = $201;
     $96 = $202;
     $203 = $94;
     $204 = $95;
     $205 = $96;
     $91 = $203;
     $92 = $204;
     $93 = $205;
     $206 = $92;
     $207 = $93;
     $87 = $206;
     $88 = $207;
     $208 = $87;
     $85 = $208;
     $209 = $85;
     $84 = $209;
     $210 = $84;
     $83 = $210;
     $211 = $83;
     $82 = $211;
     $212 = $82;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $214 & 1;
     $216 = ($215|0)!=(0);
     if ($216) {
      $78 = $209;
      $217 = $78;
      $77 = $217;
      $218 = $77;
      $76 = $218;
      $219 = $76;
      $220 = (($219) + 4|0);
      $221 = HEAP32[$220>>2]|0;
      $228 = $221;
     } else {
      $81 = $209;
      $222 = $81;
      $80 = $222;
      $223 = $80;
      $79 = $223;
      $224 = $79;
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = $226 >> 1;
      $228 = $227;
     }
     $__lhs_sz$i$i$i = $228;
     $229 = $__lhs_sz$i$i$i;
     $230 = $88;
     $72 = $230;
     $231 = $72;
     $71 = $231;
     $232 = $71;
     $70 = $232;
     $233 = $70;
     $69 = $233;
     $234 = $69;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $65 = $231;
      $239 = $65;
      $64 = $239;
      $240 = $64;
      $63 = $240;
      $241 = $63;
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $251 = $243;
     } else {
      $68 = $231;
      $244 = $68;
      $67 = $244;
      $245 = $67;
      $66 = $245;
      $246 = $66;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $251 = $249;
     }
     $250 = ($229|0)!=($251|0);
     do {
      if ($250) {
       $$expand_i1_val = 0;
       $86 = $$expand_i1_val;
      } else {
       $252 = $87;
       $45 = $252;
       $253 = $45;
       $44 = $253;
       $254 = $44;
       $43 = $254;
       $255 = $43;
       $42 = $255;
       $256 = $42;
       $41 = $256;
       $257 = $41;
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       $260 = $259 & 1;
       $261 = ($260|0)!=(0);
       if ($261) {
        $35 = $254;
        $262 = $35;
        $34 = $262;
        $263 = $34;
        $33 = $263;
        $264 = $33;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $273 = $266;
       } else {
        $40 = $254;
        $267 = $40;
        $39 = $267;
        $268 = $39;
        $38 = $268;
        $269 = $38;
        $270 = (($269) + 1|0);
        $37 = $270;
        $271 = $37;
        $36 = $271;
        $272 = $36;
        $273 = $272;
       }
       $32 = $273;
       $274 = $32;
       $__lp$i$i$i = $274;
       $275 = $88;
       $59 = $275;
       $276 = $59;
       $58 = $276;
       $277 = $58;
       $57 = $277;
       $278 = $57;
       $56 = $278;
       $279 = $56;
       $55 = $279;
       $280 = $55;
       $281 = HEAP8[$280>>0]|0;
       $282 = $281&255;
       $283 = $282 & 1;
       $284 = ($283|0)!=(0);
       if ($284) {
        $49 = $277;
        $285 = $49;
        $48 = $285;
        $286 = $48;
        $47 = $286;
        $287 = $47;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $296 = $289;
       } else {
        $54 = $277;
        $290 = $54;
        $53 = $290;
        $291 = $53;
        $52 = $291;
        $292 = $52;
        $293 = (($292) + 1|0);
        $51 = $293;
        $294 = $51;
        $50 = $294;
        $295 = $50;
        $296 = $295;
       }
       $46 = $296;
       $297 = $46;
       $__rp$i$i$i = $297;
       $298 = $87;
       $62 = $298;
       $299 = $62;
       $61 = $299;
       $300 = $61;
       $60 = $300;
       $301 = $60;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302&255;
       $304 = $303 & 1;
       $305 = ($304|0)!=(0);
       if ($305) {
        $306 = $__lp$i$i$i;
        $307 = $__rp$i$i$i;
        $308 = $__lhs_sz$i$i$i;
        $73 = $306;
        $74 = $307;
        $75 = $308;
        $309 = $73;
        $310 = $74;
        $311 = $75;
        __THREW__ = 0;
        $312 = (invoke_iiii(440,($309|0),($310|0),($311|0))|0);
        $313 = __THREW__; __THREW__ = 0;
        $314 = $313&1;
        if ($314) {
         label = 30;
         break L9;
        }
        $315 = ($312|0)==(0);
        $$expand_i1_val2 = $315&1;
        $86 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $319 = $__lhs_sz$i$i$i;
        $320 = ($319|0)!=(0);
        if (!($320)) {
         label = 36;
         break;
        }
        $321 = $__lp$i$i$i;
        $322 = HEAP8[$321>>0]|0;
        $323 = $322 << 24 >> 24;
        $324 = $__rp$i$i$i;
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($323|0)!=($326|0);
        if ($327) {
         label = 34;
         break;
        }
        $328 = $__lhs_sz$i$i$i;
        $329 = (($328) + -1)|0;
        $__lhs_sz$i$i$i = $329;
        $330 = $__lp$i$i$i;
        $331 = (($330) + 1|0);
        $__lp$i$i$i = $331;
        $332 = $__rp$i$i$i;
        $333 = (($332) + 1|0);
        $__rp$i$i$i = $333;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $86 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $86 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $86;
     $334 = $$pre_trunc&1;
     if ($334) {
      label = 38;
      break;
     }
     $340 = $__nd;
     $341 = HEAP32[$340>>2]|0;
     $__nd = $341;
    }
    if ((label|0) == 30) {
     $316 = ___cxa_find_matching_catch(-1,-1)|0;
     $317 = tempRet0;
     $89 = $316;
     $90 = $317;
     $318 = $89;
     ___cxa_call_unexpected(($318|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $335 = $__nd;
     $99 = $agg$result;
     $100 = $335;
     $336 = $99;
     $337 = $100;
     $97 = $336;
     $98 = $337;
     $338 = $97;
     $339 = $98;
     HEAP32[$338>>2] = $339;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $111 = $120;
 $108 = $110;
 $109 = -1;
 $342 = $108;
 $343 = $109;
 $106 = $342;
 $107 = $343;
 $344 = $106;
 HEAP32[$344>>2] = 0;
 $345 = HEAP32[$110>>2]|0;
 HEAP32[$112>>2] = $345;
 $101 = $112;
 $104 = $agg$result;
 $105 = 0;
 $346 = $104;
 $347 = $105;
 $102 = $346;
 $103 = $347;
 $348 = $102;
 $349 = $103;
 HEAP32[$348>>2] = $349;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__h = 0, $__i = 0, $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i22 = 0, $__tmp$i$i$i31 = 0, $__tmp$i$i$i9 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $6 = sp + 104|0;
 $9 = sp + 1082|0;
 $13 = sp + 144|0;
 $16 = sp + 1079|0;
 $40 = sp + 48|0;
 $43 = sp + 1076|0;
 $47 = sp + 56|0;
 $50 = sp + 1083|0;
 $__i1$i$i$i = sp + 8|0;
 $81 = sp;
 $84 = sp + 400|0;
 $96 = sp + 72|0;
 $99 = sp + 1081|0;
 $103 = sp + 32|0;
 $106 = sp + 1078|0;
 $138 = sp + 628|0;
 $139 = sp + 88|0;
 $142 = sp + 644|0;
 $143 = sp + 648|0;
 $__t21$i$i$i = sp + 120|0;
 $146 = sp + 80|0;
 $149 = sp + 696|0;
 $__u1$i = sp + 24|0;
 $151 = sp + 64|0;
 $169 = sp + 16|0;
 $172 = sp + 1080|0;
 $176 = sp + 128|0;
 $179 = sp + 1077|0;
 $__i1$i$i1 = sp + 40|0;
 $205 = sp + 136|0;
 $215 = sp + 976|0;
 $217 = sp + 984|0;
 $219 = sp + 1004|0;
 $__i1$i$i = sp + 112|0;
 $222 = sp + 96|0;
 $225 = sp + 580|0;
 $__i = sp + 624|0;
 $229 = sp + 1064|0;
 $__h = sp + 824|0;
 $230 = sp + 788|0;
 $231 = sp + 488|0;
 $__r = sp + 224|0;
 $234 = sp + 672|0;
 $227 = $this;
 $228 = $__k;
 $236 = $227;
 $237 = $228;
 $223 = $236;
 $224 = $237;
 $238 = $223;
 $239 = $224;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($225,$238,$239);
 ;HEAP8[$222+0>>0]=HEAP8[$225+0>>0]|0;HEAP8[$222+1>>0]=HEAP8[$225+1>>0]|0;HEAP8[$222+2>>0]=HEAP8[$225+2>>0]|0;HEAP8[$222+3>>0]=HEAP8[$225+3>>0]|0;
 $221 = $__i;
 $240 = $221;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$222+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$222+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$222+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$222+3>>0]|0;
 $220 = $240;
 $241 = $220;
 ;HEAP32[$241+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $218 = $236;
 $242 = $218;
 $216 = $242;
 $213 = $215;
 $214 = -1;
 $243 = $213;
 $244 = $214;
 $211 = $243;
 $212 = $244;
 $245 = $211;
 HEAP32[$245>>2] = 0;
 $246 = HEAP32[$215>>2]|0;
 HEAP32[$217>>2] = $246;
 $206 = $217;
 $209 = $219;
 $210 = 0;
 $247 = $209;
 $248 = $210;
 $207 = $247;
 $208 = $248;
 $249 = $207;
 $250 = $208;
 HEAP32[$249>>2] = $250;
 ;HEAP8[$205+0>>0]=HEAP8[$219+0>>0]|0;HEAP8[$205+1>>0]=HEAP8[$219+1>>0]|0;HEAP8[$205+2>>0]=HEAP8[$219+2>>0]|0;HEAP8[$205+3>>0]=HEAP8[$219+3>>0]|0;
 $204 = $229;
 $251 = $204;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$205+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$205+3>>0]|0;
 $203 = $251;
 $252 = $203;
 ;HEAP32[$252+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $201 = $__i;
 $202 = $229;
 $253 = $201;
 $254 = $202;
 $199 = $253;
 $200 = $254;
 $255 = $199;
 $256 = $200;
 $197 = $255;
 $198 = $256;
 $257 = $197;
 $258 = HEAP32[$257>>2]|0;
 $259 = $198;
 $260 = HEAP32[$259>>2]|0;
 $261 = ($258|0)==($260|0);
 $262 = $261 ^ 1;
 if ($262) {
  $162 = $__i;
  $263 = $162;
  $161 = $263;
  $264 = $161;
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + 8|0);
  $160 = $266;
  $267 = $160;
  $159 = $267;
  $268 = $159;
  $158 = $268;
  $269 = $158;
  $157 = $269;
  $270 = $157;
  $271 = (($270) + 12|0);
  $226 = $271;
  $498 = $226;
  STACKTOP = sp;return ($498|0);
 }
 $272 = $228;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSC_($231,$236,$272);
 $156 = $231;
 $273 = $156;
 $154 = $230;
 $155 = $273;
 $274 = $154;
 $275 = $155;
 $152 = $274;
 $153 = $275;
 $276 = $152;
 $277 = $153;
 HEAP32[$276>>2] = $277;
 ;HEAP8[$151+0>>0]=HEAP8[$230+0>>0]|0;HEAP8[$151+1>>0]=HEAP8[$230+1>>0]|0;HEAP8[$151+2>>0]=HEAP8[$230+2>>0]|0;HEAP8[$151+3>>0]=HEAP8[$230+3>>0]|0;
 $150 = $__h;
 $278 = $150;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$151+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$151+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$151+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$151+3>>0]|0;
 $148 = $278;
 $279 = $148;
 $147 = $__u1$i;
 $280 = $147;
 $281 = HEAP32[$280>>2]|0;
 $128 = $281;
 $282 = $128;
 $127 = $282;
 $283 = $127;
 $126 = $283;
 $284 = $126;
 $285 = HEAP32[$284>>2]|0;
 $__t$i$i$i = $285;
 $125 = $282;
 $286 = $125;
 $124 = $286;
 $287 = $124;
 HEAP32[$287>>2] = 0;
 $288 = $__t$i$i$i;
 $129 = $__u1$i;
 $289 = $129;
 $290 = HEAP32[$289>>2]|0;
 $132 = $290;
 $291 = $132;
 $131 = $291;
 $292 = $131;
 $130 = $292;
 $293 = $130;
 $294 = (($293) + 4|0);
 $133 = $294;
 $295 = $133;
 ;HEAP32[$149+0>>2]=HEAP32[$295+0>>2]|0;HEAP32[$149+4>>2]=HEAP32[$295+4>>2]|0;
 ;HEAP8[$146+0>>0]=HEAP8[$149+0>>0]|0;HEAP8[$146+1>>0]=HEAP8[$149+1>>0]|0;HEAP8[$146+2>>0]=HEAP8[$149+2>>0]|0;HEAP8[$146+3>>0]=HEAP8[$149+3>>0]|0;HEAP8[$146+4>>0]=HEAP8[$149+4>>0]|0;HEAP8[$146+5>>0]=HEAP8[$149+5>>0]|0;HEAP8[$146+6>>0]=HEAP8[$149+6>>0]|0;HEAP8[$146+7>>0]=HEAP8[$149+7>>0]|0;
 $144 = $279;
 $145 = $288;
 $296 = $144;
 $297 = $145;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$146+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$146+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$146+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$146+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$146+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$146+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$146+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$146+7>>0]|0;
 $141 = $296;
 HEAP32[$142>>2] = $297;
 $298 = $141;
 $140 = $142;
 $299 = $140;
 $300 = HEAP32[$299>>2]|0;
 $134 = $__t21$i$i$i;
 $301 = $134;
 ;HEAP32[$143+0>>2]=HEAP32[$301+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$301+4>>2]|0;
 ;HEAP8[$139+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$139+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$143+3>>0]|0;HEAP8[$139+4>>0]=HEAP8[$143+4>>0]|0;HEAP8[$139+5>>0]=HEAP8[$143+5>>0]|0;HEAP8[$139+6>>0]=HEAP8[$143+6>>0]|0;HEAP8[$139+7>>0]=HEAP8[$143+7>>0]|0;
 $137 = $298;
 HEAP32[$138>>2] = $300;
 $302 = $137;
 $136 = $138;
 $303 = $136;
 $304 = HEAP32[$303>>2]|0;
 HEAP32[$302>>2] = $304;
 $305 = (($302) + 4|0);
 $135 = $139;
 $306 = $135;
 ;HEAP32[$305+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$305+4>>2]=HEAP32[$306+4>>2]|0;
 $123 = $231;
 $307 = $123;
 $122 = $307;
 $308 = $122;
 $120 = $308;
 $121 = 0;
 $309 = $120;
 $119 = $309;
 $310 = $119;
 $118 = $310;
 $311 = $118;
 $312 = HEAP32[$311>>2]|0;
 $__tmp$i$i$i9 = $312;
 $313 = $121;
 $93 = $309;
 $314 = $93;
 $92 = $314;
 $315 = $92;
 HEAP32[$315>>2] = $313;
 $316 = $__tmp$i$i$i9;
 $317 = ($316|0)!=(0|0);
 if ($317) {
  $91 = $309;
  $318 = $91;
  $90 = $318;
  $319 = $90;
  $320 = (($319) + 4|0);
  $321 = $__tmp$i$i$i9;
  $114 = $320;
  $115 = $321;
  $322 = $114;
  $323 = (($322) + 5|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&1;
  do {
   if ($325) {
    $326 = HEAP32[$322>>2]|0;
    $327 = $115;
    $328 = (($327) + 8|0);
    $329 = (($328) + 12|0);
    $113 = $329;
    $330 = $113;
    $104 = $326;
    $105 = $330;
    $331 = $104;
    $332 = $105;
    ;HEAP8[$103+0>>0]=HEAP8[$106+0>>0]|0;
    $101 = $331;
    $102 = $332;
    $333 = $102;
    __THREW__ = 0;
    invoke_vi(415,($333|0));
    $334 = __THREW__; __THREW__ = 0;
    $335 = $334&1;
    if ($335) {
     $336 = ___cxa_find_matching_catch(-1,-1)|0;
     $337 = tempRet0;
     $116 = $336;
     $117 = $337;
     $338 = $116;
     ___cxa_call_unexpected(($338|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $339 = (($322) + 4|0);
  $340 = HEAP8[$339>>0]|0;
  $341 = $340&1;
  do {
   if ($341) {
    $342 = HEAP32[$322>>2]|0;
    $343 = $115;
    $344 = (($343) + 8|0);
    $100 = $344;
    $345 = $100;
    $97 = $342;
    $98 = $345;
    $346 = $97;
    $347 = $98;
    ;HEAP8[$96+0>>0]=HEAP8[$99+0>>0]|0;
    $94 = $346;
    $95 = $347;
    $348 = $95;
    __THREW__ = 0;
    invoke_vi(415,($348|0));
    $349 = __THREW__; __THREW__ = 0;
    $350 = $349&1;
    if ($350) {
     $336 = ___cxa_find_matching_catch(-1,-1)|0;
     $337 = tempRet0;
     $116 = $336;
     $117 = $337;
     $338 = $116;
     ___cxa_call_unexpected(($338|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $351 = $115;
  $352 = ($351|0)!=(0|0);
  if ($352) {
   $353 = HEAP32[$322>>2]|0;
   $354 = $115;
   $110 = $353;
   $111 = $354;
   $112 = 1;
   $355 = $110;
   $356 = $111;
   $357 = $112;
   $107 = $355;
   $108 = $356;
   $109 = $357;
   $358 = $108;
   __ZdlPv($358);
  }
 }
 $89 = $__h;
 $359 = $89;
 $88 = $359;
 $360 = $88;
 $87 = $360;
 $361 = $87;
 $362 = HEAP32[$361>>2]|0;
 __THREW__ = 0;
 invoke_viii(442,($234|0),($236|0),($362|0));
 $363 = __THREW__; __THREW__ = 0;
 $364 = $363&1;
 if ($364) {
  $444 = ___cxa_find_matching_catch(-1,-1)|0;
  $445 = tempRet0;
  $232 = $444;
  $233 = $445;
  $196 = $__h;
  $446 = $196;
  $195 = $446;
  $447 = $195;
  $193 = $447;
  $194 = 0;
  $448 = $193;
  $192 = $448;
  $449 = $192;
  $191 = $449;
  $450 = $191;
  $451 = HEAP32[$450>>2]|0;
  $__tmp$i$i$i = $451;
  $452 = $194;
  $166 = $448;
  $453 = $166;
  $165 = $453;
  $454 = $165;
  HEAP32[$454>>2] = $452;
  $455 = $__tmp$i$i$i;
  $456 = ($455|0)!=(0|0);
  if ($456) {
   $164 = $448;
   $457 = $164;
   $163 = $457;
   $458 = $163;
   $459 = (($458) + 4|0);
   $460 = $__tmp$i$i$i;
   $187 = $459;
   $188 = $460;
   $461 = $187;
   $462 = (($461) + 5|0);
   $463 = HEAP8[$462>>0]|0;
   $464 = $463&1;
   do {
    if ($464) {
     $465 = HEAP32[$461>>2]|0;
     $466 = $188;
     $467 = (($466) + 8|0);
     $468 = (($467) + 12|0);
     $186 = $468;
     $469 = $186;
     $177 = $465;
     $178 = $469;
     $470 = $177;
     $471 = $178;
     ;HEAP8[$176+0>>0]=HEAP8[$179+0>>0]|0;
     $174 = $470;
     $175 = $471;
     $472 = $175;
     __THREW__ = 0;
     invoke_vi(415,($472|0));
     $473 = __THREW__; __THREW__ = 0;
     $474 = $473&1;
     if ($474) {
      $475 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $476 = tempRet0;
      $189 = $475;
      $190 = $476;
      $477 = $189;
      ___cxa_call_unexpected(($477|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $478 = (($461) + 4|0);
   $479 = HEAP8[$478>>0]|0;
   $480 = $479&1;
   do {
    if ($480) {
     $481 = HEAP32[$461>>2]|0;
     $482 = $188;
     $483 = (($482) + 8|0);
     $173 = $483;
     $484 = $173;
     $170 = $481;
     $171 = $484;
     $485 = $170;
     $486 = $171;
     ;HEAP8[$169+0>>0]=HEAP8[$172+0>>0]|0;
     $167 = $485;
     $168 = $486;
     $487 = $168;
     __THREW__ = 0;
     invoke_vi(415,($487|0));
     $488 = __THREW__; __THREW__ = 0;
     $489 = $488&1;
     if ($489) {
      $475 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $476 = tempRet0;
      $189 = $475;
      $190 = $476;
      $477 = $189;
      ___cxa_call_unexpected(($477|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $490 = $188;
   $491 = ($490|0)!=(0|0);
   if ($491) {
    $492 = HEAP32[$461>>2]|0;
    $493 = $188;
    $183 = $492;
    $184 = $493;
    $185 = 1;
    $494 = $183;
    $495 = $184;
    $496 = $185;
    $180 = $494;
    $181 = $495;
    $182 = $496;
    $497 = $181;
    __ZdlPv($497);
   }
  }
  $499 = $232;
  $500 = $233;
  ___resumeException($499|0);
  // unreachable;
 }
 $85 = $__r;
 $86 = $234;
 $365 = $85;
 $366 = $86;
 $82 = $365;
 $83 = $366;
 $367 = $82;
 $368 = $83;
 ;HEAP32[$84+0>>2]=HEAP32[$368+0>>2]|0;
 ;HEAP8[$81+0>>0]=HEAP8[$84+0>>0]|0;HEAP8[$81+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$84+3>>0]|0;
 $80 = $367;
 $369 = $80;
 ;HEAP8[$__i1$i$i$i+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$__i1$i$i$i+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$__i1$i$i$i+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$__i1$i$i$i+3>>0]=HEAP8[$81+3>>0]|0;
 $79 = $369;
 $370 = $79;
 ;HEAP32[$370+0>>2]=HEAP32[$__i1$i$i$i+0>>2]|0;
 $371 = (($367) + 4|0);
 $372 = $83;
 $373 = (($372) + 4|0);
 $374 = HEAP8[$373>>0]|0;
 $375 = $374&1;
 $376 = $375&1;
 HEAP8[$371>>0] = $376;
 $78 = $__h;
 $377 = $78;
 $77 = $377;
 $378 = $77;
 $76 = $378;
 $379 = $76;
 $380 = HEAP32[$379>>2]|0;
 $__t$i = $380;
 $75 = $377;
 $381 = $75;
 $74 = $381;
 $382 = $74;
 HEAP32[$382>>2] = 0;
 $73 = $__r;
 $383 = $73;
 $72 = $383;
 $384 = $72;
 $385 = HEAP32[$384>>2]|0;
 $386 = (($385) + 8|0);
 $71 = $386;
 $387 = $71;
 $70 = $387;
 $388 = $70;
 $69 = $388;
 $389 = $69;
 $68 = $389;
 $390 = $68;
 $391 = (($390) + 12|0);
 $226 = $391;
 $235 = 1;
 $33 = $__h;
 $392 = $33;
 $32 = $392;
 $393 = $32;
 $30 = $393;
 $31 = 0;
 $394 = $30;
 $29 = $394;
 $395 = $29;
 $28 = $395;
 $396 = $28;
 $397 = HEAP32[$396>>2]|0;
 $__tmp$i$i$i31 = $397;
 $398 = $31;
 $3 = $394;
 $399 = $3;
 $2 = $399;
 $400 = $2;
 HEAP32[$400>>2] = $398;
 $401 = $__tmp$i$i$i31;
 $402 = ($401|0)!=(0|0);
 if ($402) {
  $1 = $394;
  $403 = $1;
  $0 = $403;
  $404 = $0;
  $405 = (($404) + 4|0);
  $406 = $__tmp$i$i$i31;
  $24 = $405;
  $25 = $406;
  $407 = $24;
  $408 = (($407) + 5|0);
  $409 = HEAP8[$408>>0]|0;
  $410 = $409&1;
  do {
   if ($410) {
    $411 = HEAP32[$407>>2]|0;
    $412 = $25;
    $413 = (($412) + 8|0);
    $414 = (($413) + 12|0);
    $23 = $414;
    $415 = $23;
    $14 = $411;
    $15 = $415;
    $416 = $14;
    $417 = $15;
    ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
    $11 = $416;
    $12 = $417;
    $418 = $12;
    __THREW__ = 0;
    invoke_vi(415,($418|0));
    $419 = __THREW__; __THREW__ = 0;
    $420 = $419&1;
    if ($420) {
     $421 = ___cxa_find_matching_catch(-1,-1)|0;
     $422 = tempRet0;
     $26 = $421;
     $27 = $422;
     $423 = $26;
     ___cxa_call_unexpected(($423|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $424 = (($407) + 4|0);
  $425 = HEAP8[$424>>0]|0;
  $426 = $425&1;
  do {
   if ($426) {
    $427 = HEAP32[$407>>2]|0;
    $428 = $25;
    $429 = (($428) + 8|0);
    $10 = $429;
    $430 = $10;
    $7 = $427;
    $8 = $430;
    $431 = $7;
    $432 = $8;
    ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
    $4 = $431;
    $5 = $432;
    $433 = $5;
    __THREW__ = 0;
    invoke_vi(415,($433|0));
    $434 = __THREW__; __THREW__ = 0;
    $435 = $434&1;
    if ($435) {
     $421 = ___cxa_find_matching_catch(-1,-1)|0;
     $422 = tempRet0;
     $26 = $421;
     $27 = $422;
     $423 = $26;
     ___cxa_call_unexpected(($423|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $436 = $25;
  $437 = ($436|0)!=(0|0);
  if ($437) {
   $438 = HEAP32[$407>>2]|0;
   $439 = $25;
   $20 = $438;
   $21 = $439;
   $22 = 1;
   $440 = $20;
   $441 = $21;
   $442 = $22;
   $17 = $440;
   $18 = $441;
   $19 = $442;
   $443 = $18;
   __ZdlPv($443);
  }
 }
 $498 = $226;
 STACKTOP = sp;return ($498|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__d1$i = 0;
 var $__h = 0, $__i$i$i$i$i = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i4$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i$i = 0, $__t21$i$i$i29 = 0, $__t21$i$i$i5$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i11 = 0, $__tmp$i$i$i15$i = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i38 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i6$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1632|0;
 $6 = sp + 200|0;
 $9 = sp + 1610|0;
 $13 = sp + 112|0;
 $16 = sp + 1613|0;
 $48 = sp + 312|0;
 $49 = sp + 168|0;
 $52 = sp + 328|0;
 $53 = sp + 336|0;
 $__t21$i$i$i29 = sp + 136|0;
 $56 = sp + 120|0;
 $59 = sp + 368|0;
 $__u1$i = sp + 88|0;
 $61 = sp + 176|0;
 $73 = sp + 216|0;
 $76 = sp + 1614|0;
 $80 = sp + 80|0;
 $83 = sp + 1611|0;
 $115 = sp + 608|0;
 $116 = sp + 128|0;
 $119 = sp + 632|0;
 $120 = sp + 640|0;
 $__t21$i$i$i5$i = sp + 232|0;
 $123 = sp + 56|0;
 $126 = sp + 1200|0;
 $__u1$i6$i = sp + 184|0;
 $128 = sp + 208|0;
 $148 = sp + 764|0;
 $149 = sp + 24|0;
 $152 = sp + 780|0;
 $153 = sp + 784|0;
 $__t21$i$i$i$i = sp + 40|0;
 $156 = sp + 224|0;
 $159 = sp + 456|0;
 $__u1$i$i = sp + 96|0;
 $161 = sp + 32|0;
 $167 = sp + 836|0;
 $168 = sp + 840|0;
 $169 = sp + 1604|0;
 $176 = sp + 48|0;
 $179 = sp + 1617|0;
 $183 = sp + 152|0;
 $186 = sp + 1616|0;
 $228 = sp + 72|0;
 $231 = sp + 1609|0;
 $235 = sp + 192|0;
 $238 = sp + 1615|0;
 $271 = sp + 1308|0;
 $272 = sp + 160|0;
 $275 = sp + 1320|0;
 $276 = sp + 1328|0;
 $__t21$i$i$i = sp + 144|0;
 $279 = sp;
 $282 = sp + 1352|0;
 $283 = sp + 1360|0;
 $__d1$i = sp + 8|0;
 $286 = sp + 104|0;
 $293 = sp + 16|0;
 $296 = sp + 1612|0;
 $300 = sp + 64|0;
 $303 = sp + 1608|0;
 $__h = sp + 612|0;
 $335 = sp + 928|0;
 $338 = sp + 440|0;
 $339 = sp + 1180|0;
 $333 = $this;
 $334 = $__k;
 $341 = $333;
 $332 = $341;
 $342 = $332;
 $343 = (($342) + 8|0);
 $331 = $343;
 $344 = $331;
 $330 = $344;
 $345 = $330;
 $__na = $345;
 $346 = $__na;
 $328 = $346;
 $329 = 1;
 $347 = $328;
 $348 = $329;
 $325 = $347;
 $326 = $348;
 $327 = 0;
 $349 = $326;
 $350 = $349<<5;
 $351 = (__Znwj($350)|0);
 $352 = $__na;
 $323 = $335;
 $324 = $352;
 $353 = $323;
 $354 = $324;
 $321 = $353;
 $322 = $354;
 $355 = $321;
 $356 = $322;
 HEAP32[$355>>2] = $356;
 $357 = (($355) + 4|0);
 HEAP8[$357>>0] = 0;
 $358 = (($355) + 5|0);
 HEAP8[$358>>0] = 0;
 ;HEAP8[$286+0>>0]=HEAP8[$335+0>>0]|0;HEAP8[$286+1>>0]=HEAP8[$335+1>>0]|0;HEAP8[$286+2>>0]=HEAP8[$335+2>>0]|0;HEAP8[$286+3>>0]=HEAP8[$335+3>>0]|0;HEAP8[$286+4>>0]=HEAP8[$335+4>>0]|0;HEAP8[$286+5>>0]=HEAP8[$335+5>>0]|0;HEAP8[$286+6>>0]=HEAP8[$335+6>>0]|0;HEAP8[$286+7>>0]=HEAP8[$335+7>>0]|0;
 $284 = $__h;
 $285 = $351;
 $359 = $284;
 $360 = $285;
 ;HEAP8[$__d1$i+0>>0]=HEAP8[$286+0>>0]|0;HEAP8[$__d1$i+1>>0]=HEAP8[$286+1>>0]|0;HEAP8[$__d1$i+2>>0]=HEAP8[$286+2>>0]|0;HEAP8[$__d1$i+3>>0]=HEAP8[$286+3>>0]|0;HEAP8[$__d1$i+4>>0]=HEAP8[$286+4>>0]|0;HEAP8[$__d1$i+5>>0]=HEAP8[$286+5>>0]|0;HEAP8[$__d1$i+6>>0]=HEAP8[$286+6>>0]|0;HEAP8[$__d1$i+7>>0]=HEAP8[$286+7>>0]|0;
 $281 = $359;
 HEAP32[$282>>2] = $360;
 $361 = $281;
 $280 = $282;
 $362 = $280;
 $363 = HEAP32[$362>>2]|0;
 $266 = $__d1$i;
 $364 = $266;
 ;HEAP32[$283+0>>2]=HEAP32[$364+0>>2]|0;HEAP32[$283+4>>2]=HEAP32[$364+4>>2]|0;
 ;HEAP8[$279+0>>0]=HEAP8[$283+0>>0]|0;HEAP8[$279+1>>0]=HEAP8[$283+1>>0]|0;HEAP8[$279+2>>0]=HEAP8[$283+2>>0]|0;HEAP8[$279+3>>0]=HEAP8[$283+3>>0]|0;HEAP8[$279+4>>0]=HEAP8[$283+4>>0]|0;HEAP8[$279+5>>0]=HEAP8[$283+5>>0]|0;HEAP8[$279+6>>0]=HEAP8[$283+6>>0]|0;HEAP8[$279+7>>0]=HEAP8[$283+7>>0]|0;
 $277 = $361;
 $278 = $363;
 $365 = $277;
 $366 = $278;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$279+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$279+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$279+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$279+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$279+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$279+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$279+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$279+7>>0]|0;
 $274 = $365;
 HEAP32[$275>>2] = $366;
 $367 = $274;
 $273 = $275;
 $368 = $273;
 $369 = HEAP32[$368>>2]|0;
 $267 = $__t21$i$i$i;
 $370 = $267;
 ;HEAP32[$276+0>>2]=HEAP32[$370+0>>2]|0;HEAP32[$276+4>>2]=HEAP32[$370+4>>2]|0;
 ;HEAP8[$272+0>>0]=HEAP8[$276+0>>0]|0;HEAP8[$272+1>>0]=HEAP8[$276+1>>0]|0;HEAP8[$272+2>>0]=HEAP8[$276+2>>0]|0;HEAP8[$272+3>>0]=HEAP8[$276+3>>0]|0;HEAP8[$272+4>>0]=HEAP8[$276+4>>0]|0;HEAP8[$272+5>>0]=HEAP8[$276+5>>0]|0;HEAP8[$272+6>>0]=HEAP8[$276+6>>0]|0;HEAP8[$272+7>>0]=HEAP8[$276+7>>0]|0;
 $270 = $367;
 HEAP32[$271>>2] = $369;
 $371 = $270;
 $269 = $271;
 $372 = $269;
 $373 = HEAP32[$372>>2]|0;
 HEAP32[$371>>2] = $373;
 $374 = (($371) + 4|0);
 $268 = $272;
 $375 = $268;
 ;HEAP32[$374+0>>2]=HEAP32[$375+0>>2]|0;HEAP32[$374+4>>2]=HEAP32[$375+4>>2]|0;
 $376 = $__na;
 $265 = $__h;
 $377 = $265;
 $264 = $377;
 $378 = $264;
 $263 = $378;
 $379 = $263;
 $380 = HEAP32[$379>>2]|0;
 $381 = (($380) + 8|0);
 $262 = $381;
 $382 = $262;
 $383 = $334;
 $259 = $376;
 $260 = $382;
 $261 = $383;
 $384 = $260;
 $385 = ($384|0)==(0|0);
 do {
  if (!($385)) {
   $386 = $261;
   __THREW__ = 0;
   invoke_vii(439,($384|0),($386|0));
   $387 = __THREW__; __THREW__ = 0;
   $388 = $387&1;
   if (!($388)) {
    break;
   }
   $682 = ___cxa_find_matching_catch(-1,-1)|0;
   $683 = tempRet0;
   $336 = $682;
   $337 = $683;
   $320 = $__h;
   $684 = $320;
   $319 = $684;
   $685 = $319;
   $317 = $685;
   $318 = 0;
   $686 = $317;
   $316 = $686;
   $687 = $316;
   $315 = $687;
   $688 = $315;
   $689 = HEAP32[$688>>2]|0;
   $__tmp$i$i$i = $689;
   $690 = $318;
   $290 = $686;
   $691 = $290;
   $289 = $691;
   $692 = $289;
   HEAP32[$692>>2] = $690;
   $693 = $__tmp$i$i$i;
   $694 = ($693|0)!=(0|0);
   if ($694) {
    $288 = $686;
    $695 = $288;
    $287 = $695;
    $696 = $287;
    $697 = (($696) + 4|0);
    $698 = $__tmp$i$i$i;
    $311 = $697;
    $312 = $698;
    $699 = $311;
    $700 = (($699) + 5|0);
    $701 = HEAP8[$700>>0]|0;
    $702 = $701&1;
    do {
     if ($702) {
      $703 = HEAP32[$699>>2]|0;
      $704 = $312;
      $705 = (($704) + 8|0);
      $706 = (($705) + 12|0);
      $310 = $706;
      $707 = $310;
      $301 = $703;
      $302 = $707;
      $708 = $301;
      $709 = $302;
      ;HEAP8[$300+0>>0]=HEAP8[$303+0>>0]|0;
      $298 = $708;
      $299 = $709;
      $710 = $299;
      __THREW__ = 0;
      invoke_vi(415,($710|0));
      $711 = __THREW__; __THREW__ = 0;
      $712 = $711&1;
      if ($712) {
       $713 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $714 = tempRet0;
       $313 = $713;
       $314 = $714;
       $715 = $313;
       ___cxa_call_unexpected(($715|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $716 = (($699) + 4|0);
    $717 = HEAP8[$716>>0]|0;
    $718 = $717&1;
    do {
     if ($718) {
      $719 = HEAP32[$699>>2]|0;
      $720 = $312;
      $721 = (($720) + 8|0);
      $297 = $721;
      $722 = $297;
      $294 = $719;
      $295 = $722;
      $723 = $294;
      $724 = $295;
      ;HEAP8[$293+0>>0]=HEAP8[$296+0>>0]|0;
      $291 = $723;
      $292 = $724;
      $725 = $292;
      __THREW__ = 0;
      invoke_vi(415,($725|0));
      $726 = __THREW__; __THREW__ = 0;
      $727 = $726&1;
      if ($727) {
       $713 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $714 = tempRet0;
       $313 = $713;
       $314 = $714;
       $715 = $313;
       ___cxa_call_unexpected(($715|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $728 = $312;
    $729 = ($728|0)!=(0|0);
    if ($729) {
     $730 = HEAP32[$699>>2]|0;
     $731 = $312;
     $307 = $730;
     $308 = $731;
     $309 = 1;
     $732 = $307;
     $733 = $308;
     $734 = $309;
     $304 = $732;
     $305 = $733;
     $306 = $734;
     $735 = $305;
     __ZdlPv($735);
    }
   }
   $736 = $336;
   $737 = $337;
   ___resumeException($736|0);
   // unreachable;
  }
 } while(0);
 $258 = $__h;
 $389 = $258;
 $257 = $389;
 $390 = $257;
 $256 = $390;
 $391 = $256;
 $392 = (($391) + 4|0);
 $393 = (($392) + 4|0);
 HEAP8[$393>>0] = 1;
 $394 = $__na;
 $221 = $__h;
 $395 = $221;
 $220 = $395;
 $396 = $220;
 $219 = $396;
 $397 = $219;
 $398 = HEAP32[$397>>2]|0;
 $399 = (($398) + 8|0);
 $400 = (($399) + 12|0);
 $218 = $400;
 $401 = $218;
 $216 = $394;
 $217 = $401;
 $402 = $217;
 $403 = ($402|0)==(0|0);
 if (!($403)) {
  $215 = $402;
  $404 = $215;
  $214 = $404;
  $405 = $214;
  $213 = $405;
  $406 = $213;
  $212 = $406;
  $407 = $212;
  $211 = $407;
  $408 = $211;
  $210 = $408;
  $209 = $405;
  $409 = $209;
  $208 = $409;
  $410 = $208;
  $207 = $410;
  $411 = $207;
  $__a$i$i$i$i = $411;
  $__i$i$i$i$i = 0;
  while(1) {
   $412 = $__i$i$i$i$i;
   $413 = ($412>>>0)<(3);
   if (!($413)) {
    break;
   }
   $414 = $__i$i$i$i$i;
   $415 = $__a$i$i$i$i;
   $416 = (($415) + ($414<<2)|0);
   HEAP32[$416>>2] = 0;
   $417 = $__i$i$i$i$i;
   $418 = (($417) + 1)|0;
   $__i$i$i$i$i = $418;
  }
 }
 $206 = $__h;
 $419 = $206;
 $205 = $419;
 $420 = $205;
 $204 = $420;
 $421 = $204;
 $422 = (($421) + 4|0);
 $423 = (($422) + 5|0);
 HEAP8[$423>>0] = 1;
 $166 = $__h;
 $424 = $166;
 $164 = $169;
 $165 = $424;
 $425 = $164;
 $426 = $165;
 $162 = $425;
 $163 = $426;
 $427 = $162;
 $428 = $163;
 HEAP32[$427>>2] = $428;
 ;HEAP8[$161+0>>0]=HEAP8[$169+0>>0]|0;HEAP8[$161+1>>0]=HEAP8[$169+1>>0]|0;HEAP8[$161+2>>0]=HEAP8[$169+2>>0]|0;HEAP8[$161+3>>0]=HEAP8[$169+3>>0]|0;
 $160 = $168;
 $429 = $160;
 ;HEAP8[$__u1$i$i+0>>0]=HEAP8[$161+0>>0]|0;HEAP8[$__u1$i$i+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$__u1$i$i+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$__u1$i$i+3>>0]=HEAP8[$161+3>>0]|0;
 $158 = $429;
 $430 = $158;
 $157 = $__u1$i$i;
 $431 = $157;
 $432 = HEAP32[$431>>2]|0;
 $138 = $432;
 $433 = $138;
 $137 = $433;
 $434 = $137;
 $136 = $434;
 $435 = $136;
 $436 = HEAP32[$435>>2]|0;
 $__t$i$i$i$i = $436;
 $135 = $433;
 $437 = $135;
 $134 = $437;
 $438 = $134;
 HEAP32[$438>>2] = 0;
 $439 = $__t$i$i$i$i;
 $139 = $__u1$i$i;
 $440 = $139;
 $441 = HEAP32[$440>>2]|0;
 $142 = $441;
 $442 = $142;
 $141 = $442;
 $443 = $141;
 $140 = $443;
 $444 = $140;
 $445 = (($444) + 4|0);
 $143 = $445;
 $446 = $143;
 ;HEAP32[$159+0>>2]=HEAP32[$446+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$446+4>>2]|0;
 ;HEAP8[$156+0>>0]=HEAP8[$159+0>>0]|0;HEAP8[$156+1>>0]=HEAP8[$159+1>>0]|0;HEAP8[$156+2>>0]=HEAP8[$159+2>>0]|0;HEAP8[$156+3>>0]=HEAP8[$159+3>>0]|0;HEAP8[$156+4>>0]=HEAP8[$159+4>>0]|0;HEAP8[$156+5>>0]=HEAP8[$159+5>>0]|0;HEAP8[$156+6>>0]=HEAP8[$159+6>>0]|0;HEAP8[$156+7>>0]=HEAP8[$159+7>>0]|0;
 $154 = $430;
 $155 = $439;
 $447 = $154;
 $448 = $155;
 ;HEAP8[$__t21$i$i$i$i+0>>0]=HEAP8[$156+0>>0]|0;HEAP8[$__t21$i$i$i$i+1>>0]=HEAP8[$156+1>>0]|0;HEAP8[$__t21$i$i$i$i+2>>0]=HEAP8[$156+2>>0]|0;HEAP8[$__t21$i$i$i$i+3>>0]=HEAP8[$156+3>>0]|0;HEAP8[$__t21$i$i$i$i+4>>0]=HEAP8[$156+4>>0]|0;HEAP8[$__t21$i$i$i$i+5>>0]=HEAP8[$156+5>>0]|0;HEAP8[$__t21$i$i$i$i+6>>0]=HEAP8[$156+6>>0]|0;HEAP8[$__t21$i$i$i$i+7>>0]=HEAP8[$156+7>>0]|0;
 $151 = $447;
 HEAP32[$152>>2] = $448;
 $449 = $151;
 $150 = $152;
 $450 = $150;
 $451 = HEAP32[$450>>2]|0;
 $144 = $__t21$i$i$i$i;
 $452 = $144;
 ;HEAP32[$153+0>>2]=HEAP32[$452+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$452+4>>2]|0;
 ;HEAP8[$149+0>>0]=HEAP8[$153+0>>0]|0;HEAP8[$149+1>>0]=HEAP8[$153+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$153+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$153+3>>0]|0;HEAP8[$149+4>>0]=HEAP8[$153+4>>0]|0;HEAP8[$149+5>>0]=HEAP8[$153+5>>0]|0;HEAP8[$149+6>>0]=HEAP8[$153+6>>0]|0;HEAP8[$149+7>>0]=HEAP8[$153+7>>0]|0;
 $147 = $449;
 HEAP32[$148>>2] = $451;
 $453 = $147;
 $146 = $148;
 $454 = $146;
 $455 = HEAP32[$454>>2]|0;
 HEAP32[$453>>2] = $455;
 $456 = (($453) + 4|0);
 $145 = $149;
 $457 = $145;
 ;HEAP32[$456+0>>2]=HEAP32[$457+0>>2]|0;HEAP32[$456+4>>2]=HEAP32[$457+4>>2]|0;
 $133 = $168;
 $458 = $133;
 $131 = $167;
 $132 = $458;
 $459 = $131;
 $460 = $132;
 $129 = $459;
 $130 = $460;
 $461 = $129;
 $462 = $130;
 HEAP32[$461>>2] = $462;
 ;HEAP8[$128+0>>0]=HEAP8[$167+0>>0]|0;HEAP8[$128+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$167+3>>0]|0;
 $127 = $339;
 $463 = $127;
 ;HEAP8[$__u1$i6$i+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$__u1$i6$i+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$__u1$i6$i+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$__u1$i6$i+3>>0]=HEAP8[$128+3>>0]|0;
 $125 = $463;
 $464 = $125;
 $124 = $__u1$i6$i;
 $465 = $124;
 $466 = HEAP32[$465>>2]|0;
 $105 = $466;
 $467 = $105;
 $104 = $467;
 $468 = $104;
 $103 = $468;
 $469 = $103;
 $470 = HEAP32[$469>>2]|0;
 $__t$i$i$i4$i = $470;
 $102 = $467;
 $471 = $102;
 $101 = $471;
 $472 = $101;
 HEAP32[$472>>2] = 0;
 $473 = $__t$i$i$i4$i;
 $106 = $__u1$i6$i;
 $474 = $106;
 $475 = HEAP32[$474>>2]|0;
 $109 = $475;
 $476 = $109;
 $108 = $476;
 $477 = $108;
 $107 = $477;
 $478 = $107;
 $479 = (($478) + 4|0);
 $110 = $479;
 $480 = $110;
 ;HEAP32[$126+0>>2]=HEAP32[$480+0>>2]|0;HEAP32[$126+4>>2]=HEAP32[$480+4>>2]|0;
 ;HEAP8[$123+0>>0]=HEAP8[$126+0>>0]|0;HEAP8[$123+1>>0]=HEAP8[$126+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$126+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$126+3>>0]|0;HEAP8[$123+4>>0]=HEAP8[$126+4>>0]|0;HEAP8[$123+5>>0]=HEAP8[$126+5>>0]|0;HEAP8[$123+6>>0]=HEAP8[$126+6>>0]|0;HEAP8[$123+7>>0]=HEAP8[$126+7>>0]|0;
 $121 = $464;
 $122 = $473;
 $481 = $121;
 $482 = $122;
 ;HEAP8[$__t21$i$i$i5$i+0>>0]=HEAP8[$123+0>>0]|0;HEAP8[$__t21$i$i$i5$i+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$__t21$i$i$i5$i+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$__t21$i$i$i5$i+3>>0]=HEAP8[$123+3>>0]|0;HEAP8[$__t21$i$i$i5$i+4>>0]=HEAP8[$123+4>>0]|0;HEAP8[$__t21$i$i$i5$i+5>>0]=HEAP8[$123+5>>0]|0;HEAP8[$__t21$i$i$i5$i+6>>0]=HEAP8[$123+6>>0]|0;HEAP8[$__t21$i$i$i5$i+7>>0]=HEAP8[$123+7>>0]|0;
 $118 = $481;
 HEAP32[$119>>2] = $482;
 $483 = $118;
 $117 = $119;
 $484 = $117;
 $485 = HEAP32[$484>>2]|0;
 $111 = $__t21$i$i$i5$i;
 $486 = $111;
 ;HEAP32[$120+0>>2]=HEAP32[$486+0>>2]|0;HEAP32[$120+4>>2]=HEAP32[$486+4>>2]|0;
 ;HEAP8[$116+0>>0]=HEAP8[$120+0>>0]|0;HEAP8[$116+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$120+3>>0]|0;HEAP8[$116+4>>0]=HEAP8[$120+4>>0]|0;HEAP8[$116+5>>0]=HEAP8[$120+5>>0]|0;HEAP8[$116+6>>0]=HEAP8[$120+6>>0]|0;HEAP8[$116+7>>0]=HEAP8[$120+7>>0]|0;
 $114 = $483;
 HEAP32[$115>>2] = $485;
 $487 = $114;
 $113 = $115;
 $488 = $113;
 $489 = HEAP32[$488>>2]|0;
 HEAP32[$487>>2] = $489;
 $490 = (($487) + 4|0);
 $112 = $116;
 $491 = $112;
 ;HEAP32[$490+0>>2]=HEAP32[$491+0>>2]|0;HEAP32[$490+4>>2]=HEAP32[$491+4>>2]|0;
 $100 = $168;
 $492 = $100;
 $99 = $492;
 $493 = $99;
 $97 = $493;
 $98 = 0;
 $494 = $97;
 $96 = $494;
 $495 = $96;
 $95 = $495;
 $496 = $95;
 $497 = HEAP32[$496>>2]|0;
 $__tmp$i$i$i15$i = $497;
 $498 = $98;
 $70 = $494;
 $499 = $70;
 $69 = $499;
 $500 = $69;
 HEAP32[$500>>2] = $498;
 $501 = $__tmp$i$i$i15$i;
 $502 = ($501|0)!=(0|0);
 if ($502) {
  $68 = $494;
  $503 = $68;
  $67 = $503;
  $504 = $67;
  $505 = (($504) + 4|0);
  $506 = $__tmp$i$i$i15$i;
  $91 = $505;
  $92 = $506;
  $507 = $91;
  $508 = (($507) + 5|0);
  $509 = HEAP8[$508>>0]|0;
  $510 = $509&1;
  do {
   if ($510) {
    $511 = HEAP32[$507>>2]|0;
    $512 = $92;
    $513 = (($512) + 8|0);
    $514 = (($513) + 12|0);
    $90 = $514;
    $515 = $90;
    $81 = $511;
    $82 = $515;
    $516 = $81;
    $517 = $82;
    ;HEAP8[$80+0>>0]=HEAP8[$83+0>>0]|0;
    $78 = $516;
    $79 = $517;
    $518 = $79;
    __THREW__ = 0;
    invoke_vi(415,($518|0));
    $519 = __THREW__; __THREW__ = 0;
    $520 = $519&1;
    if ($520) {
     $521 = ___cxa_find_matching_catch(-1,-1)|0;
     $522 = tempRet0;
     $93 = $521;
     $94 = $522;
     $523 = $93;
     ___cxa_call_unexpected(($523|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $524 = (($507) + 4|0);
  $525 = HEAP8[$524>>0]|0;
  $526 = $525&1;
  do {
   if ($526) {
    $527 = HEAP32[$507>>2]|0;
    $528 = $92;
    $529 = (($528) + 8|0);
    $77 = $529;
    $530 = $77;
    $74 = $527;
    $75 = $530;
    $531 = $74;
    $532 = $75;
    ;HEAP8[$73+0>>0]=HEAP8[$76+0>>0]|0;
    $71 = $531;
    $72 = $532;
    $533 = $72;
    __THREW__ = 0;
    invoke_vi(415,($533|0));
    $534 = __THREW__; __THREW__ = 0;
    $535 = $534&1;
    if ($535) {
     $521 = ___cxa_find_matching_catch(-1,-1)|0;
     $522 = tempRet0;
     $93 = $521;
     $94 = $522;
     $523 = $93;
     ___cxa_call_unexpected(($523|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $536 = $92;
  $537 = ($536|0)!=(0|0);
  if ($537) {
   $538 = HEAP32[$507>>2]|0;
   $539 = $92;
   $87 = $538;
   $88 = $539;
   $89 = 1;
   $540 = $87;
   $541 = $88;
   $542 = $89;
   $84 = $540;
   $85 = $541;
   $86 = $542;
   $543 = $85;
   __ZdlPv($543);
  }
 }
 $66 = $339;
 $544 = $66;
 $64 = $338;
 $65 = $544;
 $545 = $64;
 $546 = $65;
 $62 = $545;
 $63 = $546;
 $547 = $62;
 $548 = $63;
 HEAP32[$547>>2] = $548;
 ;HEAP8[$61+0>>0]=HEAP8[$338+0>>0]|0;HEAP8[$61+1>>0]=HEAP8[$338+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$338+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$338+3>>0]|0;
 $60 = $agg$result;
 $549 = $60;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$61+3>>0]|0;
 $58 = $549;
 $550 = $58;
 $57 = $__u1$i;
 $551 = $57;
 $552 = HEAP32[$551>>2]|0;
 $38 = $552;
 $553 = $38;
 $37 = $553;
 $554 = $37;
 $36 = $554;
 $555 = $36;
 $556 = HEAP32[$555>>2]|0;
 $__t$i$i$i = $556;
 $35 = $553;
 $557 = $35;
 $34 = $557;
 $558 = $34;
 HEAP32[$558>>2] = 0;
 $559 = $__t$i$i$i;
 $39 = $__u1$i;
 $560 = $39;
 $561 = HEAP32[$560>>2]|0;
 $42 = $561;
 $562 = $42;
 $41 = $562;
 $563 = $41;
 $40 = $563;
 $564 = $40;
 $565 = (($564) + 4|0);
 $43 = $565;
 $566 = $43;
 ;HEAP32[$59+0>>2]=HEAP32[$566+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$566+4>>2]|0;
 ;HEAP8[$56+0>>0]=HEAP8[$59+0>>0]|0;HEAP8[$56+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$56+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$56+3>>0]=HEAP8[$59+3>>0]|0;HEAP8[$56+4>>0]=HEAP8[$59+4>>0]|0;HEAP8[$56+5>>0]=HEAP8[$59+5>>0]|0;HEAP8[$56+6>>0]=HEAP8[$59+6>>0]|0;HEAP8[$56+7>>0]=HEAP8[$59+7>>0]|0;
 $54 = $550;
 $55 = $559;
 $567 = $54;
 $568 = $55;
 ;HEAP8[$__t21$i$i$i29+0>>0]=HEAP8[$56+0>>0]|0;HEAP8[$__t21$i$i$i29+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$__t21$i$i$i29+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$__t21$i$i$i29+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$__t21$i$i$i29+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$__t21$i$i$i29+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$__t21$i$i$i29+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$__t21$i$i$i29+7>>0]=HEAP8[$56+7>>0]|0;
 $51 = $567;
 HEAP32[$52>>2] = $568;
 $569 = $51;
 $50 = $52;
 $570 = $50;
 $571 = HEAP32[$570>>2]|0;
 $44 = $__t21$i$i$i29;
 $572 = $44;
 ;HEAP32[$53+0>>2]=HEAP32[$572+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$572+4>>2]|0;
 ;HEAP8[$49+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$53+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$53+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$53+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$53+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$53+7>>0]|0;
 $47 = $569;
 HEAP32[$48>>2] = $571;
 $573 = $47;
 $46 = $48;
 $574 = $46;
 $575 = HEAP32[$574>>2]|0;
 HEAP32[$573>>2] = $575;
 $576 = (($573) + 4|0);
 $45 = $49;
 $577 = $45;
 ;HEAP32[$576+0>>2]=HEAP32[$577+0>>2]|0;HEAP32[$576+4>>2]=HEAP32[$577+4>>2]|0;
 $33 = $339;
 $578 = $33;
 $32 = $578;
 $579 = $32;
 $30 = $579;
 $31 = 0;
 $580 = $30;
 $29 = $580;
 $581 = $29;
 $28 = $581;
 $582 = $28;
 $583 = HEAP32[$582>>2]|0;
 $__tmp$i$i$i38 = $583;
 $584 = $31;
 $3 = $580;
 $585 = $3;
 $2 = $585;
 $586 = $2;
 HEAP32[$586>>2] = $584;
 $587 = $__tmp$i$i$i38;
 $588 = ($587|0)!=(0|0);
 if ($588) {
  $1 = $580;
  $589 = $1;
  $0 = $589;
  $590 = $0;
  $591 = (($590) + 4|0);
  $592 = $__tmp$i$i$i38;
  $24 = $591;
  $25 = $592;
  $593 = $24;
  $594 = (($593) + 5|0);
  $595 = HEAP8[$594>>0]|0;
  $596 = $595&1;
  do {
   if ($596) {
    $597 = HEAP32[$593>>2]|0;
    $598 = $25;
    $599 = (($598) + 8|0);
    $600 = (($599) + 12|0);
    $23 = $600;
    $601 = $23;
    $14 = $597;
    $15 = $601;
    $602 = $14;
    $603 = $15;
    ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
    $11 = $602;
    $12 = $603;
    $604 = $12;
    __THREW__ = 0;
    invoke_vi(415,($604|0));
    $605 = __THREW__; __THREW__ = 0;
    $606 = $605&1;
    if ($606) {
     $607 = ___cxa_find_matching_catch(-1,-1)|0;
     $608 = tempRet0;
     $26 = $607;
     $27 = $608;
     $609 = $26;
     ___cxa_call_unexpected(($609|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $610 = (($593) + 4|0);
  $611 = HEAP8[$610>>0]|0;
  $612 = $611&1;
  do {
   if ($612) {
    $613 = HEAP32[$593>>2]|0;
    $614 = $25;
    $615 = (($614) + 8|0);
    $10 = $615;
    $616 = $10;
    $7 = $613;
    $8 = $616;
    $617 = $7;
    $618 = $8;
    ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
    $4 = $617;
    $5 = $618;
    $619 = $5;
    __THREW__ = 0;
    invoke_vi(415,($619|0));
    $620 = __THREW__; __THREW__ = 0;
    $621 = $620&1;
    if ($621) {
     $607 = ___cxa_find_matching_catch(-1,-1)|0;
     $608 = tempRet0;
     $26 = $607;
     $27 = $608;
     $609 = $26;
     ___cxa_call_unexpected(($609|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $622 = $25;
  $623 = ($622|0)!=(0|0);
  if ($623) {
   $624 = HEAP32[$593>>2]|0;
   $625 = $25;
   $20 = $624;
   $21 = $625;
   $22 = 1;
   $626 = $20;
   $627 = $21;
   $628 = $22;
   $17 = $626;
   $18 = $627;
   $19 = $628;
   $629 = $18;
   __ZdlPv($629);
  }
 }
 $340 = 1;
 $203 = $__h;
 $630 = $203;
 $202 = $630;
 $631 = $202;
 $200 = $631;
 $201 = 0;
 $632 = $200;
 $199 = $632;
 $633 = $199;
 $198 = $633;
 $634 = $198;
 $635 = HEAP32[$634>>2]|0;
 $__tmp$i$i$i11 = $635;
 $636 = $201;
 $173 = $632;
 $637 = $173;
 $172 = $637;
 $638 = $172;
 HEAP32[$638>>2] = $636;
 $639 = $__tmp$i$i$i11;
 $640 = ($639|0)!=(0|0);
 if (!($640)) {
  STACKTOP = sp;return;
 }
 $171 = $632;
 $641 = $171;
 $170 = $641;
 $642 = $170;
 $643 = (($642) + 4|0);
 $644 = $__tmp$i$i$i11;
 $194 = $643;
 $195 = $644;
 $645 = $194;
 $646 = (($645) + 5|0);
 $647 = HEAP8[$646>>0]|0;
 $648 = $647&1;
 do {
  if ($648) {
   $649 = HEAP32[$645>>2]|0;
   $650 = $195;
   $651 = (($650) + 8|0);
   $652 = (($651) + 12|0);
   $193 = $652;
   $653 = $193;
   $184 = $649;
   $185 = $653;
   $654 = $184;
   $655 = $185;
   ;HEAP8[$183+0>>0]=HEAP8[$186+0>>0]|0;
   $181 = $654;
   $182 = $655;
   $656 = $182;
   __THREW__ = 0;
   invoke_vi(415,($656|0));
   $657 = __THREW__; __THREW__ = 0;
   $658 = $657&1;
   if ($658) {
    $659 = ___cxa_find_matching_catch(-1,-1)|0;
    $660 = tempRet0;
    $196 = $659;
    $197 = $660;
    $661 = $196;
    ___cxa_call_unexpected(($661|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $662 = (($645) + 4|0);
 $663 = HEAP8[$662>>0]|0;
 $664 = $663&1;
 do {
  if ($664) {
   $665 = HEAP32[$645>>2]|0;
   $666 = $195;
   $667 = (($666) + 8|0);
   $180 = $667;
   $668 = $180;
   $177 = $665;
   $178 = $668;
   $669 = $177;
   $670 = $178;
   ;HEAP8[$176+0>>0]=HEAP8[$179+0>>0]|0;
   $174 = $669;
   $175 = $670;
   $671 = $175;
   __THREW__ = 0;
   invoke_vi(415,($671|0));
   $672 = __THREW__; __THREW__ = 0;
   $673 = $672&1;
   if ($673) {
    $659 = ___cxa_find_matching_catch(-1,-1)|0;
    $660 = tempRet0;
    $196 = $659;
    $197 = $660;
    $661 = $196;
    ___cxa_call_unexpected(($661|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $674 = $195;
 $675 = ($674|0)!=(0|0);
 if ($675) {
  $676 = HEAP32[$645>>2]|0;
  $677 = $195;
  $190 = $676;
  $191 = $677;
  $192 = 1;
  $678 = $190;
  $679 = $191;
  $680 = $192;
  $187 = $678;
  $188 = $679;
  $189 = $680;
  $681 = $188;
  __ZdlPv($681);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0;
 var $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $5 = sp + 16|0;
 $16 = sp + 104|0;
 $107 = sp;
 $110 = sp + 757|0;
 $137 = sp + 528|0;
 $151 = sp + 584|0;
 $__inserted = sp + 758|0;
 $177 = sp + 684|0;
 $178 = sp + 4|0;
 $179 = sp + 332|0;
 $180 = sp + 716|0;
 $181 = sp + 692|0;
 $182 = sp + 424|0;
 $183 = sp + 272|0;
 $175 = $this;
 $176 = $__nd;
 $184 = $175;
 $174 = $184;
 $185 = $174;
 $186 = (($185) + 12|0);
 $173 = $186;
 $187 = $173;
 $172 = $187;
 $188 = $172;
 $189 = $176;
 $190 = (($189) + 8|0);
 $118 = $188;
 $119 = $190;
 $191 = $118;
 $192 = $119;
 $193 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($191,$192)|0);
 $194 = $176;
 $195 = (($194) + 4|0);
 HEAP32[$195>>2] = $193;
 $117 = $184;
 $196 = $117;
 $116 = $196;
 $197 = $116;
 $115 = $197;
 $198 = $115;
 $114 = $198;
 $199 = $114;
 $200 = (($199) + 4|0);
 $113 = $200;
 $201 = $113;
 $112 = $201;
 $202 = $112;
 $111 = $202;
 $203 = $111;
 $204 = HEAP32[$203>>2]|0;
 $__bc = $204;
 HEAP8[$__inserted>>0] = 0;
 $205 = $__bc;
 $206 = ($205|0)!=(0);
 if ($206) {
  $207 = $176;
  $208 = (($207) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $__bc;
  $99 = $209;
  $100 = $210;
  $211 = $100;
  $212 = $100;
  $213 = (($212) - 1)|0;
  $214 = $211 & $213;
  $215 = ($214|0)!=(0);
  if ($215) {
   $220 = $99;
   $221 = $100;
   $222 = (($220>>>0) % ($221>>>0))&-1;
   $223 = $222;
  } else {
   $216 = $99;
   $217 = $100;
   $218 = (($217) - 1)|0;
   $219 = $216 & $218;
   $223 = $219;
  }
  $__chash = $223;
  $224 = $__chash;
  $19 = $184;
  $20 = $224;
  $225 = $19;
  $226 = $20;
  $18 = $225;
  $227 = $18;
  $17 = $227;
  $228 = $17;
  $229 = HEAP32[$228>>2]|0;
  $230 = (($229) + ($226<<2)|0);
  $231 = HEAP32[$230>>2]|0;
  $__ndptr = $231;
  $232 = $__ndptr;
  $14 = $16;
  $15 = -1;
  $233 = $14;
  $234 = $15;
  $12 = $233;
  $13 = $234;
  $235 = $12;
  HEAP32[$235>>2] = 0;
  $236 = HEAP32[$16>>2]|0;
  HEAP32[$177>>2] = $236;
  $0 = $177;
  $237 = ($232|0)!=(0|0);
  do {
   if ($237) {
    $238 = $__ndptr;
    $239 = HEAP32[$238>>2]|0;
    $__ndptr = $239;
    L9: while(1) {
     $240 = $__ndptr;
     $3 = $5;
     $4 = -1;
     $241 = $3;
     $242 = $4;
     $1 = $241;
     $2 = $242;
     $243 = $1;
     HEAP32[$243>>2] = 0;
     $244 = HEAP32[$5>>2]|0;
     HEAP32[$178>>2] = $244;
     $6 = $178;
     $245 = ($240|0)!=(0|0);
     if ($245) {
      $246 = $__ndptr;
      $247 = (($246) + 4|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $__bc;
      $7 = $248;
      $8 = $249;
      $250 = $8;
      $251 = $8;
      $252 = (($251) - 1)|0;
      $253 = $250 & $252;
      $254 = ($253|0)!=(0);
      if ($254) {
       $259 = $7;
       $260 = $8;
       $261 = (($259>>>0) % ($260>>>0))&-1;
       $264 = $261;
      } else {
       $255 = $7;
       $256 = $8;
       $257 = (($256) - 1)|0;
       $258 = $255 & $257;
       $264 = $258;
      }
      $262 = $__chash;
      $263 = ($264|0)==($262|0);
      $586 = $263;
     } else {
      $586 = 0;
     }
     if (!($586)) {
      label = 41;
      break;
     }
     $11 = $184;
     $265 = $11;
     $266 = (($265) + 16|0);
     $10 = $266;
     $267 = $10;
     $9 = $267;
     $268 = $9;
     $269 = $__ndptr;
     $270 = (($269) + 8|0);
     $271 = $176;
     $272 = (($271) + 8|0);
     $83 = $268;
     $84 = $270;
     $85 = $272;
     $273 = $83;
     $274 = $84;
     $275 = $85;
     $80 = $273;
     $81 = $274;
     $82 = $275;
     $276 = $81;
     $277 = $82;
     $76 = $276;
     $77 = $277;
     $278 = $76;
     $74 = $278;
     $279 = $74;
     $73 = $279;
     $280 = $73;
     $72 = $280;
     $281 = $72;
     $71 = $281;
     $282 = $71;
     $283 = HEAP8[$282>>0]|0;
     $284 = $283&255;
     $285 = $284 & 1;
     $286 = ($285|0)!=(0);
     if ($286) {
      $67 = $279;
      $287 = $67;
      $66 = $287;
      $288 = $66;
      $65 = $288;
      $289 = $65;
      $290 = (($289) + 4|0);
      $291 = HEAP32[$290>>2]|0;
      $298 = $291;
     } else {
      $70 = $279;
      $292 = $70;
      $69 = $292;
      $293 = $69;
      $68 = $293;
      $294 = $68;
      $295 = HEAP8[$294>>0]|0;
      $296 = $295&255;
      $297 = $296 >> 1;
      $298 = $297;
     }
     $__lhs_sz$i$i$i = $298;
     $299 = $__lhs_sz$i$i$i;
     $300 = $77;
     $61 = $300;
     $301 = $61;
     $60 = $301;
     $302 = $60;
     $59 = $302;
     $303 = $59;
     $58 = $303;
     $304 = $58;
     $305 = HEAP8[$304>>0]|0;
     $306 = $305&255;
     $307 = $306 & 1;
     $308 = ($307|0)!=(0);
     if ($308) {
      $54 = $301;
      $309 = $54;
      $53 = $309;
      $310 = $53;
      $52 = $310;
      $311 = $52;
      $312 = (($311) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      $321 = $313;
     } else {
      $57 = $301;
      $314 = $57;
      $56 = $314;
      $315 = $56;
      $55 = $315;
      $316 = $55;
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = $318 >> 1;
      $321 = $319;
     }
     $320 = ($299|0)!=($321|0);
     do {
      if ($320) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $322 = $76;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $31 = $325;
       $326 = $31;
       $30 = $326;
       $327 = $30;
       $328 = HEAP8[$327>>0]|0;
       $329 = $328&255;
       $330 = $329 & 1;
       $331 = ($330|0)!=(0);
       if ($331) {
        $24 = $324;
        $332 = $24;
        $23 = $332;
        $333 = $23;
        $22 = $333;
        $334 = $22;
        $335 = (($334) + 8|0);
        $336 = HEAP32[$335>>2]|0;
        $343 = $336;
       } else {
        $29 = $324;
        $337 = $29;
        $28 = $337;
        $338 = $28;
        $27 = $338;
        $339 = $27;
        $340 = (($339) + 1|0);
        $26 = $340;
        $341 = $26;
        $25 = $341;
        $342 = $25;
        $343 = $342;
       }
       $21 = $343;
       $344 = $21;
       $__lp$i$i$i = $344;
       $345 = $77;
       $48 = $345;
       $346 = $48;
       $47 = $346;
       $347 = $47;
       $46 = $347;
       $348 = $46;
       $45 = $348;
       $349 = $45;
       $44 = $349;
       $350 = $44;
       $351 = HEAP8[$350>>0]|0;
       $352 = $351&255;
       $353 = $352 & 1;
       $354 = ($353|0)!=(0);
       if ($354) {
        $38 = $347;
        $355 = $38;
        $37 = $355;
        $356 = $37;
        $36 = $356;
        $357 = $36;
        $358 = (($357) + 8|0);
        $359 = HEAP32[$358>>2]|0;
        $366 = $359;
       } else {
        $43 = $347;
        $360 = $43;
        $42 = $360;
        $361 = $42;
        $41 = $361;
        $362 = $41;
        $363 = (($362) + 1|0);
        $40 = $363;
        $364 = $40;
        $39 = $364;
        $365 = $39;
        $366 = $365;
       }
       $35 = $366;
       $367 = $35;
       $__rp$i$i$i = $367;
       $368 = $76;
       $51 = $368;
       $369 = $51;
       $50 = $369;
       $370 = $50;
       $49 = $370;
       $371 = $49;
       $372 = HEAP8[$371>>0]|0;
       $373 = $372&255;
       $374 = $373 & 1;
       $375 = ($374|0)!=(0);
       if ($375) {
        $376 = $__lp$i$i$i;
        $377 = $__rp$i$i$i;
        $378 = $__lhs_sz$i$i$i;
        $62 = $376;
        $63 = $377;
        $64 = $378;
        $379 = $62;
        $380 = $63;
        $381 = $64;
        __THREW__ = 0;
        $382 = (invoke_iiii(440,($379|0),($380|0),($381|0))|0);
        $383 = __THREW__; __THREW__ = 0;
        $384 = $383&1;
        if ($384) {
         label = 30;
         break L9;
        }
        $385 = ($382|0)==(0);
        $$expand_i1_val2 = $385&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $389 = $__lhs_sz$i$i$i;
        $390 = ($389|0)!=(0);
        if (!($390)) {
         label = 36;
         break;
        }
        $391 = $__lp$i$i$i;
        $392 = HEAP8[$391>>0]|0;
        $393 = $392 << 24 >> 24;
        $394 = $__rp$i$i$i;
        $395 = HEAP8[$394>>0]|0;
        $396 = $395 << 24 >> 24;
        $397 = ($393|0)!=($396|0);
        if ($397) {
         label = 34;
         break;
        }
        $398 = $__lhs_sz$i$i$i;
        $399 = (($398) + -1)|0;
        $__lhs_sz$i$i$i = $399;
        $400 = $__lp$i$i$i;
        $401 = (($400) + 1|0);
        $__lp$i$i$i = $401;
        $402 = $__rp$i$i$i;
        $403 = (($402) + 1|0);
        $__rp$i$i$i = $403;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $405 = $__ndptr;
     $406 = HEAP32[$405>>2]|0;
     $__ndptr = $406;
    }
    if ((label|0) == 30) {
     $386 = ___cxa_find_matching_catch(-1,-1)|0;
     $387 = tempRet0;
     $78 = $386;
     $79 = $387;
     $388 = $78;
     ___cxa_call_unexpected(($388|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $571 = $__ndptr;
     $164 = $183;
     $165 = $571;
     $572 = $164;
     $573 = $165;
     $162 = $572;
     $163 = $573;
     $574 = $162;
     $575 = $163;
     HEAP32[$574>>2] = $575;
     $169 = $agg$result;
     $170 = $183;
     $171 = $__inserted;
     $576 = $169;
     $577 = $171;
     $578 = $170;
     $166 = $576;
     $167 = $578;
     $168 = $577;
     $579 = $166;
     $580 = $167;
     ;HEAP32[$579+0>>2]=HEAP32[$580+0>>2]|0;
     $581 = (($579) + 4|0);
     $582 = $168;
     $583 = HEAP8[$582>>0]|0;
     $584 = $583&1;
     $585 = $584&1;
     HEAP8[$581>>0] = $585;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $88 = $184;
 $407 = $88;
 $408 = (($407) + 12|0);
 $87 = $408;
 $409 = $87;
 $86 = $409;
 $410 = $86;
 $411 = HEAP32[$410>>2]|0;
 $412 = (($411) + 1)|0;
 $413 = (+($412>>>0));
 $414 = $__bc;
 $415 = (+($414>>>0));
 $91 = $184;
 $416 = $91;
 $417 = (($416) + 16|0);
 $90 = $417;
 $418 = $90;
 $89 = $418;
 $419 = $89;
 $420 = +HEAPF32[$419>>2];
 $421 = $415 * $420;
 $422 = $413 > $421;
 if ($422) {
  label = 45;
 } else {
  $423 = $__bc;
  $424 = ($423|0)==(0);
  if ($424) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $425 = $__bc;
  $426 = $425<<1;
  $427 = $__bc;
  $92 = $427;
  $428 = $92;
  $429 = ($428>>>0)>(2);
  if ($429) {
   $430 = $92;
   $431 = $92;
   $432 = (($431) - 1)|0;
   $433 = $430 & $432;
   $434 = ($433|0)!=(0);
   $435 = $434 ^ 1;
   $437 = $435;
  } else {
   $437 = 0;
  }
  $436 = $437 ^ 1;
  $438 = $436&1;
  $439 = (($426) + ($438))|0;
  HEAP32[$179>>2] = $439;
  $95 = $184;
  $440 = $95;
  $441 = (($440) + 12|0);
  $94 = $441;
  $442 = $94;
  $93 = $442;
  $443 = $93;
  $444 = HEAP32[$443>>2]|0;
  $445 = (($444) + 1)|0;
  $446 = (+($445>>>0));
  $98 = $184;
  $447 = $98;
  $448 = (($447) + 16|0);
  $97 = $448;
  $449 = $97;
  $96 = $449;
  $450 = $96;
  $451 = +HEAPF32[$450>>2];
  $452 = $446 / $451;
  $101 = $452;
  $453 = $101;
  $454 = (+Math_ceil((+$453)));
  $455 = (~~(($454))>>>0);
  HEAP32[$180>>2] = $455;
  $108 = $179;
  $109 = $180;
  $456 = $108;
  $457 = $109;
  ;HEAP8[$107+0>>0]=HEAP8[$110+0>>0]|0;
  $105 = $456;
  $106 = $457;
  $458 = $105;
  $459 = $106;
  $102 = $107;
  $103 = $458;
  $104 = $459;
  $460 = $103;
  $461 = HEAP32[$460>>2]|0;
  $462 = $104;
  $463 = HEAP32[$462>>2]|0;
  $464 = ($461>>>0)<($463>>>0);
  if ($464) {
   $465 = $106;
   $468 = $465;
  } else {
   $466 = $105;
   $468 = $466;
  }
  $467 = HEAP32[$468>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($184,$467);
  $126 = $184;
  $469 = $126;
  $125 = $469;
  $470 = $125;
  $124 = $470;
  $471 = $124;
  $123 = $471;
  $472 = $123;
  $473 = (($472) + 4|0);
  $122 = $473;
  $474 = $122;
  $121 = $474;
  $475 = $121;
  $120 = $475;
  $476 = $120;
  $477 = HEAP32[$476>>2]|0;
  $__bc = $477;
  $478 = $176;
  $479 = (($478) + 4|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $__bc;
  $127 = $480;
  $128 = $481;
  $482 = $128;
  $483 = $128;
  $484 = (($483) - 1)|0;
  $485 = $482 & $484;
  $486 = ($485|0)!=(0);
  if ($486) {
   $491 = $127;
   $492 = $128;
   $493 = (($491>>>0) % ($492>>>0))&-1;
   $494 = $493;
  } else {
   $487 = $127;
   $488 = $128;
   $489 = (($488) - 1)|0;
   $490 = $487 & $489;
   $494 = $490;
  }
  $__chash = $494;
 }
 $495 = $__chash;
 $131 = $184;
 $132 = $495;
 $496 = $131;
 $497 = $132;
 $130 = $496;
 $498 = $130;
 $129 = $498;
 $499 = $129;
 $500 = HEAP32[$499>>2]|0;
 $501 = (($500) + ($497<<2)|0);
 $502 = HEAP32[$501>>2]|0;
 $__pn = $502;
 $503 = $__pn;
 $135 = $137;
 $136 = -1;
 $504 = $135;
 $505 = $136;
 $133 = $504;
 $134 = $505;
 $506 = $133;
 HEAP32[$506>>2] = 0;
 $507 = HEAP32[$137>>2]|0;
 HEAP32[$181>>2] = $507;
 $138 = $181;
 $508 = ($503|0)==(0|0);
 if ($508) {
  $509 = (($184) + 8|0);
  $140 = $509;
  $510 = $140;
  $139 = $510;
  $511 = $139;
  $142 = $511;
  $512 = $142;
  $141 = $512;
  $513 = $141;
  $__pn = $513;
  $514 = $__pn;
  $515 = HEAP32[$514>>2]|0;
  $516 = $176;
  HEAP32[$516>>2] = $515;
  $517 = $176;
  $518 = $__pn;
  HEAP32[$518>>2] = $517;
  $519 = $__pn;
  $520 = $__chash;
  $145 = $184;
  $146 = $520;
  $521 = $145;
  $522 = $146;
  $144 = $521;
  $523 = $144;
  $143 = $523;
  $524 = $143;
  $525 = HEAP32[$524>>2]|0;
  $526 = (($525) + ($522<<2)|0);
  HEAP32[$526>>2] = $519;
  $527 = $176;
  $528 = HEAP32[$527>>2]|0;
  $149 = $151;
  $150 = -1;
  $529 = $149;
  $530 = $150;
  $147 = $529;
  $148 = $530;
  $531 = $147;
  HEAP32[$531>>2] = 0;
  $532 = HEAP32[$151>>2]|0;
  HEAP32[$182>>2] = $532;
  $152 = $182;
  $533 = ($528|0)!=(0|0);
  if ($533) {
   $534 = $176;
   $535 = $176;
   $536 = HEAP32[$535>>2]|0;
   $537 = (($536) + 4|0);
   $538 = HEAP32[$537>>2]|0;
   $539 = $__bc;
   $153 = $538;
   $154 = $539;
   $540 = $154;
   $541 = $154;
   $542 = (($541) - 1)|0;
   $543 = $540 & $542;
   $544 = ($543|0)!=(0);
   if ($544) {
    $549 = $153;
    $550 = $154;
    $551 = (($549>>>0) % ($550>>>0))&-1;
    $552 = $551;
   } else {
    $545 = $153;
    $546 = $154;
    $547 = (($546) - 1)|0;
    $548 = $545 & $547;
    $552 = $548;
   }
   $157 = $184;
   $158 = $552;
   $553 = $157;
   $554 = $158;
   $156 = $553;
   $555 = $156;
   $155 = $555;
   $556 = $155;
   $557 = HEAP32[$556>>2]|0;
   $558 = (($557) + ($554<<2)|0);
   HEAP32[$558>>2] = $534;
  }
 } else {
  $559 = $__pn;
  $560 = HEAP32[$559>>2]|0;
  $561 = $176;
  HEAP32[$561>>2] = $560;
  $562 = $176;
  $563 = $__pn;
  HEAP32[$563>>2] = $562;
 }
 $564 = $176;
 $__ndptr = $564;
 $161 = $184;
 $565 = $161;
 $566 = (($565) + 12|0);
 $160 = $566;
 $567 = $160;
 $159 = $567;
 $568 = $159;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($569) + 1)|0;
 HEAP32[$568>>2] = $570;
 HEAP8[$__inserted>>0] = 1;
 $571 = $__ndptr;
 $164 = $183;
 $165 = $571;
 $572 = $164;
 $573 = $165;
 $162 = $572;
 $163 = $573;
 $574 = $162;
 $575 = $163;
 HEAP32[$574>>2] = $575;
 $169 = $agg$result;
 $170 = $183;
 $171 = $__inserted;
 $576 = $169;
 $577 = $171;
 $578 = $170;
 $166 = $576;
 $167 = $578;
 $168 = $577;
 $579 = $166;
 $580 = $167;
 ;HEAP32[$579+0>>2]=HEAP32[$580+0>>2]|0;
 $581 = (($579) + 4|0);
 $582 = $168;
 $583 = HEAP8[$582>>0]|0;
 $584 = $583&1;
 $585 = $584&1;
 HEAP8[$581>>0] = $585;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 76|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = (($49) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 if ($57) {
  $58 = HEAP32[$34>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = $__bc;
 $61 = ($59>>>0)<($60>>>0);
 if ($61) {
  $62 = $__bc;
  $25 = $62;
  $63 = $25;
  $64 = ($63>>>0)>(2);
  if ($64) {
   $65 = $25;
   $66 = $25;
   $67 = (($66) - 1)|0;
   $68 = $65 & $67;
   $69 = ($68|0)!=(0);
   $70 = $69 ^ 1;
   $126 = $70;
  } else {
   $126 = 0;
  }
  if ($126) {
   $14 = $36;
   $71 = $14;
   $72 = (($71) + 12|0);
   $13 = $72;
   $73 = $13;
   $12 = $73;
   $74 = $12;
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75>>>0));
   $2 = $36;
   $77 = $2;
   $78 = (($77) + 16|0);
   $1 = $78;
   $79 = $1;
   $0 = $79;
   $80 = $0;
   $81 = +HEAPF32[$80>>2];
   $82 = $76 / $81;
   $3 = $82;
   $83 = $3;
   $84 = (+Math_ceil((+$83)));
   $85 = (~~(($84))>>>0);
   $5 = $85;
   $86 = $5;
   $87 = (($86) - 1)|0;
   $4 = $87;
   $88 = $4;
   $89 = (_llvm_ctlz_i32(($88|0))|0);
   $90 = (32 - ($89))|0;
   $91 = 1 << $90;
   $108 = $91;
  } else {
   $8 = $36;
   $92 = $8;
   $93 = (($92) + 12|0);
   $7 = $93;
   $94 = $7;
   $6 = $94;
   $95 = $6;
   $96 = HEAP32[$95>>2]|0;
   $97 = (+($96>>>0));
   $11 = $36;
   $98 = $11;
   $99 = (($98) + 16|0);
   $10 = $99;
   $100 = $10;
   $9 = $100;
   $101 = $9;
   $102 = +HEAPF32[$101>>2];
   $103 = $97 / $102;
   $15 = $103;
   $104 = $15;
   $105 = (+Math_ceil((+$104)));
   $106 = (~~(($105))>>>0);
   $107 = (__ZNSt3__112__next_primeEj($106)|0);
   $108 = $107;
  }
  HEAP32[$35>>2] = $108;
  $22 = $34;
  $23 = $35;
  $109 = $22;
  $110 = $23;
  ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;
  $19 = $109;
  $20 = $110;
  $111 = $19;
  $112 = $20;
  $16 = $21;
  $17 = $111;
  $18 = $112;
  $113 = $17;
  $114 = HEAP32[$113>>2]|0;
  $115 = $18;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114>>>0)<($116>>>0);
  if ($117) {
   $118 = $20;
   $121 = $118;
  } else {
   $119 = $19;
   $121 = $119;
  }
  $120 = HEAP32[$121>>2]|0;
  HEAP32[$34>>2] = $120;
  $122 = HEAP32[$34>>2]|0;
  $123 = $__bc;
  $124 = ($122>>>0)<($123>>>0);
  if ($124) {
   $125 = HEAP32[$34>>2]|0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($36,$125);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0;
 var $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0;
 $33 = sp + 112|0;
 $47 = sp + 168|0;
 $59 = sp + 216|0;
 $71 = sp + 260|0;
 $81 = sp + 300|0;
 $90 = sp + 728|0;
 $177 = sp + 20|0;
 $178 = sp + 700|0;
 $179 = sp + 716|0;
 $180 = sp + 336|0;
 $181 = sp + 724|0;
 $182 = sp + 584|0;
 $175 = $this;
 $176 = $__nbc;
 $183 = $175;
 $174 = $183;
 $184 = $174;
 $173 = $184;
 $185 = $173;
 $172 = $185;
 $186 = $172;
 $187 = (($186) + 4|0);
 $98 = $187;
 $188 = $98;
 $97 = $188;
 $189 = $97;
 $96 = $189;
 $190 = $96;
 $__npa = $190;
 $191 = $176;
 $192 = ($191>>>0)>(0);
 if ($192) {
  $193 = $__npa;
  $194 = $176;
  $94 = $193;
  $95 = $194;
  $195 = $94;
  $196 = $95;
  $91 = $195;
  $92 = $196;
  $93 = 0;
  $197 = $92;
  $198 = $197<<2;
  $199 = (__Znwj($198)|0);
  $204 = $199;
 } else {
  $88 = $90;
  $89 = -1;
  $200 = $88;
  $201 = $89;
  $86 = $200;
  $87 = $201;
  $202 = $86;
  HEAP32[$202>>2] = 0;
  $203 = HEAP32[$90>>2]|0;
  HEAP32[$177>>2] = $203;
  $0 = $177;
  $204 = 0;
 }
 $21 = $183;
 $22 = $204;
 $205 = $21;
 $20 = $205;
 $206 = $20;
 $19 = $206;
 $207 = $19;
 $208 = HEAP32[$207>>2]|0;
 $__tmp$i = $208;
 $209 = $22;
 $4 = $205;
 $210 = $4;
 $3 = $210;
 $211 = $3;
 HEAP32[$211>>2] = $209;
 $212 = $__tmp$i;
 $213 = ($212|0)!=(0|0);
 if ($213) {
  $2 = $205;
  $214 = $2;
  $1 = $214;
  $215 = $1;
  $216 = (($215) + 4|0);
  $217 = $__tmp$i;
  $17 = $216;
  $18 = $217;
  $218 = $17;
  $16 = $218;
  $219 = $16;
  $15 = $219;
  $220 = $15;
  $14 = $220;
  $221 = $14;
  $222 = $18;
  $7 = $218;
  $223 = $7;
  $6 = $223;
  $224 = $6;
  $5 = $224;
  $225 = $5;
  $226 = HEAP32[$225>>2]|0;
  $11 = $221;
  $12 = $222;
  $13 = $226;
  $227 = $11;
  $228 = $12;
  $229 = $13;
  $8 = $227;
  $9 = $228;
  $10 = $229;
  $230 = $9;
  __ZdlPv($230);
 }
 $231 = $176;
 $25 = $183;
 $232 = $25;
 $24 = $232;
 $233 = $24;
 $23 = $233;
 $234 = $23;
 $235 = (($234) + 4|0);
 $28 = $235;
 $236 = $28;
 $27 = $236;
 $237 = $27;
 $26 = $237;
 $238 = $26;
 HEAP32[$238>>2] = $231;
 $239 = $176;
 $240 = ($239>>>0)>(0);
 if (!($240)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $241 = $__i;
  $242 = $176;
  $243 = ($241>>>0)<($242>>>0);
  if (!($243)) {
   break;
  }
  $31 = $33;
  $32 = -1;
  $244 = $31;
  $245 = $32;
  $29 = $244;
  $30 = $245;
  $246 = $29;
  HEAP32[$246>>2] = 0;
  $247 = HEAP32[$33>>2]|0;
  HEAP32[$178>>2] = $247;
  $34 = $178;
  $248 = $__i;
  $37 = $183;
  $38 = $248;
  $249 = $37;
  $250 = $38;
  $36 = $249;
  $251 = $36;
  $35 = $251;
  $252 = $35;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + ($250<<2)|0);
  HEAP32[$254>>2] = 0;
  $255 = $__i;
  $256 = (($255) + 1)|0;
  $__i = $256;
 }
 $257 = (($183) + 8|0);
 $40 = $257;
 $258 = $40;
 $39 = $258;
 $259 = $39;
 $42 = $259;
 $260 = $42;
 $41 = $260;
 $261 = $41;
 $__pp = $261;
 $262 = $__pp;
 $263 = HEAP32[$262>>2]|0;
 $__cp = $263;
 $264 = $__cp;
 $45 = $47;
 $46 = -1;
 $265 = $45;
 $266 = $46;
 $43 = $265;
 $44 = $266;
 $267 = $43;
 HEAP32[$267>>2] = 0;
 $268 = HEAP32[$47>>2]|0;
 HEAP32[$179>>2] = $268;
 $48 = $179;
 $269 = ($264|0)!=(0|0);
 do {
  if ($269) {
   $270 = $__cp;
   $271 = (($270) + 4|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $176;
   $49 = $272;
   $50 = $273;
   $274 = $50;
   $275 = $50;
   $276 = (($275) - 1)|0;
   $277 = $274 & $276;
   $278 = ($277|0)!=(0);
   if ($278) {
    $283 = $49;
    $284 = $50;
    $285 = (($283>>>0) % ($284>>>0))&-1;
    $286 = $285;
   } else {
    $279 = $49;
    $280 = $50;
    $281 = (($280) - 1)|0;
    $282 = $279 & $281;
    $286 = $282;
   }
   $__chash = $286;
   $287 = $__pp;
   $288 = $__chash;
   $53 = $183;
   $54 = $288;
   $289 = $53;
   $290 = $54;
   $52 = $289;
   $291 = $52;
   $51 = $291;
   $292 = $51;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + ($290<<2)|0);
   HEAP32[$294>>2] = $287;
   $295 = $__chash;
   $__phash = $295;
   $296 = $__cp;
   $__pp = $296;
   $297 = $__cp;
   $298 = HEAP32[$297>>2]|0;
   $__cp = $298;
   L22: while(1) {
    $299 = $__cp;
    $57 = $59;
    $58 = -1;
    $300 = $57;
    $301 = $58;
    $55 = $300;
    $56 = $301;
    $302 = $55;
    HEAP32[$302>>2] = 0;
    $303 = HEAP32[$59>>2]|0;
    HEAP32[$180>>2] = $303;
    $60 = $180;
    $304 = ($299|0)!=(0|0);
    if (!($304)) {
     label = 58;
     break;
    }
    $305 = $__cp;
    $306 = (($305) + 4|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $176;
    $61 = $307;
    $62 = $308;
    $309 = $62;
    $310 = $62;
    $311 = (($310) - 1)|0;
    $312 = $309 & $311;
    $313 = ($312|0)!=(0);
    if ($313) {
     $318 = $61;
     $319 = $62;
     $320 = (($318>>>0) % ($319>>>0))&-1;
     $321 = $320;
    } else {
     $314 = $61;
     $315 = $62;
     $316 = (($315) - 1)|0;
     $317 = $314 & $316;
     $321 = $317;
    }
    $__chash = $321;
    $322 = $__chash;
    $323 = $__phash;
    $324 = ($322|0)==($323|0);
    if ($324) {
     $325 = $__cp;
     $__pp = $325;
    } else {
     $326 = $__chash;
     $65 = $183;
     $66 = $326;
     $327 = $65;
     $328 = $66;
     $64 = $327;
     $329 = $64;
     $63 = $329;
     $330 = $63;
     $331 = HEAP32[$330>>2]|0;
     $332 = (($331) + ($328<<2)|0);
     $333 = HEAP32[$332>>2]|0;
     $69 = $71;
     $70 = -1;
     $334 = $69;
     $335 = $70;
     $67 = $334;
     $68 = $335;
     $336 = $67;
     HEAP32[$336>>2] = 0;
     $337 = HEAP32[$71>>2]|0;
     HEAP32[$181>>2] = $337;
     $72 = $181;
     $338 = ($333|0)==(0|0);
     if ($338) {
      $339 = $__pp;
      $340 = $__chash;
      $75 = $183;
      $76 = $340;
      $341 = $75;
      $342 = $76;
      $74 = $341;
      $343 = $74;
      $73 = $343;
      $344 = $73;
      $345 = HEAP32[$344>>2]|0;
      $346 = (($345) + ($342<<2)|0);
      HEAP32[$346>>2] = $339;
      $347 = $__cp;
      $__pp = $347;
      $348 = $__chash;
      $__phash = $348;
     } else {
      $349 = $__cp;
      $__np = $349;
      while(1) {
       $350 = $__np;
       $351 = HEAP32[$350>>2]|0;
       $79 = $81;
       $80 = -1;
       $352 = $79;
       $353 = $80;
       $77 = $352;
       $78 = $353;
       $354 = $77;
       HEAP32[$354>>2] = 0;
       $355 = HEAP32[$81>>2]|0;
       HEAP32[$182>>2] = $355;
       $82 = $182;
       $356 = ($351|0)!=(0|0);
       if ($356) {
        $85 = $183;
        $357 = $85;
        $358 = (($357) + 16|0);
        $84 = $358;
        $359 = $84;
        $83 = $359;
        $360 = $83;
        $361 = $__cp;
        $362 = (($361) + 8|0);
        $363 = $__np;
        $364 = HEAP32[$363>>2]|0;
        $365 = (($364) + 8|0);
        $161 = $360;
        $162 = $362;
        $163 = $365;
        $366 = $161;
        $367 = $162;
        $368 = $163;
        $158 = $366;
        $159 = $367;
        $160 = $368;
        $369 = $159;
        $370 = $160;
        $154 = $369;
        $155 = $370;
        $371 = $154;
        $152 = $371;
        $372 = $152;
        $151 = $372;
        $373 = $151;
        $150 = $373;
        $374 = $150;
        $149 = $374;
        $375 = $149;
        $376 = HEAP8[$375>>0]|0;
        $377 = $376&255;
        $378 = $377 & 1;
        $379 = ($378|0)!=(0);
        if ($379) {
         $145 = $372;
         $380 = $145;
         $144 = $380;
         $381 = $144;
         $143 = $381;
         $382 = $143;
         $383 = (($382) + 4|0);
         $384 = HEAP32[$383>>2]|0;
         $391 = $384;
        } else {
         $148 = $372;
         $385 = $148;
         $147 = $385;
         $386 = $147;
         $146 = $386;
         $387 = $146;
         $388 = HEAP8[$387>>0]|0;
         $389 = $388&255;
         $390 = $389 >> 1;
         $391 = $390;
        }
        $__lhs_sz$i$i$i = $391;
        $392 = $__lhs_sz$i$i$i;
        $393 = $155;
        $139 = $393;
        $394 = $139;
        $138 = $394;
        $395 = $138;
        $137 = $395;
        $396 = $137;
        $136 = $396;
        $397 = $136;
        $398 = HEAP8[$397>>0]|0;
        $399 = $398&255;
        $400 = $399 & 1;
        $401 = ($400|0)!=(0);
        if ($401) {
         $132 = $394;
         $402 = $132;
         $131 = $402;
         $403 = $131;
         $130 = $403;
         $404 = $130;
         $405 = (($404) + 4|0);
         $406 = HEAP32[$405>>2]|0;
         $414 = $406;
        } else {
         $135 = $394;
         $407 = $135;
         $134 = $407;
         $408 = $134;
         $133 = $408;
         $409 = $133;
         $410 = HEAP8[$409>>0]|0;
         $411 = $410&255;
         $412 = $411 >> 1;
         $414 = $412;
        }
        $413 = ($392|0)!=($414|0);
        do {
         if ($413) {
          $$expand_i1_val = 0;
          $153 = $$expand_i1_val;
         } else {
          $415 = $154;
          $112 = $415;
          $416 = $112;
          $111 = $416;
          $417 = $111;
          $110 = $417;
          $418 = $110;
          $109 = $418;
          $419 = $109;
          $108 = $419;
          $420 = $108;
          $421 = HEAP8[$420>>0]|0;
          $422 = $421&255;
          $423 = $422 & 1;
          $424 = ($423|0)!=(0);
          if ($424) {
           $102 = $417;
           $425 = $102;
           $101 = $425;
           $426 = $101;
           $100 = $426;
           $427 = $100;
           $428 = (($427) + 8|0);
           $429 = HEAP32[$428>>2]|0;
           $436 = $429;
          } else {
           $107 = $417;
           $430 = $107;
           $106 = $430;
           $431 = $106;
           $105 = $431;
           $432 = $105;
           $433 = (($432) + 1|0);
           $104 = $433;
           $434 = $104;
           $103 = $434;
           $435 = $103;
           $436 = $435;
          }
          $99 = $436;
          $437 = $99;
          $__lp$i$i$i = $437;
          $438 = $155;
          $126 = $438;
          $439 = $126;
          $125 = $439;
          $440 = $125;
          $124 = $440;
          $441 = $124;
          $123 = $441;
          $442 = $123;
          $122 = $442;
          $443 = $122;
          $444 = HEAP8[$443>>0]|0;
          $445 = $444&255;
          $446 = $445 & 1;
          $447 = ($446|0)!=(0);
          if ($447) {
           $116 = $440;
           $448 = $116;
           $115 = $448;
           $449 = $115;
           $114 = $449;
           $450 = $114;
           $451 = (($450) + 8|0);
           $452 = HEAP32[$451>>2]|0;
           $459 = $452;
          } else {
           $121 = $440;
           $453 = $121;
           $120 = $453;
           $454 = $120;
           $119 = $454;
           $455 = $119;
           $456 = (($455) + 1|0);
           $118 = $456;
           $457 = $118;
           $117 = $457;
           $458 = $117;
           $459 = $458;
          }
          $113 = $459;
          $460 = $113;
          $__rp$i$i$i = $460;
          $461 = $154;
          $129 = $461;
          $462 = $129;
          $128 = $462;
          $463 = $128;
          $127 = $463;
          $464 = $127;
          $465 = HEAP8[$464>>0]|0;
          $466 = $465&255;
          $467 = $466 & 1;
          $468 = ($467|0)!=(0);
          if ($468) {
           $469 = $__lp$i$i$i;
           $470 = $__rp$i$i$i;
           $471 = $__lhs_sz$i$i$i;
           $140 = $469;
           $141 = $470;
           $142 = $471;
           $472 = $140;
           $473 = $141;
           $474 = $142;
           __THREW__ = 0;
           $475 = (invoke_iiii(440,($472|0),($473|0),($474|0))|0);
           $476 = __THREW__; __THREW__ = 0;
           $477 = $476&1;
           if ($477) {
            label = 43;
            break L22;
           }
           $478 = ($475|0)==(0);
           $$expand_i1_val2 = $478&1;
           $153 = $$expand_i1_val2;
           break;
          }
          while(1) {
           $482 = $__lhs_sz$i$i$i;
           $483 = ($482|0)!=(0);
           if (!($483)) {
            label = 49;
            break;
           }
           $484 = $__lp$i$i$i;
           $485 = HEAP8[$484>>0]|0;
           $486 = $485 << 24 >> 24;
           $487 = $__rp$i$i$i;
           $488 = HEAP8[$487>>0]|0;
           $489 = $488 << 24 >> 24;
           $490 = ($486|0)!=($489|0);
           if ($490) {
            label = 47;
            break;
           }
           $491 = $__lhs_sz$i$i$i;
           $492 = (($491) + -1)|0;
           $__lhs_sz$i$i$i = $492;
           $493 = $__lp$i$i$i;
           $494 = (($493) + 1|0);
           $__lp$i$i$i = $494;
           $495 = $__rp$i$i$i;
           $496 = (($495) + 1|0);
           $__rp$i$i$i = $496;
          }
          if ((label|0) == 47) {
           label = 0;
           $$expand_i1_val4 = 0;
           $153 = $$expand_i1_val4;
           break;
          }
          else if ((label|0) == 49) {
           label = 0;
           $$expand_i1_val6 = 1;
           $153 = $$expand_i1_val6;
           break;
          }
         }
        } while(0);
        $$pre_trunc = $153;
        $497 = $$pre_trunc&1;
        $524 = $497;
       } else {
        $524 = 0;
       }
       if (!($524)) {
        break;
       }
       $498 = $__np;
       $499 = HEAP32[$498>>2]|0;
       $__np = $499;
      }
      $500 = $__np;
      $501 = HEAP32[$500>>2]|0;
      $502 = $__pp;
      HEAP32[$502>>2] = $501;
      $503 = $__chash;
      $166 = $183;
      $167 = $503;
      $504 = $166;
      $505 = $167;
      $165 = $504;
      $506 = $165;
      $164 = $506;
      $507 = $164;
      $508 = HEAP32[$507>>2]|0;
      $509 = (($508) + ($505<<2)|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = HEAP32[$510>>2]|0;
      $512 = $__np;
      HEAP32[$512>>2] = $511;
      $513 = $__cp;
      $514 = $__chash;
      $170 = $183;
      $171 = $514;
      $515 = $170;
      $516 = $171;
      $169 = $515;
      $517 = $169;
      $168 = $517;
      $518 = $168;
      $519 = HEAP32[$518>>2]|0;
      $520 = (($519) + ($516<<2)|0);
      $521 = HEAP32[$520>>2]|0;
      HEAP32[$521>>2] = $513;
     }
    }
    $522 = $__pp;
    $523 = HEAP32[$522>>2]|0;
    $__cp = $523;
   }
   if ((label|0) == 43) {
    $479 = ___cxa_find_matching_catch(-1,-1)|0;
    $480 = tempRet0;
    $156 = $479;
    $157 = $480;
    $481 = $156;
    ___cxa_call_unexpected(($481|0));
    // unreachable;
   }
   else if ((label|0) == 58) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0;
 var $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $8 = sp + 212|0;
 $14 = sp + 40|0;
 $110 = sp + 424|0;
 $112 = sp + 12|0;
 $118 = sp + 492|0;
 $119 = sp + 316|0;
 $116 = $this;
 $117 = $__k;
 $120 = $116;
 $115 = $120;
 $121 = $115;
 $122 = (($121) + 12|0);
 $114 = $122;
 $123 = $114;
 $113 = $123;
 $124 = $113;
 $125 = $117;
 $30 = $124;
 $31 = $125;
 $126 = $30;
 $127 = $31;
 $128 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($126,$127)|0);
 $__hash = $128;
 $29 = $120;
 $129 = $29;
 $28 = $129;
 $130 = $28;
 $27 = $130;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = (($132) + 4|0);
 $25 = $133;
 $134 = $25;
 $24 = $134;
 $135 = $24;
 $23 = $135;
 $136 = $23;
 $137 = HEAP32[$136>>2]|0;
 $__bc = $137;
 $138 = $__bc;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $__hash;
  $141 = $__bc;
  $21 = $140;
  $22 = $141;
  $142 = $22;
  $143 = $22;
  $144 = (($143) - 1)|0;
  $145 = $142 & $144;
  $146 = ($145|0)!=(0);
  if ($146) {
   $151 = $21;
   $152 = $22;
   $153 = (($151>>>0) % ($152>>>0))&-1;
   $154 = $153;
  } else {
   $147 = $21;
   $148 = $22;
   $149 = (($148) - 1)|0;
   $150 = $147 & $149;
   $154 = $150;
  }
  $__chash = $154;
  $155 = $__chash;
  $2 = $120;
  $3 = $155;
  $156 = $2;
  $157 = $3;
  $1 = $156;
  $158 = $1;
  $0 = $158;
  $159 = $0;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($157<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $__nd = $162;
  $163 = $__nd;
  $6 = $8;
  $7 = -1;
  $164 = $6;
  $165 = $7;
  $4 = $164;
  $5 = $165;
  $166 = $4;
  HEAP32[$166>>2] = 0;
  $167 = HEAP32[$8>>2]|0;
  HEAP32[$118>>2] = $167;
  $9 = $118;
  $168 = ($163|0)!=(0|0);
  do {
   if ($168) {
    $169 = $__nd;
    $170 = HEAP32[$169>>2]|0;
    $__nd = $170;
    L9: while(1) {
     $171 = $__nd;
     $12 = $14;
     $13 = -1;
     $172 = $12;
     $173 = $13;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     HEAP32[$174>>2] = 0;
     $175 = HEAP32[$14>>2]|0;
     HEAP32[$119>>2] = $175;
     $15 = $119;
     $176 = ($171|0)!=(0|0);
     if ($176) {
      $177 = $__nd;
      $178 = (($177) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $__bc;
      $16 = $179;
      $17 = $180;
      $181 = $17;
      $182 = $17;
      $183 = (($182) - 1)|0;
      $184 = $181 & $183;
      $185 = ($184|0)!=(0);
      if ($185) {
       $190 = $16;
       $191 = $17;
       $192 = (($190>>>0) % ($191>>>0))&-1;
       $195 = $192;
      } else {
       $186 = $16;
       $187 = $17;
       $188 = (($187) - 1)|0;
       $189 = $186 & $188;
       $195 = $189;
      }
      $193 = $__chash;
      $194 = ($195|0)==($193|0);
      $350 = $194;
     } else {
      $350 = 0;
     }
     if (!($350)) {
      label = 41;
      break;
     }
     $20 = $120;
     $196 = $20;
     $197 = (($196) + 16|0);
     $19 = $197;
     $198 = $19;
     $18 = $198;
     $199 = $18;
     $200 = $__nd;
     $201 = (($200) + 8|0);
     $202 = $117;
     $94 = $199;
     $95 = $201;
     $96 = $202;
     $203 = $94;
     $204 = $95;
     $205 = $96;
     $91 = $203;
     $92 = $204;
     $93 = $205;
     $206 = $92;
     $207 = $93;
     $87 = $206;
     $88 = $207;
     $208 = $87;
     $85 = $208;
     $209 = $85;
     $84 = $209;
     $210 = $84;
     $83 = $210;
     $211 = $83;
     $82 = $211;
     $212 = $82;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $214 & 1;
     $216 = ($215|0)!=(0);
     if ($216) {
      $78 = $209;
      $217 = $78;
      $77 = $217;
      $218 = $77;
      $76 = $218;
      $219 = $76;
      $220 = (($219) + 4|0);
      $221 = HEAP32[$220>>2]|0;
      $228 = $221;
     } else {
      $81 = $209;
      $222 = $81;
      $80 = $222;
      $223 = $80;
      $79 = $223;
      $224 = $79;
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = $226 >> 1;
      $228 = $227;
     }
     $__lhs_sz$i$i$i = $228;
     $229 = $__lhs_sz$i$i$i;
     $230 = $88;
     $72 = $230;
     $231 = $72;
     $71 = $231;
     $232 = $71;
     $70 = $232;
     $233 = $70;
     $69 = $233;
     $234 = $69;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $65 = $231;
      $239 = $65;
      $64 = $239;
      $240 = $64;
      $63 = $240;
      $241 = $63;
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $251 = $243;
     } else {
      $68 = $231;
      $244 = $68;
      $67 = $244;
      $245 = $67;
      $66 = $245;
      $246 = $66;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $251 = $249;
     }
     $250 = ($229|0)!=($251|0);
     do {
      if ($250) {
       $$expand_i1_val = 0;
       $86 = $$expand_i1_val;
      } else {
       $252 = $87;
       $45 = $252;
       $253 = $45;
       $44 = $253;
       $254 = $44;
       $43 = $254;
       $255 = $43;
       $42 = $255;
       $256 = $42;
       $41 = $256;
       $257 = $41;
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       $260 = $259 & 1;
       $261 = ($260|0)!=(0);
       if ($261) {
        $35 = $254;
        $262 = $35;
        $34 = $262;
        $263 = $34;
        $33 = $263;
        $264 = $33;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $273 = $266;
       } else {
        $40 = $254;
        $267 = $40;
        $39 = $267;
        $268 = $39;
        $38 = $268;
        $269 = $38;
        $270 = (($269) + 1|0);
        $37 = $270;
        $271 = $37;
        $36 = $271;
        $272 = $36;
        $273 = $272;
       }
       $32 = $273;
       $274 = $32;
       $__lp$i$i$i = $274;
       $275 = $88;
       $59 = $275;
       $276 = $59;
       $58 = $276;
       $277 = $58;
       $57 = $277;
       $278 = $57;
       $56 = $278;
       $279 = $56;
       $55 = $279;
       $280 = $55;
       $281 = HEAP8[$280>>0]|0;
       $282 = $281&255;
       $283 = $282 & 1;
       $284 = ($283|0)!=(0);
       if ($284) {
        $49 = $277;
        $285 = $49;
        $48 = $285;
        $286 = $48;
        $47 = $286;
        $287 = $47;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $296 = $289;
       } else {
        $54 = $277;
        $290 = $54;
        $53 = $290;
        $291 = $53;
        $52 = $291;
        $292 = $52;
        $293 = (($292) + 1|0);
        $51 = $293;
        $294 = $51;
        $50 = $294;
        $295 = $50;
        $296 = $295;
       }
       $46 = $296;
       $297 = $46;
       $__rp$i$i$i = $297;
       $298 = $87;
       $62 = $298;
       $299 = $62;
       $61 = $299;
       $300 = $61;
       $60 = $300;
       $301 = $60;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302&255;
       $304 = $303 & 1;
       $305 = ($304|0)!=(0);
       if ($305) {
        $306 = $__lp$i$i$i;
        $307 = $__rp$i$i$i;
        $308 = $__lhs_sz$i$i$i;
        $73 = $306;
        $74 = $307;
        $75 = $308;
        $309 = $73;
        $310 = $74;
        $311 = $75;
        __THREW__ = 0;
        $312 = (invoke_iiii(440,($309|0),($310|0),($311|0))|0);
        $313 = __THREW__; __THREW__ = 0;
        $314 = $313&1;
        if ($314) {
         label = 30;
         break L9;
        }
        $315 = ($312|0)==(0);
        $$expand_i1_val2 = $315&1;
        $86 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $319 = $__lhs_sz$i$i$i;
        $320 = ($319|0)!=(0);
        if (!($320)) {
         label = 36;
         break;
        }
        $321 = $__lp$i$i$i;
        $322 = HEAP8[$321>>0]|0;
        $323 = $322 << 24 >> 24;
        $324 = $__rp$i$i$i;
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($323|0)!=($326|0);
        if ($327) {
         label = 34;
         break;
        }
        $328 = $__lhs_sz$i$i$i;
        $329 = (($328) + -1)|0;
        $__lhs_sz$i$i$i = $329;
        $330 = $__lp$i$i$i;
        $331 = (($330) + 1|0);
        $__lp$i$i$i = $331;
        $332 = $__rp$i$i$i;
        $333 = (($332) + 1|0);
        $__rp$i$i$i = $333;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $86 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $86 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $86;
     $334 = $$pre_trunc&1;
     if ($334) {
      label = 38;
      break;
     }
     $340 = $__nd;
     $341 = HEAP32[$340>>2]|0;
     $__nd = $341;
    }
    if ((label|0) == 30) {
     $316 = ___cxa_find_matching_catch(-1,-1)|0;
     $317 = tempRet0;
     $89 = $316;
     $90 = $317;
     $318 = $89;
     ___cxa_call_unexpected(($318|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $335 = $__nd;
     $99 = $agg$result;
     $100 = $335;
     $336 = $99;
     $337 = $100;
     $97 = $336;
     $98 = $337;
     $338 = $97;
     $339 = $98;
     HEAP32[$338>>2] = $339;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $111 = $120;
 $108 = $110;
 $109 = -1;
 $342 = $108;
 $343 = $109;
 $106 = $342;
 $107 = $343;
 $344 = $106;
 HEAP32[$344>>2] = 0;
 $345 = HEAP32[$110>>2]|0;
 HEAP32[$112>>2] = $345;
 $101 = $112;
 $104 = $agg$result;
 $105 = 0;
 $346 = $104;
 $347 = $105;
 $102 = $346;
 $103 = $347;
 $348 = $102;
 $349 = $103;
 HEAP32[$348>>2] = $349;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0;
 var $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i17 = 0, $__tmp$i$i$i29 = 0, $__tmp$i$i$i9 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $7 = sp + 128|0;
 $10 = sp + 1086|0;
 $13 = sp + 72|0;
 $16 = sp + 1083|0;
 $__i1$i$i$i = sp + 88|0;
 $47 = sp + 96|0;
 $50 = sp + 280|0;
 $63 = sp + 32|0;
 $66 = sp + 1080|0;
 $69 = sp + 112|0;
 $72 = sp + 1087|0;
 $97 = sp + 144|0;
 $100 = sp + 1085|0;
 $103 = sp + 48|0;
 $106 = sp + 1082|0;
 $138 = sp + 664|0;
 $139 = sp + 16|0;
 $142 = sp + 680|0;
 $143 = sp + 688|0;
 $__t21$i$i$i = sp + 80|0;
 $146 = sp + 40|0;
 $149 = sp + 720|0;
 $__u1$i = sp + 56|0;
 $151 = sp + 64|0;
 $170 = sp + 136|0;
 $173 = sp + 1084|0;
 $176 = sp + 104|0;
 $179 = sp + 1081|0;
 $__i1$i$i1 = sp + 120|0;
 $205 = sp + 8|0;
 $215 = sp + 1008|0;
 $217 = sp + 1016|0;
 $219 = sp + 968|0;
 $__i1$i$i = sp + 24|0;
 $222 = sp;
 $225 = sp + 540|0;
 $__i = sp + 156|0;
 $229 = sp + 1068|0;
 $__h = sp + 848|0;
 $230 = sp + 824|0;
 $231 = sp + 508|0;
 $__r = sp + 584|0;
 $234 = sp + 616|0;
 $227 = $this;
 $228 = $__k;
 $236 = $227;
 $237 = $228;
 $223 = $236;
 $224 = $237;
 $238 = $223;
 $239 = $224;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($225,$238,$239);
 ;HEAP8[$222+0>>0]=HEAP8[$225+0>>0]|0;HEAP8[$222+1>>0]=HEAP8[$225+1>>0]|0;HEAP8[$222+2>>0]=HEAP8[$225+2>>0]|0;HEAP8[$222+3>>0]=HEAP8[$225+3>>0]|0;
 $221 = $__i;
 $240 = $221;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$222+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$222+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$222+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$222+3>>0]|0;
 $220 = $240;
 $241 = $220;
 ;HEAP32[$241+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $218 = $236;
 $242 = $218;
 $216 = $242;
 $213 = $215;
 $214 = -1;
 $243 = $213;
 $244 = $214;
 $211 = $243;
 $212 = $244;
 $245 = $211;
 HEAP32[$245>>2] = 0;
 $246 = HEAP32[$215>>2]|0;
 HEAP32[$217>>2] = $246;
 $206 = $217;
 $209 = $219;
 $210 = 0;
 $247 = $209;
 $248 = $210;
 $207 = $247;
 $208 = $248;
 $249 = $207;
 $250 = $208;
 HEAP32[$249>>2] = $250;
 ;HEAP8[$205+0>>0]=HEAP8[$219+0>>0]|0;HEAP8[$205+1>>0]=HEAP8[$219+1>>0]|0;HEAP8[$205+2>>0]=HEAP8[$219+2>>0]|0;HEAP8[$205+3>>0]=HEAP8[$219+3>>0]|0;
 $204 = $229;
 $251 = $204;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$205+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$205+3>>0]|0;
 $203 = $251;
 $252 = $203;
 ;HEAP32[$252+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $201 = $__i;
 $202 = $229;
 $253 = $201;
 $254 = $202;
 $199 = $253;
 $200 = $254;
 $255 = $199;
 $256 = $200;
 $197 = $255;
 $198 = $256;
 $257 = $197;
 $258 = HEAP32[$257>>2]|0;
 $259 = $198;
 $260 = HEAP32[$259>>2]|0;
 $261 = ($258|0)==($260|0);
 $262 = $261 ^ 1;
 if ($262) {
  $162 = $__i;
  $263 = $162;
  $161 = $263;
  $264 = $161;
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + 8|0);
  $160 = $266;
  $267 = $160;
  $159 = $267;
  $268 = $159;
  $158 = $268;
  $269 = $158;
  $157 = $269;
  $270 = $157;
  $271 = (($270) + 12|0);
  $226 = $271;
  $489 = $226;
  STACKTOP = sp;return ($489|0);
 }
 $272 = $228;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEE25__construct_node_with_keyERSC_($231,$236,$272);
 $156 = $231;
 $273 = $156;
 $154 = $230;
 $155 = $273;
 $274 = $154;
 $275 = $155;
 $152 = $274;
 $153 = $275;
 $276 = $152;
 $277 = $153;
 HEAP32[$276>>2] = $277;
 ;HEAP8[$151+0>>0]=HEAP8[$230+0>>0]|0;HEAP8[$151+1>>0]=HEAP8[$230+1>>0]|0;HEAP8[$151+2>>0]=HEAP8[$230+2>>0]|0;HEAP8[$151+3>>0]=HEAP8[$230+3>>0]|0;
 $150 = $__h;
 $278 = $150;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$151+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$151+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$151+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$151+3>>0]|0;
 $148 = $278;
 $279 = $148;
 $147 = $__u1$i;
 $280 = $147;
 $281 = HEAP32[$280>>2]|0;
 $128 = $281;
 $282 = $128;
 $127 = $282;
 $283 = $127;
 $126 = $283;
 $284 = $126;
 $285 = HEAP32[$284>>2]|0;
 $__t$i$i$i = $285;
 $125 = $282;
 $286 = $125;
 $124 = $286;
 $287 = $124;
 HEAP32[$287>>2] = 0;
 $288 = $__t$i$i$i;
 $129 = $__u1$i;
 $289 = $129;
 $290 = HEAP32[$289>>2]|0;
 $132 = $290;
 $291 = $132;
 $131 = $291;
 $292 = $131;
 $130 = $292;
 $293 = $130;
 $294 = (($293) + 4|0);
 $133 = $294;
 $295 = $133;
 ;HEAP32[$149+0>>2]=HEAP32[$295+0>>2]|0;HEAP32[$149+4>>2]=HEAP32[$295+4>>2]|0;
 ;HEAP8[$146+0>>0]=HEAP8[$149+0>>0]|0;HEAP8[$146+1>>0]=HEAP8[$149+1>>0]|0;HEAP8[$146+2>>0]=HEAP8[$149+2>>0]|0;HEAP8[$146+3>>0]=HEAP8[$149+3>>0]|0;HEAP8[$146+4>>0]=HEAP8[$149+4>>0]|0;HEAP8[$146+5>>0]=HEAP8[$149+5>>0]|0;HEAP8[$146+6>>0]=HEAP8[$149+6>>0]|0;HEAP8[$146+7>>0]=HEAP8[$149+7>>0]|0;
 $144 = $279;
 $145 = $288;
 $296 = $144;
 $297 = $145;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$146+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$146+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$146+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$146+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$146+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$146+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$146+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$146+7>>0]|0;
 $141 = $296;
 HEAP32[$142>>2] = $297;
 $298 = $141;
 $140 = $142;
 $299 = $140;
 $300 = HEAP32[$299>>2]|0;
 $134 = $__t21$i$i$i;
 $301 = $134;
 ;HEAP32[$143+0>>2]=HEAP32[$301+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$301+4>>2]|0;
 ;HEAP8[$139+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$139+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$143+3>>0]|0;HEAP8[$139+4>>0]=HEAP8[$143+4>>0]|0;HEAP8[$139+5>>0]=HEAP8[$143+5>>0]|0;HEAP8[$139+6>>0]=HEAP8[$143+6>>0]|0;HEAP8[$139+7>>0]=HEAP8[$143+7>>0]|0;
 $137 = $298;
 HEAP32[$138>>2] = $300;
 $302 = $137;
 $136 = $138;
 $303 = $136;
 $304 = HEAP32[$303>>2]|0;
 HEAP32[$302>>2] = $304;
 $305 = (($302) + 4|0);
 $135 = $139;
 $306 = $135;
 ;HEAP32[$305+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$305+4>>2]=HEAP32[$306+4>>2]|0;
 $89 = $231;
 $307 = $89;
 $88 = $307;
 $308 = $88;
 $86 = $308;
 $87 = 0;
 $309 = $86;
 $85 = $309;
 $310 = $85;
 $84 = $310;
 $311 = $84;
 $312 = HEAP32[$311>>2]|0;
 $__tmp$i$i$i17 = $312;
 $313 = $87;
 $59 = $309;
 $314 = $59;
 $58 = $314;
 $315 = $58;
 HEAP32[$315>>2] = $313;
 $316 = $__tmp$i$i$i17;
 $317 = ($316|0)!=(0|0);
 if ($317) {
  $57 = $309;
  $318 = $57;
  $56 = $318;
  $319 = $56;
  $320 = (($319) + 4|0);
  $321 = $__tmp$i$i$i17;
  $80 = $320;
  $81 = $321;
  $322 = $80;
  $323 = (($322) + 5|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&1;
  if ($325) {
   $326 = HEAP32[$322>>2]|0;
   $327 = $81;
   $328 = (($327) + 8|0);
   $329 = (($328) + 12|0);
   $79 = $329;
   $330 = $79;
   $70 = $326;
   $71 = $330;
   $331 = $70;
   $332 = $71;
   ;HEAP8[$69+0>>0]=HEAP8[$72+0>>0]|0;
   $67 = $331;
   $68 = $332;
  }
  $336 = (($322) + 4|0);
  $337 = HEAP8[$336>>0]|0;
  $338 = $337&1;
  do {
   if ($338) {
    $339 = HEAP32[$322>>2]|0;
    $340 = $81;
    $341 = (($340) + 8|0);
    $60 = $341;
    $342 = $60;
    $64 = $339;
    $65 = $342;
    $343 = $64;
    $344 = $65;
    ;HEAP8[$63+0>>0]=HEAP8[$66+0>>0]|0;
    $61 = $343;
    $62 = $344;
    $345 = $62;
    __THREW__ = 0;
    invoke_vi(415,($345|0));
    $346 = __THREW__; __THREW__ = 0;
    $347 = $346&1;
    if ($347) {
     $333 = ___cxa_find_matching_catch(-1,-1)|0;
     $334 = tempRet0;
     $82 = $333;
     $83 = $334;
     $335 = $82;
     ___cxa_call_unexpected(($335|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $348 = $81;
  $349 = ($348|0)!=(0|0);
  if ($349) {
   $350 = HEAP32[$322>>2]|0;
   $351 = $81;
   $76 = $350;
   $77 = $351;
   $78 = 1;
   $352 = $76;
   $353 = $77;
   $354 = $78;
   $73 = $352;
   $74 = $353;
   $75 = $354;
   $355 = $74;
   __ZdlPv($355);
  }
 }
 $55 = $__h;
 $356 = $55;
 $54 = $356;
 $357 = $54;
 $53 = $357;
 $358 = $53;
 $359 = HEAP32[$358>>2]|0;
 __THREW__ = 0;
 invoke_viii(443,($234|0),($236|0),($359|0));
 $360 = __THREW__; __THREW__ = 0;
 $361 = $360&1;
 if ($361) {
  $438 = ___cxa_find_matching_catch(-1,-1)|0;
  $439 = tempRet0;
  $232 = $438;
  $233 = $439;
  $196 = $__h;
  $440 = $196;
  $195 = $440;
  $441 = $195;
  $193 = $441;
  $194 = 0;
  $442 = $193;
  $192 = $442;
  $443 = $192;
  $191 = $443;
  $444 = $191;
  $445 = HEAP32[$444>>2]|0;
  $__tmp$i$i$i = $445;
  $446 = $194;
  $166 = $442;
  $447 = $166;
  $165 = $447;
  $448 = $165;
  HEAP32[$448>>2] = $446;
  $449 = $__tmp$i$i$i;
  $450 = ($449|0)!=(0|0);
  if ($450) {
   $164 = $442;
   $451 = $164;
   $163 = $451;
   $452 = $163;
   $453 = (($452) + 4|0);
   $454 = $__tmp$i$i$i;
   $187 = $453;
   $188 = $454;
   $455 = $187;
   $456 = (($455) + 5|0);
   $457 = HEAP8[$456>>0]|0;
   $458 = $457&1;
   if ($458) {
    $459 = HEAP32[$455>>2]|0;
    $460 = $188;
    $461 = (($460) + 8|0);
    $462 = (($461) + 12|0);
    $186 = $462;
    $463 = $186;
    $177 = $459;
    $178 = $463;
    $464 = $177;
    $465 = $178;
    ;HEAP8[$176+0>>0]=HEAP8[$179+0>>0]|0;
    $174 = $464;
    $175 = $465;
   }
   $469 = (($455) + 4|0);
   $470 = HEAP8[$469>>0]|0;
   $471 = $470&1;
   do {
    if ($471) {
     $472 = HEAP32[$455>>2]|0;
     $473 = $188;
     $474 = (($473) + 8|0);
     $167 = $474;
     $475 = $167;
     $171 = $472;
     $172 = $475;
     $476 = $171;
     $477 = $172;
     ;HEAP8[$170+0>>0]=HEAP8[$173+0>>0]|0;
     $168 = $476;
     $169 = $477;
     $478 = $169;
     __THREW__ = 0;
     invoke_vi(415,($478|0));
     $479 = __THREW__; __THREW__ = 0;
     $480 = $479&1;
     if ($480) {
      $466 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $467 = tempRet0;
      $189 = $466;
      $190 = $467;
      $468 = $189;
      ___cxa_call_unexpected(($468|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $481 = $188;
   $482 = ($481|0)!=(0|0);
   if ($482) {
    $483 = HEAP32[$455>>2]|0;
    $484 = $188;
    $183 = $483;
    $184 = $484;
    $185 = 1;
    $485 = $183;
    $486 = $184;
    $487 = $185;
    $180 = $485;
    $181 = $486;
    $182 = $487;
    $488 = $181;
    __ZdlPv($488);
   }
  }
  $490 = $232;
  $491 = $233;
  ___resumeException($490|0);
  // unreachable;
 }
 $51 = $__r;
 $52 = $234;
 $362 = $51;
 $363 = $52;
 $48 = $362;
 $49 = $363;
 $364 = $48;
 $365 = $49;
 ;HEAP32[$50+0>>2]=HEAP32[$365+0>>2]|0;
 ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;HEAP8[$47+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$50+3>>0]|0;
 $46 = $364;
 $366 = $46;
 ;HEAP8[$__i1$i$i$i+0>>0]=HEAP8[$47+0>>0]|0;HEAP8[$__i1$i$i$i+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$__i1$i$i$i+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$__i1$i$i$i+3>>0]=HEAP8[$47+3>>0]|0;
 $45 = $366;
 $367 = $45;
 ;HEAP32[$367+0>>2]=HEAP32[$__i1$i$i$i+0>>2]|0;
 $368 = (($364) + 4|0);
 $369 = $49;
 $370 = (($369) + 4|0);
 $371 = HEAP8[$370>>0]|0;
 $372 = $371&1;
 $373 = $372&1;
 HEAP8[$368>>0] = $373;
 $44 = $__h;
 $374 = $44;
 $43 = $374;
 $375 = $43;
 $42 = $375;
 $376 = $42;
 $377 = HEAP32[$376>>2]|0;
 $__t$i = $377;
 $41 = $374;
 $378 = $41;
 $40 = $378;
 $379 = $40;
 HEAP32[$379>>2] = 0;
 $39 = $__r;
 $380 = $39;
 $38 = $380;
 $381 = $38;
 $382 = HEAP32[$381>>2]|0;
 $383 = (($382) + 8|0);
 $37 = $383;
 $384 = $37;
 $36 = $384;
 $385 = $36;
 $35 = $385;
 $386 = $35;
 $34 = $386;
 $387 = $34;
 $388 = (($387) + 12|0);
 $226 = $388;
 $235 = 1;
 $33 = $__h;
 $389 = $33;
 $32 = $389;
 $390 = $32;
 $30 = $390;
 $31 = 0;
 $391 = $30;
 $29 = $391;
 $392 = $29;
 $28 = $392;
 $393 = $28;
 $394 = HEAP32[$393>>2]|0;
 $__tmp$i$i$i29 = $394;
 $395 = $31;
 $3 = $391;
 $396 = $3;
 $2 = $396;
 $397 = $2;
 HEAP32[$397>>2] = $395;
 $398 = $__tmp$i$i$i29;
 $399 = ($398|0)!=(0|0);
 if ($399) {
  $1 = $391;
  $400 = $1;
  $0 = $400;
  $401 = $0;
  $402 = (($401) + 4|0);
  $403 = $__tmp$i$i$i29;
  $24 = $402;
  $25 = $403;
  $404 = $24;
  $405 = (($404) + 5|0);
  $406 = HEAP8[$405>>0]|0;
  $407 = $406&1;
  if ($407) {
   $408 = HEAP32[$404>>2]|0;
   $409 = $25;
   $410 = (($409) + 8|0);
   $411 = (($410) + 12|0);
   $23 = $411;
   $412 = $23;
   $14 = $408;
   $15 = $412;
   $413 = $14;
   $414 = $15;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $11 = $413;
   $12 = $414;
  }
  $418 = (($404) + 4|0);
  $419 = HEAP8[$418>>0]|0;
  $420 = $419&1;
  do {
   if ($420) {
    $421 = HEAP32[$404>>2]|0;
    $422 = $25;
    $423 = (($422) + 8|0);
    $4 = $423;
    $424 = $4;
    $8 = $421;
    $9 = $424;
    $425 = $8;
    $426 = $9;
    ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
    $5 = $425;
    $6 = $426;
    $427 = $6;
    __THREW__ = 0;
    invoke_vi(415,($427|0));
    $428 = __THREW__; __THREW__ = 0;
    $429 = $428&1;
    if ($429) {
     $415 = ___cxa_find_matching_catch(-1,-1)|0;
     $416 = tempRet0;
     $26 = $415;
     $27 = $416;
     $417 = $26;
     ___cxa_call_unexpected(($417|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $430 = $25;
  $431 = ($430|0)!=(0|0);
  if ($431) {
   $432 = HEAP32[$404>>2]|0;
   $433 = $25;
   $20 = $432;
   $21 = $433;
   $22 = 1;
   $434 = $20;
   $435 = $21;
   $436 = $22;
   $17 = $434;
   $18 = $435;
   $19 = $436;
   $437 = $18;
   __ZdlPv($437);
  }
 }
 $489 = $226;
 STACKTOP = sp;return ($489|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__d1$i = 0, $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i4$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i$i = 0, $__t21$i$i$i27 = 0, $__t21$i$i$i5$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i10 = 0, $__tmp$i$i$i15$i = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i36 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i6$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568|0;
 $7 = sp + 16|0;
 $10 = sp + 1558|0;
 $13 = sp + 216|0;
 $16 = sp + 1561|0;
 $48 = sp + 312|0;
 $49 = sp + 200|0;
 $52 = sp + 328|0;
 $53 = sp + 336|0;
 $__t21$i$i$i27 = sp + 136|0;
 $56 = sp + 72|0;
 $59 = sp + 368|0;
 $__u1$i = sp + 88|0;
 $61 = sp + 176|0;
 $74 = sp + 40|0;
 $77 = sp + 1562|0;
 $80 = sp + 32|0;
 $83 = sp + 1559|0;
 $115 = sp + 608|0;
 $116 = sp + 192|0;
 $119 = sp + 624|0;
 $120 = sp + 632|0;
 $__t21$i$i$i5$i = sp + 232|0;
 $123 = sp + 56|0;
 $126 = sp + 1192|0;
 $__u1$i6$i = sp + 184|0;
 $128 = sp + 208|0;
 $148 = sp + 640|0;
 $149 = sp + 224|0;
 $152 = sp + 772|0;
 $153 = sp + 776|0;
 $__t21$i$i$i$i = sp + 80|0;
 $156 = sp + 96|0;
 $159 = sp + 456|0;
 $__u1$i$i = sp + 112|0;
 $161 = sp + 48|0;
 $167 = sp + 828|0;
 $168 = sp + 832|0;
 $169 = sp + 844|0;
 $182 = sp + 152|0;
 $185 = sp + 1565|0;
 $188 = sp + 168|0;
 $191 = sp + 1564|0;
 $226 = sp + 120|0;
 $229 = sp + 1557|0;
 $232 = sp + 128|0;
 $235 = sp + 1563|0;
 $262 = sp + 1256|0;
 $263 = sp + 160|0;
 $266 = sp + 1268|0;
 $267 = sp + 1272|0;
 $__t21$i$i$i = sp + 144|0;
 $270 = sp;
 $273 = sp + 1296|0;
 $274 = sp + 1304|0;
 $__d1$i = sp + 8|0;
 $277 = sp + 104|0;
 $285 = sp + 64|0;
 $288 = sp + 1560|0;
 $291 = sp + 24|0;
 $294 = sp + 1556|0;
 $__h = sp + 1088|0;
 $326 = sp + 1488|0;
 $329 = sp + 444|0;
 $330 = sp + 1172|0;
 $324 = $this;
 $325 = $__k;
 $332 = $324;
 $323 = $332;
 $333 = $323;
 $334 = (($333) + 8|0);
 $322 = $334;
 $335 = $322;
 $321 = $335;
 $336 = $321;
 $__na = $336;
 $337 = $__na;
 $319 = $337;
 $320 = 1;
 $338 = $319;
 $339 = $320;
 $316 = $338;
 $317 = $339;
 $318 = 0;
 $340 = $317;
 $341 = ($340*24)|0;
 $342 = (__Znwj($341)|0);
 $343 = $__na;
 $314 = $326;
 $315 = $343;
 $344 = $314;
 $345 = $315;
 $312 = $344;
 $313 = $345;
 $346 = $312;
 $347 = $313;
 HEAP32[$346>>2] = $347;
 $348 = (($346) + 4|0);
 HEAP8[$348>>0] = 0;
 $349 = (($346) + 5|0);
 HEAP8[$349>>0] = 0;
 ;HEAP8[$277+0>>0]=HEAP8[$326+0>>0]|0;HEAP8[$277+1>>0]=HEAP8[$326+1>>0]|0;HEAP8[$277+2>>0]=HEAP8[$326+2>>0]|0;HEAP8[$277+3>>0]=HEAP8[$326+3>>0]|0;HEAP8[$277+4>>0]=HEAP8[$326+4>>0]|0;HEAP8[$277+5>>0]=HEAP8[$326+5>>0]|0;HEAP8[$277+6>>0]=HEAP8[$326+6>>0]|0;HEAP8[$277+7>>0]=HEAP8[$326+7>>0]|0;
 $275 = $__h;
 $276 = $342;
 $350 = $275;
 $351 = $276;
 ;HEAP8[$__d1$i+0>>0]=HEAP8[$277+0>>0]|0;HEAP8[$__d1$i+1>>0]=HEAP8[$277+1>>0]|0;HEAP8[$__d1$i+2>>0]=HEAP8[$277+2>>0]|0;HEAP8[$__d1$i+3>>0]=HEAP8[$277+3>>0]|0;HEAP8[$__d1$i+4>>0]=HEAP8[$277+4>>0]|0;HEAP8[$__d1$i+5>>0]=HEAP8[$277+5>>0]|0;HEAP8[$__d1$i+6>>0]=HEAP8[$277+6>>0]|0;HEAP8[$__d1$i+7>>0]=HEAP8[$277+7>>0]|0;
 $272 = $350;
 HEAP32[$273>>2] = $351;
 $352 = $272;
 $271 = $273;
 $353 = $271;
 $354 = HEAP32[$353>>2]|0;
 $257 = $__d1$i;
 $355 = $257;
 ;HEAP32[$274+0>>2]=HEAP32[$355+0>>2]|0;HEAP32[$274+4>>2]=HEAP32[$355+4>>2]|0;
 ;HEAP8[$270+0>>0]=HEAP8[$274+0>>0]|0;HEAP8[$270+1>>0]=HEAP8[$274+1>>0]|0;HEAP8[$270+2>>0]=HEAP8[$274+2>>0]|0;HEAP8[$270+3>>0]=HEAP8[$274+3>>0]|0;HEAP8[$270+4>>0]=HEAP8[$274+4>>0]|0;HEAP8[$270+5>>0]=HEAP8[$274+5>>0]|0;HEAP8[$270+6>>0]=HEAP8[$274+6>>0]|0;HEAP8[$270+7>>0]=HEAP8[$274+7>>0]|0;
 $268 = $352;
 $269 = $354;
 $356 = $268;
 $357 = $269;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$270+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$270+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$270+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$270+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$270+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$270+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$270+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$270+7>>0]|0;
 $265 = $356;
 HEAP32[$266>>2] = $357;
 $358 = $265;
 $264 = $266;
 $359 = $264;
 $360 = HEAP32[$359>>2]|0;
 $258 = $__t21$i$i$i;
 $361 = $258;
 ;HEAP32[$267+0>>2]=HEAP32[$361+0>>2]|0;HEAP32[$267+4>>2]=HEAP32[$361+4>>2]|0;
 ;HEAP8[$263+0>>0]=HEAP8[$267+0>>0]|0;HEAP8[$263+1>>0]=HEAP8[$267+1>>0]|0;HEAP8[$263+2>>0]=HEAP8[$267+2>>0]|0;HEAP8[$263+3>>0]=HEAP8[$267+3>>0]|0;HEAP8[$263+4>>0]=HEAP8[$267+4>>0]|0;HEAP8[$263+5>>0]=HEAP8[$267+5>>0]|0;HEAP8[$263+6>>0]=HEAP8[$267+6>>0]|0;HEAP8[$263+7>>0]=HEAP8[$267+7>>0]|0;
 $261 = $358;
 HEAP32[$262>>2] = $360;
 $362 = $261;
 $260 = $262;
 $363 = $260;
 $364 = HEAP32[$363>>2]|0;
 HEAP32[$362>>2] = $364;
 $365 = (($362) + 4|0);
 $259 = $263;
 $366 = $259;
 ;HEAP32[$365+0>>2]=HEAP32[$366+0>>2]|0;HEAP32[$365+4>>2]=HEAP32[$366+4>>2]|0;
 $367 = $__na;
 $256 = $__h;
 $368 = $256;
 $255 = $368;
 $369 = $255;
 $254 = $369;
 $370 = $254;
 $371 = HEAP32[$370>>2]|0;
 $372 = (($371) + 8|0);
 $253 = $372;
 $373 = $253;
 $374 = $325;
 $216 = $367;
 $217 = $373;
 $218 = $374;
 $375 = $217;
 $376 = ($375|0)==(0|0);
 do {
  if (!($376)) {
   $377 = $218;
   __THREW__ = 0;
   invoke_vii(439,($375|0),($377|0));
   $378 = __THREW__; __THREW__ = 0;
   $379 = $378&1;
   if (!($379)) {
    break;
   }
   $649 = ___cxa_find_matching_catch(-1,-1)|0;
   $650 = tempRet0;
   $327 = $649;
   $328 = $650;
   $311 = $__h;
   $651 = $311;
   $310 = $651;
   $652 = $310;
   $308 = $652;
   $309 = 0;
   $653 = $308;
   $307 = $653;
   $654 = $307;
   $306 = $654;
   $655 = $306;
   $656 = HEAP32[$655>>2]|0;
   $__tmp$i$i$i = $656;
   $657 = $309;
   $281 = $653;
   $658 = $281;
   $280 = $658;
   $659 = $280;
   HEAP32[$659>>2] = $657;
   $660 = $__tmp$i$i$i;
   $661 = ($660|0)!=(0|0);
   if ($661) {
    $279 = $653;
    $662 = $279;
    $278 = $662;
    $663 = $278;
    $664 = (($663) + 4|0);
    $665 = $__tmp$i$i$i;
    $302 = $664;
    $303 = $665;
    $666 = $302;
    $667 = (($666) + 5|0);
    $668 = HEAP8[$667>>0]|0;
    $669 = $668&1;
    if ($669) {
     $670 = HEAP32[$666>>2]|0;
     $671 = $303;
     $672 = (($671) + 8|0);
     $673 = (($672) + 12|0);
     $301 = $673;
     $674 = $301;
     $292 = $670;
     $293 = $674;
     $675 = $292;
     $676 = $293;
     ;HEAP8[$291+0>>0]=HEAP8[$294+0>>0]|0;
     $289 = $675;
     $290 = $676;
    }
    $680 = (($666) + 4|0);
    $681 = HEAP8[$680>>0]|0;
    $682 = $681&1;
    do {
     if ($682) {
      $683 = HEAP32[$666>>2]|0;
      $684 = $303;
      $685 = (($684) + 8|0);
      $282 = $685;
      $686 = $282;
      $286 = $683;
      $287 = $686;
      $687 = $286;
      $688 = $287;
      ;HEAP8[$285+0>>0]=HEAP8[$288+0>>0]|0;
      $283 = $687;
      $284 = $688;
      $689 = $284;
      __THREW__ = 0;
      invoke_vi(415,($689|0));
      $690 = __THREW__; __THREW__ = 0;
      $691 = $690&1;
      if ($691) {
       $677 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $678 = tempRet0;
       $304 = $677;
       $305 = $678;
       $679 = $304;
       ___cxa_call_unexpected(($679|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $692 = $303;
    $693 = ($692|0)!=(0|0);
    if ($693) {
     $694 = HEAP32[$666>>2]|0;
     $695 = $303;
     $298 = $694;
     $299 = $695;
     $300 = 1;
     $696 = $298;
     $697 = $299;
     $698 = $300;
     $295 = $696;
     $296 = $697;
     $297 = $698;
     $699 = $296;
     __ZdlPv($699);
    }
   }
   $700 = $327;
   $701 = $328;
   ___resumeException($700|0);
   // unreachable;
  }
 } while(0);
 $215 = $__h;
 $380 = $215;
 $214 = $380;
 $381 = $214;
 $213 = $381;
 $382 = $213;
 $383 = (($382) + 4|0);
 $384 = (($383) + 4|0);
 HEAP8[$384>>0] = 1;
 $385 = $__na;
 $212 = $__h;
 $386 = $212;
 $211 = $386;
 $387 = $211;
 $210 = $387;
 $388 = $210;
 $389 = HEAP32[$388>>2]|0;
 $390 = (($389) + 8|0);
 $391 = (($390) + 12|0);
 $209 = $391;
 $392 = $209;
 $173 = $385;
 $174 = $392;
 $393 = $174;
 $394 = ($393|0)==(0|0);
 if (!($394)) {
  HEAP32[$393>>2] = 0;
 }
 $172 = $__h;
 $395 = $172;
 $171 = $395;
 $396 = $171;
 $170 = $396;
 $397 = $170;
 $398 = (($397) + 4|0);
 $399 = (($398) + 5|0);
 HEAP8[$399>>0] = 1;
 $166 = $__h;
 $400 = $166;
 $164 = $169;
 $165 = $400;
 $401 = $164;
 $402 = $165;
 $162 = $401;
 $163 = $402;
 $403 = $162;
 $404 = $163;
 HEAP32[$403>>2] = $404;
 ;HEAP8[$161+0>>0]=HEAP8[$169+0>>0]|0;HEAP8[$161+1>>0]=HEAP8[$169+1>>0]|0;HEAP8[$161+2>>0]=HEAP8[$169+2>>0]|0;HEAP8[$161+3>>0]=HEAP8[$169+3>>0]|0;
 $160 = $168;
 $405 = $160;
 ;HEAP8[$__u1$i$i+0>>0]=HEAP8[$161+0>>0]|0;HEAP8[$__u1$i$i+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$__u1$i$i+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$__u1$i$i+3>>0]=HEAP8[$161+3>>0]|0;
 $158 = $405;
 $406 = $158;
 $157 = $__u1$i$i;
 $407 = $157;
 $408 = HEAP32[$407>>2]|0;
 $138 = $408;
 $409 = $138;
 $137 = $409;
 $410 = $137;
 $136 = $410;
 $411 = $136;
 $412 = HEAP32[$411>>2]|0;
 $__t$i$i$i$i = $412;
 $135 = $409;
 $413 = $135;
 $134 = $413;
 $414 = $134;
 HEAP32[$414>>2] = 0;
 $415 = $__t$i$i$i$i;
 $139 = $__u1$i$i;
 $416 = $139;
 $417 = HEAP32[$416>>2]|0;
 $142 = $417;
 $418 = $142;
 $141 = $418;
 $419 = $141;
 $140 = $419;
 $420 = $140;
 $421 = (($420) + 4|0);
 $143 = $421;
 $422 = $143;
 ;HEAP32[$159+0>>2]=HEAP32[$422+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$422+4>>2]|0;
 ;HEAP8[$156+0>>0]=HEAP8[$159+0>>0]|0;HEAP8[$156+1>>0]=HEAP8[$159+1>>0]|0;HEAP8[$156+2>>0]=HEAP8[$159+2>>0]|0;HEAP8[$156+3>>0]=HEAP8[$159+3>>0]|0;HEAP8[$156+4>>0]=HEAP8[$159+4>>0]|0;HEAP8[$156+5>>0]=HEAP8[$159+5>>0]|0;HEAP8[$156+6>>0]=HEAP8[$159+6>>0]|0;HEAP8[$156+7>>0]=HEAP8[$159+7>>0]|0;
 $154 = $406;
 $155 = $415;
 $423 = $154;
 $424 = $155;
 ;HEAP8[$__t21$i$i$i$i+0>>0]=HEAP8[$156+0>>0]|0;HEAP8[$__t21$i$i$i$i+1>>0]=HEAP8[$156+1>>0]|0;HEAP8[$__t21$i$i$i$i+2>>0]=HEAP8[$156+2>>0]|0;HEAP8[$__t21$i$i$i$i+3>>0]=HEAP8[$156+3>>0]|0;HEAP8[$__t21$i$i$i$i+4>>0]=HEAP8[$156+4>>0]|0;HEAP8[$__t21$i$i$i$i+5>>0]=HEAP8[$156+5>>0]|0;HEAP8[$__t21$i$i$i$i+6>>0]=HEAP8[$156+6>>0]|0;HEAP8[$__t21$i$i$i$i+7>>0]=HEAP8[$156+7>>0]|0;
 $151 = $423;
 HEAP32[$152>>2] = $424;
 $425 = $151;
 $150 = $152;
 $426 = $150;
 $427 = HEAP32[$426>>2]|0;
 $144 = $__t21$i$i$i$i;
 $428 = $144;
 ;HEAP32[$153+0>>2]=HEAP32[$428+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$428+4>>2]|0;
 ;HEAP8[$149+0>>0]=HEAP8[$153+0>>0]|0;HEAP8[$149+1>>0]=HEAP8[$153+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$153+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$153+3>>0]|0;HEAP8[$149+4>>0]=HEAP8[$153+4>>0]|0;HEAP8[$149+5>>0]=HEAP8[$153+5>>0]|0;HEAP8[$149+6>>0]=HEAP8[$153+6>>0]|0;HEAP8[$149+7>>0]=HEAP8[$153+7>>0]|0;
 $147 = $425;
 HEAP32[$148>>2] = $427;
 $429 = $147;
 $146 = $148;
 $430 = $146;
 $431 = HEAP32[$430>>2]|0;
 HEAP32[$429>>2] = $431;
 $432 = (($429) + 4|0);
 $145 = $149;
 $433 = $145;
 ;HEAP32[$432+0>>2]=HEAP32[$433+0>>2]|0;HEAP32[$432+4>>2]=HEAP32[$433+4>>2]|0;
 $133 = $168;
 $434 = $133;
 $131 = $167;
 $132 = $434;
 $435 = $131;
 $436 = $132;
 $129 = $435;
 $130 = $436;
 $437 = $129;
 $438 = $130;
 HEAP32[$437>>2] = $438;
 ;HEAP8[$128+0>>0]=HEAP8[$167+0>>0]|0;HEAP8[$128+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$167+3>>0]|0;
 $127 = $330;
 $439 = $127;
 ;HEAP8[$__u1$i6$i+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$__u1$i6$i+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$__u1$i6$i+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$__u1$i6$i+3>>0]=HEAP8[$128+3>>0]|0;
 $125 = $439;
 $440 = $125;
 $124 = $__u1$i6$i;
 $441 = $124;
 $442 = HEAP32[$441>>2]|0;
 $105 = $442;
 $443 = $105;
 $104 = $443;
 $444 = $104;
 $103 = $444;
 $445 = $103;
 $446 = HEAP32[$445>>2]|0;
 $__t$i$i$i4$i = $446;
 $102 = $443;
 $447 = $102;
 $101 = $447;
 $448 = $101;
 HEAP32[$448>>2] = 0;
 $449 = $__t$i$i$i4$i;
 $106 = $__u1$i6$i;
 $450 = $106;
 $451 = HEAP32[$450>>2]|0;
 $109 = $451;
 $452 = $109;
 $108 = $452;
 $453 = $108;
 $107 = $453;
 $454 = $107;
 $455 = (($454) + 4|0);
 $110 = $455;
 $456 = $110;
 ;HEAP32[$126+0>>2]=HEAP32[$456+0>>2]|0;HEAP32[$126+4>>2]=HEAP32[$456+4>>2]|0;
 ;HEAP8[$123+0>>0]=HEAP8[$126+0>>0]|0;HEAP8[$123+1>>0]=HEAP8[$126+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$126+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$126+3>>0]|0;HEAP8[$123+4>>0]=HEAP8[$126+4>>0]|0;HEAP8[$123+5>>0]=HEAP8[$126+5>>0]|0;HEAP8[$123+6>>0]=HEAP8[$126+6>>0]|0;HEAP8[$123+7>>0]=HEAP8[$126+7>>0]|0;
 $121 = $440;
 $122 = $449;
 $457 = $121;
 $458 = $122;
 ;HEAP8[$__t21$i$i$i5$i+0>>0]=HEAP8[$123+0>>0]|0;HEAP8[$__t21$i$i$i5$i+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$__t21$i$i$i5$i+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$__t21$i$i$i5$i+3>>0]=HEAP8[$123+3>>0]|0;HEAP8[$__t21$i$i$i5$i+4>>0]=HEAP8[$123+4>>0]|0;HEAP8[$__t21$i$i$i5$i+5>>0]=HEAP8[$123+5>>0]|0;HEAP8[$__t21$i$i$i5$i+6>>0]=HEAP8[$123+6>>0]|0;HEAP8[$__t21$i$i$i5$i+7>>0]=HEAP8[$123+7>>0]|0;
 $118 = $457;
 HEAP32[$119>>2] = $458;
 $459 = $118;
 $117 = $119;
 $460 = $117;
 $461 = HEAP32[$460>>2]|0;
 $111 = $__t21$i$i$i5$i;
 $462 = $111;
 ;HEAP32[$120+0>>2]=HEAP32[$462+0>>2]|0;HEAP32[$120+4>>2]=HEAP32[$462+4>>2]|0;
 ;HEAP8[$116+0>>0]=HEAP8[$120+0>>0]|0;HEAP8[$116+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$120+3>>0]|0;HEAP8[$116+4>>0]=HEAP8[$120+4>>0]|0;HEAP8[$116+5>>0]=HEAP8[$120+5>>0]|0;HEAP8[$116+6>>0]=HEAP8[$120+6>>0]|0;HEAP8[$116+7>>0]=HEAP8[$120+7>>0]|0;
 $114 = $459;
 HEAP32[$115>>2] = $461;
 $463 = $114;
 $113 = $115;
 $464 = $113;
 $465 = HEAP32[$464>>2]|0;
 HEAP32[$463>>2] = $465;
 $466 = (($463) + 4|0);
 $112 = $116;
 $467 = $112;
 ;HEAP32[$466+0>>2]=HEAP32[$467+0>>2]|0;HEAP32[$466+4>>2]=HEAP32[$467+4>>2]|0;
 $100 = $168;
 $468 = $100;
 $99 = $468;
 $469 = $99;
 $97 = $469;
 $98 = 0;
 $470 = $97;
 $96 = $470;
 $471 = $96;
 $95 = $471;
 $472 = $95;
 $473 = HEAP32[$472>>2]|0;
 $__tmp$i$i$i15$i = $473;
 $474 = $98;
 $70 = $470;
 $475 = $70;
 $69 = $475;
 $476 = $69;
 HEAP32[$476>>2] = $474;
 $477 = $__tmp$i$i$i15$i;
 $478 = ($477|0)!=(0|0);
 if ($478) {
  $68 = $470;
  $479 = $68;
  $67 = $479;
  $480 = $67;
  $481 = (($480) + 4|0);
  $482 = $__tmp$i$i$i15$i;
  $91 = $481;
  $92 = $482;
  $483 = $91;
  $484 = (($483) + 5|0);
  $485 = HEAP8[$484>>0]|0;
  $486 = $485&1;
  if ($486) {
   $487 = HEAP32[$483>>2]|0;
   $488 = $92;
   $489 = (($488) + 8|0);
   $490 = (($489) + 12|0);
   $90 = $490;
   $491 = $90;
   $81 = $487;
   $82 = $491;
   $492 = $81;
   $493 = $82;
   ;HEAP8[$80+0>>0]=HEAP8[$83+0>>0]|0;
   $78 = $492;
   $79 = $493;
  }
  $497 = (($483) + 4|0);
  $498 = HEAP8[$497>>0]|0;
  $499 = $498&1;
  do {
   if ($499) {
    $500 = HEAP32[$483>>2]|0;
    $501 = $92;
    $502 = (($501) + 8|0);
    $71 = $502;
    $503 = $71;
    $75 = $500;
    $76 = $503;
    $504 = $75;
    $505 = $76;
    ;HEAP8[$74+0>>0]=HEAP8[$77+0>>0]|0;
    $72 = $504;
    $73 = $505;
    $506 = $73;
    __THREW__ = 0;
    invoke_vi(415,($506|0));
    $507 = __THREW__; __THREW__ = 0;
    $508 = $507&1;
    if ($508) {
     $494 = ___cxa_find_matching_catch(-1,-1)|0;
     $495 = tempRet0;
     $93 = $494;
     $94 = $495;
     $496 = $93;
     ___cxa_call_unexpected(($496|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $509 = $92;
  $510 = ($509|0)!=(0|0);
  if ($510) {
   $511 = HEAP32[$483>>2]|0;
   $512 = $92;
   $87 = $511;
   $88 = $512;
   $89 = 1;
   $513 = $87;
   $514 = $88;
   $515 = $89;
   $84 = $513;
   $85 = $514;
   $86 = $515;
   $516 = $85;
   __ZdlPv($516);
  }
 }
 $66 = $330;
 $517 = $66;
 $64 = $329;
 $65 = $517;
 $518 = $64;
 $519 = $65;
 $62 = $518;
 $63 = $519;
 $520 = $62;
 $521 = $63;
 HEAP32[$520>>2] = $521;
 ;HEAP8[$61+0>>0]=HEAP8[$329+0>>0]|0;HEAP8[$61+1>>0]=HEAP8[$329+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$329+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$329+3>>0]|0;
 $60 = $agg$result;
 $522 = $60;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$61+3>>0]|0;
 $58 = $522;
 $523 = $58;
 $57 = $__u1$i;
 $524 = $57;
 $525 = HEAP32[$524>>2]|0;
 $38 = $525;
 $526 = $38;
 $37 = $526;
 $527 = $37;
 $36 = $527;
 $528 = $36;
 $529 = HEAP32[$528>>2]|0;
 $__t$i$i$i = $529;
 $35 = $526;
 $530 = $35;
 $34 = $530;
 $531 = $34;
 HEAP32[$531>>2] = 0;
 $532 = $__t$i$i$i;
 $39 = $__u1$i;
 $533 = $39;
 $534 = HEAP32[$533>>2]|0;
 $42 = $534;
 $535 = $42;
 $41 = $535;
 $536 = $41;
 $40 = $536;
 $537 = $40;
 $538 = (($537) + 4|0);
 $43 = $538;
 $539 = $43;
 ;HEAP32[$59+0>>2]=HEAP32[$539+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$539+4>>2]|0;
 ;HEAP8[$56+0>>0]=HEAP8[$59+0>>0]|0;HEAP8[$56+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$56+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$56+3>>0]=HEAP8[$59+3>>0]|0;HEAP8[$56+4>>0]=HEAP8[$59+4>>0]|0;HEAP8[$56+5>>0]=HEAP8[$59+5>>0]|0;HEAP8[$56+6>>0]=HEAP8[$59+6>>0]|0;HEAP8[$56+7>>0]=HEAP8[$59+7>>0]|0;
 $54 = $523;
 $55 = $532;
 $540 = $54;
 $541 = $55;
 ;HEAP8[$__t21$i$i$i27+0>>0]=HEAP8[$56+0>>0]|0;HEAP8[$__t21$i$i$i27+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$__t21$i$i$i27+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$__t21$i$i$i27+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$__t21$i$i$i27+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$__t21$i$i$i27+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$__t21$i$i$i27+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$__t21$i$i$i27+7>>0]=HEAP8[$56+7>>0]|0;
 $51 = $540;
 HEAP32[$52>>2] = $541;
 $542 = $51;
 $50 = $52;
 $543 = $50;
 $544 = HEAP32[$543>>2]|0;
 $44 = $__t21$i$i$i27;
 $545 = $44;
 ;HEAP32[$53+0>>2]=HEAP32[$545+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$545+4>>2]|0;
 ;HEAP8[$49+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$53+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$53+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$53+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$53+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$53+7>>0]|0;
 $47 = $542;
 HEAP32[$48>>2] = $544;
 $546 = $47;
 $46 = $48;
 $547 = $46;
 $548 = HEAP32[$547>>2]|0;
 HEAP32[$546>>2] = $548;
 $549 = (($546) + 4|0);
 $45 = $49;
 $550 = $45;
 ;HEAP32[$549+0>>2]=HEAP32[$550+0>>2]|0;HEAP32[$549+4>>2]=HEAP32[$550+4>>2]|0;
 $33 = $330;
 $551 = $33;
 $32 = $551;
 $552 = $32;
 $30 = $552;
 $31 = 0;
 $553 = $30;
 $29 = $553;
 $554 = $29;
 $28 = $554;
 $555 = $28;
 $556 = HEAP32[$555>>2]|0;
 $__tmp$i$i$i36 = $556;
 $557 = $31;
 $3 = $553;
 $558 = $3;
 $2 = $558;
 $559 = $2;
 HEAP32[$559>>2] = $557;
 $560 = $__tmp$i$i$i36;
 $561 = ($560|0)!=(0|0);
 if ($561) {
  $1 = $553;
  $562 = $1;
  $0 = $562;
  $563 = $0;
  $564 = (($563) + 4|0);
  $565 = $__tmp$i$i$i36;
  $24 = $564;
  $25 = $565;
  $566 = $24;
  $567 = (($566) + 5|0);
  $568 = HEAP8[$567>>0]|0;
  $569 = $568&1;
  if ($569) {
   $570 = HEAP32[$566>>2]|0;
   $571 = $25;
   $572 = (($571) + 8|0);
   $573 = (($572) + 12|0);
   $23 = $573;
   $574 = $23;
   $14 = $570;
   $15 = $574;
   $575 = $14;
   $576 = $15;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $11 = $575;
   $12 = $576;
  }
  $580 = (($566) + 4|0);
  $581 = HEAP8[$580>>0]|0;
  $582 = $581&1;
  do {
   if ($582) {
    $583 = HEAP32[$566>>2]|0;
    $584 = $25;
    $585 = (($584) + 8|0);
    $4 = $585;
    $586 = $4;
    $8 = $583;
    $9 = $586;
    $587 = $8;
    $588 = $9;
    ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
    $5 = $587;
    $6 = $588;
    $589 = $6;
    __THREW__ = 0;
    invoke_vi(415,($589|0));
    $590 = __THREW__; __THREW__ = 0;
    $591 = $590&1;
    if ($591) {
     $577 = ___cxa_find_matching_catch(-1,-1)|0;
     $578 = tempRet0;
     $26 = $577;
     $27 = $578;
     $579 = $26;
     ___cxa_call_unexpected(($579|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $592 = $25;
  $593 = ($592|0)!=(0|0);
  if ($593) {
   $594 = HEAP32[$566>>2]|0;
   $595 = $25;
   $20 = $594;
   $21 = $595;
   $22 = 1;
   $596 = $20;
   $597 = $21;
   $598 = $22;
   $17 = $596;
   $18 = $597;
   $19 = $598;
   $599 = $18;
   __ZdlPv($599);
  }
 }
 $331 = 1;
 $208 = $__h;
 $600 = $208;
 $207 = $600;
 $601 = $207;
 $205 = $601;
 $206 = 0;
 $602 = $205;
 $204 = $602;
 $603 = $204;
 $203 = $603;
 $604 = $203;
 $605 = HEAP32[$604>>2]|0;
 $__tmp$i$i$i10 = $605;
 $606 = $206;
 $178 = $602;
 $607 = $178;
 $177 = $607;
 $608 = $177;
 HEAP32[$608>>2] = $606;
 $609 = $__tmp$i$i$i10;
 $610 = ($609|0)!=(0|0);
 if (!($610)) {
  STACKTOP = sp;return;
 }
 $176 = $602;
 $611 = $176;
 $175 = $611;
 $612 = $175;
 $613 = (($612) + 4|0);
 $614 = $__tmp$i$i$i10;
 $199 = $613;
 $200 = $614;
 $615 = $199;
 $616 = (($615) + 5|0);
 $617 = HEAP8[$616>>0]|0;
 $618 = $617&1;
 if ($618) {
  $619 = HEAP32[$615>>2]|0;
  $620 = $200;
  $621 = (($620) + 8|0);
  $622 = (($621) + 12|0);
  $198 = $622;
  $623 = $198;
  $189 = $619;
  $190 = $623;
  $624 = $189;
  $625 = $190;
  ;HEAP8[$188+0>>0]=HEAP8[$191+0>>0]|0;
  $186 = $624;
  $187 = $625;
 }
 $629 = (($615) + 4|0);
 $630 = HEAP8[$629>>0]|0;
 $631 = $630&1;
 do {
  if ($631) {
   $632 = HEAP32[$615>>2]|0;
   $633 = $200;
   $634 = (($633) + 8|0);
   $179 = $634;
   $635 = $179;
   $183 = $632;
   $184 = $635;
   $636 = $183;
   $637 = $184;
   ;HEAP8[$182+0>>0]=HEAP8[$185+0>>0]|0;
   $180 = $636;
   $181 = $637;
   $638 = $181;
   __THREW__ = 0;
   invoke_vi(415,($638|0));
   $639 = __THREW__; __THREW__ = 0;
   $640 = $639&1;
   if ($640) {
    $626 = ___cxa_find_matching_catch(-1,-1)|0;
    $627 = tempRet0;
    $201 = $626;
    $202 = $627;
    $628 = $201;
    ___cxa_call_unexpected(($628|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $641 = $200;
 $642 = ($641|0)!=(0|0);
 if ($642) {
  $643 = HEAP32[$615>>2]|0;
  $644 = $200;
  $195 = $643;
  $196 = $644;
  $197 = 1;
  $645 = $195;
  $646 = $196;
  $647 = $197;
  $192 = $645;
  $193 = $646;
  $194 = $647;
  $648 = $193;
  __ZdlPv($648);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0;
 var $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $5 = sp + 12|0;
 $16 = sp + 60|0;
 $107 = sp;
 $110 = sp + 757|0;
 $137 = sp + 556|0;
 $151 = sp + 612|0;
 $__inserted = sp + 758|0;
 $177 = sp + 120|0;
 $178 = sp + 4|0;
 $179 = sp + 356|0;
 $180 = sp + 716|0;
 $181 = sp + 436|0;
 $182 = sp + 448|0;
 $183 = sp + 296|0;
 $175 = $this;
 $176 = $__nd;
 $184 = $175;
 $174 = $184;
 $185 = $174;
 $186 = (($185) + 12|0);
 $173 = $186;
 $187 = $173;
 $172 = $187;
 $188 = $172;
 $189 = $176;
 $190 = (($189) + 8|0);
 $118 = $188;
 $119 = $190;
 $191 = $118;
 $192 = $119;
 $193 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($191,$192)|0);
 $194 = $176;
 $195 = (($194) + 4|0);
 HEAP32[$195>>2] = $193;
 $117 = $184;
 $196 = $117;
 $116 = $196;
 $197 = $116;
 $115 = $197;
 $198 = $115;
 $114 = $198;
 $199 = $114;
 $200 = (($199) + 4|0);
 $113 = $200;
 $201 = $113;
 $112 = $201;
 $202 = $112;
 $111 = $202;
 $203 = $111;
 $204 = HEAP32[$203>>2]|0;
 $__bc = $204;
 HEAP8[$__inserted>>0] = 0;
 $205 = $__bc;
 $206 = ($205|0)!=(0);
 if ($206) {
  $207 = $176;
  $208 = (($207) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $__bc;
  $99 = $209;
  $100 = $210;
  $211 = $100;
  $212 = $100;
  $213 = (($212) - 1)|0;
  $214 = $211 & $213;
  $215 = ($214|0)!=(0);
  if ($215) {
   $220 = $99;
   $221 = $100;
   $222 = (($220>>>0) % ($221>>>0))&-1;
   $223 = $222;
  } else {
   $216 = $99;
   $217 = $100;
   $218 = (($217) - 1)|0;
   $219 = $216 & $218;
   $223 = $219;
  }
  $__chash = $223;
  $224 = $__chash;
  $19 = $184;
  $20 = $224;
  $225 = $19;
  $226 = $20;
  $18 = $225;
  $227 = $18;
  $17 = $227;
  $228 = $17;
  $229 = HEAP32[$228>>2]|0;
  $230 = (($229) + ($226<<2)|0);
  $231 = HEAP32[$230>>2]|0;
  $__ndptr = $231;
  $232 = $__ndptr;
  $14 = $16;
  $15 = -1;
  $233 = $14;
  $234 = $15;
  $12 = $233;
  $13 = $234;
  $235 = $12;
  HEAP32[$235>>2] = 0;
  $236 = HEAP32[$16>>2]|0;
  HEAP32[$177>>2] = $236;
  $0 = $177;
  $237 = ($232|0)!=(0|0);
  do {
   if ($237) {
    $238 = $__ndptr;
    $239 = HEAP32[$238>>2]|0;
    $__ndptr = $239;
    L9: while(1) {
     $240 = $__ndptr;
     $3 = $5;
     $4 = -1;
     $241 = $3;
     $242 = $4;
     $1 = $241;
     $2 = $242;
     $243 = $1;
     HEAP32[$243>>2] = 0;
     $244 = HEAP32[$5>>2]|0;
     HEAP32[$178>>2] = $244;
     $6 = $178;
     $245 = ($240|0)!=(0|0);
     if ($245) {
      $246 = $__ndptr;
      $247 = (($246) + 4|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $__bc;
      $7 = $248;
      $8 = $249;
      $250 = $8;
      $251 = $8;
      $252 = (($251) - 1)|0;
      $253 = $250 & $252;
      $254 = ($253|0)!=(0);
      if ($254) {
       $259 = $7;
       $260 = $8;
       $261 = (($259>>>0) % ($260>>>0))&-1;
       $264 = $261;
      } else {
       $255 = $7;
       $256 = $8;
       $257 = (($256) - 1)|0;
       $258 = $255 & $257;
       $264 = $258;
      }
      $262 = $__chash;
      $263 = ($264|0)==($262|0);
      $586 = $263;
     } else {
      $586 = 0;
     }
     if (!($586)) {
      label = 41;
      break;
     }
     $11 = $184;
     $265 = $11;
     $266 = (($265) + 16|0);
     $10 = $266;
     $267 = $10;
     $9 = $267;
     $268 = $9;
     $269 = $__ndptr;
     $270 = (($269) + 8|0);
     $271 = $176;
     $272 = (($271) + 8|0);
     $83 = $268;
     $84 = $270;
     $85 = $272;
     $273 = $83;
     $274 = $84;
     $275 = $85;
     $80 = $273;
     $81 = $274;
     $82 = $275;
     $276 = $81;
     $277 = $82;
     $76 = $276;
     $77 = $277;
     $278 = $76;
     $74 = $278;
     $279 = $74;
     $73 = $279;
     $280 = $73;
     $72 = $280;
     $281 = $72;
     $71 = $281;
     $282 = $71;
     $283 = HEAP8[$282>>0]|0;
     $284 = $283&255;
     $285 = $284 & 1;
     $286 = ($285|0)!=(0);
     if ($286) {
      $67 = $279;
      $287 = $67;
      $66 = $287;
      $288 = $66;
      $65 = $288;
      $289 = $65;
      $290 = (($289) + 4|0);
      $291 = HEAP32[$290>>2]|0;
      $298 = $291;
     } else {
      $70 = $279;
      $292 = $70;
      $69 = $292;
      $293 = $69;
      $68 = $293;
      $294 = $68;
      $295 = HEAP8[$294>>0]|0;
      $296 = $295&255;
      $297 = $296 >> 1;
      $298 = $297;
     }
     $__lhs_sz$i$i$i = $298;
     $299 = $__lhs_sz$i$i$i;
     $300 = $77;
     $61 = $300;
     $301 = $61;
     $60 = $301;
     $302 = $60;
     $59 = $302;
     $303 = $59;
     $58 = $303;
     $304 = $58;
     $305 = HEAP8[$304>>0]|0;
     $306 = $305&255;
     $307 = $306 & 1;
     $308 = ($307|0)!=(0);
     if ($308) {
      $54 = $301;
      $309 = $54;
      $53 = $309;
      $310 = $53;
      $52 = $310;
      $311 = $52;
      $312 = (($311) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      $321 = $313;
     } else {
      $57 = $301;
      $314 = $57;
      $56 = $314;
      $315 = $56;
      $55 = $315;
      $316 = $55;
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = $318 >> 1;
      $321 = $319;
     }
     $320 = ($299|0)!=($321|0);
     do {
      if ($320) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $322 = $76;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $31 = $325;
       $326 = $31;
       $30 = $326;
       $327 = $30;
       $328 = HEAP8[$327>>0]|0;
       $329 = $328&255;
       $330 = $329 & 1;
       $331 = ($330|0)!=(0);
       if ($331) {
        $24 = $324;
        $332 = $24;
        $23 = $332;
        $333 = $23;
        $22 = $333;
        $334 = $22;
        $335 = (($334) + 8|0);
        $336 = HEAP32[$335>>2]|0;
        $343 = $336;
       } else {
        $29 = $324;
        $337 = $29;
        $28 = $337;
        $338 = $28;
        $27 = $338;
        $339 = $27;
        $340 = (($339) + 1|0);
        $26 = $340;
        $341 = $26;
        $25 = $341;
        $342 = $25;
        $343 = $342;
       }
       $21 = $343;
       $344 = $21;
       $__lp$i$i$i = $344;
       $345 = $77;
       $48 = $345;
       $346 = $48;
       $47 = $346;
       $347 = $47;
       $46 = $347;
       $348 = $46;
       $45 = $348;
       $349 = $45;
       $44 = $349;
       $350 = $44;
       $351 = HEAP8[$350>>0]|0;
       $352 = $351&255;
       $353 = $352 & 1;
       $354 = ($353|0)!=(0);
       if ($354) {
        $38 = $347;
        $355 = $38;
        $37 = $355;
        $356 = $37;
        $36 = $356;
        $357 = $36;
        $358 = (($357) + 8|0);
        $359 = HEAP32[$358>>2]|0;
        $366 = $359;
       } else {
        $43 = $347;
        $360 = $43;
        $42 = $360;
        $361 = $42;
        $41 = $361;
        $362 = $41;
        $363 = (($362) + 1|0);
        $40 = $363;
        $364 = $40;
        $39 = $364;
        $365 = $39;
        $366 = $365;
       }
       $35 = $366;
       $367 = $35;
       $__rp$i$i$i = $367;
       $368 = $76;
       $51 = $368;
       $369 = $51;
       $50 = $369;
       $370 = $50;
       $49 = $370;
       $371 = $49;
       $372 = HEAP8[$371>>0]|0;
       $373 = $372&255;
       $374 = $373 & 1;
       $375 = ($374|0)!=(0);
       if ($375) {
        $376 = $__lp$i$i$i;
        $377 = $__rp$i$i$i;
        $378 = $__lhs_sz$i$i$i;
        $62 = $376;
        $63 = $377;
        $64 = $378;
        $379 = $62;
        $380 = $63;
        $381 = $64;
        __THREW__ = 0;
        $382 = (invoke_iiii(440,($379|0),($380|0),($381|0))|0);
        $383 = __THREW__; __THREW__ = 0;
        $384 = $383&1;
        if ($384) {
         label = 30;
         break L9;
        }
        $385 = ($382|0)==(0);
        $$expand_i1_val2 = $385&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $389 = $__lhs_sz$i$i$i;
        $390 = ($389|0)!=(0);
        if (!($390)) {
         label = 36;
         break;
        }
        $391 = $__lp$i$i$i;
        $392 = HEAP8[$391>>0]|0;
        $393 = $392 << 24 >> 24;
        $394 = $__rp$i$i$i;
        $395 = HEAP8[$394>>0]|0;
        $396 = $395 << 24 >> 24;
        $397 = ($393|0)!=($396|0);
        if ($397) {
         label = 34;
         break;
        }
        $398 = $__lhs_sz$i$i$i;
        $399 = (($398) + -1)|0;
        $__lhs_sz$i$i$i = $399;
        $400 = $__lp$i$i$i;
        $401 = (($400) + 1|0);
        $__lp$i$i$i = $401;
        $402 = $__rp$i$i$i;
        $403 = (($402) + 1|0);
        $__rp$i$i$i = $403;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $405 = $__ndptr;
     $406 = HEAP32[$405>>2]|0;
     $__ndptr = $406;
    }
    if ((label|0) == 30) {
     $386 = ___cxa_find_matching_catch(-1,-1)|0;
     $387 = tempRet0;
     $78 = $386;
     $79 = $387;
     $388 = $78;
     ___cxa_call_unexpected(($388|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $571 = $__ndptr;
     $164 = $183;
     $165 = $571;
     $572 = $164;
     $573 = $165;
     $162 = $572;
     $163 = $573;
     $574 = $162;
     $575 = $163;
     HEAP32[$574>>2] = $575;
     $169 = $agg$result;
     $170 = $183;
     $171 = $__inserted;
     $576 = $169;
     $577 = $171;
     $578 = $170;
     $166 = $576;
     $167 = $578;
     $168 = $577;
     $579 = $166;
     $580 = $167;
     ;HEAP32[$579+0>>2]=HEAP32[$580+0>>2]|0;
     $581 = (($579) + 4|0);
     $582 = $168;
     $583 = HEAP8[$582>>0]|0;
     $584 = $583&1;
     $585 = $584&1;
     HEAP8[$581>>0] = $585;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $88 = $184;
 $407 = $88;
 $408 = (($407) + 12|0);
 $87 = $408;
 $409 = $87;
 $86 = $409;
 $410 = $86;
 $411 = HEAP32[$410>>2]|0;
 $412 = (($411) + 1)|0;
 $413 = (+($412>>>0));
 $414 = $__bc;
 $415 = (+($414>>>0));
 $91 = $184;
 $416 = $91;
 $417 = (($416) + 16|0);
 $90 = $417;
 $418 = $90;
 $89 = $418;
 $419 = $89;
 $420 = +HEAPF32[$419>>2];
 $421 = $415 * $420;
 $422 = $413 > $421;
 if ($422) {
  label = 45;
 } else {
  $423 = $__bc;
  $424 = ($423|0)==(0);
  if ($424) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $425 = $__bc;
  $426 = $425<<1;
  $427 = $__bc;
  $92 = $427;
  $428 = $92;
  $429 = ($428>>>0)>(2);
  if ($429) {
   $430 = $92;
   $431 = $92;
   $432 = (($431) - 1)|0;
   $433 = $430 & $432;
   $434 = ($433|0)!=(0);
   $435 = $434 ^ 1;
   $437 = $435;
  } else {
   $437 = 0;
  }
  $436 = $437 ^ 1;
  $438 = $436&1;
  $439 = (($426) + ($438))|0;
  HEAP32[$179>>2] = $439;
  $95 = $184;
  $440 = $95;
  $441 = (($440) + 12|0);
  $94 = $441;
  $442 = $94;
  $93 = $442;
  $443 = $93;
  $444 = HEAP32[$443>>2]|0;
  $445 = (($444) + 1)|0;
  $446 = (+($445>>>0));
  $98 = $184;
  $447 = $98;
  $448 = (($447) + 16|0);
  $97 = $448;
  $449 = $97;
  $96 = $449;
  $450 = $96;
  $451 = +HEAPF32[$450>>2];
  $452 = $446 / $451;
  $101 = $452;
  $453 = $101;
  $454 = (+Math_ceil((+$453)));
  $455 = (~~(($454))>>>0);
  HEAP32[$180>>2] = $455;
  $108 = $179;
  $109 = $180;
  $456 = $108;
  $457 = $109;
  ;HEAP8[$107+0>>0]=HEAP8[$110+0>>0]|0;
  $105 = $456;
  $106 = $457;
  $458 = $105;
  $459 = $106;
  $102 = $107;
  $103 = $458;
  $104 = $459;
  $460 = $103;
  $461 = HEAP32[$460>>2]|0;
  $462 = $104;
  $463 = HEAP32[$462>>2]|0;
  $464 = ($461>>>0)<($463>>>0);
  if ($464) {
   $465 = $106;
   $468 = $465;
  } else {
   $466 = $105;
   $468 = $466;
  }
  $467 = HEAP32[$468>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($184,$467);
  $126 = $184;
  $469 = $126;
  $125 = $469;
  $470 = $125;
  $124 = $470;
  $471 = $124;
  $123 = $471;
  $472 = $123;
  $473 = (($472) + 4|0);
  $122 = $473;
  $474 = $122;
  $121 = $474;
  $475 = $121;
  $120 = $475;
  $476 = $120;
  $477 = HEAP32[$476>>2]|0;
  $__bc = $477;
  $478 = $176;
  $479 = (($478) + 4|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $__bc;
  $127 = $480;
  $128 = $481;
  $482 = $128;
  $483 = $128;
  $484 = (($483) - 1)|0;
  $485 = $482 & $484;
  $486 = ($485|0)!=(0);
  if ($486) {
   $491 = $127;
   $492 = $128;
   $493 = (($491>>>0) % ($492>>>0))&-1;
   $494 = $493;
  } else {
   $487 = $127;
   $488 = $128;
   $489 = (($488) - 1)|0;
   $490 = $487 & $489;
   $494 = $490;
  }
  $__chash = $494;
 }
 $495 = $__chash;
 $131 = $184;
 $132 = $495;
 $496 = $131;
 $497 = $132;
 $130 = $496;
 $498 = $130;
 $129 = $498;
 $499 = $129;
 $500 = HEAP32[$499>>2]|0;
 $501 = (($500) + ($497<<2)|0);
 $502 = HEAP32[$501>>2]|0;
 $__pn = $502;
 $503 = $__pn;
 $135 = $137;
 $136 = -1;
 $504 = $135;
 $505 = $136;
 $133 = $504;
 $134 = $505;
 $506 = $133;
 HEAP32[$506>>2] = 0;
 $507 = HEAP32[$137>>2]|0;
 HEAP32[$181>>2] = $507;
 $138 = $181;
 $508 = ($503|0)==(0|0);
 if ($508) {
  $509 = (($184) + 8|0);
  $140 = $509;
  $510 = $140;
  $139 = $510;
  $511 = $139;
  $142 = $511;
  $512 = $142;
  $141 = $512;
  $513 = $141;
  $__pn = $513;
  $514 = $__pn;
  $515 = HEAP32[$514>>2]|0;
  $516 = $176;
  HEAP32[$516>>2] = $515;
  $517 = $176;
  $518 = $__pn;
  HEAP32[$518>>2] = $517;
  $519 = $__pn;
  $520 = $__chash;
  $145 = $184;
  $146 = $520;
  $521 = $145;
  $522 = $146;
  $144 = $521;
  $523 = $144;
  $143 = $523;
  $524 = $143;
  $525 = HEAP32[$524>>2]|0;
  $526 = (($525) + ($522<<2)|0);
  HEAP32[$526>>2] = $519;
  $527 = $176;
  $528 = HEAP32[$527>>2]|0;
  $149 = $151;
  $150 = -1;
  $529 = $149;
  $530 = $150;
  $147 = $529;
  $148 = $530;
  $531 = $147;
  HEAP32[$531>>2] = 0;
  $532 = HEAP32[$151>>2]|0;
  HEAP32[$182>>2] = $532;
  $152 = $182;
  $533 = ($528|0)!=(0|0);
  if ($533) {
   $534 = $176;
   $535 = $176;
   $536 = HEAP32[$535>>2]|0;
   $537 = (($536) + 4|0);
   $538 = HEAP32[$537>>2]|0;
   $539 = $__bc;
   $153 = $538;
   $154 = $539;
   $540 = $154;
   $541 = $154;
   $542 = (($541) - 1)|0;
   $543 = $540 & $542;
   $544 = ($543|0)!=(0);
   if ($544) {
    $549 = $153;
    $550 = $154;
    $551 = (($549>>>0) % ($550>>>0))&-1;
    $552 = $551;
   } else {
    $545 = $153;
    $546 = $154;
    $547 = (($546) - 1)|0;
    $548 = $545 & $547;
    $552 = $548;
   }
   $157 = $184;
   $158 = $552;
   $553 = $157;
   $554 = $158;
   $156 = $553;
   $555 = $156;
   $155 = $555;
   $556 = $155;
   $557 = HEAP32[$556>>2]|0;
   $558 = (($557) + ($554<<2)|0);
   HEAP32[$558>>2] = $534;
  }
 } else {
  $559 = $__pn;
  $560 = HEAP32[$559>>2]|0;
  $561 = $176;
  HEAP32[$561>>2] = $560;
  $562 = $176;
  $563 = $__pn;
  HEAP32[$563>>2] = $562;
 }
 $564 = $176;
 $__ndptr = $564;
 $161 = $184;
 $565 = $161;
 $566 = (($565) + 12|0);
 $160 = $566;
 $567 = $160;
 $159 = $567;
 $568 = $159;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($569) + 1)|0;
 HEAP32[$568>>2] = $570;
 HEAP8[$__inserted>>0] = 1;
 $571 = $__ndptr;
 $164 = $183;
 $165 = $571;
 $572 = $164;
 $573 = $165;
 $162 = $572;
 $163 = $573;
 $574 = $162;
 $575 = $163;
 HEAP32[$574>>2] = $575;
 $169 = $agg$result;
 $170 = $183;
 $171 = $__inserted;
 $576 = $169;
 $577 = $171;
 $578 = $170;
 $166 = $576;
 $167 = $578;
 $168 = $577;
 $579 = $166;
 $580 = $167;
 ;HEAP32[$579+0>>2]=HEAP32[$580+0>>2]|0;
 $581 = (($579) + 4|0);
 $582 = $168;
 $583 = HEAP8[$582>>0]|0;
 $584 = $583&1;
 $585 = $584&1;
 HEAP8[$581>>0] = $585;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 76|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = (($49) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 if ($57) {
  $58 = HEAP32[$34>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = $__bc;
 $61 = ($59>>>0)<($60>>>0);
 if ($61) {
  $62 = $__bc;
  $25 = $62;
  $63 = $25;
  $64 = ($63>>>0)>(2);
  if ($64) {
   $65 = $25;
   $66 = $25;
   $67 = (($66) - 1)|0;
   $68 = $65 & $67;
   $69 = ($68|0)!=(0);
   $70 = $69 ^ 1;
   $126 = $70;
  } else {
   $126 = 0;
  }
  if ($126) {
   $14 = $36;
   $71 = $14;
   $72 = (($71) + 12|0);
   $13 = $72;
   $73 = $13;
   $12 = $73;
   $74 = $12;
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75>>>0));
   $2 = $36;
   $77 = $2;
   $78 = (($77) + 16|0);
   $1 = $78;
   $79 = $1;
   $0 = $79;
   $80 = $0;
   $81 = +HEAPF32[$80>>2];
   $82 = $76 / $81;
   $3 = $82;
   $83 = $3;
   $84 = (+Math_ceil((+$83)));
   $85 = (~~(($84))>>>0);
   $5 = $85;
   $86 = $5;
   $87 = (($86) - 1)|0;
   $4 = $87;
   $88 = $4;
   $89 = (_llvm_ctlz_i32(($88|0))|0);
   $90 = (32 - ($89))|0;
   $91 = 1 << $90;
   $108 = $91;
  } else {
   $8 = $36;
   $92 = $8;
   $93 = (($92) + 12|0);
   $7 = $93;
   $94 = $7;
   $6 = $94;
   $95 = $6;
   $96 = HEAP32[$95>>2]|0;
   $97 = (+($96>>>0));
   $11 = $36;
   $98 = $11;
   $99 = (($98) + 16|0);
   $10 = $99;
   $100 = $10;
   $9 = $100;
   $101 = $9;
   $102 = +HEAPF32[$101>>2];
   $103 = $97 / $102;
   $15 = $103;
   $104 = $15;
   $105 = (+Math_ceil((+$104)));
   $106 = (~~(($105))>>>0);
   $107 = (__ZNSt3__112__next_primeEj($106)|0);
   $108 = $107;
  }
  HEAP32[$35>>2] = $108;
  $22 = $34;
  $23 = $35;
  $109 = $22;
  $110 = $23;
  ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;
  $19 = $109;
  $20 = $110;
  $111 = $19;
  $112 = $20;
  $16 = $21;
  $17 = $111;
  $18 = $112;
  $113 = $17;
  $114 = HEAP32[$113>>2]|0;
  $115 = $18;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114>>>0)<($116>>>0);
  if ($117) {
   $118 = $20;
   $121 = $118;
  } else {
   $119 = $19;
   $121 = $119;
  }
  $120 = HEAP32[$121>>2]|0;
  HEAP32[$34>>2] = $120;
  $122 = HEAP32[$34>>2]|0;
  $123 = $__bc;
  $124 = ($122>>>0)<($123>>>0);
  if ($124) {
   $125 = HEAP32[$34>>2]|0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($36,$125);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0;
 var $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0;
 $33 = sp + 132|0;
 $47 = sp + 188|0;
 $59 = sp + 236|0;
 $71 = sp + 284|0;
 $81 = sp + 324|0;
 $90 = sp + 728|0;
 $177 = sp + 32|0;
 $178 = sp + 24|0;
 $179 = sp + 716|0;
 $180 = sp + 360|0;
 $181 = sp + 724|0;
 $182 = sp + 612|0;
 $175 = $this;
 $176 = $__nbc;
 $183 = $175;
 $174 = $183;
 $184 = $174;
 $173 = $184;
 $185 = $173;
 $172 = $185;
 $186 = $172;
 $187 = (($186) + 4|0);
 $98 = $187;
 $188 = $98;
 $97 = $188;
 $189 = $97;
 $96 = $189;
 $190 = $96;
 $__npa = $190;
 $191 = $176;
 $192 = ($191>>>0)>(0);
 if ($192) {
  $193 = $__npa;
  $194 = $176;
  $94 = $193;
  $95 = $194;
  $195 = $94;
  $196 = $95;
  $91 = $195;
  $92 = $196;
  $93 = 0;
  $197 = $92;
  $198 = $197<<2;
  $199 = (__Znwj($198)|0);
  $204 = $199;
 } else {
  $88 = $90;
  $89 = -1;
  $200 = $88;
  $201 = $89;
  $86 = $200;
  $87 = $201;
  $202 = $86;
  HEAP32[$202>>2] = 0;
  $203 = HEAP32[$90>>2]|0;
  HEAP32[$177>>2] = $203;
  $0 = $177;
  $204 = 0;
 }
 $21 = $183;
 $22 = $204;
 $205 = $21;
 $20 = $205;
 $206 = $20;
 $19 = $206;
 $207 = $19;
 $208 = HEAP32[$207>>2]|0;
 $__tmp$i = $208;
 $209 = $22;
 $4 = $205;
 $210 = $4;
 $3 = $210;
 $211 = $3;
 HEAP32[$211>>2] = $209;
 $212 = $__tmp$i;
 $213 = ($212|0)!=(0|0);
 if ($213) {
  $2 = $205;
  $214 = $2;
  $1 = $214;
  $215 = $1;
  $216 = (($215) + 4|0);
  $217 = $__tmp$i;
  $17 = $216;
  $18 = $217;
  $218 = $17;
  $16 = $218;
  $219 = $16;
  $15 = $219;
  $220 = $15;
  $14 = $220;
  $221 = $14;
  $222 = $18;
  $7 = $218;
  $223 = $7;
  $6 = $223;
  $224 = $6;
  $5 = $224;
  $225 = $5;
  $226 = HEAP32[$225>>2]|0;
  $11 = $221;
  $12 = $222;
  $13 = $226;
  $227 = $11;
  $228 = $12;
  $229 = $13;
  $8 = $227;
  $9 = $228;
  $10 = $229;
  $230 = $9;
  __ZdlPv($230);
 }
 $231 = $176;
 $25 = $183;
 $232 = $25;
 $24 = $232;
 $233 = $24;
 $23 = $233;
 $234 = $23;
 $235 = (($234) + 4|0);
 $28 = $235;
 $236 = $28;
 $27 = $236;
 $237 = $27;
 $26 = $237;
 $238 = $26;
 HEAP32[$238>>2] = $231;
 $239 = $176;
 $240 = ($239>>>0)>(0);
 if (!($240)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $241 = $__i;
  $242 = $176;
  $243 = ($241>>>0)<($242>>>0);
  if (!($243)) {
   break;
  }
  $31 = $33;
  $32 = -1;
  $244 = $31;
  $245 = $32;
  $29 = $244;
  $30 = $245;
  $246 = $29;
  HEAP32[$246>>2] = 0;
  $247 = HEAP32[$33>>2]|0;
  HEAP32[$178>>2] = $247;
  $34 = $178;
  $248 = $__i;
  $37 = $183;
  $38 = $248;
  $249 = $37;
  $250 = $38;
  $36 = $249;
  $251 = $36;
  $35 = $251;
  $252 = $35;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + ($250<<2)|0);
  HEAP32[$254>>2] = 0;
  $255 = $__i;
  $256 = (($255) + 1)|0;
  $__i = $256;
 }
 $257 = (($183) + 8|0);
 $40 = $257;
 $258 = $40;
 $39 = $258;
 $259 = $39;
 $42 = $259;
 $260 = $42;
 $41 = $260;
 $261 = $41;
 $__pp = $261;
 $262 = $__pp;
 $263 = HEAP32[$262>>2]|0;
 $__cp = $263;
 $264 = $__cp;
 $45 = $47;
 $46 = -1;
 $265 = $45;
 $266 = $46;
 $43 = $265;
 $44 = $266;
 $267 = $43;
 HEAP32[$267>>2] = 0;
 $268 = HEAP32[$47>>2]|0;
 HEAP32[$179>>2] = $268;
 $48 = $179;
 $269 = ($264|0)!=(0|0);
 do {
  if ($269) {
   $270 = $__cp;
   $271 = (($270) + 4|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $176;
   $49 = $272;
   $50 = $273;
   $274 = $50;
   $275 = $50;
   $276 = (($275) - 1)|0;
   $277 = $274 & $276;
   $278 = ($277|0)!=(0);
   if ($278) {
    $283 = $49;
    $284 = $50;
    $285 = (($283>>>0) % ($284>>>0))&-1;
    $286 = $285;
   } else {
    $279 = $49;
    $280 = $50;
    $281 = (($280) - 1)|0;
    $282 = $279 & $281;
    $286 = $282;
   }
   $__chash = $286;
   $287 = $__pp;
   $288 = $__chash;
   $53 = $183;
   $54 = $288;
   $289 = $53;
   $290 = $54;
   $52 = $289;
   $291 = $52;
   $51 = $291;
   $292 = $51;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + ($290<<2)|0);
   HEAP32[$294>>2] = $287;
   $295 = $__chash;
   $__phash = $295;
   $296 = $__cp;
   $__pp = $296;
   $297 = $__cp;
   $298 = HEAP32[$297>>2]|0;
   $__cp = $298;
   L22: while(1) {
    $299 = $__cp;
    $57 = $59;
    $58 = -1;
    $300 = $57;
    $301 = $58;
    $55 = $300;
    $56 = $301;
    $302 = $55;
    HEAP32[$302>>2] = 0;
    $303 = HEAP32[$59>>2]|0;
    HEAP32[$180>>2] = $303;
    $60 = $180;
    $304 = ($299|0)!=(0|0);
    if (!($304)) {
     label = 58;
     break;
    }
    $305 = $__cp;
    $306 = (($305) + 4|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $176;
    $61 = $307;
    $62 = $308;
    $309 = $62;
    $310 = $62;
    $311 = (($310) - 1)|0;
    $312 = $309 & $311;
    $313 = ($312|0)!=(0);
    if ($313) {
     $318 = $61;
     $319 = $62;
     $320 = (($318>>>0) % ($319>>>0))&-1;
     $321 = $320;
    } else {
     $314 = $61;
     $315 = $62;
     $316 = (($315) - 1)|0;
     $317 = $314 & $316;
     $321 = $317;
    }
    $__chash = $321;
    $322 = $__chash;
    $323 = $__phash;
    $324 = ($322|0)==($323|0);
    if ($324) {
     $325 = $__cp;
     $__pp = $325;
    } else {
     $326 = $__chash;
     $65 = $183;
     $66 = $326;
     $327 = $65;
     $328 = $66;
     $64 = $327;
     $329 = $64;
     $63 = $329;
     $330 = $63;
     $331 = HEAP32[$330>>2]|0;
     $332 = (($331) + ($328<<2)|0);
     $333 = HEAP32[$332>>2]|0;
     $69 = $71;
     $70 = -1;
     $334 = $69;
     $335 = $70;
     $67 = $334;
     $68 = $335;
     $336 = $67;
     HEAP32[$336>>2] = 0;
     $337 = HEAP32[$71>>2]|0;
     HEAP32[$181>>2] = $337;
     $72 = $181;
     $338 = ($333|0)==(0|0);
     if ($338) {
      $339 = $__pp;
      $340 = $__chash;
      $75 = $183;
      $76 = $340;
      $341 = $75;
      $342 = $76;
      $74 = $341;
      $343 = $74;
      $73 = $343;
      $344 = $73;
      $345 = HEAP32[$344>>2]|0;
      $346 = (($345) + ($342<<2)|0);
      HEAP32[$346>>2] = $339;
      $347 = $__cp;
      $__pp = $347;
      $348 = $__chash;
      $__phash = $348;
     } else {
      $349 = $__cp;
      $__np = $349;
      while(1) {
       $350 = $__np;
       $351 = HEAP32[$350>>2]|0;
       $79 = $81;
       $80 = -1;
       $352 = $79;
       $353 = $80;
       $77 = $352;
       $78 = $353;
       $354 = $77;
       HEAP32[$354>>2] = 0;
       $355 = HEAP32[$81>>2]|0;
       HEAP32[$182>>2] = $355;
       $82 = $182;
       $356 = ($351|0)!=(0|0);
       if ($356) {
        $85 = $183;
        $357 = $85;
        $358 = (($357) + 16|0);
        $84 = $358;
        $359 = $84;
        $83 = $359;
        $360 = $83;
        $361 = $__cp;
        $362 = (($361) + 8|0);
        $363 = $__np;
        $364 = HEAP32[$363>>2]|0;
        $365 = (($364) + 8|0);
        $161 = $360;
        $162 = $362;
        $163 = $365;
        $366 = $161;
        $367 = $162;
        $368 = $163;
        $158 = $366;
        $159 = $367;
        $160 = $368;
        $369 = $159;
        $370 = $160;
        $154 = $369;
        $155 = $370;
        $371 = $154;
        $152 = $371;
        $372 = $152;
        $151 = $372;
        $373 = $151;
        $150 = $373;
        $374 = $150;
        $149 = $374;
        $375 = $149;
        $376 = HEAP8[$375>>0]|0;
        $377 = $376&255;
        $378 = $377 & 1;
        $379 = ($378|0)!=(0);
        if ($379) {
         $145 = $372;
         $380 = $145;
         $144 = $380;
         $381 = $144;
         $143 = $381;
         $382 = $143;
         $383 = (($382) + 4|0);
         $384 = HEAP32[$383>>2]|0;
         $391 = $384;
        } else {
         $148 = $372;
         $385 = $148;
         $147 = $385;
         $386 = $147;
         $146 = $386;
         $387 = $146;
         $388 = HEAP8[$387>>0]|0;
         $389 = $388&255;
         $390 = $389 >> 1;
         $391 = $390;
        }
        $__lhs_sz$i$i$i = $391;
        $392 = $__lhs_sz$i$i$i;
        $393 = $155;
        $139 = $393;
        $394 = $139;
        $138 = $394;
        $395 = $138;
        $137 = $395;
        $396 = $137;
        $136 = $396;
        $397 = $136;
        $398 = HEAP8[$397>>0]|0;
        $399 = $398&255;
        $400 = $399 & 1;
        $401 = ($400|0)!=(0);
        if ($401) {
         $132 = $394;
         $402 = $132;
         $131 = $402;
         $403 = $131;
         $130 = $403;
         $404 = $130;
         $405 = (($404) + 4|0);
         $406 = HEAP32[$405>>2]|0;
         $414 = $406;
        } else {
         $135 = $394;
         $407 = $135;
         $134 = $407;
         $408 = $134;
         $133 = $408;
         $409 = $133;
         $410 = HEAP8[$409>>0]|0;
         $411 = $410&255;
         $412 = $411 >> 1;
         $414 = $412;
        }
        $413 = ($392|0)!=($414|0);
        do {
         if ($413) {
          $$expand_i1_val = 0;
          $153 = $$expand_i1_val;
         } else {
          $415 = $154;
          $112 = $415;
          $416 = $112;
          $111 = $416;
          $417 = $111;
          $110 = $417;
          $418 = $110;
          $109 = $418;
          $419 = $109;
          $108 = $419;
          $420 = $108;
          $421 = HEAP8[$420>>0]|0;
          $422 = $421&255;
          $423 = $422 & 1;
          $424 = ($423|0)!=(0);
          if ($424) {
           $102 = $417;
           $425 = $102;
           $101 = $425;
           $426 = $101;
           $100 = $426;
           $427 = $100;
           $428 = (($427) + 8|0);
           $429 = HEAP32[$428>>2]|0;
           $436 = $429;
          } else {
           $107 = $417;
           $430 = $107;
           $106 = $430;
           $431 = $106;
           $105 = $431;
           $432 = $105;
           $433 = (($432) + 1|0);
           $104 = $433;
           $434 = $104;
           $103 = $434;
           $435 = $103;
           $436 = $435;
          }
          $99 = $436;
          $437 = $99;
          $__lp$i$i$i = $437;
          $438 = $155;
          $126 = $438;
          $439 = $126;
          $125 = $439;
          $440 = $125;
          $124 = $440;
          $441 = $124;
          $123 = $441;
          $442 = $123;
          $122 = $442;
          $443 = $122;
          $444 = HEAP8[$443>>0]|0;
          $445 = $444&255;
          $446 = $445 & 1;
          $447 = ($446|0)!=(0);
          if ($447) {
           $116 = $440;
           $448 = $116;
           $115 = $448;
           $449 = $115;
           $114 = $449;
           $450 = $114;
           $451 = (($450) + 8|0);
           $452 = HEAP32[$451>>2]|0;
           $459 = $452;
          } else {
           $121 = $440;
           $453 = $121;
           $120 = $453;
           $454 = $120;
           $119 = $454;
           $455 = $119;
           $456 = (($455) + 1|0);
           $118 = $456;
           $457 = $118;
           $117 = $457;
           $458 = $117;
           $459 = $458;
          }
          $113 = $459;
          $460 = $113;
          $__rp$i$i$i = $460;
          $461 = $154;
          $129 = $461;
          $462 = $129;
          $128 = $462;
          $463 = $128;
          $127 = $463;
          $464 = $127;
          $465 = HEAP8[$464>>0]|0;
          $466 = $465&255;
          $467 = $466 & 1;
          $468 = ($467|0)!=(0);
          if ($468) {
           $469 = $__lp$i$i$i;
           $470 = $__rp$i$i$i;
           $471 = $__lhs_sz$i$i$i;
           $140 = $469;
           $141 = $470;
           $142 = $471;
           $472 = $140;
           $473 = $141;
           $474 = $142;
           __THREW__ = 0;
           $475 = (invoke_iiii(440,($472|0),($473|0),($474|0))|0);
           $476 = __THREW__; __THREW__ = 0;
           $477 = $476&1;
           if ($477) {
            label = 43;
            break L22;
           }
           $478 = ($475|0)==(0);
           $$expand_i1_val2 = $478&1;
           $153 = $$expand_i1_val2;
           break;
          }
          while(1) {
           $482 = $__lhs_sz$i$i$i;
           $483 = ($482|0)!=(0);
           if (!($483)) {
            label = 49;
            break;
           }
           $484 = $__lp$i$i$i;
           $485 = HEAP8[$484>>0]|0;
           $486 = $485 << 24 >> 24;
           $487 = $__rp$i$i$i;
           $488 = HEAP8[$487>>0]|0;
           $489 = $488 << 24 >> 24;
           $490 = ($486|0)!=($489|0);
           if ($490) {
            label = 47;
            break;
           }
           $491 = $__lhs_sz$i$i$i;
           $492 = (($491) + -1)|0;
           $__lhs_sz$i$i$i = $492;
           $493 = $__lp$i$i$i;
           $494 = (($493) + 1|0);
           $__lp$i$i$i = $494;
           $495 = $__rp$i$i$i;
           $496 = (($495) + 1|0);
           $__rp$i$i$i = $496;
          }
          if ((label|0) == 47) {
           label = 0;
           $$expand_i1_val4 = 0;
           $153 = $$expand_i1_val4;
           break;
          }
          else if ((label|0) == 49) {
           label = 0;
           $$expand_i1_val6 = 1;
           $153 = $$expand_i1_val6;
           break;
          }
         }
        } while(0);
        $$pre_trunc = $153;
        $497 = $$pre_trunc&1;
        $524 = $497;
       } else {
        $524 = 0;
       }
       if (!($524)) {
        break;
       }
       $498 = $__np;
       $499 = HEAP32[$498>>2]|0;
       $__np = $499;
      }
      $500 = $__np;
      $501 = HEAP32[$500>>2]|0;
      $502 = $__pp;
      HEAP32[$502>>2] = $501;
      $503 = $__chash;
      $166 = $183;
      $167 = $503;
      $504 = $166;
      $505 = $167;
      $165 = $504;
      $506 = $165;
      $164 = $506;
      $507 = $164;
      $508 = HEAP32[$507>>2]|0;
      $509 = (($508) + ($505<<2)|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = HEAP32[$510>>2]|0;
      $512 = $__np;
      HEAP32[$512>>2] = $511;
      $513 = $__cp;
      $514 = $__chash;
      $170 = $183;
      $171 = $514;
      $515 = $170;
      $516 = $171;
      $169 = $515;
      $517 = $169;
      $168 = $517;
      $518 = $168;
      $519 = HEAP32[$518>>2]|0;
      $520 = (($519) + ($516<<2)|0);
      $521 = HEAP32[$520>>2]|0;
      HEAP32[$521>>2] = $513;
     }
    }
    $522 = $__pp;
    $523 = HEAP32[$522>>2]|0;
    $__cp = $523;
   }
   if ((label|0) == 43) {
    $479 = ___cxa_find_matching_catch(-1,-1)|0;
    $480 = tempRet0;
    $156 = $479;
    $157 = $480;
    $481 = $156;
    ___cxa_call_unexpected(($481|0));
    // unreachable;
   }
   else if ((label|0) == 58) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0;
 var $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $8 = sp + 232|0;
 $14 = sp + 52|0;
 $110 = sp + 448|0;
 $112 = sp + 20|0;
 $118 = sp + 492|0;
 $119 = sp + 340|0;
 $116 = $this;
 $117 = $__k;
 $120 = $116;
 $115 = $120;
 $121 = $115;
 $122 = (($121) + 12|0);
 $114 = $122;
 $123 = $114;
 $113 = $123;
 $124 = $113;
 $125 = $117;
 $30 = $124;
 $31 = $125;
 $126 = $30;
 $127 = $31;
 $128 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($126,$127)|0);
 $__hash = $128;
 $29 = $120;
 $129 = $29;
 $28 = $129;
 $130 = $28;
 $27 = $130;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = (($132) + 4|0);
 $25 = $133;
 $134 = $25;
 $24 = $134;
 $135 = $24;
 $23 = $135;
 $136 = $23;
 $137 = HEAP32[$136>>2]|0;
 $__bc = $137;
 $138 = $__bc;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $__hash;
  $141 = $__bc;
  $21 = $140;
  $22 = $141;
  $142 = $22;
  $143 = $22;
  $144 = (($143) - 1)|0;
  $145 = $142 & $144;
  $146 = ($145|0)!=(0);
  if ($146) {
   $151 = $21;
   $152 = $22;
   $153 = (($151>>>0) % ($152>>>0))&-1;
   $154 = $153;
  } else {
   $147 = $21;
   $148 = $22;
   $149 = (($148) - 1)|0;
   $150 = $147 & $149;
   $154 = $150;
  }
  $__chash = $154;
  $155 = $__chash;
  $2 = $120;
  $3 = $155;
  $156 = $2;
  $157 = $3;
  $1 = $156;
  $158 = $1;
  $0 = $158;
  $159 = $0;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($157<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $__nd = $162;
  $163 = $__nd;
  $6 = $8;
  $7 = -1;
  $164 = $6;
  $165 = $7;
  $4 = $164;
  $5 = $165;
  $166 = $4;
  HEAP32[$166>>2] = 0;
  $167 = HEAP32[$8>>2]|0;
  HEAP32[$118>>2] = $167;
  $9 = $118;
  $168 = ($163|0)!=(0|0);
  do {
   if ($168) {
    $169 = $__nd;
    $170 = HEAP32[$169>>2]|0;
    $__nd = $170;
    L9: while(1) {
     $171 = $__nd;
     $12 = $14;
     $13 = -1;
     $172 = $12;
     $173 = $13;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     HEAP32[$174>>2] = 0;
     $175 = HEAP32[$14>>2]|0;
     HEAP32[$119>>2] = $175;
     $15 = $119;
     $176 = ($171|0)!=(0|0);
     if ($176) {
      $177 = $__nd;
      $178 = (($177) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $__bc;
      $16 = $179;
      $17 = $180;
      $181 = $17;
      $182 = $17;
      $183 = (($182) - 1)|0;
      $184 = $181 & $183;
      $185 = ($184|0)!=(0);
      if ($185) {
       $190 = $16;
       $191 = $17;
       $192 = (($190>>>0) % ($191>>>0))&-1;
       $195 = $192;
      } else {
       $186 = $16;
       $187 = $17;
       $188 = (($187) - 1)|0;
       $189 = $186 & $188;
       $195 = $189;
      }
      $193 = $__chash;
      $194 = ($195|0)==($193|0);
      $350 = $194;
     } else {
      $350 = 0;
     }
     if (!($350)) {
      label = 41;
      break;
     }
     $20 = $120;
     $196 = $20;
     $197 = (($196) + 16|0);
     $19 = $197;
     $198 = $19;
     $18 = $198;
     $199 = $18;
     $200 = $__nd;
     $201 = (($200) + 8|0);
     $202 = $117;
     $94 = $199;
     $95 = $201;
     $96 = $202;
     $203 = $94;
     $204 = $95;
     $205 = $96;
     $91 = $203;
     $92 = $204;
     $93 = $205;
     $206 = $92;
     $207 = $93;
     $87 = $206;
     $88 = $207;
     $208 = $87;
     $85 = $208;
     $209 = $85;
     $84 = $209;
     $210 = $84;
     $83 = $210;
     $211 = $83;
     $82 = $211;
     $212 = $82;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $214 & 1;
     $216 = ($215|0)!=(0);
     if ($216) {
      $78 = $209;
      $217 = $78;
      $77 = $217;
      $218 = $77;
      $76 = $218;
      $219 = $76;
      $220 = (($219) + 4|0);
      $221 = HEAP32[$220>>2]|0;
      $228 = $221;
     } else {
      $81 = $209;
      $222 = $81;
      $80 = $222;
      $223 = $80;
      $79 = $223;
      $224 = $79;
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = $226 >> 1;
      $228 = $227;
     }
     $__lhs_sz$i$i$i = $228;
     $229 = $__lhs_sz$i$i$i;
     $230 = $88;
     $72 = $230;
     $231 = $72;
     $71 = $231;
     $232 = $71;
     $70 = $232;
     $233 = $70;
     $69 = $233;
     $234 = $69;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $65 = $231;
      $239 = $65;
      $64 = $239;
      $240 = $64;
      $63 = $240;
      $241 = $63;
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $251 = $243;
     } else {
      $68 = $231;
      $244 = $68;
      $67 = $244;
      $245 = $67;
      $66 = $245;
      $246 = $66;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $251 = $249;
     }
     $250 = ($229|0)!=($251|0);
     do {
      if ($250) {
       $$expand_i1_val = 0;
       $86 = $$expand_i1_val;
      } else {
       $252 = $87;
       $45 = $252;
       $253 = $45;
       $44 = $253;
       $254 = $44;
       $43 = $254;
       $255 = $43;
       $42 = $255;
       $256 = $42;
       $41 = $256;
       $257 = $41;
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       $260 = $259 & 1;
       $261 = ($260|0)!=(0);
       if ($261) {
        $35 = $254;
        $262 = $35;
        $34 = $262;
        $263 = $34;
        $33 = $263;
        $264 = $33;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $273 = $266;
       } else {
        $40 = $254;
        $267 = $40;
        $39 = $267;
        $268 = $39;
        $38 = $268;
        $269 = $38;
        $270 = (($269) + 1|0);
        $37 = $270;
        $271 = $37;
        $36 = $271;
        $272 = $36;
        $273 = $272;
       }
       $32 = $273;
       $274 = $32;
       $__lp$i$i$i = $274;
       $275 = $88;
       $59 = $275;
       $276 = $59;
       $58 = $276;
       $277 = $58;
       $57 = $277;
       $278 = $57;
       $56 = $278;
       $279 = $56;
       $55 = $279;
       $280 = $55;
       $281 = HEAP8[$280>>0]|0;
       $282 = $281&255;
       $283 = $282 & 1;
       $284 = ($283|0)!=(0);
       if ($284) {
        $49 = $277;
        $285 = $49;
        $48 = $285;
        $286 = $48;
        $47 = $286;
        $287 = $47;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $296 = $289;
       } else {
        $54 = $277;
        $290 = $54;
        $53 = $290;
        $291 = $53;
        $52 = $291;
        $292 = $52;
        $293 = (($292) + 1|0);
        $51 = $293;
        $294 = $51;
        $50 = $294;
        $295 = $50;
        $296 = $295;
       }
       $46 = $296;
       $297 = $46;
       $__rp$i$i$i = $297;
       $298 = $87;
       $62 = $298;
       $299 = $62;
       $61 = $299;
       $300 = $61;
       $60 = $300;
       $301 = $60;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302&255;
       $304 = $303 & 1;
       $305 = ($304|0)!=(0);
       if ($305) {
        $306 = $__lp$i$i$i;
        $307 = $__rp$i$i$i;
        $308 = $__lhs_sz$i$i$i;
        $73 = $306;
        $74 = $307;
        $75 = $308;
        $309 = $73;
        $310 = $74;
        $311 = $75;
        __THREW__ = 0;
        $312 = (invoke_iiii(440,($309|0),($310|0),($311|0))|0);
        $313 = __THREW__; __THREW__ = 0;
        $314 = $313&1;
        if ($314) {
         label = 30;
         break L9;
        }
        $315 = ($312|0)==(0);
        $$expand_i1_val2 = $315&1;
        $86 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $319 = $__lhs_sz$i$i$i;
        $320 = ($319|0)!=(0);
        if (!($320)) {
         label = 36;
         break;
        }
        $321 = $__lp$i$i$i;
        $322 = HEAP8[$321>>0]|0;
        $323 = $322 << 24 >> 24;
        $324 = $__rp$i$i$i;
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($323|0)!=($326|0);
        if ($327) {
         label = 34;
         break;
        }
        $328 = $__lhs_sz$i$i$i;
        $329 = (($328) + -1)|0;
        $__lhs_sz$i$i$i = $329;
        $330 = $__lp$i$i$i;
        $331 = (($330) + 1|0);
        $__lp$i$i$i = $331;
        $332 = $__rp$i$i$i;
        $333 = (($332) + 1|0);
        $__rp$i$i$i = $333;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $86 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $86 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $86;
     $334 = $$pre_trunc&1;
     if ($334) {
      label = 38;
      break;
     }
     $340 = $__nd;
     $341 = HEAP32[$340>>2]|0;
     $__nd = $341;
    }
    if ((label|0) == 30) {
     $316 = ___cxa_find_matching_catch(-1,-1)|0;
     $317 = tempRet0;
     $89 = $316;
     $90 = $317;
     $318 = $89;
     ___cxa_call_unexpected(($318|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $335 = $__nd;
     $99 = $agg$result;
     $100 = $335;
     $336 = $99;
     $337 = $100;
     $97 = $336;
     $98 = $337;
     $338 = $97;
     $339 = $98;
     HEAP32[$338>>2] = $339;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $111 = $120;
 $108 = $110;
 $109 = -1;
 $342 = $108;
 $343 = $109;
 $106 = $342;
 $107 = $343;
 $344 = $106;
 HEAP32[$344>>2] = 0;
 $345 = HEAP32[$110>>2]|0;
 HEAP32[$112>>2] = $345;
 $101 = $112;
 $104 = $agg$result;
 $105 = 0;
 $346 = $104;
 $347 = $105;
 $102 = $346;
 $103 = $347;
 $348 = $102;
 $349 = $103;
 HEAP32[$348>>2] = $349;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0;
 var $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $8 = sp + 232|0;
 $14 = sp + 52|0;
 $110 = sp + 448|0;
 $112 = sp + 20|0;
 $118 = sp + 492|0;
 $119 = sp + 340|0;
 $116 = $this;
 $117 = $__k;
 $120 = $116;
 $115 = $120;
 $121 = $115;
 $122 = (($121) + 12|0);
 $114 = $122;
 $123 = $114;
 $113 = $123;
 $124 = $113;
 $125 = $117;
 $30 = $124;
 $31 = $125;
 $126 = $30;
 $127 = $31;
 $128 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($126,$127)|0);
 $__hash = $128;
 $29 = $120;
 $129 = $29;
 $28 = $129;
 $130 = $28;
 $27 = $130;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = (($132) + 4|0);
 $25 = $133;
 $134 = $25;
 $24 = $134;
 $135 = $24;
 $23 = $135;
 $136 = $23;
 $137 = HEAP32[$136>>2]|0;
 $__bc = $137;
 $138 = $__bc;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $__hash;
  $141 = $__bc;
  $21 = $140;
  $22 = $141;
  $142 = $22;
  $143 = $22;
  $144 = (($143) - 1)|0;
  $145 = $142 & $144;
  $146 = ($145|0)!=(0);
  if ($146) {
   $151 = $21;
   $152 = $22;
   $153 = (($151>>>0) % ($152>>>0))&-1;
   $154 = $153;
  } else {
   $147 = $21;
   $148 = $22;
   $149 = (($148) - 1)|0;
   $150 = $147 & $149;
   $154 = $150;
  }
  $__chash = $154;
  $155 = $__chash;
  $2 = $120;
  $3 = $155;
  $156 = $2;
  $157 = $3;
  $1 = $156;
  $158 = $1;
  $0 = $158;
  $159 = $0;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($157<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $__nd = $162;
  $163 = $__nd;
  $6 = $8;
  $7 = -1;
  $164 = $6;
  $165 = $7;
  $4 = $164;
  $5 = $165;
  $166 = $4;
  HEAP32[$166>>2] = 0;
  $167 = HEAP32[$8>>2]|0;
  HEAP32[$118>>2] = $167;
  $9 = $118;
  $168 = ($163|0)!=(0|0);
  do {
   if ($168) {
    $169 = $__nd;
    $170 = HEAP32[$169>>2]|0;
    $__nd = $170;
    L9: while(1) {
     $171 = $__nd;
     $12 = $14;
     $13 = -1;
     $172 = $12;
     $173 = $13;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     HEAP32[$174>>2] = 0;
     $175 = HEAP32[$14>>2]|0;
     HEAP32[$119>>2] = $175;
     $15 = $119;
     $176 = ($171|0)!=(0|0);
     if ($176) {
      $177 = $__nd;
      $178 = (($177) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $__bc;
      $16 = $179;
      $17 = $180;
      $181 = $17;
      $182 = $17;
      $183 = (($182) - 1)|0;
      $184 = $181 & $183;
      $185 = ($184|0)!=(0);
      if ($185) {
       $190 = $16;
       $191 = $17;
       $192 = (($190>>>0) % ($191>>>0))&-1;
       $195 = $192;
      } else {
       $186 = $16;
       $187 = $17;
       $188 = (($187) - 1)|0;
       $189 = $186 & $188;
       $195 = $189;
      }
      $193 = $__chash;
      $194 = ($195|0)==($193|0);
      $350 = $194;
     } else {
      $350 = 0;
     }
     if (!($350)) {
      label = 41;
      break;
     }
     $20 = $120;
     $196 = $20;
     $197 = (($196) + 16|0);
     $19 = $197;
     $198 = $19;
     $18 = $198;
     $199 = $18;
     $200 = $__nd;
     $201 = (($200) + 8|0);
     $202 = $117;
     $94 = $199;
     $95 = $201;
     $96 = $202;
     $203 = $94;
     $204 = $95;
     $205 = $96;
     $91 = $203;
     $92 = $204;
     $93 = $205;
     $206 = $92;
     $207 = $93;
     $87 = $206;
     $88 = $207;
     $208 = $87;
     $85 = $208;
     $209 = $85;
     $84 = $209;
     $210 = $84;
     $83 = $210;
     $211 = $83;
     $82 = $211;
     $212 = $82;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $214 & 1;
     $216 = ($215|0)!=(0);
     if ($216) {
      $78 = $209;
      $217 = $78;
      $77 = $217;
      $218 = $77;
      $76 = $218;
      $219 = $76;
      $220 = (($219) + 4|0);
      $221 = HEAP32[$220>>2]|0;
      $228 = $221;
     } else {
      $81 = $209;
      $222 = $81;
      $80 = $222;
      $223 = $80;
      $79 = $223;
      $224 = $79;
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = $226 >> 1;
      $228 = $227;
     }
     $__lhs_sz$i$i$i = $228;
     $229 = $__lhs_sz$i$i$i;
     $230 = $88;
     $72 = $230;
     $231 = $72;
     $71 = $231;
     $232 = $71;
     $70 = $232;
     $233 = $70;
     $69 = $233;
     $234 = $69;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $65 = $231;
      $239 = $65;
      $64 = $239;
      $240 = $64;
      $63 = $240;
      $241 = $63;
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $251 = $243;
     } else {
      $68 = $231;
      $244 = $68;
      $67 = $244;
      $245 = $67;
      $66 = $245;
      $246 = $66;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $251 = $249;
     }
     $250 = ($229|0)!=($251|0);
     do {
      if ($250) {
       $$expand_i1_val = 0;
       $86 = $$expand_i1_val;
      } else {
       $252 = $87;
       $45 = $252;
       $253 = $45;
       $44 = $253;
       $254 = $44;
       $43 = $254;
       $255 = $43;
       $42 = $255;
       $256 = $42;
       $41 = $256;
       $257 = $41;
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       $260 = $259 & 1;
       $261 = ($260|0)!=(0);
       if ($261) {
        $35 = $254;
        $262 = $35;
        $34 = $262;
        $263 = $34;
        $33 = $263;
        $264 = $33;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $273 = $266;
       } else {
        $40 = $254;
        $267 = $40;
        $39 = $267;
        $268 = $39;
        $38 = $268;
        $269 = $38;
        $270 = (($269) + 1|0);
        $37 = $270;
        $271 = $37;
        $36 = $271;
        $272 = $36;
        $273 = $272;
       }
       $32 = $273;
       $274 = $32;
       $__lp$i$i$i = $274;
       $275 = $88;
       $59 = $275;
       $276 = $59;
       $58 = $276;
       $277 = $58;
       $57 = $277;
       $278 = $57;
       $56 = $278;
       $279 = $56;
       $55 = $279;
       $280 = $55;
       $281 = HEAP8[$280>>0]|0;
       $282 = $281&255;
       $283 = $282 & 1;
       $284 = ($283|0)!=(0);
       if ($284) {
        $49 = $277;
        $285 = $49;
        $48 = $285;
        $286 = $48;
        $47 = $286;
        $287 = $47;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $296 = $289;
       } else {
        $54 = $277;
        $290 = $54;
        $53 = $290;
        $291 = $53;
        $52 = $291;
        $292 = $52;
        $293 = (($292) + 1|0);
        $51 = $293;
        $294 = $51;
        $50 = $294;
        $295 = $50;
        $296 = $295;
       }
       $46 = $296;
       $297 = $46;
       $__rp$i$i$i = $297;
       $298 = $87;
       $62 = $298;
       $299 = $62;
       $61 = $299;
       $300 = $61;
       $60 = $300;
       $301 = $60;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302&255;
       $304 = $303 & 1;
       $305 = ($304|0)!=(0);
       if ($305) {
        $306 = $__lp$i$i$i;
        $307 = $__rp$i$i$i;
        $308 = $__lhs_sz$i$i$i;
        $73 = $306;
        $74 = $307;
        $75 = $308;
        $309 = $73;
        $310 = $74;
        $311 = $75;
        __THREW__ = 0;
        $312 = (invoke_iiii(440,($309|0),($310|0),($311|0))|0);
        $313 = __THREW__; __THREW__ = 0;
        $314 = $313&1;
        if ($314) {
         label = 30;
         break L9;
        }
        $315 = ($312|0)==(0);
        $$expand_i1_val2 = $315&1;
        $86 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $319 = $__lhs_sz$i$i$i;
        $320 = ($319|0)!=(0);
        if (!($320)) {
         label = 36;
         break;
        }
        $321 = $__lp$i$i$i;
        $322 = HEAP8[$321>>0]|0;
        $323 = $322 << 24 >> 24;
        $324 = $__rp$i$i$i;
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($323|0)!=($326|0);
        if ($327) {
         label = 34;
         break;
        }
        $328 = $__lhs_sz$i$i$i;
        $329 = (($328) + -1)|0;
        $__lhs_sz$i$i$i = $329;
        $330 = $__lp$i$i$i;
        $331 = (($330) + 1|0);
        $__lp$i$i$i = $331;
        $332 = $__rp$i$i$i;
        $333 = (($332) + 1|0);
        $__rp$i$i$i = $333;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $86 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $86 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $86;
     $334 = $$pre_trunc&1;
     if ($334) {
      label = 38;
      break;
     }
     $340 = $__nd;
     $341 = HEAP32[$340>>2]|0;
     $__nd = $341;
    }
    if ((label|0) == 30) {
     $316 = ___cxa_find_matching_catch(-1,-1)|0;
     $317 = tempRet0;
     $89 = $316;
     $90 = $317;
     $318 = $89;
     ___cxa_call_unexpected(($318|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $335 = $__nd;
     $99 = $agg$result;
     $100 = $335;
     $336 = $99;
     $337 = $100;
     $97 = $336;
     $98 = $337;
     $338 = $97;
     $339 = $98;
     HEAP32[$338>>2] = $339;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $111 = $120;
 $108 = $110;
 $109 = -1;
 $342 = $108;
 $343 = $109;
 $106 = $342;
 $107 = $343;
 $344 = $106;
 HEAP32[$344>>2] = 0;
 $345 = HEAP32[$110>>2]|0;
 HEAP32[$112>>2] = $345;
 $101 = $112;
 $104 = $agg$result;
 $105 = 0;
 $346 = $104;
 $347 = $105;
 $102 = $346;
 $103 = $347;
 $348 = $102;
 $349 = $103;
 HEAP32[$348>>2] = $349;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0;
 var $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $8 = sp + 232|0;
 $14 = sp + 52|0;
 $110 = sp + 448|0;
 $112 = sp + 20|0;
 $118 = sp + 492|0;
 $119 = sp + 340|0;
 $116 = $this;
 $117 = $__k;
 $120 = $116;
 $115 = $120;
 $121 = $115;
 $122 = (($121) + 12|0);
 $114 = $122;
 $123 = $114;
 $113 = $123;
 $124 = $113;
 $125 = $117;
 $30 = $124;
 $31 = $125;
 $126 = $30;
 $127 = $31;
 $128 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($126,$127)|0);
 $__hash = $128;
 $29 = $120;
 $129 = $29;
 $28 = $129;
 $130 = $28;
 $27 = $130;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = (($132) + 4|0);
 $25 = $133;
 $134 = $25;
 $24 = $134;
 $135 = $24;
 $23 = $135;
 $136 = $23;
 $137 = HEAP32[$136>>2]|0;
 $__bc = $137;
 $138 = $__bc;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $__hash;
  $141 = $__bc;
  $21 = $140;
  $22 = $141;
  $142 = $22;
  $143 = $22;
  $144 = (($143) - 1)|0;
  $145 = $142 & $144;
  $146 = ($145|0)!=(0);
  if ($146) {
   $151 = $21;
   $152 = $22;
   $153 = (($151>>>0) % ($152>>>0))&-1;
   $154 = $153;
  } else {
   $147 = $21;
   $148 = $22;
   $149 = (($148) - 1)|0;
   $150 = $147 & $149;
   $154 = $150;
  }
  $__chash = $154;
  $155 = $__chash;
  $2 = $120;
  $3 = $155;
  $156 = $2;
  $157 = $3;
  $1 = $156;
  $158 = $1;
  $0 = $158;
  $159 = $0;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($157<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $__nd = $162;
  $163 = $__nd;
  $6 = $8;
  $7 = -1;
  $164 = $6;
  $165 = $7;
  $4 = $164;
  $5 = $165;
  $166 = $4;
  HEAP32[$166>>2] = 0;
  $167 = HEAP32[$8>>2]|0;
  HEAP32[$118>>2] = $167;
  $9 = $118;
  $168 = ($163|0)!=(0|0);
  do {
   if ($168) {
    $169 = $__nd;
    $170 = HEAP32[$169>>2]|0;
    $__nd = $170;
    L9: while(1) {
     $171 = $__nd;
     $12 = $14;
     $13 = -1;
     $172 = $12;
     $173 = $13;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     HEAP32[$174>>2] = 0;
     $175 = HEAP32[$14>>2]|0;
     HEAP32[$119>>2] = $175;
     $15 = $119;
     $176 = ($171|0)!=(0|0);
     if ($176) {
      $177 = $__nd;
      $178 = (($177) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $__bc;
      $16 = $179;
      $17 = $180;
      $181 = $17;
      $182 = $17;
      $183 = (($182) - 1)|0;
      $184 = $181 & $183;
      $185 = ($184|0)!=(0);
      if ($185) {
       $190 = $16;
       $191 = $17;
       $192 = (($190>>>0) % ($191>>>0))&-1;
       $195 = $192;
      } else {
       $186 = $16;
       $187 = $17;
       $188 = (($187) - 1)|0;
       $189 = $186 & $188;
       $195 = $189;
      }
      $193 = $__chash;
      $194 = ($195|0)==($193|0);
      $350 = $194;
     } else {
      $350 = 0;
     }
     if (!($350)) {
      label = 41;
      break;
     }
     $20 = $120;
     $196 = $20;
     $197 = (($196) + 16|0);
     $19 = $197;
     $198 = $19;
     $18 = $198;
     $199 = $18;
     $200 = $__nd;
     $201 = (($200) + 8|0);
     $202 = $117;
     $94 = $199;
     $95 = $201;
     $96 = $202;
     $203 = $94;
     $204 = $95;
     $205 = $96;
     $91 = $203;
     $92 = $204;
     $93 = $205;
     $206 = $92;
     $207 = $93;
     $87 = $206;
     $88 = $207;
     $208 = $87;
     $85 = $208;
     $209 = $85;
     $84 = $209;
     $210 = $84;
     $83 = $210;
     $211 = $83;
     $82 = $211;
     $212 = $82;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $214 & 1;
     $216 = ($215|0)!=(0);
     if ($216) {
      $78 = $209;
      $217 = $78;
      $77 = $217;
      $218 = $77;
      $76 = $218;
      $219 = $76;
      $220 = (($219) + 4|0);
      $221 = HEAP32[$220>>2]|0;
      $228 = $221;
     } else {
      $81 = $209;
      $222 = $81;
      $80 = $222;
      $223 = $80;
      $79 = $223;
      $224 = $79;
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = $226 >> 1;
      $228 = $227;
     }
     $__lhs_sz$i$i$i = $228;
     $229 = $__lhs_sz$i$i$i;
     $230 = $88;
     $72 = $230;
     $231 = $72;
     $71 = $231;
     $232 = $71;
     $70 = $232;
     $233 = $70;
     $69 = $233;
     $234 = $69;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $65 = $231;
      $239 = $65;
      $64 = $239;
      $240 = $64;
      $63 = $240;
      $241 = $63;
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $251 = $243;
     } else {
      $68 = $231;
      $244 = $68;
      $67 = $244;
      $245 = $67;
      $66 = $245;
      $246 = $66;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $251 = $249;
     }
     $250 = ($229|0)!=($251|0);
     do {
      if ($250) {
       $$expand_i1_val = 0;
       $86 = $$expand_i1_val;
      } else {
       $252 = $87;
       $45 = $252;
       $253 = $45;
       $44 = $253;
       $254 = $44;
       $43 = $254;
       $255 = $43;
       $42 = $255;
       $256 = $42;
       $41 = $256;
       $257 = $41;
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       $260 = $259 & 1;
       $261 = ($260|0)!=(0);
       if ($261) {
        $35 = $254;
        $262 = $35;
        $34 = $262;
        $263 = $34;
        $33 = $263;
        $264 = $33;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $273 = $266;
       } else {
        $40 = $254;
        $267 = $40;
        $39 = $267;
        $268 = $39;
        $38 = $268;
        $269 = $38;
        $270 = (($269) + 1|0);
        $37 = $270;
        $271 = $37;
        $36 = $271;
        $272 = $36;
        $273 = $272;
       }
       $32 = $273;
       $274 = $32;
       $__lp$i$i$i = $274;
       $275 = $88;
       $59 = $275;
       $276 = $59;
       $58 = $276;
       $277 = $58;
       $57 = $277;
       $278 = $57;
       $56 = $278;
       $279 = $56;
       $55 = $279;
       $280 = $55;
       $281 = HEAP8[$280>>0]|0;
       $282 = $281&255;
       $283 = $282 & 1;
       $284 = ($283|0)!=(0);
       if ($284) {
        $49 = $277;
        $285 = $49;
        $48 = $285;
        $286 = $48;
        $47 = $286;
        $287 = $47;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $296 = $289;
       } else {
        $54 = $277;
        $290 = $54;
        $53 = $290;
        $291 = $53;
        $52 = $291;
        $292 = $52;
        $293 = (($292) + 1|0);
        $51 = $293;
        $294 = $51;
        $50 = $294;
        $295 = $50;
        $296 = $295;
       }
       $46 = $296;
       $297 = $46;
       $__rp$i$i$i = $297;
       $298 = $87;
       $62 = $298;
       $299 = $62;
       $61 = $299;
       $300 = $61;
       $60 = $300;
       $301 = $60;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302&255;
       $304 = $303 & 1;
       $305 = ($304|0)!=(0);
       if ($305) {
        $306 = $__lp$i$i$i;
        $307 = $__rp$i$i$i;
        $308 = $__lhs_sz$i$i$i;
        $73 = $306;
        $74 = $307;
        $75 = $308;
        $309 = $73;
        $310 = $74;
        $311 = $75;
        __THREW__ = 0;
        $312 = (invoke_iiii(440,($309|0),($310|0),($311|0))|0);
        $313 = __THREW__; __THREW__ = 0;
        $314 = $313&1;
        if ($314) {
         label = 30;
         break L9;
        }
        $315 = ($312|0)==(0);
        $$expand_i1_val2 = $315&1;
        $86 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $319 = $__lhs_sz$i$i$i;
        $320 = ($319|0)!=(0);
        if (!($320)) {
         label = 36;
         break;
        }
        $321 = $__lp$i$i$i;
        $322 = HEAP8[$321>>0]|0;
        $323 = $322 << 24 >> 24;
        $324 = $__rp$i$i$i;
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($323|0)!=($326|0);
        if ($327) {
         label = 34;
         break;
        }
        $328 = $__lhs_sz$i$i$i;
        $329 = (($328) + -1)|0;
        $__lhs_sz$i$i$i = $329;
        $330 = $__lp$i$i$i;
        $331 = (($330) + 1|0);
        $__lp$i$i$i = $331;
        $332 = $__rp$i$i$i;
        $333 = (($332) + 1|0);
        $__rp$i$i$i = $333;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $86 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $86 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $86;
     $334 = $$pre_trunc&1;
     if ($334) {
      label = 38;
      break;
     }
     $340 = $__nd;
     $341 = HEAP32[$340>>2]|0;
     $__nd = $341;
    }
    if ((label|0) == 30) {
     $316 = ___cxa_find_matching_catch(-1,-1)|0;
     $317 = tempRet0;
     $89 = $316;
     $90 = $317;
     $318 = $89;
     ___cxa_call_unexpected(($318|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $335 = $__nd;
     $99 = $agg$result;
     $100 = $335;
     $336 = $99;
     $337 = $100;
     $97 = $336;
     $98 = $337;
     $338 = $97;
     $339 = $98;
     HEAP32[$338>>2] = $339;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $111 = $120;
 $108 = $110;
 $109 = -1;
 $342 = $108;
 $343 = $109;
 $106 = $342;
 $107 = $343;
 $344 = $106;
 HEAP32[$344>>2] = 0;
 $345 = HEAP32[$110>>2]|0;
 HEAP32[$112>>2] = $345;
 $101 = $112;
 $104 = $agg$result;
 $105 = 0;
 $346 = $104;
 $347 = $105;
 $102 = $346;
 $103 = $347;
 $348 = $102;
 $349 = $103;
 HEAP32[$348>>2] = $349;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 STACKTOP = sp;return;
}
function ___cxx_global_var_init30() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = sp + 12|0;
 $3 = $5;
 $4 = -1;
 $7 = $3;
 $8 = $4;
 $1 = $7;
 $2 = $8;
 $9 = $1;
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $10;
 $0 = $6;
 HEAP32[592>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4Demo3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[592>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN4Demo6createENS_4TypeE($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp + 36|0;
 $9 = sp + 8|0;
 $6 = $type;
 $10 = $6;
 do {
  if ((($10|0) == 0)) {
   $11 = (__Znwj(60)|0);
   __THREW__ = 0;
   invoke_vi(444,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    HEAP32[592>>2] = $11;
    break;
   }
   $14 = ___cxa_find_matching_catch(-1,-1)|0;
   $15 = tempRet0;
   $7 = $14;
   $8 = $15;
   __ZdlPv($11);
   $26 = $7;
   $27 = $8;
   ___resumeException($26|0);
   // unreachable;
  } else {
  }
 } while(0);
 $16 = HEAP32[592>>2]|0;
 $3 = $5;
 $4 = -1;
 $17 = $3;
 $18 = $4;
 $1 = $17;
 $2 = $18;
 $19 = $1;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$5>>2]|0;
 HEAP32[$9>>2] = $20;
 $0 = $9;
 $21 = ($16|0)==(0|0);
 if ($21) {
  __ZN5error8throw_exEPKcS1_i(600,624,45);
 }
 $22 = HEAP32[592>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_vi[$25 & 1023]($22);
 STACKTOP = sp;return;
}
function __GLOBAL__I_a35() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init30();
 STACKTOP = sp;return;
}
function __ZN5error8throw_exEPKcS1_i($msg,$file,$line) {
 $msg = $msg|0;
 $file = $file|0;
 $line = $line|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $ss = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $25 = sp + 264|0;
 $ss = sp + 104|0;
 $49 = sp + 20|0;
 $44 = $msg;
 $45 = $file;
 $46 = $line;
 $40 = $ss;
 $41 = 24;
 $51 = $40;
 $52 = (($51) + 64|0);
 $39 = $52;
 $53 = $39;
 $38 = $53;
 $54 = $38;
 $55 = (6704 + 8|0);
 HEAP32[$54>>2] = $55;
 $56 = (6304 + 8|0);
 HEAP32[$53>>2] = $56;
 $57 = (656 + 12|0);
 HEAP32[$51>>2] = $57;
 $58 = (($51) + 64|0);
 $59 = (656 + 52|0);
 HEAP32[$58>>2] = $59;
 $60 = (($51) + 8|0);
 $61 = (656 + 32|0);
 HEAP32[$60>>2] = $61;
 $62 = (($51) + 12|0);
 $35 = $51;
 $63 = (720 + 4|0);
 $36 = $63;
 $37 = $62;
 $64 = $35;
 $65 = $36;
 $66 = (($65) + 4|0);
 $67 = $37;
 $32 = $64;
 $33 = $66;
 $34 = $67;
 $68 = $32;
 $69 = $33;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$68>>2] = $70;
 $71 = (($69) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$68>>2]|0;
 $74 = (($73) + -12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($68) + ($75)|0);
 HEAP32[$76>>2] = $72;
 $77 = (($68) + 4|0);
 HEAP32[$77>>2] = 0;
 $78 = HEAP32[$68>>2]|0;
 $79 = (($78) + -12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($68) + ($80)|0);
 $82 = $34;
 $30 = $81;
 $31 = $82;
 $83 = $30;
 $84 = $31;
 __THREW__ = 0;
 invoke_vii(445,($83|0),($84|0));
 $85 = __THREW__; __THREW__ = 0;
 $86 = $85&1;
 do {
  if ($86) {
   $175 = ___cxa_find_matching_catch(-1,-1)|0;
   $176 = tempRet0;
   $42 = $175;
   $43 = $176;
  } else {
   $87 = (($83) + 72|0);
   HEAP32[$87>>2] = 0;
   $88 = (($83) + 76|0);
   HEAP32[$88>>2] = -1;
   $89 = (($64) + 8|0);
   $90 = (($65) + 12|0);
   $28 = $89;
   $29 = $90;
   $91 = $28;
   $92 = $29;
   $93 = HEAP32[$92>>2]|0;
   HEAP32[$91>>2] = $93;
   $94 = (($92) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP32[$91>>2]|0;
   $97 = (($96) + -12|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($91) + ($98)|0);
   HEAP32[$99>>2] = $95;
   $100 = HEAP32[$65>>2]|0;
   HEAP32[$64>>2] = $100;
   $101 = (($65) + 20|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = HEAP32[$64>>2]|0;
   $104 = (($103) + -12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($64) + ($105)|0);
   HEAP32[$106>>2] = $102;
   $107 = (($65) + 24|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($64) + 8|0);
   HEAP32[$109>>2] = $108;
   $110 = (656 + 12|0);
   HEAP32[$51>>2] = $110;
   $111 = (($51) + 64|0);
   $112 = (656 + 52|0);
   HEAP32[$111>>2] = $112;
   $113 = (($51) + 8|0);
   $114 = (656 + 32|0);
   HEAP32[$113>>2] = $114;
   $115 = (($51) + 12|0);
   $116 = $41;
   $26 = $115;
   $27 = $116;
   $117 = $26;
   $118 = $27;
   $21 = $117;
   $22 = $118;
   $119 = $21;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($119);
   $120 = (992 + 8|0);
   HEAP32[$119>>2] = $120;
   $121 = (($119) + 32|0);
   $20 = $121;
   $122 = $20;
   $19 = $122;
   $123 = $19;
   $18 = $123;
   $124 = $18;
   $17 = $124;
   $125 = $17;
   $16 = $125;
   $126 = $16;
   $15 = $126;
   $14 = $123;
   $127 = $14;
   $13 = $127;
   $128 = $13;
   $12 = $128;
   $129 = $12;
   $__a$i$i$i$i$i$i = $129;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $130 = $__i$i$i$i$i$i$i;
    $131 = ($130>>>0)<(3);
    if (!($131)) {
     break;
    }
    $132 = $__i$i$i$i$i$i$i;
    $133 = $__a$i$i$i$i$i$i;
    $134 = (($133) + ($132<<2)|0);
    HEAP32[$134>>2] = 0;
    $135 = $__i$i$i$i$i$i$i;
    $136 = (($135) + 1)|0;
    $__i$i$i$i$i$i$i = $136;
   }
   $137 = (($119) + 44|0);
   HEAP32[$137>>2] = 0;
   $138 = (($119) + 48|0);
   $139 = $22;
   HEAP32[$138>>2] = $139;
   $11 = $25;
   $140 = $11;
   $10 = $140;
   $141 = $10;
   $9 = $141;
   $142 = $9;
   $8 = $142;
   $143 = $8;
   $7 = $143;
   $144 = $7;
   $6 = $144;
   $5 = $141;
   $145 = $5;
   $4 = $145;
   $146 = $4;
   $3 = $146;
   $147 = $3;
   $__a$i$i$i1$i$i$i = $147;
   $__i$i$i$i2$i$i$i = 0;
   while(1) {
    $148 = $__i$i$i$i2$i$i$i;
    $149 = ($148>>>0)<(3);
    if (!($149)) {
     break;
    }
    $150 = $__i$i$i$i2$i$i$i;
    $151 = $__a$i$i$i1$i$i$i;
    $152 = (($151) + ($150<<2)|0);
    HEAP32[$152>>2] = 0;
    $153 = $__i$i$i$i2$i$i$i;
    $154 = (($153) + 1)|0;
    $__i$i$i$i2$i$i$i = $154;
   }
   __THREW__ = 0;
   invoke_vii(446,($119|0),($25|0));
   $155 = __THREW__; __THREW__ = 0;
   $156 = $155&1;
   do {
    if ($156) {
     $161 = ___cxa_find_matching_catch(-1,-1)|0;
     $162 = tempRet0;
     $23 = $161;
     $24 = $162;
     __THREW__ = 0;
     invoke_vi(415,($25|0));
     $163 = __THREW__; __THREW__ = 0;
     $164 = $163&1;
     if ($164) {
      $173 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $174 = tempRet0;
      ___clang_call_terminate($173);
      // unreachable;
     } else {
      break;
     }
    } else {
     __THREW__ = 0;
     invoke_vi(415,($25|0));
     $157 = __THREW__; __THREW__ = 0;
     $158 = $157&1;
     if ($158) {
      $159 = ___cxa_find_matching_catch(-1,-1)|0;
      $160 = tempRet0;
      $23 = $159;
      $24 = $160;
      break;
     }
     $184 = (($ss) + 8|0);
     $185 = $44;
     __THREW__ = 0;
     $186 = (invoke_iii(449,($184|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     if ($188) {
      label = 33;
     } else {
      __THREW__ = 0;
      $189 = (invoke_iii(449,($186|0),(640|0))|0);
      $190 = __THREW__; __THREW__ = 0;
      $191 = $190&1;
      if ($191) {
       label = 33;
      } else {
       $192 = $45;
       __THREW__ = 0;
       $193 = (invoke_iii(449,($189|0),($192|0))|0);
       $194 = __THREW__; __THREW__ = 0;
       $195 = $194&1;
       if ($195) {
        label = 33;
       } else {
        __THREW__ = 0;
        $196 = (invoke_iii(449,($193|0),(648|0))|0);
        $197 = __THREW__; __THREW__ = 0;
        $198 = $197&1;
        if ($198) {
         label = 33;
        } else {
         $199 = $46;
         __THREW__ = 0;
         $200 = (invoke_iii(450,($196|0),($199|0))|0);
         $201 = __THREW__; __THREW__ = 0;
         $202 = $201&1;
         if ($202) {
          label = 33;
         } else {
          $1 = $200;
          $2 = 451;
          $203 = $1;
          $204 = $2;
          __THREW__ = 0;
          (invoke_ii($204|0,($203|0))|0);
          $205 = __THREW__; __THREW__ = 0;
          $206 = $205&1;
          if ($206) {
           label = 33;
          } else {
           $207 = (___cxa_allocate_exception(8)|0);
           $$expand_i1_val = 1;
           $50 = $$expand_i1_val;
           $0 = $ss;
           $208 = $0;
           $209 = (($208) + 12|0);
           __THREW__ = 0;
           invoke_vii(452,($49|0),($209|0));
           $210 = __THREW__; __THREW__ = 0;
           $211 = $210&1;
           do {
            if ($211) {
             $218 = ___cxa_find_matching_catch(-1,-1)|0;
             $219 = tempRet0;
             $47 = $218;
             $48 = $219;
            } else {
             __THREW__ = 0;
             invoke_vii(453,($207|0),($49|0));
             $212 = __THREW__; __THREW__ = 0;
             $213 = $212&1;
             if (!($213)) {
              $$expand_i1_val2 = 0;
              $50 = $$expand_i1_val2;
              __THREW__ = 0;
              invoke_viii(454,($207|0),(5576|0),(116|0));
              $214 = __THREW__; __THREW__ = 0;
              $215 = $214&1;
              if (!($215)) {
               // unreachable;
              }
             }
             $220 = ___cxa_find_matching_catch(-1,-1)|0;
             $221 = tempRet0;
             $47 = $220;
             $48 = $221;
             __THREW__ = 0;
             invoke_vi(415,($49|0));
             $222 = __THREW__; __THREW__ = 0;
             $223 = $222&1;
             if ($223) {
              $229 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $230 = tempRet0;
              ___clang_call_terminate($229);
              // unreachable;
             } else {
              break;
             }
            }
           } while(0);
           $$pre_trunc = $50;
           $224 = $$pre_trunc&1;
           if ($224) {
            ___cxa_free_exception(($207|0));
           }
          }
         }
        }
       }
      }
     }
     if ((label|0) == 33) {
      $216 = ___cxa_find_matching_catch(-1,-1)|0;
      $217 = tempRet0;
      $47 = $216;
      $48 = $217;
     }
     __THREW__ = 0;
     invoke_vi(3,($ss|0));
     $225 = __THREW__; __THREW__ = 0;
     $226 = $225&1;
     if ($226) {
      $229 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $230 = tempRet0;
      ___clang_call_terminate($229);
      // unreachable;
     }
     $227 = $47;
     $228 = $48;
     ___resumeException($227|0);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(415,($121|0));
   $165 = __THREW__; __THREW__ = 0;
   $166 = $165&1;
   if ($166) {
    $173 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $174 = tempRet0;
    ___clang_call_terminate($173);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(447,($119|0));
   $167 = __THREW__; __THREW__ = 0;
   $168 = $167&1;
   if ($168) {
    $173 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $174 = tempRet0;
    ___clang_call_terminate($173);
    // unreachable;
   }
   $169 = $23;
   $170 = $24;
   $42 = $169;
   $43 = $170;
   __THREW__ = 0;
   $171 = __THREW__; __THREW__ = 0;
   $172 = $171&1;
   if ($172) {
    $182 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $183 = tempRet0;
    ___clang_call_terminate($182);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $177 = (($51) + 64|0);
 __THREW__ = 0;
 invoke_vi(448,($177|0));
 $178 = __THREW__; __THREW__ = 0;
 $179 = $178&1;
 if ($179) {
  $182 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $183 = tempRet0;
  ___clang_call_terminate($182);
  // unreachable;
 } else {
  $180 = $42;
  $181 = $43;
  ___resumeException($180|0);
  // unreachable;
 }
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 64|0;
 $12 = sp + 112|0;
 $__s = sp + 96|0;
 $29 = sp + 104|0;
 $30 = sp + 32|0;
 $25 = $__os;
 $26 = $__str;
 $31 = $25;
 __THREW__ = 0;
 invoke_vii(455,($__s|0),($31|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 L1: do {
  if ($33) {
   label = 25;
  } else {
   $24 = $__s;
   $34 = $24;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&1;
   L4: do {
    if ($36) {
     $37 = $26;
     $23 = $37;
     $38 = $23;
     __THREW__ = 0;
     $39 = (invoke_ii(430,($38|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     L6: do {
      if ($41) {
       label = 26;
      } else {
       $__len = $39;
       $42 = $25;
       $21 = $29;
       $22 = $42;
       $43 = $21;
       $44 = $22;
       $19 = $43;
       $20 = $44;
       $45 = $19;
       $46 = $20;
       $47 = HEAP32[$46>>2]|0;
       $48 = (($47) + -12|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($46) + ($49)|0);
       $18 = $50;
       $51 = $18;
       $17 = $51;
       $52 = $17;
       $53 = (($52) + 24|0);
       $54 = HEAP32[$53>>2]|0;
       HEAP32[$45>>2] = $54;
       $55 = $26;
       $56 = $25;
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57) + -12|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (($56) + ($59)|0);
       $16 = $60;
       $61 = $16;
       $62 = (($61) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $63 & 176;
       $65 = ($64|0)==(32);
       if ($65) {
        $66 = $26;
        $67 = $__len;
        $68 = (($66) + ($67)|0);
        $120 = $68;
       } else {
        $69 = $26;
        $120 = $69;
       }
       $70 = $26;
       $71 = $__len;
       $72 = (($70) + ($71)|0);
       $73 = $25;
       $74 = HEAP32[$73>>2]|0;
       $75 = (($74) + -12|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (($73) + ($76)|0);
       $78 = $25;
       $79 = HEAP32[$78>>2]|0;
       $80 = (($79) + -12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (($78) + ($81)|0);
       $15 = $82;
       $83 = $15;
       $84 = (($83) + 76|0);
       $85 = HEAP32[$84>>2]|0;
       $5 = -1;
       $6 = $85;
       $86 = $5;
       $87 = $6;
       $88 = ($86|0)==($87|0);
       do {
        if ($88) {
         $10 = $83;
         $11 = 32;
         $89 = $10;
         __THREW__ = 0;
         invoke_vii(456,($12|0),($89|0));
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if ($91) {
          label = 26;
          break L6;
         }
         $9 = $12;
         $92 = $9;
         __THREW__ = 0;
         $93 = (invoke_iii(457,($92|0),(9136|0))|0);
         $94 = __THREW__; __THREW__ = 0;
         $95 = $94&1;
         if (!($95)) {
          $96 = $11;
          $7 = $93;
          $8 = $96;
          $97 = $7;
          $98 = HEAP32[$97>>2]|0;
          $99 = (($98) + 28|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = $8;
          __THREW__ = 0;
          $102 = (invoke_iii($100|0,($97|0),($101|0))|0);
          $103 = __THREW__; __THREW__ = 0;
          $104 = $103&1;
          if (!($104)) {
           __THREW__ = 0;
           invoke_vi(458,($12|0));
           $113 = __THREW__; __THREW__ = 0;
           $114 = $113&1;
           if ($114) {
            label = 26;
            break L6;
           }
           $115 = $102 << 24 >> 24;
           $116 = (($83) + 76|0);
           HEAP32[$116>>2] = $115;
           break;
          }
         }
         $105 = ___cxa_find_matching_catch(-1,-1,0|0,0|0)|0;
         $106 = tempRet0;
         $13 = $105;
         $14 = $106;
         __THREW__ = 0;
         invoke_vi(458,($12|0));
         $107 = __THREW__; __THREW__ = 0;
         $108 = $107&1;
         if ($108) {
          $111 = ___cxa_find_matching_catch(-1,-1,0|0,0|0,0|0)|0;
          $112 = tempRet0;
          ___clang_call_terminate($111);
          // unreachable;
         } else {
          $109 = $13;
          $110 = $14;
          $eh$lpad$body$index2Z2D = $110;$eh$lpad$body$indexZ2D = $109;
          break L6;
         }
        }
       } while(0);
       $117 = (($83) + 76|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $118&255;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$29+0>>2]|0;
       invoke_viiiiiii(459,($30|0),($$byval_copy|0),($55|0),($120|0),($72|0),($77|0),($119|0));
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if ($122) {
        label = 26;
       } else {
        $4 = $30;
        $123 = $4;
        $124 = HEAP32[$123>>2]|0;
        $125 = ($124|0)==(0|0);
        if ($125) {
         $126 = $25;
         $127 = HEAP32[$126>>2]|0;
         $128 = (($127) + -12|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = (($126) + ($129)|0);
         $2 = $130;
         $3 = 5;
         $131 = $2;
         $132 = $3;
         $0 = $131;
         $1 = $132;
         $133 = $0;
         $134 = (($133) + 16|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = $1;
         $137 = $135 | $136;
         __THREW__ = 0;
         invoke_vii(460,($133|0),($137|0));
         $138 = __THREW__; __THREW__ = 0;
         $139 = $138&1;
         if ($139) {
          label = 26;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 26) {
      $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $143 = tempRet0;
      $eh$lpad$body$index2Z2D = $143;$eh$lpad$body$indexZ2D = $142;
     }
     $27 = $eh$lpad$body$indexZ2D;
     $28 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(461,($__s|0));
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if ($145) {
      $163 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $164 = tempRet0;
      ___clang_call_terminate($163);
      // unreachable;
     } else {
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(461,($__s|0));
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    label = 25;
   } else {
    $156 = $25;
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $140 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $141 = tempRet0;
  $27 = $140;
  $28 = $141;
 }
 $148 = $27;
 (___cxa_begin_catch(($148|0))|0);
 $149 = $25;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($150) + -12|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($149) + ($152)|0);
 __THREW__ = 0;
 invoke_vi(462,($153|0));
 $154 = __THREW__; __THREW__ = 0;
 $155 = $154&1;
 if (!($155)) {
  ___cxa_end_catch();
  $156 = $25;
  STACKTOP = sp;return ($156|0);
 }
 $157 = ___cxa_find_matching_catch(-1,-1)|0;
 $158 = tempRet0;
 $27 = $157;
 $28 = $158;
 __THREW__ = 0;
 invoke_v(463);
 $159 = __THREW__; __THREW__ = 0;
 $160 = $159&1;
 if ($160) {
  $163 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $164 = tempRet0;
  ___clang_call_terminate($163);
  // unreachable;
 }
 $161 = $27;
 $162 = $28;
 ___resumeException($161|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $8 = $__os;
 $9 = $8;
 $10 = $8;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13)|0);
 $3 = $14;
 $4 = 10;
 $15 = $3;
 __ZNKSt3__18ios_base6getlocEv($5,$15);
 $2 = $5;
 $16 = $2;
 __THREW__ = 0;
 $17 = (invoke_iii(457,($16|0),(9136|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = $4;
  $0 = $17;
  $1 = $20;
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  __THREW__ = 0;
  $26 = (invoke_iii($24|0,($21|0),($25|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   __ZNSt3__16localeD2Ev($5);
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($9,$26)|0);
   $37 = $8;
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($37)|0);
   $38 = $8;
   STACKTOP = sp;return ($38|0);
  }
 }
 $29 = ___cxa_find_matching_catch(-1,-1)|0;
 $30 = tempRet0;
 $6 = $29;
 $7 = $30;
 __THREW__ = 0;
 invoke_vi(458,($5|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 } else {
  $33 = $6;
  $34 = $7;
  ___resumeException($33|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(464,($3|0),(720|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 64|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch(-1,-1)|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 64|0);
 __THREW__ = 0;
 invoke_vi(448,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i1 = 0, $__t21$i$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $7 = sp + 64|0;
 $10 = sp + 300|0;
 $__t21$i$i$i8 = sp;
 $12 = sp + 16|0;
 $17 = sp + 308|0;
 $31 = sp + 24|0;
 $34 = sp + 302|0;
 $__t21$i$i$i1 = sp + 48|0;
 $36 = sp + 40|0;
 $41 = sp + 301|0;
 $55 = sp + 8|0;
 $58 = sp + 307|0;
 $__t21$i$i$i = sp + 56|0;
 $60 = sp + 32|0;
 $63 = sp + 304|0;
 $68 = sp + 303|0;
 $69 = sp + 306|0;
 $70 = sp + 305|0;
 $67 = $this;
 $71 = $67;
 $72 = (($71) + 48|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & 16;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = (($71) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $66 = $71;
  $78 = $66;
  $79 = (($78) + 24|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77>>>0)<($80>>>0);
  if ($81) {
   $28 = $71;
   $82 = $28;
   $83 = (($82) + 24|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($71) + 44|0);
   HEAP32[$85>>2] = $84;
  }
  $4 = $71;
  $86 = $4;
  $87 = (($86) + 20|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($71) + 44|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($71) + 32|0);
  $3 = $91;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  $1 = $93;
  $94 = $1;
  $0 = $94;
  $18 = $agg$result;
  $19 = $88;
  $20 = $90;
  $21 = $68;
  $95 = $18;
  $96 = $19;
  $97 = $20;
  $98 = $21;
  $13 = $95;
  $14 = $96;
  $15 = $97;
  $16 = $98;
  $99 = $13;
  ;HEAP8[$12+0>>0]=HEAP8[$17+0>>0]|0;
  $11 = $99;
  $100 = $11;
  ;HEAP8[$__t21$i$i$i8+0>>0]=HEAP8[$12+0>>0]|0;
  $9 = $100;
  $101 = $9;
  $8 = $__t21$i$i$i8;
  ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
  $6 = $101;
  $5 = $7;
  $102 = $14;
  $103 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($99,$102,$103);
  STACKTOP = sp;return;
 }
 $104 = (($71) + 48|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $105 & 8;
 $107 = ($106|0)!=(0);
 if ($107) {
  $22 = $71;
  $108 = $22;
  $109 = (($108) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $23 = $71;
  $111 = $23;
  $112 = (($111) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($71) + 32|0);
  $27 = $114;
  $115 = $27;
  $26 = $115;
  $116 = $26;
  $25 = $116;
  $117 = $25;
  $24 = $117;
  $42 = $agg$result;
  $43 = $110;
  $44 = $113;
  $45 = $69;
  $118 = $42;
  $119 = $43;
  $120 = $44;
  $121 = $45;
  $37 = $118;
  $38 = $119;
  $39 = $120;
  $40 = $121;
  $122 = $37;
  ;HEAP8[$36+0>>0]=HEAP8[$41+0>>0]|0;
  $35 = $122;
  $123 = $35;
  ;HEAP8[$__t21$i$i$i1+0>>0]=HEAP8[$36+0>>0]|0;
  $33 = $123;
  $124 = $33;
  $32 = $__t21$i$i$i1;
  ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;
  $30 = $124;
  $29 = $31;
  $125 = $38;
  $126 = $39;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($122,$125,$126);
  STACKTOP = sp;return;
 }
 $127 = (($71) + 32|0);
 $49 = $127;
 $128 = $49;
 $48 = $128;
 $129 = $48;
 $47 = $129;
 $130 = $47;
 $46 = $130;
 $64 = $agg$result;
 $65 = $70;
 $131 = $64;
 $132 = $65;
 $61 = $131;
 $62 = $132;
 $133 = $61;
 ;HEAP8[$60+0>>0]=HEAP8[$63+0>>0]|0;
 $59 = $133;
 $134 = $59;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$60+0>>0]|0;
 $57 = $134;
 $135 = $57;
 $56 = $__t21$i$i$i;
 ;HEAP8[$55+0>>0]=HEAP8[$58+0>>0]|0;
 $54 = $135;
 $53 = $55;
 $52 = $133;
 $136 = $52;
 $51 = $136;
 $137 = $51;
 $50 = $137;
 $138 = $50;
 $__a$i$i$i = $138;
 $__i$i$i$i = 0;
 while(1) {
  $139 = $__i$i$i$i;
  $140 = ($139>>>0)<(3);
  if (!($140)) {
   break;
  }
  $141 = $__i$i$i$i;
  $142 = $__a$i$i$i;
  $143 = (($142) + ($141<<2)|0);
  HEAP32[$143>>2] = 0;
  $144 = $__i$i$i$i;
  $145 = (($144) + 1)|0;
  $__i$i$i$i = $145;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $16 = sp + 8|0;
 $18 = sp + 225|0;
 $46 = sp;
 $49 = sp + 226|0;
 $53 = sp + 224|0;
 $50 = $this;
 $51 = $__first;
 $52 = $__last;
 $54 = $50;
 $55 = $51;
 $56 = $52;
 $47 = $55;
 $48 = $56;
 $57 = $47;
 $58 = $48;
 ;HEAP8[$46+0>>0]=HEAP8[$49+0>>0]|0;
 $44 = $57;
 $45 = $58;
 $59 = $45;
 $60 = $44;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $__sz = $63;
 $64 = $__sz;
 $22 = $54;
 $65 = $22;
 $21 = $65;
 $66 = $21;
 $20 = $66;
 $67 = $20;
 $19 = $67;
 $68 = $19;
 $17 = $68;
 $69 = $17;
 ;HEAP8[$16+0>>0]=HEAP8[$18+0>>0]|0;
 $15 = $69;
 $70 = $15;
 $14 = $70;
 $__m$i = -1;
 $71 = $__m$i;
 $72 = (($71) - 16)|0;
 $73 = ($64>>>0)>($72>>>0);
 if ($73) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($54);
 }
 $74 = $__sz;
 $75 = ($74>>>0)<(11);
 if ($75) {
  $76 = $__sz;
  $2 = $54;
  $3 = $76;
  $77 = $2;
  $78 = $3;
  $79 = $78 << 1;
  $80 = $79&255;
  $1 = $77;
  $81 = $1;
  $0 = $81;
  $82 = $0;
  HEAP8[$82>>0] = $80;
  $8 = $54;
  $83 = $8;
  $7 = $83;
  $84 = $7;
  $6 = $84;
  $85 = $6;
  $86 = (($85) + 1|0);
  $5 = $86;
  $87 = $5;
  $4 = $87;
  $88 = $4;
  $__p = $88;
 } else {
  $89 = $__sz;
  $10 = $89;
  $90 = $10;
  $91 = ($90>>>0)<(11);
  if ($91) {
   $98 = 11;
  } else {
   $92 = $10;
   $93 = (($92) + 1)|0;
   $9 = $93;
   $94 = $9;
   $95 = (($94) + 15)|0;
   $96 = $95 & -16;
   $98 = $96;
  }
  $97 = (($98) - 1)|0;
  $__cap = $97;
  $13 = $54;
  $99 = $13;
  $12 = $99;
  $100 = $12;
  $11 = $100;
  $101 = $11;
  $102 = $__cap;
  $103 = (($102) + 1)|0;
  $26 = $101;
  $27 = $103;
  $104 = $26;
  $105 = $27;
  $23 = $104;
  $24 = $105;
  $25 = 0;
  $106 = $24;
  $107 = (__Znwj($106)|0);
  $__p = $107;
  $108 = $__p;
  $30 = $54;
  $31 = $108;
  $109 = $30;
  $110 = $31;
  $29 = $109;
  $111 = $29;
  $28 = $111;
  $112 = $28;
  $113 = (($112) + 8|0);
  HEAP32[$113>>2] = $110;
  $114 = $__cap;
  $115 = (($114) + 1)|0;
  $34 = $54;
  $35 = $115;
  $116 = $34;
  $117 = $35;
  $118 = 1 | $117;
  $33 = $116;
  $119 = $33;
  $32 = $119;
  $120 = $32;
  HEAP32[$120>>2] = $118;
  $121 = $__sz;
  $38 = $54;
  $39 = $121;
  $122 = $38;
  $123 = $39;
  $37 = $122;
  $124 = $37;
  $36 = $124;
  $125 = $36;
  $126 = (($125) + 4|0);
  HEAP32[$126>>2] = $123;
 }
 while(1) {
  $127 = $51;
  $128 = $52;
  $129 = ($127|0)!=($128|0);
  if (!($129)) {
   break;
  }
  $130 = $__p;
  $131 = $51;
  $40 = $130;
  $41 = $131;
  $132 = $41;
  $133 = HEAP8[$132>>0]|0;
  $134 = $40;
  HEAP8[$134>>0] = $133;
  $135 = $51;
  $136 = (($135) + 1|0);
  $51 = $136;
  $137 = $__p;
  $138 = (($137) + 1|0);
  $__p = $138;
 }
 $139 = $__p;
 HEAP8[$53>>0] = 0;
 $42 = $139;
 $43 = $53;
 $140 = $43;
 $141 = HEAP8[$140>>0]|0;
 $142 = $42;
 HEAP8[$142>>0] = $141;
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $31 = sp + 256|0;
 $38 = sp + 300|0;
 $50 = sp + 184|0;
 $59 = sp + 224|0;
 $65 = sp + 248|0;
 $66 = sp + 260|0;
 $__sp = sp + 108|0;
 $69 = sp + 244|0;
 $71 = sp + 60|0;
 $60 = $__ob;
 $61 = $__op;
 $62 = $__oe;
 $63 = $__iob;
 $64 = $__fl;
 $72 = HEAP32[$__s>>2]|0;
 $57 = $59;
 $58 = -1;
 $73 = $57;
 $74 = $58;
 $55 = $73;
 $56 = $74;
 $75 = $55;
 HEAP32[$75>>2] = 0;
 $76 = HEAP32[$59>>2]|0;
 HEAP32[$65>>2] = $76;
 $54 = $65;
 $77 = ($72|0)==(0|0);
 if ($77) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
  STACKTOP = sp;return;
 }
 $78 = $62;
 $79 = $60;
 $80 = $78;
 $81 = $79;
 $82 = (($80) - ($81))|0;
 $__sz = $82;
 $83 = $63;
 $42 = $83;
 $84 = $42;
 $85 = (($84) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $__ns = $86;
 $87 = $__ns;
 $88 = $__sz;
 $89 = ($87|0)>($88|0);
 if ($89) {
  $90 = $__sz;
  $91 = $__ns;
  $92 = (($91) - ($90))|0;
  $__ns = $92;
 } else {
  $__ns = 0;
 }
 $93 = $61;
 $94 = $60;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $__np = $97;
 $98 = $__np;
 $99 = ($98|0)>(0);
 do {
  if ($99) {
   $100 = HEAP32[$__s>>2]|0;
   $101 = $60;
   $102 = $__np;
   $39 = $100;
   $40 = $101;
   $41 = $102;
   $103 = $39;
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + 48|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $40;
   $108 = $41;
   $109 = (FUNCTION_TABLE_iiii[$106 & 1023]($103,$107,$108)|0);
   $110 = $__np;
   $111 = ($109|0)!=($110|0);
   if (!($111)) {
    break;
   }
   $36 = $38;
   $37 = -1;
   $112 = $36;
   $113 = $37;
   $34 = $112;
   $35 = $113;
   $114 = $34;
   HEAP32[$114>>2] = 0;
   $115 = HEAP32[$38>>2]|0;
   HEAP32[$66>>2] = $115;
   $33 = $66;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $116 = $__ns;
 $117 = ($116|0)>(0);
 do {
  if ($117) {
   $118 = $__ns;
   $119 = $64;
   $21 = $__sp;
   $22 = $118;
   $23 = $119;
   $120 = $21;
   $121 = $22;
   $122 = $23;
   $18 = $120;
   $19 = $121;
   $20 = $122;
   $123 = $18;
   $17 = $123;
   $124 = $17;
   $16 = $124;
   $125 = $16;
   $15 = $125;
   $126 = $15;
   $14 = $126;
   $127 = $19;
   $128 = $20;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($123,$127,$128);
   $129 = HEAP32[$__s>>2]|0;
   $13 = $__sp;
   $130 = $13;
   $12 = $130;
   $131 = $12;
   $11 = $131;
   $132 = $11;
   $10 = $132;
   $133 = $10;
   $9 = $133;
   $134 = $9;
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = $136 & 1;
   $138 = ($137|0)!=(0);
   if ($138) {
    $3 = $131;
    $139 = $3;
    $2 = $139;
    $140 = $2;
    $1 = $140;
    $141 = $1;
    $142 = (($141) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $150 = $143;
   } else {
    $8 = $131;
    $144 = $8;
    $7 = $144;
    $145 = $7;
    $6 = $145;
    $146 = $6;
    $147 = (($146) + 1|0);
    $5 = $147;
    $148 = $5;
    $4 = $148;
    $149 = $4;
    $150 = $149;
   }
   $0 = $150;
   $151 = $0;
   $152 = $__ns;
   $24 = $129;
   $25 = $151;
   $26 = $152;
   $153 = $24;
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + 48|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $25;
   $158 = $26;
   __THREW__ = 0;
   $159 = (invoke_iiii($156|0,($153|0),($157|0),($158|0))|0);
   $160 = __THREW__; __THREW__ = 0;
   $161 = $160&1;
   if ($161) {
    $168 = ___cxa_find_matching_catch(-1,-1)|0;
    $169 = tempRet0;
    $67 = $168;
    $68 = $169;
    __THREW__ = 0;
    invoke_vi(415,($__sp|0));
    $170 = __THREW__; __THREW__ = 0;
    $171 = $170&1;
    if ($171) {
     $203 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $204 = tempRet0;
     ___clang_call_terminate($203);
     // unreachable;
    }
    $201 = $67;
    $202 = $68;
    ___resumeException($201|0);
    // unreachable;
   }
   $162 = $__ns;
   $163 = ($159|0)!=($162|0);
   if ($163) {
    $29 = $31;
    $30 = -1;
    $164 = $29;
    $165 = $30;
    $27 = $164;
    $28 = $165;
    $166 = $27;
    HEAP32[$166>>2] = 0;
    $167 = HEAP32[$31>>2]|0;
    HEAP32[$69>>2] = $167;
    $32 = $69;
    HEAP32[$__s>>2] = 0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
    $70 = 1;
   } else {
    $70 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $70;
   if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else if ((($cleanup$dest|0) == 0)) {
    break;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $172 = $62;
 $173 = $61;
 $174 = $172;
 $175 = $173;
 $176 = (($174) - ($175))|0;
 $__np = $176;
 $177 = $__np;
 $178 = ($177|0)>(0);
 do {
  if ($178) {
   $179 = HEAP32[$__s>>2]|0;
   $180 = $61;
   $181 = $__np;
   $43 = $179;
   $44 = $180;
   $45 = $181;
   $182 = $43;
   $183 = HEAP32[$182>>2]|0;
   $184 = (($183) + 48|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $44;
   $187 = $45;
   $188 = (FUNCTION_TABLE_iiii[$185 & 1023]($182,$186,$187)|0);
   $189 = $__np;
   $190 = ($188|0)!=($189|0);
   if (!($190)) {
    break;
   }
   $48 = $50;
   $49 = -1;
   $191 = $48;
   $192 = $49;
   $46 = $191;
   $47 = $192;
   $193 = $46;
   HEAP32[$193>>2] = 0;
   $194 = HEAP32[$50>>2]|0;
   HEAP32[$71>>2] = $194;
   $51 = $71;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $195 = $63;
 $52 = $195;
 $53 = 0;
 $196 = $52;
 $197 = (($196) + 12|0);
 $198 = HEAP32[$197>>2]|0;
 $__r$i = $198;
 $199 = $53;
 $200 = (($196) + 12|0);
 HEAP32[$200>>2] = $199;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($2);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($5) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($4) + 12|0);
 __THREW__ = 0;
 invoke_vi(23,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch(-1,-1)|0;
 $20 = tempRet0;
 $2 = $19;
 $3 = $20;
 __THREW__ = 0;
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $25 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 }
 $23 = $2;
 $24 = $3;
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (992 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 32|0);
 __THREW__ = 0;
 invoke_vi(415,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch(-1,-1)|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(447,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(23,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__noff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $4 = sp + 88|0;
 $6 = sp + 72|0;
 $8 = sp + 56|0;
 $10 = sp + 96|0;
 $30 = sp + 104|0;
 $32 = sp + 120|0;
 $48 = sp + 16|0;
 $50 = sp + 40|0;
 $53 = sp + 8|0;
 $55 = sp + 48|0;
 $58 = sp;
 $60 = sp + 112|0;
 $75 = sp + 80|0;
 $77 = sp + 64|0;
 $80 = sp + 24|0;
 $__noff = sp + 32|0;
 $79 = $this;
 $83 = $80;
 $84 = $83;
 HEAP32[$84>>2] = $0;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $1;
 $81 = $__way;
 $82 = $__wch;
 $87 = $79;
 $88 = (($87) + 44|0);
 $89 = HEAP32[$88>>2]|0;
 $78 = $87;
 $90 = $78;
 $91 = (($90) + 24|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($89>>>0)<($92>>>0);
 if ($93) {
  $2 = $87;
  $94 = $2;
  $95 = (($94) + 24|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($87) + 44|0);
  HEAP32[$97>>2] = $96;
 }
 $98 = $82;
 $99 = $98 & 24;
 $100 = ($99|0)==(0);
 if ($100) {
  $5 = $agg$result;
  $101 = $6;
  $102 = $101;
  HEAP32[$102>>2] = -1;
  $103 = (($101) + 4)|0;
  $104 = $103;
  HEAP32[$104>>2] = -1;
  $105 = $5;
  $106 = $6;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $3 = $105;
  $112 = $4;
  $113 = $112;
  HEAP32[$113>>2] = $108;
  $114 = (($112) + 4)|0;
  $115 = $114;
  HEAP32[$115>>2] = $111;
  $116 = $3;
  ;HEAP32[$116+0>>2]=0|0;HEAP32[$116+4>>2]=0|0;
  $117 = (($116) + 8|0);
  $118 = $4;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = $117;
  $125 = $124;
  HEAP32[$125>>2] = $120;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $123;
  STACKTOP = sp;return;
 }
 $128 = $82;
 $129 = $128 & 24;
 $130 = ($129|0)==(24);
 if ($130) {
  $131 = $81;
  $132 = ($131|0)==(1);
  if ($132) {
   $9 = $agg$result;
   $133 = $10;
   $134 = $133;
   HEAP32[$134>>2] = -1;
   $135 = (($133) + 4)|0;
   $136 = $135;
   HEAP32[$136>>2] = -1;
   $137 = $9;
   $138 = $10;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $7 = $137;
   $144 = $8;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $143;
   $148 = $7;
   ;HEAP32[$148+0>>2]=0|0;HEAP32[$148+4>>2]=0|0;
   $149 = (($148) + 8|0);
   $150 = $8;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = (($150) + 4)|0;
   $154 = $153;
   $155 = HEAP32[$154>>2]|0;
   $156 = $149;
   $157 = $156;
   HEAP32[$157>>2] = $152;
   $158 = (($156) + 4)|0;
   $159 = $158;
   HEAP32[$159>>2] = $155;
   STACKTOP = sp;return;
  }
 }
 $160 = $81;
 if ((($160|0) == 0)) {
  $161 = $__noff;
  $162 = $161;
  HEAP32[$162>>2] = 0;
  $163 = (($161) + 4)|0;
  $164 = $163;
  HEAP32[$164>>2] = 0;
 } else if ((($160|0) == 1)) {
  $165 = $82;
  $166 = $165 & 8;
  $167 = ($166|0)!=(0);
  if ($167) {
   $11 = $87;
   $168 = $11;
   $169 = (($168) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $12 = $87;
   $171 = $12;
   $172 = (($171) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $170;
   $175 = $173;
   $176 = (($174) - ($175))|0;
   $177 = ($176|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = $__noff;
   $180 = $179;
   HEAP32[$180>>2] = $176;
   $181 = (($179) + 4)|0;
   $182 = $181;
   HEAP32[$182>>2] = $178;
  } else {
   $13 = $87;
   $183 = $13;
   $184 = (($183) + 24|0);
   $185 = HEAP32[$184>>2]|0;
   $14 = $87;
   $186 = $14;
   $187 = (($186) + 20|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $185;
   $190 = $188;
   $191 = (($189) - ($190))|0;
   $192 = ($191|0)<(0);
   $193 = $192 << 31 >> 31;
   $194 = $__noff;
   $195 = $194;
   HEAP32[$195>>2] = $191;
   $196 = (($194) + 4)|0;
   $197 = $196;
   HEAP32[$197>>2] = $193;
  }
 } else if ((($160|0) == 2)) {
  $198 = (($87) + 44|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($87) + 32|0);
  $28 = $200;
  $201 = $28;
  $27 = $201;
  $202 = $27;
  $26 = $202;
  $203 = $26;
  $25 = $203;
  $204 = $25;
  $24 = $204;
  $205 = $24;
  $206 = HEAP8[$205>>0]|0;
  $207 = $206&255;
  $208 = $207 & 1;
  $209 = ($208|0)!=(0);
  if ($209) {
   $18 = $202;
   $210 = $18;
   $17 = $210;
   $211 = $17;
   $16 = $211;
   $212 = $16;
   $213 = (($212) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $221 = $214;
  } else {
   $23 = $202;
   $215 = $23;
   $22 = $215;
   $216 = $22;
   $21 = $216;
   $217 = $21;
   $218 = (($217) + 1|0);
   $20 = $218;
   $219 = $20;
   $19 = $219;
   $220 = $19;
   $221 = $220;
  }
  $15 = $221;
  $222 = $15;
  $223 = $199;
  $224 = $222;
  $225 = (($223) - ($224))|0;
  $226 = ($225|0)<(0);
  $227 = $226 << 31 >> 31;
  $228 = $__noff;
  $229 = $228;
  HEAP32[$229>>2] = $225;
  $230 = (($228) + 4)|0;
  $231 = $230;
  HEAP32[$231>>2] = $227;
 } else {
  $31 = $agg$result;
  $232 = $32;
  $233 = $232;
  HEAP32[$233>>2] = -1;
  $234 = (($232) + 4)|0;
  $235 = $234;
  HEAP32[$235>>2] = -1;
  $236 = $31;
  $237 = $32;
  $238 = $237;
  $239 = HEAP32[$238>>2]|0;
  $240 = (($237) + 4)|0;
  $241 = $240;
  $242 = HEAP32[$241>>2]|0;
  $29 = $236;
  $243 = $30;
  $244 = $243;
  HEAP32[$244>>2] = $239;
  $245 = (($243) + 4)|0;
  $246 = $245;
  HEAP32[$246>>2] = $242;
  $247 = $29;
  ;HEAP32[$247+0>>2]=0|0;HEAP32[$247+4>>2]=0|0;
  $248 = (($247) + 8|0);
  $249 = $30;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = (($249) + 4)|0;
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  $255 = $248;
  $256 = $255;
  HEAP32[$256>>2] = $251;
  $257 = (($255) + 4)|0;
  $258 = $257;
  HEAP32[$258>>2] = $254;
  STACKTOP = sp;return;
 }
 $259 = $80;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = (($259) + 4)|0;
 $263 = $262;
 $264 = HEAP32[$263>>2]|0;
 $265 = $__noff;
 $266 = $265;
 $267 = HEAP32[$266>>2]|0;
 $268 = (($265) + 4)|0;
 $269 = $268;
 $270 = HEAP32[$269>>2]|0;
 $271 = (_i64Add(($267|0),($270|0),($261|0),($264|0))|0);
 $272 = tempRet0;
 $273 = $__noff;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = $__noff;
 $278 = $277;
 $279 = HEAP32[$278>>2]|0;
 $280 = (($277) + 4)|0;
 $281 = $280;
 $282 = HEAP32[$281>>2]|0;
 $283 = ($282|0)<(0);
 if (!($283)) {
  $284 = (($87) + 44|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($87) + 32|0);
  $46 = $286;
  $287 = $46;
  $45 = $287;
  $288 = $45;
  $44 = $288;
  $289 = $44;
  $43 = $289;
  $290 = $43;
  $42 = $290;
  $291 = $42;
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&255;
  $294 = $293 & 1;
  $295 = ($294|0)!=(0);
  if ($295) {
   $36 = $288;
   $296 = $36;
   $35 = $296;
   $297 = $35;
   $34 = $297;
   $298 = $34;
   $299 = (($298) + 8|0);
   $300 = HEAP32[$299>>2]|0;
   $307 = $300;
  } else {
   $41 = $288;
   $301 = $41;
   $40 = $301;
   $302 = $40;
   $39 = $302;
   $303 = $39;
   $304 = (($303) + 1|0);
   $38 = $304;
   $305 = $38;
   $37 = $305;
   $306 = $37;
   $307 = $306;
  }
  $33 = $307;
  $308 = $33;
  $309 = $285;
  $310 = $308;
  $311 = (($309) - ($310))|0;
  $312 = ($311|0)<(0);
  $313 = $312 << 31 >> 31;
  $314 = $__noff;
  $315 = $314;
  $316 = HEAP32[$315>>2]|0;
  $317 = (($314) + 4)|0;
  $318 = $317;
  $319 = HEAP32[$318>>2]|0;
  $320 = ($313|0)<($319|0);
  $321 = ($313|0)==($319|0);
  $322 = ($311>>>0)<($316>>>0);
  $323 = $321 & $322;
  $324 = $320 | $323;
  if (!($324)) {
   $352 = $__noff;
   $353 = $352;
   $354 = HEAP32[$353>>2]|0;
   $355 = (($352) + 4)|0;
   $356 = $355;
   $357 = HEAP32[$356>>2]|0;
   $358 = ($354|0)!=(0);
   $359 = ($357|0)!=(0);
   $360 = $358 | $359;
   if ($360) {
    $361 = $82;
    $362 = $361 & 8;
    $363 = ($362|0)!=(0);
    if ($363) {
     $51 = $87;
     $364 = $51;
     $365 = (($364) + 12|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = ($366|0)==(0|0);
     if ($367) {
      $54 = $agg$result;
      $368 = $55;
      $369 = $368;
      HEAP32[$369>>2] = -1;
      $370 = (($368) + 4)|0;
      $371 = $370;
      HEAP32[$371>>2] = -1;
      $372 = $54;
      $373 = $55;
      $374 = $373;
      $375 = HEAP32[$374>>2]|0;
      $376 = (($373) + 4)|0;
      $377 = $376;
      $378 = HEAP32[$377>>2]|0;
      $52 = $372;
      $379 = $53;
      $380 = $379;
      HEAP32[$380>>2] = $375;
      $381 = (($379) + 4)|0;
      $382 = $381;
      HEAP32[$382>>2] = $378;
      $383 = $52;
      ;HEAP32[$383+0>>2]=0|0;HEAP32[$383+4>>2]=0|0;
      $384 = (($383) + 8|0);
      $385 = $53;
      $386 = $385;
      $387 = HEAP32[$386>>2]|0;
      $388 = (($385) + 4)|0;
      $389 = $388;
      $390 = HEAP32[$389>>2]|0;
      $391 = $384;
      $392 = $391;
      HEAP32[$392>>2] = $387;
      $393 = (($391) + 4)|0;
      $394 = $393;
      HEAP32[$394>>2] = $390;
      STACKTOP = sp;return;
     }
    }
    $395 = $82;
    $396 = $395 & 16;
    $397 = ($396|0)!=(0);
    if ($397) {
     $56 = $87;
     $398 = $56;
     $399 = (($398) + 24|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = ($400|0)==(0|0);
     if ($401) {
      $59 = $agg$result;
      $402 = $60;
      $403 = $402;
      HEAP32[$403>>2] = -1;
      $404 = (($402) + 4)|0;
      $405 = $404;
      HEAP32[$405>>2] = -1;
      $406 = $59;
      $407 = $60;
      $408 = $407;
      $409 = HEAP32[$408>>2]|0;
      $410 = (($407) + 4)|0;
      $411 = $410;
      $412 = HEAP32[$411>>2]|0;
      $57 = $406;
      $413 = $58;
      $414 = $413;
      HEAP32[$414>>2] = $409;
      $415 = (($413) + 4)|0;
      $416 = $415;
      HEAP32[$416>>2] = $412;
      $417 = $57;
      ;HEAP32[$417+0>>2]=0|0;HEAP32[$417+4>>2]=0|0;
      $418 = (($417) + 8|0);
      $419 = $58;
      $420 = $419;
      $421 = HEAP32[$420>>2]|0;
      $422 = (($419) + 4)|0;
      $423 = $422;
      $424 = HEAP32[$423>>2]|0;
      $425 = $418;
      $426 = $425;
      HEAP32[$426>>2] = $421;
      $427 = (($425) + 4)|0;
      $428 = $427;
      HEAP32[$428>>2] = $424;
      STACKTOP = sp;return;
     }
    }
   }
   $429 = $82;
   $430 = $429 & 8;
   $431 = ($430|0)!=(0);
   if ($431) {
    $61 = $87;
    $432 = $61;
    $433 = (($432) + 8|0);
    $434 = HEAP32[$433>>2]|0;
    $62 = $87;
    $435 = $62;
    $436 = (($435) + 8|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = $__noff;
    $439 = $438;
    $440 = HEAP32[$439>>2]|0;
    $441 = (($438) + 4)|0;
    $442 = $441;
    $443 = HEAP32[$442>>2]|0;
    $444 = (($437) + ($440)|0);
    $445 = (($87) + 44|0);
    $446 = HEAP32[$445>>2]|0;
    $63 = $87;
    $64 = $434;
    $65 = $444;
    $66 = $446;
    $447 = $63;
    $448 = $64;
    $449 = (($447) + 8|0);
    HEAP32[$449>>2] = $448;
    $450 = $65;
    $451 = (($447) + 12|0);
    HEAP32[$451>>2] = $450;
    $452 = $66;
    $453 = (($447) + 16|0);
    HEAP32[$453>>2] = $452;
   }
   $454 = $82;
   $455 = $454 & 16;
   $456 = ($455|0)!=(0);
   if ($456) {
    $67 = $87;
    $457 = $67;
    $458 = (($457) + 20|0);
    $459 = HEAP32[$458>>2]|0;
    $68 = $87;
    $460 = $68;
    $461 = (($460) + 28|0);
    $462 = HEAP32[$461>>2]|0;
    $69 = $87;
    $70 = $459;
    $71 = $462;
    $463 = $69;
    $464 = $70;
    $465 = (($463) + 24|0);
    HEAP32[$465>>2] = $464;
    $466 = (($463) + 20|0);
    HEAP32[$466>>2] = $464;
    $467 = $71;
    $468 = (($463) + 28|0);
    HEAP32[$468>>2] = $467;
    $469 = $__noff;
    $470 = $469;
    $471 = HEAP32[$470>>2]|0;
    $472 = (($469) + 4)|0;
    $473 = $472;
    $474 = HEAP32[$473>>2]|0;
    $72 = $87;
    $73 = $471;
    $475 = $72;
    $476 = $73;
    $477 = (($475) + 24|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = (($478) + ($476)|0);
    HEAP32[$477>>2] = $479;
   }
   $480 = $__noff;
   $481 = $480;
   $482 = HEAP32[$481>>2]|0;
   $483 = (($480) + 4)|0;
   $484 = $483;
   $485 = HEAP32[$484>>2]|0;
   $76 = $agg$result;
   $486 = $77;
   $487 = $486;
   HEAP32[$487>>2] = $482;
   $488 = (($486) + 4)|0;
   $489 = $488;
   HEAP32[$489>>2] = $485;
   $490 = $76;
   $491 = $77;
   $492 = $491;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($491) + 4)|0;
   $495 = $494;
   $496 = HEAP32[$495>>2]|0;
   $74 = $490;
   $497 = $75;
   $498 = $497;
   HEAP32[$498>>2] = $493;
   $499 = (($497) + 4)|0;
   $500 = $499;
   HEAP32[$500>>2] = $496;
   $501 = $74;
   ;HEAP32[$501+0>>2]=0|0;HEAP32[$501+4>>2]=0|0;
   $502 = (($501) + 8|0);
   $503 = $75;
   $504 = $503;
   $505 = HEAP32[$504>>2]|0;
   $506 = (($503) + 4)|0;
   $507 = $506;
   $508 = HEAP32[$507>>2]|0;
   $509 = $502;
   $510 = $509;
   HEAP32[$510>>2] = $505;
   $511 = (($509) + 4)|0;
   $512 = $511;
   HEAP32[$512>>2] = $508;
   STACKTOP = sp;return;
  }
 }
 $49 = $agg$result;
 $325 = $50;
 $326 = $325;
 HEAP32[$326>>2] = -1;
 $327 = (($325) + 4)|0;
 $328 = $327;
 HEAP32[$328>>2] = -1;
 $329 = $49;
 $330 = $50;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (($330) + 4)|0;
 $334 = $333;
 $335 = HEAP32[$334>>2]|0;
 $47 = $329;
 $336 = $48;
 $337 = $336;
 HEAP32[$337>>2] = $332;
 $338 = (($336) + 4)|0;
 $339 = $338;
 HEAP32[$339>>2] = $335;
 $340 = $47;
 ;HEAP32[$340+0>>2]=0|0;HEAP32[$340+4>>2]=0|0;
 $341 = (($340) + 8|0);
 $342 = $48;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 $345 = (($342) + 4)|0;
 $346 = $345;
 $347 = HEAP32[$346>>2]|0;
 $348 = $341;
 $349 = $348;
 HEAP32[$349>>2] = $344;
 $350 = (($348) + 4)|0;
 $351 = $350;
 HEAP32[$351>>2] = $347;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $__sp;
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 1023]($agg$result,$3,$11,$14,0,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $14 = $this;
 $15 = $14;
 $16 = (($15) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $12 = $15;
 $18 = $12;
 $19 = (($18) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)<($20>>>0);
 if ($21) {
  $0 = $15;
  $22 = $0;
  $23 = (($22) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($15) + 44|0);
  HEAP32[$25>>2] = $24;
 }
 $26 = (($15) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 8;
 $29 = ($28|0)!=(0);
 do {
  if ($29) {
   $1 = $15;
   $30 = $1;
   $31 = (($30) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($15) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($32>>>0)<($34>>>0);
   if ($35) {
    $2 = $15;
    $36 = $2;
    $37 = (($36) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $3 = $15;
    $39 = $3;
    $40 = (($39) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($15) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $4 = $15;
    $5 = $38;
    $6 = $41;
    $7 = $43;
    $44 = $4;
    $45 = $5;
    $46 = (($44) + 8|0);
    HEAP32[$46>>2] = $45;
    $47 = $6;
    $48 = (($44) + 12|0);
    HEAP32[$48>>2] = $47;
    $49 = $7;
    $50 = (($44) + 16|0);
    HEAP32[$50>>2] = $49;
   }
   $8 = $15;
   $51 = $8;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $9 = $15;
   $54 = $9;
   $55 = (($54) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($53>>>0)<($56>>>0);
   if (!($57)) {
    break;
   }
   $10 = $15;
   $58 = $10;
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP8[$60>>0]|0;
   $11 = $61;
   $62 = $11;
   $63 = $62&255;
   $13 = $63;
   $64 = $13;
   STACKTOP = sp;return ($64|0);
  }
 } while(0);
 $13 = -1;
 $64 = $13;
 STACKTOP = sp;return ($64|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $28 = $this;
 $29 = $__c;
 $30 = $28;
 $31 = (($30) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $26 = $30;
 $33 = $26;
 $34 = (($33) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32>>>0)<($35>>>0);
 if ($36) {
  $0 = $30;
  $37 = $0;
  $38 = (($37) + 24|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($30) + 44|0);
  HEAP32[$40>>2] = $39;
 }
 $1 = $30;
 $41 = $1;
 $42 = (($41) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $2 = $30;
 $44 = $2;
 $45 = (($44) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43>>>0)<($46>>>0);
 do {
  if ($47) {
   $48 = $29;
   $3 = $48;
   $4 = -1;
   $49 = $3;
   $50 = $4;
   $51 = ($49|0)==($50|0);
   if ($51) {
    $5 = $30;
    $52 = $5;
    $53 = (($52) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $6 = $30;
    $55 = $6;
    $56 = (($55) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + -1|0);
    $59 = (($30) + 44|0);
    $60 = HEAP32[$59>>2]|0;
    $7 = $30;
    $8 = $54;
    $9 = $58;
    $10 = $60;
    $61 = $7;
    $62 = $8;
    $63 = (($61) + 8|0);
    HEAP32[$63>>2] = $62;
    $64 = $9;
    $65 = (($61) + 12|0);
    HEAP32[$65>>2] = $64;
    $66 = $10;
    $67 = (($61) + 16|0);
    HEAP32[$67>>2] = $66;
    $68 = $29;
    $13 = $68;
    $69 = $13;
    $11 = $69;
    $12 = -1;
    $70 = $11;
    $71 = $12;
    $72 = ($70|0)==($71|0);
    if ($72) {
     $74 = 0;
    } else {
     $73 = $13;
     $74 = $73;
    }
    $27 = $74;
    $115 = $27;
    STACKTOP = sp;return ($115|0);
   } else {
    $75 = (($30) + 48|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 16;
    $78 = ($77|0)!=(0);
    if (!($78)) {
     $79 = $29;
     $14 = $79;
     $80 = $14;
     $81 = $80&255;
     $15 = $30;
     $82 = $15;
     $83 = (($82) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + -1|0);
     $86 = HEAP8[$85>>0]|0;
     $16 = $81;
     $17 = $86;
     $87 = $16;
     $88 = $87 << 24 >> 24;
     $89 = $17;
     $90 = $89 << 24 >> 24;
     $91 = ($88|0)==($90|0);
     if (!($91)) {
      break;
     }
    }
    $18 = $30;
    $92 = $18;
    $93 = (($92) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $19 = $30;
    $95 = $19;
    $96 = (($95) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + -1|0);
    $99 = (($30) + 44|0);
    $100 = HEAP32[$99>>2]|0;
    $20 = $30;
    $21 = $94;
    $22 = $98;
    $23 = $100;
    $101 = $20;
    $102 = $21;
    $103 = (($101) + 8|0);
    HEAP32[$103>>2] = $102;
    $104 = $22;
    $105 = (($101) + 12|0);
    HEAP32[$105>>2] = $104;
    $106 = $23;
    $107 = (($101) + 16|0);
    HEAP32[$107>>2] = $106;
    $108 = $29;
    $24 = $108;
    $109 = $24;
    $110 = $109&255;
    $25 = $30;
    $111 = $25;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    HEAP8[$113>>0] = $110;
    $114 = $29;
    $27 = $114;
    $115 = $27;
    STACKTOP = sp;return ($115|0);
   }
  }
 } while(0);
 $27 = -1;
 $115 = $27;
 STACKTOP = sp;return ($115|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $52 = sp;
 $55 = sp + 368|0;
 $90 = sp + 276|0;
 $85 = $this;
 $86 = $__c;
 $91 = $85;
 $92 = $86;
 $74 = $92;
 $75 = -1;
 $93 = $74;
 $94 = $75;
 $95 = ($93|0)==($94|0);
 if ($95) {
  $307 = $86;
  $83 = $307;
  $308 = $83;
  $81 = $308;
  $82 = -1;
  $309 = $81;
  $310 = $82;
  $311 = ($309|0)==($310|0);
  if ($311) {
   $313 = 0;
  } else {
   $312 = $83;
   $313 = $312;
  }
  $84 = $313;
  $314 = $84;
  STACKTOP = sp;return ($314|0);
 }
 $13 = $91;
 $96 = $13;
 $97 = (($96) + 12|0);
 $98 = HEAP32[$97>>2]|0;
 $5 = $91;
 $99 = $5;
 $100 = (($99) + 8|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $98;
 $103 = $101;
 $104 = (($102) - ($103))|0;
 $__ninp = $104;
 $0 = $91;
 $105 = $0;
 $106 = (($105) + 24|0);
 $107 = HEAP32[$106>>2]|0;
 $1 = $91;
 $108 = $1;
 $109 = (($108) + 28|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($107|0)==($110|0);
 do {
  if ($111) {
   $112 = (($91) + 48|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 & 16;
   $115 = ($114|0)!=(0);
   if (!($115)) {
    $84 = -1;
    $314 = $84;
    STACKTOP = sp;return ($314|0);
   }
   $2 = $91;
   $116 = $2;
   $117 = (($116) + 24|0);
   $118 = HEAP32[$117>>2]|0;
   $3 = $91;
   $119 = $3;
   $120 = (($119) + 20|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $__nout = $124;
   $125 = (($91) + 44|0);
   $126 = HEAP32[$125>>2]|0;
   $4 = $91;
   $127 = $4;
   $128 = (($127) + 20|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $126;
   $131 = $129;
   $132 = (($130) - ($131))|0;
   $__hm = $132;
   $133 = (($91) + 32|0);
   __THREW__ = 0;
   invoke_vii(465,($133|0),0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if (!($135)) {
    $136 = (($91) + 32|0);
    $137 = (($91) + 32|0);
    $12 = $137;
    $138 = $12;
    $11 = $138;
    $139 = $11;
    $10 = $139;
    $140 = $10;
    $9 = $140;
    $141 = $9;
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = $143 & 1;
    $145 = ($144|0)!=(0);
    if ($145) {
     $8 = $138;
     $146 = $8;
     $7 = $146;
     $147 = $7;
     $6 = $147;
     $148 = $6;
     $149 = HEAP32[$148>>2]|0;
     $150 = $149 & -2;
     $152 = $150;
    } else {
     $152 = 11;
    }
    $151 = (($152) - 1)|0;
    $14 = $136;
    $15 = $151;
    $153 = $14;
    $154 = $15;
    __THREW__ = 0;
    invoke_viii(466,($153|0),($154|0),0);
    $155 = __THREW__; __THREW__ = 0;
    $156 = $155&1;
    if (!($156)) {
     $157 = (($91) + 32|0);
     $29 = $157;
     $158 = $29;
     $28 = $158;
     $159 = $28;
     $27 = $159;
     $160 = $27;
     $26 = $160;
     $161 = $26;
     $25 = $161;
     $162 = $25;
     $163 = HEAP8[$162>>0]|0;
     $164 = $163&255;
     $165 = $164 & 1;
     $166 = ($165|0)!=(0);
     if ($166) {
      $19 = $159;
      $167 = $19;
      $18 = $167;
      $168 = $18;
      $17 = $168;
      $169 = $17;
      $170 = (($169) + 8|0);
      $171 = HEAP32[$170>>2]|0;
      $178 = $171;
     } else {
      $24 = $159;
      $172 = $24;
      $23 = $172;
      $173 = $23;
      $22 = $173;
      $174 = $22;
      $175 = (($174) + 1|0);
      $21 = $175;
      $176 = $21;
      $20 = $176;
      $177 = $20;
      $178 = $177;
     }
     $16 = $178;
     $179 = $16;
     $__p = $179;
     $180 = $__p;
     $181 = $__p;
     $182 = (($91) + 32|0);
     $39 = $182;
     $183 = $39;
     $38 = $183;
     $184 = $38;
     $37 = $184;
     $185 = $37;
     $36 = $185;
     $186 = $36;
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = $188 & 1;
     $190 = ($189|0)!=(0);
     if ($190) {
      $32 = $183;
      $191 = $32;
      $31 = $191;
      $192 = $31;
      $30 = $192;
      $193 = $30;
      $194 = (($193) + 4|0);
      $195 = HEAP32[$194>>2]|0;
      $203 = $195;
     } else {
      $35 = $183;
      $196 = $35;
      $34 = $196;
      $197 = $34;
      $33 = $197;
      $198 = $33;
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = $200 >> 1;
      $203 = $201;
     }
     $202 = (($181) + ($203)|0);
     $40 = $91;
     $41 = $180;
     $42 = $202;
     $204 = $40;
     $205 = $41;
     $206 = (($204) + 24|0);
     HEAP32[$206>>2] = $205;
     $207 = (($204) + 20|0);
     HEAP32[$207>>2] = $205;
     $208 = $42;
     $209 = (($204) + 28|0);
     HEAP32[$209>>2] = $208;
     $210 = $__nout;
     $43 = $91;
     $44 = $210;
     $211 = $43;
     $212 = $44;
     $213 = (($211) + 24|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + ($212)|0);
     HEAP32[$213>>2] = $215;
     $45 = $91;
     $216 = $45;
     $217 = (($216) + 20|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = $__hm;
     $220 = (($218) + ($219)|0);
     $221 = (($91) + 44|0);
     HEAP32[$221>>2] = $220;
     break;
    }
   }
   $222 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $223 = tempRet0;
   $87 = $222;
   $88 = $223;
   $224 = $87;
   (___cxa_begin_catch(($224|0))|0);
   $84 = -1;
   $89 = 1;
   ___cxa_end_catch();
   $314 = $84;
   STACKTOP = sp;return ($314|0);
  }
 } while(0);
 $46 = $91;
 $225 = $46;
 $226 = (($225) + 24|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = (($227) + 1|0);
 HEAP32[$90>>2] = $228;
 $229 = (($91) + 44|0);
 $53 = $90;
 $54 = $229;
 $230 = $53;
 $231 = $54;
 ;HEAP8[$52+0>>0]=HEAP8[$55+0>>0]|0;
 $50 = $230;
 $51 = $231;
 $232 = $50;
 $233 = $51;
 $47 = $52;
 $48 = $232;
 $49 = $233;
 $234 = $48;
 $235 = HEAP32[$234>>2]|0;
 $236 = $49;
 $237 = HEAP32[$236>>2]|0;
 $238 = ($235>>>0)<($237>>>0);
 if ($238) {
  $239 = $51;
  $242 = $239;
 } else {
  $240 = $50;
  $242 = $240;
 }
 $241 = HEAP32[$242>>2]|0;
 $243 = (($91) + 44|0);
 HEAP32[$243>>2] = $241;
 $244 = (($91) + 48|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $245 & 8;
 $247 = ($246|0)!=(0);
 if ($247) {
  $248 = (($91) + 32|0);
  $69 = $248;
  $249 = $69;
  $68 = $249;
  $250 = $68;
  $67 = $250;
  $251 = $67;
  $66 = $251;
  $252 = $66;
  $65 = $252;
  $253 = $65;
  $254 = HEAP8[$253>>0]|0;
  $255 = $254&255;
  $256 = $255 & 1;
  $257 = ($256|0)!=(0);
  if ($257) {
   $59 = $250;
   $258 = $59;
   $58 = $258;
   $259 = $58;
   $57 = $259;
   $260 = $57;
   $261 = (($260) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $269 = $262;
  } else {
   $64 = $250;
   $263 = $64;
   $63 = $263;
   $264 = $63;
   $62 = $264;
   $265 = $62;
   $266 = (($265) + 1|0);
   $61 = $266;
   $267 = $61;
   $60 = $267;
   $268 = $60;
   $269 = $268;
  }
  $56 = $269;
  $270 = $56;
  $__p1 = $270;
  $271 = $__p1;
  $272 = $__p1;
  $273 = $__ninp;
  $274 = (($272) + ($273)|0);
  $275 = (($91) + 44|0);
  $276 = HEAP32[$275>>2]|0;
  $70 = $91;
  $71 = $271;
  $72 = $274;
  $73 = $276;
  $277 = $70;
  $278 = $71;
  $279 = (($277) + 8|0);
  HEAP32[$279>>2] = $278;
  $280 = $72;
  $281 = (($277) + 12|0);
  HEAP32[$281>>2] = $280;
  $282 = $73;
  $283 = (($277) + 16|0);
  HEAP32[$283>>2] = $282;
 }
 $284 = $86;
 $285 = $284&255;
 $79 = $91;
 $80 = $285;
 $286 = $79;
 $287 = (($286) + 24|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = (($286) + 28|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = ($288|0)==($290|0);
 if ($291) {
  $292 = HEAP32[$286>>2]|0;
  $293 = (($292) + 52|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = $80;
  $77 = $295;
  $296 = $77;
  $297 = $296&255;
  $298 = (FUNCTION_TABLE_iii[$294 & 1023]($286,$297)|0);
  $78 = $298;
 } else {
  $299 = $80;
  $300 = (($286) + 24|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = (($301) + 1|0);
  HEAP32[$300>>2] = $302;
  HEAP8[$301>>0] = $299;
  $303 = $80;
  $76 = $303;
  $304 = $76;
  $305 = $304&255;
  $78 = $305;
 }
 $306 = $78;
 $84 = $306;
 $314 = $84;
 STACKTOP = sp;return ($314|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0;
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = (($134) + 32|0);
 $136 = $133;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135,$136)|0);
 $137 = (($134) + 44|0);
 HEAP32[$137>>2] = 0;
 $138 = (($134) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 8;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = (($134) + 32|0);
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 & 1;
  $151 = ($150|0)!=(0);
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = (($159) + 1|0);
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = (($134) + 32|0);
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = (($176) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = (($164) + ($186)|0);
  $187 = (($134) + 44|0);
  HEAP32[$187>>2] = $185;
  $188 = (($134) + 32|0);
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 & 1;
  $197 = ($196|0)!=(0);
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = (($200) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = (($205) + 1|0);
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = (($134) + 32|0);
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $218 & 1;
  $220 = ($219|0)!=(0);
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = (($223) + 8|0);
   $225 = HEAP32[$224>>2]|0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = (($228) + 1|0);
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = (($134) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = (($236) + 8|0);
  HEAP32[$238>>2] = $237;
  $239 = $30;
  $240 = (($236) + 12|0);
  HEAP32[$240>>2] = $239;
  $241 = $31;
  $242 = (($236) + 16|0);
  HEAP32[$242>>2] = $241;
 }
 $243 = (($134) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = (($134) + 32|0);
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = (($258) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = (($134) + 32|0);
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&255;
 $276 = $275 & 1;
 $277 = ($276|0)!=(0);
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = (($280) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = (($285) + 1|0);
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = (($290) + ($291)|0);
 $293 = (($134) + 44|0);
 HEAP32[$293>>2] = $292;
 $294 = (($134) + 32|0);
 $295 = (($134) + 32|0);
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 $302 = $301 & 1;
 $303 = ($302|0)!=(0);
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306>>2]|0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = (($310) - 1)|0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311,$312,0);
 $313 = (($134) + 32|0);
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318>>0]|0;
 $320 = $319&255;
 $321 = $320 & 1;
 $322 = ($321|0)!=(0);
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = (($325) + 8|0);
  $327 = HEAP32[$326>>2]|0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = (($330) + 1|0);
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = (($134) + 32|0);
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&255;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = (($348) + 8|0);
  $350 = HEAP32[$349>>2]|0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = (($353) + 1|0);
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = (($134) + 32|0);
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = $365 & 1;
 $367 = ($366|0)!=(0);
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = (($370) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = (($358) + ($380)|0);
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = (($381) + 24|0);
 HEAP32[$383>>2] = $382;
 $384 = (($381) + 20|0);
 HEAP32[$384>>2] = $382;
 $385 = $115;
 $386 = (($381) + 28|0);
 HEAP32[$386>>2] = $385;
 $387 = (($134) + 48|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = $388 & 3;
 $390 = ($389|0)!=(0);
 if ($390) {
  $391 = $__sz;
  $116 = $134;
  $117 = $391;
  $392 = $116;
  $393 = $117;
  $394 = (($392) + 24|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = (($395) + ($393)|0);
  HEAP32[$394>>2] = $396;
 }
 STACKTOP = sp;return;
}
function ___cxx_global_var_init44() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10ParametersC1Ev(1144);
 (___cxa_atexit((467|0),(1144|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZN10ParametersC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN10ParametersC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN10ParametersD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN10ParametersD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6global3parEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (1144|0);
}
function __ZN10ParametersD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 80|0);
 __THREW__ = 0;
 invoke_vi(468,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $16 = ___cxa_find_matching_catch(-1,-1)|0;
   $17 = tempRet0;
   $1 = $16;
   $2 = $17;
   $18 = (($3) + 60|0);
   __THREW__ = 0;
   invoke_vi(469,($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    label = 10;
   }
  } else {
   $7 = (($3) + 60|0);
   __THREW__ = 0;
   invoke_vi(469,($7|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $21 = ___cxa_find_matching_catch(-1,-1)|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    label = 10;
    break;
   }
   $10 = (($3) + 40|0);
   __THREW__ = 0;
   invoke_vi(470,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $23 = ___cxa_find_matching_catch(-1,-1)|0;
    $24 = tempRet0;
    $1 = $23;
    $2 = $24;
    label = 13;
    break;
   }
   $13 = (($3) + 20|0);
   __THREW__ = 0;
   invoke_vi(468,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $28 = ___cxa_find_matching_catch(-1,-1)|0;
    $29 = tempRet0;
    $1 = $28;
    $2 = $29;
    label = 15;
    break;
   } else {
    __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $25 = (($3) + 40|0);
  __THREW__ = 0;
  invoke_vi(470,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if (!($27)) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $30 = (($3) + 20|0);
  __THREW__ = 0;
  invoke_vi(468,($30|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vi(471,($3|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   $35 = $1;
   $36 = $2;
   ___resumeException($35|0);
   // unreachable;
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $38 = tempRet0;
 ___clang_call_terminate($37);
 // unreachable;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $31 = HEAP32[$30>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$31);
 $23 = $27;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $20 = $33;
 $21 = 0;
 $34 = $20;
 $19 = $34;
 $35 = $19;
 $18 = $35;
 $36 = $18;
 $37 = HEAP32[$36>>2]|0;
 $__tmp$i$i$i = $37;
 $38 = $21;
 $3 = $34;
 $39 = $3;
 $2 = $39;
 $40 = $2;
 HEAP32[$40>>2] = $38;
 $41 = $__tmp$i$i$i;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $1 = $34;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = (($44) + 4|0);
 $46 = $__tmp$i$i$i;
 $16 = $45;
 $17 = $46;
 $47 = $16;
 $15 = $47;
 $48 = $15;
 $14 = $48;
 $49 = $14;
 $13 = $49;
 $50 = $13;
 $51 = $17;
 $6 = $47;
 $52 = $6;
 $5 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $10 = $50;
 $11 = $51;
 $12 = $55;
 $56 = $10;
 $57 = $11;
 $58 = $12;
 $7 = $56;
 $8 = $57;
 $9 = $58;
 $59 = $8;
 __ZdlPv($59);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp;
 $7 = sp + 112|0;
 $12 = sp + 44|0;
 $26 = sp + 100|0;
 $22 = $this;
 $23 = $__np;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $29 = (($28) + 8|0);
 $20 = $29;
 $30 = $20;
 $19 = $30;
 $31 = $19;
 $__na = $31;
 while(1) {
  $32 = $23;
  $10 = $12;
  $11 = -1;
  $33 = $10;
  $34 = $11;
  $8 = $33;
  $9 = $34;
  $35 = $8;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[$12>>2]|0;
  HEAP32[$26>>2] = $36;
  $1 = $26;
  $37 = ($32|0)!=(0|0);
  if (!($37)) {
   label = 10;
   break;
  }
  $38 = $23;
  $39 = HEAP32[$38>>2]|0;
  $__next = $39;
  $40 = $__na;
  $41 = $23;
  $42 = (($41) + 8|0);
  $0 = $42;
  $43 = $0;
  $5 = $40;
  $6 = $43;
  $44 = $5;
  $45 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $44;
  $3 = $45;
  $46 = $3;
  __THREW__ = 0;
  invoke_vi(472,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   break;
  }
  $49 = $__na;
  $50 = $23;
  $16 = $49;
  $17 = $50;
  $18 = 1;
  $51 = $16;
  $52 = $17;
  $53 = $18;
  $13 = $51;
  $14 = $52;
  $15 = $53;
  $54 = $14;
  __ZdlPv($54);
  $55 = $__next;
  $23 = $55;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $56 = ___cxa_find_matching_catch(-1,-1)|0;
 $57 = tempRet0;
 $24 = $56;
 $25 = $57;
 $58 = $24;
 ___cxa_call_unexpected(($58|0));
 // unreachable;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $31 = HEAP32[$30>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$31);
 $23 = $27;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $20 = $33;
 $21 = 0;
 $34 = $20;
 $19 = $34;
 $35 = $19;
 $18 = $35;
 $36 = $18;
 $37 = HEAP32[$36>>2]|0;
 $__tmp$i$i$i = $37;
 $38 = $21;
 $3 = $34;
 $39 = $3;
 $2 = $39;
 $40 = $2;
 HEAP32[$40>>2] = $38;
 $41 = $__tmp$i$i$i;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $1 = $34;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = (($44) + 4|0);
 $46 = $__tmp$i$i$i;
 $16 = $45;
 $17 = $46;
 $47 = $16;
 $15 = $47;
 $48 = $15;
 $14 = $48;
 $49 = $14;
 $13 = $49;
 $50 = $13;
 $51 = $17;
 $6 = $47;
 $52 = $6;
 $5 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $10 = $50;
 $11 = $51;
 $12 = $55;
 $56 = $10;
 $57 = $11;
 $58 = $12;
 $7 = $56;
 $8 = $57;
 $9 = $58;
 $59 = $8;
 __ZdlPv($59);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp;
 $7 = sp + 112|0;
 $12 = sp + 44|0;
 $26 = sp + 100|0;
 $22 = $this;
 $23 = $__np;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $29 = (($28) + 8|0);
 $20 = $29;
 $30 = $20;
 $19 = $30;
 $31 = $19;
 $__na = $31;
 while(1) {
  $32 = $23;
  $10 = $12;
  $11 = -1;
  $33 = $10;
  $34 = $11;
  $8 = $33;
  $9 = $34;
  $35 = $8;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[$12>>2]|0;
  HEAP32[$26>>2] = $36;
  $1 = $26;
  $37 = ($32|0)!=(0|0);
  if (!($37)) {
   label = 10;
   break;
  }
  $38 = $23;
  $39 = HEAP32[$38>>2]|0;
  $__next = $39;
  $40 = $__na;
  $41 = $23;
  $42 = (($41) + 8|0);
  $0 = $42;
  $43 = $0;
  $5 = $40;
  $6 = $43;
  $44 = $5;
  $45 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $44;
  $3 = $45;
  $46 = $3;
  __THREW__ = 0;
  invoke_vi(473,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   break;
  }
  $49 = $__na;
  $50 = $23;
  $16 = $49;
  $17 = $50;
  $18 = 1;
  $51 = $16;
  $52 = $17;
  $53 = $18;
  $13 = $51;
  $14 = $52;
  $15 = $53;
  $54 = $14;
  __ZdlPv($54);
  $55 = $__next;
  $23 = $55;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $56 = ___cxa_find_matching_catch(-1,-1)|0;
 $57 = tempRet0;
 $24 = $56;
 $25 = $57;
 $58 = $24;
 ___cxa_call_unexpected(($58|0));
 // unreachable;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $31 = HEAP32[$30>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$31);
 $23 = $27;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $20 = $33;
 $21 = 0;
 $34 = $20;
 $19 = $34;
 $35 = $19;
 $18 = $35;
 $36 = $18;
 $37 = HEAP32[$36>>2]|0;
 $__tmp$i$i$i = $37;
 $38 = $21;
 $3 = $34;
 $39 = $3;
 $2 = $39;
 $40 = $2;
 HEAP32[$40>>2] = $38;
 $41 = $__tmp$i$i$i;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $1 = $34;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = (($44) + 4|0);
 $46 = $__tmp$i$i$i;
 $16 = $45;
 $17 = $46;
 $47 = $16;
 $15 = $47;
 $48 = $15;
 $14 = $48;
 $49 = $14;
 $13 = $49;
 $50 = $13;
 $51 = $17;
 $6 = $47;
 $52 = $6;
 $5 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $10 = $50;
 $11 = $51;
 $12 = $55;
 $56 = $10;
 $57 = $11;
 $58 = $12;
 $7 = $56;
 $8 = $57;
 $9 = $58;
 $59 = $8;
 __ZdlPv($59);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp;
 $7 = sp + 112|0;
 $12 = sp + 44|0;
 $26 = sp + 100|0;
 $22 = $this;
 $23 = $__np;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $29 = (($28) + 8|0);
 $20 = $29;
 $30 = $20;
 $19 = $30;
 $31 = $19;
 $__na = $31;
 while(1) {
  $32 = $23;
  $10 = $12;
  $11 = -1;
  $33 = $10;
  $34 = $11;
  $8 = $33;
  $9 = $34;
  $35 = $8;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[$12>>2]|0;
  HEAP32[$26>>2] = $36;
  $1 = $26;
  $37 = ($32|0)!=(0|0);
  if (!($37)) {
   label = 10;
   break;
  }
  $38 = $23;
  $39 = HEAP32[$38>>2]|0;
  $__next = $39;
  $40 = $__na;
  $41 = $23;
  $42 = (($41) + 8|0);
  $0 = $42;
  $43 = $0;
  $5 = $40;
  $6 = $43;
  $44 = $5;
  $45 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $44;
  $3 = $45;
  $46 = $3;
  __THREW__ = 0;
  invoke_vi(474,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   break;
  }
  $49 = $__na;
  $50 = $23;
  $16 = $49;
  $17 = $50;
  $18 = 1;
  $51 = $16;
  $52 = $17;
  $53 = $18;
  $13 = $51;
  $14 = $52;
  $15 = $53;
  $54 = $14;
  __ZdlPv($54);
  $55 = $__next;
  $23 = $55;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $56 = ___cxa_find_matching_catch(-1,-1)|0;
 $57 = tempRet0;
 $24 = $56;
 $25 = $57;
 $58 = $24;
 ___cxa_call_unexpected(($58|0));
 // unreachable;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 12|0);
 __THREW__ = 0;
 invoke_vi(415,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch(-1,-1)|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(415,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 }
 $11 = $1;
 $12 = $2;
 ___resumeException($11|0);
 // unreachable;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $31 = HEAP32[$30>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$31);
 $23 = $27;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $20 = $33;
 $21 = 0;
 $34 = $20;
 $19 = $34;
 $35 = $19;
 $18 = $35;
 $36 = $18;
 $37 = HEAP32[$36>>2]|0;
 $__tmp$i$i$i = $37;
 $38 = $21;
 $3 = $34;
 $39 = $3;
 $2 = $39;
 $40 = $2;
 HEAP32[$40>>2] = $38;
 $41 = $__tmp$i$i$i;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $1 = $34;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = (($44) + 4|0);
 $46 = $__tmp$i$i$i;
 $16 = $45;
 $17 = $46;
 $47 = $16;
 $15 = $47;
 $48 = $15;
 $14 = $48;
 $49 = $14;
 $13 = $49;
 $50 = $13;
 $51 = $17;
 $6 = $47;
 $52 = $6;
 $5 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $10 = $50;
 $11 = $51;
 $12 = $55;
 $56 = $10;
 $57 = $11;
 $58 = $12;
 $7 = $56;
 $8 = $57;
 $9 = $58;
 $59 = $8;
 __ZdlPv($59);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp;
 $7 = sp + 112|0;
 $12 = sp + 44|0;
 $26 = sp + 100|0;
 $22 = $this;
 $23 = $__np;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $29 = (($28) + 8|0);
 $20 = $29;
 $30 = $20;
 $19 = $30;
 $31 = $19;
 $__na = $31;
 while(1) {
  $32 = $23;
  $10 = $12;
  $11 = -1;
  $33 = $10;
  $34 = $11;
  $8 = $33;
  $9 = $34;
  $35 = $8;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[$12>>2]|0;
  HEAP32[$26>>2] = $36;
  $1 = $26;
  $37 = ($32|0)!=(0|0);
  if (!($37)) {
   label = 10;
   break;
  }
  $38 = $23;
  $39 = HEAP32[$38>>2]|0;
  $__next = $39;
  $40 = $__na;
  $41 = $23;
  $42 = (($41) + 8|0);
  $0 = $42;
  $43 = $0;
  $5 = $40;
  $6 = $43;
  $44 = $5;
  $45 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $44;
  $3 = $45;
  $46 = $3;
  __THREW__ = 0;
  invoke_vi(475,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   break;
  }
  $49 = $__na;
  $50 = $23;
  $16 = $49;
  $17 = $50;
  $18 = 1;
  $51 = $16;
  $52 = $17;
  $53 = $18;
  $13 = $51;
  $14 = $52;
  $15 = $53;
  $54 = $14;
  __ZdlPv($54);
  $55 = $__next;
  $23 = $55;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $56 = ___cxa_find_matching_catch(-1,-1)|0;
 $57 = tempRet0;
 $24 = $56;
 $25 = $57;
 $58 = $24;
 ___cxa_call_unexpected(($58|0));
 // unreachable;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN10ParametersC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0;
 var $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0, $494 = 0;
 var $495 = 0.0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0;
 var $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0;
 $3 = sp + 1100|0;
 $6 = sp + 540|0;
 $12 = sp + 1076|0;
 $15 = sp + 56|0;
 $23 = sp + 88|0;
 $25 = sp + 96|0;
 $34 = sp + 132|0;
 $37 = sp + 144|0;
 $44 = sp + 172|0;
 $47 = sp + 184|0;
 $59 = sp + 232|0;
 $62 = sp + 244|0;
 $68 = sp + 268|0;
 $71 = sp + 280|0;
 $79 = sp + 312|0;
 $81 = sp + 320|0;
 $90 = sp + 356|0;
 $93 = sp + 368|0;
 $100 = sp + 396|0;
 $103 = sp + 408|0;
 $115 = sp + 456|0;
 $118 = sp + 468|0;
 $124 = sp + 492|0;
 $127 = sp + 504|0;
 $135 = sp + 1080|0;
 $137 = sp + 1096|0;
 $146 = sp + 580|0;
 $149 = sp + 592|0;
 $156 = sp + 620|0;
 $159 = sp + 632|0;
 $171 = sp + 680|0;
 $174 = sp + 692|0;
 $180 = sp + 716|0;
 $183 = sp + 728|0;
 $191 = sp + 760|0;
 $193 = sp + 768|0;
 $202 = sp + 804|0;
 $205 = sp + 816|0;
 $212 = sp + 844|0;
 $215 = sp + 856|0;
 $227 = sp + 904|0;
 $230 = sp + 916|0;
 $236 = sp + 940|0;
 $239 = sp + 952|0;
 $247 = sp + 984|0;
 $249 = sp + 992|0;
 $258 = sp + 1028|0;
 $261 = sp + 1040|0;
 $268 = sp + 32|0;
 $271 = sp;
 $280 = $this;
 $283 = $280;
 $279 = $283;
 $284 = $279;
 $278 = $284;
 $285 = $278;
 $277 = $285;
 $286 = $277;
 $276 = $286;
 $287 = $276;
 $275 = $287;
 $288 = $275;
 $274 = $288;
 $289 = $274;
 $272 = $289;
 $273 = 0;
 $290 = $272;
 $291 = $273;
 $270 = $290;
 HEAP32[$271>>2] = $291;
 $292 = $270;
 $269 = $271;
 $293 = $269;
 $294 = HEAP32[$293>>2]|0;
 $267 = $292;
 HEAP32[$268>>2] = $294;
 $295 = $267;
 $266 = $268;
 $296 = $266;
 $297 = HEAP32[$296>>2]|0;
 HEAP32[$295>>2] = $297;
 $298 = (($295) + 4|0);
 $265 = $298;
 $299 = $265;
 $264 = $299;
 $300 = $264;
 $262 = $300;
 $263 = 0;
 $301 = $262;
 $302 = $263;
 $260 = $301;
 HEAP32[$261>>2] = $302;
 $303 = $260;
 $259 = $261;
 $304 = $259;
 $305 = HEAP32[$304>>2]|0;
 $257 = $303;
 HEAP32[$258>>2] = $305;
 $306 = $257;
 $256 = $306;
 $255 = $258;
 $307 = $255;
 $308 = HEAP32[$307>>2]|0;
 HEAP32[$306>>2] = $308;
 $309 = (($287) + 8|0);
 $254 = $309;
 $310 = $254;
 $253 = $310;
 $311 = $253;
 $252 = $311;
 $312 = $252;
 $251 = $312;
 $250 = $312;
 $313 = $250;
 $248 = $313;
 $314 = $248;
 $245 = $247;
 $246 = -1;
 $315 = $245;
 $316 = $246;
 $243 = $315;
 $244 = $316;
 $317 = $243;
 HEAP32[$317>>2] = 0;
 $318 = HEAP32[$247>>2]|0;
 HEAP32[$249>>2] = $318;
 $242 = $249;
 HEAP32[$314>>2] = 0;
 $319 = (($287) + 12|0);
 $240 = $319;
 $241 = 0;
 $320 = $240;
 $321 = $241;
 $238 = $320;
 HEAP32[$239>>2] = $321;
 $322 = $238;
 $237 = $239;
 $323 = $237;
 $324 = HEAP32[$323>>2]|0;
 $235 = $322;
 HEAP32[$236>>2] = $324;
 $325 = $235;
 $234 = $325;
 $233 = $236;
 $326 = $233;
 $327 = HEAP32[$326>>2]|0;
 HEAP32[$325>>2] = $327;
 $328 = (($287) + 16|0);
 $231 = $328;
 $232 = 1.0;
 $329 = $231;
 $330 = $232;
 $229 = $329;
 HEAPF32[$230>>2] = $330;
 $331 = $229;
 $228 = $230;
 $332 = $228;
 $333 = +HEAPF32[$332>>2];
 $226 = $331;
 HEAPF32[$227>>2] = $333;
 $334 = $226;
 $225 = $334;
 $224 = $227;
 $335 = $224;
 $336 = +HEAPF32[$335>>2];
 HEAPF32[$334>>2] = $336;
 $337 = (($283) + 20|0);
 $223 = $337;
 $338 = $223;
 $222 = $338;
 $339 = $222;
 $221 = $339;
 $340 = $221;
 $220 = $340;
 $341 = $220;
 $219 = $341;
 $342 = $219;
 $218 = $342;
 $343 = $218;
 $216 = $343;
 $217 = 0;
 $344 = $216;
 $345 = $217;
 $214 = $344;
 HEAP32[$215>>2] = $345;
 $346 = $214;
 $213 = $215;
 $347 = $213;
 $348 = HEAP32[$347>>2]|0;
 $211 = $346;
 HEAP32[$212>>2] = $348;
 $349 = $211;
 $210 = $212;
 $350 = $210;
 $351 = HEAP32[$350>>2]|0;
 HEAP32[$349>>2] = $351;
 $352 = (($349) + 4|0);
 $209 = $352;
 $353 = $209;
 $208 = $353;
 $354 = $208;
 $206 = $354;
 $207 = 0;
 $355 = $206;
 $356 = $207;
 $204 = $355;
 HEAP32[$205>>2] = $356;
 $357 = $204;
 $203 = $205;
 $358 = $203;
 $359 = HEAP32[$358>>2]|0;
 $201 = $357;
 HEAP32[$202>>2] = $359;
 $360 = $201;
 $200 = $360;
 $199 = $202;
 $361 = $199;
 $362 = HEAP32[$361>>2]|0;
 HEAP32[$360>>2] = $362;
 $363 = (($341) + 8|0);
 $198 = $363;
 $364 = $198;
 $197 = $364;
 $365 = $197;
 $196 = $365;
 $366 = $196;
 $195 = $366;
 $194 = $366;
 $367 = $194;
 $192 = $367;
 $368 = $192;
 $189 = $191;
 $190 = -1;
 $369 = $189;
 $370 = $190;
 $187 = $369;
 $188 = $370;
 $371 = $187;
 HEAP32[$371>>2] = 0;
 $372 = HEAP32[$191>>2]|0;
 HEAP32[$193>>2] = $372;
 $186 = $193;
 HEAP32[$368>>2] = 0;
 $373 = (($341) + 12|0);
 $184 = $373;
 $185 = 0;
 $374 = $184;
 $375 = $185;
 $182 = $374;
 HEAP32[$183>>2] = $375;
 $376 = $182;
 $181 = $183;
 $377 = $181;
 $378 = HEAP32[$377>>2]|0;
 $179 = $376;
 HEAP32[$180>>2] = $378;
 $379 = $179;
 $178 = $379;
 $177 = $180;
 $380 = $177;
 $381 = HEAP32[$380>>2]|0;
 HEAP32[$379>>2] = $381;
 $382 = (($341) + 16|0);
 $175 = $382;
 $176 = 1.0;
 $383 = $175;
 $384 = $176;
 $173 = $383;
 HEAPF32[$174>>2] = $384;
 $385 = $173;
 $172 = $174;
 $386 = $172;
 $387 = +HEAPF32[$386>>2];
 $170 = $385;
 HEAPF32[$171>>2] = $387;
 $388 = $170;
 $169 = $388;
 $168 = $171;
 $389 = $168;
 $390 = +HEAPF32[$389>>2];
 HEAPF32[$388>>2] = $390;
 $391 = (($283) + 40|0);
 $167 = $391;
 $392 = $167;
 $166 = $392;
 $393 = $166;
 $165 = $393;
 $394 = $165;
 $164 = $394;
 $395 = $164;
 $163 = $395;
 $396 = $163;
 $162 = $396;
 $397 = $162;
 $160 = $397;
 $161 = 0;
 $398 = $160;
 $399 = $161;
 $158 = $398;
 HEAP32[$159>>2] = $399;
 $400 = $158;
 $157 = $159;
 $401 = $157;
 $402 = HEAP32[$401>>2]|0;
 $155 = $400;
 HEAP32[$156>>2] = $402;
 $403 = $155;
 $154 = $156;
 $404 = $154;
 $405 = HEAP32[$404>>2]|0;
 HEAP32[$403>>2] = $405;
 $406 = (($403) + 4|0);
 $153 = $406;
 $407 = $153;
 $152 = $407;
 $408 = $152;
 $150 = $408;
 $151 = 0;
 $409 = $150;
 $410 = $151;
 $148 = $409;
 HEAP32[$149>>2] = $410;
 $411 = $148;
 $147 = $149;
 $412 = $147;
 $413 = HEAP32[$412>>2]|0;
 $145 = $411;
 HEAP32[$146>>2] = $413;
 $414 = $145;
 $144 = $414;
 $143 = $146;
 $415 = $143;
 $416 = HEAP32[$415>>2]|0;
 HEAP32[$414>>2] = $416;
 $417 = (($395) + 8|0);
 $142 = $417;
 $418 = $142;
 $141 = $418;
 $419 = $141;
 $140 = $419;
 $420 = $140;
 $139 = $420;
 $138 = $420;
 $421 = $138;
 $136 = $421;
 $422 = $136;
 $133 = $135;
 $134 = -1;
 $423 = $133;
 $424 = $134;
 $131 = $423;
 $132 = $424;
 $425 = $131;
 HEAP32[$425>>2] = 0;
 $426 = HEAP32[$135>>2]|0;
 HEAP32[$137>>2] = $426;
 $130 = $137;
 HEAP32[$422>>2] = 0;
 $427 = (($395) + 12|0);
 $128 = $427;
 $129 = 0;
 $428 = $128;
 $429 = $129;
 $126 = $428;
 HEAP32[$127>>2] = $429;
 $430 = $126;
 $125 = $127;
 $431 = $125;
 $432 = HEAP32[$431>>2]|0;
 $123 = $430;
 HEAP32[$124>>2] = $432;
 $433 = $123;
 $122 = $433;
 $121 = $124;
 $434 = $121;
 $435 = HEAP32[$434>>2]|0;
 HEAP32[$433>>2] = $435;
 $436 = (($395) + 16|0);
 $119 = $436;
 $120 = 1.0;
 $437 = $119;
 $438 = $120;
 $117 = $437;
 HEAPF32[$118>>2] = $438;
 $439 = $117;
 $116 = $118;
 $440 = $116;
 $441 = +HEAPF32[$440>>2];
 $114 = $439;
 HEAPF32[$115>>2] = $441;
 $442 = $114;
 $113 = $442;
 $112 = $115;
 $443 = $112;
 $444 = +HEAPF32[$443>>2];
 HEAPF32[$442>>2] = $444;
 $445 = (($283) + 60|0);
 $111 = $445;
 $446 = $111;
 $110 = $446;
 $447 = $110;
 $109 = $447;
 $448 = $109;
 $108 = $448;
 $449 = $108;
 $107 = $449;
 $450 = $107;
 $106 = $450;
 $451 = $106;
 $104 = $451;
 $105 = 0;
 $452 = $104;
 $453 = $105;
 $102 = $452;
 HEAP32[$103>>2] = $453;
 $454 = $102;
 $101 = $103;
 $455 = $101;
 $456 = HEAP32[$455>>2]|0;
 $99 = $454;
 HEAP32[$100>>2] = $456;
 $457 = $99;
 $98 = $100;
 $458 = $98;
 $459 = HEAP32[$458>>2]|0;
 HEAP32[$457>>2] = $459;
 $460 = (($457) + 4|0);
 $97 = $460;
 $461 = $97;
 $96 = $461;
 $462 = $96;
 $94 = $462;
 $95 = 0;
 $463 = $94;
 $464 = $95;
 $92 = $463;
 HEAP32[$93>>2] = $464;
 $465 = $92;
 $91 = $93;
 $466 = $91;
 $467 = HEAP32[$466>>2]|0;
 $89 = $465;
 HEAP32[$90>>2] = $467;
 $468 = $89;
 $88 = $468;
 $87 = $90;
 $469 = $87;
 $470 = HEAP32[$469>>2]|0;
 HEAP32[$468>>2] = $470;
 $471 = (($449) + 8|0);
 $86 = $471;
 $472 = $86;
 $85 = $472;
 $473 = $85;
 $84 = $473;
 $474 = $84;
 $83 = $474;
 $82 = $474;
 $475 = $82;
 $80 = $475;
 $476 = $80;
 $77 = $79;
 $78 = -1;
 $477 = $77;
 $478 = $78;
 $75 = $477;
 $76 = $478;
 $479 = $75;
 HEAP32[$479>>2] = 0;
 $480 = HEAP32[$79>>2]|0;
 HEAP32[$81>>2] = $480;
 $74 = $81;
 HEAP32[$476>>2] = 0;
 $481 = (($449) + 12|0);
 $72 = $481;
 $73 = 0;
 $482 = $72;
 $483 = $73;
 $70 = $482;
 HEAP32[$71>>2] = $483;
 $484 = $70;
 $69 = $71;
 $485 = $69;
 $486 = HEAP32[$485>>2]|0;
 $67 = $484;
 HEAP32[$68>>2] = $486;
 $487 = $67;
 $66 = $487;
 $65 = $68;
 $488 = $65;
 $489 = HEAP32[$488>>2]|0;
 HEAP32[$487>>2] = $489;
 $490 = (($449) + 16|0);
 $63 = $490;
 $64 = 1.0;
 $491 = $63;
 $492 = $64;
 $61 = $491;
 HEAPF32[$62>>2] = $492;
 $493 = $61;
 $60 = $62;
 $494 = $60;
 $495 = +HEAPF32[$494>>2];
 $58 = $493;
 HEAPF32[$59>>2] = $495;
 $496 = $58;
 $57 = $496;
 $56 = $59;
 $497 = $56;
 $498 = +HEAPF32[$497>>2];
 HEAPF32[$496>>2] = $498;
 $499 = (($283) + 80|0);
 $55 = $499;
 $500 = $55;
 $54 = $500;
 $501 = $54;
 $53 = $501;
 $502 = $53;
 $52 = $502;
 $503 = $52;
 $51 = $503;
 $504 = $51;
 $50 = $504;
 $505 = $50;
 $48 = $505;
 $49 = 0;
 $506 = $48;
 $507 = $49;
 $46 = $506;
 HEAP32[$47>>2] = $507;
 $508 = $46;
 $45 = $47;
 $509 = $45;
 $510 = HEAP32[$509>>2]|0;
 $43 = $508;
 HEAP32[$44>>2] = $510;
 $511 = $43;
 $42 = $44;
 $512 = $42;
 $513 = HEAP32[$512>>2]|0;
 HEAP32[$511>>2] = $513;
 $514 = (($511) + 4|0);
 $41 = $514;
 $515 = $41;
 $40 = $515;
 $516 = $40;
 $38 = $516;
 $39 = 0;
 $517 = $38;
 $518 = $39;
 $36 = $517;
 HEAP32[$37>>2] = $518;
 $519 = $36;
 $35 = $37;
 $520 = $35;
 $521 = HEAP32[$520>>2]|0;
 $33 = $519;
 HEAP32[$34>>2] = $521;
 $522 = $33;
 $32 = $522;
 $31 = $34;
 $523 = $31;
 $524 = HEAP32[$523>>2]|0;
 HEAP32[$522>>2] = $524;
 $525 = (($503) + 8|0);
 $30 = $525;
 $526 = $30;
 $29 = $526;
 $527 = $29;
 $28 = $527;
 $528 = $28;
 $27 = $528;
 $26 = $528;
 $529 = $26;
 $24 = $529;
 $530 = $24;
 $21 = $23;
 $22 = -1;
 $531 = $21;
 $532 = $22;
 $19 = $531;
 $20 = $532;
 $533 = $19;
 HEAP32[$533>>2] = 0;
 $534 = HEAP32[$23>>2]|0;
 HEAP32[$25>>2] = $534;
 $18 = $25;
 HEAP32[$530>>2] = 0;
 $535 = (($503) + 12|0);
 $16 = $535;
 $17 = 0;
 $536 = $16;
 $537 = $17;
 $14 = $536;
 HEAP32[$15>>2] = $537;
 $538 = $14;
 $13 = $15;
 $539 = $13;
 $540 = HEAP32[$539>>2]|0;
 $11 = $538;
 HEAP32[$12>>2] = $540;
 $541 = $11;
 $10 = $541;
 $9 = $12;
 $542 = $9;
 $543 = HEAP32[$542>>2]|0;
 HEAP32[$541>>2] = $543;
 $544 = (($503) + 16|0);
 $7 = $544;
 $8 = 1.0;
 $545 = $7;
 $546 = $8;
 $5 = $545;
 HEAPF32[$6>>2] = $546;
 $547 = $5;
 $4 = $6;
 $548 = $4;
 $549 = +HEAPF32[$548>>2];
 $2 = $547;
 HEAPF32[$3>>2] = $549;
 $550 = $2;
 $1 = $550;
 $0 = $3;
 $551 = $0;
 $552 = +HEAPF32[$551>>2];
 HEAPF32[$550>>2] = $552;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a47() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init44();
 STACKTOP = sp;return;
}
function __ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($filename,$type) {
 $filename = $filename|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $charSrc = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, $logSize = 0, $res = 0, $shader = 0;
 var $shaderLog = 0, $ss = 0, $str = 0, $str1 = 0, $strSrc = 0, $written = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0;
 $65 = sp + 424|0;
 $110 = sp + 1272|0;
 $file = sp + 1044|0;
 $str = sp;
 $ss = sp + 16|0;
 $strSrc = sp + 196|0;
 $charSrc = sp + 1232|0;
 $218 = sp + 184|0;
 $res = sp + 160|0;
 $logSize = sp + 608|0;
 $shaderLog = sp + 1236|0;
 $written = sp + 180|0;
 $str1 = sp + 164|0;
 $214 = $filename;
 $215 = $type;
 $220 = $214;
 $213 = $220;
 $221 = $213;
 $212 = $221;
 $222 = $212;
 $211 = $222;
 $223 = $211;
 $210 = $223;
 $224 = $210;
 $209 = $224;
 $225 = $209;
 $208 = $225;
 $226 = $208;
 $227 = HEAP8[$226>>0]|0;
 $228 = $227&255;
 $229 = $228 & 1;
 $230 = ($229|0)!=(0);
 if ($230) {
  $202 = $223;
  $231 = $202;
  $201 = $231;
  $232 = $201;
  $200 = $232;
  $233 = $200;
  $234 = (($233) + 8|0);
  $235 = HEAP32[$234>>2]|0;
  $242 = $235;
 } else {
  $207 = $223;
  $236 = $207;
  $206 = $236;
  $237 = $206;
  $205 = $237;
  $238 = $205;
  $239 = (($238) + 1|0);
  $204 = $239;
  $240 = $204;
  $203 = $240;
  $241 = $203;
  $242 = $241;
 }
 $199 = $242;
 $243 = $199;
 $194 = $file;
 $195 = $243;
 $196 = 8;
 $244 = $194;
 $245 = (($244) + 108|0);
 $193 = $245;
 $246 = $193;
 $192 = $246;
 $247 = $192;
 $248 = (6704 + 8|0);
 HEAP32[$247>>2] = $248;
 $249 = (6304 + 8|0);
 HEAP32[$246>>2] = $249;
 $250 = (1384 + 12|0);
 HEAP32[$244>>2] = $250;
 $251 = (($244) + 108|0);
 $252 = (1384 + 32|0);
 HEAP32[$251>>2] = $252;
 $253 = (($244) + 8|0);
 $189 = $244;
 $254 = (1424 + 4|0);
 $190 = $254;
 $191 = $253;
 $255 = $189;
 $256 = $190;
 $257 = HEAP32[$256>>2]|0;
 HEAP32[$255>>2] = $257;
 $258 = (($256) + 4|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = HEAP32[$255>>2]|0;
 $261 = (($260) + -12|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = (($255) + ($262)|0);
 HEAP32[$263>>2] = $259;
 $264 = (($255) + 4|0);
 HEAP32[$264>>2] = 0;
 $265 = HEAP32[$255>>2]|0;
 $266 = (($265) + -12|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (($255) + ($267)|0);
 $269 = $191;
 $187 = $268;
 $188 = $269;
 $270 = $187;
 $271 = $188;
 __THREW__ = 0;
 invoke_vii(445,($270|0),($271|0));
 $272 = __THREW__; __THREW__ = 0;
 $273 = $272&1;
 do {
  if ($273) {
   $303 = ___cxa_find_matching_catch(-1,-1)|0;
   $304 = tempRet0;
   $197 = $303;
   $198 = $304;
  } else {
   $274 = (($270) + 72|0);
   HEAP32[$274>>2] = 0;
   $275 = (($270) + 76|0);
   HEAP32[$275>>2] = -1;
   $276 = (1384 + 12|0);
   HEAP32[$244>>2] = $276;
   $277 = (($244) + 108|0);
   $278 = (1384 + 32|0);
   HEAP32[$277>>2] = $278;
   $279 = (($244) + 8|0);
   __THREW__ = 0;
   invoke_vi(476,($279|0));
   $280 = __THREW__; __THREW__ = 0;
   $281 = $280&1;
   do {
    if ($281) {
     $305 = ___cxa_find_matching_catch(-1,-1)|0;
     $306 = tempRet0;
     $197 = $305;
     $198 = $306;
    } else {
     $282 = (($244) + 8|0);
     $283 = $195;
     $284 = $196;
     $285 = $284 | 8;
     __THREW__ = 0;
     $286 = (invoke_iiii(477,($282|0),($283|0),($285|0))|0);
     $287 = __THREW__; __THREW__ = 0;
     $288 = $287&1;
     do {
      if (!($288)) {
       $289 = ($286|0)==(0|0);
       if ($289) {
        $290 = HEAP32[$244>>2]|0;
        $291 = (($290) + -12|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = (($244) + ($292)|0);
        $185 = $293;
        $186 = 4;
        $294 = $185;
        $295 = $186;
        $183 = $294;
        $184 = $295;
        $296 = $183;
        $297 = (($296) + 16|0);
        $298 = HEAP32[$297>>2]|0;
        $299 = $184;
        $300 = $298 | $299;
        __THREW__ = 0;
        invoke_vii(460,($296|0),($300|0));
        $301 = __THREW__; __THREW__ = 0;
        $302 = $301&1;
        if ($302) {
         break;
        }
       }
       $182 = $file;
       $320 = $182;
       $321 = (($320) + 8|0);
       $181 = $321;
       $322 = $181;
       $323 = (($322) + 64|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ($324|0)!=(0|0);
       do {
        if ($325) {
         label = 42;
        } else {
         $179 = $str;
         $180 = 1248;
         $326 = $179;
         $327 = $180;
         $177 = $326;
         $178 = $327;
         $328 = $177;
         $176 = $328;
         $329 = $176;
         $175 = $329;
         $330 = $175;
         $174 = $330;
         $331 = $174;
         $173 = $331;
         $332 = $178;
         $333 = $178;
         $172 = $333;
         $334 = $172;
         __THREW__ = 0;
         $335 = (invoke_ii(430,($334|0))|0);
         $336 = __THREW__; __THREW__ = 0;
         $337 = $336&1;
         if ($337) {
          label = 38;
         } else {
          __THREW__ = 0;
          invoke_viii(431,($328|0),($332|0),($335|0));
          $338 = __THREW__; __THREW__ = 0;
          $339 = $338&1;
          if ($339) {
           label = 38;
          } else {
           $340 = $214;
           $170 = $str;
           $171 = $340;
           $341 = $170;
           $342 = $171;
           $168 = $341;
           $169 = $342;
           $343 = $168;
           $344 = $169;
           $167 = $344;
           $345 = $167;
           $166 = $345;
           $346 = $166;
           $165 = $346;
           $347 = $165;
           $164 = $347;
           $348 = $164;
           $163 = $348;
           $349 = $163;
           $350 = HEAP8[$349>>0]|0;
           $351 = $350&255;
           $352 = $351 & 1;
           $353 = ($352|0)!=(0);
           if ($353) {
            $157 = $346;
            $354 = $157;
            $156 = $354;
            $355 = $156;
            $155 = $355;
            $356 = $155;
            $357 = (($356) + 8|0);
            $358 = HEAP32[$357>>2]|0;
            $365 = $358;
           } else {
            $162 = $346;
            $359 = $162;
            $161 = $359;
            $360 = $161;
            $160 = $360;
            $361 = $160;
            $362 = (($361) + 1|0);
            $159 = $362;
            $363 = $159;
            $158 = $363;
            $364 = $158;
            $365 = $364;
           }
           $154 = $365;
           $366 = $154;
           $367 = $169;
           $153 = $367;
           $368 = $153;
           $152 = $368;
           $369 = $152;
           $151 = $369;
           $370 = $151;
           $150 = $370;
           $371 = $150;
           $372 = HEAP8[$371>>0]|0;
           $373 = $372&255;
           $374 = $373 & 1;
           $375 = ($374|0)!=(0);
           if ($375) {
            $146 = $368;
            $376 = $146;
            $145 = $376;
            $377 = $145;
            $144 = $377;
            $378 = $144;
            $379 = (($378) + 4|0);
            $380 = HEAP32[$379>>2]|0;
            $387 = $380;
           } else {
            $149 = $368;
            $381 = $149;
            $148 = $381;
            $382 = $148;
            $147 = $382;
            $383 = $147;
            $384 = HEAP8[$383>>0]|0;
            $385 = $384&255;
            $386 = $385 >> 1;
            $387 = $386;
           }
           __THREW__ = 0;
           (invoke_iiii(478,($343|0),($366|0),($387|0))|0);
           $388 = __THREW__; __THREW__ = 0;
           $389 = $388&1;
           if (!($389)) {
            $143 = $str;
            $390 = $143;
            $142 = $390;
            $391 = $142;
            $141 = $391;
            $392 = $141;
            $140 = $392;
            $393 = $140;
            $139 = $393;
            $394 = $139;
            $138 = $394;
            $395 = $138;
            $396 = HEAP8[$395>>0]|0;
            $397 = $396&255;
            $398 = $397 & 1;
            $399 = ($398|0)!=(0);
            if ($399) {
             $132 = $392;
             $400 = $132;
             $131 = $400;
             $401 = $131;
             $130 = $401;
             $402 = $130;
             $403 = (($402) + 8|0);
             $404 = HEAP32[$403>>2]|0;
             $411 = $404;
            } else {
             $137 = $392;
             $405 = $137;
             $136 = $405;
             $406 = $136;
             $135 = $406;
             $407 = $135;
             $408 = (($407) + 1|0);
             $134 = $408;
             $409 = $134;
             $133 = $409;
             $410 = $133;
             $411 = $410;
            }
            $129 = $411;
            $412 = $129;
            __THREW__ = 0;
            invoke_viii(419,($412|0),(1280|0),49);
            $413 = __THREW__; __THREW__ = 0;
            $414 = $413&1;
            if (!($414)) {
             __THREW__ = 0;
             invoke_vi(415,($str|0));
             $415 = __THREW__; __THREW__ = 0;
             $416 = $415&1;
             if ($416) {
              label = 38;
              break;
             }
             label = 42;
             break;
            }
           }
           $419 = ___cxa_find_matching_catch(-1,-1)|0;
           $420 = tempRet0;
           $216 = $419;
           $217 = $420;
           __THREW__ = 0;
           invoke_vi(415,($str|0));
           $421 = __THREW__; __THREW__ = 0;
           $422 = $421&1;
           if ($422) {
            $787 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
            $788 = tempRet0;
            ___clang_call_terminate($787);
            // unreachable;
           } else {
            break;
           }
          }
         }
        }
       } while(0);
       L42: do {
        if ((label|0) == 42) {
         $423 = $215;
         __THREW__ = 0;
         $424 = (invoke_ii(479,($423|0))|0);
         $425 = __THREW__; __THREW__ = 0;
         $426 = $425&1;
         if ($426) {
          label = 38;
         } else {
          $shader = $424;
          $427 = $shader;
          $428 = ($427|0)!=(0);
          if (!($428)) {
           __THREW__ = 0;
           invoke_viii(419,(1296|0),(1280|0),54);
           $429 = __THREW__; __THREW__ = 0;
           $430 = $429&1;
           if ($430) {
            label = 38;
            break;
           }
          }
          $125 = $ss;
          $126 = 24;
          $431 = $125;
          $432 = (($431) + 64|0);
          $124 = $432;
          $433 = $124;
          $123 = $433;
          $434 = $123;
          $435 = (6704 + 8|0);
          HEAP32[$434>>2] = $435;
          $436 = (6304 + 8|0);
          HEAP32[$433>>2] = $436;
          $437 = (656 + 12|0);
          HEAP32[$431>>2] = $437;
          $438 = (($431) + 64|0);
          $439 = (656 + 52|0);
          HEAP32[$438>>2] = $439;
          $440 = (($431) + 8|0);
          $441 = (656 + 32|0);
          HEAP32[$440>>2] = $441;
          $442 = (($431) + 12|0);
          $120 = $431;
          $443 = (720 + 4|0);
          $121 = $443;
          $122 = $442;
          $444 = $120;
          $445 = $121;
          $446 = (($445) + 4|0);
          $447 = $122;
          $117 = $444;
          $118 = $446;
          $119 = $447;
          $448 = $117;
          $449 = $118;
          $450 = HEAP32[$449>>2]|0;
          HEAP32[$448>>2] = $450;
          $451 = (($449) + 4|0);
          $452 = HEAP32[$451>>2]|0;
          $453 = HEAP32[$448>>2]|0;
          $454 = (($453) + -12|0);
          $455 = HEAP32[$454>>2]|0;
          $456 = (($448) + ($455)|0);
          HEAP32[$456>>2] = $452;
          $457 = (($448) + 4|0);
          HEAP32[$457>>2] = 0;
          $458 = HEAP32[$448>>2]|0;
          $459 = (($458) + -12|0);
          $460 = HEAP32[$459>>2]|0;
          $461 = (($448) + ($460)|0);
          $462 = $119;
          $115 = $461;
          $116 = $462;
          $463 = $115;
          $464 = $116;
          __THREW__ = 0;
          invoke_vii(445,($463|0),($464|0));
          $465 = __THREW__; __THREW__ = 0;
          $466 = $465&1;
          do {
           if ($466) {
            $555 = ___cxa_find_matching_catch(-1,-1)|0;
            $556 = tempRet0;
            $127 = $555;
            $128 = $556;
           } else {
            $467 = (($463) + 72|0);
            HEAP32[$467>>2] = 0;
            $468 = (($463) + 76|0);
            HEAP32[$468>>2] = -1;
            $469 = (($444) + 8|0);
            $470 = (($445) + 12|0);
            $113 = $469;
            $114 = $470;
            $471 = $113;
            $472 = $114;
            $473 = HEAP32[$472>>2]|0;
            HEAP32[$471>>2] = $473;
            $474 = (($472) + 4|0);
            $475 = HEAP32[$474>>2]|0;
            $476 = HEAP32[$471>>2]|0;
            $477 = (($476) + -12|0);
            $478 = HEAP32[$477>>2]|0;
            $479 = (($471) + ($478)|0);
            HEAP32[$479>>2] = $475;
            $480 = HEAP32[$445>>2]|0;
            HEAP32[$444>>2] = $480;
            $481 = (($445) + 20|0);
            $482 = HEAP32[$481>>2]|0;
            $483 = HEAP32[$444>>2]|0;
            $484 = (($483) + -12|0);
            $485 = HEAP32[$484>>2]|0;
            $486 = (($444) + ($485)|0);
            HEAP32[$486>>2] = $482;
            $487 = (($445) + 24|0);
            $488 = HEAP32[$487>>2]|0;
            $489 = (($444) + 8|0);
            HEAP32[$489>>2] = $488;
            $490 = (656 + 12|0);
            HEAP32[$431>>2] = $490;
            $491 = (($431) + 64|0);
            $492 = (656 + 52|0);
            HEAP32[$491>>2] = $492;
            $493 = (($431) + 8|0);
            $494 = (656 + 32|0);
            HEAP32[$493>>2] = $494;
            $495 = (($431) + 12|0);
            $496 = $126;
            $111 = $495;
            $112 = $496;
            $497 = $111;
            $498 = $112;
            $106 = $497;
            $107 = $498;
            $499 = $106;
            __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($499);
            $500 = (992 + 8|0);
            HEAP32[$499>>2] = $500;
            $501 = (($499) + 32|0);
            $105 = $501;
            $502 = $105;
            $104 = $502;
            $503 = $104;
            $103 = $503;
            $504 = $103;
            $102 = $504;
            $505 = $102;
            $101 = $505;
            $506 = $101;
            $100 = $506;
            $99 = $503;
            $507 = $99;
            $98 = $507;
            $508 = $98;
            $97 = $508;
            $509 = $97;
            $__a$i$i$i$i$i$i = $509;
            $__i$i$i$i$i$i$i = 0;
            while(1) {
             $510 = $__i$i$i$i$i$i$i;
             $511 = ($510>>>0)<(3);
             if (!($511)) {
              break;
             }
             $512 = $__i$i$i$i$i$i$i;
             $513 = $__a$i$i$i$i$i$i;
             $514 = (($513) + ($512<<2)|0);
             HEAP32[$514>>2] = 0;
             $515 = $__i$i$i$i$i$i$i;
             $516 = (($515) + 1)|0;
             $__i$i$i$i$i$i$i = $516;
            }
            $517 = (($499) + 44|0);
            HEAP32[$517>>2] = 0;
            $518 = (($499) + 48|0);
            $519 = $107;
            HEAP32[$518>>2] = $519;
            $96 = $110;
            $520 = $96;
            $95 = $520;
            $521 = $95;
            $94 = $521;
            $522 = $94;
            $93 = $522;
            $523 = $93;
            $92 = $523;
            $524 = $92;
            $91 = $524;
            $90 = $521;
            $525 = $90;
            $89 = $525;
            $526 = $89;
            $88 = $526;
            $527 = $88;
            $__a$i$i$i1$i$i$i = $527;
            $__i$i$i$i2$i$i$i = 0;
            while(1) {
             $528 = $__i$i$i$i2$i$i$i;
             $529 = ($528>>>0)<(3);
             if (!($529)) {
              break;
             }
             $530 = $__i$i$i$i2$i$i$i;
             $531 = $__a$i$i$i1$i$i$i;
             $532 = (($531) + ($530<<2)|0);
             HEAP32[$532>>2] = 0;
             $533 = $__i$i$i$i2$i$i$i;
             $534 = (($533) + 1)|0;
             $__i$i$i$i2$i$i$i = $534;
            }
            __THREW__ = 0;
            invoke_vii(446,($499|0),($110|0));
            $535 = __THREW__; __THREW__ = 0;
            $536 = $535&1;
            do {
             if ($536) {
              $541 = ___cxa_find_matching_catch(-1,-1)|0;
              $542 = tempRet0;
              $108 = $541;
              $109 = $542;
              __THREW__ = 0;
              invoke_vi(415,($110|0));
              $543 = __THREW__; __THREW__ = 0;
              $544 = $543&1;
              if ($544) {
               $553 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
               $554 = tempRet0;
               ___clang_call_terminate($553);
               // unreachable;
              } else {
               break;
              }
             } else {
              __THREW__ = 0;
              invoke_vi(415,($110|0));
              $537 = __THREW__; __THREW__ = 0;
              $538 = $537&1;
              if ($538) {
               $539 = ___cxa_find_matching_catch(-1,-1)|0;
               $540 = tempRet0;
               $108 = $539;
               $109 = $540;
               break;
              }
              $564 = (($ss) + 8|0);
              $87 = $file;
              $565 = $87;
              $566 = (($565) + 8|0);
              __THREW__ = 0;
              (invoke_iii(480,($564|0),($566|0))|0);
              $567 = __THREW__; __THREW__ = 0;
              $568 = $567&1;
              L66: do {
               if ($568) {
                label = 99;
               } else {
                $86 = $file;
                $569 = $86;
                $570 = (($569) + 8|0);
                __THREW__ = 0;
                $571 = (invoke_ii(481,($570|0))|0);
                $572 = __THREW__; __THREW__ = 0;
                $573 = $572&1;
                if ($573) {
                 label = 99;
                } else {
                 $574 = ($571|0)==(0|0);
                 if ($574) {
                  $575 = HEAP32[$569>>2]|0;
                  $576 = (($575) + -12|0);
                  $577 = HEAP32[$576>>2]|0;
                  $578 = (($569) + ($577)|0);
                  $84 = $578;
                  $85 = 4;
                  $579 = $84;
                  $580 = $85;
                  $82 = $579;
                  $83 = $580;
                  $581 = $82;
                  $582 = (($581) + 16|0);
                  $583 = HEAP32[$582>>2]|0;
                  $584 = $83;
                  $585 = $583 | $584;
                  __THREW__ = 0;
                  invoke_vii(460,($581|0),($585|0));
                  $586 = __THREW__; __THREW__ = 0;
                  $587 = $586&1;
                  if ($587) {
                   label = 99;
                   break;
                  }
                 }
                 $81 = $ss;
                 $588 = $81;
                 $589 = (($588) + 12|0);
                 __THREW__ = 0;
                 invoke_vii(452,($strSrc|0),($589|0));
                 $590 = __THREW__; __THREW__ = 0;
                 $591 = $590&1;
                 if ($591) {
                  label = 99;
                  break;
                 }
                 $80 = $strSrc;
                 $592 = $80;
                 $79 = $592;
                 $593 = $79;
                 $78 = $593;
                 $594 = $78;
                 $77 = $594;
                 $595 = $77;
                 $76 = $595;
                 $596 = $76;
                 $75 = $596;
                 $597 = $75;
                 $598 = HEAP8[$597>>0]|0;
                 $599 = $598&255;
                 $600 = $599 & 1;
                 $601 = ($600|0)!=(0);
                 if ($601) {
                  $69 = $594;
                  $602 = $69;
                  $68 = $602;
                  $603 = $68;
                  $67 = $603;
                  $604 = $67;
                  $605 = (($604) + 8|0);
                  $606 = HEAP32[$605>>2]|0;
                  $613 = $606;
                 } else {
                  $74 = $594;
                  $607 = $74;
                  $73 = $607;
                  $608 = $73;
                  $72 = $608;
                  $609 = $72;
                  $610 = (($609) + 1|0);
                  $71 = $610;
                  $611 = $71;
                  $70 = $611;
                  $612 = $70;
                  $613 = $612;
                 }
                 $66 = $613;
                 $614 = $66;
                 HEAP32[$charSrc>>2] = $614;
                 $615 = $shader;
                 $63 = $65;
                 $64 = -1;
                 $616 = $63;
                 $617 = $64;
                 $61 = $616;
                 $62 = $617;
                 $618 = $61;
                 HEAP32[$618>>2] = 0;
                 $619 = HEAP32[$65>>2]|0;
                 HEAP32[$218>>2] = $619;
                 $60 = $218;
                 __THREW__ = 0;
                 invoke_viiii(482,($615|0),1,($charSrc|0),(0|0));
                 $620 = __THREW__; __THREW__ = 0;
                 $621 = $620&1;
                 L82: do {
                  if ($621) {
                   label = 100;
                  } else {
                   $622 = $shader;
                   __THREW__ = 0;
                   invoke_vi(483,($622|0));
                   $623 = __THREW__; __THREW__ = 0;
                   $624 = $623&1;
                   if ($624) {
                    label = 100;
                    break;
                   }
                   $625 = $shader;
                   __THREW__ = 0;
                   invoke_viii(484,($625|0),35713,($res|0));
                   $626 = __THREW__; __THREW__ = 0;
                   $627 = $626&1;
                   if ($627) {
                    label = 100;
                    break;
                   }
                   $628 = HEAP32[$res>>2]|0;
                   $629 = ($628|0)==(0);
                   L86: do {
                    if ($629) {
                     __THREW__ = 0;
                     $630 = (invoke_iii(449,(4008|0),(1328|0))|0);
                     $631 = __THREW__; __THREW__ = 0;
                     $632 = $631&1;
                     if ($632) {
                      label = 100;
                      break L82;
                     }
                     $633 = $214;
                     __THREW__ = 0;
                     $634 = (invoke_iii(485,($630|0),($633|0))|0);
                     $635 = __THREW__; __THREW__ = 0;
                     $636 = $635&1;
                     if ($636) {
                      label = 100;
                      break L82;
                     }
                     $58 = $634;
                     $59 = 451;
                     $637 = $58;
                     $638 = $59;
                     __THREW__ = 0;
                     (invoke_ii($638|0,($637|0))|0);
                     $639 = __THREW__; __THREW__ = 0;
                     $640 = $639&1;
                     if ($640) {
                      label = 100;
                      break L82;
                     }
                     $641 = $shader;
                     __THREW__ = 0;
                     invoke_viii(484,($641|0),35716,($logSize|0));
                     $642 = __THREW__; __THREW__ = 0;
                     $643 = $642&1;
                     if ($643) {
                      label = 100;
                      break L82;
                     }
                     $644 = HEAP32[$logSize>>2]|0;
                     $645 = ($644|0)>(0);
                     L93: do {
                      if ($645) {
                       $646 = HEAP32[$logSize>>2]|0;
                       __THREW__ = 0;
                       invoke_vii(486,($shaderLog|0),($646|0));
                       $647 = __THREW__; __THREW__ = 0;
                       $648 = $647&1;
                       if ($648) {
                        label = 100;
                        break L82;
                       }
                       $649 = $shader;
                       $650 = HEAP32[$logSize>>2]|0;
                       $57 = $shaderLog;
                       $651 = $57;
                       $652 = HEAP32[$651>>2]|0;
                       $56 = $652;
                       $653 = $56;
                       __THREW__ = 0;
                       invoke_viiii(487,($649|0),($650|0),($written|0),($653|0));
                       $654 = __THREW__; __THREW__ = 0;
                       $655 = $654&1;
                       do {
                        if (!($655)) {
                         $55 = $shaderLog;
                         $656 = $55;
                         $657 = HEAP32[$656>>2]|0;
                         $54 = $657;
                         $658 = $54;
                         __THREW__ = 0;
                         $659 = (invoke_iii(449,(4008|0),($658|0))|0);
                         $660 = __THREW__; __THREW__ = 0;
                         $661 = $660&1;
                         if ($661) {
                          break;
                         }
                         $52 = $659;
                         $53 = 451;
                         $662 = $52;
                         $663 = $53;
                         __THREW__ = 0;
                         (invoke_ii($663|0,($662|0))|0);
                         $664 = __THREW__; __THREW__ = 0;
                         $665 = $664&1;
                         if ($665) {
                          break;
                         }
                         __THREW__ = 0;
                         invoke_vi(488,($shaderLog|0));
                         $666 = __THREW__; __THREW__ = 0;
                         $667 = $666&1;
                         if ($667) {
                          label = 100;
                          break L82;
                         }
                         break L93;
                        }
                       } while(0);
                       $672 = ___cxa_find_matching_catch(-1,-1)|0;
                       $673 = tempRet0;
                       $216 = $672;
                       $217 = $673;
                       __THREW__ = 0;
                       invoke_vi(488,($shaderLog|0));
                       $674 = __THREW__; __THREW__ = 0;
                       $675 = $674&1;
                       if ($675) {
                        $787 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                        $788 = tempRet0;
                        ___clang_call_terminate($787);
                        // unreachable;
                       } else {
                        break L82;
                       }
                      }
                     } while(0);
                     $676 = $shader;
                     __THREW__ = 0;
                     invoke_vi(489,($676|0));
                     $677 = __THREW__; __THREW__ = 0;
                     $678 = $677&1;
                     if ($678) {
                      label = 100;
                      break L82;
                     }
                     $50 = $str1;
                     $51 = 1352;
                     $679 = $50;
                     $680 = $51;
                     $48 = $679;
                     $49 = $680;
                     $681 = $48;
                     $47 = $681;
                     $682 = $47;
                     $46 = $682;
                     $683 = $46;
                     $45 = $683;
                     $684 = $45;
                     $44 = $684;
                     $685 = $49;
                     $686 = $49;
                     $43 = $686;
                     $687 = $43;
                     __THREW__ = 0;
                     $688 = (invoke_ii(430,($687|0))|0);
                     $689 = __THREW__; __THREW__ = 0;
                     $690 = $689&1;
                     if ($690) {
                      label = 100;
                      break L82;
                     }
                     __THREW__ = 0;
                     invoke_viii(431,($681|0),($685|0),($688|0));
                     $691 = __THREW__; __THREW__ = 0;
                     $692 = $691&1;
                     if ($692) {
                      label = 100;
                      break L82;
                     }
                     $693 = $214;
                     $41 = $str1;
                     $42 = $693;
                     $694 = $41;
                     $695 = $42;
                     $39 = $694;
                     $40 = $695;
                     $696 = $39;
                     $697 = $40;
                     $38 = $697;
                     $698 = $38;
                     $37 = $698;
                     $699 = $37;
                     $36 = $699;
                     $700 = $36;
                     $35 = $700;
                     $701 = $35;
                     $34 = $701;
                     $702 = $34;
                     $703 = HEAP8[$702>>0]|0;
                     $704 = $703&255;
                     $705 = $704 & 1;
                     $706 = ($705|0)!=(0);
                     if ($706) {
                      $28 = $699;
                      $707 = $28;
                      $27 = $707;
                      $708 = $27;
                      $26 = $708;
                      $709 = $26;
                      $710 = (($709) + 8|0);
                      $711 = HEAP32[$710>>2]|0;
                      $718 = $711;
                     } else {
                      $33 = $699;
                      $712 = $33;
                      $32 = $712;
                      $713 = $32;
                      $31 = $713;
                      $714 = $31;
                      $715 = (($714) + 1|0);
                      $30 = $715;
                      $716 = $30;
                      $29 = $716;
                      $717 = $29;
                      $718 = $717;
                     }
                     $25 = $718;
                     $719 = $25;
                     $720 = $40;
                     $24 = $720;
                     $721 = $24;
                     $23 = $721;
                     $722 = $23;
                     $22 = $722;
                     $723 = $22;
                     $21 = $723;
                     $724 = $21;
                     $725 = HEAP8[$724>>0]|0;
                     $726 = $725&255;
                     $727 = $726 & 1;
                     $728 = ($727|0)!=(0);
                     if ($728) {
                      $17 = $721;
                      $729 = $17;
                      $16 = $729;
                      $730 = $16;
                      $15 = $730;
                      $731 = $15;
                      $732 = (($731) + 4|0);
                      $733 = HEAP32[$732>>2]|0;
                      $740 = $733;
                     } else {
                      $20 = $721;
                      $734 = $20;
                      $19 = $734;
                      $735 = $19;
                      $18 = $735;
                      $736 = $18;
                      $737 = HEAP8[$736>>0]|0;
                      $738 = $737&255;
                      $739 = $738 >> 1;
                      $740 = $739;
                     }
                     __THREW__ = 0;
                     (invoke_iiii(478,($696|0),($719|0),($740|0))|0);
                     $741 = __THREW__; __THREW__ = 0;
                     $742 = $741&1;
                     do {
                      if (!($742)) {
                       $14 = $str1;
                       $743 = $14;
                       $13 = $743;
                       $744 = $13;
                       $12 = $744;
                       $745 = $12;
                       $11 = $745;
                       $746 = $11;
                       $10 = $746;
                       $747 = $10;
                       $9 = $747;
                       $748 = $9;
                       $749 = HEAP8[$748>>0]|0;
                       $750 = $749&255;
                       $751 = $750 & 1;
                       $752 = ($751|0)!=(0);
                       if ($752) {
                        $3 = $745;
                        $753 = $3;
                        $2 = $753;
                        $754 = $2;
                        $1 = $754;
                        $755 = $1;
                        $756 = (($755) + 8|0);
                        $757 = HEAP32[$756>>2]|0;
                        $764 = $757;
                       } else {
                        $8 = $745;
                        $758 = $8;
                        $7 = $758;
                        $759 = $7;
                        $6 = $759;
                        $760 = $6;
                        $761 = (($760) + 1|0);
                        $5 = $761;
                        $762 = $5;
                        $4 = $762;
                        $763 = $4;
                        $764 = $763;
                       }
                       $0 = $764;
                       $765 = $0;
                       __THREW__ = 0;
                       invoke_viii(419,($765|0),(1280|0),89);
                       $766 = __THREW__; __THREW__ = 0;
                       $767 = $766&1;
                       if ($767) {
                        break;
                       }
                       __THREW__ = 0;
                       invoke_vi(415,($str1|0));
                       $768 = __THREW__; __THREW__ = 0;
                       $769 = $768&1;
                       if ($769) {
                        label = 100;
                        break L82;
                       }
                       break L86;
                      }
                     } while(0);
                     $770 = ___cxa_find_matching_catch(-1,-1)|0;
                     $771 = tempRet0;
                     $216 = $770;
                     $217 = $771;
                     __THREW__ = 0;
                     invoke_vi(415,($str1|0));
                     $772 = __THREW__; __THREW__ = 0;
                     $773 = $772&1;
                     if ($773) {
                      $787 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                      $788 = tempRet0;
                      ___clang_call_terminate($787);
                      // unreachable;
                     } else {
                      break L82;
                     }
                    }
                   } while(0);
                   $774 = $shader;
                   $219 = 1;
                   __THREW__ = 0;
                   invoke_vi(415,($strSrc|0));
                   $775 = __THREW__; __THREW__ = 0;
                   $776 = $775&1;
                   if ($776) {
                    label = 99;
                    break L66;
                   }
                   __THREW__ = 0;
                   invoke_vi(3,($ss|0));
                   $777 = __THREW__; __THREW__ = 0;
                   $778 = $777&1;
                   if ($778) {
                    label = 38;
                    break L42;
                   }
                   __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
                   STACKTOP = sp;return ($774|0);
                  }
                 } while(0);
                 if ((label|0) == 100) {
                  $670 = ___cxa_find_matching_catch(-1,-1)|0;
                  $671 = tempRet0;
                  $216 = $670;
                  $217 = $671;
                 }
                 __THREW__ = 0;
                 invoke_vi(415,($strSrc|0));
                 $779 = __THREW__; __THREW__ = 0;
                 $780 = $779&1;
                 if ($780) {
                  $787 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                  $788 = tempRet0;
                  ___clang_call_terminate($787);
                  // unreachable;
                 } else {
                  break;
                 }
                }
               }
              } while(0);
              if ((label|0) == 99) {
               $668 = ___cxa_find_matching_catch(-1,-1)|0;
               $669 = tempRet0;
               $216 = $668;
               $217 = $669;
              }
              __THREW__ = 0;
              invoke_vi(3,($ss|0));
              $781 = __THREW__; __THREW__ = 0;
              $782 = $781&1;
              if ($782) {
               $787 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
               $788 = tempRet0;
               ___clang_call_terminate($787);
               // unreachable;
              } else {
               break L42;
              }
             }
            } while(0);
            __THREW__ = 0;
            invoke_vi(415,($501|0));
            $545 = __THREW__; __THREW__ = 0;
            $546 = $545&1;
            if ($546) {
             $553 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
             $554 = tempRet0;
             ___clang_call_terminate($553);
             // unreachable;
            }
            __THREW__ = 0;
            invoke_vi(447,($499|0));
            $547 = __THREW__; __THREW__ = 0;
            $548 = $547&1;
            if ($548) {
             $553 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
             $554 = tempRet0;
             ___clang_call_terminate($553);
             // unreachable;
            }
            $549 = $108;
            $550 = $109;
            $127 = $549;
            $128 = $550;
            __THREW__ = 0;
            $551 = __THREW__; __THREW__ = 0;
            $552 = $551&1;
            if ($552) {
             $562 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
             $563 = tempRet0;
             ___clang_call_terminate($562);
             // unreachable;
            } else {
             break;
            }
           }
          } while(0);
          $557 = (($431) + 64|0);
          __THREW__ = 0;
          invoke_vi(448,($557|0));
          $558 = __THREW__; __THREW__ = 0;
          $559 = $558&1;
          if ($559) {
           $562 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
           $563 = tempRet0;
           ___clang_call_terminate($562);
           // unreachable;
          } else {
           $560 = $127;
           $561 = $128;
           $eh$lpad$body$index2Z2D = $561;$eh$lpad$body$indexZ2D = $560;
           label = 39;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 38) {
        $417 = ___cxa_find_matching_catch(-1,-1)|0;
        $418 = tempRet0;
        $eh$lpad$body$index2Z2D = $418;$eh$lpad$body$indexZ2D = $417;
        label = 39;
       }
       if ((label|0) == 39) {
        $216 = $eh$lpad$body$indexZ2D;
        $217 = $eh$lpad$body$index2Z2D;
       }
       __THREW__ = 0;
       invoke_vi(37,($file|0));
       $783 = __THREW__; __THREW__ = 0;
       $784 = $783&1;
       if ($784) {
        $787 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $788 = tempRet0;
        ___clang_call_terminate($787);
        // unreachable;
       }
       $785 = $216;
       $786 = $217;
       ___resumeException($785|0);
       // unreachable;
      }
     } while(0);
     $307 = ___cxa_find_matching_catch(-1,-1)|0;
     $308 = tempRet0;
     $197 = $307;
     $198 = $308;
     __THREW__ = 0;
     invoke_vi(41,($279|0));
     $309 = __THREW__; __THREW__ = 0;
     $310 = $309&1;
     if ($310) {
      $318 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $319 = tempRet0;
      ___clang_call_terminate($318);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $311 = __THREW__; __THREW__ = 0;
   $312 = $311&1;
   if ($312) {
    $318 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $319 = tempRet0;
    ___clang_call_terminate($318);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $313 = (($244) + 108|0);
 __THREW__ = 0;
 invoke_vi(448,($313|0));
 $314 = __THREW__; __THREW__ = 0;
 $315 = $314&1;
 if ($315) {
  $318 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $319 = tempRet0;
  ___clang_call_terminate($318);
  // unreachable;
 } else {
  $316 = $197;
  $317 = $198;
  ___resumeException($316|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $$byval_copy = sp + 196|0;
 $35 = sp + 140|0;
 $__s = sp + 168|0;
 $94 = sp + 136|0;
 $95 = sp + 124|0;
 $90 = $__os;
 $91 = $__str;
 $96 = $90;
 __THREW__ = 0;
 invoke_vii(455,($__s|0),($96|0));
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 L1: do {
  if ($98) {
   label = 38;
  } else {
   $89 = $__s;
   $99 = $89;
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&1;
   L4: do {
    if ($101) {
     $102 = $91;
     $88 = $102;
     $103 = $88;
     $87 = $103;
     $104 = $87;
     $86 = $104;
     $105 = $86;
     $85 = $105;
     $106 = $85;
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $108 & 1;
     $110 = ($109|0)!=(0);
     if ($110) {
      $81 = $103;
      $111 = $81;
      $80 = $111;
      $112 = $80;
      $79 = $112;
      $113 = $79;
      $114 = (($113) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $122 = $115;
     } else {
      $84 = $103;
      $116 = $84;
      $83 = $116;
      $117 = $83;
      $82 = $117;
      $118 = $82;
      $119 = HEAP8[$118>>0]|0;
      $120 = $119&255;
      $121 = $120 >> 1;
      $122 = $121;
     }
     $__len = $122;
     $123 = $90;
     $77 = $94;
     $78 = $123;
     $124 = $77;
     $125 = $78;
     $75 = $124;
     $76 = $125;
     $126 = $75;
     $127 = $76;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($128) + -12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($127) + ($130)|0);
     $74 = $131;
     $132 = $74;
     $73 = $132;
     $133 = $73;
     $134 = (($133) + 24|0);
     $135 = HEAP32[$134>>2]|0;
     HEAP32[$126>>2] = $135;
     $136 = $91;
     $72 = $136;
     $137 = $72;
     $71 = $137;
     $138 = $71;
     $70 = $138;
     $139 = $70;
     $69 = $139;
     $140 = $69;
     $68 = $140;
     $141 = $68;
     $142 = HEAP8[$141>>0]|0;
     $143 = $142&255;
     $144 = $143 & 1;
     $145 = ($144|0)!=(0);
     if ($145) {
      $62 = $138;
      $146 = $62;
      $61 = $146;
      $147 = $61;
      $60 = $147;
      $148 = $60;
      $149 = (($148) + 8|0);
      $150 = HEAP32[$149>>2]|0;
      $157 = $150;
     } else {
      $67 = $138;
      $151 = $67;
      $66 = $151;
      $152 = $66;
      $65 = $152;
      $153 = $65;
      $154 = (($153) + 1|0);
      $64 = $154;
      $155 = $64;
      $63 = $155;
      $156 = $63;
      $157 = $156;
     }
     $59 = $157;
     $158 = $59;
     $159 = $90;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($160) + -12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($159) + ($162)|0);
     $54 = $163;
     $164 = $54;
     $165 = (($164) + 4|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $166 & 176;
     $168 = ($167|0)==(32);
     if ($168) {
      $169 = $91;
      $52 = $169;
      $170 = $52;
      $51 = $170;
      $171 = $51;
      $50 = $171;
      $172 = $50;
      $49 = $172;
      $173 = $49;
      $48 = $173;
      $174 = $48;
      $175 = HEAP8[$174>>0]|0;
      $176 = $175&255;
      $177 = $176 & 1;
      $178 = ($177|0)!=(0);
      if ($178) {
       $42 = $171;
       $179 = $42;
       $41 = $179;
       $180 = $41;
       $40 = $180;
       $181 = $40;
       $182 = (($181) + 8|0);
       $183 = HEAP32[$182>>2]|0;
       $190 = $183;
      } else {
       $47 = $171;
       $184 = $47;
       $46 = $184;
       $185 = $46;
       $45 = $185;
       $186 = $45;
       $187 = (($186) + 1|0);
       $44 = $187;
       $188 = $44;
       $43 = $188;
       $189 = $43;
       $190 = $189;
      }
      $39 = $190;
      $191 = $39;
      $192 = $__len;
      $193 = (($191) + ($192)|0);
      $289 = $193;
     } else {
      $194 = $91;
      $27 = $194;
      $195 = $27;
      $26 = $195;
      $196 = $26;
      $25 = $196;
      $197 = $25;
      $24 = $197;
      $198 = $24;
      $23 = $198;
      $199 = $23;
      $200 = HEAP8[$199>>0]|0;
      $201 = $200&255;
      $202 = $201 & 1;
      $203 = ($202|0)!=(0);
      if ($203) {
       $17 = $196;
       $204 = $17;
       $16 = $204;
       $205 = $16;
       $15 = $205;
       $206 = $15;
       $207 = (($206) + 8|0);
       $208 = HEAP32[$207>>2]|0;
       $215 = $208;
      } else {
       $22 = $196;
       $209 = $22;
       $21 = $209;
       $210 = $21;
       $20 = $210;
       $211 = $20;
       $212 = (($211) + 1|0);
       $19 = $212;
       $213 = $19;
       $18 = $213;
       $214 = $18;
       $215 = $214;
      }
      $14 = $215;
      $216 = $14;
      $289 = $216;
     }
     $217 = $91;
     $13 = $217;
     $218 = $13;
     $12 = $218;
     $219 = $12;
     $11 = $219;
     $220 = $11;
     $10 = $220;
     $221 = $10;
     $9 = $221;
     $222 = $9;
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = $224 & 1;
     $226 = ($225|0)!=(0);
     if ($226) {
      $3 = $219;
      $227 = $3;
      $2 = $227;
      $228 = $2;
      $1 = $228;
      $229 = $1;
      $230 = (($229) + 8|0);
      $231 = HEAP32[$230>>2]|0;
      $238 = $231;
     } else {
      $8 = $219;
      $232 = $8;
      $7 = $232;
      $233 = $7;
      $6 = $233;
      $234 = $6;
      $235 = (($234) + 1|0);
      $5 = $235;
      $236 = $5;
      $4 = $236;
      $237 = $4;
      $238 = $237;
     }
     $0 = $238;
     $239 = $0;
     $240 = $__len;
     $241 = (($239) + ($240)|0);
     $242 = $90;
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + -12|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = (($242) + ($245)|0);
     $247 = $90;
     $248 = HEAP32[$247>>2]|0;
     $249 = (($248) + -12|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = (($247) + ($250)|0);
     $38 = $251;
     $252 = $38;
     $253 = (($252) + 76|0);
     $254 = HEAP32[$253>>2]|0;
     $28 = -1;
     $29 = $254;
     $255 = $28;
     $256 = $29;
     $257 = ($255|0)==($256|0);
     do {
      if ($257) {
       $33 = $252;
       $34 = 32;
       $258 = $33;
       __THREW__ = 0;
       invoke_vii(456,($35|0),($258|0));
       $259 = __THREW__; __THREW__ = 0;
       $260 = $259&1;
       if ($260) {
        label = 39;
       } else {
        $32 = $35;
        $261 = $32;
        __THREW__ = 0;
        $262 = (invoke_iii(457,($261|0),(9136|0))|0);
        $263 = __THREW__; __THREW__ = 0;
        $264 = $263&1;
        if (!($264)) {
         $265 = $34;
         $30 = $262;
         $31 = $265;
         $266 = $30;
         $267 = HEAP32[$266>>2]|0;
         $268 = (($267) + 28|0);
         $269 = HEAP32[$268>>2]|0;
         $270 = $31;
         __THREW__ = 0;
         $271 = (invoke_iii($269|0,($266|0),($270|0))|0);
         $272 = __THREW__; __THREW__ = 0;
         $273 = $272&1;
         if (!($273)) {
          __THREW__ = 0;
          invoke_vi(458,($35|0));
          $282 = __THREW__; __THREW__ = 0;
          $283 = $282&1;
          if ($283) {
           label = 39;
           break;
          }
          $284 = $271 << 24 >> 24;
          $285 = (($252) + 76|0);
          HEAP32[$285>>2] = $284;
          label = 32;
          break;
         }
        }
        $274 = ___cxa_find_matching_catch(-1,-1,0|0,0|0)|0;
        $275 = tempRet0;
        $36 = $274;
        $37 = $275;
        __THREW__ = 0;
        invoke_vi(458,($35|0));
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         $280 = ___cxa_find_matching_catch(-1,-1,0|0,0|0,0|0)|0;
         $281 = tempRet0;
         ___clang_call_terminate($280);
         // unreachable;
        } else {
         $278 = $36;
         $279 = $37;
         $eh$lpad$body$index2Z2D = $279;$eh$lpad$body$indexZ2D = $278;
         break;
        }
       }
      } else {
       label = 32;
      }
     } while(0);
     do {
      if ((label|0) == 32) {
       $286 = (($252) + 76|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = $287&255;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$94+0>>2]|0;
       invoke_viiiiiii(459,($95|0),($$byval_copy|0),($158|0),($289|0),($241|0),($246|0),($288|0));
       $290 = __THREW__; __THREW__ = 0;
       $291 = $290&1;
       if ($291) {
        label = 39;
       } else {
        $53 = $95;
        $292 = $53;
        $293 = HEAP32[$292>>2]|0;
        $294 = ($293|0)==(0|0);
        if ($294) {
         $295 = $90;
         $296 = HEAP32[$295>>2]|0;
         $297 = (($296) + -12|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = (($295) + ($298)|0);
         $57 = $299;
         $58 = 5;
         $300 = $57;
         $301 = $58;
         $55 = $300;
         $56 = $301;
         $302 = $55;
         $303 = (($302) + 16|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = $56;
         $306 = $304 | $305;
         __THREW__ = 0;
         invoke_vii(460,($302|0),($306|0));
         $307 = __THREW__; __THREW__ = 0;
         $308 = $307&1;
         if ($308) {
          label = 39;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 39) {
      $311 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $312 = tempRet0;
      $eh$lpad$body$index2Z2D = $312;$eh$lpad$body$indexZ2D = $311;
     }
     $92 = $eh$lpad$body$indexZ2D;
     $93 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(461,($__s|0));
     $313 = __THREW__; __THREW__ = 0;
     $314 = $313&1;
     if ($314) {
      $332 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $333 = tempRet0;
      ___clang_call_terminate($332);
      // unreachable;
     } else {
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(461,($__s|0));
   $315 = __THREW__; __THREW__ = 0;
   $316 = $315&1;
   if ($316) {
    label = 38;
   } else {
    $325 = $90;
    STACKTOP = sp;return ($325|0);
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $309 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $310 = tempRet0;
  $92 = $309;
  $93 = $310;
 }
 $317 = $92;
 (___cxa_begin_catch(($317|0))|0);
 $318 = $90;
 $319 = HEAP32[$318>>2]|0;
 $320 = (($319) + -12|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = (($318) + ($321)|0);
 __THREW__ = 0;
 invoke_vi(462,($322|0));
 $323 = __THREW__; __THREW__ = 0;
 $324 = $323&1;
 if (!($324)) {
  ___cxa_end_catch();
  $325 = $90;
  STACKTOP = sp;return ($325|0);
 }
 $326 = ___cxa_find_matching_catch(-1,-1)|0;
 $327 = tempRet0;
 $92 = $326;
 $93 = $327;
 __THREW__ = 0;
 invoke_v(463);
 $328 = __THREW__; __THREW__ = 0;
 $329 = $328&1;
 if ($329) {
  $332 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $333 = tempRet0;
  ___clang_call_terminate($332);
  // unreachable;
 }
 $330 = $92;
 $331 = $93;
 ___resumeException($330|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(490,($3|0),(1424|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 108|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch(-1,-1)|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 108|0);
 __THREW__ = 0;
 invoke_vi(448,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZN7gltools15ShaderContainerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $7 = sp + 64|0;
 $8 = sp;
 $9 = sp + 8|0;
 $25 = sp + 76|0;
 $26 = sp + 44|0;
 $24 = $this;
 $29 = $24;
 $23 = $29;
 $30 = $23;
 $22 = $30;
 $31 = $22;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $20 = $25;
 $21 = $33;
 $34 = $20;
 $35 = $21;
 $18 = $34;
 $19 = $35;
 $36 = $18;
 $37 = $19;
 HEAP32[$36>>2] = $37;
 $17 = $29;
 $38 = $17;
 $16 = $38;
 $39 = $16;
 $15 = $39;
 $40 = $15;
 $14 = $40;
 $41 = $14;
 $12 = $26;
 $13 = $41;
 $42 = $12;
 $43 = $13;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 $45 = $11;
 HEAP32[$44>>2] = $45;
 ;HEAP8[$9+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$9+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$25+3>>0]|0;
 ;HEAP8[$8+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$8+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$26+3>>0]|0;
 HEAP32[$7>>2] = 489;
 while(1) {
  $5 = $9;
  $6 = $8;
  $46 = $5;
  $47 = $6;
  $3 = $46;
  $4 = $47;
  $48 = $3;
  $49 = HEAP32[$48>>2]|0;
  $50 = $4;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($49|0)==($51|0);
  $53 = $52 ^ 1;
  if (!($53)) {
   label = 5;
   break;
  }
  $54 = HEAP32[$7>>2]|0;
  $0 = $9;
  $55 = $0;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  __THREW__ = 0;
  invoke_vi($54|0,($58|0));
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if ($60) {
   break;
  }
  $1 = $9;
  $61 = $1;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$61>>2] = $64;
 }
 if ((label|0) == 5) {
  $2 = $7;
  __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($29);
  STACKTOP = sp;return;
 }
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $27 = $65;
 $28 = $66;
 __THREW__ = 0;
 invoke_vi(491,($29|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $71 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $69 = $27;
 $70 = $28;
 ___resumeException($69|0);
 // unreachable;
}
function __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__list_impIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $4 = sp + 132|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 100|0;
 $30 = sp + 48|0;
 $31 = sp + 52|0;
 $32 = $this;
 $33 = $__n;
 $36 = $32;
 $28 = $36;
 $37 = $28;
 $27 = $37;
 $2 = $4;
 $3 = -1;
 $38 = $2;
 $39 = $3;
 $0 = $38;
 $1 = $39;
 $40 = $0;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $41;
 $5 = $29;
 HEAP32[$37>>2] = 0;
 $42 = (($37) + 4|0);
 $8 = $10;
 $9 = -1;
 $43 = $8;
 $44 = $9;
 $6 = $43;
 $7 = $44;
 $45 = $6;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $46;
 $11 = $30;
 HEAP32[$42>>2] = 0;
 $47 = (($37) + 8|0);
 $14 = $16;
 $15 = -1;
 $48 = $14;
 $49 = $15;
 $12 = $48;
 $13 = $49;
 $50 = $12;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $51;
 $17 = $31;
 $25 = $47;
 $26 = 0;
 $52 = $25;
 $53 = $26;
 $23 = $52;
 HEAP32[$24>>2] = $53;
 $54 = $23;
 $22 = $24;
 $55 = $22;
 $56 = HEAP32[$55>>2]|0;
 $20 = $54;
 HEAP32[$21>>2] = $56;
 $57 = $20;
 $19 = $57;
 $18 = $21;
 $58 = $18;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = $33;
 $61 = ($60>>>0)>(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $33;
 __THREW__ = 0;
 invoke_vii(492,($36|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if (!($64)) {
  $65 = $33;
  __THREW__ = 0;
  invoke_vii(493,($36|0),($65|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if (!($67)) {
   STACKTOP = sp;return;
  }
 }
 $68 = ___cxa_find_matching_catch(-1,-1)|0;
 $69 = tempRet0;
 $34 = $68;
 $35 = $69;
 __THREW__ = 0;
 invoke_vi(494,($36|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $74 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $75 = tempRet0;
  ___clang_call_terminate($74);
  // unreachable;
 }
 $72 = $34;
 $73 = $35;
 ___resumeException($72|0);
 // unreachable;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $11 = $this;
 $12 = $__n;
 $13 = $11;
 $14 = $12;
 $15 = (__ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($13)|0);
 $16 = ($14>>>0)>($15>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($13);
 }
 $10 = $13;
 $17 = $10;
 $18 = (($17) + 8|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $21 = $12;
 $3 = $20;
 $4 = $21;
 $22 = $3;
 $23 = $4;
 $0 = $22;
 $1 = $23;
 $2 = 0;
 $24 = $1;
 $25 = (__Znwj($24)|0);
 $26 = (($13) + 4|0);
 HEAP32[$26>>2] = $25;
 HEAP32[$13>>2] = $25;
 $27 = HEAP32[$13>>2]|0;
 $28 = $12;
 $29 = (($27) + ($28)|0);
 $7 = $13;
 $30 = $7;
 $31 = (($30) + 8|0);
 $6 = $31;
 $32 = $6;
 $5 = $32;
 $33 = $5;
 HEAP32[$33>>2] = $29;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $16 = $0;
  $1 = $13;
  $2 = $16;
  $17 = $2;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   HEAP8[$17>>0] = 0;
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp;
 $6 = sp + 132|0;
 $31 = sp + 88|0;
 $33 = sp + 20|0;
 $32 = $this;
 $34 = $32;
 $35 = HEAP32[$34>>2]|0;
 $29 = $31;
 $30 = -1;
 $36 = $29;
 $37 = $30;
 $27 = $36;
 $28 = $37;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$31>>2]|0;
 HEAP32[$33>>2] = $39;
 $20 = $33;
 $40 = ($35|0)!=(0|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $12 = $34;
 $41 = $12;
 $42 = HEAP32[$41>>2]|0;
 $10 = $41;
 $11 = $42;
 $43 = $10;
 while(1) {
  $44 = $11;
  $45 = (($43) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($44|0)!=($46|0);
  if (!($47)) {
   break;
  }
  $9 = $43;
  $48 = $9;
  $49 = (($48) + 8|0);
  $8 = $49;
  $50 = $8;
  $7 = $50;
  $51 = $7;
  $52 = (($43) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -1|0);
  HEAP32[$52>>2] = $54;
  $0 = $54;
  $55 = $0;
  $4 = $51;
  $5 = $55;
  $56 = $4;
  $57 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $56;
  $2 = $57;
 }
 $15 = $34;
 $58 = $15;
 $59 = (($58) + 8|0);
 $14 = $59;
 $60 = $14;
 $13 = $60;
 $61 = $13;
 $62 = HEAP32[$34>>2]|0;
 $19 = $34;
 $63 = $19;
 $18 = $63;
 $64 = $18;
 $65 = (($64) + 8|0);
 $17 = $65;
 $66 = $17;
 $16 = $66;
 $67 = $16;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $24 = $61;
 $25 = $62;
 $26 = $72;
 $73 = $24;
 $74 = $25;
 $75 = $26;
 $21 = $73;
 $22 = $74;
 $23 = $75;
 $76 = $22;
 __ZdlPv($76);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = -1;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $34 = sp + 152|0;
 $35 = sp + 156|0;
 $38 = sp + 168|0;
 $39 = sp + 172|0;
 $45 = sp + 16|0;
 $46 = sp;
 $__h = sp + 24|0;
 $50 = $this;
 $53 = $50;
 $__rt = 0;
 $54 = (($53) + 64|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $144 = $__rt;
  STACKTOP = sp;return ($144|0);
 }
 $__rt = $53;
 $57 = (($53) + 64|0);
 $58 = HEAP32[$57>>2]|0;
 $47 = $__h;
 $48 = $58;
 $49 = 495;
 $59 = $47;
 $60 = $48;
 $61 = $49;
 $44 = $59;
 HEAP32[$45>>2] = $60;
 HEAP32[$46>>2] = $61;
 $62 = $44;
 $43 = $45;
 $63 = $43;
 $64 = HEAP32[$63>>2]|0;
 $29 = $46;
 $65 = $29;
 $66 = HEAP32[$65>>2]|0;
 $40 = $62;
 $41 = $64;
 $42 = $66;
 $67 = $40;
 $68 = $41;
 $69 = $42;
 $37 = $67;
 HEAP32[$38>>2] = $68;
 HEAP32[$39>>2] = $69;
 $70 = $37;
 $36 = $38;
 $71 = $36;
 $72 = HEAP32[$71>>2]|0;
 $30 = $39;
 $73 = $30;
 $74 = HEAP32[$73>>2]|0;
 $33 = $70;
 HEAP32[$34>>2] = $72;
 HEAP32[$35>>2] = $74;
 $75 = $33;
 $32 = $34;
 $76 = $32;
 $77 = HEAP32[$76>>2]|0;
 HEAP32[$75>>2] = $77;
 $78 = (($75) + 4|0);
 $31 = $35;
 $79 = $31;
 $80 = HEAP32[$79>>2]|0;
 HEAP32[$78>>2] = $80;
 $81 = HEAP32[$53>>2]|0;
 $82 = (($81) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 __THREW__ = 0;
 $84 = (invoke_ii($83|0,($53|0))|0);
 $85 = __THREW__; __THREW__ = 0;
 $86 = $85&1;
 if (!($86)) {
  $87 = ($84|0)!=(0);
  if ($87) {
   $__rt = 0;
  }
  $16 = $__h;
  $111 = $16;
  $15 = $111;
  $112 = $15;
  $14 = $112;
  $113 = $14;
  $114 = HEAP32[$113>>2]|0;
  $__t$i = $114;
  $13 = $111;
  $115 = $13;
  $12 = $115;
  $116 = $12;
  HEAP32[$116>>2] = 0;
  $117 = $__t$i;
  __THREW__ = 0;
  $118 = (invoke_ii(495,($117|0))|0);
  $119 = __THREW__; __THREW__ = 0;
  $120 = $119&1;
  if (!($120)) {
   $121 = ($118|0)==(0);
   if ($121) {
    $122 = (($53) + 64|0);
    HEAP32[$122>>2] = 0;
   } else {
    $__rt = 0;
   }
   $11 = $__h;
   $123 = $11;
   $10 = $123;
   $124 = $10;
   $6 = $124;
   $7 = 0;
   $125 = $6;
   $5 = $125;
   $126 = $5;
   $4 = $126;
   $127 = $4;
   $128 = HEAP32[$127>>2]|0;
   $__tmp$i$i$i1 = $128;
   $129 = $7;
   $3 = $125;
   $130 = $3;
   $2 = $130;
   $131 = $2;
   HEAP32[$131>>2] = $129;
   $132 = $__tmp$i$i$i1;
   $133 = ($132|0)!=(0|0);
   do {
    if ($133) {
     $1 = $125;
     $134 = $1;
     $0 = $134;
     $135 = $0;
     $136 = (($135) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $__tmp$i$i$i1;
     __THREW__ = 0;
     (invoke_ii($137|0,($138|0))|0);
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if ($140) {
      $141 = ___cxa_find_matching_catch(-1,-1)|0;
      $142 = tempRet0;
      $8 = $141;
      $9 = $142;
      $143 = $8;
      ___cxa_call_unexpected(($143|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $144 = $__rt;
   STACKTOP = sp;return ($144|0);
  }
 }
 $88 = ___cxa_find_matching_catch(-1,-1)|0;
 $89 = tempRet0;
 $51 = $88;
 $52 = $89;
 $28 = $__h;
 $90 = $28;
 $27 = $90;
 $91 = $27;
 $23 = $91;
 $24 = 0;
 $92 = $23;
 $22 = $92;
 $93 = $22;
 $21 = $93;
 $94 = $21;
 $95 = HEAP32[$94>>2]|0;
 $__tmp$i$i$i = $95;
 $96 = $24;
 $20 = $92;
 $97 = $20;
 $19 = $97;
 $98 = $19;
 HEAP32[$98>>2] = $96;
 $99 = $__tmp$i$i$i;
 $100 = ($99|0)!=(0|0);
 do {
  if ($100) {
   $18 = $92;
   $101 = $18;
   $17 = $101;
   $102 = $17;
   $103 = (($102) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $__tmp$i$i$i;
   __THREW__ = 0;
   (invoke_ii($104|0,($105|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $109 = tempRet0;
    $25 = $108;
    $26 = $109;
    $110 = $25;
    ___cxa_call_unexpected(($110|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $145 = $51;
 $146 = $52;
 ___resumeException($145|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $30 = $__rt;
  STACKTOP = sp;return ($30|0);
 }
 $__rt = $3;
 $7 = $2;
 $8 = $7 & -3;
 do {
  switch ($8|0) {
  case 48: case 16:  {
   $__mdstr = 1672;
   break;
  }
  case 5: case 21:  {
   $__mdstr = 1728;
   break;
  }
  case 8:  {
   $__mdstr = 1688;
   break;
  }
  case 1: case 17:  {
   $__mdstr = 1680;
   break;
  }
  case 24:  {
   $__mdstr = 1696;
   break;
  }
  case 13: case 29:  {
   $__mdstr = 1760;
   break;
  }
  case 28:  {
   $__mdstr = 1744;
   break;
  }
  case 12:  {
   $__mdstr = 1736;
   break;
  }
  case 60:  {
   $__mdstr = 1752;
   break;
  }
  case 56:  {
   $__mdstr = 1704;
   break;
  }
  case 52: case 20:  {
   $__mdstr = 1720;
   break;
  }
  case 9: case 25:  {
   $__mdstr = 1712;
   break;
  }
  default: {
   $__rt = 0;
  }
  }
 } while(0);
 $9 = $__rt;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $__mdstr;
  $13 = (_fopen(($11|0),($12|0))|0);
  $14 = (($3) + 64|0);
  HEAP32[$14>>2] = $13;
  $15 = (($3) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $2;
   $19 = (($3) + 88|0);
   HEAP32[$19>>2] = $18;
   $20 = $2;
   $21 = $20 & 2;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = (($3) + 64|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_fseek(($24|0),0,2)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = (($3) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     (_fclose(($28|0))|0);
     $29 = (($3) + 64|0);
     HEAP32[$29>>2] = 0;
     $__rt = 0;
    }
   }
  } else {
   $__rt = 0;
  }
 }
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(37,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($4) + 8|0);
 __THREW__ = 0;
 invoke_vi(41,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1)|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 $20 = $2;
 $21 = $3;
 ___resumeException($20|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (1544 + 8|0);
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(481,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   $1 = $7;
   $2 = $8;
   $9 = $1;
   (___cxa_begin_catch(($9|0))|0);
   __THREW__ = 0;
   invoke_v(463);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    break;
   }
   $18 = ___cxa_find_matching_catch(-1,-1)|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __THREW__ = 0;
   invoke_vi(447,($3|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   }
   $28 = $1;
   $29 = $2;
   ___resumeException($28|0);
   // unreachable;
  } else {
  }
 } while(0);
 $12 = (($3) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = (($3) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $22 = (($3) + 97|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $25 = (($3) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  __ZdaPv($26);
 }
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(41,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,9200)|0);
 $18 = (($11) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = (($11) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = (($11) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = (($11) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = (($11) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = (($40) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = (($40) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = (($40) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = (($47) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = (($47) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = (($47) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = (($11) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 if ($55) {
  $56 = (($11) + 96|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&1;
  if ($58) {
   $59 = (($11) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = (($11) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = (($11) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = (($11) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($11) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = (($11) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($11) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = (($11) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = (($11) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = (($11) + 97|0);
  HEAP8[$75>>0] = 0;
 } else {
  $76 = (($11) + 96|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&1;
  if ($78) {
   label = 11;
  } else {
   $79 = (($11) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($11) + 44|0);
   $82 = ($80|0)!=($81|0);
   if ($82) {
    $83 = (($11) + 52|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($11) + 60|0);
    HEAP32[$85>>2] = $84;
    $86 = (($11) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($11) + 56|0);
    HEAP32[$88>>2] = $87;
    $89 = (($11) + 97|0);
    HEAP8[$89>>0] = 0;
    $90 = (($11) + 52|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (__Znaj($91)|0);
    $93 = (($11) + 32|0);
    HEAP32[$93>>2] = $92;
    $94 = (($11) + 96|0);
    HEAP8[$94>>0] = 1;
   } else {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   $95 = (($11) + 52|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($11) + 60|0);
   HEAP32[$97>>2] = $96;
   $98 = (($11) + 60|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (__Znaj($99)|0);
   $101 = (($11) + 56|0);
   HEAP32[$101>>2] = $100;
   $102 = (($11) + 97|0);
   HEAP8[$102>>0] = 1;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 20|0;
 $19 = sp + 32|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = (($21) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = (($21) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = (($21) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = (($28) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = (($28) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = (($28) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = (($20) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = (($20) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = (($20) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = (($20) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = (($20) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = (($20) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 if ($50) {
  $51 = (($20) + 98|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&1;
  if ($53) {
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $17;
    $57 = (($20) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = (($20) + 96|0);
    HEAP8[$58>>0] = 0;
   } else {
    label = 13;
   }
  } else {
   label = 13;
  }
  if ((label|0) == 13) {
   $59 = (($20) + 52|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (__Znaj($60)|0);
   $62 = (($20) + 32|0);
   HEAP32[$62>>2] = $61;
   $63 = (($20) + 96|0);
   HEAP8[$63>>0] = 1;
  }
 } else {
  $64 = (($20) + 44|0);
  $65 = (($20) + 32|0);
  HEAP32[$65>>2] = $64;
  $66 = (($20) + 52|0);
  HEAP32[$66>>2] = 8;
  $67 = (($20) + 96|0);
  HEAP8[$67>>0] = 0;
 }
 $68 = (($20) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = (($20) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = (($20) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = (($20) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 if ($79) {
  $80 = $7;
  $83 = $80;
 } else {
  $81 = $6;
  $83 = $81;
 }
 $82 = HEAP32[$83>>2]|0;
 $84 = (($20) + 60|0);
 HEAP32[$84>>2] = $82;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = (($20) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = (($20) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = (($20) + 97|0);
   HEAP8[$92>>0] = 0;
  } else {
   label = 23;
  }
 } else {
  label = 23;
 }
 if ((label|0) == 23) {
  $93 = (($20) + 60|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (__Znaj($94)|0);
  $96 = (($20) + 56|0);
  HEAP32[$96>>2] = $95;
  $97 = (($20) + 97|0);
  HEAP8[$97>>0] = 1;
 }
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $4 = sp + 32|0;
 $6 = sp + 40|0;
 $8 = sp + 72|0;
 $10 = sp + 48|0;
 $12 = sp + 16|0;
 $14 = sp;
 $16 = sp + 88|0;
 $18 = sp + 24|0;
 $20 = sp + 80|0;
 $23 = sp + 8|0;
 $__r = sp + 56|0;
 $26 = sp + 160|0;
 $22 = $this;
 $27 = $23;
 $28 = $27;
 HEAP32[$28>>2] = $0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 $24 = $__way;
 $25 = $2;
 $31 = $22;
 $32 = (($31) + 68|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($35);
  ___cxa_throw(($35|0),(17096|0),(390|0));
  // unreachable;
 }
 $36 = (($31) + 68|0);
 $37 = HEAP32[$36>>2]|0;
 $21 = $37;
 $38 = $21;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_ii[$41 & 1023]($38)|0);
 $__width = $42;
 $43 = (($31) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 do {
  if (!($45)) {
   $46 = $__width;
   $47 = ($46|0)<=(0);
   if ($47) {
    $48 = $23;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($50|0)!=(0);
    $55 = ($53|0)!=(0);
    $56 = $54 | $55;
    if ($56) {
     break;
    }
   }
   $57 = HEAP32[$31>>2]|0;
   $58 = (($57) + 24|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (FUNCTION_TABLE_ii[$59 & 1023]($31)|0);
   $61 = ($60|0)!=(0);
   if (!($61)) {
    $89 = $24;
    if ((($89|0) == 1)) {
     $__whence = 1;
    } else if ((($89|0) == 0)) {
     $__whence = 0;
    } else if ((($89|0) == 2)) {
     $__whence = 2;
    } else {
     $5 = $agg$result;
     $90 = $6;
     $91 = $90;
     HEAP32[$91>>2] = -1;
     $92 = (($90) + 4)|0;
     $93 = $92;
     HEAP32[$93>>2] = -1;
     $94 = $5;
     $95 = $6;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = (($95) + 4)|0;
     $99 = $98;
     $100 = HEAP32[$99>>2]|0;
     $3 = $94;
     $101 = $4;
     $102 = $101;
     HEAP32[$102>>2] = $97;
     $103 = (($101) + 4)|0;
     $104 = $103;
     HEAP32[$104>>2] = $100;
     $105 = $3;
     ;HEAP32[$105+0>>2]=0|0;HEAP32[$105+4>>2]=0|0;
     $106 = (($105) + 8|0);
     $107 = $4;
     $108 = $107;
     $109 = HEAP32[$108>>2]|0;
     $110 = (($107) + 4)|0;
     $111 = $110;
     $112 = HEAP32[$111>>2]|0;
     $113 = $106;
     $114 = $113;
     HEAP32[$114>>2] = $109;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
     STACKTOP = sp;return;
    }
    $117 = (($31) + 64|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__width;
    $120 = ($119|0)>(0);
    if ($120) {
     $121 = $__width;
     $122 = ($121|0)<(0);
     $123 = $122 << 31 >> 31;
     $124 = $23;
     $125 = $124;
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + 4)|0;
     $128 = $127;
     $129 = HEAP32[$128>>2]|0;
     $130 = (___muldi3(($121|0),($123|0),($126|0),($129|0))|0);
     $131 = tempRet0;
     $133 = $130;$197 = $131;
    } else {
     $133 = 0;$197 = 0;
    }
    $132 = $__whence;
    $134 = (_fseeko(($118|0),($133|0),($132|0))|0);
    $135 = ($134|0)!=(0);
    if ($135) {
     $9 = $agg$result;
     $136 = $10;
     $137 = $136;
     HEAP32[$137>>2] = -1;
     $138 = (($136) + 4)|0;
     $139 = $138;
     HEAP32[$139>>2] = -1;
     $140 = $9;
     $141 = $10;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = (($141) + 4)|0;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $7 = $140;
     $147 = $8;
     $148 = $147;
     HEAP32[$148>>2] = $143;
     $149 = (($147) + 4)|0;
     $150 = $149;
     HEAP32[$150>>2] = $146;
     $151 = $7;
     ;HEAP32[$151+0>>2]=0|0;HEAP32[$151+4>>2]=0|0;
     $152 = (($151) + 8|0);
     $153 = $8;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = (($153) + 4)|0;
     $157 = $156;
     $158 = HEAP32[$157>>2]|0;
     $159 = $152;
     $160 = $159;
     HEAP32[$160>>2] = $155;
     $161 = (($159) + 4)|0;
     $162 = $161;
     HEAP32[$162>>2] = $158;
     STACKTOP = sp;return;
    } else {
     $163 = (($31) + 64|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (_ftello(($164|0))|0);
     $166 = ($165|0)<(0);
     $167 = $166 << 31 >> 31;
     $13 = $__r;
     $168 = $14;
     $169 = $168;
     HEAP32[$169>>2] = $165;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     $172 = $13;
     $173 = $14;
     $174 = $173;
     $175 = HEAP32[$174>>2]|0;
     $176 = (($173) + 4)|0;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $11 = $172;
     $179 = $12;
     $180 = $179;
     HEAP32[$180>>2] = $175;
     $181 = (($179) + 4)|0;
     $182 = $181;
     HEAP32[$182>>2] = $178;
     $183 = $11;
     ;HEAP32[$183+0>>2]=0|0;HEAP32[$183+4>>2]=0|0;
     $184 = (($183) + 8|0);
     $185 = $12;
     $186 = $185;
     $187 = HEAP32[$186>>2]|0;
     $188 = (($185) + 4)|0;
     $189 = $188;
     $190 = HEAP32[$189>>2]|0;
     $191 = $184;
     $192 = $191;
     HEAP32[$192>>2] = $187;
     $193 = (($191) + 4)|0;
     $194 = $193;
     HEAP32[$194>>2] = $190;
     $195 = (($31) + 72|0);
     ;HEAP32[$26+0>>2]=HEAP32[$195+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$195+4>>2]|0;
     ;HEAP8[$16+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$16+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$16+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$16+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$16+7>>0]=HEAP8[$26+7>>0]|0;
     $15 = $__r;
     $196 = $15;
     ;HEAP32[$196+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$196+4>>2]=HEAP32[$16+4>>2]|0;
     ;HEAP32[$agg$result+0>>2]=HEAP32[$__r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $19 = $agg$result;
 $62 = $20;
 $63 = $62;
 HEAP32[$63>>2] = -1;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = -1;
 $66 = $19;
 $67 = $20;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $17 = $66;
 $73 = $18;
 $74 = $73;
 HEAP32[$74>>2] = $69;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $72;
 $77 = $17;
 ;HEAP32[$77+0>>2]=0|0;HEAP32[$77+4>>2]=0|0;
 $78 = (($77) + 8|0);
 $79 = $18;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = $78;
 $86 = $85;
 HEAP32[$86>>2] = $81;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp + 8|0;
 $5 = sp + 24|0;
 $8 = sp + 16|0;
 $10 = sp;
 $13 = sp + 56|0;
 $11 = $this;
 $12 = $0;
 $14 = $11;
 $15 = (($14) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = HEAP32[$14>>2]|0;
  $19 = (($18) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($14)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   $50 = (($14) + 64|0);
   $51 = HEAP32[$50>>2]|0;
   $1 = $__sp;
   $52 = $1;
   $53 = (($52) + 8|0);
   $54 = $53;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (_fseeko(($51|0),($56|0),0)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    $4 = $agg$result;
    $62 = $5;
    $63 = $62;
    HEAP32[$63>>2] = -1;
    $64 = (($62) + 4)|0;
    $65 = $64;
    HEAP32[$65>>2] = -1;
    $66 = $4;
    $67 = $5;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($67) + 4)|0;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $2 = $66;
    $73 = $3;
    $74 = $73;
    HEAP32[$74>>2] = $69;
    $75 = (($73) + 4)|0;
    $76 = $75;
    HEAP32[$76>>2] = $72;
    $77 = $2;
    ;HEAP32[$77+0>>2]=0|0;HEAP32[$77+4>>2]=0|0;
    $78 = (($77) + 8|0);
    $79 = $3;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($79) + 4)|0;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = $78;
    $86 = $85;
    HEAP32[$86>>2] = $81;
    $87 = (($85) + 4)|0;
    $88 = $87;
    HEAP32[$88>>2] = $84;
    STACKTOP = sp;return;
   } else {
    $89 = (($14) + 72|0);
    $6 = $__sp;
    $90 = $6;
    ;HEAP32[$13+0>>2]=HEAP32[$90+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$90+4>>2]|0;
    ;HEAP32[$89+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$13+4>>2]|0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__sp+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $9 = $agg$result;
 $23 = $10;
 $24 = $23;
 HEAP32[$24>>2] = -1;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = -1;
 $27 = $9;
 $28 = $10;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $7 = $27;
 $34 = $8;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = $7;
 ;HEAP32[$38+0>>2]=0|0;HEAP32[$38+4>>2]=0|0;
 $39 = (($38) + 8|0);
 $40 = $8;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $39;
 $47 = $46;
 HEAP32[$47>>2] = $42;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $__extbe = sp + 124|0;
 $__c = sp;
 $__state = sp + 64|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $243 = $25;
  STACKTOP = sp;return ($243|0);
 }
 $31 = (($27) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(17096|0),(390|0));
  // unreachable;
 }
 $35 = (($27) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 do {
  if ($38) {
   $24 = $27;
   $39 = $24;
   $40 = (($39) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $14 = $27;
   $42 = $14;
   $43 = (($42) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)!=($44|0);
   do {
    if ($45) {
     $46 = HEAP32[$27>>2]|0;
     $47 = (($46) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (FUNCTION_TABLE_iii[$48 & 1023]($27,-1)|0);
     $50 = ($49|0)==(-1);
     if (!($50)) {
      break;
     }
     $25 = -1;
     $243 = $25;
     STACKTOP = sp;return ($243|0);
    }
   } while(0);
   while(1) {
    $51 = (($27) + 68|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($27) + 72|0);
    $54 = (($27) + 32|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($27) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($27) + 52|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($57) + ($59)|0);
    $0 = $52;
    $1 = $53;
    $2 = $55;
    $3 = $60;
    $4 = $__extbe;
    $61 = $0;
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + 20|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $1;
    $66 = $2;
    $67 = $3;
    $68 = $4;
    $69 = (FUNCTION_TABLE_iiiiii[$64 & 1023]($61,$65,$66,$67,$68)|0);
    $__r = $69;
    $70 = HEAP32[$__extbe>>2]|0;
    $71 = (($27) + 32|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $70;
    $74 = $72;
    $75 = (($73) - ($74))|0;
    $__nmemb = $75;
    $76 = (($27) + 32|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $__nmemb;
    $79 = (($27) + 64|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (_fwrite(($77|0),1,($78|0),($80|0))|0);
    $82 = $__nmemb;
    $83 = ($81|0)!=($82|0);
    if ($83) {
     label = 12;
     break;
    }
    $84 = $__r;
    $85 = ($84|0)==(1);
    if (!($85)) {
     break;
    }
   }
   if ((label|0) == 12) {
    $25 = -1;
    $243 = $25;
    STACKTOP = sp;return ($243|0);
   }
   $86 = $__r;
   $87 = ($86|0)==(2);
   if ($87) {
    $25 = -1;
    $243 = $25;
    STACKTOP = sp;return ($243|0);
   }
   $88 = (($27) + 64|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (_fflush(($89|0))|0);
   $91 = ($90|0)!=(0);
   if (!($91)) {
    break;
   }
   $25 = -1;
   $243 = $25;
   STACKTOP = sp;return ($243|0);
  } else {
   $92 = (($27) + 92|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 & 8;
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = (($27) + 80|0);
    ;HEAP32[$__state+0>>2]=HEAP32[$96+0>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$96+4>>2]|0;
    $__update_st = 0;
    $97 = (($27) + 98|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&1;
    if ($99) {
     $5 = $27;
     $100 = $5;
     $101 = (($100) + 16|0);
     $102 = HEAP32[$101>>2]|0;
     $6 = $27;
     $103 = $6;
     $104 = (($103) + 12|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $102;
     $107 = $105;
     $108 = (($106) - ($107))|0;
     $109 = ($108|0)<(0);
     $110 = $109 << 31 >> 31;
     $111 = $__c;
     $112 = $111;
     HEAP32[$112>>2] = $108;
     $113 = (($111) + 4)|0;
     $114 = $113;
     HEAP32[$114>>2] = $110;
    } else {
     $115 = (($27) + 68|0);
     $116 = HEAP32[$115>>2]|0;
     $7 = $116;
     $117 = $7;
     $118 = HEAP32[$117>>2]|0;
     $119 = (($118) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (FUNCTION_TABLE_ii[$120 & 1023]($117)|0);
     $__width = $121;
     $122 = (($27) + 40|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($27) + 36|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $123;
     $127 = $125;
     $128 = (($126) - ($127))|0;
     $129 = ($128|0)<(0);
     $130 = $129 << 31 >> 31;
     $131 = $__c;
     $132 = $131;
     HEAP32[$132>>2] = $128;
     $133 = (($131) + 4)|0;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = $__width;
     $136 = ($135|0)>(0);
     if ($136) {
      $137 = $__width;
      $8 = $27;
      $138 = $8;
      $139 = (($138) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $9 = $27;
      $141 = $9;
      $142 = (($141) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = $140;
      $145 = $143;
      $146 = (($144) - ($145))|0;
      $147 = Math_imul($137, $146)|0;
      $148 = ($147|0)<(0);
      $149 = $148 << 31 >> 31;
      $150 = $__c;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $156 = (_i64Add(($152|0),($155|0),($147|0),($149|0))|0);
      $157 = tempRet0;
      $158 = $__c;
      $159 = $158;
      HEAP32[$159>>2] = $156;
      $160 = (($158) + 4)|0;
      $161 = $160;
      HEAP32[$161>>2] = $157;
     } else {
      $10 = $27;
      $162 = $10;
      $163 = (($162) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $11 = $27;
      $165 = $11;
      $166 = (($165) + 16|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($164|0)!=($167|0);
      if ($168) {
       $169 = (($27) + 68|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = (($27) + 32|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (($27) + 36|0);
       $174 = HEAP32[$173>>2]|0;
       $12 = $27;
       $175 = $12;
       $176 = (($175) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       $13 = $27;
       $178 = $13;
       $179 = (($178) + 8|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = $177;
       $182 = $180;
       $183 = (($181) - ($182))|0;
       $15 = $170;
       $16 = $__state;
       $17 = $172;
       $18 = $174;
       $19 = $183;
       $184 = $15;
       $185 = HEAP32[$184>>2]|0;
       $186 = (($185) + 32|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = $16;
       $189 = $17;
       $190 = $18;
       $191 = $19;
       $192 = (FUNCTION_TABLE_iiiiii[$187 & 1023]($184,$188,$189,$190,$191)|0);
       $__off = $192;
       $193 = (($27) + 36|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = (($27) + 32|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = $194;
       $198 = $196;
       $199 = (($197) - ($198))|0;
       $200 = $__off;
       $201 = (($199) - ($200))|0;
       $202 = ($201|0)<(0);
       $203 = $202 << 31 >> 31;
       $204 = $__c;
       $205 = $204;
       $206 = HEAP32[$205>>2]|0;
       $207 = (($204) + 4)|0;
       $208 = $207;
       $209 = HEAP32[$208>>2]|0;
       $210 = (_i64Add(($206|0),($209|0),($201|0),($203|0))|0);
       $211 = tempRet0;
       $212 = $__c;
       $213 = $212;
       HEAP32[$213>>2] = $210;
       $214 = (($212) + 4)|0;
       $215 = $214;
       HEAP32[$215>>2] = $211;
       $__update_st = 1;
      }
     }
    }
    $216 = (($27) + 64|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $__c;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = (_i64Subtract(0,0,($220|0),($223|0))|0);
    $225 = tempRet0;
    $226 = (_fseeko(($217|0),($224|0),1)|0);
    $227 = ($226|0)!=(0);
    if ($227) {
     $25 = -1;
     $243 = $25;
     STACKTOP = sp;return ($243|0);
    }
    $228 = $__update_st;
    $229 = $228&1;
    if ($229) {
     $230 = (($27) + 72|0);
     ;HEAP32[$230+0>>2]=HEAP32[$__state+0>>2]|0;HEAP32[$230+4>>2]=HEAP32[$__state+4>>2]|0;
    }
    $231 = (($27) + 32|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($27) + 40|0);
    HEAP32[$233>>2] = $232;
    $234 = (($27) + 36|0);
    HEAP32[$234>>2] = $232;
    $20 = $27;
    $21 = 0;
    $22 = 0;
    $23 = 0;
    $235 = $20;
    $236 = $21;
    $237 = (($235) + 8|0);
    HEAP32[$237>>2] = $236;
    $238 = $22;
    $239 = (($235) + 12|0);
    HEAP32[$239>>2] = $238;
    $240 = $23;
    $241 = (($235) + 16|0);
    HEAP32[$241>>2] = $240;
    $242 = (($27) + 92|0);
    HEAP32[$242>>2] = 0;
   }
  }
 } while(0);
 $25 = 0;
 $243 = $25;
 STACKTOP = sp;return ($243|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $11 = sp + 8|0;
 $14 = sp + 330|0;
 $36 = sp;
 $39 = sp + 324|0;
 $__1buf = sp + 325|0;
 $75 = sp + 304|0;
 $76 = sp + 312|0;
 $77 = sp + 236|0;
 $78 = sp + 204|0;
 $__inext = sp + 48|0;
 $74 = $this;
 $79 = $74;
 $80 = (($79) + 64|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 if ($82) {
  $73 = -1;
  $370 = $73;
  STACKTOP = sp;return ($370|0);
 }
 $83 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($79)|0);
 $84 = $83&1;
 $__initial = $84;
 $42 = $79;
 $85 = $42;
 $86 = (($85) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if ($88) {
  $89 = (($__1buf) + 1|0);
  $90 = (($__1buf) + 1|0);
  $0 = $79;
  $1 = $__1buf;
  $2 = $89;
  $3 = $90;
  $91 = $0;
  $92 = $1;
  $93 = (($91) + 8|0);
  HEAP32[$93>>2] = $92;
  $94 = $2;
  $95 = (($91) + 12|0);
  HEAP32[$95>>2] = $94;
  $96 = $3;
  $97 = (($91) + 16|0);
  HEAP32[$97>>2] = $96;
 }
 $98 = $__initial;
 $99 = $98&1;
 if ($99) {
  $123 = 0;
 } else {
  $4 = $79;
  $100 = $4;
  $101 = (($100) + 16|0);
  $102 = HEAP32[$101>>2]|0;
  $5 = $79;
  $103 = $5;
  $104 = (($103) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $102;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 2)&-1;
  HEAP32[$75>>2] = $109;
  HEAP32[$76>>2] = 4;
  $12 = $75;
  $13 = $76;
  $110 = $12;
  $111 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $110;
  $10 = $111;
  $112 = $10;
  $113 = $9;
  $6 = $11;
  $7 = $112;
  $8 = $113;
  $114 = $7;
  $115 = HEAP32[$114>>2]|0;
  $116 = $8;
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115>>>0)<($117>>>0);
  if ($118) {
   $119 = $10;
   $122 = $119;
  } else {
   $120 = $9;
   $122 = $120;
  }
  $121 = HEAP32[$122>>2]|0;
  $123 = $121;
 }
 $__unget_sz = $123;
 $__c = -1;
 $15 = $79;
 $124 = $15;
 $125 = (($124) + 12|0);
 $126 = HEAP32[$125>>2]|0;
 $16 = $79;
 $127 = $16;
 $128 = (($127) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($126|0)==($129|0);
 if ($130) {
  $17 = $79;
  $131 = $17;
  $132 = (($131) + 8|0);
  $133 = HEAP32[$132>>2]|0;
  $18 = $79;
  $134 = $18;
  $135 = (($134) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $__unget_sz;
  $138 = (0 - ($137))|0;
  $139 = (($136) + ($138)|0);
  $140 = $__unget_sz;
  $141 = $140;
  _memmove(($133|0),($139|0),($141|0))|0;
  $142 = (($79) + 98|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&1;
  if ($144) {
   $19 = $79;
   $145 = $19;
   $146 = (($145) + 16|0);
   $147 = HEAP32[$146>>2]|0;
   $20 = $79;
   $148 = $20;
   $149 = (($148) + 8|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $147;
   $152 = $150;
   $153 = (($151) - ($152))|0;
   $154 = $__unget_sz;
   $155 = (($153) - ($154))|0;
   $__nmemb = $155;
   $21 = $79;
   $156 = $21;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $__unget_sz;
   $160 = (($158) + ($159)|0);
   $161 = $__nmemb;
   $162 = (($79) + 64|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (_fread(($160|0),1,($161|0),($163|0))|0);
   $__nmemb = $164;
   $165 = $__nmemb;
   $166 = ($165|0)!=(0);
   if ($166) {
    $22 = $79;
    $167 = $22;
    $168 = (($167) + 8|0);
    $169 = HEAP32[$168>>2]|0;
    $23 = $79;
    $170 = $23;
    $171 = (($170) + 8|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $__unget_sz;
    $174 = (($172) + ($173)|0);
    $24 = $79;
    $175 = $24;
    $176 = (($175) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $__unget_sz;
    $179 = (($177) + ($178)|0);
    $180 = $__nmemb;
    $181 = (($179) + ($180)|0);
    $25 = $79;
    $26 = $169;
    $27 = $174;
    $28 = $181;
    $182 = $25;
    $183 = $26;
    $184 = (($182) + 8|0);
    HEAP32[$184>>2] = $183;
    $185 = $27;
    $186 = (($182) + 12|0);
    HEAP32[$186>>2] = $185;
    $187 = $28;
    $188 = (($182) + 16|0);
    HEAP32[$188>>2] = $187;
    $29 = $79;
    $189 = $29;
    $190 = (($189) + 12|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = HEAP8[$191>>0]|0;
    $30 = $192;
    $193 = $30;
    $194 = $193&255;
    $__c = $194;
   }
  } else {
   $195 = (($79) + 32|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($79) + 36|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($79) + 40|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($79) + 36|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $200;
   $204 = $202;
   $205 = (($203) - ($204))|0;
   _memmove(($196|0),($198|0),($205|0))|0;
   $206 = (($79) + 32|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($79) + 40|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($79) + 36|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $209;
   $213 = $211;
   $214 = (($212) - ($213))|0;
   $215 = (($207) + ($214)|0);
   $216 = (($79) + 36|0);
   HEAP32[$216>>2] = $215;
   $217 = (($79) + 32|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($79) + 32|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = (($79) + 44|0);
   $222 = ($220|0)==($221|0);
   if ($222) {
    $226 = 8;
   } else {
    $223 = (($79) + 52|0);
    $224 = HEAP32[$223>>2]|0;
    $226 = $224;
   }
   $225 = (($218) + ($226)|0);
   $227 = (($79) + 40|0);
   HEAP32[$227>>2] = $225;
   $228 = (($79) + 60|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $__unget_sz;
   $231 = (($229) - ($230))|0;
   HEAP32[$77>>2] = $231;
   $232 = (($79) + 40|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = (($79) + 36|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $233;
   $237 = $235;
   $238 = (($236) - ($237))|0;
   HEAP32[$78>>2] = $238;
   $37 = $77;
   $38 = $78;
   $239 = $37;
   $240 = $38;
   ;HEAP8[$36+0>>0]=HEAP8[$39+0>>0]|0;
   $34 = $239;
   $35 = $240;
   $241 = $35;
   $242 = $34;
   $31 = $36;
   $32 = $241;
   $33 = $242;
   $243 = $32;
   $244 = HEAP32[$243>>2]|0;
   $245 = $33;
   $246 = HEAP32[$245>>2]|0;
   $247 = ($244>>>0)<($246>>>0);
   if ($247) {
    $248 = $35;
    $251 = $248;
   } else {
    $249 = $34;
    $251 = $249;
   }
   $250 = HEAP32[$251>>2]|0;
   $__nmemb1 = $250;
   $252 = (($79) + 80|0);
   $253 = (($79) + 72|0);
   ;HEAP32[$252+0>>2]=HEAP32[$253+0>>2]|0;HEAP32[$252+4>>2]=HEAP32[$253+4>>2]|0;
   $254 = (($79) + 36|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $__nmemb1;
   $257 = (($79) + 64|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (_fread(($255|0),1,($256|0),($258|0))|0);
   $__nr = $259;
   $260 = $__nr;
   $261 = ($260|0)!=(0);
   if ($261) {
    $262 = (($79) + 68|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = ($263|0)!=(0|0);
    if (!($264)) {
     $265 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($265);
     ___cxa_throw(($265|0),(17096|0),(390|0));
     // unreachable;
    }
    $266 = (($79) + 36|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = $__nr;
    $269 = (($267) + ($268)|0);
    $270 = (($79) + 40|0);
    HEAP32[$270>>2] = $269;
    $271 = (($79) + 68|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = (($79) + 72|0);
    $274 = (($79) + 32|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($79) + 40|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = (($79) + 36|0);
    $40 = $79;
    $279 = $40;
    $280 = (($279) + 8|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $__unget_sz;
    $283 = (($281) + ($282)|0);
    $41 = $79;
    $284 = $41;
    $285 = (($284) + 8|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($79) + 60|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = (($286) + ($288)|0);
    $43 = $272;
    $44 = $273;
    $45 = $275;
    $46 = $277;
    $47 = $278;
    $48 = $283;
    $49 = $289;
    $50 = $__inext;
    $290 = $43;
    $291 = HEAP32[$290>>2]|0;
    $292 = (($291) + 16|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $44;
    $295 = $45;
    $296 = $46;
    $297 = $47;
    $298 = $48;
    $299 = $49;
    $300 = $50;
    $301 = (FUNCTION_TABLE_iiiiiiiii[$293 & 1023]($290,$294,$295,$296,$297,$298,$299,$300)|0);
    $__r = $301;
    $302 = $__r;
    $303 = ($302|0)==(3);
    if ($303) {
     $304 = (($79) + 32|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = (($79) + 32|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = (($79) + 40|0);
     $309 = HEAP32[$308>>2]|0;
     $51 = $79;
     $52 = $305;
     $53 = $307;
     $54 = $309;
     $310 = $51;
     $311 = $52;
     $312 = (($310) + 8|0);
     HEAP32[$312>>2] = $311;
     $313 = $53;
     $314 = (($310) + 12|0);
     HEAP32[$314>>2] = $313;
     $315 = $54;
     $316 = (($310) + 16|0);
     HEAP32[$316>>2] = $315;
     $55 = $79;
     $317 = $55;
     $318 = (($317) + 12|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = HEAP8[$319>>0]|0;
     $56 = $320;
     $321 = $56;
     $322 = $321&255;
     $__c = $322;
    } else {
     $323 = HEAP32[$__inext>>2]|0;
     $57 = $79;
     $324 = $57;
     $325 = (($324) + 8|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $__unget_sz;
     $328 = (($326) + ($327)|0);
     $329 = ($323|0)!=($328|0);
     if ($329) {
      $58 = $79;
      $330 = $58;
      $331 = (($330) + 8|0);
      $332 = HEAP32[$331>>2]|0;
      $59 = $79;
      $333 = $59;
      $334 = (($333) + 8|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = $__unget_sz;
      $337 = (($335) + ($336)|0);
      $338 = HEAP32[$__inext>>2]|0;
      $60 = $79;
      $61 = $332;
      $62 = $337;
      $63 = $338;
      $339 = $60;
      $340 = $61;
      $341 = (($339) + 8|0);
      HEAP32[$341>>2] = $340;
      $342 = $62;
      $343 = (($339) + 12|0);
      HEAP32[$343>>2] = $342;
      $344 = $63;
      $345 = (($339) + 16|0);
      HEAP32[$345>>2] = $344;
      $64 = $79;
      $346 = $64;
      $347 = (($346) + 12|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = HEAP8[$348>>0]|0;
      $65 = $349;
      $350 = $65;
      $351 = $350&255;
      $__c = $351;
     }
    }
   }
  }
 } else {
  $66 = $79;
  $352 = $66;
  $353 = (($352) + 12|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = HEAP8[$354>>0]|0;
  $67 = $355;
  $356 = $67;
  $357 = $356&255;
  $__c = $357;
 }
 $68 = $79;
 $358 = $68;
 $359 = (($358) + 8|0);
 $360 = HEAP32[$359>>2]|0;
 $361 = ($360|0)==($__1buf|0);
 if ($361) {
  $69 = $79;
  $70 = 0;
  $71 = 0;
  $72 = 0;
  $362 = $69;
  $363 = $70;
  $364 = (($362) + 8|0);
  HEAP32[$364>>2] = $363;
  $365 = $71;
  $366 = (($362) + 12|0);
  HEAP32[$366>>2] = $365;
  $367 = $72;
  $368 = (($362) + 16|0);
  HEAP32[$368>>2] = $367;
 }
 $369 = $__c;
 $73 = $369;
 $370 = $73;
 STACKTOP = sp;return ($370|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $18 = $this;
 $19 = $__c;
 $20 = $18;
 $21 = (($20) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 do {
  if ($23) {
   $16 = $20;
   $24 = $16;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $0 = $20;
   $27 = $0;
   $28 = (($27) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26>>>0)<($29>>>0);
   if ($30) {
    $31 = $19;
    $1 = $31;
    $2 = -1;
    $32 = $1;
    $33 = $2;
    $34 = ($32|0)==($33|0);
    if ($34) {
     $3 = $20;
     $4 = -1;
     $35 = $3;
     $36 = $4;
     $37 = (($35) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($38) + ($36)|0);
     HEAP32[$37>>2] = $39;
     $40 = $19;
     $7 = $40;
     $41 = $7;
     $5 = $41;
     $6 = -1;
     $42 = $5;
     $43 = $6;
     $44 = ($42|0)==($43|0);
     if ($44) {
      $46 = 0;
     } else {
      $45 = $7;
      $46 = $45;
     }
     $17 = $46;
     $76 = $17;
     STACKTOP = sp;return ($76|0);
    } else {
     $47 = (($20) + 88|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $48 & 16;
     $50 = ($49|0)!=(0);
     if (!($50)) {
      $51 = $19;
      $8 = $51;
      $52 = $8;
      $53 = $52&255;
      $9 = $20;
      $54 = $9;
      $55 = (($54) + 12|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($56) + -1|0);
      $58 = HEAP8[$57>>0]|0;
      $10 = $53;
      $11 = $58;
      $59 = $10;
      $60 = $59 << 24 >> 24;
      $61 = $11;
      $62 = $61 << 24 >> 24;
      $63 = ($60|0)==($62|0);
      if (!($63)) {
       break;
      }
     }
     $12 = $20;
     $13 = -1;
     $64 = $12;
     $65 = $13;
     $66 = (($64) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + ($65)|0);
     HEAP32[$66>>2] = $68;
     $69 = $19;
     $14 = $69;
     $70 = $14;
     $71 = $70&255;
     $15 = $20;
     $72 = $15;
     $73 = (($72) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     HEAP8[$74>>0] = $71;
     $75 = $19;
     $17 = $75;
     $76 = $17;
     STACKTOP = sp;return ($76|0);
    }
   }
  }
 } while(0);
 $17 = -1;
 $76 = $17;
 STACKTOP = sp;return ($76|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0;
 var $__pb_save = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__1buf = sp + 224|0;
 $__extbe = sp + 196|0;
 $__e = sp + 204|0;
 $46 = $this;
 $47 = $__c;
 $48 = $46;
 $49 = (($48) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  $45 = -1;
  $232 = $45;
  STACKTOP = sp;return ($232|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($48);
 $18 = $48;
 $52 = $18;
 $53 = (($52) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $__pb_save = $54;
 $0 = $48;
 $55 = $0;
 $56 = (($55) + 28|0);
 $57 = HEAP32[$56>>2]|0;
 $__epb_save = $57;
 $58 = $47;
 $1 = $58;
 $2 = -1;
 $59 = $1;
 $60 = $2;
 $61 = ($59|0)==($60|0);
 if (!($61)) {
  $3 = $48;
  $62 = $3;
  $63 = (($62) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   $66 = (($__1buf) + 1|0);
   $4 = $48;
   $5 = $__1buf;
   $6 = $66;
   $67 = $4;
   $68 = $5;
   $69 = (($67) + 24|0);
   HEAP32[$69>>2] = $68;
   $70 = (($67) + 20|0);
   HEAP32[$70>>2] = $68;
   $71 = $6;
   $72 = (($67) + 28|0);
   HEAP32[$72>>2] = $71;
  }
  $73 = $47;
  $7 = $73;
  $74 = $7;
  $75 = $74&255;
  $8 = $48;
  $76 = $8;
  $77 = (($76) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP8[$78>>0] = $75;
  $9 = $48;
  $10 = 1;
  $79 = $9;
  $80 = $10;
  $81 = (($79) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($80)|0);
  HEAP32[$81>>2] = $83;
 }
 $11 = $48;
 $84 = $11;
 $85 = (($84) + 24|0);
 $86 = HEAP32[$85>>2]|0;
 $12 = $48;
 $87 = $12;
 $88 = (($87) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($86|0)!=($89|0);
 if ($90) {
  $91 = (($48) + 98|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&1;
  do {
   if ($93) {
    $13 = $48;
    $94 = $13;
    $95 = (($94) + 24|0);
    $96 = HEAP32[$95>>2]|0;
    $14 = $48;
    $97 = $14;
    $98 = (($97) + 20|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $96;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $__nmemb = $102;
    $15 = $48;
    $103 = $15;
    $104 = (($103) + 20|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $__nmemb;
    $107 = (($48) + 64|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (_fwrite(($105|0),1,($106|0),($108|0))|0);
    $110 = $__nmemb;
    $111 = ($109|0)!=($110|0);
    if (!($111)) {
     break;
    }
    $45 = -1;
    $232 = $45;
    STACKTOP = sp;return ($232|0);
   } else {
    $112 = (($48) + 32|0);
    $113 = HEAP32[$112>>2]|0;
    HEAP32[$__extbe>>2] = $113;
    while(1) {
     $114 = (($48) + 68|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)!=(0|0);
     if (!($116)) {
      label = 14;
      break;
     }
     $118 = (($48) + 68|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($48) + 72|0);
     $16 = $48;
     $121 = $16;
     $122 = (($121) + 20|0);
     $123 = HEAP32[$122>>2]|0;
     $17 = $48;
     $124 = $17;
     $125 = (($124) + 24|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($48) + 32|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($48) + 32|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($48) + 52|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($130) + ($132)|0);
     $19 = $119;
     $20 = $120;
     $21 = $123;
     $22 = $126;
     $23 = $__e;
     $24 = $128;
     $25 = $133;
     $26 = $__extbe;
     $134 = $19;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($135) + 12|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $20;
     $139 = $21;
     $140 = $22;
     $141 = $23;
     $142 = $24;
     $143 = $25;
     $144 = $26;
     $145 = (FUNCTION_TABLE_iiiiiiiii[$137 & 1023]($134,$138,$139,$140,$141,$142,$143,$144)|0);
     $__r = $145;
     $146 = HEAP32[$__e>>2]|0;
     $27 = $48;
     $147 = $27;
     $148 = (($147) + 20|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($146|0)==($149|0);
     if ($150) {
      label = 16;
      break;
     }
     $151 = $__r;
     $152 = ($151|0)==(3);
     if ($152) {
      $28 = $48;
      $153 = $28;
      $154 = (($153) + 24|0);
      $155 = HEAP32[$154>>2]|0;
      $29 = $48;
      $156 = $29;
      $157 = (($156) + 20|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $155;
      $160 = $158;
      $161 = (($159) - ($160))|0;
      $__nmemb1 = $161;
      $30 = $48;
      $162 = $30;
      $163 = (($162) + 20|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__nmemb1;
      $166 = (($48) + 64|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (_fwrite(($164|0),1,($165|0),($167|0))|0);
      $169 = $__nmemb1;
      $170 = ($168|0)!=($169|0);
      if ($170) {
       label = 19;
       break;
      }
     } else {
      $171 = $__r;
      $172 = ($171|0)==(0);
      if (!($172)) {
       $173 = $__r;
       $174 = ($173|0)==(1);
       if (!($174)) {
        label = 28;
        break;
       }
      }
      $175 = HEAP32[$__extbe>>2]|0;
      $176 = (($48) + 32|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = $175;
      $179 = $177;
      $180 = (($178) - ($179))|0;
      $__nmemb2 = $180;
      $181 = (($48) + 32|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $__nmemb2;
      $184 = (($48) + 64|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = (_fwrite(($182|0),1,($183|0),($185|0))|0);
      $187 = $__nmemb2;
      $188 = ($186|0)!=($187|0);
      if ($188) {
       label = 24;
       break;
      }
      $189 = $__r;
      $190 = ($189|0)==(1);
      if ($190) {
       $191 = HEAP32[$__e>>2]|0;
       $31 = $48;
       $192 = $31;
       $193 = (($192) + 24|0);
       $194 = HEAP32[$193>>2]|0;
       $32 = $48;
       $33 = $191;
       $34 = $194;
       $195 = $32;
       $196 = $33;
       $197 = (($195) + 24|0);
       HEAP32[$197>>2] = $196;
       $198 = (($195) + 20|0);
       HEAP32[$198>>2] = $196;
       $199 = $34;
       $200 = (($195) + 28|0);
       HEAP32[$200>>2] = $199;
       $35 = $48;
       $201 = $35;
       $202 = (($201) + 28|0);
       $203 = HEAP32[$202>>2]|0;
       $36 = $48;
       $204 = $36;
       $205 = (($204) + 20|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = $203;
       $208 = $206;
       $209 = (($207) - ($208))|0;
       $37 = $48;
       $38 = $209;
       $210 = $37;
       $211 = $38;
       $212 = (($210) + 24|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = (($213) + ($211)|0);
       HEAP32[$212>>2] = $214;
      }
     }
     $215 = $__r;
     $216 = ($215|0)==(1);
     if (!($216)) {
      label = 32;
      break;
     }
    }
    if ((label|0) == 14) {
     $117 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($117);
     ___cxa_throw(($117|0),(17096|0),(390|0));
     // unreachable;
    }
    else if ((label|0) == 16) {
     $45 = -1;
     $232 = $45;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 19) {
     $45 = -1;
     $232 = $45;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 24) {
     $45 = -1;
     $232 = $45;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 28) {
     $45 = -1;
     $232 = $45;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 32) {
     break;
    }
   }
  } while(0);
  $217 = $__pb_save;
  $218 = $__epb_save;
  $39 = $48;
  $40 = $217;
  $41 = $218;
  $219 = $39;
  $220 = $40;
  $221 = (($219) + 24|0);
  HEAP32[$221>>2] = $220;
  $222 = (($219) + 20|0);
  HEAP32[$222>>2] = $220;
  $223 = $41;
  $224 = (($219) + 28|0);
  HEAP32[$224>>2] = $223;
 }
 $225 = $47;
 $44 = $225;
 $226 = $44;
 $42 = $226;
 $43 = -1;
 $227 = $42;
 $228 = $43;
 $229 = ($227|0)==($228|0);
 if ($229) {
  $231 = 0;
 } else {
  $230 = $44;
  $231 = $230;
 }
 $45 = $231;
 $232 = $45;
 STACKTOP = sp;return ($232|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = (($19) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = (($19) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = (($14) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 if ($28) {
  $29 = (($14) + 98|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&1;
  if ($31) {
   $32 = (($14) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($14) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($14) + 52|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   $39 = (($35) + ($38)|0);
   $0 = $14;
   $1 = $33;
   $2 = $39;
   $40 = $0;
   $41 = $1;
   $42 = (($40) + 24|0);
   HEAP32[$42>>2] = $41;
   $43 = (($40) + 20|0);
   HEAP32[$43>>2] = $41;
   $44 = $2;
   $45 = (($40) + 28|0);
   HEAP32[$45>>2] = $44;
  } else {
   $46 = (($14) + 56|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($14) + 56|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($14) + 60|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) - 1)|0;
   $53 = (($49) + ($52)|0);
   $3 = $14;
   $4 = $47;
   $5 = $53;
   $54 = $3;
   $55 = $4;
   $56 = (($54) + 24|0);
   HEAP32[$56>>2] = $55;
   $57 = (($54) + 20|0);
   HEAP32[$57>>2] = $55;
   $58 = $5;
   $59 = (($54) + 28|0);
   HEAP32[$59>>2] = $58;
  }
 } else {
  $6 = $14;
  $7 = 0;
  $8 = 0;
  $60 = $6;
  $61 = $7;
  $62 = (($60) + 24|0);
  HEAP32[$62>>2] = $61;
  $63 = (($60) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $8;
  $65 = (($60) + 28|0);
  HEAP32[$65>>2] = $64;
 }
 $66 = (($14) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $12 = $this;
 $13 = $12;
 $14 = (($13) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  $11 = $$expand_i1_val2;
  $$pre_trunc = $11;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = (($18) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = (($18) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = (($18) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = (($13) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = (($13) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($13) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($13) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = (($13) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($13) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = (($39) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = (($39) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = (($39) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = (($13) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($13) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($13) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = (($13) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($13) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = (($58) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = (($58) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = (($58) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = (($13) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 $11 = $$expand_i1_val;
 $$pre_trunc = $11;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $12 = sp + 36|0;
 $16 = sp + 52|0;
 $17 = sp + 16|0;
 $18 = sp + 60|0;
 $13 = $this;
 $19 = $13;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($19);
 $20 = (1544 + 8|0);
 HEAP32[$19>>2] = $20;
 $21 = (($19) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = (($19) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = (($19) + 40|0);
 HEAP32[$23>>2] = 0;
 $24 = (($19) + 52|0);
 HEAP32[$24>>2] = 0;
 $25 = (($19) + 56|0);
 HEAP32[$25>>2] = 0;
 $26 = (($19) + 60|0);
 HEAP32[$26>>2] = 0;
 $27 = (($19) + 64|0);
 HEAP32[$27>>2] = 0;
 $28 = (($19) + 68|0);
 $10 = $12;
 $11 = -1;
 $29 = $10;
 $30 = $11;
 $8 = $29;
 $9 = $30;
 $31 = $8;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$12>>2]|0;
 HEAP32[$16>>2] = $32;
 $7 = $16;
 HEAP32[$28>>2] = 0;
 $33 = (($19) + 72|0);
 ;HEAP32[$33+0>>2]=0|0;HEAP32[$33+4>>2]=0|0;
 $34 = (($19) + 80|0);
 ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;
 $35 = (($19) + 88|0);
 HEAP32[$35>>2] = 0;
 $36 = (($19) + 92|0);
 HEAP32[$36>>2] = 0;
 $37 = (($19) + 96|0);
 HEAP8[$37>>0] = 0;
 $38 = (($19) + 97|0);
 HEAP8[$38>>0] = 0;
 $39 = (($19) + 98|0);
 HEAP8[$39>>0] = 0;
 $6 = $19;
 $40 = $6;
 $41 = (($40) + 4|0);
 __ZNSt3__16localeC2ERKS0_($17,$41);
 $3 = $17;
 $42 = $3;
 __THREW__ = 0;
 $43 = (invoke_iii(496,($42|0),(9200|0))|0);
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $46 = ___cxa_find_matching_catch(-1,-1)|0;
  $47 = tempRet0;
  $4 = $46;
  $5 = $47;
  $48 = $4;
  ___cxa_call_unexpected(($48|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(458,($17|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 L7: do {
  if ($50) {
   label = 13;
  } else {
   do {
    if ($43) {
     $2 = $19;
     $51 = $2;
     $52 = (($51) + 4|0);
     __ZNSt3__16localeC2ERKS0_($18,$52);
     $1 = $18;
     $53 = $1;
     __THREW__ = 0;
     $54 = (invoke_iii(457,($53|0),(9200|0))|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $71 = ___cxa_find_matching_catch(-1,-1)|0;
      $72 = tempRet0;
      $14 = $71;
      $15 = $72;
      __THREW__ = 0;
      invoke_vi(458,($18|0));
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if ($74) {
       $84 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $85 = tempRet0;
       ___clang_call_terminate($84);
       // unreachable;
      } else {
       break L7;
      }
     } else {
      $57 = (($19) + 68|0);
      HEAP32[$57>>2] = $54;
      __THREW__ = 0;
      invoke_vi(458,($18|0));
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 13;
       break L7;
      }
      $60 = (($19) + 68|0);
      $61 = HEAP32[$60>>2]|0;
      $0 = $61;
      $62 = $0;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($63) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($62)|0);
      $67 = (($19) + 98|0);
      $68 = $66&1;
      HEAP8[$67>>0] = $68;
      break;
     }
    }
   } while(0);
   $75 = HEAP32[$19>>2]|0;
   $76 = (($75) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($77|0,($19|0),(0|0),4096)|0);
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    label = 13;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $69 = ___cxa_find_matching_catch(-1,-1)|0;
  $70 = tempRet0;
  $14 = $69;
  $15 = $70;
 }
 __THREW__ = 0;
 invoke_vi(447,($19|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $84 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $85 = tempRet0;
  ___clang_call_terminate($84);
  // unreachable;
 }
 $82 = $14;
 $83 = $15;
 ___resumeException($82|0);
 // unreachable;
}
function __ZNSt3__110__list_impIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__list_impIjNS_9allocatorIjEEE5clearEv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__list_impIjNS_9allocatorIjEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $__f = 0, $__l = 0, $__n = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $10 = sp;
 $13 = sp + 132|0;
 $27 = $this;
 $30 = $27;
 $26 = $30;
 $31 = $26;
 $25 = $31;
 $32 = $25;
 $33 = (($32) + 8|0);
 $24 = $33;
 $34 = $24;
 $23 = $34;
 $35 = $23;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $16 = $30;
 $38 = $16;
 $39 = (($38) + 8|0);
 $15 = $39;
 $40 = $15;
 $14 = $40;
 $41 = $14;
 $__na = $41;
 $42 = (($30) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $__f = $43;
 $1 = $30;
 $44 = $1;
 $0 = $44;
 $45 = $0;
 $__l = $45;
 $46 = $__f;
 $47 = $__l;
 $48 = HEAP32[$47>>2]|0;
 $2 = $46;
 $3 = $48;
 $49 = $3;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 4|0);
 HEAP32[$54>>2] = $51;
 $55 = $2;
 $56 = HEAP32[$55>>2]|0;
 $57 = $3;
 $58 = (($57) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$59>>2] = $56;
 $6 = $30;
 $60 = $6;
 $61 = (($60) + 8|0);
 $5 = $61;
 $62 = $5;
 $4 = $62;
 $63 = $4;
 HEAP32[$63>>2] = 0;
 while(1) {
  $64 = $__f;
  $65 = $__l;
  $66 = ($64|0)!=($65|0);
  if (!($66)) {
   break;
  }
  $67 = $__f;
  $__n = $67;
  $68 = $__f;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $__f = $70;
  $71 = $__na;
  $72 = $__n;
  $73 = (($72) + 8|0);
  $7 = $73;
  $74 = $7;
  $11 = $71;
  $12 = $74;
  $75 = $11;
  $76 = $12;
  ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
  $8 = $75;
  $9 = $76;
  $77 = $__na;
  $78 = $__n;
  $20 = $77;
  $21 = $78;
  $22 = 1;
  $79 = $20;
  $80 = $21;
  $81 = $22;
  $17 = $79;
  $18 = $80;
  $19 = $81;
  $82 = $18;
  __ZdlPv($82);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemoC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $4 = sp + 8|0;
 $10 = sp + 24|0;
 $16 = sp + 44|0;
 $21 = sp + 64|0;
 $24 = sp + 76|0;
 $29 = sp + 96|0;
 $30 = sp + 100|0;
 $31 = sp + 348|0;
 $38 = sp + 128|0;
 $44 = sp + 152|0;
 $50 = sp + 400|0;
 $55 = sp + 196|0;
 $58 = sp + 208|0;
 $63 = sp + 344|0;
 $64 = sp + 228|0;
 $65 = sp + 232|0;
 $72 = sp + 260|0;
 $78 = sp + 284|0;
 $84 = sp + 308|0;
 $89 = sp + 328|0;
 $92 = sp + 340|0;
 $97 = sp + 12|0;
 $98 = sp + 368|0;
 $99 = sp + 164|0;
 $102 = $this;
 $105 = $102;
 __ZN4DemoC2Ev($105);
 $106 = (1768 + 8|0);
 HEAP32[$105>>2] = $106;
 $107 = (($105) + 20|0);
 $101 = $107;
 $108 = $101;
 $100 = $108;
 $109 = $100;
 $96 = $109;
 $110 = $96;
 $95 = $110;
 $70 = $72;
 $71 = -1;
 $111 = $70;
 $112 = $71;
 $68 = $111;
 $69 = $112;
 $113 = $68;
 HEAP32[$113>>2] = 0;
 $114 = HEAP32[$72>>2]|0;
 HEAP32[$97>>2] = $114;
 $73 = $97;
 HEAP32[$110>>2] = 0;
 $115 = (($110) + 4|0);
 $76 = $78;
 $77 = -1;
 $116 = $76;
 $117 = $77;
 $74 = $116;
 $75 = $117;
 $118 = $74;
 HEAP32[$118>>2] = 0;
 $119 = HEAP32[$78>>2]|0;
 HEAP32[$98>>2] = $119;
 $79 = $98;
 HEAP32[$115>>2] = 0;
 $120 = (($110) + 8|0);
 $82 = $84;
 $83 = -1;
 $121 = $82;
 $122 = $83;
 $80 = $121;
 $81 = $122;
 $123 = $80;
 HEAP32[$123>>2] = 0;
 $124 = HEAP32[$84>>2]|0;
 HEAP32[$99>>2] = $124;
 $85 = $99;
 $93 = $120;
 $94 = 0;
 $125 = $93;
 $126 = $94;
 $91 = $125;
 HEAP32[$92>>2] = $126;
 $127 = $91;
 $90 = $92;
 $128 = $90;
 $129 = HEAP32[$128>>2]|0;
 $88 = $127;
 HEAP32[$89>>2] = $129;
 $130 = $88;
 $87 = $130;
 $86 = $89;
 $131 = $86;
 $132 = HEAP32[$131>>2]|0;
 HEAP32[$130>>2] = $132;
 $133 = (($105) + 32|0);
 $67 = $133;
 $134 = $67;
 $66 = $134;
 $135 = $66;
 $62 = $135;
 $136 = $62;
 $61 = $136;
 $36 = $38;
 $37 = -1;
 $137 = $36;
 $138 = $37;
 $34 = $137;
 $35 = $138;
 $139 = $34;
 HEAP32[$139>>2] = 0;
 $140 = HEAP32[$38>>2]|0;
 HEAP32[$63>>2] = $140;
 $39 = $63;
 HEAP32[$136>>2] = 0;
 $141 = (($136) + 4|0);
 $42 = $44;
 $43 = -1;
 $142 = $42;
 $143 = $43;
 $40 = $142;
 $41 = $143;
 $144 = $40;
 HEAP32[$144>>2] = 0;
 $145 = HEAP32[$44>>2]|0;
 HEAP32[$64>>2] = $145;
 $45 = $64;
 HEAP32[$141>>2] = 0;
 $146 = (($136) + 8|0);
 $48 = $50;
 $49 = -1;
 $147 = $48;
 $148 = $49;
 $46 = $147;
 $47 = $148;
 $149 = $46;
 HEAP32[$149>>2] = 0;
 $150 = HEAP32[$50>>2]|0;
 HEAP32[$65>>2] = $150;
 $51 = $65;
 $59 = $146;
 $60 = 0;
 $151 = $59;
 $152 = $60;
 $57 = $151;
 HEAP32[$58>>2] = $152;
 $153 = $57;
 $56 = $58;
 $154 = $56;
 $155 = HEAP32[$154>>2]|0;
 $54 = $153;
 HEAP32[$55>>2] = $155;
 $156 = $54;
 $53 = $156;
 $52 = $55;
 $157 = $52;
 $158 = HEAP32[$157>>2]|0;
 HEAP32[$156>>2] = $158;
 $159 = (($105) + 44|0);
 $33 = $159;
 $160 = $33;
 $32 = $160;
 $161 = $32;
 $28 = $161;
 $162 = $28;
 $27 = $162;
 $2 = $4;
 $3 = -1;
 $163 = $2;
 $164 = $3;
 $0 = $163;
 $1 = $164;
 $165 = $0;
 HEAP32[$165>>2] = 0;
 $166 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $166;
 $5 = $29;
 HEAP32[$162>>2] = 0;
 $167 = (($162) + 4|0);
 $8 = $10;
 $9 = -1;
 $168 = $8;
 $169 = $9;
 $6 = $168;
 $7 = $169;
 $170 = $6;
 HEAP32[$170>>2] = 0;
 $171 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $171;
 $11 = $30;
 HEAP32[$167>>2] = 0;
 $172 = (($162) + 8|0);
 $14 = $16;
 $15 = -1;
 $173 = $14;
 $174 = $15;
 $12 = $173;
 $13 = $174;
 $175 = $12;
 HEAP32[$175>>2] = 0;
 $176 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $176;
 $17 = $31;
 $25 = $172;
 $26 = 0;
 $177 = $25;
 $178 = $26;
 $23 = $177;
 HEAP32[$24>>2] = $178;
 $179 = $23;
 $22 = $24;
 $180 = $22;
 $181 = HEAP32[$180>>2]|0;
 $20 = $179;
 HEAP32[$21>>2] = $181;
 $182 = $20;
 $19 = $182;
 $18 = $21;
 $183 = $18;
 $184 = HEAP32[$183>>2]|0;
 HEAP32[$182>>2] = $184;
 $185 = (($105) + 16|0);
 HEAP32[$185>>2] = 0;
 $186 = (($105) + 4|0);
 HEAP32[$186>>2] = 0;
 $187 = (($105) + 8|0);
 HEAP32[$187>>2] = 0;
 $188 = (($105) + 12|0);
 HEAP32[$188>>2] = 0;
 $189 = (($105) + 56|0);
 HEAP32[$189>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4DemoC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (2392 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4DemoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(51,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN19LorenzAttractorDemoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (1768 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 44|0);
 __THREW__ = 0;
 invoke_vi(497,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $14 = ___cxa_find_matching_catch(-1,-1)|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = (($3) + 32|0);
   __THREW__ = 0;
   invoke_vi(497,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    label = 9;
    break;
   }
  } else {
   $8 = (($3) + 32|0);
   __THREW__ = 0;
   invoke_vi(497,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch(-1,-1)|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 9;
    break;
   }
   $11 = (($3) + 20|0);
   __THREW__ = 0;
   invoke_vi(497,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch(-1,-1)|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    __ZN4DemoD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $23 = (($3) + 20|0);
   __THREW__ = 0;
   invoke_vi(497,($23|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(498,($3|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 }
 $28 = $1;
 $29 = $2;
 ___resumeException($28|0);
 // unreachable;
}
function __ZN19LorenzAttractorDemo4initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i11 = 0, $__a$i$i$i5 = 0, $__i$i$i$i = 0, $__i$i$i$i12 = 0, $__i$i$i$i6 = 0, $geometryShaderFilename = 0, $i = 0, $it = 0, $logSize = 0, $nFrameBuffers = 0, $nParticles = 0, $res = 0;
 var $shaderLog = 0, $shaders = 0, $tex_coords = 0, $vbo = 0, $verts = 0, $windowHeight = 0, $windowWidth = 0, $written = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0;
 $32 = sp + 156|0;
 $38 = sp + 180|0;
 $53 = sp + 240|0;
 $68 = sp + 300|0;
 $110 = sp + 468|0;
 $116 = sp + 492|0;
 $shaders = sp + 932|0;
 $202 = sp + 944|0;
 $205 = sp + 964|0;
 $206 = sp + 976|0;
 $207 = sp + 988|0;
 $208 = sp + 992|0;
 $209 = sp + 1004|0;
 $210 = sp + 1016|0;
 $211 = sp + 1028|0;
 $geometryShaderFilename = sp + 1032|0;
 $212 = sp + 1044|0;
 $213 = sp + 1056|0;
 $214 = sp + 1068|0;
 $it = sp + 1072|0;
 $215 = sp + 1076|0;
 $res = sp + 1080|0;
 $logSize = sp + 1084|0;
 $shaderLog = sp + 1088|0;
 $written = sp + 1100|0;
 $216 = sp + 1108|0;
 $217 = sp + 1120|0;
 $218 = sp + 1132|0;
 $219 = sp + 1136|0;
 $220 = sp + 1148|0;
 $221 = sp + 1152|0;
 $222 = sp + 72|0;
 $223 = sp + 32|0;
 $224 = sp + 44|0;
 $225 = sp + 20|0;
 $226 = sp + 4|0;
 $windowWidth = sp + 64|0;
 $windowHeight = sp;
 $verts = sp + 504|0;
 $tex_coords = sp + 1168|0;
 $vbo = sp + 576|0;
 $227 = sp + 1228|0;
 $228 = sp + 588|0;
 $201 = $this;
 $229 = $201;
 __ZN7gltools15ShaderContainerC1Ev($shaders);
 __THREW__ = 0;
 $230 = (invoke_i(429)|0);
 $231 = __THREW__; __THREW__ = 0;
 $232 = $231&1;
 L1: do {
  if ($232) {
   label = 47;
  } else {
   $199 = $205;
   $200 = 1800;
   $233 = $199;
   $234 = $200;
   $197 = $233;
   $198 = $234;
   $235 = $197;
   $196 = $235;
   $236 = $196;
   $195 = $236;
   $237 = $195;
   $194 = $237;
   $238 = $194;
   $193 = $238;
   $239 = $198;
   $240 = $198;
   $192 = $240;
   $241 = $192;
   __THREW__ = 0;
   $242 = (invoke_ii(430,($241|0))|0);
   $243 = __THREW__; __THREW__ = 0;
   $244 = $243&1;
   if ($244) {
    label = 47;
   } else {
    __THREW__ = 0;
    invoke_viii(431,($235|0),($239|0),($242|0));
    $245 = __THREW__; __THREW__ = 0;
    $246 = $245&1;
    if ($246) {
     label = 47;
    } else {
     $191 = $206;
     $247 = $191;
     $190 = $247;
     $248 = $190;
     $189 = $248;
     $249 = $189;
     $188 = $249;
     $250 = $188;
     $187 = $250;
     $251 = $187;
     $186 = $251;
     $185 = $248;
     $252 = $185;
     $184 = $252;
     $253 = $184;
     $183 = $253;
     $254 = $183;
     $__a$i$i$i = $254;
     $__i$i$i$i = 0;
     while(1) {
      $255 = $__i$i$i$i;
      $256 = ($255>>>0)<(3);
      if (!($256)) {
       break;
      }
      $257 = $__i$i$i$i;
      $258 = $__a$i$i$i;
      $259 = (($258) + ($257<<2)|0);
      HEAP32[$259>>2] = 0;
      $260 = $__i$i$i$i;
      $261 = (($260) + 1)|0;
      $__i$i$i$i = $261;
     }
     __THREW__ = 0;
     invoke_viiii(414,($202|0),($230|0),($205|0),($206|0));
     $262 = __THREW__; __THREW__ = 0;
     $263 = $262&1;
     do {
      if ($263) {
       label = 49;
      } else {
       __THREW__ = 0;
       $264 = (invoke_iii(499,($202|0),35633)|0);
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if (!($266)) {
        HEAP32[$207>>2] = $264;
        __THREW__ = 0;
        invoke_vii(500,($shaders|0),($207|0));
        $267 = __THREW__; __THREW__ = 0;
        $268 = $267&1;
        if (!($268)) {
         __THREW__ = 0;
         invoke_vi(415,($202|0));
         $269 = __THREW__; __THREW__ = 0;
         $270 = $269&1;
         if ($270) {
          label = 49;
          break;
         }
         __THREW__ = 0;
         invoke_vi(415,($206|0));
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          $387 = ___cxa_find_matching_catch(-1,-1)|0;
          $388 = tempRet0;
          $203 = $387;
          $204 = $388;
          break;
         }
         __THREW__ = 0;
         invoke_vi(415,($205|0));
         $273 = __THREW__; __THREW__ = 0;
         $274 = $273&1;
         if ($274) {
          label = 47;
          break L1;
         }
         __THREW__ = 0;
         $275 = (invoke_i(429)|0);
         $276 = __THREW__; __THREW__ = 0;
         $277 = $276&1;
         if ($277) {
          label = 47;
          break L1;
         }
         $181 = $209;
         $182 = 1824;
         $278 = $181;
         $279 = $182;
         $179 = $278;
         $180 = $279;
         $280 = $179;
         $178 = $280;
         $281 = $178;
         $177 = $281;
         $282 = $177;
         $176 = $282;
         $283 = $176;
         $175 = $283;
         $284 = $180;
         $285 = $180;
         $174 = $285;
         $286 = $174;
         __THREW__ = 0;
         $287 = (invoke_ii(430,($286|0))|0);
         $288 = __THREW__; __THREW__ = 0;
         $289 = $288&1;
         if ($289) {
          label = 47;
          break L1;
         }
         __THREW__ = 0;
         invoke_viii(431,($280|0),($284|0),($287|0));
         $290 = __THREW__; __THREW__ = 0;
         $291 = $290&1;
         if ($291) {
          label = 47;
          break L1;
         }
         $173 = $210;
         $292 = $173;
         $172 = $292;
         $293 = $172;
         $171 = $293;
         $294 = $171;
         $170 = $294;
         $295 = $170;
         $169 = $295;
         $296 = $169;
         $168 = $296;
         $167 = $293;
         $297 = $167;
         $166 = $297;
         $298 = $166;
         $165 = $298;
         $299 = $165;
         $__a$i$i$i5 = $299;
         $__i$i$i$i6 = 0;
         while(1) {
          $300 = $__i$i$i$i6;
          $301 = ($300>>>0)<(3);
          if (!($301)) {
           break;
          }
          $302 = $__i$i$i$i6;
          $303 = $__a$i$i$i5;
          $304 = (($303) + ($302<<2)|0);
          HEAP32[$304>>2] = 0;
          $305 = $__i$i$i$i6;
          $306 = (($305) + 1)|0;
          $__i$i$i$i6 = $306;
         }
         __THREW__ = 0;
         invoke_viiii(414,($208|0),($275|0),($209|0),($210|0));
         $307 = __THREW__; __THREW__ = 0;
         $308 = $307&1;
         do {
          if ($308) {
           label = 57;
          } else {
           __THREW__ = 0;
           $309 = (invoke_iii(499,($208|0),35632)|0);
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if (!($311)) {
            HEAP32[$211>>2] = $309;
            __THREW__ = 0;
            invoke_vii(500,($shaders|0),($211|0));
            $312 = __THREW__; __THREW__ = 0;
            $313 = $312&1;
            if (!($313)) {
             __THREW__ = 0;
             invoke_vi(415,($208|0));
             $314 = __THREW__; __THREW__ = 0;
             $315 = $314&1;
             if ($315) {
              label = 57;
              break;
             }
             __THREW__ = 0;
             invoke_vi(415,($210|0));
             $316 = __THREW__; __THREW__ = 0;
             $317 = $316&1;
             if ($317) {
              $399 = ___cxa_find_matching_catch(-1,-1)|0;
              $400 = tempRet0;
              $203 = $399;
              $204 = $400;
              break;
             }
             __THREW__ = 0;
             invoke_vi(415,($209|0));
             $318 = __THREW__; __THREW__ = 0;
             $319 = $318&1;
             if ($319) {
              label = 47;
              break L1;
             }
             __THREW__ = 0;
             $320 = (invoke_i(429)|0);
             $321 = __THREW__; __THREW__ = 0;
             $322 = $321&1;
             if ($322) {
              label = 47;
              break L1;
             }
             $163 = $212;
             $164 = 1848;
             $323 = $163;
             $324 = $164;
             $161 = $323;
             $162 = $324;
             $325 = $161;
             $160 = $325;
             $326 = $160;
             $159 = $326;
             $327 = $159;
             $158 = $327;
             $328 = $158;
             $157 = $328;
             $329 = $162;
             $330 = $162;
             $156 = $330;
             $331 = $156;
             __THREW__ = 0;
             $332 = (invoke_ii(430,($331|0))|0);
             $333 = __THREW__; __THREW__ = 0;
             $334 = $333&1;
             if ($334) {
              label = 47;
              break L1;
             }
             __THREW__ = 0;
             invoke_viii(431,($325|0),($329|0),($332|0));
             $335 = __THREW__; __THREW__ = 0;
             $336 = $335&1;
             if ($336) {
              label = 47;
              break L1;
             }
             $155 = $213;
             $337 = $155;
             $154 = $337;
             $338 = $154;
             $153 = $338;
             $339 = $153;
             $152 = $339;
             $340 = $152;
             $151 = $340;
             $341 = $151;
             $150 = $341;
             $149 = $338;
             $342 = $149;
             $148 = $342;
             $343 = $148;
             $147 = $343;
             $344 = $147;
             $__a$i$i$i11 = $344;
             $__i$i$i$i12 = 0;
             while(1) {
              $345 = $__i$i$i$i12;
              $346 = ($345>>>0)<(3);
              if (!($346)) {
               break;
              }
              $347 = $__i$i$i$i12;
              $348 = $__a$i$i$i11;
              $349 = (($348) + ($347<<2)|0);
              HEAP32[$349>>2] = 0;
              $350 = $__i$i$i$i12;
              $351 = (($350) + 1)|0;
              $__i$i$i$i12 = $351;
             }
             __THREW__ = 0;
             invoke_viiii(414,($geometryShaderFilename|0),($320|0),($212|0),($213|0));
             $352 = __THREW__; __THREW__ = 0;
             $353 = $352&1;
             do {
              if ($353) {
               $413 = ___cxa_find_matching_catch(-1,-1)|0;
               $414 = tempRet0;
               $203 = $413;
               $204 = $414;
               __THREW__ = 0;
               invoke_vi(415,($213|0));
               $415 = __THREW__; __THREW__ = 0;
               $416 = $415&1;
               if ($416) {
                $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                $926 = tempRet0;
                ___clang_call_terminate($925);
                // unreachable;
               } else {
                break;
               }
              } else {
               __THREW__ = 0;
               invoke_vi(415,($213|0));
               $354 = __THREW__; __THREW__ = 0;
               $355 = $354&1;
               if ($355) {
                $411 = ___cxa_find_matching_catch(-1,-1)|0;
                $412 = tempRet0;
                $203 = $411;
                $204 = $412;
                break;
               }
               __THREW__ = 0;
               invoke_vi(415,($212|0));
               $356 = __THREW__; __THREW__ = 0;
               $357 = $356&1;
               if ($357) {
                label = 47;
                break L1;
               }
               $146 = $geometryShaderFilename;
               $358 = $146;
               $145 = $358;
               $359 = $145;
               $144 = $359;
               $360 = $144;
               $143 = $360;
               $361 = $143;
               $142 = $361;
               $362 = $142;
               $363 = HEAP8[$362>>0]|0;
               $364 = $363&255;
               $365 = $364 & 1;
               $366 = ($365|0)!=(0);
               if ($366) {
                $138 = $359;
                $367 = $138;
                $137 = $367;
                $368 = $137;
                $136 = $368;
                $369 = $136;
                $370 = (($369) + 4|0);
                $371 = HEAP32[$370>>2]|0;
                $379 = $371;
               } else {
                $141 = $359;
                $372 = $141;
                $140 = $372;
                $373 = $140;
                $139 = $373;
                $374 = $139;
                $375 = HEAP8[$374>>0]|0;
                $376 = $375&255;
                $377 = $376 >> 1;
                $379 = $377;
               }
               $378 = ($379|0)==(0);
               do {
                if ($378) {
                 label = 70;
                } else {
                 __THREW__ = 0;
                 $380 = (invoke_iii(499,($geometryShaderFilename|0),36313)|0);
                 $381 = __THREW__; __THREW__ = 0;
                 $382 = $381&1;
                 if ($382) {
                  label = 69;
                  break;
                 }
                 HEAP32[$214>>2] = $380;
                 __THREW__ = 0;
                 invoke_vii(500,($shaders|0),($214|0));
                 $383 = __THREW__; __THREW__ = 0;
                 $384 = $383&1;
                 if ($384) {
                  label = 69;
                  break;
                 }
                 label = 70;
                }
               } while(0);
               L67: do {
                if ((label|0) == 70) {
                 __THREW__ = 0;
                 $421 = (invoke_i(501)|0);
                 $422 = __THREW__; __THREW__ = 0;
                 $423 = $422&1;
                 if ($423) {
                  label = 69;
                  break;
                 }
                 $424 = (($229) + 16|0);
                 HEAP32[$424>>2] = $421;
                 $425 = (($229) + 16|0);
                 $426 = HEAP32[$425>>2]|0;
                 $427 = ($426|0)!=(0);
                 if (!($427)) {
                  __THREW__ = 0;
                  invoke_viii(419,(1872|0),(1904|0),63);
                  $428 = __THREW__; __THREW__ = 0;
                  $429 = $428&1;
                  if ($429) {
                   label = 69;
                   break;
                  }
                 }
                 $135 = $shaders;
                 $430 = $135;
                 $134 = $430;
                 $431 = $134;
                 $432 = (($431) + 4|0);
                 $433 = HEAP32[$432>>2]|0;
                 $132 = $it;
                 $133 = $433;
                 $434 = $132;
                 $435 = $133;
                 $130 = $434;
                 $131 = $435;
                 $436 = $130;
                 $437 = $131;
                 HEAP32[$436>>2] = $437;
                 while(1) {
                  $129 = $shaders;
                  $438 = $129;
                  $128 = $438;
                  $439 = $128;
                  $127 = $439;
                  $440 = $127;
                  $126 = $440;
                  $441 = $126;
                  $124 = $215;
                  $125 = $441;
                  $442 = $124;
                  $443 = $125;
                  $122 = $442;
                  $123 = $443;
                  $444 = $122;
                  $445 = $123;
                  HEAP32[$444>>2] = $445;
                  $120 = $it;
                  $121 = $215;
                  $446 = $120;
                  $447 = $121;
                  $118 = $446;
                  $119 = $447;
                  $448 = $118;
                  $449 = HEAP32[$448>>2]|0;
                  $450 = $119;
                  $451 = HEAP32[$450>>2]|0;
                  $452 = ($449|0)==($451|0);
                  $453 = $452 ^ 1;
                  if (!($453)) {
                   break;
                  }
                  $454 = (($229) + 16|0);
                  $455 = HEAP32[$454>>2]|0;
                  $101 = $it;
                  $456 = $101;
                  $457 = HEAP32[$456>>2]|0;
                  $458 = (($457) + 8|0);
                  $459 = HEAP32[$458>>2]|0;
                  __THREW__ = 0;
                  invoke_vii(502,($455|0),($459|0));
                  $460 = __THREW__; __THREW__ = 0;
                  $461 = $460&1;
                  if ($461) {
                   label = 69;
                   break L67;
                  }
                  $93 = $it;
                  $462 = $93;
                  $463 = HEAP32[$462>>2]|0;
                  $464 = (($463) + 4|0);
                  $465 = HEAP32[$464>>2]|0;
                  HEAP32[$462>>2] = $465;
                 }
                 $466 = (($229) + 16|0);
                 $467 = HEAP32[$466>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(503,($467|0),0,(1936|0));
                 $468 = __THREW__; __THREW__ = 0;
                 $469 = $468&1;
                 if ($469) {
                  label = 69;
                  break;
                 }
                 $470 = (($229) + 16|0);
                 $471 = HEAP32[$470>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(503,($471|0),1,(1952|0));
                 $472 = __THREW__; __THREW__ = 0;
                 $473 = $472&1;
                 if ($473) {
                  label = 69;
                  break;
                 }
                 $474 = (($229) + 16|0);
                 $475 = HEAP32[$474>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(503,($475|0),2,(1968|0));
                 $476 = __THREW__; __THREW__ = 0;
                 $477 = $476&1;
                 if ($477) {
                  label = 69;
                  break;
                 }
                 $478 = (($229) + 16|0);
                 $479 = HEAP32[$478>>2]|0;
                 __THREW__ = 0;
                 invoke_vi(504,($479|0));
                 $480 = __THREW__; __THREW__ = 0;
                 $481 = $480&1;
                 if ($481) {
                  label = 69;
                  break;
                 }
                 $482 = (($229) + 16|0);
                 $483 = HEAP32[$482>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(505,($483|0),35714,($res|0));
                 $484 = __THREW__; __THREW__ = 0;
                 $485 = $484&1;
                 if ($485) {
                  label = 69;
                  break;
                 }
                 $486 = (($229) + 16|0);
                 $487 = HEAP32[$486>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(505,($487|0),35716,($logSize|0));
                 $488 = __THREW__; __THREW__ = 0;
                 $489 = $488&1;
                 if ($489) {
                  label = 69;
                  break;
                 }
                 $490 = HEAP32[$logSize>>2]|0;
                 $491 = ($490|0)>(0);
                 L89: do {
                  if ($491) {
                   $492 = HEAP32[$logSize>>2]|0;
                   __THREW__ = 0;
                   invoke_vii(486,($shaderLog|0),($492|0));
                   $493 = __THREW__; __THREW__ = 0;
                   $494 = $493&1;
                   if ($494) {
                    label = 69;
                    break L67;
                   }
                   $495 = (($229) + 16|0);
                   $496 = HEAP32[$495>>2]|0;
                   $497 = HEAP32[$logSize>>2]|0;
                   $92 = $shaderLog;
                   $498 = $92;
                   $499 = HEAP32[$498>>2]|0;
                   $91 = $499;
                   $500 = $91;
                   __THREW__ = 0;
                   invoke_viiii(506,($496|0),($497|0),($written|0),($500|0));
                   $501 = __THREW__; __THREW__ = 0;
                   $502 = $501&1;
                   do {
                    if (!($502)) {
                     $90 = $shaderLog;
                     $503 = $90;
                     $504 = HEAP32[$503>>2]|0;
                     $89 = $504;
                     $505 = $89;
                     __THREW__ = 0;
                     $506 = (invoke_iii(449,(4008|0),($505|0))|0);
                     $507 = __THREW__; __THREW__ = 0;
                     $508 = $507&1;
                     if ($508) {
                      break;
                     }
                     $87 = $506;
                     $88 = 451;
                     $509 = $87;
                     $510 = $88;
                     __THREW__ = 0;
                     (invoke_ii($510|0,($509|0))|0);
                     $511 = __THREW__; __THREW__ = 0;
                     $512 = $511&1;
                     if ($512) {
                      break;
                     }
                     __THREW__ = 0;
                     invoke_vi(488,($shaderLog|0));
                     $513 = __THREW__; __THREW__ = 0;
                     $514 = $513&1;
                     if ($514) {
                      label = 69;
                      break L67;
                     }
                     break L89;
                    }
                   } while(0);
                   $515 = ___cxa_find_matching_catch(-1,-1)|0;
                   $516 = tempRet0;
                   $203 = $515;
                   $204 = $516;
                   __THREW__ = 0;
                   invoke_vi(488,($shaderLog|0));
                   $517 = __THREW__; __THREW__ = 0;
                   $518 = $517&1;
                   if ($518) {
                    $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                    $926 = tempRet0;
                    ___clang_call_terminate($925);
                    // unreachable;
                   } else {
                    break L67;
                   }
                  }
                 } while(0);
                 $519 = HEAP32[$res>>2]|0;
                 $520 = ($519|0)==(0);
                 if ($520) {
                  $521 = (($229) + 16|0);
                  $522 = HEAP32[$521>>2]|0;
                  __THREW__ = 0;
                  invoke_vi(507,($522|0));
                  $523 = __THREW__; __THREW__ = 0;
                  $524 = $523&1;
                  if ($524) {
                   label = 69;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(419,(1984|0),(1904|0),92);
                  $525 = __THREW__; __THREW__ = 0;
                  $526 = $525&1;
                  if ($526) {
                   label = 69;
                   break;
                  }
                 }
                 $527 = (($229) + 16|0);
                 $528 = HEAP32[$527>>2]|0;
                 __THREW__ = 0;
                 invoke_vi(508,($528|0));
                 $529 = __THREW__; __THREW__ = 0;
                 $530 = $529&1;
                 if ($530) {
                  label = 69;
                  break;
                 }
                 __THREW__ = 0;
                 $531 = (invoke_i(429)|0);
                 $532 = __THREW__; __THREW__ = 0;
                 $533 = $532&1;
                 if ($533) {
                  label = 69;
                  break;
                 }
                 $85 = $216;
                 $86 = 2016;
                 $534 = $85;
                 $535 = $86;
                 $83 = $534;
                 $84 = $535;
                 $536 = $83;
                 $82 = $536;
                 $537 = $82;
                 $81 = $537;
                 $538 = $81;
                 $80 = $538;
                 $539 = $80;
                 $79 = $539;
                 $540 = $84;
                 $541 = $84;
                 $78 = $541;
                 $542 = $78;
                 __THREW__ = 0;
                 $543 = (invoke_ii(430,($542|0))|0);
                 $544 = __THREW__; __THREW__ = 0;
                 $545 = $544&1;
                 if ($545) {
                  label = 69;
                  break;
                 }
                 __THREW__ = 0;
                 invoke_viii(431,($536|0),($540|0),($543|0));
                 $546 = __THREW__; __THREW__ = 0;
                 $547 = $546&1;
                 if ($547) {
                  label = 69;
                  break;
                 }
                 __THREW__ = 0;
                 $548 = (invoke_iiii(428,($531|0),($216|0),0)|0);
                 $549 = __THREW__; __THREW__ = 0;
                 $550 = $549&1;
                 if ($550) {
                  $728 = ___cxa_find_matching_catch(-1,-1)|0;
                  $729 = tempRet0;
                  $203 = $728;
                  $204 = $729;
                  __THREW__ = 0;
                  invoke_vi(415,($216|0));
                  $730 = __THREW__; __THREW__ = 0;
                  $731 = $730&1;
                  if ($731) {
                   $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                   $926 = tempRet0;
                   ___clang_call_terminate($925);
                   // unreachable;
                  } else {
                   break;
                  }
                 }
                 __THREW__ = 0;
                 invoke_vi(415,($216|0));
                 $551 = __THREW__; __THREW__ = 0;
                 $552 = $551&1;
                 if ($552) {
                  label = 69;
                  break;
                 }
                 $nParticles = $548;
                 $553 = (($229) + 4|0);
                 __THREW__ = 0;
                 invoke_vii(509,1,($553|0));
                 $554 = __THREW__; __THREW__ = 0;
                 $555 = $554&1;
                 if ($555) {
                  label = 69;
                  break;
                 }
                 $556 = (($229) + 4|0);
                 $557 = HEAP32[$556>>2]|0;
                 __THREW__ = 0;
                 invoke_vii(510,34962,($557|0));
                 $558 = __THREW__; __THREW__ = 0;
                 $559 = $558&1;
                 if ($559) {
                  label = 69;
                  break;
                 }
                 $560 = $nParticles;
                 $561 = $560<<2;
                 $562 = $561<<2;
                 __THREW__ = 0;
                 $563 = (invoke_i(429)|0);
                 $564 = __THREW__; __THREW__ = 0;
                 $565 = $564&1;
                 if ($565) {
                  label = 69;
                  break;
                 }
                 $76 = $217;
                 $77 = 2032;
                 $566 = $76;
                 $567 = $77;
                 $74 = $566;
                 $75 = $567;
                 $568 = $74;
                 $73 = $568;
                 $569 = $73;
                 $72 = $569;
                 $570 = $72;
                 $71 = $570;
                 $571 = $71;
                 $70 = $571;
                 $572 = $75;
                 $573 = $75;
                 $69 = $573;
                 $574 = $69;
                 __THREW__ = 0;
                 $575 = (invoke_ii(430,($574|0))|0);
                 $576 = __THREW__; __THREW__ = 0;
                 $577 = $576&1;
                 if ($577) {
                  label = 69;
                  break;
                 }
                 __THREW__ = 0;
                 invoke_viii(431,($568|0),($572|0),($575|0));
                 $578 = __THREW__; __THREW__ = 0;
                 $579 = $578&1;
                 if ($579) {
                  label = 69;
                  break;
                 }
                 $66 = $68;
                 $67 = -1;
                 $580 = $66;
                 $581 = $67;
                 $64 = $580;
                 $65 = $581;
                 $582 = $64;
                 HEAP32[$582>>2] = 0;
                 $583 = HEAP32[$68>>2]|0;
                 HEAP32[$218>>2] = $583;
                 $63 = $218;
                 __THREW__ = 0;
                 $584 = (invoke_iiii(511,($563|0),($217|0),(0|0))|0);
                 $585 = __THREW__; __THREW__ = 0;
                 $586 = $585&1;
                 do {
                  if (!($586)) {
                   __THREW__ = 0;
                   invoke_viiii(512,34962,($562|0),($584|0),35048);
                   $587 = __THREW__; __THREW__ = 0;
                   $588 = $587&1;
                   if ($588) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vi(415,($217|0));
                   $589 = __THREW__; __THREW__ = 0;
                   $590 = $589&1;
                   if ($590) {
                    label = 69;
                    break L67;
                   }
                   $591 = (($229) + 8|0);
                   __THREW__ = 0;
                   invoke_vii(509,1,($591|0));
                   $592 = __THREW__; __THREW__ = 0;
                   $593 = $592&1;
                   if ($593) {
                    label = 69;
                    break L67;
                   }
                   $594 = (($229) + 8|0);
                   $595 = HEAP32[$594>>2]|0;
                   __THREW__ = 0;
                   invoke_vii(510,34962,($595|0));
                   $596 = __THREW__; __THREW__ = 0;
                   $597 = $596&1;
                   if ($597) {
                    label = 69;
                    break L67;
                   }
                   $598 = $nParticles;
                   $599 = $598<<2;
                   $600 = $599<<2;
                   __THREW__ = 0;
                   $601 = (invoke_i(429)|0);
                   $602 = __THREW__; __THREW__ = 0;
                   $603 = $602&1;
                   if ($603) {
                    label = 69;
                    break L67;
                   }
                   $61 = $219;
                   $62 = 2040;
                   $604 = $61;
                   $605 = $62;
                   $59 = $604;
                   $60 = $605;
                   $606 = $59;
                   $58 = $606;
                   $607 = $58;
                   $57 = $607;
                   $608 = $57;
                   $56 = $608;
                   $609 = $56;
                   $55 = $609;
                   $610 = $60;
                   $611 = $60;
                   $54 = $611;
                   $612 = $54;
                   __THREW__ = 0;
                   $613 = (invoke_ii(430,($612|0))|0);
                   $614 = __THREW__; __THREW__ = 0;
                   $615 = $614&1;
                   if ($615) {
                    label = 69;
                    break L67;
                   }
                   __THREW__ = 0;
                   invoke_viii(431,($606|0),($610|0),($613|0));
                   $616 = __THREW__; __THREW__ = 0;
                   $617 = $616&1;
                   if ($617) {
                    label = 69;
                    break L67;
                   }
                   $51 = $53;
                   $52 = -1;
                   $618 = $51;
                   $619 = $52;
                   $49 = $618;
                   $50 = $619;
                   $620 = $49;
                   HEAP32[$620>>2] = 0;
                   $621 = HEAP32[$53>>2]|0;
                   HEAP32[$220>>2] = $621;
                   $48 = $220;
                   __THREW__ = 0;
                   $622 = (invoke_iiii(511,($601|0),($219|0),(0|0))|0);
                   $623 = __THREW__; __THREW__ = 0;
                   $624 = $623&1;
                   do {
                    if (!($624)) {
                     __THREW__ = 0;
                     invoke_viiii(512,34962,($600|0),($622|0),35048);
                     $625 = __THREW__; __THREW__ = 0;
                     $626 = $625&1;
                     if ($626) {
                      break;
                     }
                     __THREW__ = 0;
                     invoke_vi(415,($219|0));
                     $627 = __THREW__; __THREW__ = 0;
                     $628 = $627&1;
                     if ($628) {
                      label = 69;
                      break L67;
                     }
                     $629 = (($229) + 12|0);
                     __THREW__ = 0;
                     invoke_vii(513,1,($629|0));
                     $630 = __THREW__; __THREW__ = 0;
                     $631 = $630&1;
                     if ($631) {
                      label = 69;
                      break L67;
                     }
                     $632 = (($229) + 12|0);
                     $633 = HEAP32[$632>>2]|0;
                     __THREW__ = 0;
                     invoke_vi(514,($633|0));
                     $634 = __THREW__; __THREW__ = 0;
                     $635 = $634&1;
                     if ($635) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_vi(515,0);
                     $636 = __THREW__; __THREW__ = 0;
                     $637 = $636&1;
                     if ($637) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_vi(515,1);
                     $638 = __THREW__; __THREW__ = 0;
                     $639 = $638&1;
                     if ($639) {
                      label = 69;
                      break L67;
                     }
                     $640 = (($229) + 4|0);
                     $641 = HEAP32[$640>>2]|0;
                     __THREW__ = 0;
                     invoke_vii(510,34962,($641|0));
                     $642 = __THREW__; __THREW__ = 0;
                     $643 = $642&1;
                     if ($643) {
                      label = 69;
                      break L67;
                     }
                     $36 = $38;
                     $37 = -1;
                     $644 = $36;
                     $645 = $37;
                     $34 = $644;
                     $35 = $645;
                     $646 = $34;
                     HEAP32[$646>>2] = 0;
                     $647 = HEAP32[$38>>2]|0;
                     HEAP32[$221>>2] = $647;
                     $33 = $221;
                     __THREW__ = 0;
                     invoke_viiiiii(516,0,4,5126,0,0,(0|0));
                     $648 = __THREW__; __THREW__ = 0;
                     $649 = $648&1;
                     if ($649) {
                      label = 69;
                      break L67;
                     }
                     $650 = (($229) + 8|0);
                     $651 = HEAP32[$650>>2]|0;
                     __THREW__ = 0;
                     invoke_vii(510,34962,($651|0));
                     $652 = __THREW__; __THREW__ = 0;
                     $653 = $652&1;
                     if ($653) {
                      label = 69;
                      break L67;
                     }
                     $30 = $32;
                     $31 = -1;
                     $654 = $30;
                     $655 = $31;
                     $28 = $654;
                     $29 = $655;
                     $656 = $28;
                     HEAP32[$656>>2] = 0;
                     $657 = HEAP32[$32>>2]|0;
                     HEAP32[$222>>2] = $657;
                     $27 = $222;
                     __THREW__ = 0;
                     invoke_viiiiii(516,1,4,5126,0,0,(0|0));
                     $658 = __THREW__; __THREW__ = 0;
                     $659 = $658&1;
                     if ($659) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     $660 = (invoke_i(429)|0);
                     $661 = __THREW__; __THREW__ = 0;
                     $662 = $661&1;
                     if ($662) {
                      label = 69;
                      break L67;
                     }
                     $25 = $223;
                     $26 = 2048;
                     $663 = $25;
                     $664 = $26;
                     $23 = $663;
                     $24 = $664;
                     $665 = $23;
                     $22 = $665;
                     $666 = $22;
                     $21 = $666;
                     $667 = $21;
                     $20 = $667;
                     $668 = $20;
                     $19 = $668;
                     $669 = $24;
                     $670 = $24;
                     $18 = $670;
                     $671 = $18;
                     __THREW__ = 0;
                     $672 = (invoke_ii(430,($671|0))|0);
                     $673 = __THREW__; __THREW__ = 0;
                     $674 = $673&1;
                     if ($674) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_viii(431,($665|0),($669|0),($672|0));
                     $675 = __THREW__; __THREW__ = 0;
                     $676 = $675&1;
                     if ($676) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     $677 = (invoke_iii(432,($660|0),($223|0))|0);
                     $678 = __THREW__; __THREW__ = 0;
                     $679 = $678&1;
                     if ($679) {
                      $740 = ___cxa_find_matching_catch(-1,-1)|0;
                      $741 = tempRet0;
                      $203 = $740;
                      $204 = $741;
                      __THREW__ = 0;
                      invoke_vi(415,($223|0));
                      $742 = __THREW__; __THREW__ = 0;
                      $743 = $742&1;
                      if ($743) {
                       $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                       $926 = tempRet0;
                       ___clang_call_terminate($925);
                       // unreachable;
                      } else {
                       break L67;
                      }
                     }
                     __THREW__ = 0;
                     invoke_vi(415,($223|0));
                     $680 = __THREW__; __THREW__ = 0;
                     $681 = $680&1;
                     if ($681) {
                      label = 69;
                      break L67;
                     }
                     do {
                      if ($677) {
                       __THREW__ = 0;
                       $682 = (invoke_i(429)|0);
                       $683 = __THREW__; __THREW__ = 0;
                       $684 = $683&1;
                       if ($684) {
                        label = 69;
                        break L67;
                       }
                       $16 = $224;
                       $17 = 2064;
                       $685 = $16;
                       $686 = $17;
                       $14 = $685;
                       $15 = $686;
                       $687 = $14;
                       $13 = $687;
                       $688 = $13;
                       $12 = $688;
                       $689 = $12;
                       $11 = $689;
                       $690 = $11;
                       $10 = $690;
                       $691 = $15;
                       $692 = $15;
                       $9 = $692;
                       $693 = $9;
                       __THREW__ = 0;
                       $694 = (invoke_ii(430,($693|0))|0);
                       $695 = __THREW__; __THREW__ = 0;
                       $696 = $695&1;
                       if ($696) {
                        label = 69;
                        break L67;
                       }
                       __THREW__ = 0;
                       invoke_viii(431,($687|0),($691|0),($694|0));
                       $697 = __THREW__; __THREW__ = 0;
                       $698 = $697&1;
                       if ($698) {
                        label = 69;
                        break L67;
                       }
                       $699 = (($229) + 4|0);
                       $700 = HEAP32[$699>>2]|0;
                       __THREW__ = 0;
                       invoke_viii(517,($682|0),($224|0),($700|0));
                       $701 = __THREW__; __THREW__ = 0;
                       $702 = $701&1;
                       if ($702) {
                        $744 = ___cxa_find_matching_catch(-1,-1)|0;
                        $745 = tempRet0;
                        $203 = $744;
                        $204 = $745;
                        __THREW__ = 0;
                        invoke_vi(415,($224|0));
                        $746 = __THREW__; __THREW__ = 0;
                        $747 = $746&1;
                        if ($747) {
                         $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                         $926 = tempRet0;
                         ___clang_call_terminate($925);
                         // unreachable;
                        } else {
                         break L67;
                        }
                       }
                       __THREW__ = 0;
                       invoke_vi(415,($224|0));
                       $703 = __THREW__; __THREW__ = 0;
                       $704 = $703&1;
                       if ($704) {
                        label = 69;
                        break L67;
                       }
                       __THREW__ = 0;
                       $705 = (invoke_i(429)|0);
                       $706 = __THREW__; __THREW__ = 0;
                       $707 = $706&1;
                       if ($707) {
                        label = 69;
                        break L67;
                       }
                       $7 = $225;
                       $8 = 2072;
                       $708 = $7;
                       $709 = $8;
                       $5 = $708;
                       $6 = $709;
                       $710 = $5;
                       $4 = $710;
                       $711 = $4;
                       $3 = $711;
                       $712 = $3;
                       $2 = $712;
                       $713 = $2;
                       $1 = $713;
                       $714 = $6;
                       $715 = $6;
                       $0 = $715;
                       $716 = $0;
                       __THREW__ = 0;
                       $717 = (invoke_ii(430,($716|0))|0);
                       $718 = __THREW__; __THREW__ = 0;
                       $719 = $718&1;
                       if ($719) {
                        label = 69;
                        break L67;
                       }
                       __THREW__ = 0;
                       invoke_viii(431,($710|0),($714|0),($717|0));
                       $720 = __THREW__; __THREW__ = 0;
                       $721 = $720&1;
                       if ($721) {
                        label = 69;
                        break L67;
                       }
                       $722 = (($229) + 8|0);
                       $723 = HEAP32[$722>>2]|0;
                       __THREW__ = 0;
                       invoke_viii(517,($705|0),($225|0),($723|0));
                       $724 = __THREW__; __THREW__ = 0;
                       $725 = $724&1;
                       if (!($725)) {
                        __THREW__ = 0;
                        invoke_vi(415,($225|0));
                        $726 = __THREW__; __THREW__ = 0;
                        $727 = $726&1;
                        if ($727) {
                         label = 69;
                         break L67;
                        }
                        break;
                       }
                       $748 = ___cxa_find_matching_catch(-1,-1)|0;
                       $749 = tempRet0;
                       $203 = $748;
                       $204 = $749;
                       __THREW__ = 0;
                       invoke_vi(415,($225|0));
                       $750 = __THREW__; __THREW__ = 0;
                       $751 = $750&1;
                       if ($751) {
                        $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                        $926 = tempRet0;
                        ___clang_call_terminate($925);
                        // unreachable;
                       } else {
                        break L67;
                       }
                      }
                     } while(0);
                     __THREW__ = 0;
                     $752 = (invoke_i(429)|0);
                     $753 = __THREW__; __THREW__ = 0;
                     $754 = $753&1;
                     if ($754) {
                      label = 69;
                      break L67;
                     }
                     $46 = $226;
                     $47 = 2088;
                     $755 = $46;
                     $756 = $47;
                     $44 = $755;
                     $45 = $756;
                     $757 = $44;
                     $43 = $757;
                     $758 = $43;
                     $42 = $758;
                     $759 = $42;
                     $41 = $759;
                     $760 = $41;
                     $40 = $760;
                     $761 = $45;
                     $762 = $45;
                     $39 = $762;
                     $763 = $39;
                     __THREW__ = 0;
                     $764 = (invoke_ii(430,($763|0))|0);
                     $765 = __THREW__; __THREW__ = 0;
                     $766 = $765&1;
                     if ($766) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_viii(431,($757|0),($761|0),($764|0));
                     $767 = __THREW__; __THREW__ = 0;
                     $768 = $767&1;
                     if ($768) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     $769 = (invoke_iii(432,($752|0),($226|0))|0);
                     $770 = __THREW__; __THREW__ = 0;
                     $771 = $770&1;
                     if ($771) {
                      $826 = ___cxa_find_matching_catch(-1,-1)|0;
                      $827 = tempRet0;
                      $203 = $826;
                      $204 = $827;
                      __THREW__ = 0;
                      invoke_vi(415,($226|0));
                      $828 = __THREW__; __THREW__ = 0;
                      $829 = $828&1;
                      if ($829) {
                       $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                       $926 = tempRet0;
                       ___clang_call_terminate($925);
                       // unreachable;
                      } else {
                       break L67;
                      }
                     }
                     $772 = $769 ? 3 : 0;
                     __THREW__ = 0;
                     invoke_vi(415,($226|0));
                     $773 = __THREW__; __THREW__ = 0;
                     $774 = $773&1;
                     if ($774) {
                      label = 69;
                      break L67;
                     }
                     $nFrameBuffers = $772;
                     $775 = (($229) + 20|0);
                     $776 = $nFrameBuffers;
                     $777 = (($776) + 1)|0;
                     __THREW__ = 0;
                     invoke_vii(518,($775|0),($777|0));
                     $778 = __THREW__; __THREW__ = 0;
                     $779 = $778&1;
                     if ($779) {
                      label = 69;
                      break L67;
                     }
                     $780 = (($229) + 32|0);
                     $781 = $nFrameBuffers;
                     __THREW__ = 0;
                     invoke_vii(518,($780|0),($781|0));
                     $782 = __THREW__; __THREW__ = 0;
                     $783 = $782&1;
                     if ($783) {
                      label = 69;
                      break L67;
                     }
                     $784 = (($229) + 20|0);
                     $94 = $784;
                     $785 = $94;
                     $786 = (($785) + 4|0);
                     $787 = HEAP32[$786>>2]|0;
                     $788 = (($787) + -4|0);
                     HEAP32[$788>>2] = 0;
                     HEAP32[$windowWidth>>2] = -1;
                     HEAP32[$windowHeight>>2] = -1;
                     __THREW__ = 0;
                     $789 = (invoke_i(519)|0);
                     $790 = __THREW__; __THREW__ = 0;
                     $791 = $790&1;
                     if ($791) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_viii(520,($789|0),($windowWidth|0),($windowHeight|0));
                     $792 = __THREW__; __THREW__ = 0;
                     $793 = $792&1;
                     if ($793) {
                      label = 69;
                      break L67;
                     }
                     $794 = $nFrameBuffers;
                     $795 = ($794|0)!=(0);
                     if ($795) {
                      $796 = $nFrameBuffers;
                      $797 = (($229) + 20|0);
                      $96 = $797;
                      $798 = $96;
                      $799 = HEAP32[$798>>2]|0;
                      $95 = $799;
                      $800 = $95;
                      __THREW__ = 0;
                      invoke_vii(521,($796|0),($800|0));
                      $801 = __THREW__; __THREW__ = 0;
                      $802 = $801&1;
                      if ($802) {
                       label = 69;
                       break L67;
                      }
                      $803 = $nFrameBuffers;
                      $804 = (($229) + 32|0);
                      $98 = $804;
                      $805 = $98;
                      $806 = HEAP32[$805>>2]|0;
                      $97 = $806;
                      $807 = $97;
                      __THREW__ = 0;
                      invoke_vii(522,($803|0),($807|0));
                      $808 = __THREW__; __THREW__ = 0;
                      $809 = $808&1;
                      if ($809) {
                       label = 69;
                       break L67;
                      }
                      $i = 0;
                      while(1) {
                       $810 = $i;
                       $811 = $nFrameBuffers;
                       $812 = ($810|0)<($811|0);
                       if (!($812)) {
                        break;
                       }
                       $813 = (($229) + 20|0);
                       $814 = $i;
                       $99 = $813;
                       $100 = $814;
                       $815 = $99;
                       $816 = $100;
                       $817 = HEAP32[$815>>2]|0;
                       $818 = (($817) + ($816<<2)|0);
                       $819 = HEAP32[$818>>2]|0;
                       __THREW__ = 0;
                       invoke_vii(523,36160,($819|0));
                       $820 = __THREW__; __THREW__ = 0;
                       $821 = $820&1;
                       if ($821) {
                        label = 69;
                        break L67;
                       }
                       $822 = $i;
                       $823 = ($822|0)>(0);
                       if ($823) {
                        __THREW__ = 0;
                        invoke_vi(524,33984);
                        $824 = __THREW__; __THREW__ = 0;
                        $825 = $824&1;
                        if ($825) {
                         label = 69;
                         break L67;
                        }
                       }
                       $830 = (($229) + 32|0);
                       $831 = $i;
                       $102 = $830;
                       $103 = $831;
                       $832 = $102;
                       $833 = $103;
                       $834 = HEAP32[$832>>2]|0;
                       $835 = (($834) + ($833<<2)|0);
                       $836 = HEAP32[$835>>2]|0;
                       __THREW__ = 0;
                       invoke_vii(525,3553,($836|0));
                       $837 = __THREW__; __THREW__ = 0;
                       $838 = $837&1;
                       if ($838) {
                        label = 69;
                        break L67;
                       }
                       $839 = HEAP32[$windowWidth>>2]|0;
                       $840 = HEAP32[$windowHeight>>2]|0;
                       __THREW__ = 0;
                       invoke_viiiiiiiii(526,3553,0,6408,($839|0),($840|0),0,6408,5121,(0|0));
                       $841 = __THREW__; __THREW__ = 0;
                       $842 = $841&1;
                       if ($842) {
                        label = 69;
                        break L67;
                       }
                       __THREW__ = 0;
                       invoke_viii(527,3553,10241,9728);
                       $843 = __THREW__; __THREW__ = 0;
                       $844 = $843&1;
                       if ($844) {
                        label = 69;
                        break L67;
                       }
                       __THREW__ = 0;
                       invoke_viii(527,3553,10240,9728);
                       $845 = __THREW__; __THREW__ = 0;
                       $846 = $845&1;
                       if ($846) {
                        label = 69;
                        break L67;
                       }
                       $847 = (($229) + 32|0);
                       $848 = $i;
                       $104 = $847;
                       $105 = $848;
                       $849 = $104;
                       $850 = $105;
                       $851 = HEAP32[$849>>2]|0;
                       $852 = (($851) + ($850<<2)|0);
                       $853 = HEAP32[$852>>2]|0;
                       __THREW__ = 0;
                       invoke_viiiii(528,36160,36064,3553,($853|0),0);
                       $854 = __THREW__; __THREW__ = 0;
                       $855 = $854&1;
                       if ($855) {
                        label = 69;
                        break L67;
                       }
                       $856 = $i;
                       $857 = (($856) + 1)|0;
                       $i = $857;
                      }
                      __THREW__ = 0;
                      invoke_vii(523,36160,0);
                      $858 = __THREW__; __THREW__ = 0;
                      $859 = $858&1;
                      if ($859) {
                       label = 69;
                       break L67;
                      }
                     }
                     $860 = $nFrameBuffers;
                     $861 = ($860|0)!=(0);
                     if ($861) {
                      dest=$verts+0|0; src=2104+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
                      dest=$tex_coords+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                      $862 = (($tex_coords) + 8|0);
                      HEAPF32[$862>>2] = 1.0;
                      $863 = (($tex_coords) + 16|0);
                      HEAPF32[$863>>2] = 1.0;
                      $864 = (($tex_coords) + 20|0);
                      HEAPF32[$864>>2] = 1.0;
                      $865 = (($tex_coords) + 32|0);
                      HEAPF32[$865>>2] = 1.0;
                      $866 = (($tex_coords) + 36|0);
                      HEAPF32[$866>>2] = 1.0;
                      $867 = (($tex_coords) + 44|0);
                      HEAPF32[$867>>2] = 1.0;
                      __THREW__ = 0;
                      invoke_vii(509,2,($vbo|0));
                      $868 = __THREW__; __THREW__ = 0;
                      $869 = $868&1;
                      if ($869) {
                       label = 69;
                       break L67;
                      }
                      $870 = HEAP32[$vbo>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(510,34962,($870|0));
                      $871 = __THREW__; __THREW__ = 0;
                      $872 = $871&1;
                      if ($872) {
                       label = 69;
                       break L67;
                      }
                      __THREW__ = 0;
                      invoke_viiii(512,34962,72,($verts|0),35044);
                      $873 = __THREW__; __THREW__ = 0;
                      $874 = $873&1;
                      if ($874) {
                       label = 69;
                       break L67;
                      }
                      $875 = (($vbo) + 4|0);
                      $876 = HEAP32[$875>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(510,34962,($876|0));
                      $877 = __THREW__; __THREW__ = 0;
                      $878 = $877&1;
                      if ($878) {
                       label = 69;
                       break L67;
                      }
                      __THREW__ = 0;
                      invoke_viiii(512,34962,48,($tex_coords|0),35044);
                      $879 = __THREW__; __THREW__ = 0;
                      $880 = $879&1;
                      if ($880) {
                       label = 69;
                       break L67;
                      }
                      $881 = (($229) + 56|0);
                      __THREW__ = 0;
                      invoke_vii(513,1,($881|0));
                      $882 = __THREW__; __THREW__ = 0;
                      $883 = $882&1;
                      if ($883) {
                       label = 69;
                       break L67;
                      }
                      $884 = (($229) + 56|0);
                      $885 = HEAP32[$884>>2]|0;
                      __THREW__ = 0;
                      invoke_vi(514,($885|0));
                      $886 = __THREW__; __THREW__ = 0;
                      $887 = $886&1;
                      if ($887) {
                       label = 69;
                       break L67;
                      }
                      $888 = HEAP32[$vbo>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(510,34962,($888|0));
                      $889 = __THREW__; __THREW__ = 0;
                      $890 = $889&1;
                      if ($890) {
                       label = 69;
                       break L67;
                      }
                      $108 = $110;
                      $109 = -1;
                      $891 = $108;
                      $892 = $109;
                      $106 = $891;
                      $107 = $892;
                      $893 = $106;
                      HEAP32[$893>>2] = 0;
                      $894 = HEAP32[$110>>2]|0;
                      HEAP32[$227>>2] = $894;
                      $111 = $227;
                      __THREW__ = 0;
                      invoke_viiiiii(516,0,3,5126,0,0,(0|0));
                      $895 = __THREW__; __THREW__ = 0;
                      $896 = $895&1;
                      if ($896) {
                       label = 69;
                       break L67;
                      }
                      __THREW__ = 0;
                      invoke_vi(515,0);
                      $897 = __THREW__; __THREW__ = 0;
                      $898 = $897&1;
                      if ($898) {
                       label = 69;
                       break L67;
                      }
                      $899 = (($vbo) + 4|0);
                      $900 = HEAP32[$899>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(510,34962,($900|0));
                      $901 = __THREW__; __THREW__ = 0;
                      $902 = $901&1;
                      if ($902) {
                       label = 69;
                       break L67;
                      }
                      $114 = $116;
                      $115 = -1;
                      $903 = $114;
                      $904 = $115;
                      $112 = $903;
                      $113 = $904;
                      $905 = $112;
                      HEAP32[$905>>2] = 0;
                      $906 = HEAP32[$116>>2]|0;
                      HEAP32[$228>>2] = $906;
                      $117 = $228;
                      __THREW__ = 0;
                      invoke_viiiiii(516,2,2,5126,0,0,(0|0));
                      $907 = __THREW__; __THREW__ = 0;
                      $908 = $907&1;
                      if ($908) {
                       label = 69;
                       break L67;
                      }
                      __THREW__ = 0;
                      invoke_vi(515,2);
                      $909 = __THREW__; __THREW__ = 0;
                      $910 = $909&1;
                      if ($910) {
                       label = 69;
                       break L67;
                      }
                      __THREW__ = 0;
                      invoke_vi(514,0);
                      $911 = __THREW__; __THREW__ = 0;
                      $912 = $911&1;
                      if ($912) {
                       label = 69;
                       break L67;
                      }
                     }
                     __THREW__ = 0;
                     invoke_vi(529,3042);
                     $913 = __THREW__; __THREW__ = 0;
                     $914 = $913&1;
                     if ($914) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_viiii(530,770,771,1,771);
                     $915 = __THREW__; __THREW__ = 0;
                     $916 = $915&1;
                     if ($916) {
                      label = 69;
                      break L67;
                     }
                     __THREW__ = 0;
                     invoke_vi(415,($geometryShaderFilename|0));
                     $917 = __THREW__; __THREW__ = 0;
                     $918 = $917&1;
                     if ($918) {
                      label = 47;
                      break L1;
                     }
                     __ZN7gltools15ShaderContainerD2Ev($shaders);
                     STACKTOP = sp;return;
                    }
                   } while(0);
                   $736 = ___cxa_find_matching_catch(-1,-1)|0;
                   $737 = tempRet0;
                   $203 = $736;
                   $204 = $737;
                   __THREW__ = 0;
                   invoke_vi(415,($219|0));
                   $738 = __THREW__; __THREW__ = 0;
                   $739 = $738&1;
                   if ($739) {
                    $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                    $926 = tempRet0;
                    ___clang_call_terminate($925);
                    // unreachable;
                   } else {
                    break L67;
                   }
                  }
                 } while(0);
                 $732 = ___cxa_find_matching_catch(-1,-1)|0;
                 $733 = tempRet0;
                 $203 = $732;
                 $204 = $733;
                 __THREW__ = 0;
                 invoke_vi(415,($217|0));
                 $734 = __THREW__; __THREW__ = 0;
                 $735 = $734&1;
                 if ($735) {
                  $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                  $926 = tempRet0;
                  ___clang_call_terminate($925);
                  // unreachable;
                 } else {
                  break;
                 }
                }
               } while(0);
               if ((label|0) == 69) {
                $419 = ___cxa_find_matching_catch(-1,-1)|0;
                $420 = tempRet0;
                $203 = $419;
                $204 = $420;
               }
               __THREW__ = 0;
               invoke_vi(415,($geometryShaderFilename|0));
               $919 = __THREW__; __THREW__ = 0;
               $920 = $919&1;
               if ($920) {
                $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                $926 = tempRet0;
                ___clang_call_terminate($925);
                // unreachable;
               } else {
                break L1;
               }
              }
             } while(0);
             __THREW__ = 0;
             invoke_vi(415,($212|0));
             $417 = __THREW__; __THREW__ = 0;
             $418 = $417&1;
             if ($418) {
              $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $926 = tempRet0;
              ___clang_call_terminate($925);
              // unreachable;
             } else {
              break L1;
             }
            }
           }
           $403 = ___cxa_find_matching_catch(-1,-1)|0;
           $404 = tempRet0;
           $203 = $403;
           $204 = $404;
           __THREW__ = 0;
           invoke_vi(415,($208|0));
           $405 = __THREW__; __THREW__ = 0;
           $406 = $405&1;
           if ($406) {
            $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
            $926 = tempRet0;
            ___clang_call_terminate($925);
            // unreachable;
           } else {
            label = 60;
            break;
           }
          }
         } while(0);
         if ((label|0) == 57) {
          $401 = ___cxa_find_matching_catch(-1,-1)|0;
          $402 = tempRet0;
          $203 = $401;
          $204 = $402;
          label = 60;
         }
         do {
          if ((label|0) == 60) {
           __THREW__ = 0;
           invoke_vi(415,($210|0));
           $407 = __THREW__; __THREW__ = 0;
           $408 = $407&1;
           if ($408) {
            $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
            $926 = tempRet0;
            ___clang_call_terminate($925);
            // unreachable;
           } else {
            break;
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(415,($209|0));
         $409 = __THREW__; __THREW__ = 0;
         $410 = $409&1;
         if ($410) {
          $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
          $926 = tempRet0;
          ___clang_call_terminate($925);
          // unreachable;
         } else {
          break L1;
         }
        }
       }
       $391 = ___cxa_find_matching_catch(-1,-1)|0;
       $392 = tempRet0;
       $203 = $391;
       $204 = $392;
       __THREW__ = 0;
       invoke_vi(415,($202|0));
       $393 = __THREW__; __THREW__ = 0;
       $394 = $393&1;
       if ($394) {
        $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $926 = tempRet0;
        ___clang_call_terminate($925);
        // unreachable;
       } else {
        label = 52;
        break;
       }
      }
     } while(0);
     if ((label|0) == 49) {
      $389 = ___cxa_find_matching_catch(-1,-1)|0;
      $390 = tempRet0;
      $203 = $389;
      $204 = $390;
      label = 52;
     }
     do {
      if ((label|0) == 52) {
       __THREW__ = 0;
       invoke_vi(415,($206|0));
       $395 = __THREW__; __THREW__ = 0;
       $396 = $395&1;
       if ($396) {
        $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $926 = tempRet0;
        ___clang_call_terminate($925);
        // unreachable;
       } else {
        break;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(415,($205|0));
     $397 = __THREW__; __THREW__ = 0;
     $398 = $397&1;
     if ($398) {
      $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $926 = tempRet0;
      ___clang_call_terminate($925);
      // unreachable;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $385 = ___cxa_find_matching_catch(-1,-1)|0;
  $386 = tempRet0;
  $203 = $385;
  $204 = $386;
 }
 __THREW__ = 0;
 invoke_vi(531,($shaders|0));
 $921 = __THREW__; __THREW__ = 0;
 $922 = $921&1;
 if ($922) {
  $925 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $926 = tempRet0;
  ___clang_call_terminate($925);
  // unreachable;
 }
 $923 = $203;
 $924 = $204;
 ___resumeException($923|0);
 // unreachable;
}
function __ZN7gltools15ShaderContainerC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN7gltools15ShaderContainerC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14listIjNS_9allocatorIjEEE9push_backERKj($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d1$i = 0, $__hold = 0, $__na = 0, $__t$i = 0, $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $49 = sp + 452|0;
 $50 = sp;
 $53 = sp + 240|0;
 $54 = sp + 248|0;
 $__t21$i$i$i = sp + 8|0;
 $57 = sp + 24|0;
 $60 = sp + 256|0;
 $61 = sp + 224|0;
 $__d1$i = sp + 32|0;
 $64 = sp + 16|0;
 $__hold = sp + 388|0;
 $99 = sp + 400|0;
 $97 = $this;
 $98 = $__x;
 $102 = $97;
 $96 = $102;
 $103 = $96;
 $104 = (($103) + 8|0);
 $95 = $104;
 $105 = $95;
 $94 = $105;
 $106 = $94;
 $__na = $106;
 $107 = $__na;
 $92 = $107;
 $93 = 1;
 $108 = $92;
 $109 = $93;
 $89 = $108;
 $90 = $109;
 $91 = 0;
 $110 = $90;
 $111 = ($110*12)|0;
 $112 = (__Znwj($111)|0);
 $113 = $__na;
 $86 = $99;
 $87 = $113;
 $88 = 1;
 $114 = $86;
 $115 = $88;
 $116 = $87;
 $83 = $114;
 $84 = $116;
 $85 = $115;
 $117 = $83;
 $118 = $84;
 HEAP32[$117>>2] = $118;
 $119 = (($117) + 4|0);
 $120 = $85;
 HEAP32[$119>>2] = $120;
 ;HEAP8[$64+0>>0]=HEAP8[$99+0>>0]|0;HEAP8[$64+1>>0]=HEAP8[$99+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$99+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$99+3>>0]|0;HEAP8[$64+4>>0]=HEAP8[$99+4>>0]|0;HEAP8[$64+5>>0]=HEAP8[$99+5>>0]|0;HEAP8[$64+6>>0]=HEAP8[$99+6>>0]|0;HEAP8[$64+7>>0]=HEAP8[$99+7>>0]|0;
 $62 = $__hold;
 $63 = $112;
 $121 = $62;
 $122 = $63;
 ;HEAP8[$__d1$i+0>>0]=HEAP8[$64+0>>0]|0;HEAP8[$__d1$i+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$__d1$i+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$__d1$i+3>>0]=HEAP8[$64+3>>0]|0;HEAP8[$__d1$i+4>>0]=HEAP8[$64+4>>0]|0;HEAP8[$__d1$i+5>>0]=HEAP8[$64+5>>0]|0;HEAP8[$__d1$i+6>>0]=HEAP8[$64+6>>0]|0;HEAP8[$__d1$i+7>>0]=HEAP8[$64+7>>0]|0;
 $59 = $121;
 HEAP32[$60>>2] = $122;
 $123 = $59;
 $58 = $60;
 $124 = $58;
 $125 = HEAP32[$124>>2]|0;
 $44 = $__d1$i;
 $126 = $44;
 ;HEAP32[$61+0>>2]=HEAP32[$126+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$126+4>>2]|0;
 ;HEAP8[$57+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$57+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$61+3>>0]|0;HEAP8[$57+4>>0]=HEAP8[$61+4>>0]|0;HEAP8[$57+5>>0]=HEAP8[$61+5>>0]|0;HEAP8[$57+6>>0]=HEAP8[$61+6>>0]|0;HEAP8[$57+7>>0]=HEAP8[$61+7>>0]|0;
 $55 = $123;
 $56 = $125;
 $127 = $55;
 $128 = $56;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$57+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$57+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$57+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$57+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$57+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$57+7>>0]|0;
 $52 = $127;
 HEAP32[$53>>2] = $128;
 $129 = $52;
 $51 = $53;
 $130 = $51;
 $131 = HEAP32[$130>>2]|0;
 $45 = $__t21$i$i$i;
 $132 = $45;
 ;HEAP32[$54+0>>2]=HEAP32[$132+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$132+4>>2]|0;
 ;HEAP8[$50+0>>0]=HEAP8[$54+0>>0]|0;HEAP8[$50+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$50+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$50+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$50+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$50+7>>0]=HEAP8[$54+7>>0]|0;
 $48 = $129;
 HEAP32[$49>>2] = $131;
 $133 = $48;
 $47 = $49;
 $134 = $47;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = (($133) + 4|0);
 $46 = $50;
 $137 = $46;
 ;HEAP32[$136+0>>2]=HEAP32[$137+0>>2]|0;HEAP32[$136+4>>2]=HEAP32[$137+4>>2]|0;
 $138 = $__na;
 $25 = $__hold;
 $139 = $25;
 $24 = $139;
 $140 = $24;
 $23 = $140;
 $141 = $23;
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + 8|0);
 $0 = $143;
 $144 = $0;
 $145 = $98;
 $1 = $138;
 $2 = $144;
 $3 = $145;
 $146 = $2;
 $147 = ($146|0)==(0|0);
 if (!($147)) {
  $148 = $3;
  $149 = HEAP32[$148>>2]|0;
  HEAP32[$146>>2] = $149;
 }
 $5 = $102;
 $150 = $5;
 $4 = $150;
 $151 = $4;
 $8 = $__hold;
 $152 = $8;
 $7 = $152;
 $153 = $7;
 $6 = $153;
 $154 = $6;
 $155 = HEAP32[$154>>2]|0;
 $11 = $__hold;
 $156 = $11;
 $10 = $156;
 $157 = $10;
 $9 = $157;
 $158 = $9;
 $159 = HEAP32[$158>>2]|0;
 $12 = $151;
 $13 = $155;
 $14 = $159;
 $160 = $13;
 $161 = $12;
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) + 4|0);
 HEAP32[$163>>2] = $160;
 $164 = $12;
 $165 = HEAP32[$164>>2]|0;
 $166 = $13;
 HEAP32[$166>>2] = $165;
 $167 = $14;
 $168 = $12;
 HEAP32[$168>>2] = $167;
 $169 = $12;
 $170 = $14;
 $171 = (($170) + 4|0);
 HEAP32[$171>>2] = $169;
 $17 = $102;
 $172 = $17;
 $173 = (($172) + 8|0);
 $16 = $173;
 $174 = $16;
 $15 = $174;
 $175 = $15;
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) + 1)|0;
 HEAP32[$175>>2] = $177;
 $22 = $__hold;
 $178 = $22;
 $21 = $178;
 $179 = $21;
 $20 = $179;
 $180 = $20;
 $181 = HEAP32[$180>>2]|0;
 $__t$i = $181;
 $19 = $178;
 $182 = $19;
 $18 = $182;
 $183 = $18;
 HEAP32[$183>>2] = 0;
 $43 = $__hold;
 $184 = $43;
 $42 = $184;
 $185 = $42;
 $40 = $185;
 $41 = 0;
 $186 = $40;
 $39 = $186;
 $187 = $39;
 $38 = $187;
 $188 = $38;
 $189 = HEAP32[$188>>2]|0;
 $__tmp$i$i$i2 = $189;
 $190 = $41;
 $29 = $186;
 $191 = $29;
 $28 = $191;
 $192 = $28;
 HEAP32[$192>>2] = $190;
 $193 = $__tmp$i$i$i2;
 $194 = ($193|0)!=(0|0);
 if (!($194)) {
  STACKTOP = sp;return;
 }
 $27 = $186;
 $195 = $27;
 $26 = $195;
 $196 = $26;
 $197 = (($196) + 4|0);
 $198 = $__tmp$i$i$i2;
 $36 = $197;
 $37 = $198;
 $199 = $36;
 $200 = HEAP32[$199>>2]|0;
 $201 = $37;
 $202 = (($199) + 4|0);
 $203 = HEAP32[$202>>2]|0;
 $33 = $200;
 $34 = $201;
 $35 = $203;
 $204 = $33;
 $205 = $34;
 $206 = $35;
 $30 = $204;
 $31 = $205;
 $32 = $206;
 $207 = $31;
 __ZdlPv($207);
 STACKTOP = sp;return;
}
function __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($this,$key,$def) {
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $__i1$i$i1 = sp;
 $14 = sp + 16|0;
 $24 = sp + 172|0;
 $26 = sp + 60|0;
 $28 = sp + 124|0;
 $__i1$i$i = sp + 8|0;
 $31 = sp + 24|0;
 $34 = sp + 68|0;
 $it = sp + 136|0;
 $39 = sp + 84|0;
 $36 = $this;
 $37 = $key;
 $38 = $def;
 $40 = $36;
 $41 = (($40) + 80|0);
 $42 = $37;
 $32 = $41;
 $33 = $42;
 $43 = $32;
 $44 = $33;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($34,$43,$44);
 ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$31+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$34+3>>0]|0;
 $30 = $it;
 $45 = $30;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$31+3>>0]|0;
 $29 = $45;
 $46 = $29;
 ;HEAP32[$46+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $47 = (($40) + 80|0);
 $27 = $47;
 $48 = $27;
 $25 = $48;
 $22 = $24;
 $23 = -1;
 $49 = $22;
 $50 = $23;
 $20 = $49;
 $21 = $50;
 $51 = $20;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$24>>2]|0;
 HEAP32[$26>>2] = $52;
 $15 = $26;
 $18 = $28;
 $19 = 0;
 $53 = $18;
 $54 = $19;
 $16 = $53;
 $17 = $54;
 $55 = $16;
 $56 = $17;
 HEAP32[$55>>2] = $56;
 ;HEAP8[$14+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$28+3>>0]|0;
 $13 = $39;
 $57 = $13;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$14+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$14+3>>0]|0;
 $12 = $57;
 $58 = $12;
 ;HEAP32[$58+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $4 = $it;
 $5 = $39;
 $59 = $4;
 $60 = $5;
 $2 = $59;
 $3 = $60;
 $61 = $2;
 $62 = $3;
 $0 = $61;
 $1 = $62;
 $63 = $0;
 $64 = HEAP32[$63>>2]|0;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($64|0)==($66|0);
 $68 = $67 ^ 1;
 if ($68) {
  $11 = $it;
  $69 = $11;
  $10 = $69;
  $70 = $10;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 8|0);
  $9 = $72;
  $73 = $9;
  $8 = $73;
  $74 = $8;
  $7 = $74;
  $75 = $7;
  $6 = $75;
  $76 = $6;
  $77 = (($76) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78;
  $35 = $79;
  $81 = $35;
  STACKTOP = sp;return ($81|0);
 } else {
  $80 = $38;
  $35 = $80;
  $81 = $35;
  STACKTOP = sp;return ($81|0);
 }
 return 0|0;
}
function __ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($this,$key,$val) {
 $this = $this|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $val;
 $3 = $0;
 $4 = $2;
 $5 = (($3) + 20|0);
 $6 = $1;
 $7 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($5,$6)|0);
 HEAP32[$7>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp;
 $6 = sp + 68|0;
 $15 = $this;
 $16 = $__sz;
 $17 = $15;
 $14 = $17;
 $18 = $14;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$18>>2]|0;
 $22 = $20;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 4)&-1;
 $__cs = $25;
 $26 = $__cs;
 $27 = $16;
 $28 = ($26>>>0)<($27>>>0);
 if ($28) {
  $29 = $16;
  $30 = $__cs;
  $31 = (($29) - ($30))|0;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($17,$31);
  STACKTOP = sp;return;
 }
 $32 = $__cs;
 $33 = $16;
 $34 = ($32>>>0)>($33>>>0);
 if ($34) {
  $35 = HEAP32[$17>>2]|0;
  $36 = $16;
  $37 = (($35) + ($36<<2)|0);
  $12 = $17;
  $13 = $37;
  $38 = $12;
  $39 = $13;
  $10 = $38;
  $11 = $39;
  $40 = $10;
  while(1) {
   $41 = $11;
   $42 = (($40) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($41|0)!=($43|0);
   if (!($44)) {
    break;
   }
   $9 = $40;
   $45 = $9;
   $46 = (($45) + 8|0);
   $8 = $46;
   $47 = $8;
   $7 = $47;
   $48 = $7;
   $49 = (($40) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -4|0);
   HEAP32[$49>>2] = $51;
   $0 = $51;
   $52 = $0;
   $4 = $48;
   $5 = $52;
   $53 = $4;
   $54 = $5;
   ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
   $1 = $53;
   $2 = $54;
  }
 }
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemo12resizeWindowEii($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = $this;
 $4 = $width;
 $5 = $height;
 $6 = $3;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = (($6) + 32|0);
  $2 = $8;
  $9 = $2;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$9>>2]|0;
  $13 = $11;
  $14 = $12;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 4)&-1;
  $17 = ($7>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = (($6) + 32|0);
  $19 = $i;
  $0 = $18;
  $1 = $19;
  $20 = $0;
  $21 = $1;
  $22 = HEAP32[$20>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  _glBindTexture(3553,($24|0));
  $25 = $4;
  $26 = $5;
  _glTexImage2D(3553,0,6408,($25|0),($26|0),0,6408,5121,(0|0));
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemo6renderEf($this,$simTime) {
 $this = $this|0;
 $simTime = +$simTime;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $M = 0, $MVP = 0, $P = 0, $V = 0, $aspectRatio = 0, $cursorX = 0, $cursorY = 0, $eye = 0, $eyeAzimuth = 0.0, $eyeDist = 0.0, $eyeZ = 0;
 var $hMVP = 0, $hTask = 0, $hTime = 0, $hWindowHeight = 0, $hWindowWidth = 0, $i = 0, $identityMatrix = 0, $invMVP = 0, $nParticles = 0, $rayBack = 0, $rayDir = 0, $rayFront = 0, $windowHeight = 0, $windowWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $20 = sp + 180|0;
 $windowWidth = sp + 200|0;
 $windowHeight = sp + 204|0;
 $aspectRatio = sp + 208|0;
 $eyeZ = sp + 760|0;
 $eye = sp + 768|0;
 $23 = sp + 784|0;
 $24 = sp + 792|0;
 $identityMatrix = sp + 800|0;
 $25 = sp + 264|0;
 $M = sp + 272|0;
 $26 = sp + 336|0;
 $V = sp + 344|0;
 $27 = sp + 408|0;
 $28 = sp + 420|0;
 $29 = sp + 424|0;
 $30 = sp + 428|0;
 $31 = sp + 440|0;
 $32 = sp + 444|0;
 $33 = sp + 448|0;
 $P = sp + 456|0;
 $34 = sp + 520|0;
 $35 = sp + 524|0;
 $36 = sp + 528|0;
 $MVP = sp + 536|0;
 $37 = sp + 600|0;
 $cursorX = sp + 664|0;
 $cursorY = sp + 668|0;
 $rayFront = sp + 672|0;
 $38 = sp + 688|0;
 $39 = sp + 692|0;
 $rayBack = sp + 696|0;
 $40 = sp + 120|0;
 $41 = sp + 96|0;
 $invMVP = sp;
 $42 = sp + 104|0;
 $43 = sp + 64|0;
 $44 = sp + 80|0;
 $45 = sp + 712|0;
 $rayDir = sp + 224|0;
 $46 = sp + 736|0;
 $18 = $this;
 $19 = $simTime;
 $47 = $18;
 $48 = (__ZN6global3parEv()|0);
 $16 = $20;
 $17 = 2016;
 $49 = $16;
 $50 = $17;
 $14 = $49;
 $15 = $50;
 $51 = $14;
 $13 = $51;
 $52 = $13;
 $12 = $52;
 $53 = $12;
 $11 = $53;
 $54 = $11;
 $10 = $54;
 $55 = $15;
 $56 = $15;
 $9 = $56;
 $57 = $9;
 $58 = (_strlen(($57|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($51,$55,$58);
 __THREW__ = 0;
 $59 = (invoke_iiii(428,($48|0),($20|0),0)|0);
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 if ($61) {
  $161 = ___cxa_find_matching_catch(-1,-1)|0;
  $162 = tempRet0;
  $21 = $161;
  $22 = $162;
  __THREW__ = 0;
  invoke_vi(415,($20|0));
  $163 = __THREW__; __THREW__ = 0;
  $164 = $163&1;
  if ($164) {
   $167 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $168 = tempRet0;
   ___clang_call_terminate($167);
   // unreachable;
  }
  $165 = $21;
  $166 = $22;
  ___resumeException($165|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($20);
 $nParticles = $59;
 HEAP32[$windowWidth>>2] = -1;
 HEAP32[$windowHeight>>2] = -1;
 $62 = (__ZN11Application3getEv()|0);
 __ZNK11Application13getWindowSizeERiS0_($62,$windowWidth,$windowHeight);
 $63 = HEAP32[$windowWidth>>2]|0;
 $64 = (+($63|0));
 $65 = HEAP32[$windowHeight>>2]|0;
 $66 = (+($65|0));
 $67 = $64 / $66;
 HEAPF32[$aspectRatio>>2] = $67;
 $68 = (($47) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_glGetUniformLocation(($69|0),(2176|0))|0);
 $hTime = $70;
 $71 = $hTime;
 $72 = $19;
 _glUniform1f(($71|0),(+$72));
 $73 = (($47) + 16|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (_glGetUniformLocation(($74|0),(2184|0))|0);
 $hMVP = $75;
 $76 = (($47) + 16|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (_glGetUniformLocation(($77|0),(2192|0))|0);
 $hTask = $78;
 $eyeDist = 100.0;
 $79 = $19;
 $80 = $79 * 0.400000005960464477539;
 $eyeAzimuth = $80;
 HEAPF32[$eyeZ>>2] = 25.0;
 $81 = $eyeDist;
 $82 = $eyeAzimuth;
 $8 = $82;
 $83 = $8;
 $84 = (+Math_cos((+$83)));
 $85 = $81 * $84;
 HEAPF32[$23>>2] = $85;
 $86 = $eyeDist;
 $87 = $eyeAzimuth;
 $7 = $87;
 $88 = $7;
 $89 = (+Math_sin((+$88)));
 $90 = $86 * $89;
 HEAPF32[$24>>2] = $90;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($eye,$23,$24,$eyeZ);
 HEAPF32[$25>>2] = 1.0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($identityMatrix,$25);
 HEAPF32[$26>>2] = 1.0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($M,$26);
 HEAPF32[$28>>2] = 0.0;
 HEAPF32[$29>>2] = 0.0;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($27,$28,$29,$eyeZ);
 HEAPF32[$31>>2] = 0.0;
 HEAPF32[$32>>2] = 0.0;
 HEAPF32[$33>>2] = 1.0;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($30,$31,$32,$33);
 __ZN3glm6lookAtIfEENS_6detail7tmat4x4IT_EERKNS1_5tvec3IS3_EES8_S8_($V,$eye,$27,$30);
 HEAPF32[$34>>2] = 25.0;
 HEAPF32[$35>>2] = 10.0;
 HEAPF32[$36>>2] = 200.0;
 __ZN3glm11perspectiveIfEENS_6detail7tmat4x4IT_EERKS3_S6_S6_S6_($P,$34,$aspectRatio,$35,$36);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($37,$P,$V);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($MVP,$37,$M);
 HEAPF32[$cursorX>>2] = 0.0;
 HEAPF32[$cursorY>>2] = 0.0;
 $91 = (__ZN11Application3getEv()|0);
 __ZNK11Application14getCursorPos01ERfS0_($91,$cursorX,$cursorY);
 $92 = +HEAPF32[$cursorX>>2];
 $93 = $92 * 2.0;
 $94 = $93 - 1.0;
 HEAPF32[$cursorX>>2] = $94;
 $95 = +HEAPF32[$cursorY>>2];
 $96 = $95 * 2.0;
 $97 = 1.0 - $96;
 HEAPF32[$cursorY>>2] = $97;
 HEAPF32[$38>>2] = -1.0;
 HEAPF32[$39>>2] = 1.0;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($rayFront,$cursorX,$cursorY,$38,$39);
 HEAPF32[$40>>2] = 1.0;
 HEAPF32[$41>>2] = 1.0;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($rayBack,$cursorX,$cursorY,$40,$41);
 __ZN3glm7inverseIfEENS_6detail7tmat4x4IT_EERKS4_($invMVP,$MVP);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($42,$invMVP,$rayFront);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayFront,$42)|0);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($43,$invMVP,$rayBack);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayBack,$43)|0);
 $98 = (($rayFront) + 12|0);
 __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($44,$rayFront,$98);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayFront,$44)|0);
 $99 = (($rayBack) + 12|0);
 __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($45,$rayBack,$99);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayBack,$45)|0);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($46,$rayBack,$rayFront);
 __ZN3glm9normalizeIfEENS_6detail5tvec4IT_EERKS4_($rayDir,$46);
 $100 = (__ZN11Application3getEv()|0);
 __ZN11Application12setCursorRayEPfS0_($100,$rayFront,$rayDir);
 $101 = (($47) + 16|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (_glGetUniformLocation(($102|0),(2200|0))|0);
 $hWindowWidth = $103;
 $104 = $hWindowWidth;
 $105 = HEAP32[$windowWidth>>2]|0;
 $106 = (+($105|0));
 _glUniform1f(($104|0),(+$106));
 $107 = (($47) + 16|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (_glGetUniformLocation(($108|0),(2216|0))|0);
 $hWindowHeight = $109;
 $110 = $hWindowHeight;
 $111 = HEAP32[$windowHeight>>2]|0;
 $112 = (+($111|0));
 _glUniform1f(($110|0),(+$112));
 $113 = (($47) + 20|0);
 $5 = $113;
 $6 = 0;
 $114 = $5;
 $115 = $6;
 $116 = HEAP32[$114>>2]|0;
 $117 = (($116) + ($115<<2)|0);
 $118 = HEAP32[$117>>2]|0;
 _glBindFramebuffer(36160,($118|0));
 _glClear(16384);
 $119 = $hTask;
 _glUniform1i(($119|0),0);
 $120 = $hMVP;
 $121 = (__ZN3glm6detail7tmat4x4IfEixEj($MVP,0)|0);
 $122 = (__ZN3glm6detail5tvec4IfEixEj($121,0)|0);
 _glUniformMatrix4fv(($120|0),1,0,($122|0));
 $123 = (($47) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 _glBindVertexArray(($124|0));
 $125 = $nParticles;
 _glDrawArrays(0,0,($125|0));
 _glFinish();
 $i = 1;
 while(1) {
  $126 = $i;
  $127 = (($47) + 20|0);
  $4 = $127;
  $128 = $4;
  $129 = (($128) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = HEAP32[$128>>2]|0;
  $132 = $130;
  $133 = $131;
  $134 = (($132) - ($133))|0;
  $135 = (($134|0) / 4)&-1;
  $136 = ($126|0)<($135|0);
  if (!($136)) {
   break;
  }
  $137 = (($47) + 20|0);
  $138 = $i;
  $2 = $137;
  $3 = $138;
  $139 = $2;
  $140 = $3;
  $141 = HEAP32[$139>>2]|0;
  $142 = (($141) + ($140<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  _glBindFramebuffer(36160,($143|0));
  _glActiveTexture(33984);
  $144 = (($47) + 32|0);
  $145 = $i;
  $146 = (($145) - 1)|0;
  $0 = $144;
  $1 = $146;
  $147 = $0;
  $148 = $1;
  $149 = HEAP32[$147>>2]|0;
  $150 = (($149) + ($148<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  _glBindTexture(3553,($151|0));
  _glClear(16384);
  $152 = $hTask;
  $153 = $i;
  _glUniform1i(($152|0),($153|0));
  $154 = $hMVP;
  $155 = (__ZN3glm6detail7tmat4x4IfEixEj($identityMatrix,0)|0);
  $156 = (__ZN3glm6detail5tvec4IfEixEj($155,0)|0);
  _glUniformMatrix4fv(($154|0),1,0,($156|0));
  $157 = (($47) + 56|0);
  $158 = HEAP32[$157>>2]|0;
  _glBindVertexArray(($158|0));
  _glDrawArrays(4,0,6);
  _glFinish();
  $159 = $i;
  $160 = (($159) + 1)|0;
  $i = $160;
 }
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($this,$s0,$s1,$s2) {
 $this = $this|0;
 $s0 = $s0|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $s0;
 $2 = $s1;
 $3 = $s2;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN3glm6detail5tvec3IfEC2ERKfS4_S4_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC1ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 __ZN3glm6detail7tmat4x4IfEC2ERKf($2,$3);
 STACKTOP = sp;return;
}
function __ZN3glm6lookAtIfEENS_6detail7tmat4x4IT_EERKNS1_5tvec3IS3_EES8_S8_($agg$result,$eye,$center,$up) {
 $agg$result = $agg$result|0;
 $eye = $eye|0;
 $center = $center|0;
 $up = $up|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f = 0, $s = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $f = sp + 4|0;
 $3 = sp + 64|0;
 $u = sp + 76|0;
 $s = sp + 20|0;
 $4 = sp + 48|0;
 $5 = sp + 36|0;
 $6 = sp + 16|0;
 $0 = $eye;
 $1 = $center;
 $2 = $up;
 $7 = $1;
 $8 = $0;
 __ZN3glm6detailmiIfEENS0_5tvec3IT_EERKS4_S6_($3,$7,$8);
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($f,$3);
 $9 = $2;
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($u,$9);
 __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($4,$f,$u);
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($s,$4);
 __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($5,$s,$f);
 (__ZN3glm6detail5tvec3IfEaSERKS2_($u,$5)|0);
 HEAP32[$6>>2] = 1;
 __ZN3glm6detail7tmat4x4IfEC1IiEERKT_($agg$result,$6);
 $10 = +HEAPF32[$s>>2];
 $11 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $12 = (__ZN3glm6detail5tvec4IfEixEj($11,0)|0);
 HEAPF32[$12>>2] = $10;
 $13 = (($s) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $16 = (__ZN3glm6detail5tvec4IfEixEj($15,0)|0);
 HEAPF32[$16>>2] = $14;
 $17 = (($s) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $20 = (__ZN3glm6detail5tvec4IfEixEj($19,0)|0);
 HEAPF32[$20>>2] = $18;
 $21 = +HEAPF32[$u>>2];
 $22 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $23 = (__ZN3glm6detail5tvec4IfEixEj($22,1)|0);
 HEAPF32[$23>>2] = $21;
 $24 = (($u) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $27 = (__ZN3glm6detail5tvec4IfEixEj($26,1)|0);
 HEAPF32[$27>>2] = $25;
 $28 = (($u) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $31 = (__ZN3glm6detail5tvec4IfEixEj($30,1)|0);
 HEAPF32[$31>>2] = $29;
 $32 = +HEAPF32[$f>>2];
 $33 = -$32;
 $34 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $35 = (__ZN3glm6detail5tvec4IfEixEj($34,2)|0);
 HEAPF32[$35>>2] = $33;
 $36 = (($f) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = -$37;
 $39 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $40 = (__ZN3glm6detail5tvec4IfEixEj($39,2)|0);
 HEAPF32[$40>>2] = $38;
 $41 = (($f) + 8|0);
 $42 = +HEAPF32[$41>>2];
 $43 = -$42;
 $44 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $45 = (__ZN3glm6detail5tvec4IfEixEj($44,2)|0);
 HEAPF32[$45>>2] = $43;
 $46 = $0;
 $47 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($s,$46));
 $48 = -$47;
 $49 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $50 = (__ZN3glm6detail5tvec4IfEixEj($49,0)|0);
 HEAPF32[$50>>2] = $48;
 $51 = $0;
 $52 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($u,$51));
 $53 = -$52;
 $54 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $55 = (__ZN3glm6detail5tvec4IfEixEj($54,1)|0);
 HEAPF32[$55>>2] = $53;
 $56 = $0;
 $57 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($f,$56));
 $58 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $59 = (__ZN3glm6detail5tvec4IfEixEj($58,2)|0);
 HEAPF32[$59>>2] = $57;
 STACKTOP = sp;return;
}
function __ZN3glm11perspectiveIfEENS_6detail7tmat4x4IT_EERKS3_S6_S6_S6_($agg$result,$fovy,$aspect,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $fovy = $fovy|0;
 $aspect = $aspect|0;
 $zNear = $zNear|0;
 $zFar = $zFar|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $8 = 0.0, $9 = 0.0, $bottom = 0.0, $left = 0.0, $range = 0.0, $right = 0.0;
 var $top = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 44|0;
 $6 = sp + 28|0;
 $0 = $fovy;
 $1 = $aspect;
 $2 = $zNear;
 $3 = $zFar;
 $7 = $0;
 $8 = +HEAPF32[$7>>2];
 $9 = $8 / 2.0;
 HEAPF32[$4>>2] = $9;
 $10 = (+__ZN3glm7radiansIfEET_RKS1_($4));
 HEAPF32[$5>>2] = $10;
 $11 = (+__ZN3glm3tanIfEET_RKS1_($5));
 $12 = $2;
 $13 = +HEAPF32[$12>>2];
 $14 = $11 * $13;
 $range = $14;
 $15 = $range;
 $16 = -$15;
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 * $18;
 $left = $19;
 $20 = $range;
 $21 = $1;
 $22 = +HEAPF32[$21>>2];
 $23 = $20 * $22;
 $right = $23;
 $24 = $range;
 $25 = -$24;
 $bottom = $25;
 $26 = $range;
 $top = $26;
 HEAPF32[$6>>2] = 0.0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($agg$result,$6);
 $27 = $2;
 $28 = +HEAPF32[$27>>2];
 $29 = 2.0 * $28;
 $30 = $right;
 $31 = $left;
 $32 = $30 - $31;
 $33 = $29 / $32;
 $34 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $35 = (__ZN3glm6detail5tvec4IfEixEj($34,0)|0);
 HEAPF32[$35>>2] = $33;
 $36 = $2;
 $37 = +HEAPF32[$36>>2];
 $38 = 2.0 * $37;
 $39 = $top;
 $40 = $bottom;
 $41 = $39 - $40;
 $42 = $38 / $41;
 $43 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $44 = (__ZN3glm6detail5tvec4IfEixEj($43,1)|0);
 HEAPF32[$44>>2] = $42;
 $45 = $3;
 $46 = +HEAPF32[$45>>2];
 $47 = $2;
 $48 = +HEAPF32[$47>>2];
 $49 = $46 + $48;
 $50 = -$49;
 $51 = $3;
 $52 = +HEAPF32[$51>>2];
 $53 = $2;
 $54 = +HEAPF32[$53>>2];
 $55 = $52 - $54;
 $56 = $50 / $55;
 $57 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $58 = (__ZN3glm6detail5tvec4IfEixEj($57,2)|0);
 HEAPF32[$58>>2] = $56;
 $59 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $60 = (__ZN3glm6detail5tvec4IfEixEj($59,3)|0);
 HEAPF32[$60>>2] = -1.0;
 $61 = $3;
 $62 = +HEAPF32[$61>>2];
 $63 = 2.0 * $62;
 $64 = $2;
 $65 = +HEAPF32[$64>>2];
 $66 = $63 * $65;
 $67 = -$66;
 $68 = $3;
 $69 = +HEAPF32[$68>>2];
 $70 = $2;
 $71 = +HEAPF32[$70>>2];
 $72 = $69 - $71;
 $73 = $67 / $72;
 $74 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $75 = (__ZN3glm6detail5tvec4IfEixEj($74,2)|0);
 HEAPF32[$75>>2] = $73;
 STACKTOP = sp;return;
}
function __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($agg$result,$m1,$m2) {
 $agg$result = $agg$result|0;
 $m1 = $m1|0;
 $m2 = $m2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $SrcA0 = 0, $SrcA1 = 0, $SrcA2 = 0, $SrcA3 = 0, $SrcB0 = 0, $SrcB1 = 0, $SrcB2 = 0, $SrcB3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $SrcA0 = sp + 16|0;
 $SrcA1 = sp + 208|0;
 $SrcA2 = sp + 544|0;
 $SrcA3 = sp + 264|0;
 $SrcB0 = sp + 80|0;
 $SrcB1 = sp + 96|0;
 $SrcB2 = sp + 112|0;
 $SrcB3 = sp + 128|0;
 $2 = sp + 144|0;
 $3 = sp + 160|0;
 $4 = sp + 176|0;
 $5 = sp + 192|0;
 $6 = sp + 432|0;
 $7 = sp + 464|0;
 $8 = sp + 496|0;
 $9 = sp + 528|0;
 $10 = sp + 560|0;
 $11 = sp + 576|0;
 $12 = sp + 288|0;
 $13 = sp + 304|0;
 $14 = sp + 320|0;
 $15 = sp + 336|0;
 $16 = sp + 352|0;
 $17 = sp + 368|0;
 $18 = sp + 384|0;
 $19 = sp + 400|0;
 $20 = sp + 48|0;
 $21 = sp;
 $22 = sp + 32|0;
 $23 = sp + 416|0;
 $24 = sp + 448|0;
 $25 = sp + 232|0;
 $26 = sp + 480|0;
 $27 = sp + 64|0;
 $28 = sp + 248|0;
 $29 = sp + 512|0;
 $0 = $m1;
 $1 = $m2;
 $30 = $0;
 $31 = (__ZNK3glm6detail7tmat4x4IfEixEj($30,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA0,$31);
 $32 = $0;
 $33 = (__ZNK3glm6detail7tmat4x4IfEixEj($32,1)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA1,$33);
 $34 = $0;
 $35 = (__ZNK3glm6detail7tmat4x4IfEixEj($34,2)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA2,$35);
 $36 = $0;
 $37 = (__ZNK3glm6detail7tmat4x4IfEixEj($36,3)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA3,$37);
 $38 = $1;
 $39 = (__ZNK3glm6detail7tmat4x4IfEixEj($38,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB0,$39);
 $40 = $1;
 $41 = (__ZNK3glm6detail7tmat4x4IfEixEj($40,1)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB1,$41);
 $42 = $1;
 $43 = (__ZNK3glm6detail7tmat4x4IfEixEj($42,2)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB2,$43);
 $44 = $1;
 $45 = (__ZNK3glm6detail7tmat4x4IfEixEj($44,3)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB3,$45);
 __ZN3glm6detail7tmat4x4IfEC1ENS2_4ctorE($agg$result,0);
 $46 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $47 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($5,$SrcA0,$47);
 $48 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($6,$SrcA1,$48);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($4,$5,$6);
 $49 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($7,$SrcA2,$49);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($3,$4,$7);
 $50 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($8,$SrcA3,$50);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($2,$3,$8);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($46,$2)|0);
 $51 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $52 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($12,$SrcA0,$52);
 $53 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($13,$SrcA1,$53);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($11,$12,$13);
 $54 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($14,$SrcA2,$54);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($10,$11,$14);
 $55 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($15,$SrcA3,$55);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($9,$10,$15);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($51,$9)|0);
 $56 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $57 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($19,$SrcA0,$57);
 $58 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($20,$SrcA1,$58);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($18,$19,$20);
 $59 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($21,$SrcA2,$59);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($17,$18,$21);
 $60 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($22,$SrcA3,$60);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($16,$17,$22);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($56,$16)|0);
 $61 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $62 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($26,$SrcA0,$62);
 $63 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($27,$SrcA1,$63);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($25,$26,$27);
 $64 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($28,$SrcA2,$64);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($24,$25,$28);
 $65 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($29,$SrcA3,$65);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($23,$24,$29);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($61,$23)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($this,$s1,$s2,$s3,$s4) {
 $this = $this|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 $s3 = $s3|0;
 $s4 = $s4|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $s1;
 $2 = $s2;
 $3 = $s3;
 $4 = $s4;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3glm6detail5tvec4IfEC2ERKfS4_S4_S4_($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3glm7inverseIfEENS_6detail7tmat4x4IT_EERKS4_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0;
 var $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $Coef00 = 0, $Coef02 = 0, $Coef03 = 0, $Coef04 = 0, $Coef06 = 0, $Coef07 = 0, $Coef08 = 0, $Coef10 = 0, $Coef11 = 0, $Coef12 = 0;
 var $Coef14 = 0, $Coef15 = 0, $Coef16 = 0, $Coef18 = 0, $Coef19 = 0, $Coef20 = 0, $Coef22 = 0, $Coef23 = 0, $Determinant = 0, $Fac0 = 0, $Fac1 = 0, $Fac2 = 0, $Fac3 = 0, $Fac4 = 0, $Fac5 = 0, $Inv0 = 0, $Inv1 = 0, $Inv2 = 0, $Inv3 = 0, $Row0 = 0;
 var $SignA = 0, $SignB = 0, $Vec0 = 0, $Vec1 = 0, $Vec2 = 0, $Vec3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0;
 $Coef00 = sp + 680|0;
 $Coef02 = sp + 656|0;
 $Coef03 = sp + 224|0;
 $Coef04 = sp + 228|0;
 $Coef06 = sp + 232|0;
 $Coef07 = sp + 16|0;
 $Coef08 = sp + 72|0;
 $Coef10 = sp + 76|0;
 $Coef11 = sp + 80|0;
 $Coef12 = sp + 84|0;
 $Coef14 = sp + 88|0;
 $Coef15 = sp + 92|0;
 $Coef16 = sp + 96|0;
 $Coef18 = sp + 100|0;
 $Coef19 = sp + 104|0;
 $Coef20 = sp + 108|0;
 $Coef22 = sp + 112|0;
 $Coef23 = sp + 116|0;
 $SignA = sp + 120|0;
 $1 = sp + 136|0;
 $2 = sp + 140|0;
 $3 = sp + 144|0;
 $4 = sp + 148|0;
 $SignB = sp + 152|0;
 $5 = sp + 168|0;
 $6 = sp + 172|0;
 $7 = sp + 592|0;
 $8 = sp + 616|0;
 $Fac0 = sp + 640|0;
 $Fac1 = sp + 664|0;
 $Fac2 = sp + 688|0;
 $Fac3 = sp + 712|0;
 $Fac4 = sp + 240|0;
 $Fac5 = sp + 256|0;
 $Vec0 = sp + 272|0;
 $Vec1 = sp + 288|0;
 $Vec2 = sp + 304|0;
 $Vec3 = sp + 320|0;
 $Inv0 = sp + 336|0;
 $9 = sp + 352|0;
 $10 = sp + 368|0;
 $11 = sp + 384|0;
 $12 = sp + 400|0;
 $13 = sp + 416|0;
 $Inv1 = sp + 432|0;
 $14 = sp + 448|0;
 $15 = sp + 464|0;
 $16 = sp + 480|0;
 $17 = sp + 496|0;
 $18 = sp + 512|0;
 $Inv2 = sp + 528|0;
 $19 = sp + 544|0;
 $20 = sp + 40|0;
 $21 = sp + 560|0;
 $22 = sp + 56|0;
 $23 = sp + 176|0;
 $Inv3 = sp + 576|0;
 $24 = sp + 192|0;
 $25 = sp + 600|0;
 $26 = sp + 24|0;
 $27 = sp;
 $28 = sp + 208|0;
 $Row0 = sp + 624|0;
 $Determinant = sp + 20|0;
 $0 = $m;
 $29 = $0;
 $30 = (__ZNK3glm6detail7tmat4x4IfEixEj($29,2)|0);
 $31 = (__ZNK3glm6detail5tvec4IfEixEj($30,2)|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $0;
 $34 = (__ZNK3glm6detail7tmat4x4IfEixEj($33,3)|0);
 $35 = (__ZNK3glm6detail5tvec4IfEixEj($34,3)|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $32 * $36;
 $38 = $0;
 $39 = (__ZNK3glm6detail7tmat4x4IfEixEj($38,3)|0);
 $40 = (__ZNK3glm6detail5tvec4IfEixEj($39,2)|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $0;
 $43 = (__ZNK3glm6detail7tmat4x4IfEixEj($42,2)|0);
 $44 = (__ZNK3glm6detail5tvec4IfEixEj($43,3)|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $41 * $45;
 $47 = $37 - $46;
 HEAPF32[$Coef00>>2] = $47;
 $48 = $0;
 $49 = (__ZNK3glm6detail7tmat4x4IfEixEj($48,1)|0);
 $50 = (__ZNK3glm6detail5tvec4IfEixEj($49,2)|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $0;
 $53 = (__ZNK3glm6detail7tmat4x4IfEixEj($52,3)|0);
 $54 = (__ZNK3glm6detail5tvec4IfEixEj($53,3)|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $51 * $55;
 $57 = $0;
 $58 = (__ZNK3glm6detail7tmat4x4IfEixEj($57,3)|0);
 $59 = (__ZNK3glm6detail5tvec4IfEixEj($58,2)|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $0;
 $62 = (__ZNK3glm6detail7tmat4x4IfEixEj($61,1)|0);
 $63 = (__ZNK3glm6detail5tvec4IfEixEj($62,3)|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $60 * $64;
 $66 = $56 - $65;
 HEAPF32[$Coef02>>2] = $66;
 $67 = $0;
 $68 = (__ZNK3glm6detail7tmat4x4IfEixEj($67,1)|0);
 $69 = (__ZNK3glm6detail5tvec4IfEixEj($68,2)|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $0;
 $72 = (__ZNK3glm6detail7tmat4x4IfEixEj($71,2)|0);
 $73 = (__ZNK3glm6detail5tvec4IfEixEj($72,3)|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $70 * $74;
 $76 = $0;
 $77 = (__ZNK3glm6detail7tmat4x4IfEixEj($76,2)|0);
 $78 = (__ZNK3glm6detail5tvec4IfEixEj($77,2)|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $0;
 $81 = (__ZNK3glm6detail7tmat4x4IfEixEj($80,1)|0);
 $82 = (__ZNK3glm6detail5tvec4IfEixEj($81,3)|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $79 * $83;
 $85 = $75 - $84;
 HEAPF32[$Coef03>>2] = $85;
 $86 = $0;
 $87 = (__ZNK3glm6detail7tmat4x4IfEixEj($86,2)|0);
 $88 = (__ZNK3glm6detail5tvec4IfEixEj($87,1)|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $0;
 $91 = (__ZNK3glm6detail7tmat4x4IfEixEj($90,3)|0);
 $92 = (__ZNK3glm6detail5tvec4IfEixEj($91,3)|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $89 * $93;
 $95 = $0;
 $96 = (__ZNK3glm6detail7tmat4x4IfEixEj($95,3)|0);
 $97 = (__ZNK3glm6detail5tvec4IfEixEj($96,1)|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $0;
 $100 = (__ZNK3glm6detail7tmat4x4IfEixEj($99,2)|0);
 $101 = (__ZNK3glm6detail5tvec4IfEixEj($100,3)|0);
 $102 = +HEAPF32[$101>>2];
 $103 = $98 * $102;
 $104 = $94 - $103;
 HEAPF32[$Coef04>>2] = $104;
 $105 = $0;
 $106 = (__ZNK3glm6detail7tmat4x4IfEixEj($105,1)|0);
 $107 = (__ZNK3glm6detail5tvec4IfEixEj($106,1)|0);
 $108 = +HEAPF32[$107>>2];
 $109 = $0;
 $110 = (__ZNK3glm6detail7tmat4x4IfEixEj($109,3)|0);
 $111 = (__ZNK3glm6detail5tvec4IfEixEj($110,3)|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $108 * $112;
 $114 = $0;
 $115 = (__ZNK3glm6detail7tmat4x4IfEixEj($114,3)|0);
 $116 = (__ZNK3glm6detail5tvec4IfEixEj($115,1)|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $0;
 $119 = (__ZNK3glm6detail7tmat4x4IfEixEj($118,1)|0);
 $120 = (__ZNK3glm6detail5tvec4IfEixEj($119,3)|0);
 $121 = +HEAPF32[$120>>2];
 $122 = $117 * $121;
 $123 = $113 - $122;
 HEAPF32[$Coef06>>2] = $123;
 $124 = $0;
 $125 = (__ZNK3glm6detail7tmat4x4IfEixEj($124,1)|0);
 $126 = (__ZNK3glm6detail5tvec4IfEixEj($125,1)|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $0;
 $129 = (__ZNK3glm6detail7tmat4x4IfEixEj($128,2)|0);
 $130 = (__ZNK3glm6detail5tvec4IfEixEj($129,3)|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $127 * $131;
 $133 = $0;
 $134 = (__ZNK3glm6detail7tmat4x4IfEixEj($133,2)|0);
 $135 = (__ZNK3glm6detail5tvec4IfEixEj($134,1)|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $0;
 $138 = (__ZNK3glm6detail7tmat4x4IfEixEj($137,1)|0);
 $139 = (__ZNK3glm6detail5tvec4IfEixEj($138,3)|0);
 $140 = +HEAPF32[$139>>2];
 $141 = $136 * $140;
 $142 = $132 - $141;
 HEAPF32[$Coef07>>2] = $142;
 $143 = $0;
 $144 = (__ZNK3glm6detail7tmat4x4IfEixEj($143,2)|0);
 $145 = (__ZNK3glm6detail5tvec4IfEixEj($144,1)|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $0;
 $148 = (__ZNK3glm6detail7tmat4x4IfEixEj($147,3)|0);
 $149 = (__ZNK3glm6detail5tvec4IfEixEj($148,2)|0);
 $150 = +HEAPF32[$149>>2];
 $151 = $146 * $150;
 $152 = $0;
 $153 = (__ZNK3glm6detail7tmat4x4IfEixEj($152,3)|0);
 $154 = (__ZNK3glm6detail5tvec4IfEixEj($153,1)|0);
 $155 = +HEAPF32[$154>>2];
 $156 = $0;
 $157 = (__ZNK3glm6detail7tmat4x4IfEixEj($156,2)|0);
 $158 = (__ZNK3glm6detail5tvec4IfEixEj($157,2)|0);
 $159 = +HEAPF32[$158>>2];
 $160 = $155 * $159;
 $161 = $151 - $160;
 HEAPF32[$Coef08>>2] = $161;
 $162 = $0;
 $163 = (__ZNK3glm6detail7tmat4x4IfEixEj($162,1)|0);
 $164 = (__ZNK3glm6detail5tvec4IfEixEj($163,1)|0);
 $165 = +HEAPF32[$164>>2];
 $166 = $0;
 $167 = (__ZNK3glm6detail7tmat4x4IfEixEj($166,3)|0);
 $168 = (__ZNK3glm6detail5tvec4IfEixEj($167,2)|0);
 $169 = +HEAPF32[$168>>2];
 $170 = $165 * $169;
 $171 = $0;
 $172 = (__ZNK3glm6detail7tmat4x4IfEixEj($171,3)|0);
 $173 = (__ZNK3glm6detail5tvec4IfEixEj($172,1)|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $0;
 $176 = (__ZNK3glm6detail7tmat4x4IfEixEj($175,1)|0);
 $177 = (__ZNK3glm6detail5tvec4IfEixEj($176,2)|0);
 $178 = +HEAPF32[$177>>2];
 $179 = $174 * $178;
 $180 = $170 - $179;
 HEAPF32[$Coef10>>2] = $180;
 $181 = $0;
 $182 = (__ZNK3glm6detail7tmat4x4IfEixEj($181,1)|0);
 $183 = (__ZNK3glm6detail5tvec4IfEixEj($182,1)|0);
 $184 = +HEAPF32[$183>>2];
 $185 = $0;
 $186 = (__ZNK3glm6detail7tmat4x4IfEixEj($185,2)|0);
 $187 = (__ZNK3glm6detail5tvec4IfEixEj($186,2)|0);
 $188 = +HEAPF32[$187>>2];
 $189 = $184 * $188;
 $190 = $0;
 $191 = (__ZNK3glm6detail7tmat4x4IfEixEj($190,2)|0);
 $192 = (__ZNK3glm6detail5tvec4IfEixEj($191,1)|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $0;
 $195 = (__ZNK3glm6detail7tmat4x4IfEixEj($194,1)|0);
 $196 = (__ZNK3glm6detail5tvec4IfEixEj($195,2)|0);
 $197 = +HEAPF32[$196>>2];
 $198 = $193 * $197;
 $199 = $189 - $198;
 HEAPF32[$Coef11>>2] = $199;
 $200 = $0;
 $201 = (__ZNK3glm6detail7tmat4x4IfEixEj($200,2)|0);
 $202 = (__ZNK3glm6detail5tvec4IfEixEj($201,0)|0);
 $203 = +HEAPF32[$202>>2];
 $204 = $0;
 $205 = (__ZNK3glm6detail7tmat4x4IfEixEj($204,3)|0);
 $206 = (__ZNK3glm6detail5tvec4IfEixEj($205,3)|0);
 $207 = +HEAPF32[$206>>2];
 $208 = $203 * $207;
 $209 = $0;
 $210 = (__ZNK3glm6detail7tmat4x4IfEixEj($209,3)|0);
 $211 = (__ZNK3glm6detail5tvec4IfEixEj($210,0)|0);
 $212 = +HEAPF32[$211>>2];
 $213 = $0;
 $214 = (__ZNK3glm6detail7tmat4x4IfEixEj($213,2)|0);
 $215 = (__ZNK3glm6detail5tvec4IfEixEj($214,3)|0);
 $216 = +HEAPF32[$215>>2];
 $217 = $212 * $216;
 $218 = $208 - $217;
 HEAPF32[$Coef12>>2] = $218;
 $219 = $0;
 $220 = (__ZNK3glm6detail7tmat4x4IfEixEj($219,1)|0);
 $221 = (__ZNK3glm6detail5tvec4IfEixEj($220,0)|0);
 $222 = +HEAPF32[$221>>2];
 $223 = $0;
 $224 = (__ZNK3glm6detail7tmat4x4IfEixEj($223,3)|0);
 $225 = (__ZNK3glm6detail5tvec4IfEixEj($224,3)|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $222 * $226;
 $228 = $0;
 $229 = (__ZNK3glm6detail7tmat4x4IfEixEj($228,3)|0);
 $230 = (__ZNK3glm6detail5tvec4IfEixEj($229,0)|0);
 $231 = +HEAPF32[$230>>2];
 $232 = $0;
 $233 = (__ZNK3glm6detail7tmat4x4IfEixEj($232,1)|0);
 $234 = (__ZNK3glm6detail5tvec4IfEixEj($233,3)|0);
 $235 = +HEAPF32[$234>>2];
 $236 = $231 * $235;
 $237 = $227 - $236;
 HEAPF32[$Coef14>>2] = $237;
 $238 = $0;
 $239 = (__ZNK3glm6detail7tmat4x4IfEixEj($238,1)|0);
 $240 = (__ZNK3glm6detail5tvec4IfEixEj($239,0)|0);
 $241 = +HEAPF32[$240>>2];
 $242 = $0;
 $243 = (__ZNK3glm6detail7tmat4x4IfEixEj($242,2)|0);
 $244 = (__ZNK3glm6detail5tvec4IfEixEj($243,3)|0);
 $245 = +HEAPF32[$244>>2];
 $246 = $241 * $245;
 $247 = $0;
 $248 = (__ZNK3glm6detail7tmat4x4IfEixEj($247,2)|0);
 $249 = (__ZNK3glm6detail5tvec4IfEixEj($248,0)|0);
 $250 = +HEAPF32[$249>>2];
 $251 = $0;
 $252 = (__ZNK3glm6detail7tmat4x4IfEixEj($251,1)|0);
 $253 = (__ZNK3glm6detail5tvec4IfEixEj($252,3)|0);
 $254 = +HEAPF32[$253>>2];
 $255 = $250 * $254;
 $256 = $246 - $255;
 HEAPF32[$Coef15>>2] = $256;
 $257 = $0;
 $258 = (__ZNK3glm6detail7tmat4x4IfEixEj($257,2)|0);
 $259 = (__ZNK3glm6detail5tvec4IfEixEj($258,0)|0);
 $260 = +HEAPF32[$259>>2];
 $261 = $0;
 $262 = (__ZNK3glm6detail7tmat4x4IfEixEj($261,3)|0);
 $263 = (__ZNK3glm6detail5tvec4IfEixEj($262,2)|0);
 $264 = +HEAPF32[$263>>2];
 $265 = $260 * $264;
 $266 = $0;
 $267 = (__ZNK3glm6detail7tmat4x4IfEixEj($266,3)|0);
 $268 = (__ZNK3glm6detail5tvec4IfEixEj($267,0)|0);
 $269 = +HEAPF32[$268>>2];
 $270 = $0;
 $271 = (__ZNK3glm6detail7tmat4x4IfEixEj($270,2)|0);
 $272 = (__ZNK3glm6detail5tvec4IfEixEj($271,2)|0);
 $273 = +HEAPF32[$272>>2];
 $274 = $269 * $273;
 $275 = $265 - $274;
 HEAPF32[$Coef16>>2] = $275;
 $276 = $0;
 $277 = (__ZNK3glm6detail7tmat4x4IfEixEj($276,1)|0);
 $278 = (__ZNK3glm6detail5tvec4IfEixEj($277,0)|0);
 $279 = +HEAPF32[$278>>2];
 $280 = $0;
 $281 = (__ZNK3glm6detail7tmat4x4IfEixEj($280,3)|0);
 $282 = (__ZNK3glm6detail5tvec4IfEixEj($281,2)|0);
 $283 = +HEAPF32[$282>>2];
 $284 = $279 * $283;
 $285 = $0;
 $286 = (__ZNK3glm6detail7tmat4x4IfEixEj($285,3)|0);
 $287 = (__ZNK3glm6detail5tvec4IfEixEj($286,0)|0);
 $288 = +HEAPF32[$287>>2];
 $289 = $0;
 $290 = (__ZNK3glm6detail7tmat4x4IfEixEj($289,1)|0);
 $291 = (__ZNK3glm6detail5tvec4IfEixEj($290,2)|0);
 $292 = +HEAPF32[$291>>2];
 $293 = $288 * $292;
 $294 = $284 - $293;
 HEAPF32[$Coef18>>2] = $294;
 $295 = $0;
 $296 = (__ZNK3glm6detail7tmat4x4IfEixEj($295,1)|0);
 $297 = (__ZNK3glm6detail5tvec4IfEixEj($296,0)|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $0;
 $300 = (__ZNK3glm6detail7tmat4x4IfEixEj($299,2)|0);
 $301 = (__ZNK3glm6detail5tvec4IfEixEj($300,2)|0);
 $302 = +HEAPF32[$301>>2];
 $303 = $298 * $302;
 $304 = $0;
 $305 = (__ZNK3glm6detail7tmat4x4IfEixEj($304,2)|0);
 $306 = (__ZNK3glm6detail5tvec4IfEixEj($305,0)|0);
 $307 = +HEAPF32[$306>>2];
 $308 = $0;
 $309 = (__ZNK3glm6detail7tmat4x4IfEixEj($308,1)|0);
 $310 = (__ZNK3glm6detail5tvec4IfEixEj($309,2)|0);
 $311 = +HEAPF32[$310>>2];
 $312 = $307 * $311;
 $313 = $303 - $312;
 HEAPF32[$Coef19>>2] = $313;
 $314 = $0;
 $315 = (__ZNK3glm6detail7tmat4x4IfEixEj($314,2)|0);
 $316 = (__ZNK3glm6detail5tvec4IfEixEj($315,0)|0);
 $317 = +HEAPF32[$316>>2];
 $318 = $0;
 $319 = (__ZNK3glm6detail7tmat4x4IfEixEj($318,3)|0);
 $320 = (__ZNK3glm6detail5tvec4IfEixEj($319,1)|0);
 $321 = +HEAPF32[$320>>2];
 $322 = $317 * $321;
 $323 = $0;
 $324 = (__ZNK3glm6detail7tmat4x4IfEixEj($323,3)|0);
 $325 = (__ZNK3glm6detail5tvec4IfEixEj($324,0)|0);
 $326 = +HEAPF32[$325>>2];
 $327 = $0;
 $328 = (__ZNK3glm6detail7tmat4x4IfEixEj($327,2)|0);
 $329 = (__ZNK3glm6detail5tvec4IfEixEj($328,1)|0);
 $330 = +HEAPF32[$329>>2];
 $331 = $326 * $330;
 $332 = $322 - $331;
 HEAPF32[$Coef20>>2] = $332;
 $333 = $0;
 $334 = (__ZNK3glm6detail7tmat4x4IfEixEj($333,1)|0);
 $335 = (__ZNK3glm6detail5tvec4IfEixEj($334,0)|0);
 $336 = +HEAPF32[$335>>2];
 $337 = $0;
 $338 = (__ZNK3glm6detail7tmat4x4IfEixEj($337,3)|0);
 $339 = (__ZNK3glm6detail5tvec4IfEixEj($338,1)|0);
 $340 = +HEAPF32[$339>>2];
 $341 = $336 * $340;
 $342 = $0;
 $343 = (__ZNK3glm6detail7tmat4x4IfEixEj($342,3)|0);
 $344 = (__ZNK3glm6detail5tvec4IfEixEj($343,0)|0);
 $345 = +HEAPF32[$344>>2];
 $346 = $0;
 $347 = (__ZNK3glm6detail7tmat4x4IfEixEj($346,1)|0);
 $348 = (__ZNK3glm6detail5tvec4IfEixEj($347,1)|0);
 $349 = +HEAPF32[$348>>2];
 $350 = $345 * $349;
 $351 = $341 - $350;
 HEAPF32[$Coef22>>2] = $351;
 $352 = $0;
 $353 = (__ZNK3glm6detail7tmat4x4IfEixEj($352,1)|0);
 $354 = (__ZNK3glm6detail5tvec4IfEixEj($353,0)|0);
 $355 = +HEAPF32[$354>>2];
 $356 = $0;
 $357 = (__ZNK3glm6detail7tmat4x4IfEixEj($356,2)|0);
 $358 = (__ZNK3glm6detail5tvec4IfEixEj($357,1)|0);
 $359 = +HEAPF32[$358>>2];
 $360 = $355 * $359;
 $361 = $0;
 $362 = (__ZNK3glm6detail7tmat4x4IfEixEj($361,2)|0);
 $363 = (__ZNK3glm6detail5tvec4IfEixEj($362,0)|0);
 $364 = +HEAPF32[$363>>2];
 $365 = $0;
 $366 = (__ZNK3glm6detail7tmat4x4IfEixEj($365,1)|0);
 $367 = (__ZNK3glm6detail5tvec4IfEixEj($366,1)|0);
 $368 = +HEAPF32[$367>>2];
 $369 = $364 * $368;
 $370 = $360 - $369;
 HEAPF32[$Coef23>>2] = $370;
 HEAP32[$1>>2] = 1;
 HEAP32[$2>>2] = -1;
 HEAP32[$3>>2] = 1;
 HEAP32[$4>>2] = -1;
 __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($SignA,$1,$2,$3,$4);
 HEAP32[$5>>2] = -1;
 HEAP32[$6>>2] = 1;
 HEAP32[$7>>2] = -1;
 HEAP32[$8>>2] = 1;
 __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($SignB,$5,$6,$7,$8);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac0,$Coef00,$Coef00,$Coef02,$Coef03);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac1,$Coef04,$Coef04,$Coef06,$Coef07);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac2,$Coef08,$Coef08,$Coef10,$Coef11);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac3,$Coef12,$Coef12,$Coef14,$Coef15);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac4,$Coef16,$Coef16,$Coef18,$Coef19);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac5,$Coef20,$Coef20,$Coef22,$Coef23);
 $371 = $0;
 $372 = (__ZNK3glm6detail7tmat4x4IfEixEj($371,1)|0);
 $373 = (__ZNK3glm6detail5tvec4IfEixEj($372,0)|0);
 $374 = $0;
 $375 = (__ZNK3glm6detail7tmat4x4IfEixEj($374,0)|0);
 $376 = (__ZNK3glm6detail5tvec4IfEixEj($375,0)|0);
 $377 = $0;
 $378 = (__ZNK3glm6detail7tmat4x4IfEixEj($377,0)|0);
 $379 = (__ZNK3glm6detail5tvec4IfEixEj($378,0)|0);
 $380 = $0;
 $381 = (__ZNK3glm6detail7tmat4x4IfEixEj($380,0)|0);
 $382 = (__ZNK3glm6detail5tvec4IfEixEj($381,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec0,$373,$376,$379,$382);
 $383 = $0;
 $384 = (__ZNK3glm6detail7tmat4x4IfEixEj($383,1)|0);
 $385 = (__ZNK3glm6detail5tvec4IfEixEj($384,1)|0);
 $386 = $0;
 $387 = (__ZNK3glm6detail7tmat4x4IfEixEj($386,0)|0);
 $388 = (__ZNK3glm6detail5tvec4IfEixEj($387,1)|0);
 $389 = $0;
 $390 = (__ZNK3glm6detail7tmat4x4IfEixEj($389,0)|0);
 $391 = (__ZNK3glm6detail5tvec4IfEixEj($390,1)|0);
 $392 = $0;
 $393 = (__ZNK3glm6detail7tmat4x4IfEixEj($392,0)|0);
 $394 = (__ZNK3glm6detail5tvec4IfEixEj($393,1)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec1,$385,$388,$391,$394);
 $395 = $0;
 $396 = (__ZNK3glm6detail7tmat4x4IfEixEj($395,1)|0);
 $397 = (__ZNK3glm6detail5tvec4IfEixEj($396,2)|0);
 $398 = $0;
 $399 = (__ZNK3glm6detail7tmat4x4IfEixEj($398,0)|0);
 $400 = (__ZNK3glm6detail5tvec4IfEixEj($399,2)|0);
 $401 = $0;
 $402 = (__ZNK3glm6detail7tmat4x4IfEixEj($401,0)|0);
 $403 = (__ZNK3glm6detail5tvec4IfEixEj($402,2)|0);
 $404 = $0;
 $405 = (__ZNK3glm6detail7tmat4x4IfEixEj($404,0)|0);
 $406 = (__ZNK3glm6detail5tvec4IfEixEj($405,2)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec2,$397,$400,$403,$406);
 $407 = $0;
 $408 = (__ZNK3glm6detail7tmat4x4IfEixEj($407,1)|0);
 $409 = (__ZNK3glm6detail5tvec4IfEixEj($408,3)|0);
 $410 = $0;
 $411 = (__ZNK3glm6detail7tmat4x4IfEixEj($410,0)|0);
 $412 = (__ZNK3glm6detail5tvec4IfEixEj($411,3)|0);
 $413 = $0;
 $414 = (__ZNK3glm6detail7tmat4x4IfEixEj($413,0)|0);
 $415 = (__ZNK3glm6detail5tvec4IfEixEj($414,3)|0);
 $416 = $0;
 $417 = (__ZNK3glm6detail7tmat4x4IfEixEj($416,0)|0);
 $418 = (__ZNK3glm6detail5tvec4IfEixEj($417,3)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec3,$409,$412,$415,$418);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($11,$Vec1,$Fac0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($12,$Vec2,$Fac1);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($10,$11,$12);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($13,$Vec3,$Fac2);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($9,$10,$13);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv0,$SignA,$9);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($16,$Vec0,$Fac0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($17,$Vec2,$Fac3);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($15,$16,$17);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($18,$Vec3,$Fac4);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($14,$15,$18);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv1,$SignB,$14);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($21,$Vec0,$Fac1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($22,$Vec1,$Fac3);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($20,$21,$22);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($23,$Vec3,$Fac5);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($19,$20,$23);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv2,$SignA,$19);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($26,$Vec0,$Fac2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($27,$Vec1,$Fac4);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($25,$26,$27);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($28,$Vec2,$Fac5);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($24,$25,$28);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv3,$SignB,$24);
 __ZN3glm6detail7tmat4x4IfEC1ERKNS0_5tvec4IfEES6_S6_S6_($agg$result,$Inv0,$Inv1,$Inv2,$Inv3);
 $419 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $420 = (__ZN3glm6detail5tvec4IfEixEj($419,0)|0);
 $421 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $422 = (__ZN3glm6detail5tvec4IfEixEj($421,0)|0);
 $423 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $424 = (__ZN3glm6detail5tvec4IfEixEj($423,0)|0);
 $425 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $426 = (__ZN3glm6detail5tvec4IfEixEj($425,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Row0,$420,$422,$424,$426);
 $427 = $0;
 $428 = (__ZNK3glm6detail7tmat4x4IfEixEj($427,0)|0);
 $429 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec4IS1_EES6_($428,$Row0));
 HEAPF32[$Determinant>>2] = $429;
 (__ZN3glm6detail7tmat4x4IfEdVIfEERS2_RKT_($agg$result,$Determinant)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($2) + 8|0);
 HEAPF32[$12>>2] = $11;
 $13 = $1;
 $14 = (($13) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 12|0);
 HEAPF32[$16>>2] = $15;
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $m;
 $1 = $v;
 $6 = $0;
 $7 = (__ZNK3glm6detail7tmat4x4IfEixEj($6,0)|0);
 $8 = (__ZNK3glm6detail5tvec4IfEixEj($7,0)|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = +HEAPF32[$10>>2];
 $12 = $9 * $11;
 $13 = $0;
 $14 = (__ZNK3glm6detail7tmat4x4IfEixEj($13,1)|0);
 $15 = (__ZNK3glm6detail5tvec4IfEixEj($14,0)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = (($17) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $12 + $20;
 $22 = $0;
 $23 = (__ZNK3glm6detail7tmat4x4IfEixEj($22,2)|0);
 $24 = (__ZNK3glm6detail5tvec4IfEixEj($23,0)|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = (($26) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 * $28;
 $30 = $21 + $29;
 $31 = $0;
 $32 = (__ZNK3glm6detail7tmat4x4IfEixEj($31,3)|0);
 $33 = (__ZNK3glm6detail5tvec4IfEixEj($32,0)|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $1;
 $36 = (($35) + 12|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 * $37;
 $39 = $30 + $38;
 HEAPF32[$2>>2] = $39;
 $40 = $0;
 $41 = (__ZNK3glm6detail7tmat4x4IfEixEj($40,0)|0);
 $42 = (__ZNK3glm6detail5tvec4IfEixEj($41,1)|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $1;
 $45 = +HEAPF32[$44>>2];
 $46 = $43 * $45;
 $47 = $0;
 $48 = (__ZNK3glm6detail7tmat4x4IfEixEj($47,1)|0);
 $49 = (__ZNK3glm6detail5tvec4IfEixEj($48,1)|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $1;
 $52 = (($51) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $50 * $53;
 $55 = $46 + $54;
 $56 = $0;
 $57 = (__ZNK3glm6detail7tmat4x4IfEixEj($56,2)|0);
 $58 = (__ZNK3glm6detail5tvec4IfEixEj($57,1)|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $1;
 $61 = (($60) + 8|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $59 * $62;
 $64 = $55 + $63;
 $65 = $0;
 $66 = (__ZNK3glm6detail7tmat4x4IfEixEj($65,3)|0);
 $67 = (__ZNK3glm6detail5tvec4IfEixEj($66,1)|0);
 $68 = +HEAPF32[$67>>2];
 $69 = $1;
 $70 = (($69) + 12|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $68 * $71;
 $73 = $64 + $72;
 HEAPF32[$3>>2] = $73;
 $74 = $0;
 $75 = (__ZNK3glm6detail7tmat4x4IfEixEj($74,0)|0);
 $76 = (__ZNK3glm6detail5tvec4IfEixEj($75,2)|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $1;
 $79 = +HEAPF32[$78>>2];
 $80 = $77 * $79;
 $81 = $0;
 $82 = (__ZNK3glm6detail7tmat4x4IfEixEj($81,1)|0);
 $83 = (__ZNK3glm6detail5tvec4IfEixEj($82,2)|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $1;
 $86 = (($85) + 4|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $84 * $87;
 $89 = $80 + $88;
 $90 = $0;
 $91 = (__ZNK3glm6detail7tmat4x4IfEixEj($90,2)|0);
 $92 = (__ZNK3glm6detail5tvec4IfEixEj($91,2)|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $1;
 $95 = (($94) + 8|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $93 * $96;
 $98 = $89 + $97;
 $99 = $0;
 $100 = (__ZNK3glm6detail7tmat4x4IfEixEj($99,3)|0);
 $101 = (__ZNK3glm6detail5tvec4IfEixEj($100,2)|0);
 $102 = +HEAPF32[$101>>2];
 $103 = $1;
 $104 = (($103) + 12|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $102 * $105;
 $107 = $98 + $106;
 HEAPF32[$4>>2] = $107;
 $108 = $0;
 $109 = (__ZNK3glm6detail7tmat4x4IfEixEj($108,0)|0);
 $110 = (__ZNK3glm6detail5tvec4IfEixEj($109,3)|0);
 $111 = +HEAPF32[$110>>2];
 $112 = $1;
 $113 = +HEAPF32[$112>>2];
 $114 = $111 * $113;
 $115 = $0;
 $116 = (__ZNK3glm6detail7tmat4x4IfEixEj($115,1)|0);
 $117 = (__ZNK3glm6detail5tvec4IfEixEj($116,3)|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $1;
 $120 = (($119) + 4|0);
 $121 = +HEAPF32[$120>>2];
 $122 = $118 * $121;
 $123 = $114 + $122;
 $124 = $0;
 $125 = (__ZNK3glm6detail7tmat4x4IfEixEj($124,2)|0);
 $126 = (__ZNK3glm6detail5tvec4IfEixEj($125,3)|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $1;
 $129 = (($128) + 8|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $127 * $130;
 $132 = $123 + $131;
 $133 = $0;
 $134 = (__ZNK3glm6detail7tmat4x4IfEixEj($133,3)|0);
 $135 = (__ZNK3glm6detail5tvec4IfEixEj($134,3)|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $1;
 $138 = (($137) + 12|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $136 * $139;
 $141 = $132 + $140;
 HEAPF32[$5>>2] = $141;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $v;
 $1 = $s;
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 / $9;
 HEAPF32[$2>>2] = $10;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = +HEAPF32[$14>>2];
 $16 = $13 / $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = +HEAPF32[$20>>2];
 $22 = $19 / $21;
 HEAPF32[$4>>2] = $22;
 $23 = $0;
 $24 = (($23) + 12|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = +HEAPF32[$26>>2];
 $28 = $25 / $27;
 HEAPF32[$5>>2] = $28;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm9normalizeIfEENS_6detail5tvec4IT_EERKS4_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $sqr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sqr = sp + 4|0;
 $1 = sp;
 $0 = $x;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 $23 = $0;
 $24 = (($23) + 12|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $0;
 $27 = (($26) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 * $28;
 $30 = $22 + $29;
 HEAPF32[$sqr>>2] = $30;
 $31 = $0;
 $32 = (+__ZN3glm11inversesqrtIfEET_RKS1_($sqr));
 HEAPF32[$1>>2] = $32;
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg$result,$31,$1);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $v1;
 $1 = $v2;
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 - $9;
 HEAPF32[$2>>2] = $10;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 - $16;
 HEAPF32[$3>>2] = $17;
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 - $23;
 HEAPF32[$4>>2] = $24;
 $25 = $0;
 $26 = (($25) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 - $30;
 HEAPF32[$5>>2] = $31;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm6detail7tmat4x4IfE6lengthEv($2)|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<4)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((2288|0),(2360|0),60,(2344|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN3glm6detail5tvec4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm6detail5tvec4IfE6lengthEv($2)|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<2)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((2288|0),(2312|0),48,(2344|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN19LorenzAttractorDemo6updateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bInterop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $5 = sp + 292|0;
 $29 = sp + 272|0;
 $58 = sp + 244|0;
 $61 = sp + 120|0;
 $62 = sp + 260|0;
 $63 = sp + 16|0;
 $64 = sp + 4|0;
 $65 = sp + 144|0;
 $66 = sp + 116|0;
 $57 = $this;
 $67 = $57;
 $68 = (__ZN6global3parEv()|0);
 $55 = $58;
 $56 = 2048;
 $69 = $55;
 $70 = $56;
 $53 = $69;
 $54 = $70;
 $71 = $53;
 $52 = $71;
 $72 = $52;
 $51 = $72;
 $73 = $51;
 $50 = $73;
 $74 = $50;
 $49 = $74;
 $75 = $54;
 $76 = $54;
 $48 = $76;
 $77 = $48;
 $78 = (_strlen(($77|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($71,$75,$78);
 __THREW__ = 0;
 $79 = (invoke_iii(432,($68|0),($58|0))|0);
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $177 = ___cxa_find_matching_catch(-1,-1)|0;
  $178 = tempRet0;
  $59 = $177;
  $60 = $178;
  __THREW__ = 0;
  invoke_vi(415,($58|0));
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $200 = tempRet0;
   ___clang_call_terminate($199);
   // unreachable;
  }
  $197 = $59;
  $198 = $60;
  ___resumeException($197|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($58);
 $82 = $79&1;
 $bInterop = $82;
 $83 = $bInterop;
 $84 = $83&1;
 if ($84) {
  STACKTOP = sp;return;
 }
 $85 = (($67) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 _glBindBuffer(34962,($86|0));
 $87 = (__ZN6global3parEv()|0);
 $46 = $61;
 $47 = 2016;
 $88 = $46;
 $89 = $47;
 $44 = $88;
 $45 = $89;
 $90 = $44;
 $43 = $90;
 $91 = $43;
 $42 = $91;
 $92 = $42;
 $41 = $92;
 $93 = $41;
 $40 = $93;
 $94 = $45;
 $95 = $45;
 $39 = $95;
 $96 = $39;
 $97 = (_strlen(($96|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($90,$94,$97);
 __THREW__ = 0;
 $98 = (invoke_iiii(428,($87|0),($61|0),0)|0);
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 do {
  if ($100) {
   label = 26;
  } else {
   $101 = $98<<2;
   $102 = $101<<2;
   __THREW__ = 0;
   $103 = (invoke_i(429)|0);
   $104 = __THREW__; __THREW__ = 0;
   $105 = $104&1;
   if ($105) {
    label = 26;
   } else {
    $37 = $62;
    $38 = 2032;
    $106 = $37;
    $107 = $38;
    $35 = $106;
    $36 = $107;
    $108 = $35;
    $34 = $108;
    $109 = $34;
    $33 = $109;
    $110 = $33;
    $32 = $110;
    $111 = $32;
    $31 = $111;
    $112 = $36;
    $113 = $36;
    $30 = $113;
    $114 = $30;
    __THREW__ = 0;
    $115 = (invoke_ii(430,($114|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     label = 26;
    } else {
     __THREW__ = 0;
     invoke_viii(431,($108|0),($112|0),($115|0));
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 26;
     } else {
      $27 = $29;
      $28 = -1;
      $120 = $27;
      $121 = $28;
      $25 = $120;
      $26 = $121;
      $122 = $25;
      HEAP32[$122>>2] = 0;
      $123 = HEAP32[$29>>2]|0;
      HEAP32[$63>>2] = $123;
      $24 = $63;
      __THREW__ = 0;
      $124 = (invoke_iiii(511,($103|0),($62|0),(0|0))|0);
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if (!($126)) {
       __THREW__ = 0;
       invoke_viiii(532,34962,0,($102|0),($124|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if (!($128)) {
        __THREW__ = 0;
        invoke_vi(415,($62|0));
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 26;
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($61);
        $131 = (($67) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        _glBindBuffer(34962,($132|0));
        $133 = (__ZN6global3parEv()|0);
        $22 = $64;
        $23 = 2016;
        $134 = $22;
        $135 = $23;
        $20 = $134;
        $21 = $135;
        $136 = $20;
        $19 = $136;
        $137 = $19;
        $18 = $137;
        $138 = $18;
        $17 = $138;
        $139 = $17;
        $16 = $139;
        $140 = $21;
        $141 = $21;
        $15 = $141;
        $142 = $15;
        $143 = (_strlen(($142|0))|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($136,$140,$143);
        __THREW__ = 0;
        $144 = (invoke_iiii(428,($133|0),($64|0),0)|0);
        $145 = __THREW__; __THREW__ = 0;
        $146 = $145&1;
        do {
         if ($146) {
          label = 31;
         } else {
          $147 = $144<<2;
          $148 = $147<<2;
          __THREW__ = 0;
          $149 = (invoke_i(429)|0);
          $150 = __THREW__; __THREW__ = 0;
          $151 = $150&1;
          if ($151) {
           label = 31;
          } else {
           $13 = $65;
           $14 = 2040;
           $152 = $13;
           $153 = $14;
           $11 = $152;
           $12 = $153;
           $154 = $11;
           $10 = $154;
           $155 = $10;
           $9 = $155;
           $156 = $9;
           $8 = $156;
           $157 = $8;
           $7 = $157;
           $158 = $12;
           $159 = $12;
           $6 = $159;
           $160 = $6;
           __THREW__ = 0;
           $161 = (invoke_ii(430,($160|0))|0);
           $162 = __THREW__; __THREW__ = 0;
           $163 = $162&1;
           if ($163) {
            label = 31;
           } else {
            __THREW__ = 0;
            invoke_viii(431,($154|0),($158|0),($161|0));
            $164 = __THREW__; __THREW__ = 0;
            $165 = $164&1;
            if ($165) {
             label = 31;
            } else {
             $3 = $5;
             $4 = -1;
             $166 = $3;
             $167 = $4;
             $1 = $166;
             $2 = $167;
             $168 = $1;
             HEAP32[$168>>2] = 0;
             $169 = HEAP32[$5>>2]|0;
             HEAP32[$66>>2] = $169;
             $0 = $66;
             __THREW__ = 0;
             $170 = (invoke_iiii(511,($149|0),($65|0),(0|0))|0);
             $171 = __THREW__; __THREW__ = 0;
             $172 = $171&1;
             if (!($172)) {
              __THREW__ = 0;
              invoke_viiii(532,34962,0,($148|0),($170|0));
              $173 = __THREW__; __THREW__ = 0;
              $174 = $173&1;
              if (!($174)) {
               __THREW__ = 0;
               invoke_vi(415,($65|0));
               $175 = __THREW__; __THREW__ = 0;
               $176 = $175&1;
               if ($176) {
                label = 31;
                break;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($64);
               STACKTOP = sp;return;
              }
             }
             $191 = ___cxa_find_matching_catch(-1,-1)|0;
             $192 = tempRet0;
             $59 = $191;
             $60 = $192;
             __THREW__ = 0;
             invoke_vi(415,($65|0));
             $193 = __THREW__; __THREW__ = 0;
             $194 = $193&1;
             if ($194) {
              $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $200 = tempRet0;
              ___clang_call_terminate($199);
              // unreachable;
             } else {
              break;
             }
            }
           }
          }
         }
        } while(0);
        if ((label|0) == 31) {
         $189 = ___cxa_find_matching_catch(-1,-1)|0;
         $190 = tempRet0;
         $59 = $189;
         $60 = $190;
        }
        __THREW__ = 0;
        invoke_vi(415,($64|0));
        $195 = __THREW__; __THREW__ = 0;
        $196 = $195&1;
        if ($196) {
         $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $200 = tempRet0;
         ___clang_call_terminate($199);
         // unreachable;
        }
        $197 = $59;
        $198 = $60;
        ___resumeException($197|0);
        // unreachable;
       }
      }
      $183 = ___cxa_find_matching_catch(-1,-1)|0;
      $184 = tempRet0;
      $59 = $183;
      $60 = $184;
      __THREW__ = 0;
      invoke_vi(415,($62|0));
      $185 = __THREW__; __THREW__ = 0;
      $186 = $185&1;
      if ($186) {
       $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $200 = tempRet0;
       ___clang_call_terminate($199);
       // unreachable;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $181 = ___cxa_find_matching_catch(-1,-1)|0;
  $182 = tempRet0;
  $59 = $181;
  $60 = $182;
 }
 __THREW__ = 0;
 invoke_vi(415,($61|0));
 $187 = __THREW__; __THREW__ = 0;
 $188 = $187&1;
 if ($188) {
  $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $200 = tempRet0;
  ___clang_call_terminate($199);
  // unreachable;
 }
 $197 = $59;
 $198 = $60;
 ___resumeException($197|0);
 // unreachable;
}
function __ZNK3glm6detail5tvec4IfE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK3glm6detail7tmat4x4IfE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $v;
 $1 = $s;
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 HEAPF32[$2>>2] = $10;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = +HEAPF32[$14>>2];
 $16 = $13 * $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = +HEAPF32[$20>>2];
 $22 = $19 * $21;
 HEAPF32[$4>>2] = $22;
 $23 = $0;
 $24 = (($23) + 12|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = +HEAPF32[$26>>2];
 $28 = $25 * $27;
 HEAPF32[$5>>2] = $28;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm11inversesqrtIfEET_RKS1_($x) {
 $x = $x|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $x;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $0 = $3;
 $4 = $0;
 $5 = (+Math_sqrt((+$4)));
 $6 = 1.0 / $5;
 STACKTOP = sp;return (+$6);
}
function __ZNK3glm6detail7tmat4x4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm6detail7tmat4x4IfE6lengthEv($2)|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<4)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((2288|0),(2360|0),71,(2344|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNK3glm6detail5tvec4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm6detail5tvec4IfE6lengthEv($2)|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<2)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((2288|0),(2312|0),59,(2344|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($this,$x,$y,$z,$w) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $w;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3glm6detail5tvec4IfEC2IiiiiEERKT_RKT0_RKT1_RKT2_($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $v1;
 $1 = $v2;
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 HEAPF32[$2>>2] = $10;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 * $16;
 HEAPF32[$3>>2] = $17;
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 * $23;
 HEAPF32[$4>>2] = $24;
 $25 = $0;
 $26 = (($25) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 * $30;
 HEAPF32[$5>>2] = $31;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $v1;
 $1 = $v2;
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 + $9;
 HEAPF32[$2>>2] = $10;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 + $16;
 HEAPF32[$3>>2] = $17;
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 + $23;
 HEAPF32[$4>>2] = $24;
 $25 = $0;
 $26 = (($25) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 + $30;
 HEAPF32[$5>>2] = $31;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC1ERKNS0_5tvec4IfEES6_S6_S6_($this,$v0,$v1,$v2,$v3) {
 $this = $this|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $v0;
 $2 = $v1;
 $3 = $v2;
 $4 = $v3;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3glm6detail7tmat4x4IfEC2ERKNS0_5tvec4IfEES6_S6_S6_($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3glm3dotIfEET_RKNS_6detail5tvec4IS1_EES6_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 $23 = $0;
 $24 = (($23) + 12|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = (($26) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 * $28;
 $30 = $22 + $29;
 STACKTOP = sp;return (+$30);
}
function __ZN3glm6detail7tmat4x4IfEdVIfEERS2_RKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($2,$3)|0);
 $4 = (($2) + 16|0);
 $5 = $1;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($4,$5)|0);
 $6 = (($2) + 32|0);
 $7 = $1;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($6,$7)|0);
 $8 = (($2) + 48|0);
 $9 = $1;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($8,$9)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 / $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = (($2) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 / $8;
 HEAPF32[$9>>2] = $11;
 $12 = $1;
 $13 = +HEAPF32[$12>>2];
 $14 = (($2) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 / $13;
 HEAPF32[$14>>2] = $16;
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 $19 = (($2) + 12|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 / $18;
 HEAPF32[$19>>2] = $21;
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm6detail7tmat4x4IfEC2ERKNS0_5tvec4IfEES6_S6_S6_($this,$v0,$v1,$v2,$v3) {
 $this = $this|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $v0;
 $2 = $v1;
 $3 = $v2;
 $4 = $v3;
 $5 = $0;
 $6 = (($5) + 64|0);
 $7 = $5;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($7);
  $8 = (($7) + 16|0);
  $9 = ($8|0)==($6|0);
  if ($9) {
   break;
  } else {
   $7 = $8;
  }
 }
 $10 = $1;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($5,$10)|0);
 $11 = (($5) + 16|0);
 $12 = $2;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($11,$12)|0);
 $13 = (($5) + 32|0);
 $14 = $3;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($13,$14)|0);
 $15 = (($5) + 48|0);
 $16 = $4;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($15,$16)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN3glm6detail5tvec4IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = (($1) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = (($1) + 8|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = (($1) + 12|0);
 HEAPF32[$4>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2IiiiiEERKT_RKT0_RKT1_RKT2_($this,$x,$y,$z,$w) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $w;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 HEAPF32[$5>>2] = $8;
 $9 = (($5) + 4|0);
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 HEAPF32[$9>>2] = $12;
 $13 = (($5) + 8|0);
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = (+($15|0));
 HEAPF32[$13>>2] = $16;
 $17 = (($5) + 12|0);
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 HEAPF32[$17>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC1ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 __ZN3glm6detail5tvec4IfEC2ERKS2_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC1ENS2_4ctorE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3glm6detail7tmat4x4IfEC2ENS2_4ctorE($3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC2ENS2_4ctorE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 64|0);
 $5 = $3;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($5);
  $6 = (($5) + 16|0);
  $7 = ($6|0)==($4|0);
  if ($7) {
   break;
  } else {
   $5 = $6;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = (($2) + 4|0);
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 $9 = (($2) + 8|0);
 $10 = $1;
 $11 = (($10) + 8|0);
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$9>>2] = $12;
 $13 = (($2) + 12|0);
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = +HEAPF32[$15>>2];
 HEAPF32[$13>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN3glm3tanIfEET_RKS1_($angle) {
 $angle = $angle|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $angle;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $0 = $3;
 $4 = $0;
 $5 = (+Math_tan((+$4)));
 STACKTOP = sp;return (+$5);
}
function __ZN3glm7radiansIfEET_RKS1_($degrees) {
 $degrees = $degrees|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $pi = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $degrees;
 $pi = 3.14159274101257324219;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = $2 * 0.0174532923847436904907;
 STACKTOP = sp;return (+$3);
}
function __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $3 = 0.0, $4 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $sqr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sqr = sp + 4|0;
 $1 = sp;
 $0 = $x;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 HEAPF32[$sqr>>2] = $22;
 $23 = $0;
 $24 = (+__ZN3glm11inversesqrtIfEET_RKS1_($sqr));
 HEAPF32[$1>>2] = $24;
 __ZN3glm6detailmlIfEENS0_5tvec3IT_EERKS4_RKS3_($agg$result,$23,$1);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmiIfEENS0_5tvec3IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v1;
 $1 = $v2;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 - $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = (($13) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 - $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = (($20) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 - $22;
 HEAPF32[$4>>2] = $23;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($agg$result,$x,$y) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $x;
 $1 = $y;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $7 * $10;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 * $17;
 $19 = $11 - $18;
 HEAPF32[$2>>2] = $19;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = +HEAPF32[$23>>2];
 $25 = $22 * $24;
 $26 = $1;
 $27 = (($26) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $0;
 $30 = +HEAPF32[$29>>2];
 $31 = $28 * $30;
 $32 = $25 - $31;
 HEAPF32[$3>>2] = $32;
 $33 = $0;
 $34 = +HEAPF32[$33>>2];
 $35 = $1;
 $36 = (($35) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 * $37;
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = $0;
 $42 = (($41) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $38 - $44;
 HEAPF32[$4>>2] = $45;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec3IfEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($2) + 8|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm6detail7tmat4x4IfEC1IiEERKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 __ZN3glm6detail7tmat4x4IfEC2IiEERKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function __ZN3glm6detail7tmat4x4IfEC2IiEERKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $Zero = sp;
 $2 = sp + 56|0;
 $3 = sp + 72|0;
 $4 = sp + 80|0;
 $5 = sp + 24|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $0 = $this;
 $1 = $s;
 $10 = $0;
 $11 = (($10) + 64|0);
 $12 = $10;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($12);
  $13 = (($12) + 16|0);
  $14 = ($13|0)==($11|0);
  if ($14) {
   break;
  } else {
   $12 = $13;
  }
 }
 HEAPF32[$Zero>>2] = 0.0;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = (+($16|0));
 HEAPF32[$3>>2] = $17;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($2,$3,$Zero,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($10,$2)|0);
 $18 = (($10) + 16|0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 HEAPF32[$5>>2] = $21;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($4,$Zero,$5,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($18,$4)|0);
 $22 = (($10) + 32|0);
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24|0));
 HEAPF32[$7>>2] = $25;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($6,$Zero,$Zero,$7,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($22,$6)|0);
 $26 = (($10) + 48|0);
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 HEAPF32[$9>>2] = $29;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($8,$Zero,$Zero,$Zero,$9);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($26,$8)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmlIfEENS0_5tvec3IT_EERKS4_RKS3_($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v;
 $1 = $s;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 HEAPF32[$3>>2] = $15;
 $16 = $0;
 $17 = (($16) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = +HEAPF32[$19>>2];
 $21 = $18 * $20;
 HEAPF32[$4>>2] = $21;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC2ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Zero = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $Zero = sp + 60|0;
 $2 = sp + 64|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = sp + 40|0;
 $0 = $this;
 $1 = $s;
 $6 = $0;
 $7 = (($6) + 64|0);
 $8 = $6;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($8);
  $9 = (($8) + 16|0);
  $10 = ($9|0)==($7|0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 HEAPF32[$Zero>>2] = 0.0;
 $11 = $1;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($2,$11,$Zero,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($6,$2)|0);
 $12 = (($6) + 16|0);
 $13 = $1;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($3,$Zero,$13,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($12,$3)|0);
 $14 = (($6) + 32|0);
 $15 = $1;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($4,$Zero,$Zero,$15,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($14,$4)|0);
 $16 = (($6) + 48|0);
 $17 = $1;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($5,$Zero,$Zero,$Zero,$17);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($16,$5)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 92|0;
 $__v = sp + 52|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 4)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 4)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 4)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC1EjjS3_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(533,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(534,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch(-1,-1)|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(535,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $16 = $0;
  $1 = $13;
  $2 = $16;
  $17 = $2;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   HEAP32[$17>>2] = 0;
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 4|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC1EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   HEAP32[$19>>2] = 0;
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 4|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__t$i2 = sp + 36|0;
 $__t$i1 = sp + 128|0;
 $__t$i = sp + 96|0;
 $29 = $this;
 $30 = $__v;
 $31 = $29;
 $28 = $31;
 $32 = $28;
 $33 = (($32) + 8|0);
 $27 = $33;
 $34 = $27;
 $26 = $34;
 $35 = $26;
 $36 = HEAP32[$31>>2]|0;
 $37 = (($31) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $30;
 $40 = (($39) + 4|0);
 $0 = $35;
 $1 = $36;
 $2 = $38;
 $3 = $40;
 $41 = $2;
 $42 = $1;
 $43 = $41;
 $44 = $42;
 $45 = (($43) - ($44))|0;
 $46 = (($45|0) / 4)&-1;
 $_Np$i = $46;
 $47 = $_Np$i;
 $48 = $3;
 $49 = HEAP32[$48>>2]|0;
 $50 = (0 - ($47))|0;
 $51 = (($49) + ($50<<2)|0);
 HEAP32[$48>>2] = $51;
 $52 = $3;
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = $_Np$i;
 $56 = $55<<2;
 _memcpy(($53|0),($54|0),($56|0))|0;
 $57 = $30;
 $58 = (($57) + 4|0);
 $7 = $31;
 $8 = $58;
 $59 = $7;
 $6 = $59;
 $60 = $6;
 $61 = HEAP32[$60>>2]|0;
 HEAP32[$__t$i2>>2] = $61;
 $62 = $8;
 $4 = $62;
 $63 = $4;
 $64 = HEAP32[$63>>2]|0;
 $65 = $7;
 HEAP32[$65>>2] = $64;
 $5 = $__t$i2;
 $66 = $5;
 $67 = HEAP32[$66>>2]|0;
 $68 = $8;
 HEAP32[$68>>2] = $67;
 $69 = (($31) + 4|0);
 $70 = $30;
 $71 = (($70) + 8|0);
 $12 = $69;
 $13 = $71;
 $72 = $12;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$__t$i1>>2] = $74;
 $75 = $13;
 $9 = $75;
 $76 = $9;
 $77 = HEAP32[$76>>2]|0;
 $78 = $12;
 HEAP32[$78>>2] = $77;
 $10 = $__t$i1;
 $79 = $10;
 $80 = HEAP32[$79>>2]|0;
 $81 = $13;
 HEAP32[$81>>2] = $80;
 $16 = $31;
 $82 = $16;
 $83 = (($82) + 8|0);
 $15 = $83;
 $84 = $15;
 $14 = $84;
 $85 = $14;
 $86 = $30;
 $19 = $86;
 $87 = $19;
 $88 = (($87) + 12|0);
 $18 = $88;
 $89 = $18;
 $17 = $89;
 $90 = $17;
 $23 = $85;
 $24 = $90;
 $91 = $23;
 $22 = $91;
 $92 = $22;
 $93 = HEAP32[$92>>2]|0;
 HEAP32[$__t$i>>2] = $93;
 $94 = $24;
 $20 = $94;
 $95 = $20;
 $96 = HEAP32[$95>>2]|0;
 $97 = $23;
 HEAP32[$97>>2] = $96;
 $21 = $__t$i;
 $98 = $21;
 $99 = HEAP32[$98>>2]|0;
 $100 = $24;
 HEAP32[$100>>2] = $99;
 $101 = $30;
 $102 = (($101) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $30;
 HEAP32[$104>>2] = $103;
 $25 = $31;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $16 = sp;
 $19 = sp + 120|0;
 $25 = sp + 8|0;
 $28 = sp + 121|0;
 $30 = $this;
 $31 = $30;
 $29 = $31;
 $32 = $29;
 $33 = (($32) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $26 = $32;
 $27 = $34;
 $35 = $26;
 $36 = $27;
 ;HEAP8[$25+0>>0]=HEAP8[$28+0>>0]|0;
 $23 = $35;
 $24 = $36;
 $37 = $23;
 while(1) {
  $38 = $24;
  $39 = (($37) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $22 = $37;
  $42 = $22;
  $43 = (($42) + 12|0);
  $21 = $43;
  $44 = $21;
  $20 = $44;
  $45 = $20;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($37) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -4|0);
  HEAP32[$48>>2] = $50;
  $13 = $50;
  $51 = $13;
  $17 = $47;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  ;HEAP8[$16+0>>0]=HEAP8[$19+0>>0]|0;
  $14 = $52;
  $15 = $53;
 }
 $54 = HEAP32[$31>>2]|0;
 $55 = ($54|0)!=(0|0);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $6 = $31;
 $56 = $6;
 $57 = (($56) + 12|0);
 $5 = $57;
 $58 = $5;
 $4 = $58;
 $59 = $4;
 $60 = (($59) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$31>>2]|0;
 $3 = $31;
 $63 = $3;
 $2 = $63;
 $64 = $2;
 $65 = (($64) + 12|0);
 $1 = $65;
 $66 = $1;
 $0 = $66;
 $67 = $0;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $10 = $61;
 $11 = $62;
 $12 = $73;
 $74 = $10;
 $75 = $11;
 $76 = $12;
 $7 = $74;
 $8 = $75;
 $9 = $76;
 $77 = $8;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $4 = sp + 156|0;
 $8 = sp + 28|0;
 $26 = sp + 100|0;
 $35 = sp + 16|0;
 $40 = sp;
 $41 = sp + 8|0;
 $36 = $this;
 $37 = $__cap;
 $38 = $__start;
 $39 = $__a;
 $42 = $36;
 $43 = (($42) + 12|0);
 $33 = $35;
 $34 = -1;
 $44 = $33;
 $45 = $34;
 $31 = $44;
 $32 = $45;
 $46 = $31;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$35>>2]|0;
 HEAP32[$40>>2] = $47;
 $16 = $40;
 $48 = $39;
 $10 = $43;
 $11 = 0;
 $12 = $48;
 $49 = $10;
 $50 = $11;
 $51 = $12;
 $7 = $49;
 HEAP32[$8>>2] = $50;
 $9 = $51;
 $52 = $7;
 $6 = $8;
 $53 = $6;
 $54 = HEAP32[$53>>2]|0;
 $55 = $9;
 $0 = $55;
 $56 = $0;
 $3 = $52;
 HEAP32[$4>>2] = $54;
 $5 = $56;
 $57 = $3;
 $2 = $4;
 $58 = $2;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = (($57) + 4|0);
 $61 = $5;
 $1 = $61;
 $62 = $1;
 HEAP32[$60>>2] = $62;
 $63 = $37;
 $64 = ($63|0)!=(0);
 if ($64) {
  $15 = $42;
  $65 = $15;
  $66 = (($65) + 12|0);
  $14 = $66;
  $67 = $14;
  $13 = $67;
  $68 = $13;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $37;
  $20 = $70;
  $21 = $71;
  $72 = $20;
  $73 = $21;
  $17 = $72;
  $18 = $73;
  $19 = 0;
  $74 = $18;
  $75 = $74<<2;
  $76 = (__Znwj($75)|0);
  $81 = $76;
 } else {
  $24 = $26;
  $25 = -1;
  $77 = $24;
  $78 = $25;
  $22 = $77;
  $23 = $78;
  $79 = $22;
  HEAP32[$79>>2] = 0;
  $80 = HEAP32[$26>>2]|0;
  HEAP32[$41>>2] = $80;
  $27 = $41;
  $81 = 0;
 }
 HEAP32[$42>>2] = $81;
 $82 = HEAP32[$42>>2]|0;
 $83 = $38;
 $84 = (($82) + ($83<<2)|0);
 $85 = (($42) + 8|0);
 HEAP32[$85>>2] = $84;
 $86 = (($42) + 4|0);
 HEAP32[$86>>2] = $84;
 $87 = HEAP32[$42>>2]|0;
 $88 = $37;
 $89 = (($87) + ($88<<2)|0);
 $30 = $42;
 $90 = $30;
 $91 = (($90) + 12|0);
 $29 = $91;
 $92 = $29;
 $28 = $92;
 $93 = $28;
 HEAP32[$93>>2] = $89;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2ERKfS4_S4_S4_($this,$s1,$s2,$s3,$s4) {
 $this = $this|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 $s3 = $s3|0;
 $s4 = $s4|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $s1;
 $2 = $s2;
 $3 = $s3;
 $4 = $s4;
 $5 = $0;
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 HEAPF32[$5>>2] = $7;
 $8 = (($5) + 4|0);
 $9 = $2;
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$8>>2] = $10;
 $11 = (($5) + 8|0);
 $12 = $3;
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$11>>2] = $13;
 $14 = (($5) + 12|0);
 $15 = $4;
 $16 = +HEAPF32[$15>>2];
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec3IfEC2ERKfS4_S4_($this,$s0,$s1,$s2) {
 $this = $this|0;
 $s0 = $s0|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $s0;
 $2 = $s1;
 $3 = $s2;
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 HEAPF32[$4>>2] = $6;
 $7 = (($4) + 4|0);
 $8 = $2;
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$7>>2] = $9;
 $10 = (($4) + 8|0);
 $11 = $3;
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0;
 var $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $8 = sp + 232|0;
 $14 = sp + 52|0;
 $110 = sp + 448|0;
 $112 = sp + 20|0;
 $118 = sp + 492|0;
 $119 = sp + 340|0;
 $116 = $this;
 $117 = $__k;
 $120 = $116;
 $115 = $120;
 $121 = $115;
 $122 = (($121) + 12|0);
 $114 = $122;
 $123 = $114;
 $113 = $123;
 $124 = $113;
 $125 = $117;
 $30 = $124;
 $31 = $125;
 $126 = $30;
 $127 = $31;
 $128 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($126,$127)|0);
 $__hash = $128;
 $29 = $120;
 $129 = $29;
 $28 = $129;
 $130 = $28;
 $27 = $130;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = (($132) + 4|0);
 $25 = $133;
 $134 = $25;
 $24 = $134;
 $135 = $24;
 $23 = $135;
 $136 = $23;
 $137 = HEAP32[$136>>2]|0;
 $__bc = $137;
 $138 = $__bc;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $__hash;
  $141 = $__bc;
  $21 = $140;
  $22 = $141;
  $142 = $22;
  $143 = $22;
  $144 = (($143) - 1)|0;
  $145 = $142 & $144;
  $146 = ($145|0)!=(0);
  if ($146) {
   $151 = $21;
   $152 = $22;
   $153 = (($151>>>0) % ($152>>>0))&-1;
   $154 = $153;
  } else {
   $147 = $21;
   $148 = $22;
   $149 = (($148) - 1)|0;
   $150 = $147 & $149;
   $154 = $150;
  }
  $__chash = $154;
  $155 = $__chash;
  $2 = $120;
  $3 = $155;
  $156 = $2;
  $157 = $3;
  $1 = $156;
  $158 = $1;
  $0 = $158;
  $159 = $0;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($157<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $__nd = $162;
  $163 = $__nd;
  $6 = $8;
  $7 = -1;
  $164 = $6;
  $165 = $7;
  $4 = $164;
  $5 = $165;
  $166 = $4;
  HEAP32[$166>>2] = 0;
  $167 = HEAP32[$8>>2]|0;
  HEAP32[$118>>2] = $167;
  $9 = $118;
  $168 = ($163|0)!=(0|0);
  do {
   if ($168) {
    $169 = $__nd;
    $170 = HEAP32[$169>>2]|0;
    $__nd = $170;
    L9: while(1) {
     $171 = $__nd;
     $12 = $14;
     $13 = -1;
     $172 = $12;
     $173 = $13;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     HEAP32[$174>>2] = 0;
     $175 = HEAP32[$14>>2]|0;
     HEAP32[$119>>2] = $175;
     $15 = $119;
     $176 = ($171|0)!=(0|0);
     if ($176) {
      $177 = $__nd;
      $178 = (($177) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $__bc;
      $16 = $179;
      $17 = $180;
      $181 = $17;
      $182 = $17;
      $183 = (($182) - 1)|0;
      $184 = $181 & $183;
      $185 = ($184|0)!=(0);
      if ($185) {
       $190 = $16;
       $191 = $17;
       $192 = (($190>>>0) % ($191>>>0))&-1;
       $195 = $192;
      } else {
       $186 = $16;
       $187 = $17;
       $188 = (($187) - 1)|0;
       $189 = $186 & $188;
       $195 = $189;
      }
      $193 = $__chash;
      $194 = ($195|0)==($193|0);
      $350 = $194;
     } else {
      $350 = 0;
     }
     if (!($350)) {
      label = 41;
      break;
     }
     $20 = $120;
     $196 = $20;
     $197 = (($196) + 16|0);
     $19 = $197;
     $198 = $19;
     $18 = $198;
     $199 = $18;
     $200 = $__nd;
     $201 = (($200) + 8|0);
     $202 = $117;
     $94 = $199;
     $95 = $201;
     $96 = $202;
     $203 = $94;
     $204 = $95;
     $205 = $96;
     $91 = $203;
     $92 = $204;
     $93 = $205;
     $206 = $92;
     $207 = $93;
     $87 = $206;
     $88 = $207;
     $208 = $87;
     $85 = $208;
     $209 = $85;
     $84 = $209;
     $210 = $84;
     $83 = $210;
     $211 = $83;
     $82 = $211;
     $212 = $82;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $214 & 1;
     $216 = ($215|0)!=(0);
     if ($216) {
      $78 = $209;
      $217 = $78;
      $77 = $217;
      $218 = $77;
      $76 = $218;
      $219 = $76;
      $220 = (($219) + 4|0);
      $221 = HEAP32[$220>>2]|0;
      $228 = $221;
     } else {
      $81 = $209;
      $222 = $81;
      $80 = $222;
      $223 = $80;
      $79 = $223;
      $224 = $79;
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = $226 >> 1;
      $228 = $227;
     }
     $__lhs_sz$i$i$i = $228;
     $229 = $__lhs_sz$i$i$i;
     $230 = $88;
     $72 = $230;
     $231 = $72;
     $71 = $231;
     $232 = $71;
     $70 = $232;
     $233 = $70;
     $69 = $233;
     $234 = $69;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $65 = $231;
      $239 = $65;
      $64 = $239;
      $240 = $64;
      $63 = $240;
      $241 = $63;
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $251 = $243;
     } else {
      $68 = $231;
      $244 = $68;
      $67 = $244;
      $245 = $67;
      $66 = $245;
      $246 = $66;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $251 = $249;
     }
     $250 = ($229|0)!=($251|0);
     do {
      if ($250) {
       $$expand_i1_val = 0;
       $86 = $$expand_i1_val;
      } else {
       $252 = $87;
       $45 = $252;
       $253 = $45;
       $44 = $253;
       $254 = $44;
       $43 = $254;
       $255 = $43;
       $42 = $255;
       $256 = $42;
       $41 = $256;
       $257 = $41;
       $258 = HEAP8[$257>>0]|0;
       $259 = $258&255;
       $260 = $259 & 1;
       $261 = ($260|0)!=(0);
       if ($261) {
        $35 = $254;
        $262 = $35;
        $34 = $262;
        $263 = $34;
        $33 = $263;
        $264 = $33;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $273 = $266;
       } else {
        $40 = $254;
        $267 = $40;
        $39 = $267;
        $268 = $39;
        $38 = $268;
        $269 = $38;
        $270 = (($269) + 1|0);
        $37 = $270;
        $271 = $37;
        $36 = $271;
        $272 = $36;
        $273 = $272;
       }
       $32 = $273;
       $274 = $32;
       $__lp$i$i$i = $274;
       $275 = $88;
       $59 = $275;
       $276 = $59;
       $58 = $276;
       $277 = $58;
       $57 = $277;
       $278 = $57;
       $56 = $278;
       $279 = $56;
       $55 = $279;
       $280 = $55;
       $281 = HEAP8[$280>>0]|0;
       $282 = $281&255;
       $283 = $282 & 1;
       $284 = ($283|0)!=(0);
       if ($284) {
        $49 = $277;
        $285 = $49;
        $48 = $285;
        $286 = $48;
        $47 = $286;
        $287 = $47;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $296 = $289;
       } else {
        $54 = $277;
        $290 = $54;
        $53 = $290;
        $291 = $53;
        $52 = $291;
        $292 = $52;
        $293 = (($292) + 1|0);
        $51 = $293;
        $294 = $51;
        $50 = $294;
        $295 = $50;
        $296 = $295;
       }
       $46 = $296;
       $297 = $46;
       $__rp$i$i$i = $297;
       $298 = $87;
       $62 = $298;
       $299 = $62;
       $61 = $299;
       $300 = $61;
       $60 = $300;
       $301 = $60;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302&255;
       $304 = $303 & 1;
       $305 = ($304|0)!=(0);
       if ($305) {
        $306 = $__lp$i$i$i;
        $307 = $__rp$i$i$i;
        $308 = $__lhs_sz$i$i$i;
        $73 = $306;
        $74 = $307;
        $75 = $308;
        $309 = $73;
        $310 = $74;
        $311 = $75;
        __THREW__ = 0;
        $312 = (invoke_iiii(440,($309|0),($310|0),($311|0))|0);
        $313 = __THREW__; __THREW__ = 0;
        $314 = $313&1;
        if ($314) {
         label = 30;
         break L9;
        }
        $315 = ($312|0)==(0);
        $$expand_i1_val2 = $315&1;
        $86 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $319 = $__lhs_sz$i$i$i;
        $320 = ($319|0)!=(0);
        if (!($320)) {
         label = 36;
         break;
        }
        $321 = $__lp$i$i$i;
        $322 = HEAP8[$321>>0]|0;
        $323 = $322 << 24 >> 24;
        $324 = $__rp$i$i$i;
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($323|0)!=($326|0);
        if ($327) {
         label = 34;
         break;
        }
        $328 = $__lhs_sz$i$i$i;
        $329 = (($328) + -1)|0;
        $__lhs_sz$i$i$i = $329;
        $330 = $__lp$i$i$i;
        $331 = (($330) + 1|0);
        $__lp$i$i$i = $331;
        $332 = $__rp$i$i$i;
        $333 = (($332) + 1|0);
        $__rp$i$i$i = $333;
       }
       if ((label|0) == 34) {
        label = 0;
        $$expand_i1_val4 = 0;
        $86 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 36) {
        label = 0;
        $$expand_i1_val6 = 1;
        $86 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $86;
     $334 = $$pre_trunc&1;
     if ($334) {
      label = 38;
      break;
     }
     $340 = $__nd;
     $341 = HEAP32[$340>>2]|0;
     $__nd = $341;
    }
    if ((label|0) == 30) {
     $316 = ___cxa_find_matching_catch(-1,-1)|0;
     $317 = tempRet0;
     $89 = $316;
     $90 = $317;
     $318 = $89;
     ___cxa_call_unexpected(($318|0));
     // unreachable;
    }
    else if ((label|0) == 38) {
     $335 = $__nd;
     $99 = $agg$result;
     $100 = $335;
     $336 = $99;
     $337 = $100;
     $97 = $336;
     $98 = $337;
     $338 = $97;
     $339 = $98;
     HEAP32[$338>>2] = $339;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $111 = $120;
 $108 = $110;
 $109 = -1;
 $342 = $108;
 $343 = $109;
 $106 = $342;
 $107 = $343;
 $344 = $106;
 HEAP32[$344>>2] = 0;
 $345 = HEAP32[$110>>2]|0;
 HEAP32[$112>>2] = $345;
 $101 = $112;
 $104 = $agg$result;
 $105 = 0;
 $346 = $104;
 $347 = $105;
 $102 = $346;
 $103 = $347;
 $348 = $102;
 $349 = $103;
 HEAP32[$348>>2] = $349;
 STACKTOP = sp;return;
}
function __ZN7gltools15ShaderContainerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp + 60|0;
 $6 = sp + 48|0;
 $17 = $this;
 $18 = $17;
 $16 = $18;
 $19 = $16;
 $15 = $19;
 $20 = $15;
 $14 = $20;
 $21 = $14;
 $13 = $21;
 $22 = $13;
 $12 = $22;
 $23 = $12;
 $11 = $23;
 $24 = $11;
 HEAP32[$22>>2] = $24;
 $25 = (($22) + 4|0);
 $10 = $22;
 $26 = $10;
 $9 = $26;
 $27 = $9;
 HEAP32[$25>>2] = $27;
 $28 = (($20) + 8|0);
 $7 = $28;
 $8 = 0;
 $29 = $7;
 $30 = $8;
 $5 = $29;
 HEAP32[$6>>2] = $30;
 $31 = $5;
 $4 = $6;
 $32 = $4;
 $33 = HEAP32[$32>>2]|0;
 $2 = $31;
 HEAP32[$3>>2] = $33;
 $34 = $2;
 $1 = $34;
 $0 = $3;
 $35 = $0;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp;
 $6 = sp + 132|0;
 $31 = sp + 88|0;
 $33 = sp + 20|0;
 $32 = $this;
 $34 = $32;
 $35 = HEAP32[$34>>2]|0;
 $29 = $31;
 $30 = -1;
 $36 = $29;
 $37 = $30;
 $27 = $36;
 $28 = $37;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$31>>2]|0;
 HEAP32[$33>>2] = $39;
 $20 = $33;
 $40 = ($35|0)!=(0|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $12 = $34;
 $41 = $12;
 $42 = HEAP32[$41>>2]|0;
 $10 = $41;
 $11 = $42;
 $43 = $10;
 while(1) {
  $44 = $11;
  $45 = (($43) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($44|0)!=($46|0);
  if (!($47)) {
   break;
  }
  $9 = $43;
  $48 = $9;
  $49 = (($48) + 8|0);
  $8 = $49;
  $50 = $8;
  $7 = $50;
  $51 = $7;
  $52 = (($43) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -4|0);
  HEAP32[$52>>2] = $54;
  $0 = $54;
  $55 = $0;
  $4 = $51;
  $5 = $55;
  $56 = $4;
  $57 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $56;
  $2 = $57;
 }
 $15 = $34;
 $58 = $15;
 $59 = (($58) + 8|0);
 $14 = $59;
 $60 = $14;
 $13 = $60;
 $61 = $13;
 $62 = HEAP32[$34>>2]|0;
 $19 = $34;
 $63 = $19;
 $18 = $63;
 $64 = $18;
 $65 = (($64) + 8|0);
 $17 = $65;
 $66 = $17;
 $16 = $66;
 $67 = $16;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $24 = $61;
 $25 = $62;
 $26 = $73;
 $74 = $24;
 $75 = $25;
 $76 = $26;
 $21 = $74;
 $22 = $75;
 $23 = $76;
 $77 = $22;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZN4DemoD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN4DemoD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4DemoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(57,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function ___cxx_global_var_init125() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2cl7NDRangeC1Ev(2424);
 (___cxa_atexit((536|0),(2424|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl7NDRangeC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl7NDRangeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolverC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $4 = sp + 68|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 8|0;
 $30 = sp + 104|0;
 $31 = sp + 52|0;
 $34 = $this;
 $37 = $34;
 __ZN6SolverC2Ev($37);
 $38 = (2448 + 8|0);
 HEAP32[$37>>2] = $38;
 $39 = (($37) + 4|0);
 __THREW__ = 0;
 invoke_vi(537,($39|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 do {
  if ($41) {
   $86 = ___cxa_find_matching_catch(-1,-1)|0;
   $87 = tempRet0;
   $35 = $86;
   $36 = $87;
   label = 29;
  } else {
   $42 = (($37) + 8|0);
   __THREW__ = 0;
   invoke_vi(538,($42|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    $35 = $88;
    $36 = $89;
   } else {
    $45 = (($37) + 12|0);
    __THREW__ = 0;
    invoke_vi(539,($45|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $90 = ___cxa_find_matching_catch(-1,-1)|0;
     $91 = tempRet0;
     $35 = $90;
     $36 = $91;
    } else {
     $48 = (($37) + 16|0);
     __THREW__ = 0;
     invoke_vi(540,($48|0));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      $92 = ___cxa_find_matching_catch(-1,-1)|0;
      $93 = tempRet0;
      $35 = $92;
      $36 = $93;
     } else {
      $51 = (($37) + 20|0);
      __THREW__ = 0;
      invoke_vi(541,($51|0));
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       $94 = ___cxa_find_matching_catch(-1,-1)|0;
       $95 = tempRet0;
       $35 = $94;
       $36 = $95;
      } else {
       $54 = (($37) + 24|0);
       __THREW__ = 0;
       invoke_vi(541,($54|0));
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        $96 = ___cxa_find_matching_catch(-1,-1)|0;
        $97 = tempRet0;
        $35 = $96;
        $36 = $97;
       } else {
        $57 = (($37) + 28|0);
        __THREW__ = 0;
        invoke_vi(541,($57|0));
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if (!($59)) {
         $60 = (($37) + 32|0);
         $33 = $60;
         $61 = $33;
         $32 = $61;
         $62 = $32;
         $28 = $62;
         $63 = $28;
         $27 = $63;
         $2 = $4;
         $3 = -1;
         $64 = $2;
         $65 = $3;
         $0 = $64;
         $1 = $65;
         $66 = $0;
         HEAP32[$66>>2] = 0;
         $67 = HEAP32[$4>>2]|0;
         HEAP32[$29>>2] = $67;
         $5 = $29;
         HEAP32[$63>>2] = 0;
         $68 = (($63) + 4|0);
         $8 = $10;
         $9 = -1;
         $69 = $8;
         $70 = $9;
         $6 = $69;
         $7 = $70;
         $71 = $6;
         HEAP32[$71>>2] = 0;
         $72 = HEAP32[$10>>2]|0;
         HEAP32[$30>>2] = $72;
         $11 = $30;
         HEAP32[$68>>2] = 0;
         $73 = (($63) + 8|0);
         $14 = $16;
         $15 = -1;
         $74 = $14;
         $75 = $15;
         $12 = $74;
         $13 = $75;
         $76 = $12;
         HEAP32[$76>>2] = 0;
         $77 = HEAP32[$16>>2]|0;
         HEAP32[$31>>2] = $77;
         $17 = $31;
         $25 = $73;
         $26 = 0;
         $78 = $25;
         $79 = $26;
         $23 = $78;
         HEAP32[$24>>2] = $79;
         $80 = $23;
         $22 = $24;
         $81 = $22;
         $82 = HEAP32[$81>>2]|0;
         $20 = $80;
         HEAP32[$21>>2] = $82;
         $83 = $20;
         $19 = $83;
         $18 = $21;
         $84 = $18;
         $85 = HEAP32[$84>>2]|0;
         HEAP32[$83>>2] = $85;
         STACKTOP = sp;return;
        }
        $98 = ___cxa_find_matching_catch(-1,-1)|0;
        $99 = tempRet0;
        $35 = $98;
        $36 = $99;
        __THREW__ = 0;
        invoke_vi(542,($54|0));
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         break;
        }
       }
       __THREW__ = 0;
       invoke_vi(542,($51|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        break;
       }
      }
      __THREW__ = 0;
      invoke_vi(543,($48|0));
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(544,($45|0));
     $106 = __THREW__; __THREW__ = 0;
     $107 = $106&1;
     if ($107) {
      break;
     }
    }
    __THREW__ = 0;
    invoke_vi(545,($42|0));
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
   }
   __THREW__ = 0;
   invoke_vi(546,($39|0));
   $110 = __THREW__; __THREW__ = 0;
   $111 = $110&1;
   if (!($111)) {
    label = 29;
   }
  }
 } while(0);
 if ((label|0) == 29) {
  __THREW__ = 0;
  invoke_vi(547,($37|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if (!($113)) {
   $114 = $35;
   $115 = $36;
   ___resumeException($114|0);
   // unreachable;
  }
 }
 $116 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $117 = tempRet0;
 ___clang_call_terminate($116);
 // unreachable;
}
function __ZN6SolverC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (3464 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN2cl7ContextC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl7ContextC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl7ProgramC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6KernelC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl12CommandQueueC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6BufferC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6BufferD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl12CommandQueueD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6KernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl7ProgramD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl7ContextD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6SolverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolverD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(60,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN27LorenzAttractorOpenCLSolverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (2448 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 32|0);
 __THREW__ = 0;
 invoke_vi(548,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $29 = ___cxa_find_matching_catch(-1,-1)|0;
   $30 = tempRet0;
   $1 = $29;
   $2 = $30;
   $31 = (($3) + 28|0);
   __THREW__ = 0;
   invoke_vi(542,($31|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if (!($33)) {
    label = 14;
   }
  } else {
   $8 = (($3) + 28|0);
   __THREW__ = 0;
   invoke_vi(542,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $34 = ___cxa_find_matching_catch(-1,-1)|0;
    $35 = tempRet0;
    $1 = $34;
    $2 = $35;
    label = 14;
    break;
   }
   $11 = (($3) + 24|0);
   __THREW__ = 0;
   invoke_vi(542,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $36 = ___cxa_find_matching_catch(-1,-1)|0;
    $37 = tempRet0;
    $1 = $36;
    $2 = $37;
    label = 17;
    break;
   }
   $14 = (($3) + 20|0);
   __THREW__ = 0;
   invoke_vi(542,($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $41 = ___cxa_find_matching_catch(-1,-1)|0;
    $42 = tempRet0;
    $1 = $41;
    $2 = $42;
    label = 20;
    break;
   }
   $17 = (($3) + 16|0);
   __THREW__ = 0;
   invoke_vi(543,($17|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $46 = ___cxa_find_matching_catch(-1,-1)|0;
    $47 = tempRet0;
    $1 = $46;
    $2 = $47;
    label = 23;
    break;
   }
   $20 = (($3) + 12|0);
   __THREW__ = 0;
   invoke_vi(544,($20|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $51 = ___cxa_find_matching_catch(-1,-1)|0;
    $52 = tempRet0;
    $1 = $51;
    $2 = $52;
    label = 26;
    break;
   }
   $23 = (($3) + 8|0);
   __THREW__ = 0;
   invoke_vi(545,($23|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $56 = ___cxa_find_matching_catch(-1,-1)|0;
    $57 = tempRet0;
    $1 = $56;
    $2 = $57;
    label = 29;
    break;
   }
   $26 = (($3) + 4|0);
   __THREW__ = 0;
   invoke_vi(546,($26|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $61 = ___cxa_find_matching_catch(-1,-1)|0;
    $62 = tempRet0;
    $1 = $61;
    $2 = $62;
    label = 31;
    break;
   } else {
    __ZN6SolverD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $38 = (($3) + 24|0);
  __THREW__ = 0;
  invoke_vi(542,($38|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   label = 17;
  }
 }
 if ((label|0) == 17) {
  $43 = (($3) + 20|0);
  __THREW__ = 0;
  invoke_vi(542,($43|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if (!($45)) {
   label = 20;
  }
 }
 if ((label|0) == 20) {
  $48 = (($3) + 16|0);
  __THREW__ = 0;
  invoke_vi(543,($48|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if (!($50)) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $53 = (($3) + 12|0);
  __THREW__ = 0;
  invoke_vi(544,($53|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if (!($55)) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  $58 = (($3) + 8|0);
  __THREW__ = 0;
  invoke_vi(545,($58|0));
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if (!($60)) {
   label = 29;
  }
 }
 if ((label|0) == 29) {
  $63 = (($3) + 4|0);
  __THREW__ = 0;
  invoke_vi(546,($63|0));
  $64 = __THREW__; __THREW__ = 0;
  $65 = $64&1;
  if (!($65)) {
   label = 31;
  }
 }
 if ((label|0) == 31) {
  __THREW__ = 0;
  invoke_vi(547,($3|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if (!($67)) {
   $68 = $1;
   $69 = $2;
   ___resumeException($68|0);
   // unreachable;
  }
 }
 $70 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $71 = tempRet0;
 ___clang_call_terminate($70);
 // unreachable;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolver4initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $e = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $40 = sp + 152|0;
 $ss = sp + 248|0;
 $62 = sp + 396|0;
 $59 = $this;
 $63 = $59;
 __THREW__ = 0;
 invoke_vi(549,($63|0));
 $64 = __THREW__; __THREW__ = 0;
 $65 = $64&1;
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = ___cxa_find_matching_catch(-1,-1,2488|0)|0;
 $67 = tempRet0;
 $60 = $66;
 $61 = $67;
 $68 = $61;
 $69 = (_llvm_eh_typeid_for((2488|0))|0);
 $70 = ($68|0)==($69|0);
 if (!($70)) {
  $277 = $60;
  $278 = $61;
  ___resumeException($277|0);
  // unreachable;
 }
 $71 = $60;
 $72 = (___cxa_begin_catch(($71|0))|0);
 $e = $72;
 $55 = $ss;
 $56 = 24;
 $73 = $55;
 $74 = (($73) + 64|0);
 $54 = $74;
 $75 = $54;
 $53 = $75;
 $76 = $53;
 $77 = (6704 + 8|0);
 HEAP32[$76>>2] = $77;
 $78 = (6304 + 8|0);
 HEAP32[$75>>2] = $78;
 $79 = (656 + 12|0);
 HEAP32[$73>>2] = $79;
 $80 = (($73) + 64|0);
 $81 = (656 + 52|0);
 HEAP32[$80>>2] = $81;
 $82 = (($73) + 8|0);
 $83 = (656 + 32|0);
 HEAP32[$82>>2] = $83;
 $84 = (($73) + 12|0);
 $50 = $73;
 $85 = (720 + 4|0);
 $51 = $85;
 $52 = $84;
 $86 = $50;
 $87 = $51;
 $88 = (($87) + 4|0);
 $89 = $52;
 $47 = $86;
 $48 = $88;
 $49 = $89;
 $90 = $47;
 $91 = $48;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$90>>2] = $92;
 $93 = (($91) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$90>>2]|0;
 $96 = (($95) + -12|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($90) + ($97)|0);
 HEAP32[$98>>2] = $94;
 $99 = (($90) + 4|0);
 HEAP32[$99>>2] = 0;
 $100 = HEAP32[$90>>2]|0;
 $101 = (($100) + -12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($90) + ($102)|0);
 $104 = $49;
 $45 = $103;
 $46 = $104;
 $105 = $45;
 $106 = $46;
 __THREW__ = 0;
 invoke_vii(445,($105|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 L9: do {
  if ($108) {
   $197 = ___cxa_find_matching_catch(-1,-1)|0;
   $198 = tempRet0;
   $57 = $197;
   $58 = $198;
   label = 23;
  } else {
   $109 = (($105) + 72|0);
   HEAP32[$109>>2] = 0;
   $110 = (($105) + 76|0);
   HEAP32[$110>>2] = -1;
   $111 = (($86) + 8|0);
   $112 = (($87) + 12|0);
   $43 = $111;
   $44 = $112;
   $113 = $43;
   $114 = $44;
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$113>>2] = $115;
   $116 = (($114) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = HEAP32[$113>>2]|0;
   $119 = (($118) + -12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($113) + ($120)|0);
   HEAP32[$121>>2] = $117;
   $122 = HEAP32[$87>>2]|0;
   HEAP32[$86>>2] = $122;
   $123 = (($87) + 20|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = HEAP32[$86>>2]|0;
   $126 = (($125) + -12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($86) + ($127)|0);
   HEAP32[$128>>2] = $124;
   $129 = (($87) + 24|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($86) + 8|0);
   HEAP32[$131>>2] = $130;
   $132 = (656 + 12|0);
   HEAP32[$73>>2] = $132;
   $133 = (($73) + 64|0);
   $134 = (656 + 52|0);
   HEAP32[$133>>2] = $134;
   $135 = (($73) + 8|0);
   $136 = (656 + 32|0);
   HEAP32[$135>>2] = $136;
   $137 = (($73) + 12|0);
   $138 = $56;
   $41 = $137;
   $42 = $138;
   $139 = $41;
   $140 = $42;
   $36 = $139;
   $37 = $140;
   $141 = $36;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($141);
   $142 = (992 + 8|0);
   HEAP32[$141>>2] = $142;
   $143 = (($141) + 32|0);
   $35 = $143;
   $144 = $35;
   $34 = $144;
   $145 = $34;
   $33 = $145;
   $146 = $33;
   $32 = $146;
   $147 = $32;
   $31 = $147;
   $148 = $31;
   $30 = $148;
   $29 = $145;
   $149 = $29;
   $28 = $149;
   $150 = $28;
   $27 = $150;
   $151 = $27;
   $__a$i$i$i$i$i$i = $151;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $152 = $__i$i$i$i$i$i$i;
    $153 = ($152>>>0)<(3);
    if (!($153)) {
     break;
    }
    $154 = $__i$i$i$i$i$i$i;
    $155 = $__a$i$i$i$i$i$i;
    $156 = (($155) + ($154<<2)|0);
    HEAP32[$156>>2] = 0;
    $157 = $__i$i$i$i$i$i$i;
    $158 = (($157) + 1)|0;
    $__i$i$i$i$i$i$i = $158;
   }
   $159 = (($141) + 44|0);
   HEAP32[$159>>2] = 0;
   $160 = (($141) + 48|0);
   $161 = $37;
   HEAP32[$160>>2] = $161;
   $26 = $40;
   $162 = $26;
   $25 = $162;
   $163 = $25;
   $24 = $163;
   $164 = $24;
   $23 = $164;
   $165 = $23;
   $22 = $165;
   $166 = $22;
   $21 = $166;
   $20 = $163;
   $167 = $20;
   $19 = $167;
   $168 = $19;
   $18 = $168;
   $169 = $18;
   $__a$i$i$i1$i$i$i = $169;
   $__i$i$i$i2$i$i$i = 0;
   while(1) {
    $170 = $__i$i$i$i2$i$i$i;
    $171 = ($170>>>0)<(3);
    if (!($171)) {
     break;
    }
    $172 = $__i$i$i$i2$i$i$i;
    $173 = $__a$i$i$i1$i$i$i;
    $174 = (($173) + ($172<<2)|0);
    HEAP32[$174>>2] = 0;
    $175 = $__i$i$i$i2$i$i$i;
    $176 = (($175) + 1)|0;
    $__i$i$i$i2$i$i$i = $176;
   }
   __THREW__ = 0;
   invoke_vii(446,($141|0),($40|0));
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   do {
    if ($178) {
     $183 = ___cxa_find_matching_catch(-1,-1)|0;
     $184 = tempRet0;
     $38 = $183;
     $39 = $184;
     __THREW__ = 0;
     invoke_vi(415,($40|0));
     $185 = __THREW__; __THREW__ = 0;
     $186 = $185&1;
     if ($186) {
      $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $196 = tempRet0;
      ___clang_call_terminate($195);
      // unreachable;
     } else {
      break;
     }
    } else {
     __THREW__ = 0;
     invoke_vi(415,($40|0));
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     if ($180) {
      $181 = ___cxa_find_matching_catch(-1,-1)|0;
      $182 = tempRet0;
      $38 = $181;
      $39 = $182;
      break;
     }
     $206 = (($ss) + 8|0);
     __THREW__ = 0;
     $207 = (invoke_iii(449,($206|0),(2504|0))|0);
     $208 = __THREW__; __THREW__ = 0;
     $209 = $208&1;
     do {
      if ($209) {
       label = 46;
      } else {
       $210 = $e;
       $211 = HEAP32[$210>>2]|0;
       $212 = (($211) + 8|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = (FUNCTION_TABLE_ii[$213 & 1023]($210)|0);
       __THREW__ = 0;
       $215 = (invoke_iii(449,($207|0),($214|0))|0);
       $216 = __THREW__; __THREW__ = 0;
       $217 = $216&1;
       if ($217) {
        label = 46;
       } else {
        __THREW__ = 0;
        $218 = (invoke_iii(449,($215|0),(2520|0))|0);
        $219 = __THREW__; __THREW__ = 0;
        $220 = $219&1;
        if ($220) {
         label = 46;
        } else {
         $221 = $e;
         __THREW__ = 0;
         $222 = (invoke_ii(550,($221|0))|0);
         $223 = __THREW__; __THREW__ = 0;
         $224 = $223&1;
         if ($224) {
          label = 46;
         } else {
          __THREW__ = 0;
          $225 = (invoke_iii(450,($218|0),($222|0))|0);
          $226 = __THREW__; __THREW__ = 0;
          $227 = $226&1;
          if ($227) {
           label = 46;
          } else {
           $16 = $225;
           $17 = 451;
           $228 = $16;
           $229 = $17;
           __THREW__ = 0;
           (invoke_ii($229|0,($228|0))|0);
           $230 = __THREW__; __THREW__ = 0;
           $231 = $230&1;
           if ($231) {
            label = 46;
           } else {
            $15 = $ss;
            $232 = $15;
            $233 = (($232) + 12|0);
            __THREW__ = 0;
            invoke_vii(452,($62|0),($233|0));
            $234 = __THREW__; __THREW__ = 0;
            $235 = $234&1;
            if ($235) {
             label = 46;
            } else {
             $14 = $62;
             $236 = $14;
             $13 = $236;
             $237 = $13;
             $12 = $237;
             $238 = $12;
             $11 = $238;
             $239 = $11;
             $10 = $239;
             $240 = $10;
             $9 = $240;
             $241 = $9;
             $242 = HEAP8[$241>>0]|0;
             $243 = $242&255;
             $244 = $243 & 1;
             $245 = ($244|0)!=(0);
             if ($245) {
              $3 = $238;
              $246 = $3;
              $2 = $246;
              $247 = $2;
              $1 = $247;
              $248 = $1;
              $249 = (($248) + 8|0);
              $250 = HEAP32[$249>>2]|0;
              $257 = $250;
             } else {
              $8 = $238;
              $251 = $8;
              $7 = $251;
              $252 = $7;
              $6 = $252;
              $253 = $6;
              $254 = (($253) + 1|0);
              $5 = $254;
              $255 = $5;
              $4 = $255;
              $256 = $4;
              $257 = $256;
             }
             $0 = $257;
             $258 = $0;
             __THREW__ = 0;
             invoke_viii(419,($258|0),(2528|0),55);
             $259 = __THREW__; __THREW__ = 0;
             $260 = $259&1;
             if ($260) {
              $269 = ___cxa_find_matching_catch(-1,-1)|0;
              $270 = tempRet0;
              $60 = $269;
              $61 = $270;
              __THREW__ = 0;
              invoke_vi(415,($62|0));
              $271 = __THREW__; __THREW__ = 0;
              $272 = $271&1;
              if ($272) {
               $279 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
               $280 = tempRet0;
               ___clang_call_terminate($279);
               // unreachable;
              } else {
               break;
              }
             }
             __THREW__ = 0;
             invoke_vi(415,($62|0));
             $261 = __THREW__; __THREW__ = 0;
             $262 = $261&1;
             if ($262) {
              label = 46;
             } else {
              __THREW__ = 0;
              invoke_vi(3,($ss|0));
              $263 = __THREW__; __THREW__ = 0;
              $264 = $263&1;
              if ($264) {
               $265 = ___cxa_find_matching_catch(-1,-1)|0;
               $266 = tempRet0;
               $eh$lpad$body$index2Z2D = $266;$eh$lpad$body$indexZ2D = $265;
               label = 45;
               break L9;
              }
              ___cxa_end_catch();
              STACKTOP = sp;return;
             }
            }
           }
          }
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 46) {
      $267 = ___cxa_find_matching_catch(-1,-1)|0;
      $268 = tempRet0;
      $60 = $267;
      $61 = $268;
     }
     __THREW__ = 0;
     invoke_vi(3,($ss|0));
     $273 = __THREW__; __THREW__ = 0;
     $274 = $273&1;
     if ($274) {
      $279 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $280 = tempRet0;
      ___clang_call_terminate($279);
      // unreachable;
     } else {
      break L9;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(415,($143|0));
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $196 = tempRet0;
    ___clang_call_terminate($195);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(447,($141|0));
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if ($190) {
    $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $196 = tempRet0;
    ___clang_call_terminate($195);
    // unreachable;
   }
   $191 = $38;
   $192 = $39;
   $57 = $191;
   $58 = $192;
   __THREW__ = 0;
   $193 = __THREW__; __THREW__ = 0;
   $194 = $193&1;
   if ($194) {
    $204 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $205 = tempRet0;
    ___clang_call_terminate($204);
    // unreachable;
   } else {
    label = 23;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $199 = (($73) + 64|0);
   __THREW__ = 0;
   invoke_vi(448,($199|0));
   $200 = __THREW__; __THREW__ = 0;
   $201 = $200&1;
   if ($201) {
    $204 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $205 = tempRet0;
    ___clang_call_terminate($204);
    // unreachable;
   } else {
    $202 = $57;
    $203 = $58;
    $eh$lpad$body$index2Z2D = $203;$eh$lpad$body$indexZ2D = $202;
    label = 45;
    break;
   }
  }
 } while(0);
 if ((label|0) == 45) {
  $60 = $eh$lpad$body$indexZ2D;
  $61 = $eh$lpad$body$index2Z2D;
 }
 __THREW__ = 0;
 invoke_v(463);
 $275 = __THREW__; __THREW__ = 0;
 $276 = $275&1;
 if ($276) {
  $279 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $280 = tempRet0;
  ___clang_call_terminate($279);
  // unreachable;
 }
 $277 = $60;
 $278 = $61;
 ___resumeException($277|0);
 // unreachable;
}
function __ZN27LorenzAttractorOpenCLSolver6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__a$i$i$i = 0;
 var $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $charSrc = 0, $context_properties = 0, $devices = 0, $e = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body6$index7Z2D = 0, $eh$lpad$body6$indexZ2D = 0, $file = 0, $gpuDevice = 0, $kernelFilename = 0, $nParticles = 0, $platforms = 0, $sources = 0, $ss = 0;
 var $strSrc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1808|0;
 $5 = sp + 640|0;
 $20 = sp + 92|0;
 $35 = sp + 148|0;
 $123 = sp + 496|0;
 $124 = sp + 500|0;
 $169 = sp + 692|0;
 $254 = sp + 1044|0;
 $260 = sp + 1068|0;
 $266 = sp + 1092|0;
 $271 = sp + 1112|0;
 $274 = sp + 1124|0;
 $279 = sp + 1144|0;
 $280 = sp + 1148|0;
 $281 = sp + 1152|0;
 $platforms = sp + 1168|0;
 $context_properties = sp + 1188|0;
 $287 = sp + 1220|0;
 $288 = sp + 1232|0;
 $devices = sp + 1236|0;
 $kernelFilename = sp + 1248|0;
 $289 = sp + 1260|0;
 $290 = sp + 1272|0;
 $file = sp + 1284|0;
 $ss = sp + 1472|0;
 $strSrc = sp + 1608|0;
 $sources = sp + 1624|0;
 $291 = sp + 1640|0;
 $292 = sp + 1648|0;
 $293 = sp + 1656|0;
 $294 = sp + 1664|0;
 $295 = sp + 1676|0;
 $296 = sp + 1680|0;
 $297 = sp + 52|0;
 $298 = sp;
 $299 = sp + 48|0;
 $300 = sp + 1720|0;
 $301 = sp + 64|0;
 $302 = sp + 1708|0;
 $303 = sp + 44|0;
 $304 = sp + 1732|0;
 $305 = sp + 628|0;
 $306 = sp + 12|0;
 $307 = sp + 32|0;
 $308 = sp + 632|0;
 $309 = sp + 1748|0;
 $310 = sp + 16|0;
 $311 = sp + 1704|0;
 $284 = $this;
 $312 = $284;
 $283 = $platforms;
 $313 = $283;
 $282 = $313;
 $314 = $282;
 $278 = $314;
 $315 = $278;
 $277 = $315;
 $252 = $254;
 $253 = -1;
 $316 = $252;
 $317 = $253;
 $250 = $316;
 $251 = $317;
 $318 = $250;
 HEAP32[$318>>2] = 0;
 $319 = HEAP32[$254>>2]|0;
 HEAP32[$279>>2] = $319;
 $255 = $279;
 HEAP32[$315>>2] = 0;
 $320 = (($315) + 4|0);
 $258 = $260;
 $259 = -1;
 $321 = $258;
 $322 = $259;
 $256 = $321;
 $257 = $322;
 $323 = $256;
 HEAP32[$323>>2] = 0;
 $324 = HEAP32[$260>>2]|0;
 HEAP32[$280>>2] = $324;
 $261 = $280;
 HEAP32[$320>>2] = 0;
 $325 = (($315) + 8|0);
 $264 = $266;
 $265 = -1;
 $326 = $264;
 $327 = $265;
 $262 = $326;
 $263 = $327;
 $328 = $262;
 HEAP32[$328>>2] = 0;
 $329 = HEAP32[$266>>2]|0;
 HEAP32[$281>>2] = $329;
 $267 = $281;
 $275 = $325;
 $276 = 0;
 $330 = $275;
 $331 = $276;
 $273 = $330;
 HEAP32[$274>>2] = $331;
 $332 = $273;
 $272 = $274;
 $333 = $272;
 $334 = HEAP32[$333>>2]|0;
 $270 = $332;
 HEAP32[$271>>2] = $334;
 $335 = $270;
 $269 = $335;
 $268 = $271;
 $336 = $268;
 $337 = HEAP32[$336>>2]|0;
 HEAP32[$335>>2] = $337;
 __THREW__ = 0;
 (invoke_ii(551,($platforms|0))|0);
 $338 = __THREW__; __THREW__ = 0;
 $339 = $338&1;
 L1: do {
  if ($339) {
   label = 5;
  } else {
   $249 = $platforms;
   $340 = $249;
   $341 = HEAP32[$340>>2]|0;
   $342 = (($340) + 4|0);
   $343 = HEAP32[$342>>2]|0;
   $344 = ($341|0)==($343|0);
   if ($344) {
    __THREW__ = 0;
    invoke_viii(419,(2568|0),(2528|0),65);
    $345 = __THREW__; __THREW__ = 0;
    $346 = $345&1;
    if ($346) {
     label = 5;
     break;
    }
   }
   HEAP32[$context_properties>>2] = 8200;
   $349 = (($context_properties) + 4|0);
   HEAP32[$349>>2] = 0;
   $350 = (($349) + 4|0);
   HEAP32[$350>>2] = 8202;
   $351 = (($350) + 4|0);
   HEAP32[$351>>2] = 0;
   $352 = (($351) + 4|0);
   HEAP32[$352>>2] = 4228;
   $353 = (($352) + 4|0);
   $247 = $platforms;
   $248 = 0;
   $354 = $247;
   $355 = $248;
   $356 = HEAP32[$354>>2]|0;
   $357 = (($356) + ($355<<2)|0);
   __THREW__ = 0;
   $358 = (invoke_ii(552,($357|0))|0);
   $359 = __THREW__; __THREW__ = 0;
   $360 = $359&1;
   if ($360) {
    label = 5;
   } else {
    $361 = HEAP32[$358>>2]|0;
    $362 = $361;
    HEAP32[$353>>2] = $362;
    $363 = (($353) + 4|0);
    HEAP32[$363>>2] = 0;
    __THREW__ = 0;
    $364 = (invoke_i(429)|0);
    $365 = __THREW__; __THREW__ = 0;
    $366 = $365&1;
    if ($366) {
     label = 5;
    } else {
     $245 = $287;
     $246 = 2600;
     $367 = $245;
     $368 = $246;
     $243 = $367;
     $244 = $368;
     $369 = $243;
     $242 = $369;
     $370 = $242;
     $241 = $370;
     $371 = $241;
     $240 = $371;
     $372 = $240;
     $239 = $372;
     $373 = $244;
     $374 = $244;
     $238 = $374;
     $375 = $238;
     __THREW__ = 0;
     $376 = (invoke_ii(430,($375|0))|0);
     $377 = __THREW__; __THREW__ = 0;
     $378 = $377&1;
     if ($378) {
      label = 5;
     } else {
      __THREW__ = 0;
      invoke_viii(431,($369|0),($373|0),($376|0));
      $379 = __THREW__; __THREW__ = 0;
      $380 = $379&1;
      if ($380) {
       label = 5;
      } else {
       __THREW__ = 0;
       $381 = (invoke_iiii(428,($364|0),($287|0),0)|0);
       $382 = __THREW__; __THREW__ = 0;
       $383 = $382&1;
       if ($383) {
        $408 = ___cxa_find_matching_catch(-1,-1)|0;
        $409 = tempRet0;
        $285 = $408;
        $286 = $409;
        __THREW__ = 0;
        invoke_vi(415,($287|0));
        $410 = __THREW__; __THREW__ = 0;
        $411 = $410&1;
        if ($411) {
         $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $1198 = tempRet0;
         ___clang_call_terminate($1197);
         // unreachable;
        } else {
         break;
        }
       }
       __THREW__ = 0;
       invoke_vi(415,($287|0));
       $384 = __THREW__; __THREW__ = 0;
       $385 = $384&1;
       if ($385) {
        label = 5;
       } else {
        $gpuDevice = $381;
        $386 = (($312) + 4|0);
        $387 = $gpuDevice;
        $388 = ($387|0)==(1);
        $389 = $388 ? 4 : 2;
        $390 = ($389|0)<(0);
        $391 = $390 << 31 >> 31;
        __THREW__ = 0;
        invoke_viiiiiii(553,($288|0),($389|0),($391|0),($context_properties|0),(0|0),(0|0),(0|0));
        $392 = __THREW__; __THREW__ = 0;
        $393 = $392&1;
        if ($393) {
         label = 5;
        } else {
         __THREW__ = 0;
         (invoke_iii(554,($386|0),($288|0))|0);
         $394 = __THREW__; __THREW__ = 0;
         $395 = $394&1;
         if ($395) {
          $412 = ___cxa_find_matching_catch(-1,-1)|0;
          $413 = tempRet0;
          $285 = $412;
          $286 = $413;
          __THREW__ = 0;
          invoke_vi(546,($288|0));
          $414 = __THREW__; __THREW__ = 0;
          $415 = $414&1;
          if ($415) {
           $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
           $1198 = tempRet0;
           ___clang_call_terminate($1197);
           // unreachable;
          } else {
           break;
          }
         }
         __THREW__ = 0;
         invoke_vi(546,($288|0));
         $396 = __THREW__; __THREW__ = 0;
         $397 = $396&1;
         if ($397) {
          label = 5;
         } else {
          $398 = (($312) + 4|0);
          __THREW__ = 0;
          invoke_viii(555,($devices|0),($398|0),(0|0));
          $399 = __THREW__; __THREW__ = 0;
          $400 = $399&1;
          if ($400) {
           label = 5;
          } else {
           $237 = $devices;
           $401 = $237;
           $402 = HEAP32[$401>>2]|0;
           $403 = (($401) + 4|0);
           $404 = HEAP32[$403>>2]|0;
           $405 = ($402|0)==($404|0);
           if ($405) {
            __THREW__ = 0;
            invoke_viii(419,(2616|0),(2528|0),103);
            $406 = __THREW__; __THREW__ = 0;
            $407 = $406&1;
            if ($407) {
             label = 25;
            } else {
             label = 26;
            }
           } else {
            label = 26;
           }
           L32: do {
            if ((label|0) == 26) {
             __THREW__ = 0;
             $418 = (invoke_i(429)|0);
             $419 = __THREW__; __THREW__ = 0;
             $420 = $419&1;
             if ($420) {
              label = 25;
             } else {
              $235 = $289;
              $236 = 2640;
              $421 = $235;
              $422 = $236;
              $233 = $421;
              $234 = $422;
              $423 = $233;
              $232 = $423;
              $424 = $232;
              $231 = $424;
              $425 = $231;
              $230 = $425;
              $426 = $230;
              $229 = $426;
              $427 = $234;
              $428 = $234;
              $228 = $428;
              $429 = $228;
              __THREW__ = 0;
              $430 = (invoke_ii(430,($429|0))|0);
              $431 = __THREW__; __THREW__ = 0;
              $432 = $431&1;
              if ($432) {
               label = 25;
              } else {
               __THREW__ = 0;
               invoke_viii(431,($423|0),($427|0),($430|0));
               $433 = __THREW__; __THREW__ = 0;
               $434 = $433&1;
               if ($434) {
                label = 25;
               } else {
                $227 = $290;
                $435 = $227;
                $226 = $435;
                $436 = $226;
                $225 = $436;
                $437 = $225;
                $224 = $437;
                $438 = $224;
                $223 = $438;
                $439 = $223;
                $222 = $439;
                $221 = $436;
                $440 = $221;
                $220 = $440;
                $441 = $220;
                $219 = $441;
                $442 = $219;
                $__a$i$i$i = $442;
                $__i$i$i$i = 0;
                while(1) {
                 $443 = $__i$i$i$i;
                 $444 = ($443>>>0)<(3);
                 if (!($444)) {
                  break;
                 }
                 $445 = $__i$i$i$i;
                 $446 = $__a$i$i$i;
                 $447 = (($446) + ($445<<2)|0);
                 HEAP32[$447>>2] = 0;
                 $448 = $__i$i$i$i;
                 $449 = (($448) + 1)|0;
                 $__i$i$i$i = $449;
                }
                __THREW__ = 0;
                invoke_viiii(414,($kernelFilename|0),($418|0),($289|0),($290|0));
                $450 = __THREW__; __THREW__ = 0;
                $451 = $450&1;
                do {
                 if ($451) {
                  $568 = ___cxa_find_matching_catch(-1,-1)|0;
                  $569 = tempRet0;
                  $285 = $568;
                  $286 = $569;
                  __THREW__ = 0;
                  invoke_vi(415,($290|0));
                  $570 = __THREW__; __THREW__ = 0;
                  $571 = $570&1;
                  if ($571) {
                   $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                   $1198 = tempRet0;
                   ___clang_call_terminate($1197);
                   // unreachable;
                  } else {
                   break;
                  }
                 } else {
                  __THREW__ = 0;
                  invoke_vi(415,($290|0));
                  $452 = __THREW__; __THREW__ = 0;
                  $453 = $452&1;
                  if ($453) {
                   $566 = ___cxa_find_matching_catch(-1,-1)|0;
                   $567 = tempRet0;
                   $285 = $566;
                   $286 = $567;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vi(415,($289|0));
                  $454 = __THREW__; __THREW__ = 0;
                  $455 = $454&1;
                  if ($455) {
                   label = 25;
                   break L32;
                  }
                  $214 = $file;
                  $215 = $kernelFilename;
                  $216 = 8;
                  $456 = $214;
                  $457 = (($456) + 108|0);
                  $213 = $457;
                  $458 = $213;
                  $212 = $458;
                  $459 = $212;
                  $460 = (6704 + 8|0);
                  HEAP32[$459>>2] = $460;
                  $461 = (6304 + 8|0);
                  HEAP32[$458>>2] = $461;
                  $462 = (1384 + 12|0);
                  HEAP32[$456>>2] = $462;
                  $463 = (($456) + 108|0);
                  $464 = (1384 + 32|0);
                  HEAP32[$463>>2] = $464;
                  $465 = (($456) + 8|0);
                  $209 = $456;
                  $466 = (1424 + 4|0);
                  $210 = $466;
                  $211 = $465;
                  $467 = $209;
                  $468 = $210;
                  $469 = HEAP32[$468>>2]|0;
                  HEAP32[$467>>2] = $469;
                  $470 = (($468) + 4|0);
                  $471 = HEAP32[$470>>2]|0;
                  $472 = HEAP32[$467>>2]|0;
                  $473 = (($472) + -12|0);
                  $474 = HEAP32[$473>>2]|0;
                  $475 = (($467) + ($474)|0);
                  HEAP32[$475>>2] = $471;
                  $476 = (($467) + 4|0);
                  HEAP32[$476>>2] = 0;
                  $477 = HEAP32[$467>>2]|0;
                  $478 = (($477) + -12|0);
                  $479 = HEAP32[$478>>2]|0;
                  $480 = (($467) + ($479)|0);
                  $481 = $211;
                  $207 = $480;
                  $208 = $481;
                  $482 = $207;
                  $483 = $208;
                  __THREW__ = 0;
                  invoke_vii(445,($482|0),($483|0));
                  $484 = __THREW__; __THREW__ = 0;
                  $485 = $484&1;
                  L49: do {
                   if ($485) {
                    $541 = ___cxa_find_matching_catch(-1,-1)|0;
                    $542 = tempRet0;
                    $217 = $541;
                    $218 = $542;
                    label = 52;
                   } else {
                    $486 = (($482) + 72|0);
                    HEAP32[$486>>2] = 0;
                    $487 = (($482) + 76|0);
                    HEAP32[$487>>2] = -1;
                    $488 = (1384 + 12|0);
                    HEAP32[$456>>2] = $488;
                    $489 = (($456) + 108|0);
                    $490 = (1384 + 32|0);
                    HEAP32[$489>>2] = $490;
                    $491 = (($456) + 8|0);
                    __THREW__ = 0;
                    invoke_vi(476,($491|0));
                    $492 = __THREW__; __THREW__ = 0;
                    $493 = $492&1;
                    do {
                     if ($493) {
                      $543 = ___cxa_find_matching_catch(-1,-1)|0;
                      $544 = tempRet0;
                      $217 = $543;
                      $218 = $544;
                     } else {
                      $494 = (($456) + 8|0);
                      $495 = $215;
                      $496 = $216;
                      $497 = $496 | 8;
                      $204 = $494;
                      $205 = $495;
                      $206 = $497;
                      $498 = $204;
                      $499 = $205;
                      $203 = $499;
                      $500 = $203;
                      $202 = $500;
                      $501 = $202;
                      $201 = $501;
                      $502 = $201;
                      $200 = $502;
                      $503 = $200;
                      $199 = $503;
                      $504 = $199;
                      $198 = $504;
                      $505 = $198;
                      $506 = HEAP8[$505>>0]|0;
                      $507 = $506&255;
                      $508 = $507 & 1;
                      $509 = ($508|0)!=(0);
                      if ($509) {
                       $192 = $502;
                       $510 = $192;
                       $191 = $510;
                       $511 = $191;
                       $190 = $511;
                       $512 = $190;
                       $513 = (($512) + 8|0);
                       $514 = HEAP32[$513>>2]|0;
                       $521 = $514;
                      } else {
                       $197 = $502;
                       $515 = $197;
                       $196 = $515;
                       $516 = $196;
                       $195 = $516;
                       $517 = $195;
                       $518 = (($517) + 1|0);
                       $194 = $518;
                       $519 = $194;
                       $193 = $519;
                       $520 = $193;
                       $521 = $520;
                      }
                      $189 = $521;
                      $522 = $189;
                      $523 = $206;
                      __THREW__ = 0;
                      $524 = (invoke_iiii(477,($498|0),($522|0),($523|0))|0);
                      $525 = __THREW__; __THREW__ = 0;
                      $526 = $525&1;
                      do {
                       if (!($526)) {
                        $527 = ($524|0)==(0|0);
                        if ($527) {
                         $528 = HEAP32[$456>>2]|0;
                         $529 = (($528) + -12|0);
                         $530 = HEAP32[$529>>2]|0;
                         $531 = (($456) + ($530)|0);
                         $187 = $531;
                         $188 = 4;
                         $532 = $187;
                         $533 = $188;
                         $185 = $532;
                         $186 = $533;
                         $534 = $185;
                         $535 = (($534) + 16|0);
                         $536 = HEAP32[$535>>2]|0;
                         $537 = $186;
                         $538 = $536 | $537;
                         __THREW__ = 0;
                         invoke_vii(460,($534|0),($538|0));
                         $539 = __THREW__; __THREW__ = 0;
                         $540 = $539&1;
                         if ($540) {
                          break;
                         }
                        }
                        $184 = $file;
                        $558 = $184;
                        $559 = (($558) + 8|0);
                        $183 = $559;
                        $560 = $183;
                        $561 = (($560) + 64|0);
                        $562 = HEAP32[$561>>2]|0;
                        $563 = ($562|0)!=(0|0);
                        do {
                         if ($563) {
                          label = 69;
                         } else {
                          __THREW__ = 0;
                          invoke_viii(419,(2656|0),(2528|0),111);
                          $564 = __THREW__; __THREW__ = 0;
                          $565 = $564&1;
                          if ($565) {
                           label = 67;
                           break;
                          }
                          label = 69;
                         }
                        } while(0);
                        L68: do {
                         if ((label|0) == 69) {
                          $179 = $ss;
                          $180 = 16;
                          $578 = $179;
                          $579 = (($578) + 56|0);
                          $178 = $579;
                          $580 = $178;
                          $177 = $580;
                          $581 = $177;
                          $582 = (6704 + 8|0);
                          HEAP32[$581>>2] = $582;
                          $583 = (6304 + 8|0);
                          HEAP32[$580>>2] = $583;
                          $584 = (2952 + 12|0);
                          HEAP32[$578>>2] = $584;
                          $585 = (($578) + 56|0);
                          $586 = (2952 + 32|0);
                          HEAP32[$585>>2] = $586;
                          $587 = (($578) + 4|0);
                          $174 = $578;
                          $588 = (2992 + 4|0);
                          $175 = $588;
                          $176 = $587;
                          $589 = $174;
                          $590 = $175;
                          $591 = HEAP32[$590>>2]|0;
                          HEAP32[$589>>2] = $591;
                          $592 = (($590) + 4|0);
                          $593 = HEAP32[$592>>2]|0;
                          $594 = HEAP32[$589>>2]|0;
                          $595 = (($594) + -12|0);
                          $596 = HEAP32[$595>>2]|0;
                          $597 = (($589) + ($596)|0);
                          HEAP32[$597>>2] = $593;
                          $598 = HEAP32[$589>>2]|0;
                          $599 = (($598) + -12|0);
                          $600 = HEAP32[$599>>2]|0;
                          $601 = (($589) + ($600)|0);
                          $602 = $176;
                          $172 = $601;
                          $173 = $602;
                          $603 = $172;
                          $604 = $173;
                          __THREW__ = 0;
                          invoke_vii(445,($603|0),($604|0));
                          $605 = __THREW__; __THREW__ = 0;
                          $606 = $605&1;
                          do {
                           if ($606) {
                            $673 = ___cxa_find_matching_catch(-1,-1)|0;
                            $674 = tempRet0;
                            $181 = $673;
                            $182 = $674;
                           } else {
                            $607 = (($603) + 72|0);
                            HEAP32[$607>>2] = 0;
                            $608 = (($603) + 76|0);
                            HEAP32[$608>>2] = -1;
                            $609 = (2952 + 12|0);
                            HEAP32[$578>>2] = $609;
                            $610 = (($578) + 56|0);
                            $611 = (2952 + 32|0);
                            HEAP32[$610>>2] = $611;
                            $612 = (($578) + 4|0);
                            $613 = $180;
                            $614 = $613 | 16;
                            $170 = $612;
                            $171 = $614;
                            $615 = $170;
                            $616 = $171;
                            $165 = $615;
                            $166 = $616;
                            $617 = $165;
                            __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($617);
                            $618 = (992 + 8|0);
                            HEAP32[$617>>2] = $618;
                            $619 = (($617) + 32|0);
                            $164 = $619;
                            $620 = $164;
                            $163 = $620;
                            $621 = $163;
                            $162 = $621;
                            $622 = $162;
                            $161 = $622;
                            $623 = $161;
                            $160 = $623;
                            $624 = $160;
                            $159 = $624;
                            $158 = $621;
                            $625 = $158;
                            $157 = $625;
                            $626 = $157;
                            $156 = $626;
                            $627 = $156;
                            $__a$i$i$i$i$i$i = $627;
                            $__i$i$i$i$i$i$i = 0;
                            while(1) {
                             $628 = $__i$i$i$i$i$i$i;
                             $629 = ($628>>>0)<(3);
                             if (!($629)) {
                              break;
                             }
                             $630 = $__i$i$i$i$i$i$i;
                             $631 = $__a$i$i$i$i$i$i;
                             $632 = (($631) + ($630<<2)|0);
                             HEAP32[$632>>2] = 0;
                             $633 = $__i$i$i$i$i$i$i;
                             $634 = (($633) + 1)|0;
                             $__i$i$i$i$i$i$i = $634;
                            }
                            $635 = (($617) + 44|0);
                            HEAP32[$635>>2] = 0;
                            $636 = (($617) + 48|0);
                            $637 = $166;
                            HEAP32[$636>>2] = $637;
                            $155 = $169;
                            $638 = $155;
                            $154 = $638;
                            $639 = $154;
                            $153 = $639;
                            $640 = $153;
                            $152 = $640;
                            $641 = $152;
                            $151 = $641;
                            $642 = $151;
                            $150 = $642;
                            $149 = $639;
                            $643 = $149;
                            $148 = $643;
                            $644 = $148;
                            $147 = $644;
                            $645 = $147;
                            $__a$i$i$i1$i$i$i = $645;
                            $__i$i$i$i2$i$i$i = 0;
                            while(1) {
                             $646 = $__i$i$i$i2$i$i$i;
                             $647 = ($646>>>0)<(3);
                             if (!($647)) {
                              break;
                             }
                             $648 = $__i$i$i$i2$i$i$i;
                             $649 = $__a$i$i$i1$i$i$i;
                             $650 = (($649) + ($648<<2)|0);
                             HEAP32[$650>>2] = 0;
                             $651 = $__i$i$i$i2$i$i$i;
                             $652 = (($651) + 1)|0;
                             $__i$i$i$i2$i$i$i = $652;
                            }
                            __THREW__ = 0;
                            invoke_vii(446,($617|0),($169|0));
                            $653 = __THREW__; __THREW__ = 0;
                            $654 = $653&1;
                            do {
                             if ($654) {
                              $659 = ___cxa_find_matching_catch(-1,-1)|0;
                              $660 = tempRet0;
                              $167 = $659;
                              $168 = $660;
                              __THREW__ = 0;
                              invoke_vi(415,($169|0));
                              $661 = __THREW__; __THREW__ = 0;
                              $662 = $661&1;
                              if ($662) {
                               $671 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                               $672 = tempRet0;
                               ___clang_call_terminate($671);
                               // unreachable;
                              } else {
                               break;
                              }
                             } else {
                              __THREW__ = 0;
                              invoke_vi(415,($169|0));
                              $655 = __THREW__; __THREW__ = 0;
                              $656 = $655&1;
                              if ($656) {
                               $657 = ___cxa_find_matching_catch(-1,-1)|0;
                               $658 = tempRet0;
                               $167 = $657;
                               $168 = $658;
                               break;
                              }
                              $146 = $file;
                              $682 = $146;
                              $683 = (($682) + 8|0);
                              __THREW__ = 0;
                              (invoke_iii(480,($ss|0),($683|0))|0);
                              $684 = __THREW__; __THREW__ = 0;
                              $685 = $684&1;
                              L87: do {
                               if ($685) {
                                label = 111;
                               } else {
                                $145 = $file;
                                $686 = $145;
                                $687 = (($686) + 8|0);
                                __THREW__ = 0;
                                $688 = (invoke_ii(481,($687|0))|0);
                                $689 = __THREW__; __THREW__ = 0;
                                $690 = $689&1;
                                if ($690) {
                                 label = 111;
                                 break;
                                }
                                $691 = ($688|0)==(0|0);
                                if ($691) {
                                 $692 = HEAP32[$686>>2]|0;
                                 $693 = (($692) + -12|0);
                                 $694 = HEAP32[$693>>2]|0;
                                 $695 = (($686) + ($694)|0);
                                 $143 = $695;
                                 $144 = 4;
                                 $696 = $143;
                                 $697 = $144;
                                 $141 = $696;
                                 $142 = $697;
                                 $698 = $141;
                                 $699 = (($698) + 16|0);
                                 $700 = HEAP32[$699>>2]|0;
                                 $701 = $142;
                                 $702 = $700 | $701;
                                 __THREW__ = 0;
                                 invoke_vii(460,($698|0),($702|0));
                                 $703 = __THREW__; __THREW__ = 0;
                                 $704 = $703&1;
                                 if ($704) {
                                  label = 111;
                                  break;
                                 }
                                }
                                $140 = $ss;
                                $705 = $140;
                                $706 = (($705) + 4|0);
                                __THREW__ = 0;
                                invoke_vii(452,($strSrc|0),($706|0));
                                $707 = __THREW__; __THREW__ = 0;
                                $708 = $707&1;
                                if ($708) {
                                 label = 111;
                                 break;
                                }
                                $139 = $strSrc;
                                $709 = $139;
                                $138 = $709;
                                $710 = $138;
                                $137 = $710;
                                $711 = $137;
                                $136 = $711;
                                $712 = $136;
                                $135 = $712;
                                $713 = $135;
                                $134 = $713;
                                $714 = $134;
                                $715 = HEAP8[$714>>0]|0;
                                $716 = $715&255;
                                $717 = $716 & 1;
                                $718 = ($717|0)!=(0);
                                if ($718) {
                                 $128 = $711;
                                 $719 = $128;
                                 $127 = $719;
                                 $720 = $127;
                                 $126 = $720;
                                 $721 = $126;
                                 $722 = (($721) + 8|0);
                                 $723 = HEAP32[$722>>2]|0;
                                 $730 = $723;
                                } else {
                                 $133 = $711;
                                 $724 = $133;
                                 $132 = $724;
                                 $725 = $132;
                                 $131 = $725;
                                 $726 = $131;
                                 $727 = (($726) + 1|0);
                                 $130 = $727;
                                 $728 = $130;
                                 $129 = $728;
                                 $729 = $129;
                                 $730 = $729;
                                }
                                $125 = $730;
                                $731 = $125;
                                $charSrc = $731;
                                $732 = $charSrc;
                                HEAP32[$123>>2] = $732;
                                HEAP32[$124>>2] = 0;
                                $120 = $292;
                                $121 = $123;
                                $122 = $124;
                                $733 = $120;
                                $734 = $121;
                                $735 = $122;
                                $117 = $733;
                                $118 = $734;
                                $119 = $735;
                                $736 = $117;
                                $737 = $118;
                                $738 = HEAP32[$737>>2]|0;
                                HEAP32[$736>>2] = $738;
                                $739 = (($736) + 4|0);
                                $740 = $119;
                                $741 = HEAP32[$740>>2]|0;
                                HEAP32[$739>>2] = $741;
                                $115 = $291;
                                $116 = $292;
                                $742 = $115;
                                $743 = $116;
                                $113 = $742;
                                $114 = $743;
                                $744 = $113;
                                $745 = $114;
                                $746 = HEAP32[$745>>2]|0;
                                HEAP32[$744>>2] = $746;
                                $747 = (($744) + 4|0);
                                $748 = $114;
                                $749 = (($748) + 4|0);
                                $750 = HEAP32[$749>>2]|0;
                                HEAP32[$747>>2] = $750;
                                __THREW__ = 0;
                                invoke_viii(556,($sources|0),1,($291|0));
                                $751 = __THREW__; __THREW__ = 0;
                                $752 = $751&1;
                                L103: do {
                                 if ($752) {
                                  label = 112;
                                 } else {
                                  $753 = (($312) + 8|0);
                                  $754 = (($312) + 4|0);
                                  __THREW__ = 0;
                                  invoke_viiii(557,($293|0),($754|0),($sources|0),(0|0));
                                  $755 = __THREW__; __THREW__ = 0;
                                  $756 = $755&1;
                                  L105: do {
                                   if ($756) {
                                    label = 113;
                                   } else {
                                    __THREW__ = 0;
                                    (invoke_iii(558,($753|0),($293|0))|0);
                                    $757 = __THREW__; __THREW__ = 0;
                                    $758 = $757&1;
                                    if ($758) {
                                     $770 = ___cxa_find_matching_catch(-1,-1)|0;
                                     $771 = tempRet0;
                                     $285 = $770;
                                     $286 = $771;
                                     __THREW__ = 0;
                                     invoke_vi(545,($293|0));
                                     $772 = __THREW__; __THREW__ = 0;
                                     $773 = $772&1;
                                     if ($773) {
                                      $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                      $1198 = tempRet0;
                                      ___clang_call_terminate($1197);
                                      // unreachable;
                                     } else {
                                      break;
                                     }
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(545,($293|0));
                                    $759 = __THREW__; __THREW__ = 0;
                                    $760 = $759&1;
                                    if ($760) {
                                     label = 113;
                                     break;
                                    }
                                    $761 = (($312) + 8|0);
                                    __THREW__ = 0;
                                    (invoke_iiiiii(559,($761|0),($devices|0),(0|0),(0|0),(0|0))|0);
                                    $762 = __THREW__; __THREW__ = 0;
                                    $763 = $762&1;
                                    if ($763) {
                                     $774 = ___cxa_find_matching_catch(-1,-1,2488|0)|0;
                                     $775 = tempRet0;
                                     $285 = $774;
                                     $286 = $775;
                                     $776 = $286;
                                     $777 = (_llvm_eh_typeid_for((2488|0))|0);
                                     $778 = ($776|0)==($777|0);
                                     if (!($778)) {
                                      break;
                                     }
                                     $779 = $285;
                                     $780 = (___cxa_begin_catch(($779|0))|0);
                                     $e = $780;
                                     __THREW__ = 0;
                                     $781 = (invoke_iii(449,(4008|0),(2688|0))|0);
                                     $782 = __THREW__; __THREW__ = 0;
                                     $783 = $782&1;
                                     L118: do {
                                      if ($783) {
                                       label = 128;
                                      } else {
                                       $111 = $781;
                                       $112 = 451;
                                       $784 = $111;
                                       $785 = $112;
                                       __THREW__ = 0;
                                       (invoke_ii($785|0,($784|0))|0);
                                       $786 = __THREW__; __THREW__ = 0;
                                       $787 = $786&1;
                                       if ($787) {
                                        label = 128;
                                        break;
                                       }
                                       $788 = (($312) + 8|0);
                                       $109 = $devices;
                                       $110 = 0;
                                       $789 = $109;
                                       $790 = $110;
                                       $791 = HEAP32[$789>>2]|0;
                                       $792 = (($791) + ($790<<2)|0);
                                       __THREW__ = 0;
                                       invoke_viiii(560,($294|0),($788|0),($792|0),(0|0));
                                       $793 = __THREW__; __THREW__ = 0;
                                       $794 = $793&1;
                                       if ($794) {
                                        label = 128;
                                        break;
                                       }
                                       __THREW__ = 0;
                                       $795 = (invoke_iii(485,(4008|0),($294|0))|0);
                                       $796 = __THREW__; __THREW__ = 0;
                                       $797 = $796&1;
                                       do {
                                        if (!($797)) {
                                         $107 = $795;
                                         $108 = 451;
                                         $798 = $107;
                                         $799 = $108;
                                         __THREW__ = 0;
                                         (invoke_ii($799|0,($798|0))|0);
                                         $800 = __THREW__; __THREW__ = 0;
                                         $801 = $800&1;
                                         if ($801) {
                                          break;
                                         }
                                         __THREW__ = 0;
                                         invoke_vi(415,($294|0));
                                         $802 = __THREW__; __THREW__ = 0;
                                         $803 = $802&1;
                                         if ($803) {
                                          label = 128;
                                          break L118;
                                         }
                                         $804 = (___cxa_allocate_exception(12)|0);
                                         $805 = $e;
                                         __ZN2cl5ErrorC1ERKS0_($804,$805);
                                         __THREW__ = 0;
                                         invoke_viii(454,($804|0),(2488|0),(64|0));
                                         $806 = __THREW__; __THREW__ = 0;
                                         $807 = $806&1;
                                         if ($807) {
                                          label = 128;
                                          break L118;
                                         }
                                         // unreachable;
                                        }
                                       } while(0);
                                       $810 = ___cxa_find_matching_catch(-1,-1)|0;
                                       $811 = tempRet0;
                                       $285 = $810;
                                       $286 = $811;
                                       __THREW__ = 0;
                                       invoke_vi(415,($294|0));
                                       $812 = __THREW__; __THREW__ = 0;
                                       $813 = $812&1;
                                       if ($813) {
                                        $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                        $1198 = tempRet0;
                                        ___clang_call_terminate($1197);
                                        // unreachable;
                                       } else {
                                        break;
                                       }
                                      }
                                     } while(0);
                                     if ((label|0) == 128) {
                                      $808 = ___cxa_find_matching_catch(-1,-1)|0;
                                      $809 = tempRet0;
                                      $285 = $808;
                                      $286 = $809;
                                     }
                                     __THREW__ = 0;
                                     invoke_v(463);
                                     $814 = __THREW__; __THREW__ = 0;
                                     $815 = $814&1;
                                     if ($815) {
                                      $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                      $1198 = tempRet0;
                                      ___clang_call_terminate($1197);
                                      // unreachable;
                                     } else {
                                      break;
                                     }
                                    }
                                    $816 = (($312) + 12|0);
                                    $817 = (($312) + 8|0);
                                    __THREW__ = 0;
                                    invoke_viiii(561,($295|0),($817|0),(2712|0),(0|0));
                                    $818 = __THREW__; __THREW__ = 0;
                                    $819 = $818&1;
                                    if ($819) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    (invoke_iii(562,($816|0),($295|0))|0);
                                    $820 = __THREW__; __THREW__ = 0;
                                    $821 = $820&1;
                                    if ($821) {
                                     $1003 = ___cxa_find_matching_catch(-1,-1)|0;
                                     $1004 = tempRet0;
                                     $285 = $1003;
                                     $286 = $1004;
                                     __THREW__ = 0;
                                     invoke_vi(544,($295|0));
                                     $1005 = __THREW__; __THREW__ = 0;
                                     $1006 = $1005&1;
                                     if ($1006) {
                                      $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                      $1198 = tempRet0;
                                      ___clang_call_terminate($1197);
                                      // unreachable;
                                     } else {
                                      break;
                                     }
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(544,($295|0));
                                    $822 = __THREW__; __THREW__ = 0;
                                    $823 = $822&1;
                                    if ($823) {
                                     label = 113;
                                     break;
                                    }
                                    $824 = (($312) + 16|0);
                                    $825 = (($312) + 4|0);
                                    $105 = $devices;
                                    $106 = 0;
                                    $826 = $105;
                                    $827 = $106;
                                    $828 = HEAP32[$826>>2]|0;
                                    $829 = (($828) + ($827<<2)|0);
                                    __THREW__ = 0;
                                    invoke_viiiiii(563,($296|0),($825|0),($829|0),0,0,(0|0));
                                    $830 = __THREW__; __THREW__ = 0;
                                    $831 = $830&1;
                                    if ($831) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    (invoke_iii(564,($824|0),($296|0))|0);
                                    $832 = __THREW__; __THREW__ = 0;
                                    $833 = $832&1;
                                    if ($833) {
                                     $1007 = ___cxa_find_matching_catch(-1,-1)|0;
                                     $1008 = tempRet0;
                                     $285 = $1007;
                                     $286 = $1008;
                                     __THREW__ = 0;
                                     invoke_vi(543,($296|0));
                                     $1009 = __THREW__; __THREW__ = 0;
                                     $1010 = $1009&1;
                                     if ($1010) {
                                      $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                      $1198 = tempRet0;
                                      ___clang_call_terminate($1197);
                                      // unreachable;
                                     } else {
                                      break;
                                     }
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(543,($296|0));
                                    $834 = __THREW__; __THREW__ = 0;
                                    $835 = $834&1;
                                    if ($835) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    $836 = (invoke_i(429)|0);
                                    $837 = __THREW__; __THREW__ = 0;
                                    $838 = $837&1;
                                    if ($838) {
                                     label = 113;
                                     break;
                                    }
                                    $103 = $297;
                                    $104 = 2728;
                                    $839 = $103;
                                    $840 = $104;
                                    $101 = $839;
                                    $102 = $840;
                                    $841 = $101;
                                    $100 = $841;
                                    $842 = $100;
                                    $99 = $842;
                                    $843 = $99;
                                    $98 = $843;
                                    $844 = $98;
                                    $97 = $844;
                                    $845 = $102;
                                    $846 = $102;
                                    $96 = $846;
                                    $847 = $96;
                                    __THREW__ = 0;
                                    $848 = (invoke_ii(430,($847|0))|0);
                                    $849 = __THREW__; __THREW__ = 0;
                                    $850 = $849&1;
                                    if ($850) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    invoke_viii(431,($841|0),($845|0),($848|0));
                                    $851 = __THREW__; __THREW__ = 0;
                                    $852 = $851&1;
                                    if ($852) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    $853 = (invoke_iiii(428,($836|0),($297|0),0)|0);
                                    $854 = __THREW__; __THREW__ = 0;
                                    $855 = $854&1;
                                    if ($855) {
                                     $1011 = ___cxa_find_matching_catch(-1,-1)|0;
                                     $1012 = tempRet0;
                                     $285 = $1011;
                                     $286 = $1012;
                                     __THREW__ = 0;
                                     invoke_vi(415,($297|0));
                                     $1013 = __THREW__; __THREW__ = 0;
                                     $1014 = $1013&1;
                                     if ($1014) {
                                      $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                      $1198 = tempRet0;
                                      ___clang_call_terminate($1197);
                                      // unreachable;
                                     } else {
                                      break;
                                     }
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(415,($297|0));
                                    $856 = __THREW__; __THREW__ = 0;
                                    $857 = $856&1;
                                    if ($857) {
                                     label = 113;
                                     break;
                                    }
                                    $nParticles = $853;
                                    __THREW__ = 0;
                                    $858 = (invoke_i(429)|0);
                                    $859 = __THREW__; __THREW__ = 0;
                                    $860 = $859&1;
                                    if ($860) {
                                     label = 113;
                                     break;
                                    }
                                    $94 = $298;
                                    $95 = 2744;
                                    $861 = $94;
                                    $862 = $95;
                                    $92 = $861;
                                    $93 = $862;
                                    $863 = $92;
                                    $91 = $863;
                                    $864 = $91;
                                    $90 = $864;
                                    $865 = $90;
                                    $89 = $865;
                                    $866 = $89;
                                    $88 = $866;
                                    $867 = $93;
                                    $868 = $93;
                                    $87 = $868;
                                    $869 = $87;
                                    __THREW__ = 0;
                                    $870 = (invoke_ii(430,($869|0))|0);
                                    $871 = __THREW__; __THREW__ = 0;
                                    $872 = $871&1;
                                    if ($872) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    invoke_viii(431,($863|0),($867|0),($870|0));
                                    $873 = __THREW__; __THREW__ = 0;
                                    $874 = $873&1;
                                    if ($874) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    $875 = (invoke_iii(432,($858|0),($298|0))|0);
                                    $876 = __THREW__; __THREW__ = 0;
                                    $877 = $876&1;
                                    if ($877) {
                                     $1015 = ___cxa_find_matching_catch(-1,-1)|0;
                                     $1016 = tempRet0;
                                     $285 = $1015;
                                     $286 = $1016;
                                     __THREW__ = 0;
                                     invoke_vi(415,($298|0));
                                     $1017 = __THREW__; __THREW__ = 0;
                                     $1018 = $1017&1;
                                     if ($1018) {
                                      $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                      $1198 = tempRet0;
                                      ___clang_call_terminate($1197);
                                      // unreachable;
                                     } else {
                                      break;
                                     }
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(415,($298|0));
                                    $878 = __THREW__; __THREW__ = 0;
                                    $879 = $878&1;
                                    if ($879) {
                                     label = 113;
                                     break;
                                    }
                                    L181: do {
                                     if ($875) {
                                      $880 = (($312) + 20|0);
                                      $881 = (($312) + 4|0);
                                      __THREW__ = 0;
                                      $882 = (invoke_i(429)|0);
                                      $883 = __THREW__; __THREW__ = 0;
                                      $884 = $883&1;
                                      if ($884) {
                                       label = 113;
                                       break L105;
                                      }
                                      $85 = $300;
                                      $86 = 2760;
                                      $885 = $85;
                                      $886 = $86;
                                      $83 = $885;
                                      $84 = $886;
                                      $887 = $83;
                                      $82 = $887;
                                      $888 = $82;
                                      $81 = $888;
                                      $889 = $81;
                                      $80 = $889;
                                      $890 = $80;
                                      $79 = $890;
                                      $891 = $84;
                                      $892 = $84;
                                      $78 = $892;
                                      $893 = $78;
                                      __THREW__ = 0;
                                      $894 = (invoke_ii(430,($893|0))|0);
                                      $895 = __THREW__; __THREW__ = 0;
                                      $896 = $895&1;
                                      if ($896) {
                                       label = 113;
                                       break L105;
                                      }
                                      __THREW__ = 0;
                                      invoke_viii(431,($887|0),($891|0),($894|0));
                                      $897 = __THREW__; __THREW__ = 0;
                                      $898 = $897&1;
                                      if ($898) {
                                       label = 113;
                                       break L105;
                                      }
                                      __THREW__ = 0;
                                      $899 = (invoke_iiii(565,($882|0),($300|0),0)|0);
                                      $900 = __THREW__; __THREW__ = 0;
                                      $901 = $900&1;
                                      do {
                                       if ($901) {
                                        label = 197;
                                       } else {
                                        __THREW__ = 0;
                                        invoke_viiiiii(566,($299|0),($881|0),1,0,($899|0),(0|0));
                                        $902 = __THREW__; __THREW__ = 0;
                                        $903 = $902&1;
                                        if ($903) {
                                         label = 197;
                                         break;
                                        }
                                        __THREW__ = 0;
                                        (invoke_iii(567,($880|0),($299|0))|0);
                                        $904 = __THREW__; __THREW__ = 0;
                                        $905 = $904&1;
                                        if ($905) {
                                         $1021 = ___cxa_find_matching_catch(-1,-1)|0;
                                         $1022 = tempRet0;
                                         $285 = $1021;
                                         $286 = $1022;
                                         __THREW__ = 0;
                                         invoke_vi(568,($299|0));
                                         $1023 = __THREW__; __THREW__ = 0;
                                         $1024 = $1023&1;
                                         if ($1024) {
                                          $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                          $1198 = tempRet0;
                                          ___clang_call_terminate($1197);
                                          // unreachable;
                                         } else {
                                          break;
                                         }
                                        }
                                        __THREW__ = 0;
                                        invoke_vi(568,($299|0));
                                        $906 = __THREW__; __THREW__ = 0;
                                        $907 = $906&1;
                                        if ($907) {
                                         label = 197;
                                         break;
                                        }
                                        __THREW__ = 0;
                                        invoke_vi(415,($300|0));
                                        $908 = __THREW__; __THREW__ = 0;
                                        $909 = $908&1;
                                        if ($909) {
                                         label = 113;
                                         break L105;
                                        }
                                        $910 = (($312) + 24|0);
                                        $911 = (($312) + 4|0);
                                        __THREW__ = 0;
                                        $912 = (invoke_i(429)|0);
                                        $913 = __THREW__; __THREW__ = 0;
                                        $914 = $913&1;
                                        if ($914) {
                                         label = 113;
                                         break L105;
                                        }
                                        $76 = $302;
                                        $77 = 2768;
                                        $915 = $76;
                                        $916 = $77;
                                        $74 = $915;
                                        $75 = $916;
                                        $917 = $74;
                                        $73 = $917;
                                        $918 = $73;
                                        $72 = $918;
                                        $919 = $72;
                                        $71 = $919;
                                        $920 = $71;
                                        $70 = $920;
                                        $921 = $75;
                                        $922 = $75;
                                        $69 = $922;
                                        $923 = $69;
                                        __THREW__ = 0;
                                        $924 = (invoke_ii(430,($923|0))|0);
                                        $925 = __THREW__; __THREW__ = 0;
                                        $926 = $925&1;
                                        if ($926) {
                                         label = 113;
                                         break L105;
                                        }
                                        __THREW__ = 0;
                                        invoke_viii(431,($917|0),($921|0),($924|0));
                                        $927 = __THREW__; __THREW__ = 0;
                                        $928 = $927&1;
                                        if ($928) {
                                         label = 113;
                                         break L105;
                                        }
                                        __THREW__ = 0;
                                        $929 = (invoke_iiii(565,($912|0),($302|0),0)|0);
                                        $930 = __THREW__; __THREW__ = 0;
                                        $931 = $930&1;
                                        do {
                                         if ($931) {
                                          label = 202;
                                         } else {
                                          __THREW__ = 0;
                                          invoke_viiiiii(566,($301|0),($911|0),1,0,($929|0),(0|0));
                                          $932 = __THREW__; __THREW__ = 0;
                                          $933 = $932&1;
                                          if ($933) {
                                           label = 202;
                                           break;
                                          }
                                          __THREW__ = 0;
                                          (invoke_iii(567,($910|0),($301|0))|0);
                                          $934 = __THREW__; __THREW__ = 0;
                                          $935 = $934&1;
                                          if ($935) {
                                           $1029 = ___cxa_find_matching_catch(-1,-1)|0;
                                           $1030 = tempRet0;
                                           $285 = $1029;
                                           $286 = $1030;
                                           __THREW__ = 0;
                                           invoke_vi(568,($301|0));
                                           $1031 = __THREW__; __THREW__ = 0;
                                           $1032 = $1031&1;
                                           if ($1032) {
                                            $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                            $1198 = tempRet0;
                                            ___clang_call_terminate($1197);
                                            // unreachable;
                                           } else {
                                            break;
                                           }
                                          }
                                          __THREW__ = 0;
                                          invoke_vi(568,($301|0));
                                          $936 = __THREW__; __THREW__ = 0;
                                          $937 = $936&1;
                                          if ($937) {
                                           label = 202;
                                           break;
                                          }
                                          __THREW__ = 0;
                                          invoke_vi(415,($302|0));
                                          $938 = __THREW__; __THREW__ = 0;
                                          $939 = $938&1;
                                          if ($939) {
                                           label = 113;
                                           break L105;
                                          }
                                          $940 = (($312) + 32|0);
                                          __THREW__ = 0;
                                          invoke_vii(569,($940|0),2);
                                          $941 = __THREW__; __THREW__ = 0;
                                          $942 = $941&1;
                                          if ($942) {
                                           label = 113;
                                           break L105;
                                          }
                                          $943 = (($312) + 32|0);
                                          $944 = (($312) + 20|0);
                                          $67 = $943;
                                          $68 = $944;
                                          $945 = $67;
                                          $946 = (($945) + 4|0);
                                          $947 = HEAP32[$946>>2]|0;
                                          $66 = $945;
                                          $948 = $66;
                                          $949 = (($948) + 8|0);
                                          $65 = $949;
                                          $950 = $65;
                                          $64 = $950;
                                          $951 = $64;
                                          $952 = HEAP32[$951>>2]|0;
                                          $953 = ($947|0)!=($952|0);
                                          if ($953) {
                                           $63 = $945;
                                           $954 = $63;
                                           $955 = (($954) + 8|0);
                                           $62 = $955;
                                           $956 = $62;
                                           $61 = $956;
                                           $957 = $61;
                                           $958 = (($945) + 4|0);
                                           $959 = HEAP32[$958>>2]|0;
                                           $57 = $959;
                                           $960 = $57;
                                           $961 = $68;
                                           $58 = $957;
                                           $59 = $960;
                                           $60 = $961;
                                           $962 = $59;
                                           $963 = ($962|0)==(0|0);
                                           if (!($963)) {
                                            $964 = $60;
                                            __THREW__ = 0;
                                            invoke_vii(570,($962|0),($964|0));
                                            $965 = __THREW__; __THREW__ = 0;
                                            $966 = $965&1;
                                            if ($966) {
                                             label = 113;
                                             break L105;
                                            }
                                           }
                                           $967 = (($945) + 4|0);
                                           $968 = HEAP32[$967>>2]|0;
                                           $969 = (($968) + 4|0);
                                           HEAP32[$967>>2] = $969;
                                          } else {
                                           $970 = $68;
                                           __THREW__ = 0;
                                           invoke_vii(571,($945|0),($970|0));
                                           $971 = __THREW__; __THREW__ = 0;
                                           $972 = $971&1;
                                           if ($972) {
                                            label = 113;
                                            break L105;
                                           }
                                          }
                                          $973 = (($312) + 32|0);
                                          $974 = (($312) + 24|0);
                                          $55 = $973;
                                          $56 = $974;
                                          $975 = $55;
                                          $976 = (($975) + 4|0);
                                          $977 = HEAP32[$976>>2]|0;
                                          $54 = $975;
                                          $978 = $54;
                                          $979 = (($978) + 8|0);
                                          $53 = $979;
                                          $980 = $53;
                                          $52 = $980;
                                          $981 = $52;
                                          $982 = HEAP32[$981>>2]|0;
                                          $983 = ($977|0)!=($982|0);
                                          if ($983) {
                                           $51 = $975;
                                           $984 = $51;
                                           $985 = (($984) + 8|0);
                                           $50 = $985;
                                           $986 = $50;
                                           $49 = $986;
                                           $987 = $49;
                                           $988 = (($975) + 4|0);
                                           $989 = HEAP32[$988>>2]|0;
                                           $45 = $989;
                                           $990 = $45;
                                           $991 = $56;
                                           $46 = $987;
                                           $47 = $990;
                                           $48 = $991;
                                           $992 = $47;
                                           $993 = ($992|0)==(0|0);
                                           if (!($993)) {
                                            $994 = $48;
                                            __THREW__ = 0;
                                            invoke_vii(570,($992|0),($994|0));
                                            $995 = __THREW__; __THREW__ = 0;
                                            $996 = $995&1;
                                            if ($996) {
                                             label = 113;
                                             break L105;
                                            }
                                           }
                                           $997 = (($975) + 4|0);
                                           $998 = HEAP32[$997>>2]|0;
                                           $999 = (($998) + 4|0);
                                           HEAP32[$997>>2] = $999;
                                          } else {
                                           $1000 = $56;
                                           __THREW__ = 0;
                                           invoke_vii(571,($975|0),($1000|0));
                                           $1001 = __THREW__; __THREW__ = 0;
                                           $1002 = $1001&1;
                                           if ($1002) {
                                            label = 113;
                                            break L105;
                                           }
                                          }
                                          break L181;
                                         }
                                        } while(0);
                                        if ((label|0) == 202) {
                                         $1027 = ___cxa_find_matching_catch(-1,-1)|0;
                                         $1028 = tempRet0;
                                         $285 = $1027;
                                         $286 = $1028;
                                        }
                                        __THREW__ = 0;
                                        invoke_vi(415,($302|0));
                                        $1033 = __THREW__; __THREW__ = 0;
                                        $1034 = $1033&1;
                                        if ($1034) {
                                         $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                         $1198 = tempRet0;
                                         ___clang_call_terminate($1197);
                                         // unreachable;
                                        } else {
                                         break L105;
                                        }
                                       }
                                      } while(0);
                                      if ((label|0) == 197) {
                                       $1019 = ___cxa_find_matching_catch(-1,-1)|0;
                                       $1020 = tempRet0;
                                       $285 = $1019;
                                       $286 = $1020;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(415,($300|0));
                                      $1025 = __THREW__; __THREW__ = 0;
                                      $1026 = $1025&1;
                                      if ($1026) {
                                       $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                       $1198 = tempRet0;
                                       ___clang_call_terminate($1197);
                                       // unreachable;
                                      } else {
                                       break L105;
                                      }
                                     } else {
                                      $1035 = (($312) + 20|0);
                                      $1036 = (($312) + 4|0);
                                      $1037 = $nParticles;
                                      $1038 = $1037<<2;
                                      $1039 = $1038<<2;
                                      __THREW__ = 0;
                                      $1040 = (invoke_i(429)|0);
                                      $1041 = __THREW__; __THREW__ = 0;
                                      $1042 = $1041&1;
                                      if ($1042) {
                                       label = 113;
                                       break L105;
                                      }
                                      $43 = $304;
                                      $44 = 2784;
                                      $1043 = $43;
                                      $1044 = $44;
                                      $41 = $1043;
                                      $42 = $1044;
                                      $1045 = $41;
                                      $40 = $1045;
                                      $1046 = $40;
                                      $39 = $1046;
                                      $1047 = $39;
                                      $38 = $1047;
                                      $1048 = $38;
                                      $37 = $1048;
                                      $1049 = $42;
                                      $1050 = $42;
                                      $36 = $1050;
                                      $1051 = $36;
                                      __THREW__ = 0;
                                      $1052 = (invoke_ii(430,($1051|0))|0);
                                      $1053 = __THREW__; __THREW__ = 0;
                                      $1054 = $1053&1;
                                      if ($1054) {
                                       label = 113;
                                       break L105;
                                      }
                                      __THREW__ = 0;
                                      invoke_viii(431,($1045|0),($1049|0),($1052|0));
                                      $1055 = __THREW__; __THREW__ = 0;
                                      $1056 = $1055&1;
                                      if ($1056) {
                                       label = 113;
                                       break L105;
                                      }
                                      $33 = $35;
                                      $34 = -1;
                                      $1057 = $33;
                                      $1058 = $34;
                                      $31 = $1057;
                                      $32 = $1058;
                                      $1059 = $31;
                                      HEAP32[$1059>>2] = 0;
                                      $1060 = HEAP32[$35>>2]|0;
                                      HEAP32[$305>>2] = $1060;
                                      $30 = $305;
                                      __THREW__ = 0;
                                      $1061 = (invoke_iiii(511,($1040|0),($304|0),(0|0))|0);
                                      $1062 = __THREW__; __THREW__ = 0;
                                      $1063 = $1062&1;
                                      do {
                                       if ($1063) {
                                        label = 230;
                                       } else {
                                        __THREW__ = 0;
                                        invoke_viiiiiii(572,($303|0),($1036|0),33,0,($1039|0),($1061|0),(0|0));
                                        $1064 = __THREW__; __THREW__ = 0;
                                        $1065 = $1064&1;
                                        if ($1065) {
                                         label = 230;
                                         break;
                                        }
                                        __THREW__ = 0;
                                        (invoke_iii(567,($1035|0),($303|0))|0);
                                        $1066 = __THREW__; __THREW__ = 0;
                                        $1067 = $1066&1;
                                        if ($1067) {
                                         $1111 = ___cxa_find_matching_catch(-1,-1)|0;
                                         $1112 = tempRet0;
                                         $285 = $1111;
                                         $286 = $1112;
                                         __THREW__ = 0;
                                         invoke_vi(542,($303|0));
                                         $1113 = __THREW__; __THREW__ = 0;
                                         $1114 = $1113&1;
                                         if ($1114) {
                                          $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                          $1198 = tempRet0;
                                          ___clang_call_terminate($1197);
                                          // unreachable;
                                         } else {
                                          break;
                                         }
                                        }
                                        __THREW__ = 0;
                                        invoke_vi(542,($303|0));
                                        $1068 = __THREW__; __THREW__ = 0;
                                        $1069 = $1068&1;
                                        if ($1069) {
                                         label = 230;
                                         break;
                                        }
                                        __THREW__ = 0;
                                        invoke_vi(415,($304|0));
                                        $1070 = __THREW__; __THREW__ = 0;
                                        $1071 = $1070&1;
                                        if ($1071) {
                                         label = 113;
                                         break L105;
                                        }
                                        $1072 = (($312) + 24|0);
                                        $1073 = (($312) + 4|0);
                                        $1074 = $nParticles;
                                        $1075 = $1074<<2;
                                        $1076 = $1075<<2;
                                        __THREW__ = 0;
                                        $1077 = (invoke_i(429)|0);
                                        $1078 = __THREW__; __THREW__ = 0;
                                        $1079 = $1078&1;
                                        if ($1079) {
                                         label = 113;
                                         break L105;
                                        }
                                        $28 = $307;
                                        $29 = 2792;
                                        $1080 = $28;
                                        $1081 = $29;
                                        $26 = $1080;
                                        $27 = $1081;
                                        $1082 = $26;
                                        $25 = $1082;
                                        $1083 = $25;
                                        $24 = $1083;
                                        $1084 = $24;
                                        $23 = $1084;
                                        $1085 = $23;
                                        $22 = $1085;
                                        $1086 = $27;
                                        $1087 = $27;
                                        $21 = $1087;
                                        $1088 = $21;
                                        __THREW__ = 0;
                                        $1089 = (invoke_ii(430,($1088|0))|0);
                                        $1090 = __THREW__; __THREW__ = 0;
                                        $1091 = $1090&1;
                                        if ($1091) {
                                         label = 113;
                                         break L105;
                                        }
                                        __THREW__ = 0;
                                        invoke_viii(431,($1082|0),($1086|0),($1089|0));
                                        $1092 = __THREW__; __THREW__ = 0;
                                        $1093 = $1092&1;
                                        if ($1093) {
                                         label = 113;
                                         break L105;
                                        }
                                        $18 = $20;
                                        $19 = -1;
                                        $1094 = $18;
                                        $1095 = $19;
                                        $16 = $1094;
                                        $17 = $1095;
                                        $1096 = $16;
                                        HEAP32[$1096>>2] = 0;
                                        $1097 = HEAP32[$20>>2]|0;
                                        HEAP32[$308>>2] = $1097;
                                        $15 = $308;
                                        __THREW__ = 0;
                                        $1098 = (invoke_iiii(511,($1077|0),($307|0),(0|0))|0);
                                        $1099 = __THREW__; __THREW__ = 0;
                                        $1100 = $1099&1;
                                        do {
                                         if ($1100) {
                                          label = 235;
                                         } else {
                                          __THREW__ = 0;
                                          invoke_viiiiiii(572,($306|0),($1073|0),33,0,($1076|0),($1098|0),(0|0));
                                          $1101 = __THREW__; __THREW__ = 0;
                                          $1102 = $1101&1;
                                          if ($1102) {
                                           label = 235;
                                           break;
                                          }
                                          __THREW__ = 0;
                                          (invoke_iii(567,($1072|0),($306|0))|0);
                                          $1103 = __THREW__; __THREW__ = 0;
                                          $1104 = $1103&1;
                                          if ($1104) {
                                           $1119 = ___cxa_find_matching_catch(-1,-1)|0;
                                           $1120 = tempRet0;
                                           $285 = $1119;
                                           $286 = $1120;
                                           __THREW__ = 0;
                                           invoke_vi(542,($306|0));
                                           $1121 = __THREW__; __THREW__ = 0;
                                           $1122 = $1121&1;
                                           if ($1122) {
                                            $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                            $1198 = tempRet0;
                                            ___clang_call_terminate($1197);
                                            // unreachable;
                                           } else {
                                            break;
                                           }
                                          } else {
                                           __THREW__ = 0;
                                           invoke_vi(542,($306|0));
                                           $1105 = __THREW__; __THREW__ = 0;
                                           $1106 = $1105&1;
                                           if ($1106) {
                                            label = 235;
                                            break;
                                           }
                                           __THREW__ = 0;
                                           invoke_vi(415,($307|0));
                                           $1107 = __THREW__; __THREW__ = 0;
                                           $1108 = $1107&1;
                                           if ($1108) {
                                            label = 113;
                                            break L105;
                                           }
                                           break L181;
                                          }
                                         }
                                        } while(0);
                                        if ((label|0) == 235) {
                                         $1117 = ___cxa_find_matching_catch(-1,-1)|0;
                                         $1118 = tempRet0;
                                         $285 = $1117;
                                         $286 = $1118;
                                        }
                                        __THREW__ = 0;
                                        invoke_vi(415,($307|0));
                                        $1123 = __THREW__; __THREW__ = 0;
                                        $1124 = $1123&1;
                                        if ($1124) {
                                         $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                         $1198 = tempRet0;
                                         ___clang_call_terminate($1197);
                                         // unreachable;
                                        } else {
                                         break L105;
                                        }
                                       }
                                      } while(0);
                                      if ((label|0) == 230) {
                                       $1109 = ___cxa_find_matching_catch(-1,-1)|0;
                                       $1110 = tempRet0;
                                       $285 = $1109;
                                       $286 = $1110;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(415,($304|0));
                                      $1115 = __THREW__; __THREW__ = 0;
                                      $1116 = $1115&1;
                                      if ($1116) {
                                       $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                       $1198 = tempRet0;
                                       ___clang_call_terminate($1197);
                                       // unreachable;
                                      } else {
                                       break L105;
                                      }
                                     }
                                    } while(0);
                                    $1125 = (($312) + 28|0);
                                    $1126 = (($312) + 4|0);
                                    $1127 = $nParticles;
                                    $1128 = $1127<<2;
                                    __THREW__ = 0;
                                    $1129 = (invoke_i(429)|0);
                                    $1130 = __THREW__; __THREW__ = 0;
                                    $1131 = $1130&1;
                                    if ($1131) {
                                     label = 113;
                                     break;
                                    }
                                    $13 = $310;
                                    $14 = 2800;
                                    $1132 = $13;
                                    $1133 = $14;
                                    $11 = $1132;
                                    $12 = $1133;
                                    $1134 = $11;
                                    $10 = $1134;
                                    $1135 = $10;
                                    $9 = $1135;
                                    $1136 = $9;
                                    $8 = $1136;
                                    $1137 = $8;
                                    $7 = $1137;
                                    $1138 = $12;
                                    $1139 = $12;
                                    $6 = $1139;
                                    $1140 = $6;
                                    __THREW__ = 0;
                                    $1141 = (invoke_ii(430,($1140|0))|0);
                                    $1142 = __THREW__; __THREW__ = 0;
                                    $1143 = $1142&1;
                                    if ($1143) {
                                     label = 113;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    invoke_viii(431,($1134|0),($1138|0),($1141|0));
                                    $1144 = __THREW__; __THREW__ = 0;
                                    $1145 = $1144&1;
                                    if ($1145) {
                                     label = 113;
                                     break;
                                    }
                                    $3 = $5;
                                    $4 = -1;
                                    $1146 = $3;
                                    $1147 = $4;
                                    $1 = $1146;
                                    $2 = $1147;
                                    $1148 = $1;
                                    HEAP32[$1148>>2] = 0;
                                    $1149 = HEAP32[$5>>2]|0;
                                    HEAP32[$311>>2] = $1149;
                                    $0 = $311;
                                    __THREW__ = 0;
                                    $1150 = (invoke_iiii(511,($1129|0),($310|0),(0|0))|0);
                                    $1151 = __THREW__; __THREW__ = 0;
                                    $1152 = $1151&1;
                                    do {
                                     if ($1152) {
                                      label = 258;
                                     } else {
                                      __THREW__ = 0;
                                      invoke_viiiiiii(572,($309|0),($1126|0),33,0,($1128|0),($1150|0),(0|0));
                                      $1153 = __THREW__; __THREW__ = 0;
                                      $1154 = $1153&1;
                                      if ($1154) {
                                       label = 258;
                                       break;
                                      }
                                      __THREW__ = 0;
                                      (invoke_iii(567,($1125|0),($309|0))|0);
                                      $1155 = __THREW__; __THREW__ = 0;
                                      $1156 = $1155&1;
                                      if ($1156) {
                                       $1175 = ___cxa_find_matching_catch(-1,-1)|0;
                                       $1176 = tempRet0;
                                       $285 = $1175;
                                       $286 = $1176;
                                       __THREW__ = 0;
                                       invoke_vi(542,($309|0));
                                       $1177 = __THREW__; __THREW__ = 0;
                                       $1178 = $1177&1;
                                       if ($1178) {
                                        $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                        $1198 = tempRet0;
                                        ___clang_call_terminate($1197);
                                        // unreachable;
                                       } else {
                                        break;
                                       }
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(542,($309|0));
                                      $1157 = __THREW__; __THREW__ = 0;
                                      $1158 = $1157&1;
                                      if ($1158) {
                                       label = 258;
                                       break;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(415,($310|0));
                                      $1159 = __THREW__; __THREW__ = 0;
                                      $1160 = $1159&1;
                                      if ($1160) {
                                       label = 113;
                                       break L105;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(573,($sources|0));
                                      $1161 = __THREW__; __THREW__ = 0;
                                      $1162 = $1161&1;
                                      if ($1162) {
                                       label = 112;
                                       break L103;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(415,($strSrc|0));
                                      $1163 = __THREW__; __THREW__ = 0;
                                      $1164 = $1163&1;
                                      if ($1164) {
                                       label = 111;
                                       break L87;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(67,($ss|0));
                                      $1165 = __THREW__; __THREW__ = 0;
                                      $1166 = $1165&1;
                                      if ($1166) {
                                       label = 67;
                                       break L68;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(37,($file|0));
                                      $1167 = __THREW__; __THREW__ = 0;
                                      $1168 = $1167&1;
                                      if ($1168) {
                                       $574 = ___cxa_find_matching_catch(-1,-1)|0;
                                       $575 = tempRet0;
                                       $eh$lpad$body$index2Z2D = $575;$eh$lpad$body$indexZ2D = $574;
                                       label = 66;
                                       break L49;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(415,($kernelFilename|0));
                                      $1169 = __THREW__; __THREW__ = 0;
                                      $1170 = $1169&1;
                                      if ($1170) {
                                       label = 25;
                                       break L32;
                                      }
                                      __THREW__ = 0;
                                      invoke_vi(574,($devices|0));
                                      $1171 = __THREW__; __THREW__ = 0;
                                      $1172 = $1171&1;
                                      if ($1172) {
                                       label = 5;
                                       break L1;
                                      }
                                      __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($platforms);
                                      STACKTOP = sp;return;
                                     }
                                    } while(0);
                                    if ((label|0) == 258) {
                                     $1173 = ___cxa_find_matching_catch(-1,-1)|0;
                                     $1174 = tempRet0;
                                     $285 = $1173;
                                     $286 = $1174;
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(415,($310|0));
                                    $1179 = __THREW__; __THREW__ = 0;
                                    $1180 = $1179&1;
                                    if ($1180) {
                                     $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                     $1198 = tempRet0;
                                     ___clang_call_terminate($1197);
                                     // unreachable;
                                    } else {
                                     break;
                                    }
                                   }
                                  } while(0);
                                  if ((label|0) == 113) {
                                   $768 = ___cxa_find_matching_catch(-1,-1)|0;
                                   $769 = tempRet0;
                                   $285 = $768;
                                   $286 = $769;
                                  }
                                  __THREW__ = 0;
                                  invoke_vi(573,($sources|0));
                                  $1181 = __THREW__; __THREW__ = 0;
                                  $1182 = $1181&1;
                                  if ($1182) {
                                   $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                   $1198 = tempRet0;
                                   ___clang_call_terminate($1197);
                                   // unreachable;
                                  } else {
                                   break;
                                  }
                                 }
                                } while(0);
                                if ((label|0) == 112) {
                                 $766 = ___cxa_find_matching_catch(-1,-1)|0;
                                 $767 = tempRet0;
                                 $285 = $766;
                                 $286 = $767;
                                }
                                __THREW__ = 0;
                                invoke_vi(415,($strSrc|0));
                                $1183 = __THREW__; __THREW__ = 0;
                                $1184 = $1183&1;
                                if ($1184) {
                                 $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                                 $1198 = tempRet0;
                                 ___clang_call_terminate($1197);
                                 // unreachable;
                                } else {
                                 break;
                                }
                               }
                              } while(0);
                              if ((label|0) == 111) {
                               $764 = ___cxa_find_matching_catch(-1,-1)|0;
                               $765 = tempRet0;
                               $285 = $764;
                               $286 = $765;
                              }
                              __THREW__ = 0;
                              invoke_vi(67,($ss|0));
                              $1185 = __THREW__; __THREW__ = 0;
                              $1186 = $1185&1;
                              if ($1186) {
                               $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                               $1198 = tempRet0;
                               ___clang_call_terminate($1197);
                               // unreachable;
                              } else {
                               break L68;
                              }
                             }
                            } while(0);
                            __THREW__ = 0;
                            invoke_vi(415,($619|0));
                            $663 = __THREW__; __THREW__ = 0;
                            $664 = $663&1;
                            if ($664) {
                             $671 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                             $672 = tempRet0;
                             ___clang_call_terminate($671);
                             // unreachable;
                            }
                            __THREW__ = 0;
                            invoke_vi(447,($617|0));
                            $665 = __THREW__; __THREW__ = 0;
                            $666 = $665&1;
                            if ($666) {
                             $671 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                             $672 = tempRet0;
                             ___clang_call_terminate($671);
                             // unreachable;
                            }
                            $667 = $167;
                            $668 = $168;
                            $181 = $667;
                            $182 = $668;
                            __THREW__ = 0;
                            $669 = __THREW__; __THREW__ = 0;
                            $670 = $669&1;
                            if ($670) {
                             $680 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                             $681 = tempRet0;
                             ___clang_call_terminate($680);
                             // unreachable;
                            } else {
                             break;
                            }
                           }
                          } while(0);
                          $675 = (($578) + 56|0);
                          __THREW__ = 0;
                          invoke_vi(448,($675|0));
                          $676 = __THREW__; __THREW__ = 0;
                          $677 = $676&1;
                          if ($677) {
                           $680 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                           $681 = tempRet0;
                           ___clang_call_terminate($680);
                           // unreachable;
                          } else {
                           $678 = $181;
                           $679 = $182;
                           $eh$lpad$body6$index7Z2D = $679;$eh$lpad$body6$indexZ2D = $678;
                           label = 68;
                           break;
                          }
                         }
                        } while(0);
                        if ((label|0) == 67) {
                         $576 = ___cxa_find_matching_catch(-1,-1)|0;
                         $577 = tempRet0;
                         $eh$lpad$body6$index7Z2D = $577;$eh$lpad$body6$indexZ2D = $576;
                         label = 68;
                        }
                        if ((label|0) == 68) {
                         $285 = $eh$lpad$body6$indexZ2D;
                         $286 = $eh$lpad$body6$index7Z2D;
                        }
                        __THREW__ = 0;
                        invoke_vi(37,($file|0));
                        $1187 = __THREW__; __THREW__ = 0;
                        $1188 = $1187&1;
                        if ($1188) {
                         $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                         $1198 = tempRet0;
                         ___clang_call_terminate($1197);
                         // unreachable;
                        } else {
                         break L49;
                        }
                       }
                      } while(0);
                      $545 = ___cxa_find_matching_catch(-1,-1)|0;
                      $546 = tempRet0;
                      $217 = $545;
                      $218 = $546;
                      __THREW__ = 0;
                      invoke_vi(41,($491|0));
                      $547 = __THREW__; __THREW__ = 0;
                      $548 = $547&1;
                      if ($548) {
                       $556 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                       $557 = tempRet0;
                       ___clang_call_terminate($556);
                       // unreachable;
                      } else {
                       break;
                      }
                     }
                    } while(0);
                    __THREW__ = 0;
                    $549 = __THREW__; __THREW__ = 0;
                    $550 = $549&1;
                    if ($550) {
                     $556 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                     $557 = tempRet0;
                     ___clang_call_terminate($556);
                     // unreachable;
                    } else {
                     label = 52;
                     break;
                    }
                   }
                  } while(0);
                  do {
                   if ((label|0) == 52) {
                    $551 = (($456) + 108|0);
                    __THREW__ = 0;
                    invoke_vi(448,($551|0));
                    $552 = __THREW__; __THREW__ = 0;
                    $553 = $552&1;
                    if ($553) {
                     $556 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                     $557 = tempRet0;
                     ___clang_call_terminate($556);
                     // unreachable;
                    } else {
                     $554 = $217;
                     $555 = $218;
                     $eh$lpad$body$index2Z2D = $555;$eh$lpad$body$indexZ2D = $554;
                     label = 66;
                     break;
                    }
                   }
                  } while(0);
                  if ((label|0) == 66) {
                   $285 = $eh$lpad$body$indexZ2D;
                   $286 = $eh$lpad$body$index2Z2D;
                  }
                  __THREW__ = 0;
                  invoke_vi(415,($kernelFilename|0));
                  $1189 = __THREW__; __THREW__ = 0;
                  $1190 = $1189&1;
                  if ($1190) {
                   $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                   $1198 = tempRet0;
                   ___clang_call_terminate($1197);
                   // unreachable;
                  } else {
                   break L32;
                  }
                 }
                } while(0);
                __THREW__ = 0;
                invoke_vi(415,($289|0));
                $572 = __THREW__; __THREW__ = 0;
                $573 = $572&1;
                if ($573) {
                 $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                 $1198 = tempRet0;
                 ___clang_call_terminate($1197);
                 // unreachable;
                } else {
                 break;
                }
               }
              }
             }
            }
           } while(0);
           if ((label|0) == 25) {
            $416 = ___cxa_find_matching_catch(-1,-1)|0;
            $417 = tempRet0;
            $285 = $416;
            $286 = $417;
           }
           __THREW__ = 0;
           invoke_vi(574,($devices|0));
           $1191 = __THREW__; __THREW__ = 0;
           $1192 = $1191&1;
           if ($1192) {
            $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
            $1198 = tempRet0;
            ___clang_call_terminate($1197);
            // unreachable;
           } else {
            break;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $347 = ___cxa_find_matching_catch(-1,-1)|0;
  $348 = tempRet0;
  $285 = $347;
  $286 = $348;
 }
 __THREW__ = 0;
 invoke_vi(575,($platforms|0));
 $1193 = __THREW__; __THREW__ = 0;
 $1194 = $1193&1;
 if ($1194) {
  $1197 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $1198 = tempRet0;
  ___clang_call_terminate($1197);
  // unreachable;
 }
 $1195 = $285;
 $1196 = $286;
 ___resumeException($1195|0);
 // unreachable;
}
function __ZNK2cl5Error3errEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl8Platform3getEPNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE($platforms) {
 $platforms = $platforms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, $ids = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $n = sp + 8|0;
 $1 = $platforms;
 HEAP32[$n>>2] = 0;
 $2 = (_clGetPlatformIDs(0,(0|0),($n|0))|0);
 $err = $2;
 $3 = $err;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $err;
  $6 = (__ZN2cl6detailL10errHandlerEiPKc($5,3440)|0);
  $0 = $6;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $7 = HEAP32[$n>>2]|0;
 $8 = $7<<2;
 $9 = STACKTOP; STACKTOP = STACKTOP + ((((1*$8)|0)+15)&-16)|0;
 $ids = $9;
 $10 = HEAP32[$n>>2]|0;
 $11 = $ids;
 $12 = (_clGetPlatformIDs(($10|0),($11|0),(0|0))|0);
 $err = $12;
 $13 = $err;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $err;
  $16 = (__ZN2cl6detailL10errHandlerEiPKc($15,3440)|0);
  $0 = $16;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $17 = $1;
  $18 = $ids;
  $19 = HEAP32[$n>>2]|0;
  $20 = $ids;
  $21 = (($20) + ($19<<2)|0);
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE6assignIPP15_cl_platform_idEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($17,$18,$21);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return 0|0;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN2cl7ContextaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP11_cl_contextEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl7ContextC1EyPiPFvPKcPKvjPvES6_S1_($this,$0,$1,$properties,$notifyFptr,$data,$err) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $properties = $properties|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $2 = $this;
 $8 = $3;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $4 = $properties;
 $5 = $notifyFptr;
 $6 = $data;
 $7 = $err;
 $12 = $2;
 $13 = $3;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 __ZN2cl7ContextC2EyPiPFvPKcPKvjPvES6_S1_($12,$15,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function __ZNK2cl7Context7getInfoILi4225EEENS_6detail12param_traitsINS2_15cl_context_infoEXT_EE10param_typeEPi($agg$result,$this,$err) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $err = $err|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $4 = sp + 72|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 112|0;
 $30 = sp + 12|0;
 $31 = sp;
 $34 = $this;
 $35 = $err;
 $40 = $34;
 $$expand_i1_val = 0;
 $36 = $$expand_i1_val;
 $33 = $agg$result;
 $41 = $33;
 $32 = $41;
 $42 = $32;
 $28 = $42;
 $43 = $28;
 $27 = $43;
 $2 = $4;
 $3 = -1;
 $44 = $2;
 $45 = $3;
 $0 = $44;
 $1 = $45;
 $46 = $0;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $47;
 $5 = $29;
 HEAP32[$43>>2] = 0;
 $48 = (($43) + 4|0);
 $8 = $10;
 $9 = -1;
 $49 = $8;
 $50 = $9;
 $6 = $49;
 $7 = $50;
 $51 = $6;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $52;
 $11 = $30;
 HEAP32[$48>>2] = 0;
 $53 = (($43) + 8|0);
 $14 = $16;
 $15 = -1;
 $54 = $14;
 $55 = $15;
 $12 = $54;
 $13 = $55;
 $56 = $12;
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $57;
 $17 = $31;
 $25 = $53;
 $26 = 0;
 $58 = $25;
 $59 = $26;
 $23 = $58;
 HEAP32[$24>>2] = $59;
 $60 = $23;
 $22 = $24;
 $61 = $22;
 $62 = HEAP32[$61>>2]|0;
 $20 = $60;
 HEAP32[$21>>2] = $62;
 $63 = $20;
 $19 = $63;
 $18 = $21;
 $64 = $18;
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$63>>2] = $65;
 __THREW__ = 0;
 $66 = (invoke_iiii(576,($40|0),4225,($agg$result|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $73 = ___cxa_find_matching_catch(-1,-1)|0;
  $74 = tempRet0;
  $37 = $73;
  $38 = $74;
  __THREW__ = 0;
  invoke_vi(574,($agg$result|0));
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $80 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
  $78 = $37;
  $79 = $38;
  ___resumeException($78|0);
  // unreachable;
 }
 $result = $66;
 $69 = $35;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = $result;
  $72 = $35;
  HEAP32[$72>>2] = $71;
 }
 $$expand_i1_val2 = 1;
 $36 = $$expand_i1_val2;
 $39 = 1;
 $$pre_trunc = $36;
 $77 = $$pre_trunc&1;
 if ($77) {
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC1EjRKS4_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $__n;
 $2 = $__x;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC2EjRKS4_($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP11_cl_programEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl7ProgramC1ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($this,$context,$sources,$err) {
 $this = $this|0;
 $context = $context|0;
 $sources = $sources|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $context;
 $2 = $sources;
 $3 = $err;
 $4 = $0;
 $5 = $3;
 $6 = $1;
 $7 = $2;
 __ZN2cl7ProgramC2ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($4,$6,$7,$5);
 STACKTOP = sp;return;
}
function __ZNK2cl7Program5buildERKNSt3__16vectorINS_6DeviceENS1_9allocatorIS3_EEEEPKcPFvP11_cl_programPvESD_($this,$devices,$options,$notifyFptr,$data) {
 $this = $this|0;
 $devices = $devices|0;
 $options = $options|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = $this;
 $3 = $devices;
 $4 = $options;
 $5 = $notifyFptr;
 $6 = $data;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $1 = $9;
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$10>>2]|0;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 4)&-1;
 $18 = $3;
 $0 = $18;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = (_clBuildProgram(($8|0),($17|0),($20|0),($21|0),($22|0),($23|0))|0);
 $25 = (__ZN2cl6detailL10errHandlerEiPKc($24,3368)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($agg$result,$this,$device,$err) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $device = $device|0;
 $err = $err|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $9 = $this;
 $10 = $device;
 $11 = $err;
 $16 = $9;
 $$expand_i1_val = 0;
 $12 = $$expand_i1_val;
 $8 = $agg$result;
 $17 = $8;
 $7 = $17;
 $18 = $7;
 $6 = $18;
 $19 = $6;
 $5 = $19;
 $20 = $5;
 $4 = $20;
 $21 = $4;
 $3 = $21;
 $2 = $18;
 $22 = $2;
 $1 = $22;
 $23 = $1;
 $0 = $23;
 $24 = $0;
 $__a$i$i$i = $24;
 $__i$i$i$i = 0;
 while(1) {
  $25 = $__i$i$i$i;
  $26 = ($25>>>0)<(3);
  if (!($26)) {
   break;
  }
  $27 = $__i$i$i$i;
  $28 = $__a$i$i$i;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = $__i$i$i$i;
  $31 = (($30) + 1)|0;
  $__i$i$i$i = $31;
 }
 $32 = $10;
 __THREW__ = 0;
 $33 = (invoke_iiiii(577,($16|0),($32|0),4483,($agg$result|0))|0);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $40 = ___cxa_find_matching_catch(-1,-1)|0;
  $41 = tempRet0;
  $13 = $40;
  $14 = $41;
  __THREW__ = 0;
  invoke_vi(415,($agg$result|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $47 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
  $45 = $13;
  $46 = $14;
  ___resumeException($45|0);
  // unreachable;
 }
 $result = $33;
 $36 = $11;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $result;
  $39 = $11;
  HEAP32[$39>>2] = $38;
 }
 $$expand_i1_val2 = 1;
 $12 = $$expand_i1_val2;
 $15 = 1;
 $$pre_trunc = $12;
 $44 = $$pre_trunc&1;
 if ($44) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC1ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN2cl5ErrorC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl5ErrorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP10_cl_kernelEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($this,$program,$name,$err) {
 $this = $this|0;
 $program = $program|0;
 $name = $name|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $program;
 $2 = $name;
 $3 = $err;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 $7 = $1;
 __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($4,$7,$5,$6);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP17_cl_command_queueEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$0,$1,$err) {
 $this = $this|0;
 $context = $context|0;
 $device = $device|0;
 $0 = $0|0;
 $1 = $1|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $2 = $this;
 $3 = $context;
 $4 = $device;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $6 = $err;
 $11 = $2;
 $12 = $5;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $6;
 $19 = $3;
 $20 = $4;
 __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($11,$19,$20,$14,$17,$18);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = $1;
  (__ZN2cl6MemoryaSERKS0_($2,$5)|0);
 }
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl8BufferGLC1ERKNS_7ContextEyjPi($this,$context,$0,$1,$bufobj,$err) {
 $this = $this|0;
 $context = $context|0;
 $0 = $0|0;
 $1 = $1|0;
 $bufobj = $bufobj|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $2 = $this;
 $3 = $context;
 $7 = $4;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $5 = $bufobj;
 $6 = $err;
 $11 = $2;
 $12 = $4;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = $6;
 $20 = $3;
 __ZN2cl8BufferGLC2ERKNS_7ContextEyjPi($11,$20,$14,$17,$18,$19);
 STACKTOP = sp;return;
}
function __ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($this,$key,$def) {
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $__i1$i$i1 = sp;
 $14 = sp + 16|0;
 $24 = sp + 172|0;
 $26 = sp + 60|0;
 $28 = sp + 124|0;
 $__i1$i$i = sp + 8|0;
 $31 = sp + 24|0;
 $34 = sp + 68|0;
 $it = sp + 136|0;
 $39 = sp + 84|0;
 $36 = $this;
 $37 = $key;
 $38 = $def;
 $40 = $36;
 $41 = (($40) + 20|0);
 $42 = $37;
 $32 = $41;
 $33 = $42;
 $43 = $32;
 $44 = $33;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($34,$43,$44);
 ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$31+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$34+3>>0]|0;
 $30 = $it;
 $45 = $30;
 ;HEAP8[$__i1$i$i+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$__i1$i$i+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$__i1$i$i+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$__i1$i$i+3>>0]=HEAP8[$31+3>>0]|0;
 $29 = $45;
 $46 = $29;
 ;HEAP32[$46+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $47 = (($40) + 20|0);
 $27 = $47;
 $48 = $27;
 $25 = $48;
 $22 = $24;
 $23 = -1;
 $49 = $22;
 $50 = $23;
 $20 = $49;
 $21 = $50;
 $51 = $20;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$24>>2]|0;
 HEAP32[$26>>2] = $52;
 $15 = $26;
 $18 = $28;
 $19 = 0;
 $53 = $18;
 $54 = $19;
 $16 = $53;
 $17 = $54;
 $55 = $16;
 $56 = $17;
 HEAP32[$55>>2] = $56;
 ;HEAP8[$14+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$28+3>>0]|0;
 $13 = $39;
 $57 = $13;
 ;HEAP8[$__i1$i$i1+0>>0]=HEAP8[$14+0>>0]|0;HEAP8[$__i1$i$i1+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$__i1$i$i1+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$__i1$i$i1+3>>0]=HEAP8[$14+3>>0]|0;
 $12 = $57;
 $58 = $12;
 ;HEAP32[$58+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $4 = $it;
 $5 = $39;
 $59 = $4;
 $60 = $5;
 $2 = $59;
 $3 = $60;
 $61 = $2;
 $62 = $3;
 $0 = $61;
 $1 = $62;
 $63 = $0;
 $64 = HEAP32[$63>>2]|0;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($64|0)==($66|0);
 $68 = $67 ^ 1;
 if ($68) {
  $11 = $it;
  $69 = $11;
  $10 = $69;
  $70 = $10;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 8|0);
  $9 = $72;
  $73 = $9;
  $8 = $73;
  $74 = $8;
  $7 = $74;
  $75 = $7;
  $6 = $75;
  $76 = $6;
  $77 = (($76) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $35 = $78;
  $80 = $35;
  STACKTOP = sp;return ($80|0);
 } else {
  $79 = $38;
  $35 = $79;
  $80 = $35;
  STACKTOP = sp;return ($80|0);
 }
 return 0|0;
}
function __ZN2cl8BufferGLD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl8BufferGLD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $__v = sp;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 4)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(578,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch(-1,-1)|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(579,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 }
 $48 = $11;
 $49 = $12;
 ___resumeException($48|0);
 // unreachable;
}
function __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($this,$context,$0,$1,$size,$host_ptr,$err) {
 $this = $this|0;
 $context = $context|0;
 $0 = $0|0;
 $1 = $1|0;
 $size = $size|0;
 $host_ptr = $host_ptr|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $2 = $this;
 $3 = $context;
 $8 = $4;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $5 = $size;
 $6 = $host_ptr;
 $7 = $err;
 $12 = $2;
 $13 = $4;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $3;
 __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($12,$22,$15,$18,$19,$20,$21);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(580,($3|0),(2992|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 56|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch(-1,-1)|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 56|0);
 __THREW__ = 0;
 invoke_vi(448,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolver4stepEff($this,$time,$deltaTime) {
 $this = $this|0;
 $time = +$time;
 $deltaTime = +$deltaTime;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $e = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $40 = sp + 316|0;
 $ss = sp + 128|0;
 $64 = sp + 404|0;
 $59 = $this;
 $60 = $time;
 $61 = $deltaTime;
 $65 = $59;
 $66 = $60;
 $67 = $61;
 __THREW__ = 0;
 invoke_vidd(581,($65|0),(+$66),(+$67));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = ___cxa_find_matching_catch(-1,-1,2488|0)|0;
 $71 = tempRet0;
 $62 = $70;
 $63 = $71;
 $72 = $63;
 $73 = (_llvm_eh_typeid_for((2488|0))|0);
 $74 = ($72|0)==($73|0);
 if (!($74)) {
  $281 = $62;
  $282 = $63;
  ___resumeException($281|0);
  // unreachable;
 }
 $75 = $62;
 $76 = (___cxa_begin_catch(($75|0))|0);
 $e = $76;
 $55 = $ss;
 $56 = 24;
 $77 = $55;
 $78 = (($77) + 64|0);
 $54 = $78;
 $79 = $54;
 $53 = $79;
 $80 = $53;
 $81 = (6704 + 8|0);
 HEAP32[$80>>2] = $81;
 $82 = (6304 + 8|0);
 HEAP32[$79>>2] = $82;
 $83 = (656 + 12|0);
 HEAP32[$77>>2] = $83;
 $84 = (($77) + 64|0);
 $85 = (656 + 52|0);
 HEAP32[$84>>2] = $85;
 $86 = (($77) + 8|0);
 $87 = (656 + 32|0);
 HEAP32[$86>>2] = $87;
 $88 = (($77) + 12|0);
 $50 = $77;
 $89 = (720 + 4|0);
 $51 = $89;
 $52 = $88;
 $90 = $50;
 $91 = $51;
 $92 = (($91) + 4|0);
 $93 = $52;
 $47 = $90;
 $48 = $92;
 $49 = $93;
 $94 = $47;
 $95 = $48;
 $96 = HEAP32[$95>>2]|0;
 HEAP32[$94>>2] = $96;
 $97 = (($95) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP32[$94>>2]|0;
 $100 = (($99) + -12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($94) + ($101)|0);
 HEAP32[$102>>2] = $98;
 $103 = (($94) + 4|0);
 HEAP32[$103>>2] = 0;
 $104 = HEAP32[$94>>2]|0;
 $105 = (($104) + -12|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($94) + ($106)|0);
 $108 = $49;
 $45 = $107;
 $46 = $108;
 $109 = $45;
 $110 = $46;
 __THREW__ = 0;
 invoke_vii(445,($109|0),($110|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 L9: do {
  if ($112) {
   $201 = ___cxa_find_matching_catch(-1,-1)|0;
   $202 = tempRet0;
   $57 = $201;
   $58 = $202;
   label = 23;
  } else {
   $113 = (($109) + 72|0);
   HEAP32[$113>>2] = 0;
   $114 = (($109) + 76|0);
   HEAP32[$114>>2] = -1;
   $115 = (($90) + 8|0);
   $116 = (($91) + 12|0);
   $43 = $115;
   $44 = $116;
   $117 = $43;
   $118 = $44;
   $119 = HEAP32[$118>>2]|0;
   HEAP32[$117>>2] = $119;
   $120 = (($118) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = HEAP32[$117>>2]|0;
   $123 = (($122) + -12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($117) + ($124)|0);
   HEAP32[$125>>2] = $121;
   $126 = HEAP32[$91>>2]|0;
   HEAP32[$90>>2] = $126;
   $127 = (($91) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = HEAP32[$90>>2]|0;
   $130 = (($129) + -12|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($90) + ($131)|0);
   HEAP32[$132>>2] = $128;
   $133 = (($91) + 24|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($90) + 8|0);
   HEAP32[$135>>2] = $134;
   $136 = (656 + 12|0);
   HEAP32[$77>>2] = $136;
   $137 = (($77) + 64|0);
   $138 = (656 + 52|0);
   HEAP32[$137>>2] = $138;
   $139 = (($77) + 8|0);
   $140 = (656 + 32|0);
   HEAP32[$139>>2] = $140;
   $141 = (($77) + 12|0);
   $142 = $56;
   $41 = $141;
   $42 = $142;
   $143 = $41;
   $144 = $42;
   $36 = $143;
   $37 = $144;
   $145 = $36;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($145);
   $146 = (992 + 8|0);
   HEAP32[$145>>2] = $146;
   $147 = (($145) + 32|0);
   $35 = $147;
   $148 = $35;
   $34 = $148;
   $149 = $34;
   $33 = $149;
   $150 = $33;
   $32 = $150;
   $151 = $32;
   $31 = $151;
   $152 = $31;
   $30 = $152;
   $29 = $149;
   $153 = $29;
   $28 = $153;
   $154 = $28;
   $27 = $154;
   $155 = $27;
   $__a$i$i$i$i$i$i = $155;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $156 = $__i$i$i$i$i$i$i;
    $157 = ($156>>>0)<(3);
    if (!($157)) {
     break;
    }
    $158 = $__i$i$i$i$i$i$i;
    $159 = $__a$i$i$i$i$i$i;
    $160 = (($159) + ($158<<2)|0);
    HEAP32[$160>>2] = 0;
    $161 = $__i$i$i$i$i$i$i;
    $162 = (($161) + 1)|0;
    $__i$i$i$i$i$i$i = $162;
   }
   $163 = (($145) + 44|0);
   HEAP32[$163>>2] = 0;
   $164 = (($145) + 48|0);
   $165 = $37;
   HEAP32[$164>>2] = $165;
   $26 = $40;
   $166 = $26;
   $25 = $166;
   $167 = $25;
   $24 = $167;
   $168 = $24;
   $23 = $168;
   $169 = $23;
   $22 = $169;
   $170 = $22;
   $21 = $170;
   $20 = $167;
   $171 = $20;
   $19 = $171;
   $172 = $19;
   $18 = $172;
   $173 = $18;
   $__a$i$i$i1$i$i$i = $173;
   $__i$i$i$i2$i$i$i = 0;
   while(1) {
    $174 = $__i$i$i$i2$i$i$i;
    $175 = ($174>>>0)<(3);
    if (!($175)) {
     break;
    }
    $176 = $__i$i$i$i2$i$i$i;
    $177 = $__a$i$i$i1$i$i$i;
    $178 = (($177) + ($176<<2)|0);
    HEAP32[$178>>2] = 0;
    $179 = $__i$i$i$i2$i$i$i;
    $180 = (($179) + 1)|0;
    $__i$i$i$i2$i$i$i = $180;
   }
   __THREW__ = 0;
   invoke_vii(446,($145|0),($40|0));
   $181 = __THREW__; __THREW__ = 0;
   $182 = $181&1;
   do {
    if ($182) {
     $187 = ___cxa_find_matching_catch(-1,-1)|0;
     $188 = tempRet0;
     $38 = $187;
     $39 = $188;
     __THREW__ = 0;
     invoke_vi(415,($40|0));
     $189 = __THREW__; __THREW__ = 0;
     $190 = $189&1;
     if ($190) {
      $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $200 = tempRet0;
      ___clang_call_terminate($199);
      // unreachable;
     } else {
      break;
     }
    } else {
     __THREW__ = 0;
     invoke_vi(415,($40|0));
     $183 = __THREW__; __THREW__ = 0;
     $184 = $183&1;
     if ($184) {
      $185 = ___cxa_find_matching_catch(-1,-1)|0;
      $186 = tempRet0;
      $38 = $185;
      $39 = $186;
      break;
     }
     $210 = (($ss) + 8|0);
     __THREW__ = 0;
     $211 = (invoke_iii(449,($210|0),(2504|0))|0);
     $212 = __THREW__; __THREW__ = 0;
     $213 = $212&1;
     do {
      if ($213) {
       label = 46;
      } else {
       $214 = $e;
       $215 = HEAP32[$214>>2]|0;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = (FUNCTION_TABLE_ii[$217 & 1023]($214)|0);
       __THREW__ = 0;
       $219 = (invoke_iii(449,($211|0),($218|0))|0);
       $220 = __THREW__; __THREW__ = 0;
       $221 = $220&1;
       if ($221) {
        label = 46;
       } else {
        __THREW__ = 0;
        $222 = (invoke_iii(449,($219|0),(2520|0))|0);
        $223 = __THREW__; __THREW__ = 0;
        $224 = $223&1;
        if ($224) {
         label = 46;
        } else {
         $225 = $e;
         __THREW__ = 0;
         $226 = (invoke_ii(550,($225|0))|0);
         $227 = __THREW__; __THREW__ = 0;
         $228 = $227&1;
         if ($228) {
          label = 46;
         } else {
          __THREW__ = 0;
          $229 = (invoke_iii(450,($222|0),($226|0))|0);
          $230 = __THREW__; __THREW__ = 0;
          $231 = $230&1;
          if ($231) {
           label = 46;
          } else {
           $16 = $229;
           $17 = 451;
           $232 = $16;
           $233 = $17;
           __THREW__ = 0;
           (invoke_ii($233|0,($232|0))|0);
           $234 = __THREW__; __THREW__ = 0;
           $235 = $234&1;
           if ($235) {
            label = 46;
           } else {
            $15 = $ss;
            $236 = $15;
            $237 = (($236) + 12|0);
            __THREW__ = 0;
            invoke_vii(452,($64|0),($237|0));
            $238 = __THREW__; __THREW__ = 0;
            $239 = $238&1;
            if ($239) {
             label = 46;
            } else {
             $14 = $64;
             $240 = $14;
             $13 = $240;
             $241 = $13;
             $12 = $241;
             $242 = $12;
             $11 = $242;
             $243 = $11;
             $10 = $243;
             $244 = $10;
             $9 = $244;
             $245 = $9;
             $246 = HEAP8[$245>>0]|0;
             $247 = $246&255;
             $248 = $247 & 1;
             $249 = ($248|0)!=(0);
             if ($249) {
              $3 = $242;
              $250 = $3;
              $2 = $250;
              $251 = $2;
              $1 = $251;
              $252 = $1;
              $253 = (($252) + 8|0);
              $254 = HEAP32[$253>>2]|0;
              $261 = $254;
             } else {
              $8 = $242;
              $255 = $8;
              $7 = $255;
              $256 = $7;
              $6 = $256;
              $257 = $6;
              $258 = (($257) + 1|0);
              $5 = $258;
              $259 = $5;
              $4 = $259;
              $260 = $4;
              $261 = $260;
             }
             $0 = $261;
             $262 = $0;
             __THREW__ = 0;
             invoke_viii(419,($262|0),(2528|0),172);
             $263 = __THREW__; __THREW__ = 0;
             $264 = $263&1;
             if ($264) {
              $273 = ___cxa_find_matching_catch(-1,-1)|0;
              $274 = tempRet0;
              $62 = $273;
              $63 = $274;
              __THREW__ = 0;
              invoke_vi(415,($64|0));
              $275 = __THREW__; __THREW__ = 0;
              $276 = $275&1;
              if ($276) {
               $283 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
               $284 = tempRet0;
               ___clang_call_terminate($283);
               // unreachable;
              } else {
               break;
              }
             }
             __THREW__ = 0;
             invoke_vi(415,($64|0));
             $265 = __THREW__; __THREW__ = 0;
             $266 = $265&1;
             if ($266) {
              label = 46;
             } else {
              __THREW__ = 0;
              invoke_vi(3,($ss|0));
              $267 = __THREW__; __THREW__ = 0;
              $268 = $267&1;
              if ($268) {
               $269 = ___cxa_find_matching_catch(-1,-1)|0;
               $270 = tempRet0;
               $eh$lpad$body$index2Z2D = $270;$eh$lpad$body$indexZ2D = $269;
               label = 45;
               break L9;
              }
              ___cxa_end_catch();
              STACKTOP = sp;return;
             }
            }
           }
          }
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 46) {
      $271 = ___cxa_find_matching_catch(-1,-1)|0;
      $272 = tempRet0;
      $62 = $271;
      $63 = $272;
     }
     __THREW__ = 0;
     invoke_vi(3,($ss|0));
     $277 = __THREW__; __THREW__ = 0;
     $278 = $277&1;
     if ($278) {
      $283 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $284 = tempRet0;
      ___clang_call_terminate($283);
      // unreachable;
     } else {
      break L9;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(415,($147|0));
   $191 = __THREW__; __THREW__ = 0;
   $192 = $191&1;
   if ($192) {
    $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $200 = tempRet0;
    ___clang_call_terminate($199);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(447,($145|0));
   $193 = __THREW__; __THREW__ = 0;
   $194 = $193&1;
   if ($194) {
    $199 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $200 = tempRet0;
    ___clang_call_terminate($199);
    // unreachable;
   }
   $195 = $38;
   $196 = $39;
   $57 = $195;
   $58 = $196;
   __THREW__ = 0;
   $197 = __THREW__; __THREW__ = 0;
   $198 = $197&1;
   if ($198) {
    $208 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $209 = tempRet0;
    ___clang_call_terminate($208);
    // unreachable;
   } else {
    label = 23;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $203 = (($77) + 64|0);
   __THREW__ = 0;
   invoke_vi(448,($203|0));
   $204 = __THREW__; __THREW__ = 0;
   $205 = $204&1;
   if ($205) {
    $208 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $209 = tempRet0;
    ___clang_call_terminate($208);
    // unreachable;
   } else {
    $206 = $57;
    $207 = $58;
    $eh$lpad$body$index2Z2D = $207;$eh$lpad$body$indexZ2D = $206;
    label = 45;
    break;
   }
  }
 } while(0);
 if ((label|0) == 45) {
  $62 = $eh$lpad$body$indexZ2D;
  $63 = $eh$lpad$body$index2Z2D;
 }
 __THREW__ = 0;
 invoke_v(463);
 $279 = __THREW__; __THREW__ = 0;
 $280 = $279&1;
 if ($280) {
  $283 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $284 = tempRet0;
  ___clang_call_terminate($283);
  // unreachable;
 }
 $281 = $62;
 $282 = $63;
 ___resumeException($281|0);
 // unreachable;
}
function __ZN27LorenzAttractorOpenCLSolver6__stepEff($this,$time,$deltaTime) {
 $this = $this|0;
 $time = +$time;
 $deltaTime = +$deltaTime;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $bInterop = 0, $baseColor = 0, $nParticles = 0, $par = 0, $rayDir = 0, $rayOrigin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $5 = sp + 200|0;
 $20 = sp + 132|0;
 $51 = sp + 276|0;
 $baseColor = sp + 296|0;
 $par = sp + 64|0;
 $54 = sp + 312|0;
 $rayOrigin = sp + 168|0;
 $rayDir = sp;
 $55 = sp + 52|0;
 $56 = sp + 184|0;
 $57 = sp + 328|0;
 $58 = sp + 16|0;
 $59 = sp + 40|0;
 $60 = sp + 188|0;
 $61 = sp + 360|0;
 $62 = sp + 56|0;
 $48 = $this;
 $49 = $time;
 $50 = $deltaTime;
 $63 = $48;
 $64 = (__ZN6global3parEv()|0);
 $46 = $51;
 $47 = 2728;
 $65 = $46;
 $66 = $47;
 $44 = $65;
 $45 = $66;
 $67 = $44;
 $43 = $67;
 $68 = $43;
 $42 = $68;
 $69 = $42;
 $41 = $69;
 $70 = $41;
 $40 = $70;
 $71 = $45;
 $72 = $45;
 $39 = $72;
 $73 = $39;
 $74 = (_strlen(($73|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$71,$74);
 __THREW__ = 0;
 $75 = (invoke_iiii(428,($64|0),($51|0),0)|0);
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $150 = ___cxa_find_matching_catch(-1,-1)|0;
  $151 = tempRet0;
  $52 = $150;
  $53 = $151;
  __THREW__ = 0;
  invoke_vi(415,($51|0));
  $152 = __THREW__; __THREW__ = 0;
  $153 = $152&1;
  if ($153) {
   $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $268 = tempRet0;
   ___clang_call_terminate($267);
   // unreachable;
  }
  $265 = $52;
  $266 = $53;
  ___resumeException($265|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($51);
 $nParticles = $75;
 $78 = $49;
 $79 = $78 * 0.109999999403953552246;
 $80 = (+Math_sin((+$79)));
 $81 = 0.20000000298023223877 * $80;
 $82 = 0.5 + $81;
 HEAPF32[$baseColor>>2] = $82;
 $83 = (($baseColor) + 4|0);
 $84 = $49;
 $85 = $84 * 0.140000000596046447754;
 $86 = (+Math_sin((+$85)));
 $87 = 0.20000000298023223877 * $86;
 $88 = 0.5 + $87;
 HEAPF32[$83>>2] = $88;
 $89 = (($83) + 4|0);
 $90 = $49;
 $91 = $90 * 0.189999997615814208984;
 $92 = (+Math_cos((+$91)));
 $93 = 0.20000000298023223877 * $92;
 $94 = 0.5 + $93;
 HEAPF32[$89>>2] = $94;
 $95 = (($89) + 4|0);
 $96 = $nParticles;
 $97 = (($96|0) / 1000000)&-1;
 $98 = (+($97|0));
 $99 = 1.0 + $98;
 $100 = 0.5 / $99;
 HEAPF32[$95>>2] = $100;
 $101 = $49;
 $102 = $101 * 0.100000001490116119385;
 $103 = (+Math_sin((+$102)));
 $104 = 10.0 * $103;
 $105 = $49;
 $106 = $105 * 0.27000001072883605957;
 $107 = (+Math_cos((+$106)));
 $108 = $104 * $107;
 $109 = 15.0 + $108;
 HEAPF32[$par>>2] = $109;
 $110 = (($par) + 4|0);
 $111 = $49;
 $112 = $111 * 0.129999995231628417969;
 $113 = (+Math_sin((+$112)));
 $114 = 2.0 * $113;
 $115 = $49;
 $116 = $115 * 0.230000004172325134277;
 $117 = (+Math_cos((+$116)));
 $118 = $114 * $117;
 $119 = 2.66666674613952636719 + $118;
 HEAPF32[$110>>2] = $119;
 $120 = (($110) + 4|0);
 $121 = $49;
 $122 = $121 * 0.170000001788139343262;
 $123 = (+Math_sin((+$122)));
 $124 = 5.0 * $123;
 $125 = $49;
 $126 = $125 * 0.109999999403953552246;
 $127 = (+Math_cos((+$126)));
 $128 = $124 * $127;
 $129 = 28.0 + $128;
 HEAPF32[$120>>2] = $129;
 $130 = (($120) + 4|0);
 HEAPF32[$130>>2] = 0.0500000007450580596924;
 $131 = (__ZN6global3parEv()|0);
 $37 = $54;
 $38 = 2744;
 $132 = $37;
 $133 = $38;
 $35 = $132;
 $36 = $133;
 $134 = $35;
 $34 = $134;
 $135 = $34;
 $33 = $135;
 $136 = $33;
 $32 = $136;
 $137 = $32;
 $31 = $137;
 $138 = $36;
 $139 = $36;
 $30 = $139;
 $140 = $30;
 $141 = (_strlen(($140|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($134,$138,$141);
 __THREW__ = 0;
 $142 = (invoke_iii(432,($131|0),($54|0))|0);
 $143 = __THREW__; __THREW__ = 0;
 $144 = $143&1;
 if ($144) {
  $154 = ___cxa_find_matching_catch(-1,-1)|0;
  $155 = tempRet0;
  $52 = $154;
  $53 = $155;
  __THREW__ = 0;
  invoke_vi(415,($54|0));
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $268 = tempRet0;
   ___clang_call_terminate($267);
   // unreachable;
  }
  $265 = $52;
  $266 = $53;
  ___resumeException($265|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
 $145 = $142&1;
 $bInterop = $145;
 $146 = $bInterop;
 $147 = $146&1;
 if ($147) {
  $148 = (($63) + 16|0);
  $149 = (($63) + 32|0);
  (__ZNK2cl12CommandQueue23enqueueAcquireGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($148,$149,0,0)|0);
 }
 $158 = (__ZN11Application3getEv()|0);
 __ZNK11Application12getCursorRayEPfS0_($158,$rayOrigin,$rayDir);
 $159 = (($63) + 12|0);
 $160 = (($63) + 20|0);
 __ZN2cl6BufferC1ERKS0_($55,$160);
 __THREW__ = 0;
 (invoke_iiii(582,($159|0),0,($55|0))|0);
 $161 = __THREW__; __THREW__ = 0;
 $162 = $161&1;
 if ($162) {
  $188 = ___cxa_find_matching_catch(-1,-1)|0;
  $189 = tempRet0;
  $52 = $188;
  $53 = $189;
  __THREW__ = 0;
  invoke_vi(542,($55|0));
  $190 = __THREW__; __THREW__ = 0;
  $191 = $190&1;
  if ($191) {
   $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $268 = tempRet0;
   ___clang_call_terminate($267);
   // unreachable;
  }
  $265 = $52;
  $266 = $53;
  ___resumeException($265|0);
  // unreachable;
 }
 __ZN2cl6BufferD1Ev($55);
 $163 = (($63) + 12|0);
 $164 = (($63) + 24|0);
 __ZN2cl6BufferC1ERKS0_($56,$164);
 __THREW__ = 0;
 (invoke_iiii(582,($163|0),1,($56|0))|0);
 $165 = __THREW__; __THREW__ = 0;
 $166 = $165&1;
 if ($166) {
  $192 = ___cxa_find_matching_catch(-1,-1)|0;
  $193 = tempRet0;
  $52 = $192;
  $53 = $193;
  __THREW__ = 0;
  invoke_vi(542,($56|0));
  $194 = __THREW__; __THREW__ = 0;
  $195 = $194&1;
  if ($195) {
   $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $268 = tempRet0;
   ___clang_call_terminate($267);
   // unreachable;
  }
  $265 = $52;
  $266 = $53;
  ___resumeException($265|0);
  // unreachable;
 }
 __ZN2cl6BufferD1Ev($56);
 $167 = (($63) + 12|0);
 $168 = (($63) + 28|0);
 __ZN2cl6BufferC1ERKS0_($57,$168);
 __THREW__ = 0;
 (invoke_iiii(582,($167|0),2,($57|0))|0);
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $196 = ___cxa_find_matching_catch(-1,-1)|0;
  $197 = tempRet0;
  $52 = $196;
  $53 = $197;
  __THREW__ = 0;
  invoke_vi(542,($57|0));
  $198 = __THREW__; __THREW__ = 0;
  $199 = $198&1;
  if ($199) {
   $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $268 = tempRet0;
   ___clang_call_terminate($267);
   // unreachable;
  }
  $265 = $52;
  $266 = $53;
  ___resumeException($265|0);
  // unreachable;
 }
 __ZN2cl6BufferD1Ev($57);
 $171 = (($63) + 12|0);
 (__ZN2cl6Kernel6setArgEjjPv($171,3,16,$baseColor)|0);
 $172 = (($63) + 12|0);
 (__ZN2cl6Kernel6setArgEjjPv($172,4,16,$par)|0);
 $173 = (($63) + 12|0);
 (__ZN2cl6Kernel6setArgEjjPv($173,5,16,$rayOrigin)|0);
 $174 = (($63) + 12|0);
 (__ZN2cl6Kernel6setArgEjjPv($174,6,16,$rayDir)|0);
 $175 = (($63) + 12|0);
 $176 = $49;
 (__ZN2cl6Kernel6setArgIfEEijT_($175,7,$176)|0);
 $177 = (($63) + 12|0);
 $178 = $50;
 (__ZN2cl6Kernel6setArgIfEEijT_($177,8,$178)|0);
 $179 = (($63) + 16|0);
 $180 = (($63) + 12|0);
 $181 = $nParticles;
 __ZN2cl7NDRangeC1Ej($58,$181);
 __THREW__ = 0;
 (invoke_iiiiiiii(583,($179|0),($180|0),(2424|0),($58|0),(2424|0),(0|0),(0|0))|0);
 $182 = __THREW__; __THREW__ = 0;
 $183 = $182&1;
 if ($183) {
  $200 = ___cxa_find_matching_catch(-1,-1)|0;
  $201 = tempRet0;
  $52 = $200;
  $53 = $201;
  __THREW__ = 0;
  invoke_vi(536,($58|0));
  $202 = __THREW__; __THREW__ = 0;
  $203 = $202&1;
  if ($203) {
   $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $268 = tempRet0;
   ___clang_call_terminate($267);
   // unreachable;
  }
  $265 = $52;
  $266 = $53;
  ___resumeException($265|0);
  // unreachable;
 }
 __ZN2cl7NDRangeD1Ev($58);
 $184 = $bInterop;
 $185 = $184&1;
 if ($185) {
  $186 = (($63) + 16|0);
  $187 = (($63) + 32|0);
  (__ZNK2cl12CommandQueue23enqueueReleaseGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($186,$187,0,0)|0);
 }
 $204 = (($63) + 16|0);
 (__ZNK2cl12CommandQueue6finishEv($204)|0);
 $205 = $bInterop;
 $206 = $205&1;
 if ($206) {
  STACKTOP = sp;return;
 }
 $207 = (($63) + 16|0);
 $208 = (($63) + 20|0);
 $209 = $nParticles;
 $210 = $209<<2;
 $211 = $210<<2;
 $212 = (__ZN6global3parEv()|0);
 $28 = $59;
 $29 = 2784;
 $213 = $28;
 $214 = $29;
 $26 = $213;
 $27 = $214;
 $215 = $26;
 $25 = $215;
 $216 = $25;
 $24 = $216;
 $217 = $24;
 $23 = $217;
 $218 = $23;
 $22 = $218;
 $219 = $27;
 $220 = $27;
 $21 = $220;
 $221 = $21;
 $222 = (_strlen(($221|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($215,$219,$222);
 $18 = $20;
 $19 = -1;
 $223 = $18;
 $224 = $19;
 $16 = $223;
 $17 = $224;
 $225 = $16;
 HEAP32[$225>>2] = 0;
 $226 = HEAP32[$20>>2]|0;
 HEAP32[$60>>2] = $226;
 $15 = $60;
 __THREW__ = 0;
 $227 = (invoke_iiii(511,($212|0),($59|0),(0|0))|0);
 $228 = __THREW__; __THREW__ = 0;
 $229 = $228&1;
 if (!($229)) {
  __THREW__ = 0;
  (invoke_iiiiiiiii(584,($207|0),($208|0),1,0,($211|0),($227|0),(0|0),(0|0))|0);
  $230 = __THREW__; __THREW__ = 0;
  $231 = $230&1;
  if (!($231)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
   $232 = (($63) + 16|0);
   $233 = (($63) + 24|0);
   $234 = $nParticles;
   $235 = $234<<2;
   $236 = $235<<2;
   $237 = (__ZN6global3parEv()|0);
   $13 = $61;
   $14 = 2792;
   $238 = $13;
   $239 = $14;
   $11 = $238;
   $12 = $239;
   $240 = $11;
   $10 = $240;
   $241 = $10;
   $9 = $241;
   $242 = $9;
   $8 = $242;
   $243 = $8;
   $7 = $243;
   $244 = $12;
   $245 = $12;
   $6 = $245;
   $246 = $6;
   $247 = (_strlen(($246|0))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($240,$244,$247);
   $3 = $5;
   $4 = -1;
   $248 = $3;
   $249 = $4;
   $1 = $248;
   $2 = $249;
   $250 = $1;
   HEAP32[$250>>2] = 0;
   $251 = HEAP32[$5>>2]|0;
   HEAP32[$62>>2] = $251;
   $0 = $62;
   __THREW__ = 0;
   $252 = (invoke_iiii(511,($237|0),($61|0),(0|0))|0);
   $253 = __THREW__; __THREW__ = 0;
   $254 = $253&1;
   if (!($254)) {
    __THREW__ = 0;
    (invoke_iiiiiiiii(584,($232|0),($233|0),1,0,($236|0),($252|0),(0|0),(0|0))|0);
    $255 = __THREW__; __THREW__ = 0;
    $256 = $255&1;
    if (!($256)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($61);
     STACKTOP = sp;return;
    }
   }
   $261 = ___cxa_find_matching_catch(-1,-1)|0;
   $262 = tempRet0;
   $52 = $261;
   $53 = $262;
   __THREW__ = 0;
   invoke_vi(415,($61|0));
   $263 = __THREW__; __THREW__ = 0;
   $264 = $263&1;
   if ($264) {
    $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $268 = tempRet0;
    ___clang_call_terminate($267);
    // unreachable;
   }
   $265 = $52;
   $266 = $53;
   ___resumeException($265|0);
   // unreachable;
  }
 }
 $257 = ___cxa_find_matching_catch(-1,-1)|0;
 $258 = tempRet0;
 $52 = $257;
 $53 = $258;
 __THREW__ = 0;
 invoke_vi(415,($59|0));
 $259 = __THREW__; __THREW__ = 0;
 $260 = $259&1;
 if ($260) {
  $267 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $268 = tempRet0;
  ___clang_call_terminate($267);
  // unreachable;
 }
 $265 = $52;
 $266 = $53;
 ___resumeException($265|0);
 // unreachable;
}
function __ZNK2cl12CommandQueue23enqueueAcquireGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($this,$mem_objects,$events,$event) {
 $this = $this|0;
 $mem_objects = $mem_objects|0;
 $events = $events|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = $this;
 $6 = $mem_objects;
 $7 = $events;
 $8 = $event;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $6;
  $4 = $13;
  $14 = $4;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$14>>2]|0;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 4)&-1;
  $54 = $21;
 } else {
  $54 = 0;
 }
 $22 = $6;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $6;
  $3 = $24;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $55 = $26;
 } else {
  $55 = 0;
 }
 $27 = $7;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $7;
  $0 = $29;
  $30 = $0;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$30>>2]|0;
  $34 = $32;
  $35 = $33;
  $36 = (($34) - ($35))|0;
  $37 = (($36|0) / 4)&-1;
  $56 = $37;
 } else {
  $56 = 0;
 }
 $38 = $7;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $7;
  $1 = $40;
  $41 = $1;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$41>>2]|0;
  $45 = $43;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = (($47|0) / 4)&-1;
  $49 = ($48>>>0)>(0);
  if ($49) {
   $50 = $7;
   $2 = $50;
   $51 = $2;
   $52 = HEAP32[$51>>2]|0;
   $57 = $52;
   $53 = $8;
   $58 = (_clEnqueueAcquireGLObjects(($10|0),($54|0),($55|0),($56|0),($57|0),($53|0))|0);
   $59 = (__ZN2cl6detailL10errHandlerEiPKc($58,3256)|0);
   STACKTOP = sp;return ($59|0);
  }
 }
 $57 = 0;
 $53 = $8;
 $58 = (_clEnqueueAcquireGLObjects(($10|0),($54|0),($55|0),($56|0),($57|0),($53|0))|0);
 $59 = (__ZN2cl6detailL10errHandlerEiPKc($58,3256)|0);
 STACKTOP = sp;return ($59|0);
}
function __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($this,$index,$value) {
 $this = $this|0;
 $index = $index|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($value)|0);
 $6 = (__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value)|0);
 $7 = (_clSetKernelArg(($3|0),($4|0),($5|0),($6|0))|0);
 $8 = (__ZN2cl6detailL10errHandlerEiPKc($7,2880)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN2cl6BufferC1ERKS0_($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $buffer;
 $2 = $0;
 $3 = $1;
 __ZN2cl6BufferC2ERKS0_($2,$3);
 STACKTOP = sp;return;
}
function __ZN2cl6Kernel6setArgEjjPv($this,$index,$size,$argPtr) {
 $this = $this|0;
 $index = $index|0;
 $size = $size|0;
 $argPtr = $argPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $index;
 $2 = $size;
 $3 = $argPtr;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = (_clSetKernelArg(($5|0),($6|0),($7|0),($8|0))|0);
 $10 = (__ZN2cl6detailL10errHandlerEiPKc($9,2880)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN2cl6Kernel6setArgIfEEijT_($this,$index,$value) {
 $this = $this|0;
 $index = $index|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $0 = $this;
 $1 = $index;
 HEAPF32[$2>>2] = $value;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (__ZN2cl6detail21KernelArgumentHandlerIfE4sizeERKf($2)|0);
 $7 = (__ZN2cl6detail21KernelArgumentHandlerIfE3ptrERf($2)|0);
 $8 = (_clSetKernelArg(($4|0),($5|0),($6|0),($7|0))|0);
 $9 = (__ZN2cl6detailL10errHandlerEiPKc($8,2880)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNSt3__16vectorINS_5EventENS7_9allocatorIS9_EEEEPS9_($this,$kernel,$offset,$global,$local,$events,$event) {
 $this = $this|0;
 $kernel = $kernel|0;
 $offset = $offset|0;
 $global = $global|0;
 $local = $local|0;
 $events = $events|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = $this;
 $4 = $kernel;
 $5 = $offset;
 $6 = $global;
 $7 = $local;
 $8 = $events;
 $9 = $event;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = (__ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($12)|0);
 $14 = $6;
 $15 = (__ZNK2cl7NDRange10dimensionsEv($14)|0);
 $16 = $5;
 $17 = (__ZNK2cl7NDRange10dimensionsEv($16)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $5;
  $20 = (__ZNK2cl7NDRangecvPKjEv($19)|0);
  $55 = $20;
 } else {
  $55 = 0;
 }
 $21 = $6;
 $22 = (__ZNK2cl7NDRangecvPKjEv($21)|0);
 $23 = $7;
 $24 = (__ZNK2cl7NDRange10dimensionsEv($23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $7;
  $27 = (__ZNK2cl7NDRangecvPKjEv($26)|0);
  $56 = $27;
 } else {
  $56 = 0;
 }
 $28 = $8;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $8;
  $2 = $30;
  $31 = $2;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$31>>2]|0;
  $35 = $33;
  $36 = $34;
  $37 = (($35) - ($36))|0;
  $38 = (($37|0) / 4)&-1;
  $57 = $38;
 } else {
  $57 = 0;
 }
 $39 = $8;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $8;
  $1 = $41;
  $42 = $1;
  $43 = (($42) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$42>>2]|0;
  $46 = $44;
  $47 = $45;
  $48 = (($46) - ($47))|0;
  $49 = (($48|0) / 4)&-1;
  $50 = ($49>>>0)>(0);
  if ($50) {
   $51 = $8;
   $0 = $51;
   $52 = $0;
   $53 = HEAP32[$52>>2]|0;
   $58 = $53;
   $54 = $9;
   $59 = (_clEnqueueNDRangeKernel(($11|0),($13|0),($15|0),($55|0),($22|0),($56|0),($57|0),($58|0),($54|0))|0);
   $60 = (__ZN2cl6detailL10errHandlerEiPKc($59,3232)|0);
   STACKTOP = sp;return ($60|0);
  }
 }
 $58 = 0;
 $54 = $9;
 $59 = (_clEnqueueNDRangeKernel(($11|0),($13|0),($15|0),($55|0),($22|0),($56|0),($57|0),($58|0),($54|0))|0);
 $60 = (__ZN2cl6detailL10errHandlerEiPKc($59,3232)|0);
 STACKTOP = sp;return ($60|0);
}
function __ZN2cl7NDRangeC1Ej($this,$size0) {
 $this = $this|0;
 $size0 = $size0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $size0;
 $2 = $0;
 $3 = $1;
 __ZN2cl7NDRangeC2Ej($2,$3);
 STACKTOP = sp;return;
}
function __ZNK2cl12CommandQueue23enqueueReleaseGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($this,$mem_objects,$events,$event) {
 $this = $this|0;
 $mem_objects = $mem_objects|0;
 $events = $events|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = $this;
 $6 = $mem_objects;
 $7 = $events;
 $8 = $event;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $6;
  $4 = $13;
  $14 = $4;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$14>>2]|0;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 4)&-1;
  $54 = $21;
 } else {
  $54 = 0;
 }
 $22 = $6;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $6;
  $3 = $24;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $55 = $26;
 } else {
  $55 = 0;
 }
 $27 = $7;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $7;
  $0 = $29;
  $30 = $0;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$30>>2]|0;
  $34 = $32;
  $35 = $33;
  $36 = (($34) - ($35))|0;
  $37 = (($36|0) / 4)&-1;
  $56 = $37;
 } else {
  $56 = 0;
 }
 $38 = $7;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $7;
  $1 = $40;
  $41 = $1;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$41>>2]|0;
  $45 = $43;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = (($47|0) / 4)&-1;
  $49 = ($48>>>0)>(0);
  if ($49) {
   $50 = $7;
   $2 = $50;
   $51 = $2;
   $52 = HEAP32[$51>>2]|0;
   $57 = $52;
   $53 = $8;
   $58 = (_clEnqueueReleaseGLObjects(($10|0),($54|0),($55|0),($56|0),($57|0),($53|0))|0);
   $59 = (__ZN2cl6detailL10errHandlerEiPKc($58,3200)|0);
   STACKTOP = sp;return ($59|0);
  }
 }
 $57 = 0;
 $53 = $8;
 $58 = (_clEnqueueReleaseGLObjects(($10|0),($54|0),($55|0),($56|0),($57|0),($53|0))|0);
 $59 = (__ZN2cl6detailL10errHandlerEiPKc($58,3200)|0);
 STACKTOP = sp;return ($59|0);
}
function __ZNK2cl12CommandQueue6finishEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_clFinish(($2|0))|0);
 $4 = (__ZN2cl6detailL10errHandlerEiPKc($3,3184)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event) {
 $this = $this|0;
 $buffer = $buffer|0;
 $blocking = $blocking|0;
 $offset = $offset|0;
 $size = $size|0;
 $ptr = $ptr|0;
 $events = $events|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = $this;
 $4 = $buffer;
 $5 = $blocking;
 $6 = $offset;
 $7 = $size;
 $8 = $ptr;
 $9 = $events;
 $10 = $event;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = (__ZNK2cl6detail7WrapperIP7_cl_memEclEv($13)|0);
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $9;
  $2 = $21;
  $22 = $2;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$22>>2]|0;
  $26 = $24;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = (($28|0) / 4)&-1;
  $46 = $29;
 } else {
  $46 = 0;
 }
 $30 = $9;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $9;
  $1 = $32;
  $33 = $1;
  $34 = (($33) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$33>>2]|0;
  $37 = $35;
  $38 = $36;
  $39 = (($37) - ($38))|0;
  $40 = (($39|0) / 4)&-1;
  $41 = ($40>>>0)>(0);
  if ($41) {
   $42 = $9;
   $0 = $42;
   $43 = $0;
   $44 = HEAP32[$43>>2]|0;
   $47 = $44;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $47 = 0;
 }
 $45 = $10;
 $48 = (_clEnqueueReadBuffer(($12|0),($14|0),($15|0),($16|0),($17|0),($18|0),($46|0),($47|0),($45|0))|0);
 $49 = (__ZN2cl6detailL10errHandlerEiPKc($48,3160)|0);
 STACKTOP = sp;return ($49|0);
}
function __ZN2cl6detailL10errHandlerEiPKc($err,$errStr) {
 $err = $err|0;
 $errStr = $errStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $err;
 $1 = $errStr;
 $4 = $0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $6 = (___cxa_allocate_exception(12)|0);
 $7 = $0;
 $8 = $1;
 __THREW__ = 0;
 invoke_viii(585,($6|0),($7|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if ($10) {
   $13 = ___cxa_find_matching_catch(-1,-1,2488|0)|0;
   $14 = tempRet0;
   $2 = $13;
   $3 = $14;
   ___cxa_free_exception(($6|0));
  } else {
   __THREW__ = 0;
   invoke_viii(454,($6|0),(2488|0),(64|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $15 = ___cxa_find_matching_catch(-1,-1,2488|0)|0;
    $16 = tempRet0;
    $2 = $15;
    $3 = $16;
    break;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $17 = $3;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = $2;
  ___cxa_call_unexpected(($19|0));
  // unreachable;
 } else {
  $21 = $2;
  $22 = $3;
  ___resumeException($21|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN2cl6detail21KernelArgumentHandlerIfE4sizeERKf($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerIfE3ptrERf($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $value;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN2cl5ErrorC1EiPKc($this,$err,$errStr) {
 $this = $this|0;
 $err = $err|0;
 $errStr = $errStr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $err;
 $2 = $errStr;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN2cl5ErrorC2EiPKc($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC2EiPKc($this,$err,$errStr) {
 $this = $this|0;
 $err = $err|0;
 $errStr = $errStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $err;
 $3 = $errStr;
 $4 = $1;
 $0 = $4;
 $5 = $0;
 $6 = (__ZTVSt9exception + 8|0);
 HEAP32[$5>>2] = $6;
 $7 = (2896 + 8|0);
 HEAP32[$4>>2] = $7;
 $8 = (($4) + 4|0);
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = (($4) + 8|0);
 $11 = $3;
 HEAP32[$10>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl5ErrorD1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK2cl5Error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 2920;
 } else {
  $6 = (($2) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $value;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0;
 var $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 100|0;
 $23 = sp + 12|0;
 $__v = sp + 60|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if ($100) {
  label = 12;
 } else {
  $101 = $2;
  __THREW__ = 0;
  invoke_vii(570,($99|0),($101|0));
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if (!($103)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $104 = (($__v) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 4|0);
  HEAP32[$104>>2] = $106;
  __THREW__ = 0;
  invoke_vii(578,($32|0),($__v|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if (!($108)) {
   __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $109 = ___cxa_find_matching_catch(-1,-1)|0;
 $110 = tempRet0;
 $30 = $109;
 $31 = $110;
 __THREW__ = 0;
 invoke_vi(579,($__v|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $115 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 }
 $113 = $30;
 $114 = $31;
 ___resumeException($113|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC2EjjS5_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 80|0;
 $__t$i = sp + 60|0;
 $35 = $this;
 $36 = $__v;
 $37 = $35;
 $34 = $37;
 $38 = $34;
 $39 = (($38) + 8|0);
 $33 = $39;
 $40 = $33;
 $32 = $40;
 $41 = $32;
 $42 = HEAP32[$37>>2]|0;
 $43 = (($37) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $36;
 $46 = (($45) + 4|0);
 $6 = $41;
 $7 = $42;
 $8 = $44;
 $9 = $46;
 while(1) {
  $47 = $8;
  $48 = $7;
  $49 = ($47|0)!=($48|0);
  if (!($49)) {
   break;
  }
  $50 = $6;
  $51 = $9;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  $5 = $53;
  $54 = $5;
  $55 = $8;
  $56 = (($55) + -4|0);
  $8 = $56;
  $1 = $56;
  $57 = $1;
  $0 = $57;
  $58 = $0;
  $2 = $50;
  $3 = $54;
  $4 = $58;
  $59 = $3;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = $4;
   __ZN2cl6MemoryC1ERKS0_($59,$61);
  }
  $62 = $9;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + -4|0);
  HEAP32[$62>>2] = $64;
 }
 $65 = $36;
 $66 = (($65) + 4|0);
 $13 = $37;
 $14 = $66;
 $67 = $13;
 $12 = $67;
 $68 = $12;
 $69 = HEAP32[$68>>2]|0;
 HEAP32[$__t$i2>>2] = $69;
 $70 = $14;
 $10 = $70;
 $71 = $10;
 $72 = HEAP32[$71>>2]|0;
 $73 = $13;
 HEAP32[$73>>2] = $72;
 $11 = $__t$i2;
 $74 = $11;
 $75 = HEAP32[$74>>2]|0;
 $76 = $14;
 HEAP32[$76>>2] = $75;
 $77 = (($37) + 4|0);
 $78 = $36;
 $79 = (($78) + 8|0);
 $18 = $77;
 $19 = $79;
 $80 = $18;
 $17 = $80;
 $81 = $17;
 $82 = HEAP32[$81>>2]|0;
 HEAP32[$__t$i1>>2] = $82;
 $83 = $19;
 $15 = $83;
 $84 = $15;
 $85 = HEAP32[$84>>2]|0;
 $86 = $18;
 HEAP32[$86>>2] = $85;
 $16 = $__t$i1;
 $87 = $16;
 $88 = HEAP32[$87>>2]|0;
 $89 = $19;
 HEAP32[$89>>2] = $88;
 $22 = $37;
 $90 = $22;
 $91 = (($90) + 8|0);
 $21 = $91;
 $92 = $21;
 $20 = $92;
 $93 = $20;
 $94 = $36;
 $25 = $94;
 $95 = $25;
 $96 = (($95) + 12|0);
 $24 = $96;
 $97 = $24;
 $23 = $97;
 $98 = $23;
 $29 = $93;
 $30 = $98;
 $99 = $29;
 $28 = $99;
 $100 = $28;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$__t$i>>2] = $101;
 $102 = $30;
 $26 = $102;
 $103 = $26;
 $104 = HEAP32[$103>>2]|0;
 $105 = $29;
 HEAP32[$105>>2] = $104;
 $27 = $__t$i;
 $106 = $27;
 $107 = HEAP32[$106>>2]|0;
 $108 = $30;
 HEAP32[$108>>2] = $107;
 $109 = $36;
 $110 = (($109) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $36;
 HEAP32[$112>>2] = $111;
 $31 = $37;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $16 = sp;
 $19 = sp + 128|0;
 $27 = sp + 8|0;
 $30 = sp + 129|0;
 $32 = $this;
 $33 = $32;
 $31 = $33;
 $34 = $31;
 $35 = (($34) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $28 = $34;
 $29 = $36;
 $37 = $28;
 $38 = $29;
 ;HEAP8[$27+0>>0]=HEAP8[$30+0>>0]|0;
 $23 = $37;
 $24 = $38;
 $39 = $23;
 while(1) {
  $40 = $24;
  $41 = (($39) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($40|0)!=($42|0);
  if (!($43)) {
   break;
  }
  $22 = $39;
  $44 = $22;
  $45 = (($44) + 12|0);
  $21 = $45;
  $46 = $21;
  $20 = $46;
  $47 = $20;
  $48 = (($47) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($39) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + -4|0);
  HEAP32[$50>>2] = $52;
  $13 = $52;
  $53 = $13;
  $17 = $49;
  $18 = $53;
  $54 = $17;
  $55 = $18;
  ;HEAP8[$16+0>>0]=HEAP8[$19+0>>0]|0;
  $14 = $54;
  $15 = $55;
  $56 = $15;
  __THREW__ = 0;
  invoke_vi(586,($56|0));
  $57 = __THREW__; __THREW__ = 0;
  $58 = $57&1;
  if ($58) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $25 = $59;
  $26 = $60;
  $61 = $25;
  ___cxa_call_unexpected(($61|0));
  // unreachable;
 }
 $62 = HEAP32[$33>>2]|0;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $64 = $12;
 $65 = (($64) + 12|0);
 $11 = $65;
 $66 = $11;
 $10 = $66;
 $67 = $10;
 $68 = (($67) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$33>>2]|0;
 $9 = $33;
 $71 = $9;
 $8 = $71;
 $72 = $8;
 $73 = (($72) + 12|0);
 $7 = $73;
 $74 = $7;
 $6 = $74;
 $75 = $6;
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$71>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 4)&-1;
 $3 = $69;
 $4 = $70;
 $5 = $81;
 $82 = $3;
 $83 = $4;
 $84 = $5;
 $0 = $82;
 $1 = $83;
 $2 = $84;
 $85 = $1;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6MemoryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP7_cl_memED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP7_cl_memED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($memory) {
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $memory;
 $1 = $0;
 $2 = (_clReleaseMemObject(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $4 = sp + 156|0;
 $8 = sp + 28|0;
 $26 = sp + 100|0;
 $35 = sp + 16|0;
 $40 = sp;
 $41 = sp + 8|0;
 $36 = $this;
 $37 = $__cap;
 $38 = $__start;
 $39 = $__a;
 $42 = $36;
 $43 = (($42) + 12|0);
 $33 = $35;
 $34 = -1;
 $44 = $33;
 $45 = $34;
 $31 = $44;
 $32 = $45;
 $46 = $31;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$35>>2]|0;
 HEAP32[$40>>2] = $47;
 $16 = $40;
 $48 = $39;
 $10 = $43;
 $11 = 0;
 $12 = $48;
 $49 = $10;
 $50 = $11;
 $51 = $12;
 $7 = $49;
 HEAP32[$8>>2] = $50;
 $9 = $51;
 $52 = $7;
 $6 = $8;
 $53 = $6;
 $54 = HEAP32[$53>>2]|0;
 $55 = $9;
 $0 = $55;
 $56 = $0;
 $3 = $52;
 HEAP32[$4>>2] = $54;
 $5 = $56;
 $57 = $3;
 $2 = $4;
 $58 = $2;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = (($57) + 4|0);
 $61 = $5;
 $1 = $61;
 $62 = $1;
 HEAP32[$60>>2] = $62;
 $63 = $37;
 $64 = ($63|0)!=(0);
 if ($64) {
  $15 = $42;
  $65 = $15;
  $66 = (($65) + 12|0);
  $14 = $66;
  $67 = $14;
  $13 = $67;
  $68 = $13;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $37;
  $20 = $70;
  $21 = $71;
  $72 = $20;
  $73 = $21;
  $17 = $72;
  $18 = $73;
  $19 = 0;
  $74 = $18;
  $75 = $74<<2;
  $76 = (__Znwj($75)|0);
  $81 = $76;
 } else {
  $24 = $26;
  $25 = -1;
  $77 = $24;
  $78 = $25;
  $22 = $77;
  $23 = $78;
  $79 = $22;
  HEAP32[$79>>2] = 0;
  $80 = HEAP32[$26>>2]|0;
  HEAP32[$41>>2] = $80;
  $27 = $41;
  $81 = 0;
 }
 HEAP32[$42>>2] = $81;
 $82 = HEAP32[$42>>2]|0;
 $83 = $38;
 $84 = (($82) + ($83<<2)|0);
 $85 = (($42) + 8|0);
 HEAP32[$85>>2] = $84;
 $86 = (($42) + 4|0);
 HEAP32[$86>>2] = $84;
 $87 = HEAP32[$42>>2]|0;
 $88 = $37;
 $89 = (($87) + ($88<<2)|0);
 $30 = $42;
 $90 = $30;
 $91 = (($90) + 12|0);
 $29 = $91;
 $92 = $29;
 $28 = $92;
 $93 = $28;
 HEAP32[$93>>2] = $89;
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryC1ERKS0_($this,$memory) {
 $this = $this|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $memory;
 $2 = $0;
 $3 = $1;
 __ZN2cl6MemoryC2ERKS0_($2,$3);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryC2ERKS0_($this,$memory) {
 $this = $this|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $memory;
 $2 = $0;
 $3 = $1;
 __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($2,$3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($2)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($memory) {
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $memory;
 $1 = $0;
 $2 = (_clRetainMemObject(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl7Program12getBuildInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEiRKNS_6DeviceEjPT_($this,$device,$name,$param) {
 $this = $this|0;
 $device = $device|0;
 $name = $name|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $0 = $this;
 $1 = $device;
 $2 = $name;
 $3 = $param;
 $5 = $0;
 $6 = $1;
 $7 = (__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($6)|0);
 HEAP32[$4>>2] = $7;
 $8 = $2;
 $9 = $3;
 $10 = (__ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEiT_RKT0_RKT1_jPT2_(587,$5,$4,$8,$9)|0);
 $11 = (__ZN2cl6detailL10errHandlerEiPKc($10,2928)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp + 4|0;
 $f0 = sp + 20|0;
 $5 = sp + 40|0;
 $0 = $f;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $name;
 $4 = $param;
 $6 = $0;
 HEAP32[$f0>>2] = $6;
 $7 = (($f0) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = (($f0) + 8|0);
 $10 = $2;
 HEAP32[$9>>2] = $10;
 ;HEAP32[$5+0>>2]=HEAP32[$f0+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$f0+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$f0+8>>2]|0;
 $11 = $3;
 $12 = $4;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;
 $13 = (__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEE3getESB_jPSI_($$byval_copy,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEE3getESB_jPSI_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $required = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $required = sp;
 $3 = $name;
 $4 = $param;
 $5 = $3;
 $6 = (__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$5,0,0,$required)|0);
 $err = $6;
 $7 = $err;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $err;
  $2 = $9;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $10 = HEAP32[$required>>2]|0;
 $11 = STACKTOP; STACKTOP = STACKTOP + ((((1*$10)|0)+15)&-16)|0;
 $value = $11;
 $12 = $3;
 $13 = HEAP32[$required>>2]|0;
 $14 = $value;
 $15 = (__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$12,$13,$14,0)|0);
 $err = $15;
 $16 = $err;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $err;
  $2 = $18;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $19 = $4;
  $20 = $value;
  $0 = $19;
  $1 = $20;
  $21 = $0;
  $22 = $1;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($21,$22)|0);
  $2 = 0;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $param;
 $2 = $size;
 $3 = $value;
 $4 = $size_ret;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($5) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($5) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = (FUNCTION_TABLE_iiiiiii[$6 & 1023]($9,$12,$13,$14,$15,$16)|0);
 STACKTOP = sp;return ($17|0);
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC2EjRKS4_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $14 = sp + 56|0;
 $20 = sp + 168|0;
 $26 = sp + 104|0;
 $31 = sp + 124|0;
 $34 = sp + 136|0;
 $39 = sp;
 $40 = sp + 8|0;
 $41 = sp + 148|0;
 $42 = $this;
 $43 = $__n;
 $44 = $__x;
 $47 = $42;
 $38 = $47;
 $48 = $38;
 $37 = $48;
 $12 = $14;
 $13 = -1;
 $49 = $12;
 $50 = $13;
 $10 = $49;
 $11 = $50;
 $51 = $10;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$14>>2]|0;
 HEAP32[$39>>2] = $52;
 $15 = $39;
 HEAP32[$48>>2] = 0;
 $53 = (($48) + 4|0);
 $18 = $20;
 $19 = -1;
 $54 = $18;
 $55 = $19;
 $16 = $54;
 $17 = $55;
 $56 = $16;
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$20>>2]|0;
 HEAP32[$40>>2] = $57;
 $21 = $40;
 HEAP32[$53>>2] = 0;
 $58 = (($48) + 8|0);
 $24 = $26;
 $25 = -1;
 $59 = $24;
 $60 = $25;
 $22 = $59;
 $23 = $60;
 $61 = $22;
 HEAP32[$61>>2] = 0;
 $62 = HEAP32[$26>>2]|0;
 HEAP32[$41>>2] = $62;
 $27 = $41;
 $35 = $58;
 $36 = 0;
 $63 = $35;
 $64 = $36;
 $33 = $63;
 HEAP32[$34>>2] = $64;
 $65 = $33;
 $32 = $34;
 $66 = $32;
 $67 = HEAP32[$66>>2]|0;
 $30 = $65;
 HEAP32[$31>>2] = $67;
 $68 = $30;
 $29 = $68;
 $28 = $31;
 $69 = $28;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$68>>2] = $70;
 $71 = $43;
 $72 = ($71>>>0)>(0);
 if (!($72)) {
  STACKTOP = sp;return;
 }
 $73 = $43;
 __THREW__ = 0;
 invoke_vii(588,($47|0),($73|0));
 $74 = __THREW__; __THREW__ = 0;
 $75 = $74&1;
 if ($75) {
  $98 = ___cxa_find_matching_catch(-1,-1)|0;
  $99 = tempRet0;
  $45 = $98;
  $46 = $99;
  __THREW__ = 0;
  invoke_vi(589,($47|0));
  $100 = __THREW__; __THREW__ = 0;
  $101 = $100&1;
  if ($101) {
   $104 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $105 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
  $102 = $45;
  $103 = $46;
  ___resumeException($102|0);
  // unreachable;
 }
 $76 = $43;
 $77 = $44;
 $7 = $47;
 $8 = $76;
 $9 = $77;
 $78 = $7;
 $6 = $78;
 $79 = $6;
 $80 = (($79) + 8|0);
 $5 = $80;
 $81 = $5;
 $4 = $81;
 $82 = $4;
 $__a$i = $82;
 while(1) {
  $83 = $__a$i;
  $84 = (($78) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $0 = $85;
  $86 = $0;
  $87 = $9;
  $1 = $83;
  $2 = $86;
  $3 = $87;
  $88 = $2;
  $89 = ($88|0)==(0|0);
  if (!($89)) {
   $90 = $3;
   ;HEAP32[$88+0>>2]=HEAP32[$90+0>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;
  }
  $91 = (($78) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + 8|0);
  HEAP32[$91>>2] = $93;
  $94 = $8;
  $95 = (($94) + -1)|0;
  $8 = $95;
  $96 = $8;
  $97 = ($96>>>0)>(0);
  if (!($97)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $11 = $this;
 $12 = $__n;
 $13 = $11;
 $14 = $12;
 $15 = (__ZNKSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8max_sizeEv($13)|0);
 $16 = ($14>>>0)>($15>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($13);
 }
 $10 = $13;
 $17 = $10;
 $18 = (($17) + 8|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $21 = $12;
 $3 = $20;
 $4 = $21;
 $22 = $3;
 $23 = $4;
 $0 = $22;
 $1 = $23;
 $2 = 0;
 $24 = $1;
 $25 = $24<<3;
 $26 = (__Znwj($25)|0);
 $27 = (($13) + 4|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$13>>2] = $26;
 $28 = HEAP32[$13>>2]|0;
 $29 = $12;
 $30 = (($28) + ($29<<3)|0);
 $7 = $13;
 $31 = $7;
 $32 = (($31) + 8|0);
 $6 = $32;
 $33 = $6;
 $5 = $33;
 $34 = $5;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp;
 $6 = sp + 132|0;
 $31 = sp + 88|0;
 $33 = sp + 20|0;
 $32 = $this;
 $34 = $32;
 $35 = HEAP32[$34>>2]|0;
 $29 = $31;
 $30 = -1;
 $36 = $29;
 $37 = $30;
 $27 = $36;
 $28 = $37;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$31>>2]|0;
 HEAP32[$33>>2] = $39;
 $20 = $33;
 $40 = ($35|0)!=(0|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $12 = $34;
 $41 = $12;
 $42 = HEAP32[$41>>2]|0;
 $10 = $41;
 $11 = $42;
 $43 = $10;
 while(1) {
  $44 = $11;
  $45 = (($43) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($44|0)!=($46|0);
  if (!($47)) {
   break;
  }
  $9 = $43;
  $48 = $9;
  $49 = (($48) + 8|0);
  $8 = $49;
  $50 = $8;
  $7 = $50;
  $51 = $7;
  $52 = (($43) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -8|0);
  HEAP32[$52>>2] = $54;
  $0 = $54;
  $55 = $0;
  $4 = $51;
  $5 = $55;
  $56 = $4;
  $57 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $56;
  $2 = $57;
 }
 $15 = $34;
 $58 = $15;
 $59 = (($58) + 8|0);
 $14 = $59;
 $60 = $14;
 $13 = $60;
 $61 = $13;
 $62 = HEAP32[$34>>2]|0;
 $19 = $34;
 $63 = $19;
 $18 = $63;
 $64 = $18;
 $65 = (($64) + 8|0);
 $17 = $65;
 $66 = $17;
 $16 = $66;
 $67 = $16;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 8)&-1;
 $24 = $61;
 $25 = $62;
 $26 = $73;
 $74 = $24;
 $75 = $25;
 $76 = $26;
 $21 = $74;
 $22 = $75;
 $23 = $76;
 $77 = $22;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 536870911;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(67,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($4) + 4|0);
 __THREW__ = 0;
 invoke_vi(23,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1)|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 $20 = $2;
 $21 = $3;
 ___resumeException($20|0);
 // unreachable;
}
function __ZNK2cl7Context7getInfoINSt3__16vectorINS_6DeviceENS2_9allocatorIS4_EEEEEEijPT_($this,$name,$param) {
 $this = $this|0;
 $name = $name|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $name;
 $2 = $param;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN2cl6detail7getInfoIPFiP11_cl_contextjjPvPjES3_NSt3__16vectorINS_6DeviceENS8_9allocatorISA_EEEEEEiT_RKT0_jPT1_(590,$3,$4,$5)|0);
 $7 = (__ZN2cl6detailL10errHandlerEiPKc($6,3136)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN2cl6detail7getInfoIPFiP11_cl_contextjjPvPjES3_NSt3__16vectorINS_6DeviceENS8_9allocatorISA_EEEEEEiT_RKT0_jPT1_($f,$arg0,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 16|0;
 $f0 = sp;
 $4 = sp + 24|0;
 $0 = $f;
 $1 = $arg0;
 $2 = $name;
 $3 = $param;
 $5 = $0;
 HEAP32[$f0>>2] = $5;
 $6 = (($f0) + 4|0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$4+0>>2]=HEAP32[$f0+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$f0+4>>2]|0;
 $8 = $2;
 $9 = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 $10 = (__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES4_EENSt3__16vectorINS_6DeviceENSA_9allocatorISC_EEEEE3getES9_jPSF_($$byval_copy,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES4_EENSt3__16vectorINS_6DeviceENSA_9allocatorISC_EEEEE3getES9_jPSF_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $required = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $required = sp + 8|0;
 $1 = $name;
 $2 = $param;
 $3 = $1;
 $4 = (__ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($f,$3,0,0,$required)|0);
 $err = $4;
 $5 = $err;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $err;
  $0 = $7;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $8 = HEAP32[$required>>2]|0;
 $9 = STACKTOP; STACKTOP = STACKTOP + ((((1*$8)|0)+15)&-16)|0;
 $value = $9;
 $10 = $1;
 $11 = HEAP32[$required>>2]|0;
 $12 = $value;
 $13 = (__ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($f,$10,$11,$12,0)|0);
 $err = $13;
 $14 = $err;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $err;
  $0 = $16;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $17 = $2;
  $18 = $value;
  $19 = HEAP32[$required>>2]|0;
  $20 = (($19>>>0) / 4)&-1;
  $21 = $value;
  $22 = (($21) + ($20<<2)|0);
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($17,$18,$22);
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function __ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $param;
 $2 = $size;
 $3 = $value;
 $4 = $size_ret;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($5) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = (FUNCTION_TABLE_iiiiii[$6 & 1023]($9,$10,$11,$12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0, $__mid = 0, $__ms$i = 0, $__new_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $3 = sp + 24|0;
 $6 = sp + 276|0;
 $27 = sp;
 $30 = sp + 278|0;
 $37 = sp + 16|0;
 $40 = sp + 279|0;
 $48 = sp + 200|0;
 $49 = sp + 212|0;
 $58 = sp + 8|0;
 $61 = sp + 280|0;
 $__mid = sp + 252|0;
 $62 = $this;
 $63 = $__first;
 $64 = $__last;
 $65 = $62;
 $66 = $63;
 $67 = $64;
 $59 = $66;
 $60 = $67;
 $68 = $59;
 $69 = $60;
 ;HEAP8[$58+0>>0]=HEAP8[$61+0>>0]|0;
 $56 = $68;
 $57 = $69;
 $70 = $57;
 $71 = $56;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 4)&-1;
 $__new_size = $75;
 $76 = $__new_size;
 $55 = $65;
 $77 = $55;
 $54 = $77;
 $78 = $54;
 $53 = $78;
 $79 = $53;
 $80 = (($79) + 8|0);
 $52 = $80;
 $81 = $52;
 $51 = $81;
 $82 = $51;
 $83 = HEAP32[$82>>2]|0;
 $84 = HEAP32[$78>>2]|0;
 $85 = $83;
 $86 = $84;
 $87 = (($85) - ($86))|0;
 $88 = (($87|0) / 4)&-1;
 $89 = ($76>>>0)<=($88>>>0);
 if (!($89)) {
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE10deallocateEv($65);
  $163 = $__new_size;
  $47 = $65;
  HEAP32[$48>>2] = $163;
  $164 = $47;
  $165 = (__ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($164)|0);
  $__ms$i = $165;
  $166 = HEAP32[$48>>2]|0;
  $167 = $__ms$i;
  $168 = ($166>>>0)>($167>>>0);
  if ($168) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($164);
  }
  $45 = $164;
  $169 = $45;
  $44 = $169;
  $170 = $44;
  $43 = $170;
  $171 = $43;
  $172 = (($171) + 8|0);
  $42 = $172;
  $173 = $42;
  $41 = $173;
  $174 = $41;
  $175 = HEAP32[$174>>2]|0;
  $176 = HEAP32[$170>>2]|0;
  $177 = $175;
  $178 = $176;
  $179 = (($177) - ($178))|0;
  $180 = (($179|0) / 4)&-1;
  $__cap$i = $180;
  $181 = $__cap$i;
  $182 = $__ms$i;
  $183 = (($182>>>0) / 2)&-1;
  $184 = ($181>>>0)>=($183>>>0);
  if ($184) {
   $185 = $__ms$i;
   $46 = $185;
  } else {
   $186 = $__cap$i;
   $187 = $186<<1;
   HEAP32[$49>>2] = $187;
   $38 = $49;
   $39 = $48;
   $188 = $38;
   $189 = $39;
   ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
   $35 = $188;
   $36 = $189;
   $190 = $35;
   $191 = $36;
   $32 = $37;
   $33 = $190;
   $34 = $191;
   $192 = $33;
   $193 = HEAP32[$192>>2]|0;
   $194 = $34;
   $195 = HEAP32[$194>>2]|0;
   $196 = ($193>>>0)<($195>>>0);
   if ($196) {
    $197 = $36;
    $200 = $197;
   } else {
    $198 = $35;
    $200 = $198;
   }
   $199 = HEAP32[$200>>2]|0;
   $46 = $199;
  }
  $201 = $46;
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8allocateEj($65,$201);
  $202 = $63;
  $203 = $64;
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($65,$202,$203);
  STACKTOP = sp;return;
 }
 $90 = $64;
 HEAP32[$__mid>>2] = $90;
 $__growing = 0;
 $91 = $__new_size;
 $50 = $65;
 $92 = $50;
 $93 = (($92) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$92>>2]|0;
 $96 = $94;
 $97 = $95;
 $98 = (($96) - ($97))|0;
 $99 = (($98|0) / 4)&-1;
 $100 = ($91>>>0)>($99>>>0);
 if ($100) {
  $__growing = 1;
  $101 = $63;
  HEAP32[$__mid>>2] = $101;
  $31 = $65;
  $102 = $31;
  $103 = (($102) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$102>>2]|0;
  $106 = $104;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 4)&-1;
  $28 = $__mid;
  $29 = $109;
  $110 = $28;
  $111 = $29;
  ;HEAP8[$27+0>>0]=HEAP8[$30+0>>0]|0;
  $25 = $110;
  $26 = $111;
  $112 = $26;
  $113 = $25;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($112<<2)|0);
  HEAP32[$113>>2] = $115;
 }
 $116 = $63;
 $117 = HEAP32[$__mid>>2]|0;
 $118 = HEAP32[$65>>2]|0;
 $22 = $116;
 $23 = $117;
 $24 = $118;
 $119 = $22;
 $21 = $119;
 $120 = $21;
 $121 = $23;
 $17 = $121;
 $122 = $17;
 $123 = $24;
 $16 = $123;
 $124 = $16;
 $18 = $120;
 $19 = $122;
 $20 = $124;
 while(1) {
  $125 = $18;
  $126 = $19;
  $127 = ($125|0)!=($126|0);
  if (!($127)) {
   break;
  }
  $128 = $20;
  $129 = $18;
  (__ZN2cl6DeviceaSERKS0_($128,$129)|0);
  $130 = $18;
  $131 = (($130) + 4|0);
  $18 = $131;
  $132 = $20;
  $133 = (($132) + 4|0);
  $20 = $133;
 }
 $134 = $20;
 $__m = $134;
 $135 = $__growing;
 $136 = $135&1;
 do {
  if ($136) {
   $137 = HEAP32[$__mid>>2]|0;
   $138 = $64;
   __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($65,$137,$138);
  } else {
   $139 = $__m;
   $14 = $65;
   $15 = $139;
   $140 = $14;
   $141 = $15;
   $10 = $140;
   $11 = $141;
   $142 = $10;
   while(1) {
    $143 = $11;
    $144 = (($142) + 4|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($143|0)!=($145|0);
    if (!($146)) {
     label = 14;
     break;
    }
    $9 = $142;
    $147 = $9;
    $148 = (($147) + 8|0);
    $8 = $148;
    $149 = $8;
    $7 = $149;
    $150 = $7;
    $151 = (($142) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + -4|0);
    HEAP32[$151>>2] = $153;
    $0 = $153;
    $154 = $0;
    $4 = $150;
    $5 = $154;
    $155 = $4;
    $156 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $155;
    $2 = $156;
    $157 = $2;
    __THREW__ = 0;
    invoke_vi(591,($157|0));
    $158 = __THREW__; __THREW__ = 0;
    $159 = $158&1;
    if ($159) {
     label = 13;
     break;
    }
   }
   if ((label|0) == 13) {
    $160 = ___cxa_find_matching_catch(-1,-1)|0;
    $161 = tempRet0;
    $12 = $160;
    $13 = $161;
    $162 = $12;
    ___cxa_call_unexpected(($162|0));
    // unreachable;
   }
   else if ((label|0) == 14) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = (($11) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $__a;
  $19 = (($10) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
  $21 = $0;
  $22 = $8;
  $1 = $18;
  $2 = $21;
  $3 = $22;
  $23 = $2;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $3;
   __ZN2cl6DeviceC1ERKS0_($23,$25);
  }
  $26 = (($10) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 4|0);
  HEAP32[$26>>2] = $28;
  $29 = $8;
  $30 = (($29) + 4|0);
  $8 = $30;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $4 = sp;
 $7 = sp + 200|0;
 $36 = sp + 140|0;
 $45 = sp + 156|0;
 $49 = sp + 188|0;
 $50 = sp + 24|0;
 $46 = $this;
 $51 = $46;
 $52 = HEAP32[$51>>2]|0;
 $43 = $45;
 $44 = -1;
 $53 = $43;
 $54 = $44;
 $41 = $53;
 $42 = $54;
 $55 = $41;
 HEAP32[$55>>2] = 0;
 $56 = HEAP32[$45>>2]|0;
 HEAP32[$49>>2] = $56;
 $25 = $49;
 $57 = ($52|0)!=(0|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $16 = $51;
 $58 = $16;
 $15 = $58;
 $59 = $15;
 $60 = HEAP32[$59>>2]|0;
 $11 = $59;
 $12 = $60;
 $61 = $11;
 while(1) {
  $62 = $12;
  $63 = (($61) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62|0)!=($64|0);
  if (!($65)) {
   break;
  }
  $10 = $61;
  $66 = $10;
  $67 = (($66) + 8|0);
  $9 = $67;
  $68 = $9;
  $8 = $68;
  $69 = $8;
  $70 = (($61) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + -4|0);
  HEAP32[$70>>2] = $72;
  $1 = $72;
  $73 = $1;
  $5 = $69;
  $6 = $73;
  $74 = $5;
  $75 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $74;
  $3 = $75;
  $76 = $3;
  __THREW__ = 0;
  invoke_vi(591,($76|0));
  $77 = __THREW__; __THREW__ = 0;
  $78 = $77&1;
  if ($78) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $13 = $79;
  $14 = $80;
  $81 = $13;
  ___cxa_call_unexpected(($81|0));
  // unreachable;
 }
 $0 = $58;
 $19 = $51;
 $82 = $19;
 $83 = (($82) + 8|0);
 $18 = $83;
 $84 = $18;
 $17 = $84;
 $85 = $17;
 $86 = HEAP32[$51>>2]|0;
 $24 = $51;
 $87 = $24;
 $23 = $87;
 $88 = $23;
 $22 = $88;
 $89 = $22;
 $90 = (($89) + 8|0);
 $21 = $90;
 $91 = $21;
 $20 = $91;
 $92 = $20;
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$88>>2]|0;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $98 = (($97|0) / 4)&-1;
 $29 = $85;
 $30 = $86;
 $31 = $98;
 $99 = $29;
 $100 = $30;
 $101 = $31;
 $26 = $99;
 $27 = $100;
 $28 = $101;
 $102 = $27;
 __ZdlPv($102);
 $34 = $36;
 $35 = -1;
 $103 = $34;
 $104 = $35;
 $32 = $103;
 $33 = $104;
 $105 = $32;
 HEAP32[$105>>2] = 0;
 $106 = HEAP32[$36>>2]|0;
 HEAP32[$50>>2] = $106;
 $37 = $50;
 $40 = $51;
 $107 = $40;
 $108 = (($107) + 8|0);
 $39 = $108;
 $109 = $39;
 $38 = $109;
 $110 = $38;
 HEAP32[$110>>2] = 0;
 $111 = (($51) + 4|0);
 HEAP32[$111>>2] = 0;
 HEAP32[$51>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $11 = $this;
 $12 = $__n;
 $13 = $11;
 $14 = $12;
 $15 = (__ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($13)|0);
 $16 = ($14>>>0)>($15>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($13);
 }
 $10 = $13;
 $17 = $10;
 $18 = (($17) + 8|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $21 = $12;
 $3 = $20;
 $4 = $21;
 $22 = $3;
 $23 = $4;
 $0 = $22;
 $1 = $23;
 $2 = 0;
 $24 = $1;
 $25 = $24<<2;
 $26 = (__Znwj($25)|0);
 $27 = (($13) + 4|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$13>>2] = $26;
 $28 = HEAP32[$13>>2]|0;
 $29 = $12;
 $30 = (($28) + ($29<<2)|0);
 $7 = $13;
 $31 = $7;
 $32 = (($31) + 8|0);
 $6 = $32;
 $33 = $6;
 $5 = $33;
 $34 = $5;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZN2cl6DeviceD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6DeviceD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $0;
 STACKTOP = sp;return -33;
}
function __ZN2cl6DeviceC1ERKS0_($this,$device) {
 $this = $this|0;
 $device = $device|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $device;
 $2 = $0;
 $3 = $1;
 __ZN2cl6DeviceC2ERKS0_($2,$3);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceC2ERKS0_($this,$device) {
 $this = $this|0;
 $device = $device|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $device;
 $2 = $0;
 $3 = $1;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4_($2,$3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($2)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $0;
 STACKTOP = sp;return -33;
}
function __ZN2cl6DeviceaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6detail7WrapperIP7_cl_memEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl7NDRangeC2Ej($this,$size0) {
 $this = $this|0;
 $size0 = $size0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp + 8|0;
 $0 = $this;
 HEAP32[$1>>2] = $size0;
 $4 = $0;
 __ZN2cl6size_tILi3EEC1Ev($4);
 $5 = (($4) + 20|0);
 HEAP32[$5>>2] = 1;
 __THREW__ = 0;
 invoke_vii(592,($4|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch(-1,-1)|0;
 $9 = tempRet0;
 $2 = $8;
 $3 = $9;
 __THREW__ = 0;
 invoke_vi(593,($4|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $2;
 $13 = $3;
 ___resumeException($12|0);
 // unreachable;
}
function __ZN2cl6size_tILi3EEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6size_tILi3EEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EE9push_backERKj($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $x;
 $2 = $0;
 $3 = (__ZNK2cl6vectorIjLj3EE4sizeEv($2)|0);
 $4 = ($3>>>0)<(3);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($2) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($2) + ($11<<2)|0);
 HEAP32[$12>>2] = $9;
 $13 = (($2) + 16|0);
 HEAP8[$13>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6size_tILi3EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6vectorIjLj3EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorIjLj3EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl6size_tILi3EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6vectorIjLj3EEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 HEAP32[$2>>2] = -1;
 $3 = (($1) + 16|0);
 HEAP8[$3>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl7NDRange10dimensionsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl7NDRangecvPKjEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK2cl6vectorIjLj3EEcvPKjEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6vectorIjLj3EEcvPKjEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN2cl6BufferC2ERKS0_($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $buffer;
 $2 = $0;
 $3 = $1;
 __ZN2cl6MemoryC2ERKS0_($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp;
 $6 = sp + 140|0;
 $33 = sp + 4|0;
 $35 = sp + 20|0;
 $34 = $this;
 $36 = $34;
 $37 = HEAP32[$36>>2]|0;
 $31 = $33;
 $32 = -1;
 $38 = $31;
 $39 = $32;
 $29 = $38;
 $30 = $39;
 $40 = $29;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$33>>2]|0;
 HEAP32[$35>>2] = $41;
 $22 = $35;
 $42 = ($37|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $14 = $36;
 $43 = $14;
 $44 = HEAP32[$43>>2]|0;
 $10 = $43;
 $11 = $44;
 $45 = $10;
 while(1) {
  $46 = $11;
  $47 = (($45) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($46|0)!=($48|0);
  if (!($49)) {
   break;
  }
  $9 = $45;
  $50 = $9;
  $51 = (($50) + 8|0);
  $8 = $51;
  $52 = $8;
  $7 = $52;
  $53 = $7;
  $54 = (($45) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -4|0);
  HEAP32[$54>>2] = $56;
  $0 = $56;
  $57 = $0;
  $4 = $53;
  $5 = $57;
  $58 = $4;
  $59 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $58;
  $2 = $59;
  $60 = $2;
  __THREW__ = 0;
  invoke_vi(594,($60|0));
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $12 = $63;
  $13 = $64;
  $65 = $12;
  ___cxa_call_unexpected(($65|0));
  // unreachable;
 }
 $17 = $36;
 $66 = $17;
 $67 = (($66) + 8|0);
 $16 = $67;
 $68 = $16;
 $15 = $68;
 $69 = $15;
 $70 = HEAP32[$36>>2]|0;
 $21 = $36;
 $71 = $21;
 $20 = $71;
 $72 = $20;
 $73 = (($72) + 8|0);
 $19 = $73;
 $74 = $19;
 $18 = $74;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$71>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 4)&-1;
 $26 = $69;
 $27 = $70;
 $28 = $81;
 $82 = $26;
 $83 = $27;
 $84 = $28;
 $23 = $82;
 $24 = $83;
 $25 = $84;
 $85 = $24;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl8PlatformD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $0;
 STACKTOP = sp;return -32;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp;
 $6 = sp + 140|0;
 $33 = sp + 4|0;
 $35 = sp + 20|0;
 $34 = $this;
 $36 = $34;
 $37 = HEAP32[$36>>2]|0;
 $31 = $33;
 $32 = -1;
 $38 = $31;
 $39 = $32;
 $29 = $38;
 $30 = $39;
 $40 = $29;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$33>>2]|0;
 HEAP32[$35>>2] = $41;
 $22 = $35;
 $42 = ($37|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $14 = $36;
 $43 = $14;
 $44 = HEAP32[$43>>2]|0;
 $10 = $43;
 $11 = $44;
 $45 = $10;
 while(1) {
  $46 = $11;
  $47 = (($45) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($46|0)!=($48|0);
  if (!($49)) {
   break;
  }
  $9 = $45;
  $50 = $9;
  $51 = (($50) + 8|0);
  $8 = $51;
  $52 = $8;
  $7 = $52;
  $53 = $7;
  $54 = (($45) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -4|0);
  HEAP32[$54>>2] = $56;
  $0 = $56;
  $57 = $0;
  $4 = $53;
  $5 = $57;
  $58 = $4;
  $59 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $58;
  $2 = $59;
  $60 = $2;
  __THREW__ = 0;
  invoke_vi(591,($60|0));
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $12 = $63;
  $13 = $64;
  $65 = $12;
  ___cxa_call_unexpected(($65|0));
  // unreachable;
 }
 $17 = $36;
 $66 = $17;
 $67 = (($66) + 8|0);
 $16 = $67;
 $68 = $16;
 $15 = $68;
 $69 = $15;
 $70 = HEAP32[$36>>2]|0;
 $21 = $36;
 $71 = $21;
 $20 = $71;
 $72 = $20;
 $73 = (($72) + 8|0);
 $19 = $73;
 $74 = $19;
 $18 = $74;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$71>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 4)&-1;
 $26 = $69;
 $27 = $70;
 $28 = $81;
 $82 = $26;
 $83 = $27;
 $84 = $28;
 $23 = $82;
 $24 = $83;
 $25 = $84;
 $85 = $24;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($this,$context,$0,$1,$size,$host_ptr,$err) {
 $this = $this|0;
 $context = $context|0;
 $0 = $0|0;
 $1 = $1|0;
 $size = $size|0;
 $host_ptr = $host_ptr|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp;
 $error = sp + 16|0;
 $2 = $this;
 $3 = $context;
 $10 = $4;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $5 = $size;
 $6 = $host_ptr;
 $7 = $err;
 $14 = $2;
 __ZN2cl6MemoryC2Ev($14);
 $15 = $3;
 __THREW__ = 0;
 $16 = (invoke_ii(595,($15|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  $19 = $4;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = $6;
  __THREW__ = 0;
  $27 = (invoke_iiiiiii(596,($16|0),($21|0),($24|0),($25|0),($26|0),($error|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   HEAP32[$14>>2] = $27;
   $30 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(597,($30|0),(3288|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    $33 = $7;
    $34 = ($33|0)!=(0|0);
    if (!($34)) {
     STACKTOP = sp;return;
    }
    $35 = HEAP32[$error>>2]|0;
    $36 = $7;
    HEAP32[$36>>2] = $35;
    STACKTOP = sp;return;
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 $8 = $37;
 $9 = $38;
 __THREW__ = 0;
 invoke_vi(598,($14|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 }
 $41 = $8;
 $42 = $9;
 ___resumeException($41|0);
 // unreachable;
}
function __ZN2cl6MemoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl8BufferGLD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6BufferD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6MemoryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl8BufferGLC2ERKNS_7ContextEyjPi($this,$context,$0,$1,$bufobj,$err) {
 $this = $this|0;
 $context = $context|0;
 $0 = $0|0;
 $1 = $1|0;
 $bufobj = $bufobj|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp;
 $error = sp + 8|0;
 $2 = $this;
 $3 = $context;
 $9 = $4;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $5 = $bufobj;
 $6 = $err;
 $13 = $2;
 __ZN2cl6BufferC2Ev($13);
 $14 = $3;
 __THREW__ = 0;
 $15 = (invoke_ii(595,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  $18 = $4;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $5;
  __THREW__ = 0;
  $25 = (invoke_iiiiii(599,($15|0),($20|0),($23|0),($24|0),($error|0))|0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if (!($27)) {
   HEAP32[$13>>2] = $25;
   $28 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(597,($28|0),(3304|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    $31 = $6;
    $32 = ($31|0)!=(0|0);
    if (!($32)) {
     STACKTOP = sp;return;
    }
    $33 = HEAP32[$error>>2]|0;
    $34 = $6;
    HEAP32[$34>>2] = $33;
    STACKTOP = sp;return;
   }
  }
 }
 $35 = ___cxa_find_matching_catch(-1,-1)|0;
 $36 = tempRet0;
 $7 = $35;
 $8 = $36;
 __THREW__ = 0;
 invoke_vi(600,($13|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $41 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 }
 $39 = $7;
 $40 = $8;
 ___resumeException($39|0);
 // unreachable;
}
function __ZN2cl6BufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6MemoryC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP7_cl_memEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP7_cl_memEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$0,$1,$err) {
 $this = $this|0;
 $context = $context|0;
 $device = $device|0;
 $0 = $0|0;
 $1 = $1|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp;
 $error = sp + 8|0;
 $2 = $this;
 $3 = $context;
 $4 = $device;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $6 = $err;
 $13 = $2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($13);
 $14 = $3;
 __THREW__ = 0;
 $15 = (invoke_ii(595,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  $18 = $4;
  __THREW__ = 0;
  $19 = (invoke_ii(601,($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = $5;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iiiiii(602,($15|0),($19|0),($24|0),($27|0),($error|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    HEAP32[$13>>2] = $28;
    $31 = HEAP32[$error>>2]|0;
    __THREW__ = 0;
    (invoke_iii(597,($31|0),(3328|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $34 = $6;
     $35 = ($34|0)!=(0|0);
     if (!($35)) {
      STACKTOP = sp;return;
     }
     $36 = HEAP32[$error>>2]|0;
     $37 = $6;
     HEAP32[$37>>2] = $36;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $38 = ___cxa_find_matching_catch(-1,-1)|0;
 $39 = tempRet0;
 $7 = $38;
 $8 = $39;
 __THREW__ = 0;
 invoke_vi(603,($13|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $44 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $45 = tempRet0;
  ___clang_call_terminate($44);
  // unreachable;
 }
 $42 = $7;
 $43 = $8;
 ___resumeException($42|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($queue) {
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $queue;
 $1 = $0;
 $2 = (_clReleaseCommandQueue(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP17_cl_command_queueE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6detail7WrapperIP17_cl_command_queueE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE6retainES3_($queue) {
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $queue;
 $1 = $0;
 $2 = (_clRetainCommandQueue(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($this,$program,$name,$err) {
 $this = $this|0;
 $program = $program|0;
 $name = $name|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 4|0;
 $0 = $this;
 $1 = $program;
 $2 = $name;
 $3 = $err;
 $6 = $0;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($6);
 $7 = $1;
 __THREW__ = 0;
 $8 = (invoke_ii(604,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = $2;
  __THREW__ = 0;
  $12 = (invoke_iiii(605,($8|0),($11|0),($error|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   HEAP32[$6>>2] = $12;
   $15 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(597,($15|0),(3352|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    $18 = $3;
    $19 = ($18|0)!=(0|0);
    if (!($19)) {
     STACKTOP = sp;return;
    }
    $20 = HEAP32[$error>>2]|0;
    $21 = $3;
    HEAP32[$21>>2] = $20;
    STACKTOP = sp;return;
   }
  }
 }
 $22 = ___cxa_find_matching_catch(-1,-1)|0;
 $23 = tempRet0;
 $4 = $22;
 $5 = $23;
 __THREW__ = 0;
 invoke_vi(606,($6|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 }
 $26 = $4;
 $27 = $5;
 ___resumeException($26|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($kernel) {
 $kernel = $kernel|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $kernel;
 $1 = $0;
 $2 = (_clReleaseKernel(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP10_cl_kernelEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP10_cl_kernelE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE6retainES3_($kernel) {
 $kernel = $kernel|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $kernel;
 $1 = $0;
 $2 = (_clRetainKernel(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl5ErrorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt9exceptionD2Ev(($1|0));
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZNSt9exceptionC2ERKS_($3,$4);
 $5 = (2896 + 8|0);
 HEAP32[$3>>2] = $5;
 $6 = (($3) + 4|0);
 $7 = $2;
 $8 = (($7) + 4|0);
 ;HEAP32[$6+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt9exceptionC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = (__ZTVSt9exception + 8|0);
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC2ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($this,$context,$sources,$err) {
 $this = $this|0;
 $context = $context|0;
 $sources = $sources|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $error = 0, $i = 0;
 var $lengths = 0, $n = 0, $strings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $error = sp + 4|0;
 $5 = $this;
 $6 = $context;
 $7 = $sources;
 $8 = $err;
 $11 = $5;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($11);
 $12 = $7;
 $4 = $12;
 $13 = $4;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$13>>2]|0;
 $17 = $15;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = (($19|0) / 8)&-1;
 $n = $20;
 $21 = $n;
 $22 = $21<<2;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$22)|0)+15)&-16)|0;
 $lengths = $23;
 $24 = $n;
 $25 = $24<<2;
 $26 = STACKTOP; STACKTOP = STACKTOP + ((((1*$25)|0)+15)&-16)|0;
 $strings = $26;
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = $n;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $7;
  $31 = $i;
  $2 = $30;
  $3 = $31;
  $32 = $2;
  $33 = $3;
  $34 = HEAP32[$32>>2]|0;
  $35 = (($34) + ($33<<3)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $i;
  $38 = $strings;
  $39 = (($38) + ($37<<2)|0);
  HEAP32[$39>>2] = $36;
  $40 = $7;
  $41 = $i;
  $0 = $40;
  $1 = $41;
  $42 = $0;
  $43 = $1;
  $44 = HEAP32[$42>>2]|0;
  $45 = (($44) + ($43<<3)|0);
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $i;
  $49 = $lengths;
  $50 = (($49) + ($48<<2)|0);
  HEAP32[$50>>2] = $47;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $57 = $6;
 __THREW__ = 0;
 $58 = (invoke_ii(595,($57|0))|0);
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if (!($60)) {
  $61 = $n;
  $62 = $strings;
  $63 = $lengths;
  __THREW__ = 0;
  $64 = (invoke_iiiiii(608,($58|0),($61|0),($62|0),($63|0),($error|0))|0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if (!($66)) {
   HEAP32[$11>>2] = $64;
   $67 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(597,($67|0),(3384|0))|0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    $70 = $8;
    $71 = ($70|0)!=(0|0);
    if (!($71)) {
     STACKTOP = sp;return;
    }
    $72 = HEAP32[$error>>2]|0;
    $73 = $8;
    HEAP32[$73>>2] = $72;
    STACKTOP = sp;return;
   }
  }
 }
 $53 = ___cxa_find_matching_catch(-1,-1)|0;
 $54 = tempRet0;
 $9 = $53;
 $10 = $54;
 __THREW__ = 0;
 invoke_vi(607,($11|0));
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if ($56) {
  $76 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76);
  // unreachable;
 }
 $74 = $9;
 $75 = $10;
 ___resumeException($74|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP11_cl_programED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($program) {
 $program = $program|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $program;
 $1 = $0;
 $2 = (_clReleaseProgram(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP11_cl_programEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP11_cl_programE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6detail7WrapperIP11_cl_programE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_programE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE6retainES3_($program) {
 $program = $program|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $program;
 $1 = $0;
 $2 = (_clRetainProgram(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl7ContextC2EyPiPFvPKcPKvjPvES6_S1_($this,$0,$1,$properties,$notifyFptr,$data,$err) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $properties = $properties|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp;
 $error = sp + 16|0;
 $2 = $this;
 $10 = $3;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $4 = $properties;
 $5 = $notifyFptr;
 $6 = $data;
 $7 = $err;
 $14 = $2;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($14);
 $15 = $4;
 $16 = $3;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = $6;
 __THREW__ = 0;
 $24 = (invoke_iiiiiii(609,($15|0),($18|0),($21|0),($22|0),($23|0),($error|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if (!($26)) {
  HEAP32[$14>>2] = $24;
  $27 = HEAP32[$error>>2]|0;
  __THREW__ = 0;
  (invoke_iii(597,($27|0),(3416|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   $30 = $7;
   $31 = ($30|0)!=(0|0);
   if (!($31)) {
    STACKTOP = sp;return;
   }
   $32 = HEAP32[$error>>2]|0;
   $33 = $7;
   HEAP32[$33>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $34 = ___cxa_find_matching_catch(-1,-1)|0;
 $35 = tempRet0;
 $8 = $34;
 $9 = $35;
 __THREW__ = 0;
 invoke_vi(610,($14|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $40 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 }
 $38 = $8;
 $39 = $9;
 ___resumeException($38|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $context;
 $1 = $0;
 $2 = (_clReleaseContext(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP11_cl_contextEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP11_cl_contextE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6detail7WrapperIP11_cl_contextE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE6retainES3_($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $context;
 $1 = $0;
 $2 = (_clRetainContext(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE6assignIPP15_cl_platform_idEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0;
 var $__m = 0, $__mid = 0, $__ms$i = 0, $__new_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $3 = sp + 24|0;
 $6 = sp + 288|0;
 $21 = sp + 92|0;
 $30 = sp;
 $33 = sp + 290|0;
 $40 = sp + 16|0;
 $43 = sp + 291|0;
 $51 = sp + 212|0;
 $52 = sp + 224|0;
 $61 = sp + 8|0;
 $64 = sp + 292|0;
 $__mid = sp + 276|0;
 $65 = $this;
 $66 = $__first;
 $67 = $__last;
 $68 = $65;
 $69 = $66;
 $70 = $67;
 $62 = $69;
 $63 = $70;
 $71 = $62;
 $72 = $63;
 ;HEAP8[$61+0>>0]=HEAP8[$64+0>>0]|0;
 $59 = $71;
 $60 = $72;
 $73 = $60;
 $74 = $59;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $__new_size = $78;
 $79 = $__new_size;
 $58 = $68;
 $80 = $58;
 $57 = $80;
 $81 = $57;
 $56 = $81;
 $82 = $56;
 $83 = (($82) + 8|0);
 $55 = $83;
 $84 = $55;
 $54 = $84;
 $85 = $54;
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$81>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = ($79>>>0)<=($91>>>0);
 if (!($92)) {
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE10deallocateEv($68);
  $177 = $__new_size;
  $50 = $68;
  HEAP32[$51>>2] = $177;
  $178 = $50;
  $179 = (__ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($178)|0);
  $__ms$i = $179;
  $180 = HEAP32[$51>>2]|0;
  $181 = $__ms$i;
  $182 = ($180>>>0)>($181>>>0);
  if ($182) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($178);
  }
  $48 = $178;
  $183 = $48;
  $47 = $183;
  $184 = $47;
  $46 = $184;
  $185 = $46;
  $186 = (($185) + 8|0);
  $45 = $186;
  $187 = $45;
  $44 = $187;
  $188 = $44;
  $189 = HEAP32[$188>>2]|0;
  $190 = HEAP32[$184>>2]|0;
  $191 = $189;
  $192 = $190;
  $193 = (($191) - ($192))|0;
  $194 = (($193|0) / 4)&-1;
  $__cap$i = $194;
  $195 = $__cap$i;
  $196 = $__ms$i;
  $197 = (($196>>>0) / 2)&-1;
  $198 = ($195>>>0)>=($197>>>0);
  if ($198) {
   $199 = $__ms$i;
   $49 = $199;
  } else {
   $200 = $__cap$i;
   $201 = $200<<1;
   HEAP32[$52>>2] = $201;
   $41 = $52;
   $42 = $51;
   $202 = $41;
   $203 = $42;
   ;HEAP8[$40+0>>0]=HEAP8[$43+0>>0]|0;
   $38 = $202;
   $39 = $203;
   $204 = $38;
   $205 = $39;
   $35 = $40;
   $36 = $204;
   $37 = $205;
   $206 = $36;
   $207 = HEAP32[$206>>2]|0;
   $208 = $37;
   $209 = HEAP32[$208>>2]|0;
   $210 = ($207>>>0)<($209>>>0);
   if ($210) {
    $211 = $39;
    $214 = $211;
   } else {
    $212 = $38;
    $214 = $212;
   }
   $213 = HEAP32[$214>>2]|0;
   $49 = $213;
  }
  $215 = $49;
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8allocateEj($68,$215);
  $216 = $66;
  $217 = $67;
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($68,$216,$217);
  STACKTOP = sp;return;
 }
 $93 = $67;
 HEAP32[$__mid>>2] = $93;
 $__growing = 0;
 $94 = $__new_size;
 $53 = $68;
 $95 = $53;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = ($94>>>0)>($102>>>0);
 if ($103) {
  $__growing = 1;
  $104 = $66;
  HEAP32[$__mid>>2] = $104;
  $34 = $68;
  $105 = $34;
  $106 = (($105) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = HEAP32[$105>>2]|0;
  $109 = $107;
  $110 = $108;
  $111 = (($109) - ($110))|0;
  $112 = (($111|0) / 4)&-1;
  $31 = $__mid;
  $32 = $112;
  $113 = $31;
  $114 = $32;
  ;HEAP8[$30+0>>0]=HEAP8[$33+0>>0]|0;
  $28 = $113;
  $29 = $114;
  $115 = $29;
  $116 = $28;
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + ($115<<2)|0);
  HEAP32[$116>>2] = $118;
 }
 $119 = $66;
 $120 = HEAP32[$__mid>>2]|0;
 $121 = HEAP32[$68>>2]|0;
 $25 = $119;
 $26 = $120;
 $27 = $121;
 $122 = $25;
 $24 = $122;
 $123 = $24;
 $124 = $26;
 $17 = $124;
 $125 = $17;
 $126 = $27;
 $16 = $126;
 $127 = $16;
 $18 = $123;
 $19 = $125;
 $20 = $127;
 while(1) {
  $128 = $18;
  $129 = $19;
  $130 = ($128|0)!=($129|0);
  if (!($130)) {
   break;
  }
  $131 = $20;
  $132 = $18;
  $133 = HEAP32[$132>>2]|0;
  __ZN2cl8PlatformC1EP15_cl_platform_id($21,$133);
  __THREW__ = 0;
  (invoke_iii(611,($131|0),($21|0))|0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   label = 8;
   break;
  }
  __ZN2cl8PlatformD1Ev($21);
  $136 = $18;
  $137 = (($136) + 4|0);
  $18 = $137;
  $138 = $20;
  $139 = (($138) + 4|0);
  $20 = $139;
 }
 if ((label|0) == 8) {
  $140 = ___cxa_find_matching_catch(-1,-1)|0;
  $141 = tempRet0;
  $22 = $140;
  $23 = $141;
  __THREW__ = 0;
  invoke_vi(594,($21|0));
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $146 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $147 = tempRet0;
   ___clang_call_terminate($146);
   // unreachable;
  } else {
   $144 = $22;
   $145 = $23;
   ___resumeException($144|0);
   // unreachable;
  }
 }
 $148 = $20;
 $__m = $148;
 $149 = $__growing;
 $150 = $149&1;
 do {
  if ($150) {
   $151 = HEAP32[$__mid>>2]|0;
   $152 = $67;
   __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($68,$151,$152);
  } else {
   $153 = $__m;
   $14 = $68;
   $15 = $153;
   $154 = $14;
   $155 = $15;
   $10 = $154;
   $11 = $155;
   $156 = $10;
   while(1) {
    $157 = $11;
    $158 = (($156) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($157|0)!=($159|0);
    if (!($160)) {
     label = 18;
     break;
    }
    $9 = $156;
    $161 = $9;
    $162 = (($161) + 8|0);
    $8 = $162;
    $163 = $8;
    $7 = $163;
    $164 = $7;
    $165 = (($156) + 4|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (($166) + -4|0);
    HEAP32[$165>>2] = $167;
    $0 = $167;
    $168 = $0;
    $4 = $164;
    $5 = $168;
    $169 = $4;
    $170 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $169;
    $2 = $170;
    $171 = $2;
    __THREW__ = 0;
    invoke_vi(594,($171|0));
    $172 = __THREW__; __THREW__ = 0;
    $173 = $172&1;
    if ($173) {
     label = 17;
     break;
    }
   }
   if ((label|0) == 17) {
    $174 = ___cxa_find_matching_catch(-1,-1)|0;
    $175 = tempRet0;
    $12 = $174;
    $13 = $175;
    $176 = $12;
    ___cxa_call_unexpected(($176|0));
    // unreachable;
   }
   else if ((label|0) == 18) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = (($11) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $__a;
  $19 = (($10) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
  $21 = $0;
  $22 = $8;
  $1 = $18;
  $2 = $21;
  $3 = $22;
  $23 = $2;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $3;
   $26 = HEAP32[$25>>2]|0;
   __ZN2cl8PlatformC1EP15_cl_platform_id($23,$26);
  }
  $27 = (($10) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 4|0);
  HEAP32[$27>>2] = $29;
  $30 = $8;
  $31 = (($30) + 4|0);
  $8 = $31;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $4 = sp;
 $7 = sp + 200|0;
 $36 = sp + 140|0;
 $45 = sp + 156|0;
 $49 = sp + 188|0;
 $50 = sp + 24|0;
 $46 = $this;
 $51 = $46;
 $52 = HEAP32[$51>>2]|0;
 $43 = $45;
 $44 = -1;
 $53 = $43;
 $54 = $44;
 $41 = $53;
 $42 = $54;
 $55 = $41;
 HEAP32[$55>>2] = 0;
 $56 = HEAP32[$45>>2]|0;
 HEAP32[$49>>2] = $56;
 $25 = $49;
 $57 = ($52|0)!=(0|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $16 = $51;
 $58 = $16;
 $15 = $58;
 $59 = $15;
 $60 = HEAP32[$59>>2]|0;
 $11 = $59;
 $12 = $60;
 $61 = $11;
 while(1) {
  $62 = $12;
  $63 = (($61) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62|0)!=($64|0);
  if (!($65)) {
   break;
  }
  $10 = $61;
  $66 = $10;
  $67 = (($66) + 8|0);
  $9 = $67;
  $68 = $9;
  $8 = $68;
  $69 = $8;
  $70 = (($61) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + -4|0);
  HEAP32[$70>>2] = $72;
  $1 = $72;
  $73 = $1;
  $5 = $69;
  $6 = $73;
  $74 = $5;
  $75 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $74;
  $3 = $75;
  $76 = $3;
  __THREW__ = 0;
  invoke_vi(594,($76|0));
  $77 = __THREW__; __THREW__ = 0;
  $78 = $77&1;
  if ($78) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $13 = $79;
  $14 = $80;
  $81 = $13;
  ___cxa_call_unexpected(($81|0));
  // unreachable;
 }
 $0 = $58;
 $19 = $51;
 $82 = $19;
 $83 = (($82) + 8|0);
 $18 = $83;
 $84 = $18;
 $17 = $84;
 $85 = $17;
 $86 = HEAP32[$51>>2]|0;
 $24 = $51;
 $87 = $24;
 $23 = $87;
 $88 = $23;
 $22 = $88;
 $89 = $22;
 $90 = (($89) + 8|0);
 $21 = $90;
 $91 = $21;
 $20 = $91;
 $92 = $20;
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$88>>2]|0;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $98 = (($97|0) / 4)&-1;
 $29 = $85;
 $30 = $86;
 $31 = $98;
 $99 = $29;
 $100 = $30;
 $101 = $31;
 $26 = $99;
 $27 = $100;
 $28 = $101;
 $102 = $27;
 __ZdlPv($102);
 $34 = $36;
 $35 = -1;
 $103 = $34;
 $104 = $35;
 $32 = $103;
 $33 = $104;
 $105 = $32;
 HEAP32[$105>>2] = 0;
 $106 = HEAP32[$36>>2]|0;
 HEAP32[$50>>2] = $106;
 $37 = $50;
 $40 = $51;
 $107 = $40;
 $108 = (($107) + 8|0);
 $39 = $108;
 $109 = $39;
 $38 = $109;
 $110 = $38;
 HEAP32[$110>>2] = 0;
 $111 = (($51) + 4|0);
 HEAP32[$111>>2] = 0;
 HEAP32[$51>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $11 = $this;
 $12 = $__n;
 $13 = $11;
 $14 = $12;
 $15 = (__ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($13)|0);
 $16 = ($14>>>0)>($15>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($13);
 }
 $10 = $13;
 $17 = $10;
 $18 = (($17) + 8|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $21 = $12;
 $3 = $20;
 $4 = $21;
 $22 = $3;
 $23 = $4;
 $0 = $22;
 $1 = $23;
 $2 = 0;
 $24 = $1;
 $25 = $24<<2;
 $26 = (__Znwj($25)|0);
 $27 = (($13) + 4|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$13>>2] = $26;
 $28 = HEAP32[$13>>2]|0;
 $29 = $12;
 $30 = (($28) + ($29<<2)|0);
 $7 = $13;
 $31 = $7;
 $32 = (($31) + 8|0);
 $6 = $32;
 $33 = $6;
 $5 = $33;
 $34 = $5;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZN2cl8PlatformC1EP15_cl_platform_id($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $platform;
 $2 = $0;
 $3 = $1;
 __ZN2cl8PlatformC2EP15_cl_platform_id($2,$3);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformC2EP15_cl_platform_id($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $platform;
 $2 = $0;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($2);
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = $1;
 (__ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($2,$5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  (__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($2)|0);
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($2|0);
 }
 (__ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $0;
 STACKTOP = sp;return -32;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp;
 $6 = sp + 140|0;
 $33 = sp + 4|0;
 $35 = sp + 20|0;
 $34 = $this;
 $36 = $34;
 $37 = HEAP32[$36>>2]|0;
 $31 = $33;
 $32 = -1;
 $38 = $31;
 $39 = $32;
 $29 = $38;
 $30 = $39;
 $40 = $29;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$33>>2]|0;
 HEAP32[$35>>2] = $41;
 $22 = $35;
 $42 = ($37|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $14 = $36;
 $43 = $14;
 $44 = HEAP32[$43>>2]|0;
 $10 = $43;
 $11 = $44;
 $45 = $10;
 while(1) {
  $46 = $11;
  $47 = (($45) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($46|0)!=($48|0);
  if (!($49)) {
   break;
  }
  $9 = $45;
  $50 = $9;
  $51 = (($50) + 8|0);
  $8 = $51;
  $52 = $8;
  $7 = $52;
  $53 = $7;
  $54 = (($45) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -4|0);
  HEAP32[$54>>2] = $56;
  $0 = $56;
  $57 = $0;
  $4 = $53;
  $5 = $57;
  $58 = $4;
  $59 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $58;
  $2 = $59;
  $60 = $2;
  __THREW__ = 0;
  invoke_vi(586,($60|0));
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $12 = $63;
  $13 = $64;
  $65 = $12;
  ___cxa_call_unexpected(($65|0));
  // unreachable;
 }
 $17 = $36;
 $66 = $17;
 $67 = (($66) + 8|0);
 $16 = $67;
 $68 = $16;
 $15 = $68;
 $69 = $15;
 $70 = HEAP32[$36>>2]|0;
 $21 = $36;
 $71 = $21;
 $20 = $71;
 $72 = $20;
 $73 = (($72) + 8|0);
 $19 = $73;
 $74 = $19;
 $18 = $74;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$71>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 4)&-1;
 $26 = $69;
 $27 = $70;
 $28 = $81;
 $82 = $26;
 $83 = $27;
 $84 = $28;
 $23 = $82;
 $24 = $83;
 $25 = $84;
 $85 = $24;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6SolverD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN6SolverD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6SolverD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(71,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN2cl7NDRangeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6size_tILi3EED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2cl6size_tILi3EEC1Ev($1);
 $2 = (($1) + 20|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a126() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init125();
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $app = 0, $e = 0, $i = 0, $use_filter = 0, $use_gpu = 0, $use_interop = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $vararg_buffer = sp;
 $11 = sp + 52|0;
 $86 = sp + 368|0;
 $87 = sp + 380|0;
 $90 = sp + 16|0;
 $91 = sp + 400|0;
 $92 = sp + 188|0;
 $93 = sp + 412|0;
 $94 = sp + 200|0;
 $95 = sp + 216|0;
 $83 = 0;
 $84 = $argc;
 $85 = $argv;
 $96 = (__ZN6global3parEv()|0);
 $81 = $86;
 $82 = 3488;
 $97 = $81;
 $98 = $82;
 $79 = $97;
 $80 = $98;
 $99 = $79;
 $78 = $99;
 $100 = $78;
 $77 = $100;
 $101 = $77;
 $76 = $101;
 $102 = $76;
 $75 = $102;
 $103 = $80;
 $104 = $80;
 $74 = $104;
 $105 = $74;
 $106 = (_strlen(($105|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($99,$103,$106);
 $72 = $87;
 $73 = 3504;
 $107 = $72;
 $108 = $73;
 $70 = $107;
 $71 = $108;
 $109 = $70;
 $69 = $109;
 $110 = $69;
 $68 = $110;
 $111 = $68;
 $67 = $111;
 $112 = $67;
 $66 = $112;
 $113 = $71;
 $114 = $71;
 $65 = $114;
 $115 = $65;
 __THREW__ = 0;
 $116 = (invoke_ii(430,($115|0))|0);
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 do {
  if ($118) {
   label = 12;
  } else {
   __THREW__ = 0;
   invoke_viii(431,($109|0),($113|0),($116|0));
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   if ($120) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(436,($96|0),($86|0),($87|0));
    $121 = __THREW__; __THREW__ = 0;
    $122 = $121&1;
    if ($122) {
     $137 = ___cxa_find_matching_catch(-1,-1)|0;
     $138 = tempRet0;
     $88 = $137;
     $89 = $138;
     __THREW__ = 0;
     invoke_vi(415,($87|0));
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if ($140) {
      $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $328 = tempRet0;
      ___clang_call_terminate($327);
      // unreachable;
     } else {
      break;
     }
    }
    __THREW__ = 0;
    invoke_vi(415,($87|0));
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 12;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
     $use_gpu = 1;
     $use_interop = 0;
     $use_filter = 0;
     $i = 0;
     while(1) {
      $125 = $i;
      $126 = $84;
      $127 = ($125|0)<($126|0);
      if ($127) {
       $128 = $85;
       $129 = ($128|0)!=(0|0);
       $329 = $129;
      } else {
       $329 = 0;
      }
      if (!($329)) {
       break;
      }
      $130 = $i;
      $131 = $85;
      $132 = (($131) + ($130<<2)|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = ($133|0)!=(0|0);
      if ($134) {
       $143 = $i;
       $144 = $85;
       $145 = (($144) + ($143<<2)|0);
       $146 = HEAP32[$145>>2]|0;
       $63 = $146;
       $64 = 3512;
       $147 = $63;
       $148 = $64;
       $149 = (_strstr($147,$148)|0);
       $150 = ($149|0)!=(0|0);
       if ($150) {
        $use_gpu = 0;
       } else {
        $151 = $i;
        $152 = $85;
        $153 = (($152) + ($151<<2)|0);
        $154 = HEAP32[$153>>2]|0;
        $61 = $154;
        $62 = 3520;
        $155 = $61;
        $156 = $62;
        $157 = (_strstr($155,$156)|0);
        $158 = ($157|0)!=(0|0);
        if ($158) {
         $use_gpu = 1;
        } else {
         $159 = $i;
         $160 = $85;
         $161 = (($160) + ($159<<2)|0);
         $162 = HEAP32[$161>>2]|0;
         $59 = $162;
         $60 = 3528;
         $163 = $59;
         $164 = $60;
         $165 = (_strstr($163,$164)|0);
         $166 = ($165|0)!=(0|0);
         if ($166) {
          $use_interop = 1;
         } else {
          $167 = $i;
          $168 = $85;
          $169 = (($168) + ($167<<2)|0);
          $170 = HEAP32[$169>>2]|0;
          $57 = $170;
          $58 = 3536;
          $171 = $57;
          $172 = $58;
          $173 = (_strstr($171,$172)|0);
          $174 = ($173|0)!=(0|0);
          if ($174) {
           $use_filter = 1;
          }
         }
        }
       }
      } else {
      }
      $175 = $i;
      $176 = (($175) + 1)|0;
      $i = $176;
     }
     $177 = $use_gpu;
     $178 = ($177|0)==(1);
     if ($178) {
      $179 = 3576;
     } else {
      $179 = 3584;
     }
     HEAP32[$vararg_buffer>>2] = $179;
     (_printf((3544|0),($vararg_buffer|0))|0);
     $180 = (__ZN6global3parEv()|0);
     $55 = $90;
     $56 = 3592;
     $181 = $55;
     $182 = $56;
     $53 = $181;
     $54 = $182;
     $183 = $53;
     $52 = $183;
     $184 = $52;
     $51 = $184;
     $185 = $51;
     $50 = $185;
     $186 = $50;
     $49 = $186;
     $187 = $54;
     $188 = $54;
     $48 = $188;
     $189 = $48;
     $190 = (_strlen(($189|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($183,$187,$190);
     $191 = $use_gpu;
     __THREW__ = 0;
     invoke_viii(435,($180|0),($90|0),($191|0));
     $192 = __THREW__; __THREW__ = 0;
     $193 = $192&1;
     if ($193) {
      $209 = ___cxa_find_matching_catch(-1,-1)|0;
      $210 = tempRet0;
      $88 = $209;
      $89 = $210;
      __THREW__ = 0;
      invoke_vi(415,($90|0));
      $211 = __THREW__; __THREW__ = 0;
      $212 = $211&1;
      if ($212) {
       $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $328 = tempRet0;
       ___clang_call_terminate($327);
       // unreachable;
      }
      $325 = $88;
      $326 = $89;
      ___resumeException($325|0);
      // unreachable;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($90);
     $194 = $use_interop;
     $195 = ($194|0)==(1);
     do {
      if ($195) {
       $196 = (__ZN6global3parEv()|0);
       $46 = $91;
       $47 = 3608;
       $197 = $46;
       $198 = $47;
       $44 = $197;
       $45 = $198;
       $199 = $44;
       $43 = $199;
       $200 = $43;
       $42 = $200;
       $201 = $42;
       $41 = $201;
       $202 = $41;
       $40 = $202;
       $203 = $45;
       $204 = $45;
       $39 = $204;
       $205 = $39;
       $206 = (_strlen(($205|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($199,$203,$206);
       __THREW__ = 0;
       invoke_vii(612,($196|0),($91|0));
       $207 = __THREW__; __THREW__ = 0;
       $208 = $207&1;
       if (!($208)) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($91);
        break;
       }
       $213 = ___cxa_find_matching_catch(-1,-1)|0;
       $214 = tempRet0;
       $88 = $213;
       $89 = $214;
       __THREW__ = 0;
       invoke_vi(415,($91|0));
       $215 = __THREW__; __THREW__ = 0;
       $216 = $215&1;
       if ($216) {
        $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $88;
       $326 = $89;
       ___resumeException($325|0);
       // unreachable;
      } else {
       $217 = (__ZN6global3parEv()|0);
       $37 = $92;
       $38 = 3608;
       $218 = $37;
       $219 = $38;
       $35 = $218;
       $36 = $219;
       $220 = $35;
       $34 = $220;
       $221 = $34;
       $33 = $221;
       $222 = $33;
       $32 = $222;
       $223 = $32;
       $31 = $223;
       $224 = $36;
       $225 = $36;
       $30 = $225;
       $226 = $30;
       $227 = (_strlen(($226|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($220,$224,$227);
       __THREW__ = 0;
       invoke_vii(613,($217|0),($92|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if (!($229)) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($92);
        break;
       }
       $230 = ___cxa_find_matching_catch(-1,-1)|0;
       $231 = tempRet0;
       $88 = $230;
       $89 = $231;
       __THREW__ = 0;
       invoke_vi(415,($92|0));
       $232 = __THREW__; __THREW__ = 0;
       $233 = $232&1;
       if ($233) {
        $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $88;
       $326 = $89;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $234 = $use_filter;
     $235 = ($234|0)==(1);
     do {
      if ($235) {
       $236 = (__ZN6global3parEv()|0);
       $28 = $93;
       $29 = 3624;
       $237 = $28;
       $238 = $29;
       $26 = $237;
       $27 = $238;
       $239 = $26;
       $25 = $239;
       $240 = $25;
       $24 = $240;
       $241 = $24;
       $23 = $241;
       $242 = $23;
       $22 = $242;
       $243 = $27;
       $244 = $27;
       $21 = $244;
       $245 = $21;
       $246 = (_strlen(($245|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($239,$243,$246);
       __THREW__ = 0;
       invoke_vii(612,($236|0),($93|0));
       $247 = __THREW__; __THREW__ = 0;
       $248 = $247&1;
       if (!($248)) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($93);
        break;
       }
       $249 = ___cxa_find_matching_catch(-1,-1)|0;
       $250 = tempRet0;
       $88 = $249;
       $89 = $250;
       __THREW__ = 0;
       invoke_vi(415,($93|0));
       $251 = __THREW__; __THREW__ = 0;
       $252 = $251&1;
       if ($252) {
        $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $88;
       $326 = $89;
       ___resumeException($325|0);
       // unreachable;
      } else {
       $253 = (__ZN6global3parEv()|0);
       $19 = $94;
       $20 = 3624;
       $254 = $19;
       $255 = $20;
       $17 = $254;
       $18 = $255;
       $256 = $17;
       $16 = $256;
       $257 = $16;
       $15 = $257;
       $258 = $15;
       $14 = $258;
       $259 = $14;
       $13 = $259;
       $260 = $18;
       $261 = $18;
       $12 = $261;
       $262 = $12;
       $263 = (_strlen(($262|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($256,$260,$263);
       __THREW__ = 0;
       invoke_vii(613,($253|0),($94|0));
       $264 = __THREW__; __THREW__ = 0;
       $265 = $264&1;
       if (!($265)) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($94);
        break;
       }
       $266 = ___cxa_find_matching_catch(-1,-1)|0;
       $267 = tempRet0;
       $88 = $266;
       $89 = $267;
       __THREW__ = 0;
       invoke_vi(415,($94|0));
       $268 = __THREW__; __THREW__ = 0;
       $269 = $268&1;
       if ($269) {
        $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $88;
       $326 = $89;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $270 = (__ZN11Application3getEv()|0);
     $app = $270;
     $271 = $app;
     $9 = $11;
     $10 = -1;
     $272 = $9;
     $273 = $10;
     $7 = $272;
     $8 = $273;
     $274 = $7;
     HEAP32[$274>>2] = 0;
     $275 = HEAP32[$11>>2]|0;
     HEAP32[$95>>2] = $275;
     $6 = $95;
     $276 = ($271|0)==(0|0);
     if ($276) {
      $277 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(4008,3640)|0);
      $4 = $277;
      $5 = 451;
      $278 = $4;
      $279 = $5;
      (FUNCTION_TABLE_ii[$279 & 1023]($278)|0);
      _exit(1);
      // unreachable;
     }
     $280 = $app;
     __THREW__ = 0;
     invoke_vi(614,($280|0));
     $281 = __THREW__; __THREW__ = 0;
     $282 = $281&1;
     if (!($282)) {
      STACKTOP = sp;return 0;
     }
     $283 = ___cxa_find_matching_catch(-1,-1,__ZTISt9exception|0,0|0)|0;
     $284 = tempRet0;
     $88 = $283;
     $89 = $284;
     $285 = $89;
     $286 = (_llvm_eh_typeid_for((__ZTISt9exception|0))|0);
     $287 = ($285|0)==($286|0);
     if (!($287)) {
      $307 = $88;
      (___cxa_begin_catch(($307|0))|0);
      __THREW__ = 0;
      $308 = (invoke_iii(449,(4008|0),(3680|0))|0);
      $309 = __THREW__; __THREW__ = 0;
      $310 = $309&1;
      if (!($310)) {
       $0 = $308;
       $1 = 451;
       $311 = $0;
       $312 = $1;
       __THREW__ = 0;
       (invoke_ii($312|0,($311|0))|0);
       $313 = __THREW__; __THREW__ = 0;
       $314 = $313&1;
       if (!($314)) {
        __THREW__ = 0;
        invoke_vi(615,1);
        $315 = __THREW__; __THREW__ = 0;
        $316 = $315&1;
        if (!($316)) {
         // unreachable;
        }
       }
      }
      $317 = ___cxa_find_matching_catch(-1,-1)|0;
      $318 = tempRet0;
      $88 = $317;
      $89 = $318;
      __THREW__ = 0;
      invoke_v(463);
      $319 = __THREW__; __THREW__ = 0;
      $320 = $319&1;
      if ($320) {
       $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $328 = tempRet0;
       ___clang_call_terminate($327);
       // unreachable;
      }
      $325 = $88;
      $326 = $89;
      ___resumeException($325|0);
      // unreachable;
     }
     $288 = $88;
     $289 = (___cxa_begin_catch(($288|0))|0);
     $e = $289;
     __THREW__ = 0;
     $290 = (invoke_iii(449,(4008|0),(3712|0))|0);
     $291 = __THREW__; __THREW__ = 0;
     $292 = $291&1;
     if (!($292)) {
      $293 = $e;
      $294 = HEAP32[$293>>2]|0;
      $295 = (($294) + 8|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (FUNCTION_TABLE_ii[$296 & 1023]($293)|0);
      __THREW__ = 0;
      $298 = (invoke_iii(449,($290|0),($297|0))|0);
      $299 = __THREW__; __THREW__ = 0;
      $300 = $299&1;
      if (!($300)) {
       $2 = $298;
       $3 = 451;
       $301 = $2;
       $302 = $3;
       __THREW__ = 0;
       (invoke_ii($302|0,($301|0))|0);
       $303 = __THREW__; __THREW__ = 0;
       $304 = $303&1;
       if (!($304)) {
        __THREW__ = 0;
        invoke_vi(615,1);
        $305 = __THREW__; __THREW__ = 0;
        $306 = $305&1;
        if (!($306)) {
         // unreachable;
        }
       }
      }
     }
     $321 = ___cxa_find_matching_catch(-1,-1)|0;
     $322 = tempRet0;
     $88 = $321;
     $89 = $322;
     __THREW__ = 0;
     invoke_v(463);
     $323 = __THREW__; __THREW__ = 0;
     $324 = $323&1;
     if ($324) {
      $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $328 = tempRet0;
      ___clang_call_terminate($327);
      // unreachable;
     }
     $325 = $88;
     $326 = $89;
     ___resumeException($325|0);
     // unreachable;
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $135 = ___cxa_find_matching_catch(-1,-1)|0;
  $136 = tempRet0;
  $88 = $135;
  $89 = $136;
 }
 __THREW__ = 0;
 invoke_vi(415,($86|0));
 $141 = __THREW__; __THREW__ = 0;
 $142 = $141&1;
 if ($142) {
  $327 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $328 = tempRet0;
  ___clang_call_terminate($327);
  // unreachable;
 }
 $325 = $88;
 $326 = $89;
 ___resumeException($325|0);
 // unreachable;
 return 0|0;
}
function __ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $0;
 $3 = $1;
 __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($2,$3,1);
 STACKTOP = sp;return;
}
function __ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $key;
 $2 = $0;
 $3 = $1;
 __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($2,$3,0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init149() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2cl7NDRangeC1Ev(3720);
 (___cxa_atexit((536|0),(3720|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init1() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = sp + 12|0;
 $3 = $5;
 $4 = -1;
 $7 = $3;
 $8 = $4;
 $1 = $7;
 $2 = $8;
 $9 = $1;
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $10;
 $0 = $6;
 HEAP32[3744>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6Solver3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3744>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN6Solver6createENS_4TypeE($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $4 = sp + 12|0;
 $11 = sp + 32|0;
 $13 = sp + 16|0;
 $16 = sp + 52|0;
 $12 = $type;
 $17 = (__ZN4Demo3getEv()|0);
 $9 = $11;
 $10 = -1;
 $18 = $9;
 $19 = $10;
 $7 = $18;
 $8 = $19;
 $20 = $7;
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$11>>2]|0;
 HEAP32[$13>>2] = $21;
 $6 = $13;
 $22 = ($17|0)==(0|0);
 if ($22) {
  __ZN5error8throw_exEPKcS1_i(3752,3792,33);
 }
 $23 = $12;
 do {
  if ((($23|0) == 0)) {
   $24 = (__Znwj(44)|0);
   __THREW__ = 0;
   invoke_vi(616,($24|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    HEAP32[3744>>2] = $24;
    break;
   }
   $27 = ___cxa_find_matching_catch(-1,-1)|0;
   $28 = tempRet0;
   $14 = $27;
   $15 = $28;
   __ZdlPv($24);
   $39 = $14;
   $40 = $15;
   ___resumeException($39|0);
   // unreachable;
  } else {
  }
 } while(0);
 $29 = HEAP32[3744>>2]|0;
 $2 = $4;
 $3 = -1;
 $30 = $2;
 $31 = $3;
 $0 = $30;
 $1 = $31;
 $32 = $0;
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$4>>2]|0;
 HEAP32[$16>>2] = $33;
 $5 = $16;
 $34 = ($29|0)==(0|0);
 if (!($34)) {
  $35 = HEAP32[3744>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($35);
  STACKTOP = sp;return;
 }
 __ZN5error8throw_exEPKcS1_i(3808,3792,45);
 $35 = HEAP32[3744>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vi[$38 & 1023]($35);
 STACKTOP = sp;return;
}
function __GLOBAL__I_a154() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init149();
 ___cxx_global_var_init1();
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(4544,$4,4600);
 HEAP32[3832>>2] = ((6448 + 12|0));
 HEAP32[((3832 + 8|0))>>2] = ((6448 + 32|0));
 HEAP32[((3832 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(445,(((3832 + 8|0))|0),(4544|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((3832 + 8|0)));
  ___resumeException($7|0);
  // unreachable;
 }
 HEAP32[((3832 + 80|0))>>2] = 0;
 HEAP32[((3832 + 84|0))>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 HEAP32[4648>>2] = ((6320 + 8|0));
 __ZNSt3__16localeC2Ev(((4648 + 4|0)));
 ;HEAP32[((4648 + 8|0))+0>>2]=0|0;HEAP32[((4648 + 8|0))+4>>2]=0|0;HEAP32[((4648 + 8|0))+8>>2]=0|0;HEAP32[((4648 + 8|0))+12>>2]=0|0;HEAP32[((4648 + 8|0))+16>>2]=0|0;HEAP32[((4648 + 8|0))+20>>2]=0|0;
 HEAP32[4648>>2] = ((5152 + 8|0));
 HEAP32[((4648 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($3,((4648 + 4|0)));
 __THREW__ = 0;
 $10 = (invoke_iii(457,($3|0),(9200|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  __ZNSt3__16localeD2Ev($3);
  HEAP32[4648>>2] = ((6320 + 8|0));
  __ZNSt3__16localeD2Ev(((4648 + 4|0)));
  ___resumeException($13|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((4648 + 36|0))>>2] = $10;
 HEAP32[((4648 + 40|0))>>2] = ((4600 + 8|0));
 $15 = HEAP32[$10>>2]|0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 1023]($10)|0);
 $19 = $18&1;
 HEAP8[((4648 + 44|0))>>0] = $19;
 HEAP32[3920>>2] = ((6528 + 12|0));
 HEAP32[((3920 + 4|0))>>2] = ((6528 + 32|0));
 __THREW__ = 0;
 invoke_vii(445,(((3920 + 4|0))|0),(4648|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(-1,-1)|0;
  $23 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((3920 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 HEAP32[((3920 + 76|0))>>2] = 0;
 HEAP32[((3920 + 80|0))>>2] = -1;
 $24 = HEAP32[_stderr>>2]|0;
 HEAP32[4696>>2] = ((6320 + 8|0));
 __ZNSt3__16localeC2Ev(((4696 + 4|0)));
 ;HEAP32[((4696 + 8|0))+0>>2]=0|0;HEAP32[((4696 + 8|0))+4>>2]=0|0;HEAP32[((4696 + 8|0))+8>>2]=0|0;HEAP32[((4696 + 8|0))+12>>2]=0|0;HEAP32[((4696 + 8|0))+16>>2]=0|0;HEAP32[((4696 + 8|0))+20>>2]=0|0;
 HEAP32[4696>>2] = ((5152 + 8|0));
 HEAP32[((4696 + 32|0))>>2] = $24;
 __ZNSt3__16localeC2ERKS0_($2,((4696 + 4|0)));
 __THREW__ = 0;
 $25 = (invoke_iii(457,($2|0),(9200|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch(-1,-1)|0;
  $29 = tempRet0;
  __ZNSt3__16localeD2Ev($2);
  HEAP32[4696>>2] = ((6320 + 8|0));
  __ZNSt3__16localeD2Ev(((4696 + 4|0)));
  ___resumeException($28|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((4696 + 36|0))>>2] = $25;
 HEAP32[((4696 + 40|0))>>2] = ((4600 + 16|0));
 $30 = HEAP32[$25>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (FUNCTION_TABLE_ii[$32 & 1023]($25)|0);
 $34 = $33&1;
 HEAP8[((4696 + 44|0))>>0] = $34;
 HEAP32[4008>>2] = ((6528 + 12|0));
 HEAP32[((4008 + 4|0))>>2] = ((6528 + 32|0));
 __THREW__ = 0;
 invoke_vii(445,(((4008 + 4|0))|0),(4696|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $37 = ___cxa_find_matching_catch(-1,-1)|0;
  $38 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((4008 + 4|0)));
  ___resumeException($37|0);
  // unreachable;
 }
 HEAP32[((4008 + 76|0))>>2] = 0;
 HEAP32[((4008 + 80|0))>>2] = -1;
 $39 = HEAP32[4008>>2]|0;
 $40 = (($39) + -12|0);
 $41 = HEAP32[$40>>2]|0;
 $$sum = (($41) + 24)|0;
 $42 = (4008 + ($$sum)|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[4096>>2] = ((6528 + 12|0));
 HEAP32[((4096 + 4|0))>>2] = ((6528 + 32|0));
 __THREW__ = 0;
 invoke_vii(445,(((4096 + 4|0))|0),($43|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $46 = ___cxa_find_matching_catch(-1,-1)|0;
  $47 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((4096 + 4|0)));
  ___resumeException($46|0);
  // unreachable;
 }
 HEAP32[((4096 + 76|0))>>2] = 0;
 HEAP32[((4096 + 80|0))>>2] = -1;
 $48 = HEAP32[3832>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum7 = (($50) + 72)|0;
 $51 = (3832 + ($$sum7)|0);
 HEAP32[$51>>2] = 3920;
 $52 = HEAP32[4008>>2]|0;
 $53 = (($52) + -12|0);
 $54 = HEAP32[$53>>2]|0;
 $$sum8 = (($54) + 4)|0;
 $55 = (4008 + ($$sum8)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 | 8192;
 HEAP32[$55>>2] = $57;
 $58 = HEAP32[4008>>2]|0;
 $59 = (($58) + -12|0);
 $60 = HEAP32[$59>>2]|0;
 $$sum9 = (($60) + 72)|0;
 $61 = (4008 + ($$sum9)|0);
 HEAP32[$61>>2] = 3920;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(4744,$4,((4600 + 24|0)));
 HEAP32[4184>>2] = ((6488 + 12|0));
 HEAP32[((4184 + 8|0))>>2] = ((6488 + 32|0));
 HEAP32[((4184 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(445,(((4184 + 8|0))|0),(4744|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((4184 + 8|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 HEAP32[((4184 + 80|0))>>2] = 0;
 HEAP32[((4184 + 84|0))>>2] = -1;
 HEAP32[4800>>2] = ((6384 + 8|0));
 __ZNSt3__16localeC2Ev(((4800 + 4|0)));
 ;HEAP32[((4800 + 8|0))+0>>2]=0|0;HEAP32[((4800 + 8|0))+4>>2]=0|0;HEAP32[((4800 + 8|0))+8>>2]=0|0;HEAP32[((4800 + 8|0))+12>>2]=0|0;HEAP32[((4800 + 8|0))+16>>2]=0|0;HEAP32[((4800 + 8|0))+20>>2]=0|0;
 HEAP32[4800>>2] = ((4896 + 8|0));
 HEAP32[((4800 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($1,((4800 + 4|0)));
 __THREW__ = 0;
 $66 = (invoke_iii(457,($1|0),(9208|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch(-1,-1)|0;
  $70 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[4800>>2] = ((6384 + 8|0));
  __ZNSt3__16localeD2Ev(((4800 + 4|0)));
  ___resumeException($69|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((4800 + 36|0))>>2] = $66;
 HEAP32[((4800 + 40|0))>>2] = ((4600 + 32|0));
 $71 = HEAP32[$66>>2]|0;
 $72 = (($71) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (FUNCTION_TABLE_ii[$73 & 1023]($66)|0);
 $75 = $74&1;
 HEAP8[((4800 + 44|0))>>0] = $75;
 HEAP32[4272>>2] = ((6568 + 12|0));
 HEAP32[((4272 + 4|0))>>2] = ((6568 + 32|0));
 __THREW__ = 0;
 invoke_vii(445,(((4272 + 4|0))|0),(4800|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $78 = ___cxa_find_matching_catch(-1,-1)|0;
  $79 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((4272 + 4|0)));
  ___resumeException($78|0);
  // unreachable;
 }
 HEAP32[((4272 + 76|0))>>2] = 0;
 HEAP32[((4272 + 80|0))>>2] = -1;
 HEAP32[4848>>2] = ((6384 + 8|0));
 __ZNSt3__16localeC2Ev(((4848 + 4|0)));
 ;HEAP32[((4848 + 8|0))+0>>2]=0|0;HEAP32[((4848 + 8|0))+4>>2]=0|0;HEAP32[((4848 + 8|0))+8>>2]=0|0;HEAP32[((4848 + 8|0))+12>>2]=0|0;HEAP32[((4848 + 8|0))+16>>2]=0|0;HEAP32[((4848 + 8|0))+20>>2]=0|0;
 HEAP32[4848>>2] = ((4896 + 8|0));
 HEAP32[((4848 + 32|0))>>2] = $24;
 __ZNSt3__16localeC2ERKS0_($0,((4848 + 4|0)));
 __THREW__ = 0;
 $80 = (invoke_iii(457,($0|0),(9208|0))|0);
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch(-1,-1)|0;
  $84 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[4848>>2] = ((6384 + 8|0));
  __ZNSt3__16localeD2Ev(((4848 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((4848 + 36|0))>>2] = $80;
 HEAP32[((4848 + 40|0))>>2] = ((4600 + 40|0));
 $85 = HEAP32[$80>>2]|0;
 $86 = (($85) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
 $89 = $88&1;
 HEAP8[((4848 + 44|0))>>0] = $89;
 HEAP32[4360>>2] = ((6568 + 12|0));
 HEAP32[((4360 + 4|0))>>2] = ((6568 + 32|0));
 __THREW__ = 0;
 invoke_vii(445,(((4360 + 4|0))|0),(4848|0));
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $92 = ___cxa_find_matching_catch(-1,-1)|0;
  $93 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((4360 + 4|0)));
  ___resumeException($92|0);
  // unreachable;
 }
 HEAP32[((4360 + 76|0))>>2] = 0;
 HEAP32[((4360 + 80|0))>>2] = -1;
 $94 = HEAP32[4360>>2]|0;
 $95 = (($94) + -12|0);
 $96 = HEAP32[$95>>2]|0;
 $$sum10 = (($96) + 24)|0;
 $97 = (4360 + ($$sum10)|0);
 $98 = HEAP32[$97>>2]|0;
 HEAP32[4448>>2] = ((6568 + 12|0));
 HEAP32[((4448 + 4|0))>>2] = ((6568 + 32|0));
 __THREW__ = 0;
 invoke_vii(445,(((4448 + 4|0))|0),($98|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((4448 + 4|0)));
  ___resumeException($101|0);
  // unreachable;
 } else {
  HEAP32[((4448 + 76|0))>>2] = 0;
  HEAP32[((4448 + 80|0))>>2] = -1;
  $103 = HEAP32[4184>>2]|0;
  $104 = (($103) + -12|0);
  $105 = HEAP32[$104>>2]|0;
  $$sum11 = (($105) + 72)|0;
  $106 = (4184 + ($$sum11)|0);
  HEAP32[$106>>2] = 4272;
  $107 = HEAP32[4360>>2]|0;
  $108 = (($107) + -12|0);
  $109 = HEAP32[$108>>2]|0;
  $$sum12 = (($109) + 4)|0;
  $110 = (4360 + ($$sum12)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | 8192;
  HEAP32[$110>>2] = $112;
  $113 = HEAP32[4360>>2]|0;
  $114 = (($113) + -12|0);
  $115 = HEAP32[$114>>2]|0;
  $$sum13 = (($115) + 72)|0;
  $116 = (4360 + ($$sum13)|0);
  HEAP32[$116>>2] = 4272;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(617,(3920|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(617,(4096|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(618,(4272|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(618,(4448|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,9208)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 1023]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((5008 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6>>0] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 __THREW__ = 0;
 $7 = (invoke_iii(457,($0|0),(9208|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((6384 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 }
 $10 = (($this) + 36|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($7)|0);
 $15 = (($this) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
 $21 = (($this) + 53|0);
 $22 = $20&1;
 HEAP8[$21>>0] = $22;
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)>(8);
 if (!($24)) {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(619,(5112|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((6384 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,9208)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(5112);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 1023]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   } else if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 1023]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,9200)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 1023]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((5264 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6>>0] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 __THREW__ = 0;
 $7 = (invoke_iii(457,($0|0),(9200|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((6320 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 }
 $10 = (($this) + 36|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($7)|0);
 $15 = (($this) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
 $21 = (($this) + 53|0);
 $22 = $20&1;
 HEAP8[$21>>0] = $22;
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)>(8);
 if (!($24)) {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(619,(5112|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((6320 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,9200)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(5112);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 1023]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 1023]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a268() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((620|0),(4536|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5408 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 __THREW__ = 0;
 $2 = (invoke_ii(621,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($10|0);
  // unreachable;
 } else {
  $5 = (($this) + 4|0);
  $6 = (($0) + 1)|0;
  $7 = (($2) + 4|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$2>>2] = $0;
  $8 = (($2) + 12|0);
  HEAP32[$5>>2] = $8;
  $9 = (($2) + 8|0);
  HEAP32[$9>>2] = 0;
  _memcpy(($8|0),($msg|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5408 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5408 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5432 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_strlen(($7|0))|0);
 $9 = (($8) + 13)|0;
 __THREW__ = 0;
 $10 = (invoke_ii(621,($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = (($8) + 1)|0;
  $14 = (($10) + 4|0);
  HEAP32[$14>>2] = $8;
  HEAP32[$10>>2] = $8;
  $15 = (($10) + 12|0);
  HEAP32[$0>>2] = $15;
  $16 = (($10) + 8|0);
  HEAP32[$16>>2] = 0;
  _memcpy(($15|0),($7|0),($13|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5432 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 __THREW__ = 0;
 $2 = (invoke_ii(621,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($10|0);
  // unreachable;
 } else {
  $5 = (($this) + 4|0);
  $6 = (($0) + 1)|0;
  $7 = (($2) + 4|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$2>>2] = $0;
  $8 = (($2) + 12|0);
  HEAP32[$5>>2] = $8;
  $9 = (($2) + 8|0);
  HEAP32[$9>>2] = 0;
  _memcpy(($8|0),($msg|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5432 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5432 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5408 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5432 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = ($1>>>0)<(11);
 if ($3) {
  $4 = $1 << 1;
  $5 = $4&255;
  HEAP8[$agg$result>>0] = $5;
  $6 = (($agg$result) + 1|0);
  $__p$0$i$i$i = $6;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = (($1) + 16)|0;
  $8 = $7 & -16;
  $9 = (__Znwj($8)|0);
  $10 = (($agg$result) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = $8 | 1;
  HEAP32[$agg$result>>2] = $11;
  $12 = (($agg$result) + 4|0);
  HEAP32[$12>>2] = $1;
  $__p$0$i$i$i = $9;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = (($what_arg) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,5656,2)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = (($ec) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $25 = (($0) + 1|0);
    $26 = $18&255;
    $27 = $26 >>> 1;
    $28 = $25;$29 = $27;
   } else {
    $21 = (($0) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $28 = $22;$29 = $24;
   }
   __THREW__ = 0;
   (invoke_iiii(478,($what_arg|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if (!($31)) {
    $32 = HEAP8[$0>>0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     break;
    }
    $35 = (($0) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    __ZdlPv($36);
    break;
   }
   $37 = ___cxa_find_matching_catch(-1,-1)|0;
   $38 = tempRet0;
   $39 = HEAP8[$0>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    ___resumeException($37|0);
    // unreachable;
   }
   $42 = (($0) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   __ZdlPv($43);
   ___resumeException($37|0);
   // unreachable;
  }
 } while(0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$1>>0] = $6;
  $7 = (($1) + 1|0);
  $__p$0$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($1) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$1>>2] = $12;
  $13 = (($1) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$i$i$i = $10;
 }
 _memcpy(($__p$0$i$i$i|0),($what_arg|0),($2|0))|0;
 $14 = (($__p$0$i$i$i) + ($2)|0);
 HEAP8[$14>>0] = 0;
 __THREW__ = 0;
 invoke_viii(622,($0|0),($ec|0),($1|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $40 = ___cxa_find_matching_catch(-1,-1)|0;
   $41 = tempRet0;
   $$0 = $41;$$01 = $40;
  } else {
   __THREW__ = 0;
   invoke_vii(453,($this|0),($0|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $42 = ___cxa_find_matching_catch(-1,-1)|0;
    $43 = tempRet0;
    $44 = HEAP8[$0>>0]|0;
    $45 = $44 & 1;
    $46 = ($45<<24>>24)==(0);
    if ($46) {
     $$0 = $43;$$01 = $42;
     break;
    }
    $47 = (($0) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    __ZdlPv($48);
    $$0 = $43;$$01 = $42;
    break;
   }
   $19 = HEAP8[$0>>0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = (($0) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    __ZdlPv($23);
   }
   $24 = HEAP8[$1>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    HEAP32[$this>>2] = ((5664 + 8|0));
    $29 = (($this) + 8|0);
    $30 = $ec;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $29;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    STACKTOP = sp;return;
   }
   $27 = (($1) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   __ZdlPv($28);
   HEAP32[$this>>2] = ((5664 + 8|0));
   $29 = (($this) + 8|0);
   $30 = $ec;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = $29;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   STACKTOP = sp;return;
  }
 } while(0);
 $49 = HEAP8[$1>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $52 = (($1) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 __ZdlPv($53);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112__next_primeEj($n) {
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$0$ph$i$i$i = 0, $$0$ph$i$i$i2 = 0, $$k0$0 = 0, $$neg1$i$i$i = 0, $$neg1$i$i$i6 = 0, $$sum$i$i$i = 0, $$sum$i$i$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len$0$i$i$i = 0, $__len$0$i$i$i4 = 0;
 var $__len$0$ph$i$i$i = 0, $__len$0$ph$i$i$i1 = 0, $i$015 = 0, $in$0 = 0, $j$012 = 0, $k0$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n>>>0)<(212);
 if ($0) {
  $$0$ph$i$i$i = 5808;$__len$0$ph$i$i$i = 48;
  L2: while(1) {
   $__len$0$i$i$i = $__len$0$ph$i$i$i;
   while(1) {
    $1 = ($__len$0$i$i$i|0)==(0);
    if ($1) {
     break L2;
    }
    $2 = (($__len$0$i$i$i|0) / 2)&-1;
    $3 = (($$0$ph$i$i$i) + ($2<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4>>>0)<($n>>>0);
    if ($5) {
     break;
    } else {
     $__len$0$i$i$i = $2;
    }
   }
   $$sum$i$i$i = (($2) + 1)|0;
   $6 = (($$0$ph$i$i$i) + ($$sum$i$i$i<<2)|0);
   $$neg1$i$i$i = (($__len$0$i$i$i) + -1)|0;
   $7 = (($$neg1$i$i$i) - ($2))|0;
   $$0$ph$i$i$i = $6;$__len$0$ph$i$i$i = $7;
  }
  $8 = HEAP32[$$0$ph$i$i$i>>2]|0;
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($n>>>0)>(4294967291);
 if ($9) {
  $10 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(623,($10|0),(6192|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch(-1,-1)|0;
   $14 = tempRet0;
   ___cxa_free_exception(($10|0));
   ___resumeException($13|0);
   // unreachable;
  } else {
   HEAP32[$10>>2] = ((5592 + 8|0));
   ___cxa_throw(($10|0),(5640|0),(116|0));
   // unreachable;
  }
 }
 $15 = (($n>>>0) / 210)&-1;
 $16 = ($15*210)|0;
 $17 = (($n) - ($16))|0;
 $$0$ph$i$i$i2 = 6000;$__len$0$ph$i$i$i1 = 48;
 L17: while(1) {
  $__len$0$i$i$i4 = $__len$0$ph$i$i$i1;
  while(1) {
   $18 = ($__len$0$i$i$i4|0)==(0);
   if ($18) {
    break L17;
   }
   $19 = (($__len$0$i$i$i4|0) / 2)&-1;
   $20 = (($$0$ph$i$i$i2) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21>>>0)<($17>>>0);
   if ($22) {
    break;
   } else {
    $__len$0$i$i$i4 = $19;
   }
  }
  $$sum$i$i$i5 = (($19) + 1)|0;
  $23 = (($$0$ph$i$i$i2) + ($$sum$i$i$i5<<2)|0);
  $$neg1$i$i$i6 = (($__len$0$i$i$i4) + -1)|0;
  $24 = (($$neg1$i$i$i6) - ($19))|0;
  $$0$ph$i$i$i2 = $23;$__len$0$ph$i$i$i1 = $24;
 }
 $25 = $$0$ph$i$i$i2;
 $26 = (($25) - (6000))|0;
 $27 = $26 >> 2;
 $28 = (6000 + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($16))|0;
 $in$0 = $27;$k0$0 = $15;$storemerge = $30;
 L24: while(1) {
  $j$012 = 5;
  while(1) {
   $33 = (5808 + ($j$012<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($storemerge>>>0) / ($34>>>0))&-1;
   $36 = ($35>>>0)<($34>>>0);
   if ($36) {
    $$0 = $storemerge;
    label = 120;
    break L24;
   }
   $37 = Math_imul($35, $34)|0;
   $38 = ($storemerge|0)==($37|0);
   $32 = (($j$012) + 1)|0;
   if ($38) {
    break;
   }
   $31 = ($32>>>0)<(47);
   if ($31) {
    $j$012 = $32;
   } else {
    label = 21;
    break;
   }
  }
  L30: do {
   if ((label|0) == 21) {
    label = 0;
    $39 = ($storemerge>>>0)<(44521);
    if ($39) {
     $$0 = $storemerge;
     label = 120;
     break L24;
    }
    $40 = (($storemerge>>>0) / 211)&-1;
    $45 = $40;$i$015 = 211;
    while(1) {
     $44 = Math_imul($45, $i$015)|0;
     $46 = ($storemerge|0)==($44|0);
     if ($46) {
      break L30;
     }
     $47 = (($i$015) + 10)|0;
     $48 = (($storemerge>>>0) / ($47>>>0))&-1;
     $49 = ($48>>>0)<($47>>>0);
     if ($49) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $50 = Math_imul($48, $47)|0;
     $51 = ($storemerge|0)==($50|0);
     if ($51) {
      break L30;
     }
     $52 = (($i$015) + 12)|0;
     $53 = (($storemerge>>>0) / ($52>>>0))&-1;
     $54 = ($53>>>0)<($52>>>0);
     if ($54) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $55 = Math_imul($53, $52)|0;
     $56 = ($storemerge|0)==($55|0);
     if ($56) {
      break L30;
     }
     $57 = (($i$015) + 16)|0;
     $58 = (($storemerge>>>0) / ($57>>>0))&-1;
     $59 = ($58>>>0)<($57>>>0);
     if ($59) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $60 = Math_imul($58, $57)|0;
     $61 = ($storemerge|0)==($60|0);
     if ($61) {
      break L30;
     }
     $62 = (($i$015) + 18)|0;
     $63 = (($storemerge>>>0) / ($62>>>0))&-1;
     $64 = ($63>>>0)<($62>>>0);
     if ($64) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $65 = Math_imul($63, $62)|0;
     $66 = ($storemerge|0)==($65|0);
     if ($66) {
      break L30;
     }
     $67 = (($i$015) + 22)|0;
     $68 = (($storemerge>>>0) / ($67>>>0))&-1;
     $69 = ($68>>>0)<($67>>>0);
     if ($69) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $70 = Math_imul($68, $67)|0;
     $71 = ($storemerge|0)==($70|0);
     if ($71) {
      break L30;
     }
     $72 = (($i$015) + 28)|0;
     $73 = (($storemerge>>>0) / ($72>>>0))&-1;
     $74 = ($73>>>0)<($72>>>0);
     if ($74) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $75 = Math_imul($73, $72)|0;
     $76 = ($storemerge|0)==($75|0);
     if ($76) {
      break L30;
     }
     $77 = (($i$015) + 30)|0;
     $78 = (($storemerge>>>0) / ($77>>>0))&-1;
     $79 = ($78>>>0)<($77>>>0);
     if ($79) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $80 = Math_imul($78, $77)|0;
     $81 = ($storemerge|0)==($80|0);
     if ($81) {
      break L30;
     }
     $82 = (($i$015) + 36)|0;
     $83 = (($storemerge>>>0) / ($82>>>0))&-1;
     $84 = ($83>>>0)<($82>>>0);
     if ($84) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $85 = Math_imul($83, $82)|0;
     $86 = ($storemerge|0)==($85|0);
     if ($86) {
      break L30;
     }
     $87 = (($i$015) + 40)|0;
     $88 = (($storemerge>>>0) / ($87>>>0))&-1;
     $89 = ($88>>>0)<($87>>>0);
     if ($89) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $90 = Math_imul($88, $87)|0;
     $91 = ($storemerge|0)==($90|0);
     if ($91) {
      break L30;
     }
     $92 = (($i$015) + 42)|0;
     $93 = (($storemerge>>>0) / ($92>>>0))&-1;
     $94 = ($93>>>0)<($92>>>0);
     if ($94) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $95 = Math_imul($93, $92)|0;
     $96 = ($storemerge|0)==($95|0);
     if ($96) {
      break L30;
     }
     $97 = (($i$015) + 46)|0;
     $98 = (($storemerge>>>0) / ($97>>>0))&-1;
     $99 = ($98>>>0)<($97>>>0);
     if ($99) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $100 = Math_imul($98, $97)|0;
     $101 = ($storemerge|0)==($100|0);
     if ($101) {
      break L30;
     }
     $102 = (($i$015) + 52)|0;
     $103 = (($storemerge>>>0) / ($102>>>0))&-1;
     $104 = ($103>>>0)<($102>>>0);
     if ($104) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $105 = Math_imul($103, $102)|0;
     $106 = ($storemerge|0)==($105|0);
     if ($106) {
      break L30;
     }
     $107 = (($i$015) + 58)|0;
     $108 = (($storemerge>>>0) / ($107>>>0))&-1;
     $109 = ($108>>>0)<($107>>>0);
     if ($109) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $110 = Math_imul($108, $107)|0;
     $111 = ($storemerge|0)==($110|0);
     if ($111) {
      break L30;
     }
     $112 = (($i$015) + 60)|0;
     $113 = (($storemerge>>>0) / ($112>>>0))&-1;
     $114 = ($113>>>0)<($112>>>0);
     if ($114) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $115 = Math_imul($113, $112)|0;
     $116 = ($storemerge|0)==($115|0);
     if ($116) {
      break L30;
     }
     $117 = (($i$015) + 66)|0;
     $118 = (($storemerge>>>0) / ($117>>>0))&-1;
     $119 = ($118>>>0)<($117>>>0);
     if ($119) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $120 = Math_imul($118, $117)|0;
     $121 = ($storemerge|0)==($120|0);
     if ($121) {
      break L30;
     }
     $122 = (($i$015) + 70)|0;
     $123 = (($storemerge>>>0) / ($122>>>0))&-1;
     $124 = ($123>>>0)<($122>>>0);
     if ($124) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $125 = Math_imul($123, $122)|0;
     $126 = ($storemerge|0)==($125|0);
     if ($126) {
      break L30;
     }
     $127 = (($i$015) + 72)|0;
     $128 = (($storemerge>>>0) / ($127>>>0))&-1;
     $129 = ($128>>>0)<($127>>>0);
     if ($129) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $130 = Math_imul($128, $127)|0;
     $131 = ($storemerge|0)==($130|0);
     if ($131) {
      break L30;
     }
     $132 = (($i$015) + 78)|0;
     $133 = (($storemerge>>>0) / ($132>>>0))&-1;
     $134 = ($133>>>0)<($132>>>0);
     if ($134) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $135 = Math_imul($133, $132)|0;
     $136 = ($storemerge|0)==($135|0);
     if ($136) {
      break L30;
     }
     $137 = (($i$015) + 82)|0;
     $138 = (($storemerge>>>0) / ($137>>>0))&-1;
     $139 = ($138>>>0)<($137>>>0);
     if ($139) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $140 = Math_imul($138, $137)|0;
     $141 = ($storemerge|0)==($140|0);
     if ($141) {
      break L30;
     }
     $142 = (($i$015) + 88)|0;
     $143 = (($storemerge>>>0) / ($142>>>0))&-1;
     $144 = ($143>>>0)<($142>>>0);
     if ($144) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $145 = Math_imul($143, $142)|0;
     $146 = ($storemerge|0)==($145|0);
     if ($146) {
      break L30;
     }
     $147 = (($i$015) + 96)|0;
     $148 = (($storemerge>>>0) / ($147>>>0))&-1;
     $149 = ($148>>>0)<($147>>>0);
     if ($149) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $150 = Math_imul($148, $147)|0;
     $151 = ($storemerge|0)==($150|0);
     if ($151) {
      break L30;
     }
     $152 = (($i$015) + 100)|0;
     $153 = (($storemerge>>>0) / ($152>>>0))&-1;
     $154 = ($153>>>0)<($152>>>0);
     if ($154) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $155 = Math_imul($153, $152)|0;
     $156 = ($storemerge|0)==($155|0);
     if ($156) {
      break L30;
     }
     $157 = (($i$015) + 102)|0;
     $158 = (($storemerge>>>0) / ($157>>>0))&-1;
     $159 = ($158>>>0)<($157>>>0);
     if ($159) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $160 = Math_imul($158, $157)|0;
     $161 = ($storemerge|0)==($160|0);
     if ($161) {
      break L30;
     }
     $162 = (($i$015) + 106)|0;
     $163 = (($storemerge>>>0) / ($162>>>0))&-1;
     $164 = ($163>>>0)<($162>>>0);
     if ($164) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $165 = Math_imul($163, $162)|0;
     $166 = ($storemerge|0)==($165|0);
     if ($166) {
      break L30;
     }
     $167 = (($i$015) + 108)|0;
     $168 = (($storemerge>>>0) / ($167>>>0))&-1;
     $169 = ($168>>>0)<($167>>>0);
     if ($169) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $170 = Math_imul($168, $167)|0;
     $171 = ($storemerge|0)==($170|0);
     if ($171) {
      break L30;
     }
     $172 = (($i$015) + 112)|0;
     $173 = (($storemerge>>>0) / ($172>>>0))&-1;
     $174 = ($173>>>0)<($172>>>0);
     if ($174) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $175 = Math_imul($173, $172)|0;
     $176 = ($storemerge|0)==($175|0);
     if ($176) {
      break L30;
     }
     $177 = (($i$015) + 120)|0;
     $178 = (($storemerge>>>0) / ($177>>>0))&-1;
     $179 = ($178>>>0)<($177>>>0);
     if ($179) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $180 = Math_imul($178, $177)|0;
     $181 = ($storemerge|0)==($180|0);
     if ($181) {
      break L30;
     }
     $182 = (($i$015) + 126)|0;
     $183 = (($storemerge>>>0) / ($182>>>0))&-1;
     $184 = ($183>>>0)<($182>>>0);
     if ($184) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $185 = Math_imul($183, $182)|0;
     $186 = ($storemerge|0)==($185|0);
     if ($186) {
      break L30;
     }
     $187 = (($i$015) + 130)|0;
     $188 = (($storemerge>>>0) / ($187>>>0))&-1;
     $189 = ($188>>>0)<($187>>>0);
     if ($189) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $190 = Math_imul($188, $187)|0;
     $191 = ($storemerge|0)==($190|0);
     if ($191) {
      break L30;
     }
     $192 = (($i$015) + 136)|0;
     $193 = (($storemerge>>>0) / ($192>>>0))&-1;
     $194 = ($193>>>0)<($192>>>0);
     if ($194) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $195 = Math_imul($193, $192)|0;
     $196 = ($storemerge|0)==($195|0);
     if ($196) {
      break L30;
     }
     $197 = (($i$015) + 138)|0;
     $198 = (($storemerge>>>0) / ($197>>>0))&-1;
     $199 = ($198>>>0)<($197>>>0);
     if ($199) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $200 = Math_imul($198, $197)|0;
     $201 = ($storemerge|0)==($200|0);
     if ($201) {
      break L30;
     }
     $202 = (($i$015) + 142)|0;
     $203 = (($storemerge>>>0) / ($202>>>0))&-1;
     $204 = ($203>>>0)<($202>>>0);
     if ($204) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $205 = Math_imul($203, $202)|0;
     $206 = ($storemerge|0)==($205|0);
     if ($206) {
      break L30;
     }
     $207 = (($i$015) + 148)|0;
     $208 = (($storemerge>>>0) / ($207>>>0))&-1;
     $209 = ($208>>>0)<($207>>>0);
     if ($209) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $210 = Math_imul($208, $207)|0;
     $211 = ($storemerge|0)==($210|0);
     if ($211) {
      break L30;
     }
     $212 = (($i$015) + 150)|0;
     $213 = (($storemerge>>>0) / ($212>>>0))&-1;
     $214 = ($213>>>0)<($212>>>0);
     if ($214) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $215 = Math_imul($213, $212)|0;
     $216 = ($storemerge|0)==($215|0);
     if ($216) {
      break L30;
     }
     $217 = (($i$015) + 156)|0;
     $218 = (($storemerge>>>0) / ($217>>>0))&-1;
     $219 = ($218>>>0)<($217>>>0);
     if ($219) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $220 = Math_imul($218, $217)|0;
     $221 = ($storemerge|0)==($220|0);
     if ($221) {
      break L30;
     }
     $222 = (($i$015) + 162)|0;
     $223 = (($storemerge>>>0) / ($222>>>0))&-1;
     $224 = ($223>>>0)<($222>>>0);
     if ($224) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $225 = Math_imul($223, $222)|0;
     $226 = ($storemerge|0)==($225|0);
     if ($226) {
      break L30;
     }
     $227 = (($i$015) + 166)|0;
     $228 = (($storemerge>>>0) / ($227>>>0))&-1;
     $229 = ($228>>>0)<($227>>>0);
     if ($229) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $230 = Math_imul($228, $227)|0;
     $231 = ($storemerge|0)==($230|0);
     if ($231) {
      break L30;
     }
     $232 = (($i$015) + 168)|0;
     $233 = (($storemerge>>>0) / ($232>>>0))&-1;
     $234 = ($233>>>0)<($232>>>0);
     if ($234) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $235 = Math_imul($233, $232)|0;
     $236 = ($storemerge|0)==($235|0);
     if ($236) {
      break L30;
     }
     $237 = (($i$015) + 172)|0;
     $238 = (($storemerge>>>0) / ($237>>>0))&-1;
     $239 = ($238>>>0)<($237>>>0);
     if ($239) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $240 = Math_imul($238, $237)|0;
     $241 = ($storemerge|0)==($240|0);
     if ($241) {
      break L30;
     }
     $242 = (($i$015) + 178)|0;
     $243 = (($storemerge>>>0) / ($242>>>0))&-1;
     $244 = ($243>>>0)<($242>>>0);
     if ($244) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $245 = Math_imul($243, $242)|0;
     $246 = ($storemerge|0)==($245|0);
     if ($246) {
      break L30;
     }
     $247 = (($i$015) + 180)|0;
     $248 = (($storemerge>>>0) / ($247>>>0))&-1;
     $249 = ($248>>>0)<($247>>>0);
     if ($249) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $250 = Math_imul($248, $247)|0;
     $251 = ($storemerge|0)==($250|0);
     if ($251) {
      break L30;
     }
     $252 = (($i$015) + 186)|0;
     $253 = (($storemerge>>>0) / ($252>>>0))&-1;
     $254 = ($253>>>0)<($252>>>0);
     if ($254) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $255 = Math_imul($253, $252)|0;
     $256 = ($storemerge|0)==($255|0);
     if ($256) {
      break L30;
     }
     $257 = (($i$015) + 190)|0;
     $258 = (($storemerge>>>0) / ($257>>>0))&-1;
     $259 = ($258>>>0)<($257>>>0);
     if ($259) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $260 = Math_imul($258, $257)|0;
     $261 = ($storemerge|0)==($260|0);
     if ($261) {
      break L30;
     }
     $262 = (($i$015) + 192)|0;
     $263 = (($storemerge>>>0) / ($262>>>0))&-1;
     $264 = ($263>>>0)<($262>>>0);
     if ($264) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $265 = Math_imul($263, $262)|0;
     $266 = ($storemerge|0)==($265|0);
     if ($266) {
      break L30;
     }
     $267 = (($i$015) + 196)|0;
     $268 = (($storemerge>>>0) / ($267>>>0))&-1;
     $269 = ($268>>>0)<($267>>>0);
     if ($269) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $270 = Math_imul($268, $267)|0;
     $271 = ($storemerge|0)==($270|0);
     if ($271) {
      break L30;
     }
     $272 = (($i$015) + 198)|0;
     $273 = (($storemerge>>>0) / ($272>>>0))&-1;
     $274 = ($273>>>0)<($272>>>0);
     if ($274) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $275 = Math_imul($273, $272)|0;
     $276 = ($storemerge|0)==($275|0);
     if ($276) {
      break L30;
     }
     $277 = (($i$015) + 208)|0;
     $278 = (($storemerge>>>0) / ($277>>>0))&-1;
     $279 = ($278>>>0)<($277>>>0);
     if ($279) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $280 = Math_imul($278, $277)|0;
     $281 = ($storemerge|0)==($280|0);
     $42 = (($i$015) + 210)|0;
     if ($281) {
      break L30;
     }
     $41 = (($storemerge>>>0) / ($42>>>0))&-1;
     $43 = ($41>>>0)<($42>>>0);
     if ($43) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     } else {
      $45 = $41;$i$015 = $42;
     }
    }
   }
  } while(0);
  $282 = (($in$0) + 1)|0;
  $283 = ($282|0)==(48);
  $$ = $283 ? 0 : $282;
  $284 = $283&1;
  $$k0$0 = (($284) + ($k0$0))|0;
  $285 = ($$k0$0*210)|0;
  $286 = (6000 + ($$<<2)|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = (($287) + ($285))|0;
  $in$0 = $$;$k0$0 = $$k0$0;$storemerge = $288;
 }
 if ((label|0) == 120) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((6216|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((6240|0),(6216|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((6216|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(624,(6216|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(625,(6216|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(624,(6216|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(626,(6240|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(625,(6216|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(624,(6216|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(626,(6240|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(627);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch(-1,-1)|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(463);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(628,($0|0),(6288|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((5488 + 8|0));
  ___cxa_throw(($0|0),(5536|0),(113|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 }
 $3 = (($__str) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($__str) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6 << 1;
  $10 = $9&255;
  HEAP8[$this>>0] = $10;
  $11 = (($this) + 1|0);
  $__p$0$i$i = $11;
 } else {
  $12 = (($6) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  $15 = (($this) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = $13 | 1;
  HEAP32[$this>>2] = $16;
  $17 = (($this) + 4|0);
  HEAP32[$17>>2] = $6;
  $__p$0$i$i = $14;
 }
 _memcpy(($__p$0$i$i|0),($4|0),($6|0))|0;
 $18 = (($__p$0$i$i) + ($6)|0);
 HEAP8[$18>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$__str>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($__str) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $19 = $10;$27 = $8;
 } else {
  $4 = (($__str) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($__str) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $19 = $7;$27 = $5;
 }
 $11 = HEAP8[$this>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $18 = 10;$21 = $11;
 } else {
  $14 = HEAP32[$this>>2]|0;
  $15 = $14 & -2;
  $phitmp$i$i$i = (($15) + -1)|0;
  $16 = $14&255;
  $18 = $phitmp$i$i$i;$21 = $16;
 }
 $17 = ($18>>>0)<($19>>>0);
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($17) {
  if ($22) {
   $37 = $21&255;
   $38 = $37 >>> 1;
   $40 = $38;
  } else {
   $35 = (($this) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $40 = $36;
  }
  $39 = (($19) - ($18))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$18,$39,$40,0,$40,$19,$27);
  STACKTOP = sp;return ($this|0);
 }
 if ($22) {
  $25 = (($this) + 1|0);
  $26 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $26 = $24;
 }
 _memmove(($26|0),($27|0),($19|0))|0;
 $28 = (($26) + ($19)|0);
 HEAP8[$28>>0] = 0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $19 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
  STACKTOP = sp;return ($this|0);
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $19;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($8>>>0)<($0>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP8[$this>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this>>0] = $22;
  STACKTOP = sp;return ($this|0);
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this>>0] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12>>0] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(629,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = $8 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $39 = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
    break;
   } else {
    $37 = (($this) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $40 = $8 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $44 = $8&255;
  $45 = $44 >>> 1;
  $47 = $45;
 } else {
  $42 = (($this) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $47 = $43;
 }
 $46 = (($47) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $48 = (($21) + 1)|0;
  $49 = $48 | 1;
  HEAP32[$this>>2] = $49;
  $50 = (($this) + 4|0);
  HEAP32[$50>>2] = $15;
  $51 = (($this) + 8|0);
  HEAP32[$51>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $52 = $15 << 1;
  $53 = $52&255;
  HEAP8[$this>>0] = $53;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this>>0] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(629,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = $8 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 4|0);
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $8 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $45 = $8&255;
  $46 = $45 >>> 1;
  $48 = $46;
 } else {
  $43 = (($this) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $48 = $44;
 }
 $47 = (($48) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$47)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $49 = (($21) + 1)|0;
  $50 = $49 | 1;
  HEAP32[$this>>2] = $50;
  $51 = (($this) + 4|0);
  HEAP32[$51>>2] = $15;
  $52 = (($this) + 8|0);
  HEAP32[$52>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $53 = $15 << 1;
  $54 = $53&255;
  HEAP8[$this>>0] = $54;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$i$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 $14 = HEAP8[6672>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((6672|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   HEAP32[6664>>2] = ((7440 + 8|0));
   (___cxa_atexit((142|0),(6664|0),(___dso_handle|0))|0);
   ___cxa_guard_release((6672|0));
  }
 }
 $18 = $0;
 $19 = $18;
 HEAP32[$19>>2] = 1;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = (6664);
 __THREW__ = 0;
 ;HEAP32[$tmpcast$i$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$i$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 invoke_viii(630,($13|0),($tmpcast$i$byval_copy|0),(6720|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch(-1,-1)|0;
  $25 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($24|0);
  // unreachable;
 } else {
  HEAP32[$13>>2] = ((6680 + 8|0));
  ___cxa_throw(($13|0),(6768|0),(138|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6704 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = (($this) + 32|0);
 $$pre1 = (($this) + 36|0);
 L1: do {
  if (!($2)) {
   $i$01$i = $1;
   while(1) {
    $3 = (($i$01$i) + -1)|0;
    $4 = HEAP32[$$pre>>2]|0;
    $5 = (($4) + ($3<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[$$pre1>>2]|0;
    $8 = (($7) + ($3<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    __THREW__ = 0;
    invoke_viii($6|0,0,($this|0),($9|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break;
    }
    $12 = ($3|0)==(0);
    if ($12) {
     break L1;
    } else {
     $i$01$i = $3;
    }
   }
   $20 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  }
 } while(0);
 $13 = (($this) + 28|0);
 __ZNSt3__16localeD2Ev($13);
 $14 = HEAP32[$$pre>>2]|0;
 _free($14);
 $15 = HEAP32[$$pre1>>2]|0;
 _free($15);
 $16 = (($this) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 _free($17);
 $18 = (($this) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 _free($19);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6320 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6384 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(617,($11|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s>>0] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(460,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(627);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(463);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(618,($11|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s>>0] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(460,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(627);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(463);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(460,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(463);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre14 = 0, $$pre14$pre = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 24|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $__s = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP8[$__s>>0] = 0;
 $4 = (($__s) + 4|0);
 HEAP32[$4>>2] = $this;
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum$i = (($7) + 16)|0;
 $8 = (($this) + ($$sum$i)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $$sum1$i = (($7) + 72)|0;
   $11 = (($this) + ($$sum1$i)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   do {
    if ($13) {
     $$pre14 = $7;
     label = 5;
    } else {
     __THREW__ = 0;
     (invoke_ii(617,($12|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $61 = tempRet0;
      $$1 = $60;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre14$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre14 = $$pre14$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    HEAP8[$__s>>0] = 1;
    $$sum = (($$pre14) + 28)|0;
    $16 = (($this) + ($$sum)|0);
    __ZNSt3__16localeC2ERKS0_($2,$16);
    __THREW__ = 0;
    $17 = (invoke_iii(457,($2|0),(7856|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $64 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $65 = tempRet0;
     __ZNSt3__16localeD2Ev($2);
     $$0 = $64;
    } else {
     __ZNSt3__16localeD2Ev($2);
     $20 = HEAP32[$this>>2]|0;
     $21 = (($20) + -12|0);
     $22 = HEAP32[$21>>2]|0;
     $$sum$i$i = (($22) + 24)|0;
     $23 = (($this) + ($$sum$i$i)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($this) + ($22)|0);
     $$sum10 = (($22) + 76)|0;
     $26 = (($this) + ($$sum10)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(-1);
     do {
      if ($28) {
       $$sum12 = (($22) + 28)|0;
       $29 = (($this) + ($$sum12)|0);
       __ZNSt3__16localeC2ERKS0_($1,$29);
       __THREW__ = 0;
       $30 = (invoke_iii(457,($1|0),(9136|0))|0);
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if (!($32)) {
        $33 = HEAP32[$30>>2]|0;
        $34 = (($33) + 28|0);
        $35 = HEAP32[$34>>2]|0;
        __THREW__ = 0;
        $36 = (invoke_iii($35|0,($30|0),32)|0);
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if (!($38)) {
         __ZNSt3__16localeD2Ev($1);
         $41 = $36 << 24 >> 24;
         HEAP32[$26>>2] = $41;
         $43 = $41;
         label = 11;
         break;
        }
       }
       $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $40 = tempRet0;
       __ZNSt3__16localeD2Ev($1);
       $eh$lpad$body$indexZ2D = $39;
      } else {
       $43 = $27;
       label = 11;
      }
     } while(0);
     if ((label|0) == 11) {
      $42 = $43&255;
      $44 = HEAP32[$17>>2]|0;
      $45 = (($44) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      HEAP32[$0>>2] = $24;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiii($46|0,($3|0),($17|0),($$byval_copy|0),($25|0),($42|0),($__n|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if (!($48)) {
       $49 = HEAP32[$3>>2]|0;
       $50 = ($49|0)==(0|0);
       if (!($50)) {
        break;
       }
       $51 = HEAP32[$this>>2]|0;
       $52 = (($51) + -12|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($this) + ($53)|0);
       $$sum11 = (($53) + 16)|0;
       $55 = (($this) + ($$sum11)|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $56 | 5;
       __THREW__ = 0;
       invoke_vii(460,($54|0),($57|0));
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if (!($59)) {
        break;
       }
      }
      $62 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $63 = tempRet0;
      $eh$lpad$body$indexZ2D = $62;
     }
     $$0 = $eh$lpad$body$indexZ2D;
    }
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$1 = $$0;
   }
   (___cxa_begin_catch(($$1|0))|0);
   $66 = HEAP32[$this>>2]|0;
   $67 = (($66) + -12|0);
   $68 = HEAP32[$67>>2]|0;
   $$sum8 = (($68) + 16)|0;
   $69 = (($this) + ($$sum8)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 | 1;
   HEAP32[$69>>2] = $71;
   $$sum9 = (($68) + 20)|0;
   $72 = (($this) + ($$sum9)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 & 1;
   $75 = ($74|0)==(0);
   if ($75) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(627);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if (!($77)) {
    // unreachable;
   }
   $78 = ___cxa_find_matching_catch(-1,-1)|0;
   $79 = tempRet0;
   __THREW__ = 0;
   invoke_v(463);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $83 = tempRet0;
    ___clang_call_terminate($82);
    // unreachable;
   } else {
    ___resumeException($78|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE($this,$__sb) {
 $this = $this|0;
 $__sb = $__sb|0;
 var $$ = 0, $$$us = 0, $$0 = 0, $$0$i$i = 0, $$1 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre23 = 0, $$pre23$pre = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__s = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 HEAP8[$__s>>0] = 0;
 $0 = (($__s) + 4|0);
 HEAP32[$0>>2] = $this;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum$i = (($3) + 16)|0;
 $4 = (($this) + ($$sum$i)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $$sum1$i = (($3) + 72)|0;
   $7 = (($this) + ($$sum1$i)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   do {
    if ($9) {
     $$pre23 = $3;
     label = 5;
    } else {
     __THREW__ = 0;
     (invoke_ii(617,($8|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      $86 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $87 = tempRet0;
      $$1 = $86;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre23$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre23 = $$pre23$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    HEAP8[$__s>>0] = 1;
    $12 = ($__sb|0)==(0|0);
    do {
     if ($12) {
      $132 = (($this) + ($$pre23)|0);
      $$sum19 = (($$pre23) + 16)|0;
      $133 = (($this) + ($$sum19)|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $134 | 1;
      __THREW__ = 0;
      invoke_vii(460,($132|0),($135|0));
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 25;
      } else {
       break L1;
      }
     } else {
      $$sum$i$i = (($$pre23) + 24)|0;
      $13 = (($this) + ($$sum$i$i)|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($14|0)==(0|0);
      $16 = (($14) + 24|0);
      $17 = (($14) + 28|0);
      do {
       if ($15) {
        $18 = (($__sb) + 12|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = (($__sb) + 16|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = ($19|0)==($21|0);
        if ($22) {
         $23 = HEAP32[$__sb>>2]|0;
         $24 = (($23) + 36|0);
         $25 = HEAP32[$24>>2]|0;
         __THREW__ = 0;
         $26 = (invoke_ii($25|0,($__sb|0))|0);
         $27 = __THREW__; __THREW__ = 0;
         $28 = $27&1;
         if (!($28)) {
          $29 = ($26|0)==(-1);
          $$$us = $29 ? 0 : $__sb;
          $30 = ($$$us|0)==(0|0);
          if ($30) {
           label = 37;
           break;
          } else {
           $32 = $$$us;
           label = 10;
          }
         }
        } else {
         $32 = $__sb;
         label = 10;
        }
        if ((label|0) == 10) {
         $31 = (($32) + 12|0);
         $33 = HEAP32[$31>>2]|0;
         $34 = (($32) + 16|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($33|0)==($35|0);
         if (!($36)) {
          label = 37;
          break;
         }
         $37 = HEAP32[$32>>2]|0;
         $38 = (($37) + 36|0);
         $39 = HEAP32[$38>>2]|0;
         __THREW__ = 0;
         (invoke_ii($39|0,($32|0))|0);
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if (!($41)) {
          label = 37;
          break;
         }
        }
        $42 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $43 = tempRet0;
        $lpad$phi$index = $42;
       } else {
        $45 = $__sb;$__c$0 = 0;
        while(1) {
         $44 = ($45|0)==(0|0);
         if ($44) {
          label = 36;
          break;
         }
         $46 = (($45) + 12|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = (($45) + 16|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = ($47|0)==($49|0);
         if ($50) {
          $51 = HEAP32[$45>>2]|0;
          $52 = (($51) + 36|0);
          $53 = HEAP32[$52>>2]|0;
          __THREW__ = 0;
          $54 = (invoke_ii($53|0,($45|0))|0);
          $55 = __THREW__; __THREW__ = 0;
          $56 = $55&1;
          if ($56) {
           label = 26;
           break;
          }
          $57 = ($54|0)==(-1);
          $$ = $57 ? 0 : $45;
          $58 = ($$|0)==(0|0);
          if ($58) {
           label = 36;
           break;
          } else {
           $60 = $$;
          }
         } else {
          $60 = $45;
         }
         $59 = (($60) + 12|0);
         $61 = HEAP32[$59>>2]|0;
         $62 = (($60) + 16|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = ($61|0)==($63|0);
         if ($64) {
          $65 = HEAP32[$60>>2]|0;
          $66 = (($65) + 36|0);
          $67 = HEAP32[$66>>2]|0;
          __THREW__ = 0;
          $68 = (invoke_ii($67|0,($60|0))|0);
          $69 = __THREW__; __THREW__ = 0;
          $70 = $69&1;
          if ($70) {
           label = 26;
           break;
          } else {
           $$0$i$i = $68;
          }
         } else {
          $71 = HEAP8[$61>>0]|0;
          $72 = $71&255;
          $$0$i$i = $72;
         }
         $73 = HEAP32[$16>>2]|0;
         $74 = HEAP32[$17>>2]|0;
         $75 = ($73|0)==($74|0);
         if ($75) {
          $78 = HEAP32[$14>>2]|0;
          $79 = (($78) + 52|0);
          $80 = HEAP32[$79>>2]|0;
          $81 = $$0$i$i & 255;
          __THREW__ = 0;
          $82 = (invoke_iii($80|0,($14|0),($81|0))|0);
          $83 = __THREW__; __THREW__ = 0;
          $84 = $83&1;
          if ($84) {
           label = 26;
           break;
          }
          $85 = ($82|0)==(-1);
          if ($85) {
           label = 36;
           break;
          }
         } else {
          $76 = $$0$i$i&255;
          $77 = (($73) + 1|0);
          HEAP32[$16>>2] = $77;
          HEAP8[$73>>0] = $76;
         }
         $108 = HEAP32[$59>>2]|0;
         $109 = HEAP32[$62>>2]|0;
         $110 = ($108|0)==($109|0);
         if ($110) {
          $111 = HEAP32[$60>>2]|0;
          $112 = (($111) + 40|0);
          $113 = HEAP32[$112>>2]|0;
          __THREW__ = 0;
          (invoke_ii($113|0,($60|0))|0);
          $114 = __THREW__; __THREW__ = 0;
          $115 = $114&1;
          if ($115) {
           label = 26;
           break;
          }
         } else {
          $116 = (($108) + 1|0);
          HEAP32[$59>>2] = $116;
         }
         $117 = (($__c$0) + 1)|0;
         $45 = $60;$__c$0 = $117;
        }
        if ((label|0) == 26) {
         $90 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $91 = tempRet0;
         $lpad$phi$index = $90;
         break;
        }
        else if ((label|0) == 36) {
         $118 = ($__c$0|0)==(0);
         if ($118) {
          label = 37;
          break;
         } else {
          break L1;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       $119 = HEAP32[$this>>2]|0;
       $120 = (($119) + -12|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (($this) + ($121)|0);
       $$sum = (($121) + 16)|0;
       $123 = (($this) + ($$sum)|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = $124 | 4;
       __THREW__ = 0;
       invoke_vii(460,($122|0),($125|0));
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if (!($127)) {
        break L1;
       }
       $92 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $93 = tempRet0;
       $lpad$phi$index = $92;
      }
      (___cxa_begin_catch(($lpad$phi$index|0))|0);
      $94 = HEAP32[$this>>2]|0;
      $95 = (($94) + -12|0);
      $96 = HEAP32[$95>>2]|0;
      $$sum15 = (($96) + 16)|0;
      $97 = (($this) + ($$sum15)|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = $98 | 4;
      HEAP32[$97>>2] = $99;
      $$sum16 = (($96) + 20)|0;
      $100 = (($this) + ($$sum16)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $101 & 4;
      $103 = ($102|0)==(0);
      if ($103) {
       __THREW__ = 0;
       invoke_v(463);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        label = 25;
        break;
       } else {
        break L1;
       }
      }
      __THREW__ = 0;
      invoke_v(627);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if (!($105)) {
       // unreachable;
      }
      $128 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $129 = tempRet0;
      __THREW__ = 0;
      invoke_v(463);
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       $154 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $155 = tempRet0;
       ___clang_call_terminate($154);
       // unreachable;
      } else {
       $$0 = $128;
      }
     }
    } while(0);
    if ((label|0) == 25) {
     $88 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $89 = tempRet0;
     $$0 = $88;
    }
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$1 = $$0;
   }
   (___cxa_begin_catch(($$1|0))|0);
   $138 = HEAP32[$this>>2]|0;
   $139 = (($138) + -12|0);
   $140 = HEAP32[$139>>2]|0;
   $$sum17 = (($140) + 16)|0;
   $141 = (($this) + ($$sum17)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142 | 1;
   HEAP32[$141>>2] = $143;
   $$sum18 = (($140) + 20)|0;
   $144 = (($this) + ($$sum18)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145 & 1;
   $147 = ($146|0)==(0);
   if ($147) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(627);
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   if (!($149)) {
    // unreachable;
   }
   $150 = ___cxa_find_matching_catch(-1,-1)|0;
   $151 = tempRet0;
   __THREW__ = 0;
   invoke_v(463);
   $152 = __THREW__; __THREW__ = 0;
   $153 = $152&1;
   if ($153) {
    $154 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $155 = tempRet0;
    ___clang_call_terminate($154);
    // unreachable;
   } else {
    ___resumeException($150|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre = 0, $$pre$pre = 0, $$pre7 = 0, $$pre7$pre = 0, $$pre8 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 HEAP8[$__s>>0] = 0;
 $0 = (($__s) + 4|0);
 HEAP32[$0>>2] = $this;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum$i = (($3) + 16)|0;
 $4 = (($this) + ($$sum$i)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $$sum1$i = (($3) + 72)|0;
   $7 = (($this) + ($$sum1$i)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   do {
    if ($9) {
     $$pre = $1;$$pre7 = $3;
     label = 5;
    } else {
     __THREW__ = 0;
     (invoke_ii(617,($8|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      $38 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $39 = tempRet0;
      $$0 = $38;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre7$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre = $$pre$pre;$$pre7 = $$pre7$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    HEAP8[$__s>>0] = 1;
    $$sum$i$i = (($$pre7) + 24)|0;
    $12 = (($this) + ($$sum$i$i)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     $30 = $$pre;
     label = 11;
    } else {
     $15 = (($13) + 24|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($13) + 28|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if (!($19)) {
      $20 = (($16) + 1|0);
      HEAP32[$15>>2] = $20;
      HEAP8[$16>>0] = $__c;
      break;
     }
     $21 = HEAP32[$13>>2]|0;
     $22 = (($21) + 52|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $__c&255;
     __THREW__ = 0;
     $25 = (invoke_iii($23|0,($13|0),($24|0))|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      $28 = ($25|0)==(-1);
      if (!($28)) {
       break;
      }
      $$pre8 = HEAP32[$this>>2]|0;
      $30 = $$pre8;
      label = 11;
     }
    }
    if ((label|0) == 11) {
     $29 = (($30) + -12|0);
     $31 = HEAP32[$29>>2]|0;
     $32 = (($this) + ($31)|0);
     $$sum = (($31) + 16)|0;
     $33 = (($this) + ($$sum)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $34 | 1;
     __THREW__ = 0;
     invoke_vii(460,($32|0),($35|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if (!($37)) {
      break;
     }
    }
    $40 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $41 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $40;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $42 = HEAP32[$this>>2]|0;
   $43 = (($42) + -12|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum4 = (($44) + 16)|0;
   $45 = (($this) + ($$sum4)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 | 1;
   HEAP32[$45>>2] = $47;
   $$sum5 = (($44) + 20)|0;
   $48 = (($this) + ($$sum5)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 1;
   $51 = ($50|0)==(0);
   if ($51) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(627);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if (!($53)) {
    // unreachable;
   }
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   __THREW__ = 0;
   invoke_v(463);
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if ($57) {
    $58 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $59 = tempRet0;
    ___clang_call_terminate($58);
    // unreachable;
   } else {
    ___resumeException($54|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(460,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(463);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 $1 = (($0) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 __ZdlPv($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 12)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 $1 = (($0) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 12)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (6608|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,6624,35);
  STACKTOP = sp;return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$agg$result>>0] = $6;
  $7 = (($agg$result) + 1|0);
  $__p$0$ph$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($agg$result) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$agg$result>>2] = $12;
  $13 = (($agg$result) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph$i$i$i = $10;
 }
 $14 = ($__lo|0)==($__hi|0);
 if ($14) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  $15 = HEAP8[$$02$i$i$i>>0]|0;
  HEAP8[$__p$01$i$i$i>>0] = $15;
  $16 = (($$02$i$i$i) + 1|0);
  $17 = (($__p$01$i$i$i) + 1|0);
  $18 = ($16|0)==($__hi|0);
  if ($18) {
   break;
  } else {
   $$02$i$i$i = $16;$__p$01$i$i$i = $17;
  }
 }
 $19 = (0 - ($0))|0;
 $scevgep$i$i$i = (($__hi) + ($19)|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($scevgep3$i$i$i)|0);
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 HEAP8[$__p$0$lcssa$i$i$i>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$agg$result>>0] = $7;
  $8 = (($agg$result) + 4|0);
  $__p$0$ph$i$i$i = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($agg$result) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$agg$result>>2] = $14;
  $15 = (($agg$result) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph$i$i$i = $12;
 }
 $16 = ($__lo|0)==($__hi|0);
 if ($16) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($__hi) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  $18 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $18;
  $19 = (($$02$i$i$i) + 4|0);
  $20 = (($__p$01$i$i$i) + 4|0);
  $21 = ($19|0)==($__hi|0);
  if ($21) {
   break;
  } else {
   $$02$i$i$i = $19;$__p$01$i$i$i = $20;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $22 = $uglygep4$i$i$i >>> 2;
 $23 = (($22) + 1)|0;
 $scevgep5$i$i$i = (($__p$0$ph$i$i$i) + ($23<<2)|0);
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 60|0;
 $__p$i$i$i$i4 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__lv = sp + 56|0;
 $0 = sp + 92|0;
 $1 = sp + 72|0;
 $2 = sp + 76|0;
 $3 = sp + 80|0;
 $4 = sp + 84|0;
 $__names = sp + 32|0;
 $5 = sp + 68|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[9136>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (631);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((9136 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($17) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = HEAP32[$3>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
    __ZNKSt3__18ios_base6getlocEv($4,$__iob);
    $42 = HEAP32[$4>>2]|0;
    $43 = HEAP32[9280>>2]|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 15;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 9280;
     $45 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$45>>2] = (631);
     $46 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$46>>2] = 0;
     __THREW__ = 0;
     invoke_viii(632,(9280|0),($__p$i$i$i$i4|0),(633|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $49 = HEAP32[((9280 + 4|0))>>2]|0;
     $50 = (($49) + -1)|0;
     $51 = (($42) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($42) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $52;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = $57 >> 2;
     $59 = ($58>>>0)>($50>>>0);
     if ($59) {
      $60 = (($54) + ($50<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $66 = HEAP32[$4>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($66)|0);
       $67 = HEAP32[$61>>2]|0;
       $68 = (($67) + 24|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       invoke_vii($69|0,($__names|0),($61|0));
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        $$02 = $__names;
       } else {
        $72 = (($__names) + 12|0);
        $73 = HEAP32[$61>>2]|0;
        $74 = (($73) + 28|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        invoke_vii($75|0,($72|0),($61|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $$02 = $72;
        } else {
         $78 = HEAP32[$__e>>2]|0;
         HEAP32[$5>>2] = $78;
         $79 = (($__names) + 24|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
         $80 = (invoke_iiiiiiii(634,($__b|0),($$byval_copy2|0),($__names|0),($79|0),($36|0),($__err|0),1)|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $99 = ___cxa_find_matching_catch(-1,-1)|0;
          $100 = tempRet0;
          $101 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
          $$0 = $99;$$01 = $100;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $83 = ($80|0)==($__names|0);
          $84 = $83&1;
          HEAP8[$__v>>0] = $84;
          $85 = HEAP32[$__b>>2]|0;
          HEAP32[$agg$result>>2] = $85;
          $86 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
          STACKTOP = sp;return;
         }
        }
       }
       $93 = ___cxa_find_matching_catch(-1,-1)|0;
       $94 = tempRet0;
       $95 = ($__names|0)==($$02|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $97 = $$02;
       }
       while(1) {
        $96 = (($97) + -12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
        $98 = ($96|0)==($__names|0);
        if ($98) {
         $$0 = $93;$$01 = $94;
         break;
        } else {
         $97 = $96;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $63 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(454,($63|0),(17096|0),(390|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      // unreachable;
     }
    }
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $92 = HEAP32[$4>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
    $$0 = $90;$$01 = $91;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($38);
  __THREW__ = 0;
  invoke_viii(454,($38|0),(17096|0),(390|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch(-1,-1)|0;
 $88 = tempRet0;
 $89 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0;
 var $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0;
 var $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(635);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(-1,-1)|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $3;$__st$063 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$064>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$064) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$063>>0] = 2;
    $33 = (($__n_might_match$061) + -1)|0;
    $34 = (($__n_does_match$062) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$063>>0] = 1;
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   $35 = (($__ky$064) + 12|0);
   $36 = (($__st$063) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $35;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i16 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $54;
    }
   } else {
    $$pre$i2$i$i16 = $54;
   }
  }
  $68 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 79;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L44: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2;$__n_might_match$331$us = $__n_might_match$2;$__st$133$us = $__status$0;
    while(1) {
     $91 = HEAP8[$__st$133$us>>0]|0;
     $92 = ($91<<24>>24)==(1);
     do {
      if ($92) {
       $93 = HEAP8[$__ky1$036$us>>0]|0;
       $94 = $93 & 1;
       $95 = ($94<<24>>24)==(0);
       if ($95) {
        $98 = (($__ky1$036$us) + 1|0);
        $100 = $98;
       } else {
        $96 = (($__ky1$036$us) + 8|0);
        $97 = HEAP32[$96>>2]|0;
        $100 = $97;
       }
       $99 = (($100) + ($__indx$0)|0);
       $101 = HEAP8[$99>>0]|0;
       $102 = ($__c$0<<24>>24)==($101<<24>>24);
       if (!($102)) {
        HEAP8[$__st$133$us>>0] = 0;
        $103 = (($__n_might_match$331$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $103;
        break;
       }
       if ($95) {
        $106 = $93&255;
        $107 = $106 >>> 1;
        $109 = $107;
       } else {
        $104 = (($__ky1$036$us) + 4|0);
        $105 = HEAP32[$104>>2]|0;
        $109 = $105;
       }
       $108 = ($109|0)==($$pre|0);
       if ($108) {
        HEAP8[$__st$133$us>>0] = 2;
        $110 = (($__n_might_match$331$us) + -1)|0;
        $111 = (($__n_does_match$332$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $111;$__n_might_match$4$us = $110;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     $112 = (($__ky1$036$us) + 12|0);
     $113 = ($112|0)==($__ke|0);
     if ($113) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L44;
     }
     $114 = (($__st$133$us) + 1|0);
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $112;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $114;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
    while(1) {
     $115 = HEAP8[$__st$133>>0]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$036>>0]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = (($__ky1$036) + 1|0);
        $124 = $122;
       } else {
        $120 = (($__ky1$036) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0)|0);
       $125 = HEAP8[$123>>0]|0;
       $126 = HEAP32[$__ct>>2]|0;
       $127 = (($126) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       __THREW__ = 0;
       $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
       $130 = __THREW__; __THREW__ = 0;
       $131 = $130&1;
       if ($131) {
        label = 5;
        break L19;
       }
       $132 = ($__c$0<<24>>24)==($129<<24>>24);
       if (!($132)) {
        HEAP8[$__st$133>>0] = 0;
        $144 = (($__n_might_match$331) + -1)|0;
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$036>>0]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $141 = $139;
       } else {
        $136 = (($__ky1$036) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $141 = $137;
       }
       $140 = ($141|0)==($$pre|0);
       if ($140) {
        HEAP8[$__st$133>>0] = 2;
        $142 = (($__n_might_match$331) + -1)|0;
        $143 = (($__n_does_match$332) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $143;$__n_might_match$4 = $142;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     $145 = (($__ky1$036) + 12|0);
     $146 = ($145|0)==($__ke|0);
     if ($146) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L44;
     }
     $147 = (($__st$133) + 1|0);
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $145;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $147;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $148 = HEAP32[$__b>>2]|0;
  $149 = (($148) + 12|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($148) + 16|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($150|0)==($152|0);
  if ($153) {
   $154 = HEAP32[$148>>2]|0;
   $155 = (($154) + 40|0);
   $156 = HEAP32[$155>>2]|0;
   __THREW__ = 0;
   (invoke_ii($156|0,($148|0))|0);
   $157 = __THREW__; __THREW__ = 0;
   $158 = $157&1;
   if ($158) {
    label = 6;
    break;
   }
  } else {
   $159 = (($150) + 1|0);
   HEAP32[$149>>2] = $159;
  }
  $160 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($160>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   $161 = HEAP8[$__st$246>>0]|0;
   $162 = ($161<<24>>24)==(2);
   if ($162) {
    $163 = HEAP8[$__ky2$047>>0]|0;
    $164 = $163 & 1;
    $165 = ($164<<24>>24)==(0);
    if ($165) {
     $168 = $163&255;
     $169 = $168 >>> 1;
     $171 = $169;
    } else {
     $166 = (($__ky2$047) + 4|0);
     $167 = HEAP32[$166>>2]|0;
     $171 = $167;
    }
    $170 = ($171|0)==($$pre|0);
    if ($170) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246>>0] = 0;
     $172 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $172;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $173 = (($__ky2$047) + 12|0);
   $174 = (($__st$246) + 1|0);
   $175 = ($173|0)==($__ke|0);
   if ($175) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$047 = $173;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $174;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 79) {
  $176 = ($70|0)==(0|0);
  do {
   if ($176) {
    $190 = 0;
    label = 85;
   } else {
    $177 = (($70) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($70) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$70>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     __THREW__ = 0;
     $185 = (invoke_ii($184|0,($70|0))|0);
     $186 = __THREW__; __THREW__ = 0;
     $187 = $186&1;
     if (!($187)) {
      $188 = ($185|0)==(-1);
      if ($188) {
       HEAP32[$__b>>2] = 0;
       $190 = 0;
       label = 85;
       break;
      } else {
       $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
       $190 = $$pre$i$i$i12;
       label = 85;
       break;
      }
     }
    } else {
     $190 = $70;
     label = 85;
    }
   }
  } while(0);
  L107: do {
   if ((label|0) == 85) {
    $189 = ($190|0)==(0|0);
    do {
     if ($68) {
      label = 91;
     } else {
      $191 = (($$pre$i2$i$i16) + 12|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($$pre$i2$i$i16) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($192|0)==($194|0);
      if (!($195)) {
       if ($189) {
        break;
       } else {
        label = 93;
        break;
       }
      }
      $196 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $197 = (($196) + 36|0);
      $198 = HEAP32[$197>>2]|0;
      __THREW__ = 0;
      $199 = (invoke_ii($198|0,($$pre$i2$i$i16|0))|0);
      $200 = __THREW__; __THREW__ = 0;
      $201 = $200&1;
      if ($201) {
       break L107;
      }
      $202 = ($199|0)==(-1);
      if ($202) {
       HEAP32[$__e>>2] = 0;
       label = 91;
       break;
      } else {
       if ($189) {
        break;
       } else {
        label = 93;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 91) {
     if ($189) {
      label = 93;
     }
    }
    if ((label|0) == 93) {
     $203 = HEAP32[$__err>>2]|0;
     $204 = $203 | 2;
     HEAP32[$__err>>2] = $204;
    }
    L123: do {
     if ($23) {
      label = 98;
     } else {
      $205 = HEAP8[$__status$0>>0]|0;
      $206 = ($205<<24>>24)==(2);
      if ($206) {
       $$024 = $__kb;
      } else {
       $$02680 = $__kb;$__st$32581 = $__status$0;
       while(1) {
        $210 = (($$02680) + 12|0);
        $211 = ($210|0)==($__ke|0);
        $208 = (($__st$32581) + 1|0);
        if ($211) {
         label = 98;
         break L123;
        }
        $207 = HEAP8[$208>>0]|0;
        $209 = ($207<<24>>24)==(2);
        if ($209) {
         $$024 = $210;
         break;
        } else {
         $$02680 = $210;$__st$32581 = $208;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 98) {
     $212 = HEAP32[$__err>>2]|0;
     $213 = $212 | 4;
     HEAP32[$__err>>2] = $213;
     $$024 = $__ke;
    }
    $214 = ($18|0)==(0|0);
    if ($214) {
     STACKTOP = sp;return ($$024|0);
    }
    __THREW__ = 0;
    invoke_vi(636,($18|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $217 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $218 = tempRet0;
     ___clang_call_terminate($217);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$024|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(636,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84>>0]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping>>0]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(637,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84>>0]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping>>0]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(638,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = tempRet0;
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = $__v;
    $130 = $129;
    HEAP32[$130>>2] = $125;
    $131 = (($129) + 4)|0;
    $132 = $131;
    HEAP32[$132>>2] = $126;
    $133 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$133,$__err);
    $134 = ($28|0)==(0|0);
    if ($134) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       break;
      }
      $146 = ($143|0)==(-1);
      if ($146) {
       HEAP32[$__b>>2] = 0;
       $148 = 0;
      } else {
       $148 = $28;
      }
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if (!($147)) {
        break;
       }
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $155 = HEAP32[$$pre$i2$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $162 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $147 ^ $162;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($147)) {
      HEAP32[$agg$result>>2] = $148;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $163 = HEAP32[$__err>>2]|0;
    $164 = $163 | 2;
    HEAP32[$__err>>2] = $164;
    HEAP32[$agg$result>>2] = $148;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84>>0]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping>>0]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(639,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP16[$__v>>1] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84>>0]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping>>0]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(640,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84>>0]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping>>0]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(641,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84>>0]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping>>0]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(642,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = tempRet0;
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = $__v;
    $130 = $129;
    HEAP32[$130>>2] = $125;
    $131 = (($129) + 4)|0;
    $132 = $131;
    HEAP32[$132>>2] = $126;
    $133 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$133,$__err);
    $134 = ($28|0)==(0|0);
    if ($134) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       break;
      }
      $146 = ($143|0)==(-1);
      if ($146) {
       HEAP32[$__b>>2] = 0;
       $148 = 0;
      } else {
       $148 = $28;
      }
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if (!($147)) {
        break;
       }
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $155 = HEAP32[$$pre$i2$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $162 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $147 ^ $162;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($147)) {
      HEAP32[$agg$result>>2] = $148;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $163 = HEAP32[$__err>>2]|0;
    $164 = $163 | 2;
    HEAP32[$__err>>2] = $164;
    HEAP32[$agg$result>>2] = $148;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(643,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(644,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF64[$__v>>3] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(645,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF64[$__v>>3] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $$pre38 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0;
 var $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i22 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 20|0;
 $__buf = sp + 184|0;
 $__g = sp + 24|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(456,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $$0 = $113;$$01 = $114;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[9136>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 4;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (631);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[((9136 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($3) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($3) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 32|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(7680|0),(((7680 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),10,0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     L13: do {
      if ($34) {
       label = 44;
      } else {
       $35 = HEAP8[$__buf>>0]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $40 = (($__buf) + 1|0);
        $$pre40 = (($__buf) + 8|0);
        $$pre$phi39Z2D = $40;$$pre$phi41Z2D = $$pre40;$241 = $40;
       } else {
        $38 = (($__buf) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $$pre38 = (($__buf) + 1|0);
        $$pre$phi39Z2D = $$pre38;$$pre$phi41Z2D = $38;$241 = $39;
       }
       $41 = (($__buf) + 4|0);
       $42 = (($__atoms) + 24|0);
       $43 = (($__atoms) + 25|0);
       $44 = $__g;
       $45 = (($__atoms) + 26|0);
       $46 = $__atoms;
       $47 = (($__grouping) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i9 = $$pre;$154 = $__g;$158 = 0;$78 = $241;$__a$0 = $241;
       L19: while(1) {
        $48 = ($$pre$i$i$i9|0)==(0|0);
        if ($48) {
         $62 = 0;
        } else {
         $49 = (($$pre$i$i$i9) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($$pre$i$i$i9) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$$pre$i$i$i9>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          __THREW__ = 0;
          $57 = (invoke_ii($56|0,($$pre$i$i$i9|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 43;
           break;
          }
          $60 = ($57|0)==(-1);
          if ($60) {
           HEAP32[$__b>>2] = 0;
           $62 = 0;
          } else {
           $62 = $$pre$i$i$i9;
          }
         } else {
          $62 = $$pre$i$i$i9;
         }
        }
        $61 = ($62|0)==(0|0);
        $63 = HEAP32[$__e>>2]|0;
        $64 = ($63|0)==(0|0);
        do {
         if ($64) {
          label = 25;
         } else {
          $65 = (($63) + 12|0);
          $66 = HEAP32[$65>>2]|0;
          $67 = (($63) + 16|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($66|0)==($68|0);
          if (!($69)) {
           if ($61) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
          $70 = HEAP32[$63>>2]|0;
          $71 = (($70) + 36|0);
          $72 = HEAP32[$71>>2]|0;
          __THREW__ = 0;
          $73 = (invoke_ii($72|0,($63|0))|0);
          $74 = __THREW__; __THREW__ = 0;
          $75 = $74&1;
          if ($75) {
           label = 43;
           break L19;
          }
          $76 = ($73|0)==(-1);
          if ($76) {
           HEAP32[$__e>>2] = 0;
           label = 25;
           break;
          } else {
           if ($61) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($61) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $77 = $78;
        $79 = $__a$0;
        $80 = (($77) - ($79))|0;
        $81 = HEAP8[$__buf>>0]|0;
        $82 = $81 & 1;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         $85 = $81&255;
         $86 = $85 >>> 1;
         $88 = $86;
        } else {
         $84 = HEAP32[$41>>2]|0;
         $88 = $84;
        }
        $87 = ($80|0)==($88|0);
        if ($87) {
         if ($83) {
          $90 = $81&255;
          $91 = $90 >>> 1;
          $92 = $81&255;
          $93 = $92 >>> 1;
          $112 = $91;$95 = $93;
         } else {
          $89 = HEAP32[$41>>2]|0;
          $112 = $89;$95 = $89;
         }
         $94 = $95 << 1;
         __THREW__ = 0;
         invoke_viii(466,($__buf|0),($94|0),0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 43;
          break;
         }
         $98 = HEAP8[$__buf>>0]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = 10;
         } else {
          $101 = HEAP32[$__buf>>2]|0;
          $102 = $101 & -2;
          $phitmp$i22 = (($102) + -1)|0;
          $103 = $phitmp$i22;
         }
         __THREW__ = 0;
         invoke_viii(466,($__buf|0),($103|0),0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 43;
          break;
         }
         $106 = HEAP8[$__buf>>0]|0;
         $107 = $106 & 1;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $111 = $$pre$phi39Z2D;
         } else {
          $109 = HEAP32[$$pre$phi41Z2D>>2]|0;
          $111 = $109;
         }
         $110 = (($111) + ($112)|0);
         $137 = $110;$__a$1 = $111;
        } else {
         $137 = $78;$__a$1 = $__a$0;
        }
        $122 = (($62) + 12|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($62) + 16|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($123|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$62>>2]|0;
         $128 = (($127) + 36|0);
         $129 = HEAP32[$128>>2]|0;
         __THREW__ = 0;
         $130 = (invoke_ii($129|0,($62|0))|0);
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          label = 43;
          break;
         } else {
          $$0$i$i = $130;
         }
        } else {
         $133 = HEAP8[$123>>0]|0;
         $134 = $133&255;
         $$0$i$i = $134;
        }
        $135 = $$0$i$i&255;
        $136 = ($137|0)==($__a$1|0);
        do {
         if ($136) {
          $138 = HEAP8[$42>>0]|0;
          $139 = ($138<<24>>24)==($135<<24>>24);
          if (!($139)) {
           $140 = HEAP8[$43>>0]|0;
           $141 = ($140<<24>>24)==($135<<24>>24);
           if (!($141)) {
            label = 53;
            break;
           }
          }
          $142 = $139 ? 43 : 45;
          $143 = (($137) + 1|0);
          HEAP8[$137>>0] = $142;
          $$ph = $143;$$ph31 = $154;$$ph32 = 0;
         } else {
          label = 53;
         }
        } while(0);
        do {
         if ((label|0) == 53) {
          label = 0;
          $144 = HEAP8[$__grouping>>0]|0;
          $145 = $144 & 1;
          $146 = ($145<<24>>24)==(0);
          if ($146) {
           $148 = $144&255;
           $149 = $148 >>> 1;
           $151 = $149;
          } else {
           $147 = HEAP32[$47>>2]|0;
           $151 = $147;
          }
          $150 = ($151|0)!=(0);
          $152 = ($135<<24>>24)==(0);
          $or$cond$i = $150 & $152;
          if ($or$cond$i) {
           $153 = $154;
           $155 = (($153) - ($44))|0;
           $156 = ($155|0)<(160);
           if (!($156)) {
            $$ph = $137;$$ph31 = $154;$$ph32 = $158;
            break;
           }
           $157 = (($154) + 4|0);
           HEAP32[$154>>2] = $158;
           $$ph = $137;$$ph31 = $157;$$ph32 = 0;
           break;
          } else {
           $$01$i$i = $__atoms;
          }
          while(1) {
           $161 = HEAP8[$$01$i$i>>0]|0;
           $162 = ($161<<24>>24)==($135<<24>>24);
           $160 = (($$01$i$i) + 1|0);
           if ($162) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $159 = ($160|0)==($45|0);
           if ($159) {
            $$0$lcssa$i$i = $45;
            break;
           } else {
            $$01$i$i = $160;
           }
          }
          $163 = $$0$lcssa$i$i;
          $164 = (($163) - ($46))|0;
          $165 = ($164|0)>(23);
          if ($165) {
           $__a$2 = $__a$1;
           break L19;
          }
          $166 = ($164|0)<(22);
          if ($166) {
           $177 = (7680 + ($164)|0);
           $178 = HEAP8[$177>>0]|0;
           $179 = (($137) + 1|0);
           HEAP8[$137>>0] = $178;
           $180 = (($158) + 1)|0;
           $$ph = $179;$$ph31 = $154;$$ph32 = $180;
           break;
          }
          if ($136) {
           $__a$2 = $137;
           break L19;
          }
          $167 = $137;
          $168 = $__a$1;
          $169 = (($167) - ($168))|0;
          $170 = ($169|0)<(3);
          if (!($170)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $171 = (($137) + -1|0);
          $172 = HEAP8[$171>>0]|0;
          $173 = ($172<<24>>24)==(48);
          if (!($173)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $174 = (7680 + ($164)|0);
          $175 = HEAP8[$174>>0]|0;
          $176 = (($137) + 1|0);
          HEAP8[$137>>0] = $175;
          $$ph = $176;$$ph31 = $154;$$ph32 = 0;
         }
        } while(0);
        $181 = HEAP32[$__b>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($181) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($183|0)==($185|0);
        if ($186) {
         $187 = HEAP32[$181>>2]|0;
         $188 = (($187) + 40|0);
         $189 = HEAP32[$188>>2]|0;
         __THREW__ = 0;
         (invoke_ii($189|0,($181|0))|0);
         $190 = __THREW__; __THREW__ = 0;
         $191 = $190&1;
         if ($191) {
          label = 43;
          break;
         } else {
          $$pre$i$i$i9 = $181;$154 = $$ph31;$158 = $$ph32;$78 = $$ph;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $192 = (($183) + 1|0);
         HEAP32[$182>>2] = $192;
         $$pre$i$i$i9 = $181;$154 = $$ph31;$158 = $$ph32;$78 = $$ph;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 43) {
        $118 = ___cxa_find_matching_catch(-1,-1)|0;
        $119 = tempRet0;
        $eh$lpad$body$index3Z2D = $119;$eh$lpad$body$indexZ2D = $118;
        break;
       }
       $193 = (($__a$2) + 3|0);
       HEAP8[$193>>0] = 0;
       $194 = HEAP8[9032>>0]|0;
       $195 = ($194<<24>>24)==(0);
       do {
        if ($195) {
         $196 = (___cxa_guard_acquire((9032|0))|0);
         $197 = ($196|0)==(0);
         if (!($197)) {
          __THREW__ = 0;
          $198 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
          $199 = __THREW__; __THREW__ = 0;
          $200 = $199&1;
          if ($200) {
           $201 = ___cxa_find_matching_catch(-1,-1)|0;
           $202 = tempRet0;
           ___cxa_guard_abort((9032|0));
           $eh$lpad$body$index3Z2D = $202;$eh$lpad$body$indexZ2D = $201;
           break L13;
          } else {
           HEAP32[9024>>2] = $198;
           ___cxa_guard_release((9032|0));
           break;
          }
         }
        }
       } while(0);
       $203 = HEAP32[9024>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $204 = (invoke_iiiii(647,($__a$2|0),($203|0),(7720|0),($vararg_buffer|0))|0);
       $205 = __THREW__; __THREW__ = 0;
       $206 = $205&1;
       if ($206) {
        label = 44;
       } else {
        $207 = ($204|0)==(1);
        if (!($207)) {
         HEAP32[$__err>>2] = 4;
        }
        $208 = HEAP32[$__b>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         $223 = 0;
        } else {
         $210 = (($208) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($208) + 16|0);
         $213 = HEAP32[$212>>2]|0;
         $214 = ($211|0)==($213|0);
         if ($214) {
          $215 = HEAP32[$208>>2]|0;
          $216 = (($215) + 36|0);
          $217 = HEAP32[$216>>2]|0;
          __THREW__ = 0;
          $218 = (invoke_ii($217|0,($208|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          if ($220) {
           label = 44;
           break;
          }
          $221 = ($218|0)==(-1);
          if ($221) {
           HEAP32[$__b>>2] = 0;
           $223 = 0;
          } else {
           $223 = $208;
          }
         } else {
          $223 = $208;
         }
        }
        $222 = ($223|0)==(0|0);
        $224 = HEAP32[$__e>>2]|0;
        $225 = ($224|0)==(0|0);
        do {
         if ($225) {
          label = 90;
         } else {
          $226 = (($224) + 12|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = (($224) + 16|0);
          $229 = HEAP32[$228>>2]|0;
          $230 = ($227|0)==($229|0);
          if (!($230)) {
           if (!($222)) {
            break;
           }
           HEAP32[$agg$result>>2] = $223;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $231 = HEAP32[$224>>2]|0;
          $232 = (($231) + 36|0);
          $233 = HEAP32[$232>>2]|0;
          __THREW__ = 0;
          $234 = (invoke_ii($233|0,($224|0))|0);
          $235 = __THREW__; __THREW__ = 0;
          $236 = $235&1;
          if ($236) {
           label = 44;
           break L13;
          }
          $237 = ($234|0)==(-1);
          if ($237) {
           HEAP32[$__e>>2] = 0;
           label = 90;
           break;
          }
          $238 = ($224|0)==(0|0);
          $tmp$i$i = $222 ^ $238;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $223;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 90) {
         if (!($222)) {
          HEAP32[$agg$result>>2] = $223;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $239 = HEAP32[$__err>>2]|0;
        $240 = $239 | 2;
        HEAP32[$__err>>2] = $240;
        HEAP32[$agg$result>>2] = $223;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 44) {
      $120 = ___cxa_find_matching_catch(-1,-1)|0;
      $121 = tempRet0;
      $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($24);
   __THREW__ = 0;
   invoke_viii(454,($24|0),(17096|0),(390|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch(-1,-1)|0;
 $116 = tempRet0;
 $117 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
 $$0 = $115;$$01 = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (7680 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (7680 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(648,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 60|0;
 $__p$i$i$i$i4 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__lv = sp + 56|0;
 $0 = sp + 92|0;
 $1 = sp + 72|0;
 $2 = sp + 76|0;
 $3 = sp + 80|0;
 $4 = sp + 84|0;
 $__names = sp + 32|0;
 $5 = sp + 68|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[9128>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (631);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((9128 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($17) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = HEAP32[$3>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
    __ZNKSt3__18ios_base6getlocEv($4,$__iob);
    $42 = HEAP32[$4>>2]|0;
    $43 = HEAP32[9288>>2]|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 15;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 9288;
     $45 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$45>>2] = (631);
     $46 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$46>>2] = 0;
     __THREW__ = 0;
     invoke_viii(632,(9288|0),($__p$i$i$i$i4|0),(633|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $49 = HEAP32[((9288 + 4|0))>>2]|0;
     $50 = (($49) + -1)|0;
     $51 = (($42) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($42) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $52;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = $57 >> 2;
     $59 = ($58>>>0)>($50>>>0);
     if ($59) {
      $60 = (($54) + ($50<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $66 = HEAP32[$4>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($66)|0);
       $67 = HEAP32[$61>>2]|0;
       $68 = (($67) + 24|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       invoke_vii($69|0,($__names|0),($61|0));
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        $$02 = $__names;
       } else {
        $72 = (($__names) + 12|0);
        $73 = HEAP32[$61>>2]|0;
        $74 = (($73) + 28|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        invoke_vii($75|0,($72|0),($61|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $$02 = $72;
        } else {
         $78 = HEAP32[$__e>>2]|0;
         HEAP32[$5>>2] = $78;
         $79 = (($__names) + 24|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
         $80 = (invoke_iiiiiiii(649,($__b|0),($$byval_copy2|0),($__names|0),($79|0),($36|0),($__err|0),1)|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $99 = ___cxa_find_matching_catch(-1,-1)|0;
          $100 = tempRet0;
          $101 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($101);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
          $$0 = $99;$$01 = $100;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $83 = ($80|0)==($__names|0);
          $84 = $83&1;
          HEAP8[$__v>>0] = $84;
          $85 = HEAP32[$__b>>2]|0;
          HEAP32[$agg$result>>2] = $85;
          $86 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($86);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
          STACKTOP = sp;return;
         }
        }
       }
       $93 = ___cxa_find_matching_catch(-1,-1)|0;
       $94 = tempRet0;
       $95 = ($__names|0)==($$02|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $97 = $$02;
       }
       while(1) {
        $96 = (($97) + -12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($96);
        $98 = ($96|0)==($__names|0);
        if ($98) {
         $$0 = $93;$$01 = $94;
         break;
        } else {
         $97 = $96;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $63 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(454,($63|0),(17096|0),(390|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      // unreachable;
     }
    }
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $92 = HEAP32[$4>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
    $$0 = $90;$$01 = $91;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($38);
  __THREW__ = 0;
  invoke_viii(454,($38|0),(17096|0),(390|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch(-1,-1)|0;
 $88 = tempRet0;
 $89 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0;
 var $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0;
 var $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(635);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(-1,-1)|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $3;$__st$067 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$068>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$068) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$067>>0] = 2;
    $33 = (($__n_might_match$065) + -1)|0;
    $34 = (($__n_does_match$066) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$067>>0] = 1;
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   $35 = (($__ky$068) + 12|0);
   $36 = (($__st$067) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $35;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i19 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i19 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i19 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 81;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L48: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2;$__n_might_match$335$us = $__n_might_match$2;$__st$137$us = $__status$0;
    while(1) {
     $90 = HEAP8[$__st$137$us>>0]|0;
     $91 = ($90<<24>>24)==(1);
     do {
      if ($91) {
       $92 = HEAP8[$__ky1$040$us>>0]|0;
       $93 = $92 & 1;
       $94 = ($93<<24>>24)==(0);
       if ($94) {
        $97 = (($__ky1$040$us) + 4|0);
        $99 = $97;
       } else {
        $95 = (($__ky1$040$us) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $99 = $96;
       }
       $98 = (($99) + ($__indx$0<<2)|0);
       $100 = HEAP32[$98>>2]|0;
       $101 = ($__c$0|0)==($100|0);
       if (!($101)) {
        HEAP8[$__st$137$us>>0] = 0;
        $102 = (($__n_might_match$335$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $102;
        break;
       }
       if ($94) {
        $105 = $92&255;
        $106 = $105 >>> 1;
        $108 = $106;
       } else {
        $103 = (($__ky1$040$us) + 4|0);
        $104 = HEAP32[$103>>2]|0;
        $108 = $104;
       }
       $107 = ($108|0)==($$pre|0);
       if ($107) {
        HEAP8[$__st$137$us>>0] = 2;
        $109 = (($__n_might_match$335$us) + -1)|0;
        $110 = (($__n_does_match$336$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $110;$__n_might_match$4$us = $109;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     $111 = (($__ky1$040$us) + 12|0);
     $112 = ($111|0)==($__ke|0);
     if ($112) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L48;
     }
     $113 = (($__st$137$us) + 1|0);
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $111;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $113;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
    while(1) {
     $114 = HEAP8[$__st$137>>0]|0;
     $115 = ($114<<24>>24)==(1);
     do {
      if ($115) {
       $116 = HEAP8[$__ky1$040>>0]|0;
       $117 = $116 & 1;
       $118 = ($117<<24>>24)==(0);
       if ($118) {
        $121 = (($__ky1$040) + 4|0);
        $123 = $121;
       } else {
        $119 = (($__ky1$040) + 8|0);
        $120 = HEAP32[$119>>2]|0;
        $123 = $120;
       }
       $122 = (($123) + ($__indx$0<<2)|0);
       $124 = HEAP32[$122>>2]|0;
       $125 = HEAP32[$__ct>>2]|0;
       $126 = (($125) + 28|0);
       $127 = HEAP32[$126>>2]|0;
       __THREW__ = 0;
       $128 = (invoke_iii($127|0,($__ct|0),($124|0))|0);
       $129 = __THREW__; __THREW__ = 0;
       $130 = $129&1;
       if ($130) {
        label = 5;
        break L19;
       }
       $131 = ($__c$0|0)==($128|0);
       if (!($131)) {
        HEAP8[$__st$137>>0] = 0;
        $143 = (($__n_might_match$335) + -1)|0;
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $143;
        break;
       }
       $132 = HEAP8[$__ky1$040>>0]|0;
       $133 = $132 & 1;
       $134 = ($133<<24>>24)==(0);
       if ($134) {
        $137 = $132&255;
        $138 = $137 >>> 1;
        $140 = $138;
       } else {
        $135 = (($__ky1$040) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $140 = $136;
       }
       $139 = ($140|0)==($$pre|0);
       if ($139) {
        HEAP8[$__st$137>>0] = 2;
        $141 = (($__n_might_match$335) + -1)|0;
        $142 = (($__n_does_match$336) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $142;$__n_might_match$4 = $141;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     $144 = (($__ky1$040) + 12|0);
     $145 = ($144|0)==($__ke|0);
     if ($145) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L48;
     }
     $146 = (($__st$137) + 1|0);
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $144;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $146;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $147 = HEAP32[$__b>>2]|0;
  $148 = (($147) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 16|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($149|0)==($151|0);
  if ($152) {
   $153 = HEAP32[$147>>2]|0;
   $154 = (($153) + 40|0);
   $155 = HEAP32[$154>>2]|0;
   __THREW__ = 0;
   (invoke_ii($155|0,($147|0))|0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    label = 6;
    break;
   }
  } else {
   $158 = (($149) + 4|0);
   HEAP32[$148>>2] = $158;
  }
  $159 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($159>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   $160 = HEAP8[$__st$250>>0]|0;
   $161 = ($160<<24>>24)==(2);
   if ($161) {
    $162 = HEAP8[$__ky2$051>>0]|0;
    $163 = $162 & 1;
    $164 = ($163<<24>>24)==(0);
    if ($164) {
     $167 = $162&255;
     $168 = $167 >>> 1;
     $170 = $168;
    } else {
     $165 = (($__ky2$051) + 4|0);
     $166 = HEAP32[$165>>2]|0;
     $170 = $166;
    }
    $169 = ($170|0)==($$pre|0);
    if ($169) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250>>0] = 0;
     $171 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $171;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $172 = (($__ky2$051) + 12|0);
   $173 = (($__st$250) + 1|0);
   $174 = ($172|0)==($__ke|0);
   if ($174) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$051 = $172;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $173;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 81) {
  $175 = ($71|0)==(0|0);
  do {
   if ($175) {
    $219 = 1;
    label = 88;
   } else {
    $176 = (($71) + 12|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($71) + 16|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($177|0)==($179|0);
    if ($180) {
     $181 = HEAP32[$71>>2]|0;
     $182 = (($181) + 36|0);
     $183 = HEAP32[$182>>2]|0;
     __THREW__ = 0;
     $184 = (invoke_ii($183|0,($71|0))|0);
     $185 = __THREW__; __THREW__ = 0;
     $186 = $185&1;
     if ($186) {
      break;
     } else {
      $$0$i$i$i$i11 = $184;
     }
    } else {
     $187 = HEAP32[$177>>2]|0;
     $$0$i$i$i$i11 = $187;
    }
    $188 = ($$0$i$i$i$i11|0)==(-1);
    if ($188) {
     HEAP32[$__b>>2] = 0;
     $219 = 1;
     label = 88;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $219 = $phitmp$i$i$i14;
     label = 88;
     break;
    }
   }
  } while(0);
  L113: do {
   if ((label|0) == 88) {
    $189 = ($$pre$i3$i$i19|0)==(0|0);
    do {
     if ($189) {
      label = 94;
     } else {
      $190 = (($$pre$i3$i$i19) + 12|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($$pre$i3$i$i19) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($191|0)==($193|0);
      if ($194) {
       $195 = HEAP32[$$pre$i3$i$i19>>2]|0;
       $196 = (($195) + 36|0);
       $197 = HEAP32[$196>>2]|0;
       __THREW__ = 0;
       $198 = (invoke_ii($197|0,($$pre$i3$i$i19|0))|0);
       $199 = __THREW__; __THREW__ = 0;
       $200 = $199&1;
       if ($200) {
        break L113;
       } else {
        $$0$i$i1$i$i17 = $198;
       }
      } else {
       $201 = HEAP32[$191>>2]|0;
       $$0$i$i1$i$i17 = $201;
      }
      $202 = ($$0$i$i1$i$i17|0)==(-1);
      if ($202) {
       HEAP32[$__e>>2] = 0;
       label = 94;
       break;
      } else {
       if ($219) {
        break;
       } else {
        label = 96;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 94) {
     if ($219) {
      label = 96;
     }
    }
    if ((label|0) == 96) {
     $203 = HEAP32[$__err>>2]|0;
     $204 = $203 | 2;
     HEAP32[$__err>>2] = $204;
    }
    L129: do {
     if ($23) {
      label = 101;
     } else {
      $205 = HEAP8[$__status$0>>0]|0;
      $206 = ($205<<24>>24)==(2);
      if ($206) {
       $$028 = $__kb;
      } else {
       $$03082 = $__kb;$__st$32983 = $__status$0;
       while(1) {
        $210 = (($$03082) + 12|0);
        $211 = ($210|0)==($__ke|0);
        $208 = (($__st$32983) + 1|0);
        if ($211) {
         label = 101;
         break L129;
        }
        $207 = HEAP8[$208>>0]|0;
        $209 = ($207<<24>>24)==(2);
        if ($209) {
         $$028 = $210;
         break;
        } else {
         $$03082 = $210;$__st$32983 = $208;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 101) {
     $212 = HEAP32[$__err>>2]|0;
     $213 = $212 | 4;
     HEAP32[$__err>>2] = $213;
     $$028 = $__ke;
    }
    $214 = ($18|0)==(0|0);
    if ($214) {
     STACKTOP = sp;return ($$028|0);
    }
    __THREW__ = 0;
    invoke_vi(636,($18|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $217 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $218 = tempRet0;
     ___clang_call_terminate($217);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$028|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(636,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping>>0]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(637,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $164 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;$84 = 0;
     } else {
      $164 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($164) {
        $165 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($164) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping>>0]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(638,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = tempRet0;
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $__v;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = (($128) + 4)|0;
    $131 = $130;
    HEAP32[$131>>2] = $125;
    $132 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$132,$__err);
    $133 = ($84|0)==(0|0);
    if ($133) {
     $163 = 0;$166 = 1;
    } else {
     $134 = (($84) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($84) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$84>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      __THREW__ = 0;
      $142 = (invoke_ii($141|0,($84|0))|0);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      if ($144) {
       break;
      } else {
       $$0$i$i$i$i = $142;
      }
     } else {
      $145 = HEAP32[$135>>2]|0;
      $$0$i$i$i$i = $145;
     }
     $146 = ($$0$i$i$i$i|0)==(-1);
     if ($146) {
      HEAP32[$__b>>2] = 0;
      $163 = 0;$166 = 1;
     } else {
      $163 = $84;$166 = 0;
     }
    }
    $147 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 67;
     } else {
      $148 = (($$pre$i3$i$i) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($$pre$i3$i$i) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i3$i$i>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i3$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L6;
       } else {
        $$0$i$i1$i$i = $156;
       }
      } else {
       $159 = HEAP32[$149>>2]|0;
       $$0$i$i1$i$i = $159;
      }
      $160 = ($$0$i$i1$i$i|0)==(-1);
      if ($160) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($166) {
       HEAP32[$agg$result>>2] = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($166)) {
      HEAP32[$agg$result>>2] = $163;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $161 = HEAP32[$__err>>2]|0;
    $162 = $161 | 2;
    HEAP32[$__err>>2] = $162;
    HEAP32[$agg$result>>2] = $163;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping>>0]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(639,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP16[$__v>>1] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping>>0]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(640,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping>>0]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(641,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $164 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;$84 = 0;
     } else {
      $164 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($164) {
        $165 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($164) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf>>0]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping>>0]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(642,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = tempRet0;
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $__v;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = (($128) + 4)|0;
    $131 = $130;
    HEAP32[$131>>2] = $125;
    $132 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$132,$__err);
    $133 = ($84|0)==(0|0);
    if ($133) {
     $163 = 0;$166 = 1;
    } else {
     $134 = (($84) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($84) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$84>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      __THREW__ = 0;
      $142 = (invoke_ii($141|0,($84|0))|0);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      if ($144) {
       break;
      } else {
       $$0$i$i$i$i = $142;
      }
     } else {
      $145 = HEAP32[$135>>2]|0;
      $$0$i$i$i$i = $145;
     }
     $146 = ($$0$i$i$i$i|0)==(-1);
     if ($146) {
      HEAP32[$__b>>2] = 0;
      $163 = 0;$166 = 1;
     } else {
      $163 = $84;$166 = 0;
     }
    }
    $147 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 67;
     } else {
      $148 = (($$pre$i3$i$i) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($$pre$i3$i$i) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i3$i$i>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i3$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L6;
       } else {
        $$0$i$i1$i$i = $156;
       }
      } else {
       $159 = HEAP32[$149>>2]|0;
       $$0$i$i1$i$i = $159;
      }
      $160 = ($$0$i$i1$i$i|0)==(-1);
      if ($160) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($166) {
       HEAP32[$agg$result>>2] = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($166)) {
      HEAP32[$agg$result>>2] = $163;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $161 = HEAP32[$__err>>2]|0;
    $162 = $161 | 2;
    HEAP32[$__err>>2] = $162;
    HEAP32[$agg$result>>2] = $163;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units>>0]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(643,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units>>0]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(644,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF64[$__v>>3] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(466,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units>>0]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(645,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF64[$__v>>3] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__atoms = sp + 200|0;
 $__grouping = sp + 304|0;
 $0 = sp + 32|0;
 $__buf = sp + 20|0;
 $__g = sp + 40|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(456,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $$0 = $113;$$01 = $114;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[9128>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 4;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (631);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[((9128 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($3) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($3) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(7680|0),(((7680 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(466,($__buf|0),10,0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     L13: do {
      if ($34) {
       label = 45;
      } else {
       $35 = HEAP8[$__buf>>0]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $40 = (($__buf) + 1|0);
        $$pre42 = (($__buf) + 8|0);
        $$pre$phi41Z2D = $40;$$pre$phi43Z2D = $$pre42;$241 = $40;
       } else {
        $38 = (($__buf) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $$pre40 = (($__buf) + 1|0);
        $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $38;$241 = $39;
       }
       $41 = (($__buf) + 4|0);
       $42 = (($__atoms) + 96|0);
       $43 = (($__atoms) + 100|0);
       $44 = $__g;
       $45 = (($__atoms) + 104|0);
       $46 = $__atoms;
       $47 = (($__grouping) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$153 = $__g;$157 = 0;$78 = $241;$__a$0 = $241;
       L19: while(1) {
        $48 = ($$pre$i$i$i10|0)==(0|0);
        if ($48) {
         $123 = 0;$242 = 1;
        } else {
         $49 = (($$pre$i$i$i10) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($$pre$i$i$i10) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$$pre$i$i$i10>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          __THREW__ = 0;
          $57 = (invoke_ii($56|0,($$pre$i$i$i10|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 44;
           break;
          } else {
           $$0$i$i$i$i8 = $57;
          }
         } else {
          $60 = HEAP32[$50>>2]|0;
          $$0$i$i$i$i8 = $60;
         }
         $61 = ($$0$i$i$i$i8|0)==(-1);
         if ($61) {
          HEAP32[$__b>>2] = 0;
          $123 = 0;$242 = 1;
         } else {
          $123 = $$pre$i$i$i10;$242 = 0;
         }
        }
        $62 = HEAP32[$__e>>2]|0;
        $63 = ($62|0)==(0|0);
        do {
         if ($63) {
          label = 26;
         } else {
          $64 = (($62) + 12|0);
          $65 = HEAP32[$64>>2]|0;
          $66 = (($62) + 16|0);
          $67 = HEAP32[$66>>2]|0;
          $68 = ($65|0)==($67|0);
          if ($68) {
           $69 = HEAP32[$62>>2]|0;
           $70 = (($69) + 36|0);
           $71 = HEAP32[$70>>2]|0;
           __THREW__ = 0;
           $72 = (invoke_ii($71|0,($62|0))|0);
           $73 = __THREW__; __THREW__ = 0;
           $74 = $73&1;
           if ($74) {
            label = 44;
            break L19;
           } else {
            $$0$i$i1$i$i14 = $72;
           }
          } else {
           $75 = HEAP32[$65>>2]|0;
           $$0$i$i1$i$i14 = $75;
          }
          $76 = ($$0$i$i1$i$i14|0)==(-1);
          if ($76) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($242) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($242) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $77 = $78;
        $79 = $__a$0;
        $80 = (($77) - ($79))|0;
        $81 = HEAP8[$__buf>>0]|0;
        $82 = $81 & 1;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         $85 = $81&255;
         $86 = $85 >>> 1;
         $88 = $86;
        } else {
         $84 = HEAP32[$41>>2]|0;
         $88 = $84;
        }
        $87 = ($80|0)==($88|0);
        if ($87) {
         if ($83) {
          $90 = $81&255;
          $91 = $90 >>> 1;
          $92 = $81&255;
          $93 = $92 >>> 1;
          $112 = $91;$95 = $93;
         } else {
          $89 = HEAP32[$41>>2]|0;
          $112 = $89;$95 = $89;
         }
         $94 = $95 << 1;
         __THREW__ = 0;
         invoke_viii(466,($__buf|0),($94|0),0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 44;
          break;
         }
         $98 = HEAP8[$__buf>>0]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = 10;
         } else {
          $101 = HEAP32[$__buf>>2]|0;
          $102 = $101 & -2;
          $phitmp$i26 = (($102) + -1)|0;
          $103 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(466,($__buf|0),($103|0),0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 44;
          break;
         }
         $106 = HEAP8[$__buf>>0]|0;
         $107 = $106 & 1;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $111 = $$pre$phi41Z2D;
         } else {
          $109 = HEAP32[$$pre$phi43Z2D>>2]|0;
          $111 = $109;
         }
         $110 = (($111) + ($112)|0);
         $136 = $110;$__a$1 = $111;
        } else {
         $136 = $78;$__a$1 = $__a$0;
        }
        $122 = (($123) + 12|0);
        $124 = HEAP32[$122>>2]|0;
        $125 = (($123) + 16|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = ($124|0)==($126|0);
        if ($127) {
         $128 = HEAP32[$123>>2]|0;
         $129 = (($128) + 36|0);
         $130 = HEAP32[$129>>2]|0;
         __THREW__ = 0;
         $131 = (invoke_ii($130|0,($123|0))|0);
         $132 = __THREW__; __THREW__ = 0;
         $133 = $132&1;
         if ($133) {
          label = 44;
          break;
         } else {
          $$0$i$i = $131;
         }
        } else {
         $134 = HEAP32[$124>>2]|0;
         $$0$i$i = $134;
        }
        $135 = ($136|0)==($__a$1|0);
        do {
         if ($135) {
          $137 = HEAP32[$42>>2]|0;
          $138 = ($137|0)==($$0$i$i|0);
          if (!($138)) {
           $139 = HEAP32[$43>>2]|0;
           $140 = ($139|0)==($$0$i$i|0);
           if (!($140)) {
            label = 54;
            break;
           }
          }
          $141 = $138 ? 43 : 45;
          $142 = (($136) + 1|0);
          HEAP8[$136>>0] = $141;
          $$ph = $142;$$ph34 = $153;$$ph35 = 0;
         } else {
          label = 54;
         }
        } while(0);
        do {
         if ((label|0) == 54) {
          label = 0;
          $143 = HEAP8[$__grouping>>0]|0;
          $144 = $143 & 1;
          $145 = ($144<<24>>24)==(0);
          if ($145) {
           $147 = $143&255;
           $148 = $147 >>> 1;
           $150 = $148;
          } else {
           $146 = HEAP32[$47>>2]|0;
           $150 = $146;
          }
          $149 = ($150|0)!=(0);
          $151 = ($$0$i$i|0)==(0);
          $or$cond$i = $149 & $151;
          if ($or$cond$i) {
           $152 = $153;
           $154 = (($152) - ($44))|0;
           $155 = ($154|0)<(160);
           if (!($155)) {
            $$ph = $136;$$ph34 = $153;$$ph35 = $157;
            break;
           }
           $156 = (($153) + 4|0);
           HEAP32[$153>>2] = $157;
           $$ph = $136;$$ph34 = $156;$$ph35 = 0;
           break;
          } else {
           $$01$i$i = $__atoms;
          }
          while(1) {
           $160 = HEAP32[$$01$i$i>>2]|0;
           $161 = ($160|0)==($$0$i$i|0);
           $159 = (($$01$i$i) + 4|0);
           if ($161) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $158 = ($159|0)==($45|0);
           if ($158) {
            $$0$lcssa$i$i = $45;
            break;
           } else {
            $$01$i$i = $159;
           }
          }
          $162 = $$0$lcssa$i$i;
          $163 = (($162) - ($46))|0;
          $164 = $163 >> 2;
          $165 = ($163|0)>(92);
          if ($165) {
           $__a$2 = $__a$1;
           break L19;
          }
          $166 = ($163|0)<(88);
          if ($166) {
           $177 = (7680 + ($164)|0);
           $178 = HEAP8[$177>>0]|0;
           $179 = (($136) + 1|0);
           HEAP8[$136>>0] = $178;
           $180 = (($157) + 1)|0;
           $$ph = $179;$$ph34 = $153;$$ph35 = $180;
           break;
          }
          if ($135) {
           $__a$2 = $136;
           break L19;
          }
          $167 = $136;
          $168 = $__a$1;
          $169 = (($167) - ($168))|0;
          $170 = ($169|0)<(3);
          if (!($170)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $171 = (($136) + -1|0);
          $172 = HEAP8[$171>>0]|0;
          $173 = ($172<<24>>24)==(48);
          if (!($173)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $174 = (7680 + ($164)|0);
          $175 = HEAP8[$174>>0]|0;
          $176 = (($136) + 1|0);
          HEAP8[$136>>0] = $175;
          $$ph = $176;$$ph34 = $153;$$ph35 = 0;
         }
        } while(0);
        $181 = HEAP32[$__b>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($181) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($183|0)==($185|0);
        if ($186) {
         $187 = HEAP32[$181>>2]|0;
         $188 = (($187) + 40|0);
         $189 = HEAP32[$188>>2]|0;
         __THREW__ = 0;
         (invoke_ii($189|0,($181|0))|0);
         $190 = __THREW__; __THREW__ = 0;
         $191 = $190&1;
         if ($191) {
          label = 44;
          break;
         } else {
          $$pre$i$i$i10 = $181;$153 = $$ph34;$157 = $$ph35;$78 = $$ph;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $192 = (($183) + 4|0);
         HEAP32[$182>>2] = $192;
         $$pre$i$i$i10 = $181;$153 = $$ph34;$157 = $$ph35;$78 = $$ph;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 44) {
        $118 = ___cxa_find_matching_catch(-1,-1)|0;
        $119 = tempRet0;
        $eh$lpad$body$index3Z2D = $119;$eh$lpad$body$indexZ2D = $118;
        break;
       }
       $193 = (($__a$2) + 3|0);
       HEAP8[$193>>0] = 0;
       $194 = HEAP8[9032>>0]|0;
       $195 = ($194<<24>>24)==(0);
       do {
        if ($195) {
         $196 = (___cxa_guard_acquire((9032|0))|0);
         $197 = ($196|0)==(0);
         if (!($197)) {
          __THREW__ = 0;
          $198 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
          $199 = __THREW__; __THREW__ = 0;
          $200 = $199&1;
          if ($200) {
           $201 = ___cxa_find_matching_catch(-1,-1)|0;
           $202 = tempRet0;
           ___cxa_guard_abort((9032|0));
           $eh$lpad$body$index3Z2D = $202;$eh$lpad$body$indexZ2D = $201;
           break L13;
          } else {
           HEAP32[9024>>2] = $198;
           ___cxa_guard_release((9032|0));
           break;
          }
         }
        }
       } while(0);
       $203 = HEAP32[9024>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $204 = (invoke_iiiii(647,($__a$2|0),($203|0),(7720|0),($vararg_buffer|0))|0);
       $205 = __THREW__; __THREW__ = 0;
       $206 = $205&1;
       if ($206) {
        label = 45;
       } else {
        $207 = ($204|0)==(1);
        if (!($207)) {
         HEAP32[$__err>>2] = 4;
        }
        $208 = HEAP32[$__b>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         $240 = 0;$243 = 1;
        } else {
         $210 = (($208) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($208) + 16|0);
         $213 = HEAP32[$212>>2]|0;
         $214 = ($211|0)==($213|0);
         if ($214) {
          $215 = HEAP32[$208>>2]|0;
          $216 = (($215) + 36|0);
          $217 = HEAP32[$216>>2]|0;
          __THREW__ = 0;
          $218 = (invoke_ii($217|0,($208|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          if ($220) {
           label = 45;
           break;
          } else {
           $$0$i$i$i$i = $218;
          }
         } else {
          $221 = HEAP32[$211>>2]|0;
          $$0$i$i$i$i = $221;
         }
         $222 = ($$0$i$i$i$i|0)==(-1);
         if ($222) {
          HEAP32[$__b>>2] = 0;
          $240 = 0;$243 = 1;
         } else {
          $240 = $208;$243 = 0;
         }
        }
        $223 = HEAP32[$__e>>2]|0;
        $224 = ($223|0)==(0|0);
        do {
         if ($224) {
          label = 92;
         } else {
          $225 = (($223) + 12|0);
          $226 = HEAP32[$225>>2]|0;
          $227 = (($223) + 16|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = ($226|0)==($228|0);
          if ($229) {
           $230 = HEAP32[$223>>2]|0;
           $231 = (($230) + 36|0);
           $232 = HEAP32[$231>>2]|0;
           __THREW__ = 0;
           $233 = (invoke_ii($232|0,($223|0))|0);
           $234 = __THREW__; __THREW__ = 0;
           $235 = $234&1;
           if ($235) {
            label = 45;
            break L13;
           } else {
            $$0$i$i1$i$i = $233;
           }
          } else {
           $236 = HEAP32[$226>>2]|0;
           $$0$i$i1$i$i = $236;
          }
          $237 = ($$0$i$i1$i$i|0)==(-1);
          if ($237) {
           HEAP32[$__e>>2] = 0;
           label = 92;
           break;
          }
          if ($243) {
           HEAP32[$agg$result>>2] = $240;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 92) {
         if (!($243)) {
          HEAP32[$agg$result>>2] = $240;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $238 = HEAP32[$__err>>2]|0;
        $239 = $238 | 2;
        HEAP32[$__err>>2] = $239;
        HEAP32[$agg$result>>2] = $240;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 45) {
      $120 = ___cxa_find_matching_catch(-1,-1)|0;
      $121 = tempRet0;
      $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($24);
   __THREW__ = 0;
   invoke_viii(454,($24|0),(17096|0),(390|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch(-1,-1)|0;
 $116 = tempRet0;
 $117 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
 $$0 = $115;$$01 = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (7680 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (7680 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9136>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((9136 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(7680|0),(((7680 + 26|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[9280>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 9280;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (631);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(632,(9280|0),($__p$i$i$i$i3|0),(633|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((9280 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__thousands_sep>>0] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(454,($50|0),(17096|0),(390|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(454,($21|0),(17096|0),(390|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $67 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9136>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((9136 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(7680|0),(((7680 + 32|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[9280>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 9280;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (631);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(632,(9280|0),($__p$i$i$i$i3|0),(633|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((9280 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__decimal_point>>0] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP8[$__thousands_sep>>0] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(454,($50|0),(17096|0),(390|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(454,($21|0),(17096|0),(390|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $71 = ___cxa_find_matching_catch(-1,-1)|0;
 $72 = tempRet0;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 ___resumeException($71|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (7680 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9128>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((9128 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(7680|0),(((7680 + 26|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[9288>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 9288;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (631);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(632,(9288|0),($__p$i$i$i$i3|0),(633|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((9288 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(454,($50|0),(17096|0),(390|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(454,($21|0),(17096|0),(390|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $67 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9128>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((9128 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(7680|0),(((7680 + 32|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[9288>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 9288;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (631);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(632,(9288|0),($__p$i$i$i$i3|0),(633|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((9288 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__decimal_point>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(454,($50|0),(17096|0),(390|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(454,($21|0),(17096|0),(390|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $71 = ___cxa_find_matching_catch(-1,-1)|0;
 $72 = tempRet0;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 ___resumeException($71|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (7680 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre5 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__nm = sp + 12|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 1023]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[9280>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9280;
  $14 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$14>>2] = (631);
  $15 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9280|0),($__p$i$i$i$i|0),(633|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[((9280 + 4|0))>>2]|0;
  $19 = (($18) + -1)|0;
  $20 = (($11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($11) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $21;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = ($27>>>0)>($19>>>0);
  if ($28) {
   $29 = (($23) + ($19<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = HEAP32[$1>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
    $36 = HEAP32[$30>>2]|0;
    if ($__v) {
     $37 = (($36) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 1023]($__nm,$30);
    } else {
     $39 = (($36) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vii[$40 & 1023]($__nm,$30);
    }
    $41 = HEAP8[$__nm>>0]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $46 = (($__nm) + 1|0);
     $$pre7 = (($__nm) + 8|0);
     $$ph = $46;$$pre$phi6Z2D = $46;$$pre$phi8Z2D = $$pre7;
    } else {
     $44 = (($__nm) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $$pre5 = (($__nm) + 1|0);
     $$ph = $45;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $44;
    }
    $47 = (($__nm) + 4|0);
    $49 = $41;$59 = $$ph;
    L20: while(1) {
     $48 = $49 & 1;
     $50 = ($48<<24>>24)==(0);
     if ($50) {
      $53 = $49&255;
      $54 = $53 >>> 1;
      $56 = $$pre$phi6Z2D;$57 = $54;
     } else {
      $51 = HEAP32[$$pre$phi8Z2D>>2]|0;
      $52 = HEAP32[$47>>2]|0;
      $56 = $51;$57 = $52;
     }
     $55 = (($56) + ($57)|0);
     $58 = ($59|0)==($55|0);
     if ($58) {
      label = 29;
      break;
     }
     $60 = HEAP8[$59>>0]|0;
     $61 = HEAP32[$__s>>2]|0;
     $62 = ($61|0)==(0|0);
     do {
      if (!($62)) {
       $63 = (($61) + 24|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (($61) + 28|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($64|0)==($66|0);
       if (!($67)) {
        $68 = (($64) + 1|0);
        HEAP32[$63>>2] = $68;
        HEAP8[$64>>0] = $60;
        break;
       }
       $69 = HEAP32[$61>>2]|0;
       $70 = (($69) + 52|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $60&255;
       __THREW__ = 0;
       $73 = (invoke_iii($71|0,($61|0),($72|0))|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        label = 28;
        break L20;
       }
       $76 = ($73|0)==(-1);
       if ($76) {
        HEAP32[$__s>>2] = 0;
       }
      }
     } while(0);
     $77 = (($59) + 1|0);
     $$pre = HEAP8[$__nm>>0]|0;
     $49 = $$pre;$59 = $77;
    }
    if ((label|0) == 28) {
     $81 = ___cxa_find_matching_catch(-1,-1)|0;
     $82 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
     $$0 = $81;$$01 = $82;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 29) {
     $83 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $83;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
     STACKTOP = sp;return;
    }
   }
  }
  $32 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($32);
  __THREW__ = 0;
  invoke_viii(454,($32|0),(17096|0),(390|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   // unreachable;
  }
 }
 $78 = ___cxa_find_matching_catch(-1,-1)|0;
 $79 = tempRet0;
 $80 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
 $$0 = $78;$$01 = $79;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[7928+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[7928+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[7928+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[7928+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[7928+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[7928+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2>>0] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else if ((($11|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else {
   HEAP8[$scevgep>>0] = 100;
  }
 } while(0);
 $14 = HEAP8[9032>>0]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((9032|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $18;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[9024>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar>>0]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(650,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(648,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$16 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9136>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9136,$__p$i$i$i$i,633);
 }
 $5 = HEAP32[((9136 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[9280>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 9280;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (631);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9280,$__p$i$i$i$i1,633);
 }
 $25 = HEAP32[((9280 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 1023]($__grouping,$37);
 $43 = HEAP8[$__grouping>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59)|0);
    HEAP32[$__oe>>2] = $60;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $65 = HEAP8[$__nb>>0]|0;
   if ((($65<<24>>24) == 43) | (($65<<24>>24) == 45)) {
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    $69 = (invoke_iii($68|0,($17|0),($65|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 18;
     break;
    }
    $72 = (($__nb) + 1|0);
    $73 = HEAP32[$__oe>>2]|0;
    $74 = (($73) + 1|0);
    HEAP32[$__oe>>2] = $74;
    HEAP8[$73>>0] = $69;
    $__nf$0 = $72;
   } else {
    $__nf$0 = $__nb;
   }
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   if ($78) {
    $79 = HEAP8[$__nf$0>>0]|0;
    $80 = ($79<<24>>24)==(48);
    if ($80) {
     $81 = (($__nf$0) + 1|0);
     $82 = HEAP8[$81>>0]|0;
     if ((($82<<24>>24) == 88) | (($82<<24>>24) == 120)) {
      $83 = HEAP32[$17>>2]|0;
      $84 = (($83) + 28|0);
      $85 = HEAP32[$84>>2]|0;
      __THREW__ = 0;
      $86 = (invoke_iii($85|0,($17|0),48)|0);
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 18;
       break;
      }
      $89 = HEAP32[$__oe>>2]|0;
      $90 = (($89) + 1|0);
      HEAP32[$__oe>>2] = $90;
      HEAP8[$89>>0] = $86;
      $91 = HEAP8[$81>>0]|0;
      $92 = HEAP32[$17>>2]|0;
      $93 = (($92) + 28|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      $95 = (invoke_iii($94|0,($17|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       label = 18;
       break;
      }
      $98 = (($__nf$0) + 2|0);
      $99 = HEAP32[$__oe>>2]|0;
      $100 = (($99) + 1|0);
      HEAP32[$__oe>>2] = $100;
      HEAP8[$99>>0] = $95;
      $__nf$1 = $98;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $101 = ($__nf$1|0)==($__ne|0);
   if (!($101)) {
    $102 = (($__ne) + -1|0);
    $103 = ($102>>>0)>($__nf$1>>>0);
    if ($103) {
     $$012$i$i = $__nf$1;$106 = $102;
     while(1) {
      $104 = HEAP8[$$012$i$i>>0]|0;
      $105 = HEAP8[$106>>0]|0;
      HEAP8[$$012$i$i>>0] = $105;
      HEAP8[$106>>0] = $104;
      $107 = (($$012$i$i) + 1|0);
      $108 = (($106) + -1|0);
      $109 = ($107>>>0)<($108>>>0);
      if ($109) {
       $$012$i$i = $107;$106 = $108;
      } else {
       break;
      }
     }
    }
   }
   $110 = HEAP32[$37>>2]|0;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_ii($112|0,($37|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 18;
   } else {
    $116 = ($__nf$1>>>0)<($__ne>>>0);
    L44: do {
     if ($116) {
      $117 = (($__grouping) + 1|0);
      $118 = (($__grouping) + 4|0);
      $119 = (($__grouping) + 8|0);
      $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
      while(1) {
       $120 = HEAP8[$__grouping>>0]|0;
       $121 = $120 & 1;
       $122 = ($121<<24>>24)==(0);
       $123 = HEAP32[$119>>2]|0;
       $$ = $122 ? $117 : $123;
       $124 = (($$) + ($__dg$014)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = ($125<<24>>24)==(0);
       if ($126) {
        $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
       } else {
        $127 = HEAP32[$119>>2]|0;
        $$16 = $122 ? $117 : $127;
        $128 = (($$16) + ($__dg$014)|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = $129 << 24 >> 24;
        $131 = ($__dc$013|0)==($130|0);
        if ($131) {
         $132 = HEAP32[$__oe>>2]|0;
         $133 = (($132) + 1|0);
         HEAP32[$__oe>>2] = $133;
         HEAP8[$132>>0] = $113;
         $134 = HEAP8[$__grouping>>0]|0;
         $135 = $134 & 1;
         $136 = ($135<<24>>24)==(0);
         if ($136) {
          $138 = $134&255;
          $139 = $138 >>> 1;
          $141 = $139;
         } else {
          $137 = HEAP32[$118>>2]|0;
          $141 = $137;
         }
         $140 = (($141) + -1)|0;
         $142 = ($__dg$014>>>0)<($140>>>0);
         $143 = $142&1;
         $$__dg$0 = (($143) + ($__dg$014))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
        }
       }
       $144 = HEAP8[$__p$015>>0]|0;
       $145 = HEAP32[$17>>2]|0;
       $146 = (($145) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iii($147|0,($17|0),($144|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        break;
       }
       $151 = HEAP32[$__oe>>2]|0;
       $152 = (($151) + 1|0);
       HEAP32[$__oe>>2] = $152;
       HEAP8[$151>>0] = $148;
       $153 = (($__dc$1) + 1)|0;
       $154 = (($__p$015) + 1|0);
       $155 = ($154>>>0)<($__ne>>>0);
       if ($155) {
        $__dc$013 = $153;$__dg$014 = $__dg$1;$__p$015 = $154;
       } else {
        break L44;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index2 = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $156 = $__nf$1;
    $157 = $__nb;
    $158 = (($156) - ($157))|0;
    $159 = (($__ob) + ($158)|0);
    $160 = HEAP32[$__oe>>2]|0;
    $161 = ($159|0)==($160|0);
    if (!($161)) {
     $162 = (($160) + -1|0);
     $163 = ($162>>>0)>($159>>>0);
     if ($163) {
      $$012$i$i10 = $159;$166 = $162;
      while(1) {
       $164 = HEAP8[$$012$i$i10>>0]|0;
       $165 = HEAP8[$166>>0]|0;
       HEAP8[$$012$i$i10>>0] = $165;
       HEAP8[$166>>0] = $164;
       $167 = (($$012$i$i10) + 1|0);
       $168 = (($166) + -1|0);
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $$012$i$i10 = $167;$166 = $168;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index2 = $64;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $170 = ($__np|0)==($__ne|0);
 if ($170) {
  $171 = HEAP32[$__oe>>2]|0;
  $storemerge = $171;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $172 = $__np;
  $173 = $__nb;
  $174 = (($172) - ($173))|0;
  $175 = (($__ob) + ($174)|0);
  $storemerge = $175;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8>>0] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$17>>0] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit>>0] = 100;
  }
 } while(0);
 $21 = HEAP8[9032>>0]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((9032|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $25;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[9024>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar>>0]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(650,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[7928+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[7928+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[7928+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[7928+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[7928+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[7928+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2>>0] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else if ((($11|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else {
   HEAP8[$scevgep>>0] = 117;
  }
 } while(0);
 $14 = HEAP8[9032>>0]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((9032|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $18;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[9024>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar>>0]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(650,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8>>0] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$17>>0] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit>>0] = 117;
  }
 } while(0);
 $21 = HEAP8[9032>>0]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((9032|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $25;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[9024>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar>>0]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(650,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$118 = 0, $$1217 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0;
 var $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 68|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i>>0] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i>>0] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19>>0] = 42;
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20>>0] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20>>0] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20>>0] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20>>0] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20>>0] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20>>0] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[9032>>0]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((9032|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $33;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[9024>>2]|0;
 if ($specify_precision$0$off0$ph$i12) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[9032>>0]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i12) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((9032|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[9024>>2] = $48;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[9024>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(651,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((9032|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[9024>>2] = $63;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[9024>>2]|0;
     $69 = (($__iob) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $70;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $71 = (invoke_iiiii(651,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 36;
     } else {
      $__nc$1 = $71;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $74 = HEAP32[$__nb>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $116 = $74;$79 = $74;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(635);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $116 = $$pre;$79 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$118 = $eh$lpad$body$indexZ2D;$$1217 = $eh$lpad$body$index3Z2D;
   ___resumeException($$118|0);
   // unreachable;
  } else {
   $$pre19 = HEAP32[$__nb>>2]|0;
   $116 = 0;$79 = $$pre19;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$8>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else if ((($81|0) == 16)) {
   $82 = HEAP8[$79>>0]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $110 = 0;$99 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 1;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   __THREW__ = 0;
   invoke_v(635);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $135 = 0;
    label = 58;
   } else {
    $$pre20 = HEAP32[$__nb>>2]|0;
    $110 = 0;$99 = $$pre20;$__ob$0 = 0;
    label = 59;
   }
  } else {
   $110 = $91;$99 = $79;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(456,($0|0),($__iob|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $135 = $110;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(652,($99|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $121 = ___cxa_find_matching_catch(-1,-1)|0;
     $122 = tempRet0;
     $123 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
     $$0 = $121;$$01 = $122;$125 = $110;
     break;
    }
    $102 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
    $103 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $103;
    $104 = HEAP32[$__op>>2]|0;
    $105 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(459,($1|0),($$byval_copy|0),($__ob$0|0),($104|0),($105|0),($__iob|0),($__fl|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $135 = $110;
     label = 58;
    } else {
     $108 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $108;
     HEAP32[$agg$result>>2] = $108;
     $109 = ($110|0)==(0|0);
     if (!($109)) {
      __THREW__ = 0;
      invoke_vi(636,($110|0));
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       $113 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $114 = tempRet0;
       ___clang_call_terminate($113);
       // unreachable;
      }
     }
     $115 = ($116|0)==(0|0);
     if ($115) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(636,($116|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $119 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $120 = tempRet0;
      ___clang_call_terminate($119);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $95 = ___cxa_find_matching_catch(-1,-1)|0;
  $96 = tempRet0;
  $$0 = $95;$$01 = $96;$125 = $135;
 }
 $124 = ($125|0)==(0|0);
 if (!($124)) {
  __THREW__ = 0;
  invoke_vi(636,($125|0));
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   $128 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $129 = tempRet0;
   ___clang_call_terminate($128);
   // unreachable;
  }
 }
 $130 = ($116|0)==(0|0);
 if ($130) {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(636,($116|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $134 = tempRet0;
  ___clang_call_terminate($133);
  // unreachable;
 } else {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(653,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch(-1,-1)|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(648,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(648,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$58 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0;
 var $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9136>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9136,$__p$i$i$i$i,633);
 }
 $5 = HEAP32[((9136 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[9280>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 9280;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (631);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9280,$__p$i$i$i$i1,633);
 }
 $25 = HEAP32[((9280 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 1023]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb>>0]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 1|0);
   HEAP32[$__oe>>2] = $52;
   HEAP8[$51>>0] = $47;
   $__nf$0 = $50;
   label = 20;
  }
 } else {
  $__nf$0 = $__nb;
  label = 20;
 }
 L22: do {
  if ((label|0) == 20) {
   $63 = $__ne;
   $64 = $__nf$0;
   $65 = (($63) - ($64))|0;
   $66 = ($65|0)>(1);
   L24: do {
    if ($66) {
     $68 = HEAP8[$__nf$0>>0]|0;
     $69 = ($68<<24>>24)==(48);
     if ($69) {
      $70 = (($__nf$0) + 1|0);
      $71 = HEAP8[$70>>0]|0;
      if ((($71<<24>>24) == 88) | (($71<<24>>24) == 120)) {
       $72 = HEAP32[$17>>2]|0;
       $73 = (($72) + 28|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_iii($74|0,($17|0),48)|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break L22;
       }
       $78 = HEAP32[$__oe>>2]|0;
       $79 = (($78) + 1|0);
       HEAP32[$__oe>>2] = $79;
       HEAP8[$78>>0] = $75;
       $80 = (($__nf$0) + 2|0);
       $81 = HEAP8[$70>>0]|0;
       $82 = HEAP32[$17>>2]|0;
       $83 = (($82) + 28|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_iii($84|0,($17|0),($81|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        break L22;
       }
       $88 = HEAP32[$__oe>>2]|0;
       $89 = (($88) + 1|0);
       HEAP32[$__oe>>2] = $89;
       HEAP8[$88>>0] = $85;
       $90 = ($80>>>0)<($__ne>>>0);
       if ($90) {
        $__ns$043 = $80;
        while(1) {
         $93 = HEAP8[$__ns$043>>0]|0;
         $94 = HEAP8[9032>>0]|0;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $96 = (___cxa_guard_acquire((9032|0))|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           __THREW__ = 0;
           $98 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            label = 32;
            break;
           }
           HEAP32[9024>>2] = $98;
           ___cxa_guard_release((9032|0));
          }
         }
         $103 = HEAP32[9024>>2]|0;
         $104 = $93 << 24 >> 24;
         __THREW__ = 0;
         $105 = (invoke_iii(654,($104|0),($103|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 17;
          break;
         }
         $108 = ($105|0)==(0);
         $92 = (($__ns$043) + 1|0);
         if ($108) {
          $__nf$1 = $80;$__ns$2 = $__ns$043;
          break L24;
         }
         $91 = ($92>>>0)<($__ne>>>0);
         if ($91) {
          $__ns$043 = $92;
         } else {
          $__nf$1 = $80;$__ns$2 = $92;
          break L24;
         }
        }
        if ((label|0) == 17) {
         $59 = ___cxa_find_matching_catch(-1,-1)|0;
         $60 = tempRet0;
         $eh$lpad$body$index7Z2D = $60;$eh$lpad$body$indexZ2D = $59;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        else if ((label|0) == 32) {
         $101 = ___cxa_find_matching_catch(-1,-1)|0;
         $102 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index7Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
       } else {
        $__nf$1 = $80;$__ns$2 = $80;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $67 = ($__nf$0>>>0)<($__ne>>>0);
     if ($67) {
      $__ns$134 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$134>>0]|0;
       $112 = HEAP8[9032>>0]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((9032|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 40;
          break;
         }
         HEAP32[9024>>2] = $116;
         ___cxa_guard_release((9032|0));
        }
       }
       $121 = HEAP32[9024>>2]|0;
       $122 = $111 << 24 >> 24;
       __THREW__ = 0;
       $123 = (invoke_iii(655,($122|0),($121|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 16;
        break;
       }
       $126 = ($123|0)==(0);
       $110 = (($__ns$134) + 1|0);
       if ($126) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
        break L44;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$134 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L44;
       }
      }
      if ((label|0) == 16) {
       $57 = ___cxa_find_matching_catch(-1,-1)|0;
       $58 = tempRet0;
       $eh$lpad$body$index7Z2D = $58;$eh$lpad$body$indexZ2D = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      else if ((label|0) == 40) {
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       ___cxa_guard_abort((9032|0));
       $eh$lpad$body$index7Z2D = $120;$eh$lpad$body$indexZ2D = $119;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $127 = HEAP8[$__grouping>>0]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $132 = $127&255;
    $133 = $132 >>> 1;
    $135 = $133;
   } else {
    $130 = (($__grouping) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $135 = $131;
   }
   $134 = ($135|0)==(0);
   if ($134) {
    $136 = HEAP32[$__oe>>2]|0;
    $137 = HEAP32[$17>>2]|0;
    $138 = (($137) + 32|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($139|0,($17|0),($__nf$1|0),($__ns$2|0),($136|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     break;
    }
    $142 = $__ns$2;
    $143 = $__nf$1;
    $144 = (($142) - ($143))|0;
    $145 = HEAP32[$__oe>>2]|0;
    $146 = (($145) + ($144)|0);
    HEAP32[$__oe>>2] = $146;
   } else {
    $147 = ($__nf$1|0)==($__ns$2|0);
    if (!($147)) {
     $148 = (($__ns$2) + -1|0);
     $149 = ($148>>>0)>($__nf$1>>>0);
     if ($149) {
      $$012$i$i = $__nf$1;$152 = $148;
      while(1) {
       $150 = HEAP8[$$012$i$i>>0]|0;
       $151 = HEAP8[$152>>0]|0;
       HEAP8[$$012$i$i>>0] = $151;
       HEAP8[$152>>0] = $150;
       $153 = (($$012$i$i) + 1|0);
       $154 = (($152) + -1|0);
       $155 = ($153>>>0)<($154>>>0);
       if ($155) {
        $$012$i$i = $153;$152 = $154;
       } else {
        break;
       }
      }
     }
    }
    $156 = HEAP32[$37>>2]|0;
    $157 = (($156) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    $159 = (invoke_ii($158|0,($37|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     break;
    }
    $162 = ($__nf$1>>>0)<($__ns$2>>>0);
    L75: do {
     if ($162) {
      $163 = (($__grouping) + 1|0);
      $164 = (($__grouping) + 4|0);
      $165 = (($__grouping) + 8|0);
      $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
      while(1) {
       $166 = HEAP8[$__grouping>>0]|0;
       $167 = $166 & 1;
       $168 = ($167<<24>>24)==(0);
       $169 = HEAP32[$165>>2]|0;
       $$ = $168 ? $163 : $169;
       $170 = (($$) + ($__dg$026)|0);
       $171 = HEAP8[$170>>0]|0;
       $172 = ($171<<24>>24)>(0);
       if ($172) {
        $173 = HEAP32[$165>>2]|0;
        $$58 = $168 ? $163 : $173;
        $174 = (($$58) + ($__dg$026)|0);
        $175 = HEAP8[$174>>0]|0;
        $176 = $175 << 24 >> 24;
        $177 = ($__dc$025|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$__oe>>2]|0;
         $179 = (($178) + 1|0);
         HEAP32[$__oe>>2] = $179;
         HEAP8[$178>>0] = $159;
         $180 = HEAP8[$__grouping>>0]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if ($182) {
          $184 = $180&255;
          $185 = $184 >>> 1;
          $187 = $185;
         } else {
          $183 = HEAP32[$164>>2]|0;
          $187 = $183;
         }
         $186 = (($187) + -1)|0;
         $188 = ($__dg$026>>>0)<($186>>>0);
         $189 = $188&1;
         $$__dg$0 = (($189) + ($__dg$026))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
        }
       } else {
        $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
       }
       $190 = HEAP8[$__p$027>>0]|0;
       $191 = HEAP32[$17>>2]|0;
       $192 = (($191) + 28|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iii($193|0,($17|0),($190|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        break;
       }
       $197 = HEAP32[$__oe>>2]|0;
       $198 = (($197) + 1|0);
       HEAP32[$__oe>>2] = $198;
       HEAP8[$197>>0] = $194;
       $199 = (($__dc$1) + 1)|0;
       $200 = (($__p$027) + 1|0);
       $201 = ($200>>>0)<($__ns$2>>>0);
       if ($201) {
        $__dc$025 = $199;$__dg$026 = $__dg$1;$__p$027 = $200;
       } else {
        break L75;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index7Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    } while(0);
    $202 = $__nf$1;
    $203 = $__nb;
    $204 = (($202) - ($203))|0;
    $205 = (($__ob) + ($204)|0);
    $206 = HEAP32[$__oe>>2]|0;
    $207 = ($205|0)==($206|0);
    if (!($207)) {
     $208 = (($206) + -1|0);
     $209 = ($208>>>0)>($205>>>0);
     if ($209) {
      $$012$i$i13 = $205;$212 = $208;
      while(1) {
       $210 = HEAP8[$$012$i$i13>>0]|0;
       $211 = HEAP8[$212>>0]|0;
       HEAP8[$$012$i$i13>>0] = $211;
       HEAP8[$212>>0] = $210;
       $213 = (($$012$i$i13) + 1|0);
       $214 = (($212) + -1|0);
       $215 = ($213>>>0)<($214>>>0);
       if ($215) {
        $$012$i$i13 = $213;$212 = $214;
       } else {
        break;
       }
      }
     }
    }
   }
   $216 = ($__ns$2>>>0)<($__ne>>>0);
   L95: do {
    if ($216) {
     $__nf$221 = $__ns$2;
     while(1) {
      $217 = HEAP8[$__nf$221>>0]|0;
      $218 = ($217<<24>>24)==(46);
      if ($218) {
       label = 69;
       break;
      }
      $228 = HEAP32[$17>>2]|0;
      $229 = (($228) + 28|0);
      $230 = HEAP32[$229>>2]|0;
      __THREW__ = 0;
      $231 = (invoke_iii($230|0,($17|0),($217|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 14;
       break;
      }
      $234 = HEAP32[$__oe>>2]|0;
      $235 = (($234) + 1|0);
      HEAP32[$__oe>>2] = $235;
      HEAP8[$234>>0] = $231;
      $236 = (($__nf$221) + 1|0);
      $237 = ($236>>>0)<($__ne>>>0);
      if ($237) {
       $__nf$221 = $236;
      } else {
       $__nf$3 = $236;
       break L95;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index7Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 69) {
      $219 = HEAP32[$37>>2]|0;
      $220 = (($219) + 12|0);
      $221 = HEAP32[$220>>2]|0;
      __THREW__ = 0;
      $222 = (invoke_ii($221|0,($37|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L22;
      }
      $225 = HEAP32[$__oe>>2]|0;
      $226 = (($225) + 1|0);
      HEAP32[$__oe>>2] = $226;
      HEAP8[$225>>0] = $222;
      $227 = (($__nf$221) + 1|0);
      $__nf$3 = $227;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $238 = HEAP32[$__oe>>2]|0;
   $239 = HEAP32[$17>>2]|0;
   $240 = (($239) + 32|0);
   $241 = HEAP32[$240>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($241|0,($17|0),($__nf$3|0),($__ne|0),($238|0))|0);
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    $244 = $__nf$3;
    $245 = (($63) - ($244))|0;
    $246 = HEAP32[$__oe>>2]|0;
    $247 = (($246) + ($245)|0);
    HEAP32[$__oe>>2] = $247;
    $248 = ($__np|0)==($__ne|0);
    if ($248) {
     $storemerge = $247;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $249 = $__np;
    $250 = $__nb;
    $251 = (($249) - ($250))|0;
    $252 = (($__ob) + ($251)|0);
    $storemerge = $252;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch(-1,-1)|0;
 $62 = tempRet0;
 $eh$lpad$body$index7Z2D = $62;$eh$lpad$body$indexZ2D = $61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$113 = 0, $$1212 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 60|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 56|0;
 $2 = sp + 64|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i>>0] = 76;
   $scevgep16 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep16>>0] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16>>0] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19>>0] = 42;
   HEAP8[$20>>0] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep>>0] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep>>0] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep>>0] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[9032>>0]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((9032|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $33;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[9024>>2]|0;
 if ($specify_precision$0$off0$ph$i17) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[9032>>0]|0;
   $45 = ($44<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i17) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((9032|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L41;
        } else {
         HEAP32[9024>>2] = $48;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[9024>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(651,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((9032|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L41;
        } else {
         HEAP32[9024>>2] = $63;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[9024>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $69 = (invoke_iiiii(651,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 36;
     } else {
      $__nc$1 = $69;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $72 = HEAP32[$__nb>>2]|0;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $110 = $72;$77 = $72;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(635);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $110 = $$pre;$77 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$113 = $eh$lpad$body$indexZ2D;$$1212 = $eh$lpad$body$index3Z2D;
   ___resumeException($$113|0);
   // unreachable;
  } else {
   $$pre14 = HEAP32[$__nb>>2]|0;
   $110 = 0;$77 = $$pre14;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$8>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 16)) {
   $80 = HEAP8[$77>>0]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $108 = 0;$97 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 1;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __THREW__ = 0;
   invoke_v(635);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $117 = 0;
    label = 58;
   } else {
    $$pre15 = HEAP32[$__nb>>2]|0;
    $108 = 0;$97 = $$pre15;$__ob$0 = 0;
    label = 59;
   }
  } else {
   $108 = $89;$97 = $77;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(456,($0|0),($__iob|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $117 = $108;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(652,($97|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $111 = ___cxa_find_matching_catch(-1,-1)|0;
     $112 = tempRet0;
     $113 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
     $$0 = $111;$$01 = $112;$115 = $108;
     break;
    }
    $100 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
    $101 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $101;
    $102 = HEAP32[$__op>>2]|0;
    $103 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(459,($1|0),($$byval_copy|0),($__ob$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $117 = $108;
     label = 58;
    } else {
     $106 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $106;
     HEAP32[$agg$result>>2] = $106;
     $107 = ($108|0)==(0|0);
     if (!($107)) {
      _free($108);
     }
     $109 = ($110|0)==(0|0);
     if ($109) {
      STACKTOP = sp;return;
     }
     _free($110);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $93 = ___cxa_find_matching_catch(-1,-1)|0;
  $94 = tempRet0;
  $$0 = $93;$$01 = $94;$115 = $117;
 }
 $114 = ($115|0)==(0|0);
 if (!($114)) {
  _free($115);
 }
 $116 = ($110|0)==(0|0);
 if ($116) {
  $$113 = $$0;$$1212 = $$01;
  ___resumeException($$113|0);
  // unreachable;
 }
 _free($110);
 $$113 = $$0;$$1212 = $$01;
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 28|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__fmt = sp + 32|0;
 $__nar = sp + 40|0;
 $__o = sp + 60|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[7936+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[7936+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[7936+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[7936+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[7936+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[7936+5>>0]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch(-1,-1)|0;
     $10 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($9|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $12 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$11,$__fmt,$vararg_buffer)|0);
 $13 = (($__nar) + ($12)|0);
 $14 = (($__iob) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 176;
 do {
  if ((($16|0) == 16)) {
   $17 = HEAP8[$__nar>>0]|0;
   if ((($17<<24>>24) == 43) | (($17<<24>>24) == 45)) {
    $18 = (($__nar) + 1|0);
    $$0$i = $18;
    break;
   }
   $19 = ($12|0)>(1);
   $20 = ($17<<24>>24)==(48);
   $or$cond$i = $19 & $20;
   if ($or$cond$i) {
    $21 = (($__nar) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    if ((($22<<24>>24) == 88) | (($22<<24>>24) == 120)) {
     $23 = (($__nar) + 2|0);
     $$0$i = $23;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else if ((($16|0) == 32)) {
   $$0$i = $13;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[9136>>2]|0;
 $26 = ($25|0)==(-1);
 if (!($26)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $27 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$27>>2] = (631);
  $28 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$28>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   $56 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $31 = HEAP32[((9136 + 4|0))>>2]|0;
 $32 = (($31) + -1)|0;
 $33 = (($24) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($24) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 2;
 $41 = ($40>>>0)>($32>>>0);
 if ($41) {
  $42 = (($36) + ($32<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $48 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiiii[$51 & 1023]($43,$__nar,$13,$__o)|0);
   $52 = (($__o) + ($12)|0);
   $53 = ($$0$i|0)==($13|0);
   if ($53) {
    $__op$0 = $52;
    $61 = HEAP32[$__s>>2]|0;
    HEAP32[$1>>2] = $61;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $57 = $__nar;
   $58 = $$0$i;
   $59 = (($58) - ($57))|0;
   $60 = (($__o) + ($59)|0);
   $__op$0 = $60;
   $61 = HEAP32[$__s>>2]|0;
   HEAP32[$1>>2] = $61;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $45 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($45);
 __THREW__ = 0;
 invoke_viii(454,($45|0),(17096|0),(390|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__nm = sp + 12|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 1023]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[9288>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9288;
  $14 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$14>>2] = (631);
  $15 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9288|0),($__p$i$i$i$i|0),(633|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[((9288 + 4|0))>>2]|0;
  $19 = (($18) + -1)|0;
  $20 = (($11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($11) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $21;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = ($27>>>0)>($19>>>0);
  if ($28) {
   $29 = (($23) + ($19<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = HEAP32[$1>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
    $36 = HEAP32[$30>>2]|0;
    if ($__v) {
     $37 = (($36) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 1023]($__nm,$30);
    } else {
     $39 = (($36) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vii[$40 & 1023]($__nm,$30);
    }
    $41 = HEAP8[$__nm>>0]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $46 = (($__nm) + 4|0);
     $$pre5 = (($__nm) + 8|0);
     $$ph = $46;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $46;
    } else {
     $44 = (($__nm) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $$pre4 = (($__nm) + 4|0);
     $$ph = $45;$$pre$phi6Z2D = $44;$$pre$phiZ2D = $$pre4;
    }
    $48 = $41;$58 = $$ph;
    while(1) {
     $47 = $48 & 1;
     $49 = ($47<<24>>24)==(0);
     if ($49) {
      $52 = $48&255;
      $53 = $52 >>> 1;
      $55 = $$pre$phiZ2D;$56 = $53;
     } else {
      $50 = HEAP32[$$pre$phi6Z2D>>2]|0;
      $51 = HEAP32[$$pre$phiZ2D>>2]|0;
      $55 = $50;$56 = $51;
     }
     $54 = (($55) + ($56<<2)|0);
     $57 = ($58|0)==($54|0);
     if ($57) {
      label = 29;
      break;
     }
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$__s>>2]|0;
     $61 = ($60|0)==(0|0);
     if (!($61)) {
      $62 = (($60) + 24|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($60) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = (($67) + 52|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       $70 = (invoke_iii($69|0,($60|0),($59|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        label = 28;
        break;
       } else {
        $$0$i$i = $70;
       }
      } else {
       $73 = (($63) + 4|0);
       HEAP32[$62>>2] = $73;
       HEAP32[$63>>2] = $59;
       $$0$i$i = $59;
      }
      $74 = ($$0$i$i|0)==(-1);
      if ($74) {
       HEAP32[$__s>>2] = 0;
      }
     }
     $75 = (($58) + 4|0);
     $$pre = HEAP8[$__nm>>0]|0;
     $48 = $$pre;$58 = $75;
    }
    if ((label|0) == 28) {
     $79 = ___cxa_find_matching_catch(-1,-1)|0;
     $80 = tempRet0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
     $$0 = $79;$$01 = $80;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 29) {
     $81 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
     STACKTOP = sp;return;
    }
   }
  }
  $32 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($32);
  __THREW__ = 0;
  invoke_viii(454,($32|0),(17096|0),(390|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   // unreachable;
  }
 }
 $76 = ___cxa_find_matching_catch(-1,-1)|0;
 $77 = tempRet0;
 $78 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($78)|0);
 $$0 = $76;$$01 = $77;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[7928+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[7928+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[7928+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[7928+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[7928+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[7928+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2>>0] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep>>0] = 100;
  }
 } while(0);
 $14 = HEAP8[9032>>0]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((9032|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $18;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[9024>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar>>0]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(656,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$15 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9128>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9128,$__p$i$i$i$i,633);
 }
 $5 = HEAP32[((9128 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[9288>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 9288;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (631);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9288,$__p$i$i$i$i1,633);
 }
 $25 = HEAP32[((9288 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 1023]($__grouping,$37);
 $43 = HEAP8[$__grouping>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 48|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59<<2)|0);
    HEAP32[$__oe>>2] = $60;
    $175 = $60;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $65 = HEAP8[$__nb>>0]|0;
   if ((($65<<24>>24) == 43) | (($65<<24>>24) == 45)) {
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    $69 = (invoke_iii($68|0,($17|0),($65|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 18;
     break;
    }
    $72 = (($__nb) + 1|0);
    $73 = HEAP32[$__oe>>2]|0;
    $74 = (($73) + 4|0);
    HEAP32[$__oe>>2] = $74;
    HEAP32[$73>>2] = $69;
    $__nf$0 = $72;
   } else {
    $__nf$0 = $__nb;
   }
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   if ($78) {
    $79 = HEAP8[$__nf$0>>0]|0;
    $80 = ($79<<24>>24)==(48);
    if ($80) {
     $81 = (($__nf$0) + 1|0);
     $82 = HEAP8[$81>>0]|0;
     if ((($82<<24>>24) == 88) | (($82<<24>>24) == 120)) {
      $83 = HEAP32[$17>>2]|0;
      $84 = (($83) + 44|0);
      $85 = HEAP32[$84>>2]|0;
      __THREW__ = 0;
      $86 = (invoke_iii($85|0,($17|0),48)|0);
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 18;
       break;
      }
      $89 = HEAP32[$__oe>>2]|0;
      $90 = (($89) + 4|0);
      HEAP32[$__oe>>2] = $90;
      HEAP32[$89>>2] = $86;
      $91 = HEAP8[$81>>0]|0;
      $92 = HEAP32[$17>>2]|0;
      $93 = (($92) + 44|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      $95 = (invoke_iii($94|0,($17|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       label = 18;
       break;
      }
      $98 = (($__nf$0) + 2|0);
      $99 = HEAP32[$__oe>>2]|0;
      $100 = (($99) + 4|0);
      HEAP32[$__oe>>2] = $100;
      HEAP32[$99>>2] = $95;
      $__nf$1 = $98;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $101 = ($__nf$1|0)==($__ne|0);
   if (!($101)) {
    $102 = (($__ne) + -1|0);
    $103 = ($102>>>0)>($__nf$1>>>0);
    if ($103) {
     $$012$i$i = $__nf$1;$106 = $102;
     while(1) {
      $104 = HEAP8[$$012$i$i>>0]|0;
      $105 = HEAP8[$106>>0]|0;
      HEAP8[$$012$i$i>>0] = $105;
      HEAP8[$106>>0] = $104;
      $107 = (($$012$i$i) + 1|0);
      $108 = (($106) + -1|0);
      $109 = ($107>>>0)<($108>>>0);
      if ($109) {
       $$012$i$i = $107;$106 = $108;
      } else {
       break;
      }
     }
    }
   }
   $110 = HEAP32[$37>>2]|0;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_ii($112|0,($37|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 18;
   } else {
    $116 = ($__nf$1>>>0)<($__ne>>>0);
    L42: do {
     if ($116) {
      $117 = (($__grouping) + 1|0);
      $118 = (($__grouping) + 4|0);
      $119 = (($__grouping) + 8|0);
      $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
      while(1) {
       $120 = HEAP8[$__grouping>>0]|0;
       $121 = $120 & 1;
       $122 = ($121<<24>>24)==(0);
       $123 = HEAP32[$119>>2]|0;
       $$ = $122 ? $117 : $123;
       $124 = (($$) + ($__dg$013)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = ($125<<24>>24)==(0);
       if ($126) {
        $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
       } else {
        $127 = HEAP32[$119>>2]|0;
        $$15 = $122 ? $117 : $127;
        $128 = (($$15) + ($__dg$013)|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = $129 << 24 >> 24;
        $131 = ($__dc$012|0)==($130|0);
        if ($131) {
         $132 = HEAP32[$__oe>>2]|0;
         $133 = (($132) + 4|0);
         HEAP32[$__oe>>2] = $133;
         HEAP32[$132>>2] = $113;
         $134 = HEAP8[$__grouping>>0]|0;
         $135 = $134 & 1;
         $136 = ($135<<24>>24)==(0);
         if ($136) {
          $138 = $134&255;
          $139 = $138 >>> 1;
          $141 = $139;
         } else {
          $137 = HEAP32[$118>>2]|0;
          $141 = $137;
         }
         $140 = (($141) + -1)|0;
         $142 = ($__dg$013>>>0)<($140>>>0);
         $143 = $142&1;
         $$__dg$0 = (($143) + ($__dg$013))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
        }
       }
       $144 = HEAP8[$__p$014>>0]|0;
       $145 = HEAP32[$17>>2]|0;
       $146 = (($145) + 44|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iii($147|0,($17|0),($144|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        break;
       }
       $151 = HEAP32[$__oe>>2]|0;
       $152 = (($151) + 4|0);
       HEAP32[$__oe>>2] = $152;
       HEAP32[$151>>2] = $148;
       $153 = (($__dc$1) + 1)|0;
       $154 = (($__p$014) + 1|0);
       $155 = ($154>>>0)<($__ne>>>0);
       if ($155) {
        $__dc$012 = $153;$__dg$013 = $__dg$1;$__p$014 = $154;
       } else {
        $161 = $152;
        break L42;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index2 = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $161 = $$pre;
     }
    } while(0);
    $156 = $__nf$1;
    $157 = $__nb;
    $158 = (($156) - ($157))|0;
    $159 = (($__ob) + ($158<<2)|0);
    $160 = ($159|0)==($161|0);
    if ($160) {
     $175 = $161;
    } else {
     $162 = (($161) + -4|0);
     $163 = ($162>>>0)>($159>>>0);
     if ($163) {
      $$012$i$i10 = $159;$166 = $162;
      while(1) {
       $164 = HEAP32[$$012$i$i10>>2]|0;
       $165 = HEAP32[$166>>2]|0;
       HEAP32[$$012$i$i10>>2] = $165;
       HEAP32[$166>>2] = $164;
       $167 = (($$012$i$i10) + 4|0);
       $168 = (($166) + -4|0);
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $$012$i$i10 = $167;$166 = $168;
       } else {
        $175 = $161;
        break;
       }
      }
     } else {
      $175 = $161;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index2 = $64;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $170 = ($__np|0)==($__ne|0);
 if ($170) {
  $storemerge = $175;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $171 = $__np;
 $172 = $__nb;
 $173 = (($171) - ($172))|0;
 $174 = (($__ob) + ($173<<2)|0);
 $storemerge = $174;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch(-1,-1)|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8>>0] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$17>>0] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else {
   HEAP8[$lftr$limit>>0] = 100;
  }
 } while(0);
 $21 = HEAP8[9032>>0]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((9032|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $25;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[9024>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar>>0]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(656,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[7928+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[7928+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[7928+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[7928+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[7928+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[7928+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2>>0] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep>>0] = 117;
  }
 } while(0);
 $14 = HEAP8[9032>>0]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((9032|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $18;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[9024>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar>>0]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(656,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8>>0] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$17>>0] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else {
   HEAP8[$lftr$limit>>0] = 117;
  }
 } while(0);
 $21 = HEAP8[9032>>0]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((9032|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $25;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[9024>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar>>0]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(656,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$116 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0;
 var $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 296|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 304|0;
 $1 = sp + 300|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i>>0] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i>>0] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19>>0] = 42;
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20>>0] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20>>0] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20>>0] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20>>0] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20>>0] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20>>0] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[9032>>0]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((9032|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $33;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[9024>>2]|0;
 if ($specify_precision$0$off0$ph$i10) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[9032>>0]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i10) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((9032|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[9024>>2] = $48;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[9024>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(651,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((9032|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[9024>>2] = $63;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[9024>>2]|0;
     $69 = (($__iob) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $70;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $71 = (invoke_iiiii(651,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 36;
     } else {
      $__nc$1 = $71;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $74 = HEAP32[$__nb>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $112 = $74;$79 = $74;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(635);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $112 = $$pre;$79 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$116 = $eh$lpad$body$indexZ2D;$$1215 = $eh$lpad$body$index3Z2D;
   ___resumeException($$116|0);
   // unreachable;
  } else {
   $$pre17 = HEAP32[$__nb>>2]|0;
   $112 = 0;$79 = $$pre17;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$8>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else if ((($81|0) == 16)) {
   $82 = HEAP8[$79>>0]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $110 = 0;$99 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 3;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   __THREW__ = 0;
   invoke_v(635);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $119 = 0;
    label = 58;
   } else {
    $$pre18 = HEAP32[$__nb>>2]|0;
    $110 = $91;$99 = $$pre18;$__ob$0 = $91;
    label = 59;
   }
  } else {
   $110 = $91;$99 = $79;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(456,($0|0),($__iob|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $119 = $110;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(657,($99|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $113 = ___cxa_find_matching_catch(-1,-1)|0;
     $114 = tempRet0;
     $115 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($115)|0);
     $$0 = $113;$$01 = $114;$117 = $110;
     break;
    }
    $102 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
    $103 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $103;
    $104 = HEAP32[$__op>>2]|0;
    $105 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(658,($1|0),($$byval_copy|0),($__ob$0|0),($104|0),($105|0),($__iob|0),($__fl|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $119 = $110;
     label = 58;
    } else {
     $108 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $108;
     HEAP32[$agg$result>>2] = $108;
     $109 = ($110|0)==(0|0);
     if (!($109)) {
      _free($110);
     }
     $111 = ($112|0)==(0|0);
     if ($111) {
      STACKTOP = sp;return;
     }
     _free($112);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $95 = ___cxa_find_matching_catch(-1,-1)|0;
  $96 = tempRet0;
  $$0 = $95;$$01 = $96;$117 = $119;
 }
 $116 = ($117|0)==(0|0);
 if (!($116)) {
  _free($117);
 }
 $118 = ($112|0)==(0|0);
 if ($118) {
  $$116 = $$0;$$1215 = $$01;
  ___resumeException($$116|0);
  // unreachable;
 }
 _free($112);
 $$116 = $$0;$$1215 = $$01;
 ___resumeException($$116|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$57 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[9128>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9128,$__p$i$i$i$i,633);
 }
 $5 = HEAP32[((9128 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(17096|0),(390|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[9288>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 9288;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (631);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(9288,$__p$i$i$i$i1,633);
 }
 $25 = HEAP32[((9288 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(17096|0),(390|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 1023]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb>>0]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 4|0);
   HEAP32[$__oe>>2] = $52;
   HEAP32[$51>>2] = $47;
   $__nf$0 = $50;
   label = 20;
  }
 } else {
  $__nf$0 = $__nb;
  label = 20;
 }
 L22: do {
  if ((label|0) == 20) {
   $63 = $__ne;
   $64 = $__nf$0;
   $65 = (($63) - ($64))|0;
   $66 = ($65|0)>(1);
   L24: do {
    if ($66) {
     $68 = HEAP8[$__nf$0>>0]|0;
     $69 = ($68<<24>>24)==(48);
     if ($69) {
      $70 = (($__nf$0) + 1|0);
      $71 = HEAP8[$70>>0]|0;
      if ((($71<<24>>24) == 88) | (($71<<24>>24) == 120)) {
       $72 = HEAP32[$17>>2]|0;
       $73 = (($72) + 44|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_iii($74|0,($17|0),48)|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break L22;
       }
       $78 = HEAP32[$__oe>>2]|0;
       $79 = (($78) + 4|0);
       HEAP32[$__oe>>2] = $79;
       HEAP32[$78>>2] = $75;
       $80 = (($__nf$0) + 2|0);
       $81 = HEAP8[$70>>0]|0;
       $82 = HEAP32[$17>>2]|0;
       $83 = (($82) + 44|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_iii($84|0,($17|0),($81|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        break L22;
       }
       $88 = HEAP32[$__oe>>2]|0;
       $89 = (($88) + 4|0);
       HEAP32[$__oe>>2] = $89;
       HEAP32[$88>>2] = $85;
       $90 = ($80>>>0)<($__ne>>>0);
       if ($90) {
        $__ns$042 = $80;
        while(1) {
         $93 = HEAP8[$__ns$042>>0]|0;
         $94 = HEAP8[9032>>0]|0;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $96 = (___cxa_guard_acquire((9032|0))|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           __THREW__ = 0;
           $98 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            label = 32;
            break;
           }
           HEAP32[9024>>2] = $98;
           ___cxa_guard_release((9032|0));
          }
         }
         $103 = HEAP32[9024>>2]|0;
         $104 = $93 << 24 >> 24;
         __THREW__ = 0;
         $105 = (invoke_iii(654,($104|0),($103|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 17;
          break;
         }
         $108 = ($105|0)==(0);
         $92 = (($__ns$042) + 1|0);
         if ($108) {
          $__nf$1 = $80;$__ns$2 = $__ns$042;
          break L24;
         }
         $91 = ($92>>>0)<($__ne>>>0);
         if ($91) {
          $__ns$042 = $92;
         } else {
          $__nf$1 = $80;$__ns$2 = $92;
          break L24;
         }
        }
        if ((label|0) == 17) {
         $59 = ___cxa_find_matching_catch(-1,-1)|0;
         $60 = tempRet0;
         $eh$lpad$body$index7Z2D = $60;$eh$lpad$body$indexZ2D = $59;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        else if ((label|0) == 32) {
         $101 = ___cxa_find_matching_catch(-1,-1)|0;
         $102 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index7Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
       } else {
        $__nf$1 = $80;$__ns$2 = $80;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $67 = ($__nf$0>>>0)<($__ne>>>0);
     if ($67) {
      $__ns$133 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$133>>0]|0;
       $112 = HEAP8[9032>>0]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((9032|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 40;
          break;
         }
         HEAP32[9024>>2] = $116;
         ___cxa_guard_release((9032|0));
        }
       }
       $121 = HEAP32[9024>>2]|0;
       $122 = $111 << 24 >> 24;
       __THREW__ = 0;
       $123 = (invoke_iii(655,($122|0),($121|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 16;
        break;
       }
       $126 = ($123|0)==(0);
       $110 = (($__ns$133) + 1|0);
       if ($126) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
        break L44;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$133 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L44;
       }
      }
      if ((label|0) == 16) {
       $57 = ___cxa_find_matching_catch(-1,-1)|0;
       $58 = tempRet0;
       $eh$lpad$body$index7Z2D = $58;$eh$lpad$body$indexZ2D = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      else if ((label|0) == 40) {
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       ___cxa_guard_abort((9032|0));
       $eh$lpad$body$index7Z2D = $120;$eh$lpad$body$indexZ2D = $119;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $127 = HEAP8[$__grouping>>0]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $132 = $127&255;
    $133 = $132 >>> 1;
    $135 = $133;
   } else {
    $130 = (($__grouping) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $135 = $131;
   }
   $134 = ($135|0)==(0);
   if ($134) {
    $136 = HEAP32[$__oe>>2]|0;
    $137 = HEAP32[$17>>2]|0;
    $138 = (($137) + 48|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($139|0,($17|0),($__nf$1|0),($__ns$2|0),($136|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     break;
    }
    $142 = $__ns$2;
    $143 = $__nf$1;
    $144 = (($142) - ($143))|0;
    $145 = HEAP32[$__oe>>2]|0;
    $146 = (($145) + ($144<<2)|0);
    HEAP32[$__oe>>2] = $146;
    $253 = $146;
   } else {
    $147 = ($__nf$1|0)==($__ns$2|0);
    if (!($147)) {
     $148 = (($__ns$2) + -1|0);
     $149 = ($148>>>0)>($__nf$1>>>0);
     if ($149) {
      $$012$i$i = $__nf$1;$152 = $148;
      while(1) {
       $150 = HEAP8[$$012$i$i>>0]|0;
       $151 = HEAP8[$152>>0]|0;
       HEAP8[$$012$i$i>>0] = $151;
       HEAP8[$152>>0] = $150;
       $153 = (($$012$i$i) + 1|0);
       $154 = (($152) + -1|0);
       $155 = ($153>>>0)<($154>>>0);
       if ($155) {
        $$012$i$i = $153;$152 = $154;
       } else {
        break;
       }
      }
     }
    }
    $156 = HEAP32[$37>>2]|0;
    $157 = (($156) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    $159 = (invoke_ii($158|0,($37|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     break;
    }
    $162 = ($__nf$1>>>0)<($__ns$2>>>0);
    L73: do {
     if ($162) {
      $163 = (($__grouping) + 1|0);
      $164 = (($__grouping) + 4|0);
      $165 = (($__grouping) + 8|0);
      $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
      while(1) {
       $166 = HEAP8[$__grouping>>0]|0;
       $167 = $166 & 1;
       $168 = ($167<<24>>24)==(0);
       $169 = HEAP32[$165>>2]|0;
       $$ = $168 ? $163 : $169;
       $170 = (($$) + ($__dg$025)|0);
       $171 = HEAP8[$170>>0]|0;
       $172 = ($171<<24>>24)>(0);
       if ($172) {
        $173 = HEAP32[$165>>2]|0;
        $$57 = $168 ? $163 : $173;
        $174 = (($$57) + ($__dg$025)|0);
        $175 = HEAP8[$174>>0]|0;
        $176 = $175 << 24 >> 24;
        $177 = ($__dc$024|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$__oe>>2]|0;
         $179 = (($178) + 4|0);
         HEAP32[$__oe>>2] = $179;
         HEAP32[$178>>2] = $159;
         $180 = HEAP8[$__grouping>>0]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if ($182) {
          $184 = $180&255;
          $185 = $184 >>> 1;
          $187 = $185;
         } else {
          $183 = HEAP32[$164>>2]|0;
          $187 = $183;
         }
         $186 = (($187) + -1)|0;
         $188 = ($__dg$025>>>0)<($186>>>0);
         $189 = $188&1;
         $$__dg$0 = (($189) + ($__dg$025))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
        }
       } else {
        $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
       }
       $190 = HEAP8[$__p$026>>0]|0;
       $191 = HEAP32[$17>>2]|0;
       $192 = (($191) + 44|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iii($193|0,($17|0),($190|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        break;
       }
       $197 = HEAP32[$__oe>>2]|0;
       $198 = (($197) + 4|0);
       HEAP32[$__oe>>2] = $198;
       HEAP32[$197>>2] = $194;
       $199 = (($__dc$1) + 1)|0;
       $200 = (($__p$026) + 1|0);
       $201 = ($200>>>0)<($__ns$2>>>0);
       if ($201) {
        $__dc$024 = $199;$__dg$025 = $__dg$1;$__p$026 = $200;
       } else {
        $207 = $198;
        break L73;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index7Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $207 = $$pre;
     }
    } while(0);
    $202 = $__nf$1;
    $203 = $__nb;
    $204 = (($202) - ($203))|0;
    $205 = (($__ob) + ($204<<2)|0);
    $206 = ($205|0)==($207|0);
    if ($206) {
     $253 = $207;
    } else {
     $208 = (($207) + -4|0);
     $209 = ($208>>>0)>($205>>>0);
     if ($209) {
      $$012$i$i13 = $205;$212 = $208;
      while(1) {
       $210 = HEAP32[$$012$i$i13>>2]|0;
       $211 = HEAP32[$212>>2]|0;
       HEAP32[$$012$i$i13>>2] = $211;
       HEAP32[$212>>2] = $210;
       $213 = (($$012$i$i13) + 4|0);
       $214 = (($212) + -4|0);
       $215 = ($213>>>0)<($214>>>0);
       if ($215) {
        $$012$i$i13 = $213;$212 = $214;
       } else {
        $253 = $207;
        break;
       }
      }
     } else {
      $253 = $207;
     }
    }
   }
   $216 = ($__ns$2>>>0)<($__ne>>>0);
   L96: do {
    if ($216) {
     $__nf$220 = $__ns$2;
     while(1) {
      $217 = HEAP8[$__nf$220>>0]|0;
      $218 = ($217<<24>>24)==(46);
      if ($218) {
       label = 70;
       break;
      }
      $228 = HEAP32[$17>>2]|0;
      $229 = (($228) + 44|0);
      $230 = HEAP32[$229>>2]|0;
      __THREW__ = 0;
      $231 = (invoke_iii($230|0,($17|0),($217|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 14;
       break;
      }
      $234 = HEAP32[$__oe>>2]|0;
      $235 = (($234) + 4|0);
      HEAP32[$__oe>>2] = $235;
      HEAP32[$234>>2] = $231;
      $236 = (($__nf$220) + 1|0);
      $237 = ($236>>>0)<($__ne>>>0);
      if ($237) {
       $__nf$220 = $236;
      } else {
       $241 = $235;$__nf$3 = $236;
       break L96;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index7Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 70) {
      $219 = HEAP32[$37>>2]|0;
      $220 = (($219) + 12|0);
      $221 = HEAP32[$220>>2]|0;
      __THREW__ = 0;
      $222 = (invoke_ii($221|0,($37|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L22;
      }
      $225 = HEAP32[$__oe>>2]|0;
      $226 = (($225) + 4|0);
      HEAP32[$__oe>>2] = $226;
      HEAP32[$225>>2] = $222;
      $227 = (($__nf$220) + 1|0);
      $241 = $226;$__nf$3 = $227;
      break;
     }
    } else {
     $241 = $253;$__nf$3 = $__ns$2;
    }
   } while(0);
   $238 = HEAP32[$17>>2]|0;
   $239 = (($238) + 48|0);
   $240 = HEAP32[$239>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($240|0,($17|0),($__nf$3|0),($__ne|0),($241|0))|0);
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    $244 = $__nf$3;
    $245 = (($63) - ($244))|0;
    $246 = HEAP32[$__oe>>2]|0;
    $247 = (($246) + ($245<<2)|0);
    HEAP32[$__oe>>2] = $247;
    $248 = ($__np|0)==($__ne|0);
    if ($248) {
     $storemerge = $247;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $249 = $__np;
    $250 = $__nb;
    $251 = (($249) - ($250))|0;
    $252 = (($__ob) + ($251<<2)|0);
    $storemerge = $252;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch(-1,-1)|0;
 $62 = tempRet0;
 $eh$lpad$body$index7Z2D = $62;$eh$lpad$body$indexZ2D = $61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$111 = 0, $$1210 = 0, $$byval_copy = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 288|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $0 = sp + 296|0;
 $1 = sp + 292|0;
 $2 = sp + 300|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i>>0] = 76;
   $scevgep14 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep14>>0] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14>>0] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19>>0] = 42;
   HEAP8[$20>>0] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep>>0] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep>>0] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep>>0] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[9032>>0]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((9032|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $33;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[9024>>2]|0;
 if ($specify_precision$0$off0$ph$i15) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[9032>>0]|0;
   $45 = ($44<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i15) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((9032|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L41;
        } else {
         HEAP32[9024>>2] = $48;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[9024>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(651,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((9032|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((9032|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L41;
        } else {
         HEAP32[9024>>2] = $63;
         ___cxa_guard_release((9032|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[9024>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $69 = (invoke_iiiii(651,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 36;
     } else {
      $__nc$1 = $69;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $72 = HEAP32[$__nb>>2]|0;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $110 = $72;$77 = $72;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(635);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $110 = $$pre;$77 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$111 = $eh$lpad$body$indexZ2D;$$1210 = $eh$lpad$body$index3Z2D;
   ___resumeException($$111|0);
   // unreachable;
  } else {
   $$pre12 = HEAP32[$__nb>>2]|0;
   $110 = 0;$77 = $$pre12;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$8>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else if ((($79|0) == 16)) {
   $80 = HEAP8[$77>>0]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $108 = 0;$97 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 3;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __THREW__ = 0;
   invoke_v(635);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $117 = 0;
    label = 58;
   } else {
    $$pre13 = HEAP32[$__nb>>2]|0;
    $108 = $89;$97 = $$pre13;$__ob$0 = $89;
    label = 59;
   }
  } else {
   $108 = $89;$97 = $77;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(456,($0|0),($__iob|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $117 = $108;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(657,($97|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $111 = ___cxa_find_matching_catch(-1,-1)|0;
     $112 = tempRet0;
     $113 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
     $$0 = $111;$$01 = $112;$115 = $108;
     break;
    }
    $100 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
    $101 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $101;
    $102 = HEAP32[$__op>>2]|0;
    $103 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(658,($1|0),($$byval_copy|0),($__ob$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $117 = $108;
     label = 58;
    } else {
     $106 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $106;
     HEAP32[$agg$result>>2] = $106;
     $107 = ($108|0)==(0|0);
     if (!($107)) {
      _free($108);
     }
     $109 = ($110|0)==(0|0);
     if ($109) {
      STACKTOP = sp;return;
     }
     _free($110);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $93 = ___cxa_find_matching_catch(-1,-1)|0;
  $94 = tempRet0;
  $$0 = $93;$$01 = $94;$115 = $117;
 }
 $114 = ($115|0)==(0|0);
 if (!($114)) {
  _free($115);
 }
 $116 = ($110|0)==(0|0);
 if ($116) {
  $$111 = $$0;$$1210 = $$01;
  ___resumeException($$111|0);
  // unreachable;
 }
 _free($110);
 $$111 = $$0;$$1210 = $$01;
 ___resumeException($$111|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $$byval_copy = sp + 176|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__fmt = sp + 180|0;
 $__nar = sp + 188|0;
 $__o = sp + 28|0;
 $0 = sp + 20|0;
 $1 = sp + 24|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[7936+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[7936+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[7936+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[7936+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[7936+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[7936+5>>0]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch(-1,-1)|0;
     $10 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($9|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $12 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$11,$__fmt,$vararg_buffer)|0);
 $13 = (($__nar) + ($12)|0);
 $14 = (($__iob) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 176;
 do {
  if ((($16|0) == 32)) {
   $$0$i = $13;
  } else if ((($16|0) == 16)) {
   $17 = HEAP8[$__nar>>0]|0;
   if ((($17<<24>>24) == 43) | (($17<<24>>24) == 45)) {
    $18 = (($__nar) + 1|0);
    $$0$i = $18;
    break;
   }
   $19 = ($12|0)>(1);
   $20 = ($17<<24>>24)==(48);
   $or$cond$i = $19 & $20;
   if ($or$cond$i) {
    $21 = (($__nar) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    if ((($22<<24>>24) == 88) | (($22<<24>>24) == 120)) {
     $23 = (($__nar) + 2|0);
     $$0$i = $23;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[9128>>2]|0;
 $26 = ($25|0)==(-1);
 if (!($26)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $27 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$27>>2] = (631);
  $28 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$28>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   $56 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $31 = HEAP32[((9128 + 4|0))>>2]|0;
 $32 = (($31) + -1)|0;
 $33 = (($24) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($24) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 2;
 $41 = ($40>>>0)>($32>>>0);
 if ($41) {
  $42 = (($36) + ($32<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $48 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 48|0);
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiiii[$51 & 1023]($43,$__nar,$13,$__o)|0);
   $52 = (($__o) + ($12<<2)|0);
   $53 = ($$0$i|0)==($13|0);
   if ($53) {
    $__op$0 = $52;
    $61 = HEAP32[$__s>>2]|0;
    HEAP32[$1>>2] = $61;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $57 = $__nar;
   $58 = $$0$i;
   $59 = (($58) - ($57))|0;
   $60 = (($__o) + ($59<<2)|0);
   $__op$0 = $60;
   $61 = HEAP32[$__s>>2]|0;
   HEAP32[$1>>2] = $61;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $45 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($45);
 __THREW__ = 0;
 invoke_viii(454,($45|0),(17096|0),(390|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $$pre39$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $sext = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 28|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 24|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[9136>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (631);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
   ___resumeException($59|0);
   // unreachable;
  }
 }
 $11 = HEAP32[((9136 + 4|0))>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($4) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if ($21) {
  $22 = (($16) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $28 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
   HEAP32[$__err>>2] = 0;
   $29 = ($__fmtb|0)==($__fmte|0);
   L8: do {
    if ($29) {
     label = 67;
    } else {
     $30 = (($23) + 8|0);
     $$0$ph38 = $__fmtb;$$pre39 = 0;
     L10: while(1) {
      $32 = $$pre39;
      while(1) {
       $31 = ($32|0)==(0);
       if (!($31)) {
        label = 67;
        break L8;
       }
       $33 = HEAP32[$__b>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        $46 = 0;
       } else {
        $35 = (($33) + 12|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (($33) + 16|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ($36|0)==($38|0);
        if ($39) {
         $40 = HEAP32[$33>>2]|0;
         $41 = (($40) + 36|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (FUNCTION_TABLE_ii[$42 & 1023]($33)|0);
         $44 = ($43|0)==(-1);
         if ($44) {
          HEAP32[$__b>>2] = 0;
          $46 = 0;
         } else {
          $46 = $33;
         }
        } else {
         $46 = $33;
        }
       }
       $45 = ($46|0)==(0|0);
       $47 = HEAP32[$__e>>2]|0;
       $48 = ($47|0)==(0|0);
       do {
        if ($48) {
         label = 20;
        } else {
         $49 = (($47) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($47) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$47>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = (FUNCTION_TABLE_ii[$56 & 1023]($47)|0);
          $58 = ($57|0)==(-1);
          if ($58) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          }
         }
         if ($45) {
          $85 = $47;
         } else {
          label = 21;
          break L10;
         }
        }
       } while(0);
       if ((label|0) == 20) {
        label = 0;
        if ($45) {
         label = 21;
         break L10;
        } else {
         $85 = 0;
        }
       }
       $62 = HEAP8[$$0$ph38>>0]|0;
       $63 = HEAP32[$23>>2]|0;
       $64 = (($63) + 36|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (FUNCTION_TABLE_iiii[$65 & 1023]($23,$62,0)|0);
       $67 = ($66<<24>>24)==(37);
       if ($67) {
        label = 24;
        break;
       }
       $89 = HEAP8[$$0$ph38>>0]|0;
       $isascii1$i = ($89<<24>>24)>(-1);
       if ($isascii1$i) {
        $90 = $89 << 24 >> 24;
        $91 = HEAP32[$30>>2]|0;
        $92 = (($91) + ($90<<1)|0);
        $93 = HEAP16[$92>>1]|0;
        $94 = $93 & 8192;
        $95 = ($94<<16>>16)==(0);
        if (!($95)) {
         $$0$pn = $$0$ph38;
         label = 35;
         break;
        }
       }
       $154 = (($46) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = (($46) + 16|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($155|0)==($157|0);
       if ($158) {
        $159 = HEAP32[$46>>2]|0;
        $160 = (($159) + 36|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (FUNCTION_TABLE_ii[$161 & 1023]($46)|0);
        $$0$i$i16 = $162;
       } else {
        $163 = HEAP8[$155>>0]|0;
        $164 = $163&255;
        $$0$i$i16 = $164;
       }
       $165 = $$0$i$i16&255;
       $166 = HEAP32[$23>>2]|0;
       $167 = (($166) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = (FUNCTION_TABLE_iii[$168 & 1023]($23,$165)|0);
       $170 = HEAP8[$$0$ph38>>0]|0;
       $171 = HEAP32[$23>>2]|0;
       $172 = (($171) + 12|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (FUNCTION_TABLE_iii[$173 & 1023]($23,$170)|0);
       $175 = ($169<<24>>24)==($174<<24>>24);
       if ($175) {
        label = 62;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $32 = 4;
      }
      L38: do {
       if ((label|0) == 24) {
        label = 0;
        $68 = (($$0$ph38) + 1|0);
        $69 = ($68|0)==($__fmte|0);
        if ($69) {
         label = 25;
         break L10;
        }
        $70 = HEAP8[$68>>0]|0;
        $71 = HEAP32[$23>>2]|0;
        $72 = (($71) + 36|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (FUNCTION_TABLE_iiii[$73 & 1023]($23,$70,0)|0);
        if ((($74<<24>>24) == 48) | (($74<<24>>24) == 69)) {
         $75 = (($$0$ph38) + 2|0);
         $76 = ($75|0)==($__fmte|0);
         if ($76) {
          label = 28;
          break L10;
         }
         $77 = HEAP8[$75>>0]|0;
         $78 = HEAP32[$23>>2]|0;
         $79 = (($78) + 36|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = (FUNCTION_TABLE_iiii[$80 & 1023]($23,$77,0)|0);
         $$1 = $75;$__cmd$0 = $81;$__opt$0 = $74;
        } else {
         $$1 = $68;$__cmd$0 = $74;$__opt$0 = 0;
        }
        $82 = HEAP32[$this>>2]|0;
        $83 = (($82) + 36|0);
        $84 = HEAP32[$83>>2]|0;
        HEAP32[$2>>2] = $46;
        HEAP32[$3>>2] = $85;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$84 & 1023]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $86 = HEAP32[$1>>2]|0;
        HEAP32[$__b>>2] = $86;
        $87 = (($$1) + 1|0);
        $$0$ph$be = $87;
       }
       else if ((label|0) == 35) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 1|0);
         $96 = ($$2|0)==($__fmte|0);
         if ($96) {
          $$2$lcssa = $__fmte;
          break;
         }
         $97 = HEAP8[$$2>>0]|0;
         $isascii1$i4 = ($97<<24>>24)>(-1);
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $98 = $97 << 24 >> 24;
         $99 = (($91) + ($98<<1)|0);
         $100 = HEAP16[$99>>1]|0;
         $101 = $100 & 8192;
         $102 = ($101<<16>>16)==(0);
         if ($102) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
          label = 35;
         }
        }
        $$pre$i$i$i7 = $46;$$pre$i2$i$i11 = $85;$117 = $85;
        while(1) {
         $103 = ($$pre$i$i$i7|0)==(0|0);
         if ($103) {
          $115 = 0;
         } else {
          $104 = (($$pre$i$i$i7) + 12|0);
          $105 = HEAP32[$104>>2]|0;
          $106 = (($$pre$i$i$i7) + 16|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = ($105|0)==($107|0);
          if ($108) {
           $109 = HEAP32[$$pre$i$i$i7>>2]|0;
           $110 = (($109) + 36|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = (FUNCTION_TABLE_ii[$111 & 1023]($$pre$i$i$i7)|0);
           $113 = ($112|0)==(-1);
           if ($113) {
            HEAP32[$__b>>2] = 0;
            $115 = 0;
           } else {
            $115 = $$pre$i$i$i7;
           }
          } else {
           $115 = $$pre$i$i$i7;
          }
         }
         $114 = ($115|0)==(0|0);
         $116 = ($117|0)==(0|0);
         do {
          if ($116) {
           $$pre$i2$i$i1141 = $$pre$i2$i$i11;
           label = 48;
          } else {
           $118 = (($117) + 12|0);
           $119 = HEAP32[$118>>2]|0;
           $120 = (($117) + 16|0);
           $121 = HEAP32[$120>>2]|0;
           $122 = ($119|0)==($121|0);
           if (!($122)) {
            if ($114) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$211 = $117;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
           $123 = HEAP32[$117>>2]|0;
           $124 = (($123) + 36|0);
           $125 = HEAP32[$124>>2]|0;
           $126 = (FUNCTION_TABLE_ii[$125 & 1023]($117)|0);
           $127 = ($126|0)==(-1);
           if ($127) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i1141 = 0;
            label = 48;
            break;
           } else {
            $128 = ($$pre$i2$i$i11|0)==(0|0);
            $tmp$i$i13 = $114 ^ $128;
            if ($tmp$i$i13) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$211 = $$pre$i2$i$i11;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
          }
         } while(0);
         if ((label|0) == 48) {
          label = 0;
          if ($114) {
           $$0$ph$be = $$2$lcssa;
           break L38;
          } else {
           $$pre$i2$i$i1140 = $$pre$i2$i$i1141;$211 = 0;
          }
         }
         $129 = (($115) + 12|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = (($115) + 16|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = ($130|0)==($132|0);
         if ($133) {
          $134 = HEAP32[$115>>2]|0;
          $135 = (($134) + 36|0);
          $136 = HEAP32[$135>>2]|0;
          $137 = (FUNCTION_TABLE_ii[$136 & 1023]($115)|0);
          $$0$i$i = $137;
         } else {
          $138 = HEAP8[$130>>0]|0;
          $139 = $138&255;
          $$0$i$i = $139;
         }
         $140 = $$0$i$i&255;
         $isascii1$i14 = ($140<<24>>24)>(-1);
         if (!($isascii1$i14)) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $sext = $$0$i$i << 24;
         $141 = $sext >> 24;
         $142 = HEAP32[$30>>2]|0;
         $143 = (($142) + ($141<<1)|0);
         $144 = HEAP16[$143>>1]|0;
         $145 = $144 & 8192;
         $146 = ($145<<16>>16)==(0);
         if ($146) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $147 = HEAP32[$129>>2]|0;
         $148 = HEAP32[$131>>2]|0;
         $149 = ($147|0)==($148|0);
         if ($149) {
          $150 = HEAP32[$115>>2]|0;
          $151 = (($150) + 40|0);
          $152 = HEAP32[$151>>2]|0;
          (FUNCTION_TABLE_ii[$152 & 1023]($115)|0);
          $$pre$i$i$i7 = $115;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$117 = $211;
          continue;
         } else {
          $153 = (($147) + 1|0);
          HEAP32[$129>>2] = $153;
          $$pre$i$i$i7 = $115;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$117 = $211;
          continue;
         }
        }
       }
       else if ((label|0) == 62) {
        label = 0;
        $176 = HEAP32[$154>>2]|0;
        $177 = HEAP32[$156>>2]|0;
        $178 = ($176|0)==($177|0);
        if ($178) {
         $179 = HEAP32[$46>>2]|0;
         $180 = (($179) + 40|0);
         $181 = HEAP32[$180>>2]|0;
         (FUNCTION_TABLE_ii[$181 & 1023]($46)|0);
        } else {
         $182 = (($176) + 1|0);
         HEAP32[$154>>2] = $182;
        }
        $183 = (($$0$ph38) + 1|0);
        $$0$ph$be = $183;
       }
      } while(0);
      $88 = ($$0$ph$be|0)==($__fmte|0);
      if ($88) {
       label = 67;
       break L8;
      }
      $$pre39$pre = HEAP32[$__err>>2]|0;
      $$0$ph38 = $$0$ph$be;$$pre39 = $$pre39$pre;
     }
     if ((label|0) == 21) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
     else if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
     else if ((label|0) == 28) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
    }
   } while(0);
   if ((label|0) == 67) {
    $$pre = HEAP32[$__b>>2]|0;
    $$pre$i$i$i20 = $$pre;
   }
   $184 = ($$pre$i$i$i20|0)==(0|0);
   if ($184) {
    $196 = 0;
   } else {
    $185 = (($$pre$i$i$i20) + 12|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($$pre$i$i$i20) + 16|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($186|0)==($188|0);
    if ($189) {
     $190 = HEAP32[$$pre$i$i$i20>>2]|0;
     $191 = (($190) + 36|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (FUNCTION_TABLE_ii[$192 & 1023]($$pre$i$i$i20)|0);
     $194 = ($193|0)==(-1);
     if ($194) {
      HEAP32[$__b>>2] = 0;
      $196 = 0;
     } else {
      $196 = $$pre$i$i$i20;
     }
    } else {
     $196 = $$pre$i$i$i20;
    }
   }
   $195 = ($196|0)==(0|0);
   $197 = HEAP32[$__e>>2]|0;
   $198 = ($197|0)==(0|0);
   do {
    if ($198) {
     label = 77;
    } else {
     $199 = (($197) + 12|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($197) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($200|0)==($202|0);
     if ($203) {
      $204 = HEAP32[$197>>2]|0;
      $205 = (($204) + 36|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = (FUNCTION_TABLE_ii[$206 & 1023]($197)|0);
      $208 = ($207|0)==(-1);
      if ($208) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      }
     }
     if ($195) {
      HEAP32[$agg$result>>2] = $196;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 77) {
    if (!($195)) {
     HEAP32[$agg$result>>2] = $196;
     STACKTOP = sp;return;
    }
   }
   $209 = HEAP32[$__err>>2]|0;
   $210 = $209 | 2;
   HEAP32[$__err>>2] = $210;
   HEAP32[$agg$result>>2] = $196;
   STACKTOP = sp;return;
  }
 }
 $25 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($25);
 __THREW__ = 0;
 invoke_viii(454,($25|0),(17096|0),(390|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
  ___resumeException($59|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,8040,((8040 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[9136>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (631);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
   ___resumeException($42|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((9136 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_ii[$30 & 1023]($28)|0);
   HEAP32[$0>>2] = $27;
   $32 = (($31) + 168|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$31,$32,$21,$__err,0)|0);
   $34 = $33;
   $35 = $31;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(168);
   if (!($37)) {
    $41 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $41;
    STACKTOP = sp;return;
   }
   $38 = (($__tm) + 24|0);
   $39 = (($36|0) / 12)&-1;
   $40 = (($39|0) % 7)&-1;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(454,($23|0),(17096|0),(390|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $44 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  ___resumeException($42|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[9136>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (631);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $43 = ___cxa_find_matching_catch(-1,-1)|0;
   $44 = tempRet0;
   $45 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
   ___resumeException($43|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((9136 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
   HEAP32[$0>>2] = $27;
   $33 = (($32) + 288|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $34 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$32,$33,$21,$__err,0)|0);
   $35 = $34;
   $36 = $32;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)<(288);
   if (!($38)) {
    $42 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $42;
    STACKTOP = sp;return;
   }
   $39 = (($__tm) + 16|0);
   $40 = (($37|0) / 12)&-1;
   $41 = (($40|0) % 12)&-1;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(454,($23|0),(17096|0),(390|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $43 = ___cxa_find_matching_catch(-1,-1)|0;
  $44 = tempRet0;
  $45 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
  ___resumeException($43|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[9136>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (631);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $39 = ___cxa_find_matching_catch(-1,-1)|0;
   $40 = tempRet0;
   $41 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
   ___resumeException($39|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((9136 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = (($__tm) + 20|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $28;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$21,4)|0);
   $30 = HEAP32[$__err>>2]|0;
   $31 = $30 & 4;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $38 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $38;
    STACKTOP = sp;return;
   }
   $33 = ($29|0)<(69);
   if ($33) {
    $34 = (($29) + 2000)|0;
    $__t$0$i = $34;
   } else {
    $$off$i = (($29) + -69)|0;
    $35 = ($$off$i>>>0)<(31);
    $36 = (($29) + 1900)|0;
    $$$i = $35 ? $36 : $29;
    $__t$0$i = $$$i;
   }
   $37 = (($__t$0$i) + -1900)|0;
   HEAP32[$27>>2] = $37;
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(454,($23|0),(17096|0),(390|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $41 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
  ___resumeException($39|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy30 = sp + 284|0;
 $$byval_copy29 = sp + 276|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 220|0;
 $$byval_copy26 = sp + 120|0;
 $$byval_copy25 = sp + 124|0;
 $$byval_copy24 = sp + 116|0;
 $$byval_copy23 = sp + 228|0;
 $$byval_copy22 = sp + 52|0;
 $$byval_copy21 = sp + 28|0;
 $$byval_copy20 = sp + 32|0;
 $$byval_copy19 = sp + 36|0;
 $$byval_copy18 = sp + 40|0;
 $$byval_copy17 = sp + 44|0;
 $$byval_copy16 = sp + 48|0;
 $$byval_copy15 = sp + 224|0;
 $$byval_copy14 = sp + 112|0;
 $$byval_copy13 = sp + 56|0;
 $$byval_copy12 = sp + 60|0;
 $$byval_copy11 = sp + 64|0;
 $$byval_copy10 = sp + 68|0;
 $$byval_copy9 = sp + 72|0;
 $$byval_copy8 = sp + 76|0;
 $$byval_copy7 = sp + 80|0;
 $$byval_copy6 = sp + 84|0;
 $$byval_copy5 = sp + 88|0;
 $$byval_copy4 = sp + 92|0;
 $$byval_copy3 = sp + 96|0;
 $$byval_copy2 = sp + 100|0;
 $$byval_copy1 = sp + 104|0;
 $$byval_copy = sp + 248|0;
 $1 = sp + 256|0;
 $2 = sp + 264|0;
 $3 = sp + 272|0;
 $4 = sp + 280|0;
 $5 = sp + 288|0;
 $6 = sp + 128|0;
 $7 = sp + 132|0;
 $8 = sp + 136|0;
 $9 = sp + 140|0;
 $10 = sp + 144|0;
 $11 = sp + 148|0;
 $12 = sp + 152|0;
 $13 = sp + 156|0;
 $__p$i$i$i$i = sp;
 $14 = sp + 164|0;
 $15 = sp + 168|0;
 $16 = sp + 172|0;
 $17 = sp + 176|0;
 $18 = sp + 180|0;
 $19 = sp + 184|0;
 $20 = sp + 188|0;
 $21 = sp + 192|0;
 $22 = sp + 196|0;
 $23 = sp + 200|0;
 $24 = sp + 204|0;
 $25 = sp + 208|0;
 $26 = sp + 212|0;
 $27 = sp + 216|0;
 $28 = sp + 20|0;
 $29 = sp + 24|0;
 $30 = sp + 236|0;
 $31 = sp + 16|0;
 $32 = sp + 240|0;
 $33 = sp + 232|0;
 $34 = sp + 12|0;
 $35 = sp + 108|0;
 $36 = sp + 244|0;
 $37 = sp + 252|0;
 $38 = sp + 160|0;
 $39 = sp + 260|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = HEAP32[$14>>2]|0;
 $41 = HEAP32[9136>>2]|0;
 $42 = ($41|0)==(-1);
 if (!($42)) {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $43 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$43>>2] = (631);
  $44 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$44>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 }
 $47 = HEAP32[((9136 + 4|0))>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = (($40) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($40) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = $55 >> 2;
 $57 = ($56>>>0)>($48>>>0);
 if ($57) {
  $58 = (($52) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $64 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
   $65 = $__fmt << 24 >> 24;
   L8: do {
    switch ($65|0) {
    case 68:  {
     $129 = HEAP32[$__b>>2]|0;
     HEAP32[$19>>2] = $129;
     $130 = HEAP32[$__e>>2]|0;
     HEAP32[$20>>2] = $130;
     ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$19+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$20+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,8048,((8048 + 8|0)));
     $131 = HEAP32[$18>>2]|0;
     HEAP32[$__b>>2] = $131;
     break;
    }
    case 120:  {
     $241 = HEAP32[$this>>2]|0;
     $242 = (($241) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$__b>>2]|0;
     HEAP32[$34>>2] = $244;
     $245 = HEAP32[$__e>>2]|0;
     HEAP32[$35>>2] = $245;
     ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$34+0>>2]|0;
     ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$35+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$243 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 72:  {
     $135 = HEAP32[$__e>>2]|0;
     HEAP32[$10>>2] = $135;
     ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$10+0>>2]|0;
     $136 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$59,2)|0);
     $137 = HEAP32[$__err>>2]|0;
     $138 = $137 & 4;
     $139 = ($138|0)==(0);
     $140 = ($136|0)<(24);
     $or$cond$i = $139 & $140;
     if ($or$cond$i) {
      $141 = (($__tm) + 8|0);
      HEAP32[$141>>2] = $136;
      break L8;
     } else {
      $142 = $137 | 4;
      HEAP32[$__err>>2] = $142;
      break L8;
     }
     break;
    }
    case 73:  {
     $143 = (($__tm) + 8|0);
     $144 = HEAP32[$__e>>2]|0;
     HEAP32[$9>>2] = $144;
     ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$9+0>>2]|0;
     $145 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$59,2)|0);
     $146 = HEAP32[$__err>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)==(0);
     if ($148) {
      $$off$i12 = (($145) + -1)|0;
      $149 = ($$off$i12>>>0)<(12);
      if ($149) {
       HEAP32[$143>>2] = $145;
       break L8;
      }
     }
     $150 = $146 | 4;
     HEAP32[$__err>>2] = $150;
     break;
    }
    case 65: case 97:  {
     $69 = HEAP32[$__e>>2]|0;
     $70 = (($this) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 1023]($70)|0);
     HEAP32[$13>>2] = $69;
     $74 = (($73) + 168|0);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$13+0>>2]|0;
     $75 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$73,$74,$59,$__err,0)|0);
     $76 = $75;
     $77 = $73;
     $78 = (($76) - ($77))|0;
     $79 = ($78|0)<(168);
     if ($79) {
      $80 = (($__tm) + 24|0);
      $81 = (($78|0) / 12)&-1;
      $82 = (($81|0) % 7)&-1;
      HEAP32[$80>>2] = $82;
     }
     break;
    }
    case 114:  {
     $217 = HEAP32[$__b>>2]|0;
     HEAP32[$26>>2] = $217;
     $218 = HEAP32[$__e>>2]|0;
     HEAP32[$27>>2] = $218;
     ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$26+0>>2]|0;
     ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$27+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,8064,((8064 + 11|0)));
     $219 = HEAP32[$25>>2]|0;
     HEAP32[$__b>>2] = $219;
     break;
    }
    case 82:  {
     $220 = HEAP32[$__b>>2]|0;
     HEAP32[$29>>2] = $220;
     $221 = HEAP32[$__e>>2]|0;
     HEAP32[$30>>2] = $221;
     ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$29+0>>2]|0;
     ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$30+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,8080,((8080 + 5|0)));
     $222 = HEAP32[$28>>2]|0;
     HEAP32[$__b>>2] = $222;
     break;
    }
    case 83:  {
     $223 = HEAP32[$__e>>2]|0;
     HEAP32[$4>>2] = $223;
     ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$4+0>>2]|0;
     $224 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$59,2)|0);
     $225 = HEAP32[$__err>>2]|0;
     $226 = $225 & 4;
     $227 = ($226|0)==(0);
     $228 = ($224|0)<(61);
     $or$cond$i26 = $227 & $228;
     if ($or$cond$i26) {
      HEAP32[$__tm>>2] = $224;
      break L8;
     } else {
      $229 = $225 | 4;
      HEAP32[$__err>>2] = $229;
      break L8;
     }
     break;
    }
    case 84:  {
     $230 = HEAP32[$__b>>2]|0;
     HEAP32[$32>>2] = $230;
     $231 = HEAP32[$__e>>2]|0;
     HEAP32[$33>>2] = $231;
     ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$32+0>>2]|0;
     ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$33+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,8088,((8088 + 8|0)));
     $232 = HEAP32[$31>>2]|0;
     HEAP32[$__b>>2] = $232;
     break;
    }
    case 119:  {
     $233 = HEAP32[$__e>>2]|0;
     HEAP32[$3>>2] = $233;
     ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$3+0>>2]|0;
     $234 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$59,1)|0);
     $235 = HEAP32[$__err>>2]|0;
     $236 = $235 & 4;
     $237 = ($236|0)==(0);
     $238 = ($234|0)<(7);
     $or$cond$i29 = $237 & $238;
     if ($or$cond$i29) {
      $239 = (($__tm) + 24|0);
      HEAP32[$239>>2] = $234;
      break L8;
     } else {
      $240 = $235 | 4;
      HEAP32[$__err>>2] = $240;
      break L8;
     }
     break;
    }
    case 106:  {
     $151 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $151;
     ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$8+0>>2]|0;
     $152 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$59,3)|0);
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 & 4;
     $155 = ($154|0)==(0);
     $156 = ($152|0)<(366);
     $or$cond$i15 = $155 & $156;
     if ($or$cond$i15) {
      $157 = (($__tm) + 28|0);
      HEAP32[$157>>2] = $152;
      break L8;
     } else {
      $158 = $153 | 4;
      HEAP32[$__err>>2] = $158;
      break L8;
     }
     break;
    }
    case 109:  {
     $159 = HEAP32[$__e>>2]|0;
     HEAP32[$7>>2] = $159;
     ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$7+0>>2]|0;
     $160 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$59,2)|0);
     $161 = HEAP32[$__err>>2]|0;
     $162 = $161 & 4;
     $163 = ($162|0)==(0);
     $164 = ($160|0)<(13);
     $or$cond$i18 = $163 & $164;
     if ($or$cond$i18) {
      $165 = (($__tm) + 16|0);
      $166 = (($160) + -1)|0;
      HEAP32[$165>>2] = $166;
      break L8;
     } else {
      $167 = $161 | 4;
      HEAP32[$__err>>2] = $167;
      break L8;
     }
     break;
    }
    case 77:  {
     $168 = HEAP32[$__e>>2]|0;
     HEAP32[$6>>2] = $168;
     ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$6+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$59,2)|0);
     $170 = HEAP32[$__err>>2]|0;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     $173 = ($169|0)<(60);
     $or$cond$i21 = $172 & $173;
     if ($or$cond$i21) {
      $174 = (($__tm) + 4|0);
      HEAP32[$174>>2] = $169;
      break L8;
     } else {
      $175 = $170 | 4;
      HEAP32[$__err>>2] = $175;
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $176 = HEAP32[$__e>>2]|0;
     HEAP32[$24>>2] = $176;
     ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$24+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy14,$__err,$59);
     break;
    }
    case 112:  {
     $177 = (($__tm) + 8|0);
     $178 = HEAP32[$__e>>2]|0;
     $179 = (($this) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (FUNCTION_TABLE_ii[$182 & 1023]($179)|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184 & 1;
     $186 = ($185<<24>>24)==(0);
     if ($186) {
      $189 = $184&255;
      $190 = $189 >>> 1;
      $202 = $190;
     } else {
      $187 = (($183) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $202 = $188;
     }
     $191 = (($183) + 12|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192 & 1;
     $194 = ($193<<24>>24)==(0);
     if ($194) {
      $197 = $192&255;
      $198 = $197 >>> 1;
      $200 = $198;
     } else {
      $195 = (($183) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $200 = $196;
     }
     $199 = (0 - ($200))|0;
     $201 = ($202|0)==($199|0);
     if ($201) {
      $203 = HEAP32[$__err>>2]|0;
      $204 = $203 | 4;
      HEAP32[$__err>>2] = $204;
      break L8;
     }
     HEAP32[$5>>2] = $178;
     $205 = (($183) + 24|0);
     ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$5+0>>2]|0;
     $206 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$183,$205,$59,$__err,0)|0);
     $207 = $206;
     $208 = $183;
     $209 = (($207) - ($208))|0;
     $210 = ($206|0)==($183|0);
     if ($210) {
      $211 = HEAP32[$177>>2]|0;
      $212 = ($211|0)==(12);
      if ($212) {
       HEAP32[$177>>2] = 0;
       break L8;
      }
     }
     $213 = ($209|0)==(12);
     if ($213) {
      $214 = HEAP32[$177>>2]|0;
      $215 = ($214|0)<(12);
      if ($215) {
       $216 = (($214) + 12)|0;
       HEAP32[$177>>2] = $216;
      }
     }
     break;
    }
    case 37:  {
     $287 = HEAP32[$__e>>2]|0;
     HEAP32[$39>>2] = $287;
     ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$59);
     break;
    }
    case 99:  {
     $98 = (($this) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 1023]($98)|0);
     $103 = HEAP32[$__b>>2]|0;
     HEAP32[$16>>2] = $103;
     $104 = HEAP32[$__e>>2]|0;
     HEAP32[$17>>2] = $104;
     $105 = HEAP8[$102>>0]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     if ($107) {
      $112 = (($102) + 1|0);
      $113 = (($102) + 1|0);
      $114 = $105&255;
      $115 = $114 >>> 1;
      $117 = $113;$118 = $115;$119 = $112;
     } else {
      $108 = (($102) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($102) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $117 = $109;$118 = $111;$119 = $109;
     }
     $116 = (($117) + ($118)|0);
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$16+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$17+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$119,$116);
     $120 = HEAP32[$15>>2]|0;
     HEAP32[$__b>>2] = $120;
     break;
    }
    case 88:  {
     $246 = (($this) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 24|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (FUNCTION_TABLE_ii[$249 & 1023]($246)|0);
     $251 = HEAP32[$__b>>2]|0;
     HEAP32[$37>>2] = $251;
     $252 = HEAP32[$__e>>2]|0;
     HEAP32[$38>>2] = $252;
     $253 = HEAP8[$250>>0]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($250) + 1|0);
      $261 = (($250) + 1|0);
      $262 = $253&255;
      $263 = $262 >>> 1;
      $265 = $261;$266 = $263;$267 = $260;
     } else {
      $256 = (($250) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($250) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $265 = $257;$266 = $259;$267 = $257;
     }
     $264 = (($265) + ($266)|0);
     ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$37+0>>2]|0;
     ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$38+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$267,$264);
     $268 = HEAP32[$36>>2]|0;
     HEAP32[$__b>>2] = $268;
     break;
    }
    case 121:  {
     $269 = (($__tm) + 20|0);
     $270 = HEAP32[$__e>>2]|0;
     HEAP32[$2>>2] = $270;
     ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$2+0>>2]|0;
     $271 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$59,4)|0);
     $272 = HEAP32[$__err>>2]|0;
     $273 = $272 & 4;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = ($271|0)<(69);
      if ($275) {
       $276 = (($271) + 2000)|0;
       $__t$0$i = $276;
      } else {
       $$off$i35 = (($271) + -69)|0;
       $277 = ($$off$i35>>>0)<(31);
       $278 = (($271) + 1900)|0;
       $$$i = $277 ? $278 : $271;
       $__t$0$i = $$$i;
      }
      $279 = (($__t$0$i) + -1900)|0;
      HEAP32[$269>>2] = $279;
     }
     break;
    }
    case 89:  {
     $280 = HEAP32[$__e>>2]|0;
     HEAP32[$1>>2] = $280;
     ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$1+0>>2]|0;
     $281 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$59,4)|0);
     $282 = HEAP32[$__err>>2]|0;
     $283 = $282 & 4;
     $284 = ($283|0)==(0);
     if ($284) {
      $285 = (($__tm) + 20|0);
      $286 = (($281) + -1900)|0;
      HEAP32[$285>>2] = $286;
     }
     break;
    }
    case 101: case 100:  {
     $121 = (($__tm) + 12|0);
     $122 = HEAP32[$__e>>2]|0;
     HEAP32[$11>>2] = $122;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$11+0>>2]|0;
     $123 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$59,2)|0);
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 & 4;
     $126 = ($125|0)==(0);
     if ($126) {
      $$off$i = (($123) + -1)|0;
      $127 = ($$off$i>>>0)<(31);
      if ($127) {
       HEAP32[$121>>2] = $123;
       break L8;
      }
     }
     $128 = $124 | 4;
     HEAP32[$__err>>2] = $128;
     break;
    }
    case 70:  {
     $132 = HEAP32[$__b>>2]|0;
     HEAP32[$22>>2] = $132;
     $133 = HEAP32[$__e>>2]|0;
     HEAP32[$23>>2] = $133;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$22+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$23+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,8056,((8056 + 8|0)));
     $134 = HEAP32[$21>>2]|0;
     HEAP32[$__b>>2] = $134;
     break;
    }
    case 104: case 66: case 98:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (($this) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_ii[$87 & 1023]($84)|0);
     HEAP32[$12>>2] = $83;
     $89 = (($88) + 288|0);
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$12+0>>2]|0;
     $90 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$88,$89,$59,$__err,0)|0);
     $91 = $90;
     $92 = $88;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(288);
     if ($94) {
      $95 = (($__tm) + 16|0);
      $96 = (($93|0) / 12)&-1;
      $97 = (($96|0) % 12)&-1;
      HEAP32[$95>>2] = $97;
     }
     break;
    }
    default: {
     $288 = HEAP32[$__err>>2]|0;
     $289 = $288 | 4;
     HEAP32[$__err>>2] = $289;
    }
    }
   } while(0);
   $290 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $290;
   STACKTOP = sp;return;
  }
 }
 $61 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($61);
 __THREW__ = 0;
 invoke_viii(454,($61|0),(17096|0),(390|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$14>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $71 = 0;
  } else {
   $60 = (($58) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 1023]($58)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $58;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i3;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i20 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i9 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
     $$0$i$i10 = $103;
    } else {
     $104 = HEAP8[$96>>0]|0;
     $105 = $104&255;
     $$0$i$i10 = $105;
    }
    $106 = $$0$i$i10&255;
    $isascii1$i12 = ($106<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $107 = $sext24 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 1023]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i16;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i20) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i20) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i20)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0;
 var $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 28|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 24|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[9128>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (631);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $58 = ___cxa_find_matching_catch(-1,-1)|0;
   $59 = tempRet0;
   $60 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
   ___resumeException($58|0);
   // unreachable;
  }
 }
 $11 = HEAP32[((9128 + 4|0))>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($4) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if ($21) {
  $22 = (($16) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $28 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
   HEAP32[$__err>>2] = 0;
   $29 = ($__fmtb|0)==($__fmte|0);
   L8: do {
    if ($29) {
     label = 71;
    } else {
     $$0$ph43 = $__fmtb;$$pre44 = 0;
     L10: while(1) {
      $31 = $$pre44;
      while(1) {
       $30 = ($31|0)==(0);
       if (!($30)) {
        label = 71;
        break L8;
       }
       $32 = HEAP32[$__b>>2]|0;
       $33 = ($32|0)==(0|0);
       if ($33) {
        $204 = 1;$84 = 0;
       } else {
        $34 = (($32) + 12|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($32) + 16|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ($35|0)==($37|0);
        if ($38) {
         $39 = HEAP32[$32>>2]|0;
         $40 = (($39) + 36|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = (FUNCTION_TABLE_ii[$41 & 1023]($32)|0);
         $$0$i$i$i$i = $42;
        } else {
         $43 = HEAP32[$35>>2]|0;
         $$0$i$i$i$i = $43;
        }
        $44 = ($$0$i$i$i$i|0)==(-1);
        if ($44) {
         HEAP32[$__b>>2] = 0;
         $204 = 1;$84 = 0;
        } else {
         $204 = 0;$84 = $32;
        }
       }
       $45 = HEAP32[$__e>>2]|0;
       $46 = ($45|0)==(0|0);
       do {
        if ($46) {
         label = 23;
        } else {
         $47 = (($45) + 12|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($45) + 16|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($48|0)==($50|0);
         if ($51) {
          $52 = HEAP32[$45>>2]|0;
          $53 = (($52) + 36|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
          $$0$i$i1$i$i = $55;
         } else {
          $56 = HEAP32[$48>>2]|0;
          $$0$i$i1$i$i = $56;
         }
         $57 = ($$0$i$i1$i$i|0)==(-1);
         if ($57) {
          HEAP32[$__e>>2] = 0;
          label = 23;
          break;
         } else {
          if ($204) {
           $85 = $45;
           break;
          } else {
           label = 25;
           break L10;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        if ($204) {
         label = 25;
         break L10;
        } else {
         $85 = 0;
        }
       }
       $61 = HEAP32[$$0$ph43>>2]|0;
       $62 = HEAP32[$23>>2]|0;
       $63 = (($62) + 52|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (FUNCTION_TABLE_iiii[$64 & 1023]($23,$61,0)|0);
       $66 = ($65<<24>>24)==(37);
       if ($66) {
        label = 28;
        break;
       }
       $89 = HEAP32[$$0$ph43>>2]|0;
       $90 = HEAP32[$23>>2]|0;
       $91 = (($90) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (FUNCTION_TABLE_iiii[$92 & 1023]($23,8192,$89)|0);
       if ($93) {
        $$0$pn = $$0$ph43;
        label = 38;
        break;
       }
       $148 = (($84) + 12|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = (($84) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($149|0)==($151|0);
       if ($152) {
        $153 = HEAP32[$84>>2]|0;
        $154 = (($153) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (FUNCTION_TABLE_ii[$155 & 1023]($84)|0);
        $$0$i$i16 = $156;
       } else {
        $157 = HEAP32[$149>>2]|0;
        $$0$i$i16 = $157;
       }
       $158 = HEAP32[$23>>2]|0;
       $159 = (($158) + 28|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = (FUNCTION_TABLE_iii[$160 & 1023]($23,$$0$i$i16)|0);
       $162 = HEAP32[$$0$ph43>>2]|0;
       $163 = HEAP32[$23>>2]|0;
       $164 = (($163) + 28|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (FUNCTION_TABLE_iii[$165 & 1023]($23,$162)|0);
       $167 = ($161|0)==($166|0);
       if ($167) {
        label = 66;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $31 = 4;
      }
      L42: do {
       if ((label|0) == 28) {
        label = 0;
        $67 = (($$0$ph43) + 4|0);
        $68 = ($67|0)==($__fmte|0);
        if ($68) {
         label = 29;
         break L10;
        }
        $69 = HEAP32[$67>>2]|0;
        $70 = HEAP32[$23>>2]|0;
        $71 = (($70) + 52|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = (FUNCTION_TABLE_iiii[$72 & 1023]($23,$69,0)|0);
        if ((($73<<24>>24) == 48) | (($73<<24>>24) == 69)) {
         $74 = (($$0$ph43) + 8|0);
         $75 = ($74|0)==($__fmte|0);
         if ($75) {
          label = 32;
          break L10;
         }
         $76 = HEAP32[$74>>2]|0;
         $77 = HEAP32[$23>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (FUNCTION_TABLE_iiii[$79 & 1023]($23,$76,0)|0);
         $$1 = $74;$__cmd$0 = $80;$__opt$0 = $73;
        } else {
         $$1 = $67;$__cmd$0 = $73;$__opt$0 = 0;
        }
        $81 = HEAP32[$this>>2]|0;
        $82 = (($81) + 36|0);
        $83 = HEAP32[$82>>2]|0;
        HEAP32[$2>>2] = $84;
        HEAP32[$3>>2] = $85;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$83 & 1023]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $86 = HEAP32[$1>>2]|0;
        HEAP32[$__b>>2] = $86;
        $87 = (($$1) + 4|0);
        $$0$ph$be = $87;
       }
       else if ((label|0) == 38) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 4|0);
         $94 = ($$2|0)==($__fmte|0);
         if ($94) {
          $$2$lcssa = $__fmte;
          break;
         }
         $95 = HEAP32[$$2>>2]|0;
         $96 = HEAP32[$23>>2]|0;
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (FUNCTION_TABLE_iiii[$98 & 1023]($23,8192,$95)|0);
         if ($99) {
          $$0$pn = $$2;
          label = 38;
         } else {
          $$2$lcssa = $$2;
          break;
         }
        }
        $$pre$i$i$i6 = $84;$$pre$i3$i$i12 = $85;$113 = $85;
        while(1) {
         $100 = ($$pre$i$i$i6|0)==(0|0);
         if ($100) {
          $125 = 1;$127 = 0;
         } else {
          $101 = (($$pre$i$i$i6) + 12|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (($$pre$i$i$i6) + 16|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = ($102|0)==($104|0);
          if ($105) {
           $106 = HEAP32[$$pre$i$i$i6>>2]|0;
           $107 = (($106) + 36|0);
           $108 = HEAP32[$107>>2]|0;
           $109 = (FUNCTION_TABLE_ii[$108 & 1023]($$pre$i$i$i6)|0);
           $$0$i$i$i$i4 = $109;
          } else {
           $110 = HEAP32[$102>>2]|0;
           $$0$i$i$i$i4 = $110;
          }
          $111 = ($$0$i$i$i$i4|0)==(-1);
          if ($111) {
           HEAP32[$__b>>2] = 0;
           $125 = 1;$127 = 0;
          } else {
           $125 = 0;$127 = $$pre$i$i$i6;
          }
         }
         $112 = ($113|0)==(0|0);
         do {
          if ($112) {
           $$pre$i3$i$i1246 = $$pre$i3$i$i12;
           label = 53;
          } else {
           $114 = (($113) + 12|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = (($113) + 16|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = ($115|0)==($117|0);
           if ($118) {
            $119 = HEAP32[$113>>2]|0;
            $120 = (($119) + 36|0);
            $121 = HEAP32[$120>>2]|0;
            $122 = (FUNCTION_TABLE_ii[$121 & 1023]($113)|0);
            $$0$i$i1$i$i10 = $122;
           } else {
            $123 = HEAP32[$115>>2]|0;
            $$0$i$i1$i$i10 = $123;
           }
           $124 = ($$0$i$i1$i$i10|0)==(-1);
           if ($124) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i1246 = 0;
            label = 53;
            break;
           } else {
            $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
            $tmp$i$i15 = $125 ^ $phitmp$i4$i$i13;
            if ($tmp$i$i15) {
             $$pre$i3$i$i1245 = $$pre$i3$i$i12;$205 = $$pre$i3$i$i12;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L42;
            }
           }
          }
         } while(0);
         if ((label|0) == 53) {
          label = 0;
          if ($125) {
           $$0$ph$be = $$2$lcssa;
           break L42;
          } else {
           $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$205 = 0;
          }
         }
         $126 = (($127) + 12|0);
         $128 = HEAP32[$126>>2]|0;
         $129 = (($127) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$127>>2]|0;
          $133 = (($132) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = (FUNCTION_TABLE_ii[$134 & 1023]($127)|0);
          $$0$i$i = $135;
         } else {
          $136 = HEAP32[$128>>2]|0;
          $$0$i$i = $136;
         }
         $137 = HEAP32[$23>>2]|0;
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (FUNCTION_TABLE_iiii[$139 & 1023]($23,8192,$$0$i$i)|0);
         if (!($140)) {
          $$0$ph$be = $$2$lcssa;
          break L42;
         }
         $141 = HEAP32[$126>>2]|0;
         $142 = HEAP32[$129>>2]|0;
         $143 = ($141|0)==($142|0);
         if ($143) {
          $144 = HEAP32[$127>>2]|0;
          $145 = (($144) + 40|0);
          $146 = HEAP32[$145>>2]|0;
          (FUNCTION_TABLE_ii[$146 & 1023]($127)|0);
          $$pre$i$i$i6 = $127;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$113 = $205;
          continue;
         } else {
          $147 = (($141) + 4|0);
          HEAP32[$126>>2] = $147;
          $$pre$i$i$i6 = $127;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$113 = $205;
          continue;
         }
        }
       }
       else if ((label|0) == 66) {
        label = 0;
        $168 = HEAP32[$148>>2]|0;
        $169 = HEAP32[$150>>2]|0;
        $170 = ($168|0)==($169|0);
        if ($170) {
         $171 = HEAP32[$84>>2]|0;
         $172 = (($171) + 40|0);
         $173 = HEAP32[$172>>2]|0;
         (FUNCTION_TABLE_ii[$173 & 1023]($84)|0);
        } else {
         $174 = (($168) + 4|0);
         HEAP32[$148>>2] = $174;
        }
        $175 = (($$0$ph43) + 4|0);
        $$0$ph$be = $175;
       }
      } while(0);
      $88 = ($$0$ph$be|0)==($__fmte|0);
      if ($88) {
       label = 71;
       break L8;
      }
      $$pre44$pre = HEAP32[$__err>>2]|0;
      $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;
     }
     if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
     else if ((label|0) == 29) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
     else if ((label|0) == 32) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
    }
   } while(0);
   if ((label|0) == 71) {
    $$pre = HEAP32[$__b>>2]|0;
    $$pre$i$i$i21 = $$pre;
   }
   $176 = ($$pre$i$i$i21|0)==(0|0);
   if ($176) {
    $203 = 0;$206 = 1;
   } else {
    $177 = (($$pre$i$i$i21) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($$pre$i$i$i21) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$$pre$i$i$i21>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (FUNCTION_TABLE_ii[$184 & 1023]($$pre$i$i$i21)|0);
     $$0$i$i$i$i19 = $185;
    } else {
     $186 = HEAP32[$178>>2]|0;
     $$0$i$i$i$i19 = $186;
    }
    $187 = ($$0$i$i$i$i19|0)==(-1);
    if ($187) {
     HEAP32[$__b>>2] = 0;
     $203 = 0;$206 = 1;
    } else {
     $203 = $$pre$i$i$i21;$206 = 0;
    }
   }
   $188 = HEAP32[$__e>>2]|0;
   $189 = ($188|0)==(0|0);
   do {
    if ($189) {
     label = 84;
    } else {
     $190 = (($188) + 12|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($188) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($191|0)==($193|0);
     if ($194) {
      $195 = HEAP32[$188>>2]|0;
      $196 = (($195) + 36|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (FUNCTION_TABLE_ii[$197 & 1023]($188)|0);
      $$0$i$i1$i$i25 = $198;
     } else {
      $199 = HEAP32[$191>>2]|0;
      $$0$i$i1$i$i25 = $199;
     }
     $200 = ($$0$i$i1$i$i25|0)==(-1);
     if ($200) {
      HEAP32[$__e>>2] = 0;
      label = 84;
      break;
     }
     if ($206) {
      HEAP32[$agg$result>>2] = $203;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 84) {
    if (!($206)) {
     HEAP32[$agg$result>>2] = $203;
     STACKTOP = sp;return;
    }
   }
   $201 = HEAP32[$__err>>2]|0;
   $202 = $201 | 2;
   HEAP32[$__err>>2] = $202;
   HEAP32[$agg$result>>2] = $203;
   STACKTOP = sp;return;
  }
 }
 $25 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($25);
 __THREW__ = 0;
 invoke_viii(454,($25|0),(17096|0),(390|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $58 = ___cxa_find_matching_catch(-1,-1)|0;
  $59 = tempRet0;
  $60 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
  ___resumeException($58|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,8192,((8192 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[9128>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (631);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
   ___resumeException($42|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((9128 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_ii[$30 & 1023]($28)|0);
   HEAP32[$0>>2] = $27;
   $32 = (($31) + 168|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$31,$32,$21,$__err,0)|0);
   $34 = $33;
   $35 = $31;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(168);
   if (!($37)) {
    $41 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $41;
    STACKTOP = sp;return;
   }
   $38 = (($__tm) + 24|0);
   $39 = (($36|0) / 12)&-1;
   $40 = (($39|0) % 7)&-1;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(454,($23|0),(17096|0),(390|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $44 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  ___resumeException($42|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[9128>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (631);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $43 = ___cxa_find_matching_catch(-1,-1)|0;
   $44 = tempRet0;
   $45 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
   ___resumeException($43|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((9128 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
   HEAP32[$0>>2] = $27;
   $33 = (($32) + 288|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $34 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$32,$33,$21,$__err,0)|0);
   $35 = $34;
   $36 = $32;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)<(288);
   if (!($38)) {
    $42 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $42;
    STACKTOP = sp;return;
   }
   $39 = (($__tm) + 16|0);
   $40 = (($37|0) / 12)&-1;
   $41 = (($40|0) % 12)&-1;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(454,($23|0),(17096|0),(390|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $43 = ___cxa_find_matching_catch(-1,-1)|0;
  $44 = tempRet0;
  $45 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
  ___resumeException($43|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[9128>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (631);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $39 = ___cxa_find_matching_catch(-1,-1)|0;
   $40 = tempRet0;
   $41 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
   ___resumeException($39|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((9128 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = (($__tm) + 20|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $28;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$21,4)|0);
   $30 = HEAP32[$__err>>2]|0;
   $31 = $30 & 4;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $38 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $38;
    STACKTOP = sp;return;
   }
   $33 = ($29|0)<(69);
   if ($33) {
    $34 = (($29) + 2000)|0;
    $__t$0$i = $34;
   } else {
    $$off$i = (($29) + -69)|0;
    $35 = ($$off$i>>>0)<(31);
    $36 = (($29) + 1900)|0;
    $$$i = $35 ? $36 : $29;
    $__t$0$i = $$$i;
   }
   $37 = (($__t$0$i) + -1900)|0;
   HEAP32[$27>>2] = $37;
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(454,($23|0),(17096|0),(390|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $41 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
  ___resumeException($39|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy30 = sp + 284|0;
 $$byval_copy29 = sp + 276|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 16|0;
 $$byval_copy26 = sp + 140|0;
 $$byval_copy25 = sp + 144|0;
 $$byval_copy24 = sp + 136|0;
 $$byval_copy23 = sp + 64|0;
 $$byval_copy22 = sp + 36|0;
 $$byval_copy21 = sp + 40|0;
 $$byval_copy20 = sp + 44|0;
 $$byval_copy19 = sp + 48|0;
 $$byval_copy18 = sp + 52|0;
 $$byval_copy17 = sp + 56|0;
 $$byval_copy16 = sp + 60|0;
 $$byval_copy15 = sp + 32|0;
 $$byval_copy14 = sp + 68|0;
 $$byval_copy13 = sp + 72|0;
 $$byval_copy12 = sp + 76|0;
 $$byval_copy11 = sp + 80|0;
 $$byval_copy10 = sp + 84|0;
 $$byval_copy9 = sp + 88|0;
 $$byval_copy8 = sp + 92|0;
 $$byval_copy7 = sp + 96|0;
 $$byval_copy6 = sp + 100|0;
 $$byval_copy5 = sp + 104|0;
 $$byval_copy4 = sp + 108|0;
 $$byval_copy3 = sp + 112|0;
 $$byval_copy2 = sp + 116|0;
 $$byval_copy1 = sp + 120|0;
 $$byval_copy = sp + 248|0;
 $1 = sp + 256|0;
 $2 = sp + 264|0;
 $3 = sp + 272|0;
 $4 = sp + 280|0;
 $5 = sp + 288|0;
 $6 = sp + 148|0;
 $7 = sp + 152|0;
 $8 = sp + 156|0;
 $9 = sp + 160|0;
 $10 = sp + 164|0;
 $11 = sp + 168|0;
 $12 = sp + 172|0;
 $13 = sp + 176|0;
 $__p$i$i$i$i = sp;
 $14 = sp + 184|0;
 $15 = sp + 188|0;
 $16 = sp + 192|0;
 $17 = sp + 196|0;
 $18 = sp + 200|0;
 $19 = sp + 204|0;
 $20 = sp + 208|0;
 $21 = sp + 212|0;
 $22 = sp + 216|0;
 $23 = sp + 220|0;
 $24 = sp + 224|0;
 $25 = sp + 228|0;
 $26 = sp + 232|0;
 $27 = sp + 236|0;
 $28 = sp + 28|0;
 $29 = sp + 20|0;
 $30 = sp + 180|0;
 $31 = sp + 24|0;
 $32 = sp + 240|0;
 $33 = sp + 128|0;
 $34 = sp + 12|0;
 $35 = sp + 124|0;
 $36 = sp + 244|0;
 $37 = sp + 252|0;
 $38 = sp + 132|0;
 $39 = sp + 260|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = HEAP32[$14>>2]|0;
 $41 = HEAP32[9128>>2]|0;
 $42 = ($41|0)==(-1);
 if (!($42)) {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $43 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$43>>2] = (631);
  $44 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$44>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 }
 $47 = HEAP32[((9128 + 4|0))>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = (($40) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($40) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = $55 >> 2;
 $57 = ($56>>>0)>($48>>>0);
 if ($57) {
  $58 = (($52) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $64 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
   $65 = $__fmt << 24 >> 24;
   L8: do {
    switch ($65|0) {
    case 68:  {
     $129 = HEAP32[$__b>>2]|0;
     HEAP32[$19>>2] = $129;
     $130 = HEAP32[$__e>>2]|0;
     HEAP32[$20>>2] = $130;
     ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$19+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$20+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,8224,((8224 + 32|0)));
     $131 = HEAP32[$18>>2]|0;
     HEAP32[$__b>>2] = $131;
     break;
    }
    case 65: case 97:  {
     $69 = HEAP32[$__e>>2]|0;
     $70 = (($this) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 1023]($70)|0);
     HEAP32[$13>>2] = $69;
     $74 = (($73) + 168|0);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$13+0>>2]|0;
     $75 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$73,$74,$59,$__err,0)|0);
     $76 = $75;
     $77 = $73;
     $78 = (($76) - ($77))|0;
     $79 = ($78|0)<(168);
     if ($79) {
      $80 = (($__tm) + 24|0);
      $81 = (($78|0) / 12)&-1;
      $82 = (($81|0) % 7)&-1;
      HEAP32[$80>>2] = $82;
     }
     break;
    }
    case 109:  {
     $159 = HEAP32[$__e>>2]|0;
     HEAP32[$7>>2] = $159;
     ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$7+0>>2]|0;
     $160 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$59,2)|0);
     $161 = HEAP32[$__err>>2]|0;
     $162 = $161 & 4;
     $163 = ($162|0)==(0);
     $164 = ($160|0)<(13);
     $or$cond$i18 = $163 & $164;
     if ($or$cond$i18) {
      $165 = (($__tm) + 16|0);
      $166 = (($160) + -1)|0;
      HEAP32[$165>>2] = $166;
      break L8;
     } else {
      $167 = $161 | 4;
      HEAP32[$__err>>2] = $167;
      break L8;
     }
     break;
    }
    case 70:  {
     $132 = HEAP32[$__b>>2]|0;
     HEAP32[$22>>2] = $132;
     $133 = HEAP32[$__e>>2]|0;
     HEAP32[$23>>2] = $133;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$22+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$23+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,8256,((8256 + 32|0)));
     $134 = HEAP32[$21>>2]|0;
     HEAP32[$__b>>2] = $134;
     break;
    }
    case 72:  {
     $135 = HEAP32[$__e>>2]|0;
     HEAP32[$10>>2] = $135;
     ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$10+0>>2]|0;
     $136 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$59,2)|0);
     $137 = HEAP32[$__err>>2]|0;
     $138 = $137 & 4;
     $139 = ($138|0)==(0);
     $140 = ($136|0)<(24);
     $or$cond$i = $139 & $140;
     if ($or$cond$i) {
      $141 = (($__tm) + 8|0);
      HEAP32[$141>>2] = $136;
      break L8;
     } else {
      $142 = $137 | 4;
      HEAP32[$__err>>2] = $142;
      break L8;
     }
     break;
    }
    case 120:  {
     $241 = HEAP32[$this>>2]|0;
     $242 = (($241) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$__b>>2]|0;
     HEAP32[$34>>2] = $244;
     $245 = HEAP32[$__e>>2]|0;
     HEAP32[$35>>2] = $245;
     ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$34+0>>2]|0;
     ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$35+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$243 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 88:  {
     $246 = (($this) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 24|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (FUNCTION_TABLE_ii[$249 & 1023]($246)|0);
     $251 = HEAP32[$__b>>2]|0;
     HEAP32[$37>>2] = $251;
     $252 = HEAP32[$__e>>2]|0;
     HEAP32[$38>>2] = $252;
     $253 = HEAP8[$250>>0]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($250) + 4|0);
      $261 = (($250) + 4|0);
      $262 = $253&255;
      $263 = $262 >>> 1;
      $265 = $261;$266 = $263;$267 = $260;
     } else {
      $256 = (($250) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($250) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $265 = $257;$266 = $259;$267 = $257;
     }
     $264 = (($265) + ($266<<2)|0);
     ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$37+0>>2]|0;
     ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$38+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$267,$264);
     $268 = HEAP32[$36>>2]|0;
     HEAP32[$__b>>2] = $268;
     break;
    }
    case 121:  {
     $269 = (($__tm) + 20|0);
     $270 = HEAP32[$__e>>2]|0;
     HEAP32[$2>>2] = $270;
     ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$2+0>>2]|0;
     $271 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$59,4)|0);
     $272 = HEAP32[$__err>>2]|0;
     $273 = $272 & 4;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = ($271|0)<(69);
      if ($275) {
       $276 = (($271) + 2000)|0;
       $__t$0$i = $276;
      } else {
       $$off$i35 = (($271) + -69)|0;
       $277 = ($$off$i35>>>0)<(31);
       $278 = (($271) + 1900)|0;
       $$$i = $277 ? $278 : $271;
       $__t$0$i = $$$i;
      }
      $279 = (($__t$0$i) + -1900)|0;
      HEAP32[$269>>2] = $279;
     }
     break;
    }
    case 89:  {
     $280 = HEAP32[$__e>>2]|0;
     HEAP32[$1>>2] = $280;
     ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$1+0>>2]|0;
     $281 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$59,4)|0);
     $282 = HEAP32[$__err>>2]|0;
     $283 = $282 & 4;
     $284 = ($283|0)==(0);
     if ($284) {
      $285 = (($__tm) + 20|0);
      $286 = (($281) + -1900)|0;
      HEAP32[$285>>2] = $286;
     }
     break;
    }
    case 37:  {
     $287 = HEAP32[$__e>>2]|0;
     HEAP32[$39>>2] = $287;
     ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$59);
     break;
    }
    case 77:  {
     $168 = HEAP32[$__e>>2]|0;
     HEAP32[$6>>2] = $168;
     ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$6+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$59,2)|0);
     $170 = HEAP32[$__err>>2]|0;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     $173 = ($169|0)<(60);
     $or$cond$i21 = $172 & $173;
     if ($or$cond$i21) {
      $174 = (($__tm) + 4|0);
      HEAP32[$174>>2] = $169;
      break L8;
     } else {
      $175 = $170 | 4;
      HEAP32[$__err>>2] = $175;
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $176 = HEAP32[$__e>>2]|0;
     HEAP32[$24>>2] = $176;
     ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$24+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy14,$__err,$59);
     break;
    }
    case 112:  {
     $177 = (($__tm) + 8|0);
     $178 = HEAP32[$__e>>2]|0;
     $179 = (($this) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (FUNCTION_TABLE_ii[$182 & 1023]($179)|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184 & 1;
     $186 = ($185<<24>>24)==(0);
     if ($186) {
      $189 = $184&255;
      $190 = $189 >>> 1;
      $202 = $190;
     } else {
      $187 = (($183) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $202 = $188;
     }
     $191 = (($183) + 12|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192 & 1;
     $194 = ($193<<24>>24)==(0);
     if ($194) {
      $197 = $192&255;
      $198 = $197 >>> 1;
      $200 = $198;
     } else {
      $195 = (($183) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $200 = $196;
     }
     $199 = (0 - ($200))|0;
     $201 = ($202|0)==($199|0);
     if ($201) {
      $203 = HEAP32[$__err>>2]|0;
      $204 = $203 | 4;
      HEAP32[$__err>>2] = $204;
      break L8;
     }
     HEAP32[$5>>2] = $178;
     $205 = (($183) + 24|0);
     ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$5+0>>2]|0;
     $206 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$183,$205,$59,$__err,0)|0);
     $207 = $206;
     $208 = $183;
     $209 = (($207) - ($208))|0;
     $210 = ($206|0)==($183|0);
     if ($210) {
      $211 = HEAP32[$177>>2]|0;
      $212 = ($211|0)==(12);
      if ($212) {
       HEAP32[$177>>2] = 0;
       break L8;
      }
     }
     $213 = ($209|0)==(12);
     if ($213) {
      $214 = HEAP32[$177>>2]|0;
      $215 = ($214|0)<(12);
      if ($215) {
       $216 = (($214) + 12)|0;
       HEAP32[$177>>2] = $216;
      }
     }
     break;
    }
    case 114:  {
     $217 = HEAP32[$__b>>2]|0;
     HEAP32[$26>>2] = $217;
     $218 = HEAP32[$__e>>2]|0;
     HEAP32[$27>>2] = $218;
     ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$26+0>>2]|0;
     ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$27+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,8288,((8288 + 44|0)));
     $219 = HEAP32[$25>>2]|0;
     HEAP32[$__b>>2] = $219;
     break;
    }
    case 82:  {
     $220 = HEAP32[$__b>>2]|0;
     HEAP32[$29>>2] = $220;
     $221 = HEAP32[$__e>>2]|0;
     HEAP32[$30>>2] = $221;
     ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$29+0>>2]|0;
     ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$30+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,8336,((8336 + 20|0)));
     $222 = HEAP32[$28>>2]|0;
     HEAP32[$__b>>2] = $222;
     break;
    }
    case 83:  {
     $223 = HEAP32[$__e>>2]|0;
     HEAP32[$4>>2] = $223;
     ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$4+0>>2]|0;
     $224 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$59,2)|0);
     $225 = HEAP32[$__err>>2]|0;
     $226 = $225 & 4;
     $227 = ($226|0)==(0);
     $228 = ($224|0)<(61);
     $or$cond$i26 = $227 & $228;
     if ($or$cond$i26) {
      HEAP32[$__tm>>2] = $224;
      break L8;
     } else {
      $229 = $225 | 4;
      HEAP32[$__err>>2] = $229;
      break L8;
     }
     break;
    }
    case 84:  {
     $230 = HEAP32[$__b>>2]|0;
     HEAP32[$32>>2] = $230;
     $231 = HEAP32[$__e>>2]|0;
     HEAP32[$33>>2] = $231;
     ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$32+0>>2]|0;
     ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$33+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,8360,((8360 + 32|0)));
     $232 = HEAP32[$31>>2]|0;
     HEAP32[$__b>>2] = $232;
     break;
    }
    case 119:  {
     $233 = HEAP32[$__e>>2]|0;
     HEAP32[$3>>2] = $233;
     ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$3+0>>2]|0;
     $234 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$59,1)|0);
     $235 = HEAP32[$__err>>2]|0;
     $236 = $235 & 4;
     $237 = ($236|0)==(0);
     $238 = ($234|0)<(7);
     $or$cond$i29 = $237 & $238;
     if ($or$cond$i29) {
      $239 = (($__tm) + 24|0);
      HEAP32[$239>>2] = $234;
      break L8;
     } else {
      $240 = $235 | 4;
      HEAP32[$__err>>2] = $240;
      break L8;
     }
     break;
    }
    case 104: case 66: case 98:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (($this) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_ii[$87 & 1023]($84)|0);
     HEAP32[$12>>2] = $83;
     $89 = (($88) + 288|0);
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$12+0>>2]|0;
     $90 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$88,$89,$59,$__err,0)|0);
     $91 = $90;
     $92 = $88;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(288);
     if ($94) {
      $95 = (($__tm) + 16|0);
      $96 = (($93|0) / 12)&-1;
      $97 = (($96|0) % 12)&-1;
      HEAP32[$95>>2] = $97;
     }
     break;
    }
    case 99:  {
     $98 = (($this) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 1023]($98)|0);
     $103 = HEAP32[$__b>>2]|0;
     HEAP32[$16>>2] = $103;
     $104 = HEAP32[$__e>>2]|0;
     HEAP32[$17>>2] = $104;
     $105 = HEAP8[$102>>0]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     if ($107) {
      $112 = (($102) + 4|0);
      $113 = (($102) + 4|0);
      $114 = $105&255;
      $115 = $114 >>> 1;
      $117 = $113;$118 = $115;$119 = $112;
     } else {
      $108 = (($102) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($102) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $117 = $109;$118 = $111;$119 = $109;
     }
     $116 = (($117) + ($118<<2)|0);
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$16+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$17+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$119,$116);
     $120 = HEAP32[$15>>2]|0;
     HEAP32[$__b>>2] = $120;
     break;
    }
    case 73:  {
     $143 = (($__tm) + 8|0);
     $144 = HEAP32[$__e>>2]|0;
     HEAP32[$9>>2] = $144;
     ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$9+0>>2]|0;
     $145 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$59,2)|0);
     $146 = HEAP32[$__err>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)==(0);
     if ($148) {
      $$off$i12 = (($145) + -1)|0;
      $149 = ($$off$i12>>>0)<(12);
      if ($149) {
       HEAP32[$143>>2] = $145;
       break L8;
      }
     }
     $150 = $146 | 4;
     HEAP32[$__err>>2] = $150;
     break;
    }
    case 106:  {
     $151 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $151;
     ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$8+0>>2]|0;
     $152 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$59,3)|0);
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 & 4;
     $155 = ($154|0)==(0);
     $156 = ($152|0)<(366);
     $or$cond$i15 = $155 & $156;
     if ($or$cond$i15) {
      $157 = (($__tm) + 28|0);
      HEAP32[$157>>2] = $152;
      break L8;
     } else {
      $158 = $153 | 4;
      HEAP32[$__err>>2] = $158;
      break L8;
     }
     break;
    }
    case 101: case 100:  {
     $121 = (($__tm) + 12|0);
     $122 = HEAP32[$__e>>2]|0;
     HEAP32[$11>>2] = $122;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$11+0>>2]|0;
     $123 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$59,2)|0);
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 & 4;
     $126 = ($125|0)==(0);
     if ($126) {
      $$off$i = (($123) + -1)|0;
      $127 = ($$off$i>>>0)<(31);
      if ($127) {
       HEAP32[$121>>2] = $123;
       break L8;
      }
     }
     $128 = $124 | 4;
     HEAP32[$__err>>2] = $128;
     break;
    }
    default: {
     $288 = HEAP32[$__err>>2]|0;
     $289 = $288 | 4;
     HEAP32[$__err>>2] = $289;
    }
    }
   } while(0);
   $290 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $290;
   STACKTOP = sp;return;
  }
 }
 $61 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($61);
 __THREW__ = 0;
 invoke_viii(454,($61|0),(17096|0),(390|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$14>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $84 = 1;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
     $$0$i$i$i$i2 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i2 = $71;
    }
    $72 = ($$0$i$i$i$i2|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
     $$0$i$i1$i$i8 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i8 = $84;
    }
    $85 = ($$0$i$i1$i$i8|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i25 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
   $$0$i$i14 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i14 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i14)|0);
  if (!($103)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i14,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 1023]($89)|0);
    $$0$i$i$i$i17 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i17 = $131;
   }
   $132 = ($$0$i$i$i$i17|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i25) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i25) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i23 = $143;
   }
   $144 = ($$0$i$i1$i$i23|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((9032|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(659,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((9032|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(659,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp + 100|0;
 $__nar = sp;
 HEAP8[$fmt$i>>0] = 37;
 $2 = (($fmt$i) + 1|0);
 HEAP8[$2>>0] = $__fmt;
 $3 = (($fmt$i) + 2|0);
 HEAP8[$3>>0] = $__mod;
 $4 = (($fmt$i) + 3|0);
 HEAP8[$4>>0] = 0;
 $5 = ($__mod<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2>>0] = $__mod;
  HEAP8[$3>>0] = $__fmt;
 }
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($7|0))|0);
 $9 = (($__nar) + ($8)|0);
 $10 = HEAP32[$__s>>2]|0;
 $11 = ($8|0)==(0);
 if ($11) {
  $30 = $10;
  HEAP32[$agg$result>>2] = $30;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$14 = $10;$27 = $10;
 }
 while(1) {
  $12 = HEAP8[$$01$i$i>>0]|0;
  $13 = ($14|0)==(0|0);
  do {
   if ($13) {
    $31 = $27;$32 = 0;
   } else {
    $15 = (($14) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $21 = HEAP32[$14>>2]|0;
     $22 = (($21) + 52|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $12&255;
     $25 = (FUNCTION_TABLE_iii[$23 & 1023]($14,$24)|0);
     $26 = ($25|0)==(-1);
     $$$i = $26 ? 0 : $27;
     $$7$i = $26 ? 0 : $14;
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $20 = (($16) + 1|0);
     HEAP32[$15>>2] = $20;
     HEAP8[$16>>0] = $12;
     $31 = $27;$32 = $14;
     break;
    }
   }
  } while(0);
  $28 = (($$01$i$i) + 1|0);
  $29 = ($28|0)==($9|0);
  if ($29) {
   $30 = $31;
   break;
  } else {
   $$01$i$i = $28;$14 = $32;$27 = $31;
  }
 }
 HEAP32[$agg$result>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((9032|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(659,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((9032|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(659,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$21 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $25 = $21;$26 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 1023]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $21;
   $$7$i = $20 ? 0 : $9;
   $25 = $$$i;$26 = $$7$i;
  }
  $22 = (($$01$i$i) + 4|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$21 = $25;$9 = $26;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $fmt$i = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $fmt$i = sp + 112|0;
 $__nar = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 HEAP8[$fmt$i>>0] = 37;
 $0 = (($fmt$i) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt$i) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt$i) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$this>>2]|0;
 (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($4|0))|0);
 $5 = $mb;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $9 = HEAP32[$__we>>2]|0;
 $10 = $9;
 $11 = $__wb;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 2;
 $14 = HEAP32[$this>>2]|0;
 $15 = (_uselocale(($14|0))|0);
 __THREW__ = 0;
 $16 = (invoke_iiiii(660,($__wb|0),($__nb|0),($13|0),($mb|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $24 = ___cxa_find_matching_catch(-1,-1)|0;
  $25 = tempRet0;
  $26 = ($15|0)==(0|0);
  if ($26) {
   ___resumeException($24|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(648,($15|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $29 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  } else {
   ___resumeException($24|0);
   // unreachable;
  }
 }
 $19 = ($15|0)==(0|0);
 if (!($19)) {
  __THREW__ = 0;
  (invoke_ii(648,($15|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  }
 }
 $31 = ($16|0)==(-1);
 if ($31) {
  __ZNSt3__121__throw_runtime_errorEPKc(10016);
  // unreachable;
 } else {
  $32 = (($__wb) + ($16<<2)|0);
  HEAP32[$__we>>2] = $32;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$117 = 0, $$118 = 0, $$1215 = 0, $$1216 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$012 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 156|0;
 $__wb = sp + 24|0;
 $__wn = sp + 20|0;
 $__loc = sp + 36|0;
 $__neg = sp + 256|0;
 $0 = sp + 32|0;
 $__atoms = sp + 144|0;
 $__nbuf = sp + 44|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 661;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(456,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $51 = ___cxa_find_matching_catch(-1,-1)|0;
   $52 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$117 = $51;$$1215 = $52;$131 = 661;$132 = $__wbuf;
  } else {
   $5 = HEAP32[$__loc>>2]|0;
   $6 = HEAP32[9136>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    label = 4;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 9136;
    $8 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$8>>2] = (631);
    $9 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$9>>2] = 0;
    __THREW__ = 0;
    invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L5: do {
    if ((label|0) == 4) {
     $12 = HEAP32[((9136 + 4|0))>>2]|0;
     $13 = (($12) + -1)|0;
     $14 = (($5) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = ($21>>>0)>($13>>>0);
     if ($22) {
      $23 = (($17) + ($13<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       HEAP8[$__neg>>0] = 0;
       $29 = HEAP32[$__e>>2]|0;
       HEAP32[$0>>2] = $29;
       $30 = (($__iob) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       $32 = (invoke_iiiiiiiiiiii(662,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 15;
        break;
       }
       L11: do {
        if ($32) {
         $35 = HEAP32[$24>>2]|0;
         $36 = (($35) + 32|0);
         $37 = HEAP32[$36>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($37|0,($24|0),(8752|0),(((8752 + 10|0))|0),($__atoms|0))|0);
         $38 = __THREW__; __THREW__ = 0;
         $39 = $38&1;
         if ($39) {
          label = 15;
          break L5;
         }
         $40 = HEAP32[$__wn>>2]|0;
         $41 = HEAP32[$__wb>>2]|0;
         $42 = $40;
         $43 = $41;
         $44 = (($42) - ($43))|0;
         $45 = ($44|0)>(98);
         if ($45) {
          $46 = (($44) + 2)|0;
          $47 = (_malloc($46)|0);
          $48 = ($47|0)==(0|0);
          if ($48) {
           __THREW__ = 0;
           invoke_v(635);
           $49 = __THREW__; __THREW__ = 0;
           $50 = $49&1;
           if ($50) {
            $137 = 0;
            label = 16;
           } else {
            $88 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $88 = $47;$__nc$0 = $47;
           label = 19;
          }
         } else {
          $88 = 0;$__nc$0 = $__nbuf;
          label = 19;
         }
         do {
          if ((label|0) == 19) {
           $59 = HEAP8[$__neg>>0]|0;
           $60 = ($59<<24>>24)==(0);
           if ($60) {
            $__nc$1 = $__nc$0;
           } else {
            $61 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0>>0] = 45;
            $__nc$1 = $61;
           }
           $62 = ($41>>>0)<($40>>>0);
           if ($62) {
            $63 = (($__atoms) + 10|0);
            $64 = $__atoms;
            $__nc$211 = $__nc$1;$__w$012 = $41;
            while(1) {
             $65 = HEAP8[$__w$012>>0]|0;
             $$01$i = $__atoms;
             while(1) {
              $68 = HEAP8[$$01$i>>0]|0;
              $69 = ($68<<24>>24)==($65<<24>>24);
              $67 = (($$01$i) + 1|0);
              if ($69) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $66 = ($67|0)==($63|0);
              if ($66) {
               $$0$lcssa$i = $63;
               break;
              } else {
               $$01$i = $67;
              }
             }
             $70 = $$0$lcssa$i;
             $71 = (($70) - ($64))|0;
             $72 = (8752 + ($71)|0);
             $73 = HEAP8[$72>>0]|0;
             HEAP8[$__nc$211>>0] = $73;
             $74 = (($__w$012) + 1|0);
             $75 = (($__nc$211) + 1|0);
             $76 = HEAP32[$__wn>>2]|0;
             $77 = ($74>>>0)<($76>>>0);
             if ($77) {
              $__nc$211 = $75;$__w$012 = $74;
             } else {
              $__nc$2$lcssa = $75;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa>>0] = 0;
           HEAP32[$vararg_buffer>>2] = $__v;
           $78 = (_sscanf($__nbuf,8768,$vararg_buffer)|0);
           $79 = ($78|0)==(1);
           if ($79) {
            $87 = ($88|0)==(0|0);
            if ($87) {
             break L11;
            }
            _free($88);
            break L11;
           }
           $80 = (___cxa_allocate_exception(8)|0);
           __THREW__ = 0;
           invoke_vii(623,($80|0),(8776|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            $85 = ___cxa_find_matching_catch(-1,-1)|0;
            $86 = tempRet0;
            ___cxa_free_exception(($80|0));
            $58 = $88;$eh$lpad$body$index2Z2D = $86;$eh$lpad$body$indexZ2D = $85;
            break;
           }
           __THREW__ = 0;
           invoke_viii(454,($80|0),(5576|0),(116|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $137 = $88;
            label = 16;
           } else {
            // unreachable;
           }
          }
         } while(0);
         if ((label|0) == 16) {
          $55 = ___cxa_find_matching_catch(-1,-1)|0;
          $56 = tempRet0;
          $58 = $137;$eh$lpad$body$index2Z2D = $56;$eh$lpad$body$indexZ2D = $55;
         }
         $57 = ($58|0)==(0|0);
         if ($57) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L5;
         }
         _free($58);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L5;
        }
       } while(0);
       $89 = HEAP32[$__b>>2]|0;
       $90 = ($89|0)==(0|0);
       if ($90) {
        $104 = 0;
       } else {
        $91 = (($89) + 12|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($89) + 16|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ($92|0)==($94|0);
        if ($95) {
         $96 = HEAP32[$89>>2]|0;
         $97 = (($96) + 36|0);
         $98 = HEAP32[$97>>2]|0;
         __THREW__ = 0;
         $99 = (invoke_ii($98|0,($89|0))|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          label = 15;
          break;
         }
         $102 = ($99|0)==(-1);
         if ($102) {
          HEAP32[$__b>>2] = 0;
          $104 = 0;
         } else {
          $104 = $89;
         }
        } else {
         $104 = $89;
        }
       }
       $103 = ($104|0)==(0|0);
       $105 = HEAP32[$__e>>2]|0;
       $106 = ($105|0)==(0|0);
       do {
        if ($106) {
         label = 45;
        } else {
         $107 = (($105) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($105) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if (!($111)) {
          if ($103) {
           break;
          } else {
           label = 47;
           break;
          }
         }
         $112 = HEAP32[$105>>2]|0;
         $113 = (($112) + 36|0);
         $114 = HEAP32[$113>>2]|0;
         __THREW__ = 0;
         $115 = (invoke_ii($114|0,($105|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 15;
          break L5;
         }
         $118 = ($115|0)==(-1);
         if ($118) {
          HEAP32[$__e>>2] = 0;
          label = 45;
          break;
         } else {
          if ($103) {
           break;
          } else {
           label = 47;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 45) {
        if ($103) {
         label = 47;
        }
       }
       if ((label|0) == 47) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
       }
       HEAP32[$agg$result>>2] = $104;
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       $122 = HEAP32[$__wb>>2]|0;
       HEAP32[$__wb>>2] = 0;
       $123 = ($122|0)==(0|0);
       if ($123) {
        STACKTOP = sp;return;
       }
       $124 = HEAP32[$1>>2]|0;
       __THREW__ = 0;
       invoke_vi($124|0,($122|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if ($126) {
        $127 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $128 = tempRet0;
        ___clang_call_terminate($127);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
     $26 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($26);
     __THREW__ = 0;
     invoke_viii(454,($26|0),(17096|0),(390|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 15;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $53 = ___cxa_find_matching_catch(-1,-1)|0;
    $54 = tempRet0;
    $$0 = $53;$$01 = $54;
   }
   $129 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $130 = ($$pre|0)==(0|0);
   if ($130) {
    $$118 = $$0;$$1216 = $$01;
    ___resumeException($$118|0);
    // unreachable;
   } else {
    $$pre20 = HEAP32[$1>>2]|0;
    $$117 = $$0;$$1215 = $$01;$131 = $$pre20;$132 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($131|0,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if ($134) {
  $135 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $136 = tempRet0;
  ___clang_call_terminate($135);
  // unreachable;
 } else {
  $$118 = $$117;$$1216 = $$1215;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0;
 var $$462 = 0, $$463 = 0, $$464 = 0, $$465 = 0, $$467 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$ph$ph = 0, $$ph$ph235$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert576 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i101 = 0, $$pre$i$i$i156 = 0, $$pre$i$i$i176 = 0;
 var $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i71 = 0, $$pre$i143 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$pre453 = 0, $$pre574 = 0, $$pre575 = 0, $$pre577 = 0;
 var $$sum = 0, $$sum454 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free206 = 0, $free206$ph$ph = 0, $free206$ph$ph234$ph$ph$ph$ph = 0, $free208 = 0, $isascii1$i = 0, $isascii1$i136 = 0;
 var $isascii1$i149 = 0, $isascii1$i48 = 0, $isascii1$i62 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $sext = 0, $sext230 = 0, $sext231 = 0, $sext232 = 0, $switch = 0, $tmp$i$i182 = 0, $tmp$i$i41 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $__gbuf = sp;
 $__pat = sp + 428|0;
 $__dp = sp + 472|0;
 $__ts = sp + 473|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__psn = sp + 416|0;
 $__nsn = sp + 436|0;
 $__spaces = sp + 400|0;
 $__fd = sp + 432|0;
 $__et = sp + 412|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(663,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $67 = ___cxa_find_matching_catch(-1,-1)|0;
   $68 = tempRet0;
   $70 = $__gbuf;$free206 = 661;$lpad$phi$index = $67;$lpad$phi$index7 = $68;
  } else {
   $2 = (($__gbuf) + 400|0);
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = (($__ct) + 8|0);
   $5 = (($__nsn) + 1|0);
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 1|0);
   $9 = (($__psn) + 4|0);
   $10 = (($__psn) + 8|0);
   $11 = $__flags & 512;
   $12 = ($11|0)!=(0);
   $13 = (($__sym) + 1|0);
   $14 = (($__sym) + 8|0);
   $15 = (($__sym) + 4|0);
   $16 = (($__spaces) + 1|0);
   $17 = (($__spaces) + 8|0);
   $18 = (($__spaces) + 4|0);
   $19 = (($__pat) + 3|0);
   $20 = (($__wb) + 4|0);
   $21 = (($__grp) + 4|0);
   $932 = $2;$933 = $__gbuf;$934 = $__gbuf;$935 = $__we;$__p$0353 = 0;$__trailing_sign$0355 = 0;$free202349 = 661;
   L3: while(1) {
    $22 = HEAP32[$__b>>2]|0;
    $23 = ($22|0)==(0|0);
    do {
     if ($23) {
      $37 = 0;
     } else {
      $24 = (($22) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($22) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = HEAP32[$22>>2]|0;
       $30 = (($29) + 36|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       $32 = (invoke_ii($31|0,($22|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       }
       $35 = ($32|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $37 = 0;
        break;
       } else {
        $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
        $37 = $$pre$i$i$i19;
        break;
       }
      } else {
       $37 = $22;
      }
     }
    } while(0);
    $36 = ($37|0)==(0|0);
    $38 = HEAP32[$__e>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 15;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($36) {
        $936 = $38;
        break;
       } else {
        $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L3;
       }
      }
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($36) {
        $936 = $38;
        break;
       } else {
        $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($36) {
      $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 301;
      break;
     } else {
      $936 = 0;
     }
    }
    $52 = (($__pat) + ($__p$0353)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    L25: do {
     switch ($54|0) {
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L3;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       } else {
        $$0$i$i29 = $84;
       }
      } else {
       $87 = HEAP8[$77>>0]|0;
       $88 = $87&255;
       $$0$i$i29 = $88;
      }
      $89 = $$0$i$i29&255;
      $isascii1$i = ($89<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 39;
       break L3;
      }
      $sext232 = $$0$i$i29 << 24;
      $90 = $sext232 >> 24;
      $91 = HEAP32[$4>>2]|0;
      $92 = (($91) + ($90<<1)|0);
      $93 = HEAP16[$92>>1]|0;
      $94 = $93 & 8192;
      $95 = ($94<<16>>16)==(0);
      if ($95) {
       label = 39;
       break L3;
      }
      $96 = HEAP32[$__b>>2]|0;
      $97 = (($96) + 12|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 16|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($98|0)==($100|0);
      if ($101) {
       $102 = HEAP32[$96>>2]|0;
       $103 = (($102) + 40|0);
       $104 = HEAP32[$103>>2]|0;
       __THREW__ = 0;
       $105 = (invoke_ii($104|0,($96|0))|0);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       } else {
        $$0$i$i32 = $105;
       }
      } else {
       $108 = (($98) + 1|0);
       HEAP32[$97>>2] = $108;
       $109 = HEAP8[$98>>0]|0;
       $110 = $109&255;
       $$0$i$i32 = $110;
      }
      $111 = $$0$i$i32&255;
      __THREW__ = 0;
      invoke_vii(465,($__spaces|0),($111|0));
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      } else {
       label = 40;
      }
      break;
     }
     case 0:  {
      label = 40;
      break;
     }
     case 2:  {
      $371 = ($__trailing_sign$0355|0)!=(0|0);
      $372 = ($__p$0353>>>0)<(2);
      $or$cond = $371 | $372;
      if (!($or$cond)) {
       $373 = ($__p$0353|0)==(2);
       if ($373) {
        $374 = HEAP8[$19>>0]|0;
        $375 = ($374<<24>>24)!=(0);
        $376 = $375;
       } else {
        $376 = 0;
       }
       $brmerge = $12 | $376;
       if (!($brmerge)) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = 0;$free203 = $free202349;
        break L25;
       }
      }
      $377 = HEAP8[$__sym>>0]|0;
      $378 = $377 & 1;
      $379 = ($378<<24>>24)==(0);
      $380 = HEAP32[$14>>2]|0;
      $$465 = $379 ? $13 : $380;
      $381 = ($__p$0353|0)==(0);
      L45: do {
       if ($381) {
        $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
       } else {
        $382 = (($__p$0353) + -1)|0;
        $383 = (($__pat) + ($382)|0);
        $384 = HEAP8[$383>>0]|0;
        $switch = ($384&255)<(2);
        if ($switch) {
         $385 = $377&255;
         $386 = $385 >>> 1;
         $387 = HEAP32[$15>>2]|0;
         $$467 = $379 ? $386 : $387;
         $388 = (($$465) + ($$467)|0);
         $390 = $$465;
         while(1) {
          $389 = ($390|0)==($388|0);
          if ($389) {
           $$lcssa535 = $388;
           break;
          }
          $391 = HEAP8[$390>>0]|0;
          $isascii1$i136 = ($391<<24>>24)>(-1);
          if (!($isascii1$i136)) {
           $$lcssa535 = $390;
           break;
          }
          $392 = $391 << 24 >> 24;
          $393 = HEAP32[$4>>2]|0;
          $394 = (($393) + ($392<<1)|0);
          $395 = HEAP16[$394>>1]|0;
          $396 = $395 & 8192;
          $397 = ($396<<16>>16)==(0);
          $398 = (($390) + 1|0);
          if ($397) {
           $$lcssa535 = $390;
           break;
          } else {
           $390 = $398;
          }
         }
         $399 = $$lcssa535;
         $400 = $$465;
         $401 = (($399) - ($400))|0;
         $402 = HEAP8[$__spaces>>0]|0;
         $403 = $402 & 1;
         $404 = ($403<<24>>24)==(0);
         if ($404) {
          $406 = $402&255;
          $407 = $406 >>> 1;
          $409 = $407;
         } else {
          $405 = HEAP32[$18>>2]|0;
          $409 = $405;
         }
         $408 = ($401>>>0)>($409>>>0);
         if ($408) {
          $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
         } else {
          if ($404) {
           $413 = $402&255;
           $414 = $413 >>> 1;
           $$sum454 = (($414) - ($401))|0;
           $415 = ((($__spaces) + ($$sum454)|0) + 1|0);
           $417 = $16;$418 = $414;$420 = $415;
          } else {
           $410 = HEAP32[$17>>2]|0;
           $411 = HEAP32[$18>>2]|0;
           $$sum = (($411) - ($401))|0;
           $412 = (($410) + ($$sum)|0);
           $417 = $410;$418 = $411;$420 = $412;
          }
          $416 = (($417) + ($418)|0);
          $419 = ($420|0)==($416|0);
          if ($419) {
           $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$lcssa535;$458 = $936;
          } else {
           $422 = $420;$424 = $$465;
           while(1) {
            $421 = HEAP8[$422>>0]|0;
            $423 = HEAP8[$424>>0]|0;
            $425 = ($421<<24>>24)==($423<<24>>24);
            if (!($425)) {
             $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
             break L45;
            }
            $426 = (($422) + 1|0);
            $427 = (($424) + 1|0);
            $428 = ($426|0)==($416|0);
            if ($428) {
             $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$lcssa535;$458 = $936;
             break;
            } else {
             $422 = $426;$424 = $427;
            }
           }
          }
         }
        } else {
         $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
        }
       }
      } while(0);
      L65: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $13;$438 = $435;
       } else {
        $432 = HEAP32[$14>>2]|0;
        $433 = HEAP32[$15>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $456 = 0;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 21;
           break L3;
          }
          $454 = ($451|0)==(-1);
          if ($454) {
           HEAP32[$__b>>2] = 0;
           $456 = 0;
           break;
          } else {
           $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
           $456 = $$pre$i$i$i176;
           break;
          }
         } else {
          $456 = $441;
         }
        }
       } while(0);
       $455 = ($456|0)==(0|0);
       $457 = ($458|0)==(0|0);
       do {
        if ($457) {
         $$pre$i2$i$i180428 = $$pre$i2$i$i180;
         label = 168;
        } else {
         $459 = (($458) + 12|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = (($458) + 16|0);
         $462 = HEAP32[$461>>2]|0;
         $463 = ($460|0)==($462|0);
         if (!($463)) {
          if ($455) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$943 = $458;
           break;
          } else {
           break L65;
          }
         }
         $464 = HEAP32[$458>>2]|0;
         $465 = (($464) + 36|0);
         $466 = HEAP32[$465>>2]|0;
         __THREW__ = 0;
         $467 = (invoke_ii($466|0,($458|0))|0);
         $468 = __THREW__; __THREW__ = 0;
         $469 = $468&1;
         if ($469) {
          label = 21;
          break L3;
         }
         $470 = ($467|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i180428 = 0;
          label = 168;
          break;
         } else {
          $471 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $455 ^ $471;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$943 = $$pre$i2$i$i180;
           break;
          } else {
           break L65;
          }
         }
        }
       } while(0);
       if ((label|0) == 168) {
        label = 0;
        if ($455) {
         break;
        } else {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180428;$943 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 21;
         break L3;
        } else {
         $$0$i$i172 = $481;
        }
       } else {
        $484 = HEAP8[$474>>0]|0;
        $485 = $484&255;
        $$0$i$i172 = $485;
       }
       $486 = $$0$i$i172&255;
       $487 = HEAP8[$440>>0]|0;
       $488 = ($486<<24>>24)==($487<<24>>24);
       if (!($488)) {
        break;
       }
       $489 = HEAP32[$__b>>2]|0;
       $490 = (($489) + 12|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($489) + 16|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = ($491|0)==($493|0);
       if ($494) {
        $495 = HEAP32[$489>>2]|0;
        $496 = (($495) + 40|0);
        $497 = HEAP32[$496>>2]|0;
        __THREW__ = 0;
        (invoke_ii($497|0,($489|0))|0);
        $498 = __THREW__; __THREW__ = 0;
        $499 = $498&1;
        if ($499) {
         label = 21;
         break L3;
        }
       } else {
        $500 = (($491) + 1|0);
        HEAP32[$490>>2] = $500;
       }
       $501 = (($440) + 1|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180427;$430 = $$pre;$440 = $501;$458 = $943;
      }
      if ($12) {
       $502 = HEAP8[$__sym>>0]|0;
       $503 = $502 & 1;
       $504 = ($503<<24>>24)==(0);
       if ($504) {
        $507 = $502&255;
        $508 = $507 >>> 1;
        $510 = $13;$511 = $508;
       } else {
        $505 = HEAP32[$14>>2]|0;
        $506 = HEAP32[$15>>2]|0;
        $510 = $505;$511 = $506;
       }
       $509 = (($510) + ($511)|0);
       $512 = ($440|0)==($509|0);
       if ($512) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       } else {
        label = 183;
        break L3;
       }
      } else {
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      }
      break;
     }
     case 4:  {
      $568 = $935;$607 = $933;$608 = $932;$612 = $934;$__ng$0 = 0;$free201 = $free202349;
      L107: while(1) {
       $515 = HEAP32[$__b>>2]|0;
       $516 = ($515|0)==(0|0);
       do {
        if ($516) {
         $530 = 0;
        } else {
         $517 = (($515) + 12|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = (($515) + 16|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ($518|0)==($520|0);
         if ($521) {
          $522 = HEAP32[$515>>2]|0;
          $523 = (($522) + 36|0);
          $524 = HEAP32[$523>>2]|0;
          __THREW__ = 0;
          $525 = (invoke_ii($524|0,($515|0))|0);
          $526 = __THREW__; __THREW__ = 0;
          $527 = $526&1;
          if ($527) {
           $$ph$ph = $612;$free206$ph$ph = $free201;
           label = 19;
           break L3;
          }
          $528 = ($525|0)==(-1);
          if ($528) {
           HEAP32[$__b>>2] = 0;
           $530 = 0;
           break;
          } else {
           $$pre$i$i$i156 = HEAP32[$__b>>2]|0;
           $530 = $$pre$i$i$i156;
           break;
          }
         } else {
          $530 = $515;
         }
        }
       } while(0);
       $529 = ($530|0)==(0|0);
       $531 = HEAP32[$__e>>2]|0;
       $532 = ($531|0)==(0|0);
       do {
        if ($532) {
         label = 196;
        } else {
         $533 = (($531) + 12|0);
         $534 = HEAP32[$533>>2]|0;
         $535 = (($531) + 16|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ($534|0)==($536|0);
         if (!($537)) {
          if ($529) {
           break;
          } else {
           break L107;
          }
         }
         $538 = HEAP32[$531>>2]|0;
         $539 = (($538) + 36|0);
         $540 = HEAP32[$539>>2]|0;
         __THREW__ = 0;
         $541 = (invoke_ii($540|0,($531|0))|0);
         $542 = __THREW__; __THREW__ = 0;
         $543 = $542&1;
         if ($543) {
          $$ph$ph = $612;$free206$ph$ph = $free201;
          label = 19;
          break L3;
         }
         $544 = ($541|0)==(-1);
         if ($544) {
          HEAP32[$__e>>2] = 0;
          label = 196;
          break;
         } else {
          if ($529) {
           break;
          } else {
           break L107;
          }
         }
        }
       } while(0);
       if ((label|0) == 196) {
        label = 0;
        if ($529) {
         break;
        }
       }
       $545 = HEAP32[$__b>>2]|0;
       $546 = (($545) + 12|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = (($545) + 16|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = ($547|0)==($549|0);
       if ($550) {
        $551 = HEAP32[$545>>2]|0;
        $552 = (($551) + 36|0);
        $553 = HEAP32[$552>>2]|0;
        __THREW__ = 0;
        $554 = (invoke_ii($553|0,($545|0))|0);
        $555 = __THREW__; __THREW__ = 0;
        $556 = $555&1;
        if ($556) {
         $$ph$ph = $612;$free206$ph$ph = $free201;
         label = 19;
         break L3;
        } else {
         $$0$i$i151 = $554;
        }
       } else {
        $557 = HEAP8[$547>>0]|0;
        $558 = $557&255;
        $$0$i$i151 = $558;
       }
       $559 = $$0$i$i151&255;
       $isascii1$i149 = ($559<<24>>24)>(-1);
       if ($isascii1$i149) {
        $sext230 = $$0$i$i151 << 24;
        $560 = $sext230 >> 24;
        $561 = HEAP32[$4>>2]|0;
        $562 = (($561) + ($560<<1)|0);
        $563 = HEAP16[$562>>1]|0;
        $564 = $563 & 2048;
        $565 = ($564<<16>>16)==(0);
        if ($565) {
         label = 214;
        } else {
         $566 = HEAP32[$__wn>>2]|0;
         $567 = ($566|0)==($568|0);
         if ($567) {
          $569 = HEAP32[$20>>2]|0;
          $570 = ($569|0)!=(661|0);
          $571 = HEAP32[$__wb>>2]|0;
          $572 = $568;
          $573 = $571;
          $574 = (($572) - ($573))|0;
          $575 = ($574>>>0)<(2147483647);
          $576 = $574 << 1;
          $$$i140 = $575 ? $576 : -1;
          $577 = $570 ? $571 : 0;
          $578 = (_realloc($577,$$$i140)|0);
          $579 = ($578|0)==(0|0);
          if ($579) {
           __THREW__ = 0;
           invoke_v(635);
           $580 = __THREW__; __THREW__ = 0;
           $581 = $580&1;
           if ($581) {
            $$ph$ph = $612;$free206$ph$ph = $free201;
            label = 19;
            break L3;
           }
          }
          if ($570) {
           HEAP32[$__wb>>2] = $578;
           $589 = $578;
          } else {
           $$pr$i142 = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $578;
           $582 = ($$pr$i142|0)==(0|0);
           if ($582) {
            $589 = $578;
           } else {
            $583 = HEAP32[$20>>2]|0;
            __THREW__ = 0;
            invoke_vi($583|0,($$pr$i142|0));
            $584 = __THREW__; __THREW__ = 0;
            $585 = $584&1;
            if ($585) {
             label = 211;
             break L3;
            }
            $$pre$i143 = HEAP32[$__wb>>2]|0;
            $589 = $$pre$i143;
           }
          }
          HEAP32[$20>>2] = 636;
          $588 = (($589) + ($574)|0);
          HEAP32[$__wn>>2] = $588;
          $590 = HEAP32[$__wb>>2]|0;
          $591 = (($590) + ($$$i140)|0);
          $593 = $588;$944 = $591;
         } else {
          $593 = $566;$944 = $568;
         }
         $592 = (($593) + 1|0);
         HEAP32[$__wn>>2] = $592;
         HEAP8[$593>>0] = $559;
         $594 = (($__ng$0) + 1)|0;
         $945 = $944;$946 = $612;$947 = $607;$948 = $608;$__ng$1 = $594;$free = $free201;
        }
       } else {
        label = 214;
       }
       if ((label|0) == 214) {
        label = 0;
        $595 = HEAP8[$__grp>>0]|0;
        $596 = $595 & 1;
        $597 = ($596<<24>>24)==(0);
        if ($597) {
         $599 = $595&255;
         $600 = $599 >>> 1;
         $602 = $600;
        } else {
         $598 = HEAP32[$21>>2]|0;
         $602 = $598;
        }
        $601 = ($602|0)==(0);
        $603 = ($__ng$0|0)==(0);
        $or$cond7 = $601 | $603;
        if ($or$cond7) {
         break;
        }
        $604 = HEAP8[$__ts>>0]|0;
        $605 = ($559<<24>>24)==($604<<24>>24);
        if (!($605)) {
         break;
        }
        $606 = ($607|0)==($608|0);
        if ($606) {
         $609 = ($free201|0)==(661|0);
         $610 = $607;
         $611 = $612;
         $613 = (($610) - ($611))|0;
         $614 = ($613>>>0)<(2147483647);
         $615 = $613 << 1;
         $$$i128 = $614 ? $615 : -1;
         $616 = $613 >> 2;
         if ($609) {
          $617 = 0;
         } else {
          $617 = $612;
         }
         $618 = (_realloc($617,$$$i128)|0);
         $619 = ($618|0)==(0|0);
         if ($619) {
          __THREW__ = 0;
          invoke_v(635);
          $620 = __THREW__; __THREW__ = 0;
          $621 = $620&1;
          if ($621) {
           $$ph$ph = $612;$free206$ph$ph = $free201;
           label = 19;
           break L3;
          }
         }
         $622 = $$$i128 >>> 2;
         $623 = (($618) + ($616<<2)|0);
         $624 = (($618) + ($622<<2)|0);
         $626 = $623;$949 = $618;$950 = $624;$free200 = 636;
        } else {
         $626 = $607;$949 = $612;$950 = $608;$free200 = $free201;
        }
        $625 = (($626) + 4|0);
        HEAP32[$626>>2] = $__ng$0;
        $945 = $568;$946 = $949;$947 = $625;$948 = $950;$__ng$1 = 0;$free = $free200;
       }
       $627 = HEAP32[$__b>>2]|0;
       $628 = (($627) + 12|0);
       $629 = HEAP32[$628>>2]|0;
       $630 = (($627) + 16|0);
       $631 = HEAP32[$630>>2]|0;
       $632 = ($629|0)==($631|0);
       if ($632) {
        $633 = HEAP32[$627>>2]|0;
        $634 = (($633) + 40|0);
        $635 = HEAP32[$634>>2]|0;
        __THREW__ = 0;
        (invoke_ii($635|0,($627|0))|0);
        $636 = __THREW__; __THREW__ = 0;
        $637 = $636&1;
        if ($637) {
         $$ph$ph = $946;$free206$ph$ph = $free;
         label = 19;
         break L3;
        } else {
         $568 = $945;$607 = $947;$608 = $948;$612 = $946;$__ng$0 = $__ng$1;$free201 = $free;
         continue;
        }
       } else {
        $638 = (($629) + 1|0);
        HEAP32[$628>>2] = $638;
        $568 = $945;$607 = $947;$608 = $948;$612 = $946;$__ng$0 = $__ng$1;$free201 = $free;
        continue;
       }
      }
      $639 = ($612|0)==($607|0);
      $640 = ($__ng$0|0)==(0);
      $or$cond8 = $639 | $640;
      if ($or$cond8) {
       $941 = $612;$951 = $607;$952 = $608;$free204 = $free201;
      } else {
       $641 = ($607|0)==($608|0);
       if ($641) {
        $642 = ($free201|0)==(661|0);
        $643 = $607;
        $644 = $612;
        $645 = (($643) - ($644))|0;
        $646 = ($645>>>0)<(2147483647);
        $647 = $645 << 1;
        $$$i118 = $646 ? $647 : -1;
        $648 = $645 >> 2;
        if ($642) {
         $649 = 0;
        } else {
         $649 = $612;
        }
        $650 = (_realloc($649,$$$i118)|0);
        $651 = ($650|0)==(0|0);
        if ($651) {
         __THREW__ = 0;
         invoke_v(635);
         $652 = __THREW__; __THREW__ = 0;
         $653 = $652&1;
         if ($653) {
          $$ph$ph235$ph$ph$ph$ph = $612;$free206$ph$ph234$ph$ph$ph$ph = $free201;
          label = 23;
          break L3;
         }
        }
        $654 = $$$i118 >>> 2;
        $655 = (($650) + ($648<<2)|0);
        $656 = (($650) + ($654<<2)|0);
        $658 = $655;$953 = $650;$954 = $656;$free205 = 636;
       } else {
        $658 = $607;$953 = $612;$954 = $608;$free205 = $free201;
       }
       $657 = (($658) + 4|0);
       HEAP32[$658>>2] = $__ng$0;
       $941 = $953;$951 = $657;$952 = $954;$free204 = $free205;
      }
      $659 = HEAP32[$__fd>>2]|0;
      $660 = ($659|0)>(0);
      if ($660) {
       $661 = HEAP32[$__b>>2]|0;
       $662 = ($661|0)==(0|0);
       do {
        if ($662) {
         $676 = 0;
        } else {
         $663 = (($661) + 12|0);
         $664 = HEAP32[$663>>2]|0;
         $665 = (($661) + 16|0);
         $666 = HEAP32[$665>>2]|0;
         $667 = ($664|0)==($666|0);
         if ($667) {
          $668 = HEAP32[$661>>2]|0;
          $669 = (($668) + 36|0);
          $670 = HEAP32[$669>>2]|0;
          __THREW__ = 0;
          $671 = (invoke_ii($670|0,($661|0))|0);
          $672 = __THREW__; __THREW__ = 0;
          $673 = $672&1;
          if ($673) {
           $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
           label = 23;
           break L3;
          }
          $674 = ($671|0)==(-1);
          if ($674) {
           HEAP32[$__b>>2] = 0;
           $676 = 0;
           break;
          } else {
           $$pre$i$i$i101 = HEAP32[$__b>>2]|0;
           $676 = $$pre$i$i$i101;
           break;
          }
         } else {
          $676 = $661;
         }
        }
       } while(0);
       $675 = ($676|0)==(0|0);
       $677 = HEAP32[$__e>>2]|0;
       $678 = ($677|0)==(0|0);
       do {
        if ($678) {
         label = 250;
        } else {
         $679 = (($677) + 12|0);
         $680 = HEAP32[$679>>2]|0;
         $681 = (($677) + 16|0);
         $682 = HEAP32[$681>>2]|0;
         $683 = ($680|0)==($682|0);
         if (!($683)) {
          if ($675) {
           $956 = $677;
           break;
          } else {
           label = 256;
           break L3;
          }
         }
         $684 = HEAP32[$677>>2]|0;
         $685 = (($684) + 36|0);
         $686 = HEAP32[$685>>2]|0;
         __THREW__ = 0;
         $687 = (invoke_ii($686|0,($677|0))|0);
         $688 = __THREW__; __THREW__ = 0;
         $689 = $688&1;
         if ($689) {
          $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
          label = 23;
          break L3;
         }
         $690 = ($687|0)==(-1);
         if ($690) {
          HEAP32[$__e>>2] = 0;
          label = 250;
          break;
         } else {
          if ($675) {
           $956 = $677;
           break;
          } else {
           label = 256;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 250) {
        label = 0;
        if ($675) {
         label = 256;
         break L3;
        } else {
         $956 = 0;
        }
       }
       $691 = HEAP32[$__b>>2]|0;
       $692 = (($691) + 12|0);
       $693 = HEAP32[$692>>2]|0;
       $694 = (($691) + 16|0);
       $695 = HEAP32[$694>>2]|0;
       $696 = ($693|0)==($695|0);
       if ($696) {
        $697 = HEAP32[$691>>2]|0;
        $698 = (($697) + 36|0);
        $699 = HEAP32[$698>>2]|0;
        __THREW__ = 0;
        $700 = (invoke_ii($699|0,($691|0))|0);
        $701 = __THREW__; __THREW__ = 0;
        $702 = $701&1;
        if ($702) {
         $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L3;
        } else {
         $$0$i$i93 = $700;
        }
       } else {
        $703 = HEAP8[$693>>0]|0;
        $704 = $703&255;
        $$0$i$i93 = $704;
       }
       $705 = $$0$i$i93&255;
       $706 = HEAP8[$__dp>>0]|0;
       $707 = ($705<<24>>24)==($706<<24>>24);
       if (!($707)) {
        label = 256;
        break L3;
       }
       $710 = HEAP32[$__b>>2]|0;
       $711 = (($710) + 12|0);
       $712 = HEAP32[$711>>2]|0;
       $713 = (($710) + 16|0);
       $714 = HEAP32[$713>>2]|0;
       $715 = ($712|0)==($714|0);
       if ($715) {
        $716 = HEAP32[$710>>2]|0;
        $717 = (($716) + 40|0);
        $718 = HEAP32[$717>>2]|0;
        __THREW__ = 0;
        (invoke_ii($718|0,($710|0))|0);
        $719 = __THREW__; __THREW__ = 0;
        $720 = $719&1;
        if ($720) {
         $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L3;
        } else {
         $$pre$i2$i$i75 = $956;$739 = $956;$778 = $568;$820 = $659;
        }
       } else {
        $721 = (($712) + 1|0);
        HEAP32[$711>>2] = $721;
        $$pre$i2$i$i75 = $956;$739 = $956;$778 = $568;$820 = $659;
       }
       while(1) {
        $722 = HEAP32[$__b>>2]|0;
        $723 = ($722|0)==(0|0);
        do {
         if ($723) {
          $737 = 0;
         } else {
          $724 = (($722) + 12|0);
          $725 = HEAP32[$724>>2]|0;
          $726 = (($722) + 16|0);
          $727 = HEAP32[$726>>2]|0;
          $728 = ($725|0)==($727|0);
          if ($728) {
           $729 = HEAP32[$722>>2]|0;
           $730 = (($729) + 36|0);
           $731 = HEAP32[$730>>2]|0;
           __THREW__ = 0;
           $732 = (invoke_ii($731|0,($722|0))|0);
           $733 = __THREW__; __THREW__ = 0;
           $734 = $733&1;
           if ($734) {
            label = 20;
            break L3;
           }
           $735 = ($732|0)==(-1);
           if ($735) {
            HEAP32[$__b>>2] = 0;
            $737 = 0;
            break;
           } else {
            $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
            $737 = $$pre$i$i$i71;
            break;
           }
          } else {
           $737 = $722;
          }
         }
        } while(0);
        $736 = ($737|0)==(0|0);
        $738 = ($739|0)==(0|0);
        do {
         if ($738) {
          $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;
          label = 272;
         } else {
          $740 = (($739) + 12|0);
          $741 = HEAP32[$740>>2]|0;
          $742 = (($739) + 16|0);
          $743 = HEAP32[$742>>2]|0;
          $744 = ($741|0)==($743|0);
          if (!($744)) {
           if ($736) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$957 = $739;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
          $745 = HEAP32[$739>>2]|0;
          $746 = (($745) + 36|0);
          $747 = HEAP32[$746>>2]|0;
          __THREW__ = 0;
          $748 = (invoke_ii($747|0,($739|0))|0);
          $749 = __THREW__; __THREW__ = 0;
          $750 = $749&1;
          if ($750) {
           label = 20;
           break L3;
          }
          $751 = ($748|0)==(-1);
          if ($751) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i75431$ph = 0;
           label = 272;
           break;
          } else {
           $752 = ($$pre$i2$i$i75|0)==(0|0);
           $tmp$i$i77 = $736 ^ $752;
           if ($tmp$i$i77) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$957 = $$pre$i2$i$i75;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($736) {
          label = 279;
          break L3;
         } else {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;$957 = 0;
         }
        }
        $753 = HEAP32[$__b>>2]|0;
        $754 = (($753) + 12|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = (($753) + 16|0);
        $757 = HEAP32[$756>>2]|0;
        $758 = ($755|0)==($757|0);
        if ($758) {
         $759 = HEAP32[$753>>2]|0;
         $760 = (($759) + 36|0);
         $761 = HEAP32[$760>>2]|0;
         __THREW__ = 0;
         $762 = (invoke_ii($761|0,($753|0))|0);
         $763 = __THREW__; __THREW__ = 0;
         $764 = $763&1;
         if ($764) {
          label = 20;
          break L3;
         } else {
          $$0$i$i64 = $762;
         }
        } else {
         $765 = HEAP8[$755>>0]|0;
         $766 = $765&255;
         $$0$i$i64 = $766;
        }
        $767 = $$0$i$i64&255;
        $isascii1$i62 = ($767<<24>>24)>(-1);
        if (!($isascii1$i62)) {
         label = 279;
         break L3;
        }
        $sext = $$0$i$i64 << 24;
        $768 = $sext >> 24;
        $769 = HEAP32[$4>>2]|0;
        $770 = (($769) + ($768<<1)|0);
        $771 = HEAP16[$770>>1]|0;
        $772 = $771 & 2048;
        $773 = ($772<<16>>16)==(0);
        if ($773) {
         label = 279;
         break L3;
        }
        $776 = HEAP32[$__wn>>2]|0;
        $777 = ($776|0)==($778|0);
        if ($777) {
         $779 = HEAP32[$20>>2]|0;
         $780 = ($779|0)!=(661|0);
         $781 = HEAP32[$__wb>>2]|0;
         $782 = $778;
         $783 = $781;
         $784 = (($782) - ($783))|0;
         $785 = ($784>>>0)<(2147483647);
         $786 = $784 << 1;
         $$$i = $785 ? $786 : -1;
         $787 = $780 ? $781 : 0;
         $788 = (_realloc($787,$$$i)|0);
         $789 = ($788|0)==(0|0);
         if ($789) {
          __THREW__ = 0;
          invoke_v(635);
          $790 = __THREW__; __THREW__ = 0;
          $791 = $790&1;
          if ($791) {
           label = 20;
           break L3;
          }
         }
         do {
          if ($780) {
           HEAP32[$__wb>>2] = $788;
           $799 = $788;
          } else {
           $$pr$i = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $788;
           $792 = ($$pr$i|0)==(0|0);
           if ($792) {
            $799 = $788;
            break;
           }
           $793 = HEAP32[$20>>2]|0;
           __THREW__ = 0;
           invoke_vi($793|0,($$pr$i|0));
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 288;
            break L3;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $799 = $$pre$i;
          }
         } while(0);
         HEAP32[$20>>2] = 636;
         $798 = (($799) + ($784)|0);
         HEAP32[$__wn>>2] = $798;
         $800 = HEAP32[$__wb>>2]|0;
         $801 = (($800) + ($$$i)|0);
         $958 = $798;$959 = $801;
        } else {
         $958 = $776;$959 = $778;
        }
        $802 = HEAP32[$__b>>2]|0;
        $803 = (($802) + 12|0);
        $804 = HEAP32[$803>>2]|0;
        $805 = (($802) + 16|0);
        $806 = HEAP32[$805>>2]|0;
        $807 = ($804|0)==($806|0);
        if ($807) {
         $808 = HEAP32[$802>>2]|0;
         $809 = (($808) + 36|0);
         $810 = HEAP32[$809>>2]|0;
         __THREW__ = 0;
         $811 = (invoke_ii($810|0,($802|0))|0);
         $812 = __THREW__; __THREW__ = 0;
         $813 = $812&1;
         if ($813) {
          label = 20;
          break L3;
         }
         $$pre453 = HEAP32[$__wn>>2]|0;
         $$0$i$i53 = $811;$818 = $$pre453;
        } else {
         $814 = HEAP8[$804>>0]|0;
         $815 = $814&255;
         $$0$i$i53 = $815;$818 = $958;
        }
        $816 = $$0$i$i53&255;
        $817 = (($818) + 1|0);
        HEAP32[$__wn>>2] = $817;
        HEAP8[$818>>0] = $816;
        $819 = (($820) + -1)|0;
        HEAP32[$__fd>>2] = $819;
        $821 = HEAP32[$__b>>2]|0;
        $822 = (($821) + 12|0);
        $823 = HEAP32[$822>>2]|0;
        $824 = (($821) + 16|0);
        $825 = HEAP32[$824>>2]|0;
        $826 = ($823|0)==($825|0);
        if ($826) {
         $827 = HEAP32[$821>>2]|0;
         $828 = (($827) + 40|0);
         $829 = HEAP32[$828>>2]|0;
         __THREW__ = 0;
         (invoke_ii($829|0,($821|0))|0);
         $830 = __THREW__; __THREW__ = 0;
         $831 = $830&1;
         if ($831) {
          label = 20;
          break L3;
         }
        } else {
         $833 = (($823) + 1|0);
         HEAP32[$822>>2] = $833;
        }
        $832 = ($819|0)>(0);
        if ($832) {
         $$pre$i2$i$i75 = $$pre$i2$i$i75431458;$739 = $957;$778 = $959;$820 = $819;
        } else {
         $955 = $959;
         break;
        }
       }
      } else {
       $955 = $568;
      }
      $834 = HEAP32[$__wn>>2]|0;
      $835 = HEAP32[$__wb>>2]|0;
      $836 = ($834|0)==($835|0);
      if ($836) {
       label = 299;
       break L3;
      } else {
       $937 = $955;$938 = $941;$939 = $951;$940 = $952;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free204;
      }
      break;
     }
     case 3:  {
      $187 = HEAP8[$__psn>>0]|0;
      $188 = $187 & 1;
      $189 = ($188<<24>>24)==(0);
      if ($189) {
       $191 = $187&255;
       $192 = $191 >>> 1;
       $202 = $192;
      } else {
       $190 = HEAP32[$9>>2]|0;
       $202 = $190;
      }
      $193 = HEAP8[$__nsn>>0]|0;
      $194 = $193 & 1;
      $195 = ($194<<24>>24)==(0);
      if ($195) {
       $197 = $193&255;
       $198 = $197 >>> 1;
       $200 = $198;
      } else {
       $196 = HEAP32[$6>>2]|0;
       $200 = $196;
      }
      $199 = (0 - ($200))|0;
      $201 = ($202|0)==($199|0);
      if ($201) {
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      } else {
       if ($189) {
        $204 = $187&255;
        $205 = $204 >>> 1;
        $207 = $205;
       } else {
        $203 = HEAP32[$9>>2]|0;
        $207 = $203;
       }
       $206 = ($207|0)==(0);
       if (!($206)) {
        if ($195) {
         $209 = $193&255;
         $210 = $209 >>> 1;
         $212 = $210;
        } else {
         $208 = HEAP32[$6>>2]|0;
         $212 = $208;
        }
        $211 = ($212|0)==(0);
        if (!($211)) {
         $294 = HEAP32[$__b>>2]|0;
         $295 = (($294) + 12|0);
         $296 = HEAP32[$295>>2]|0;
         $297 = (($294) + 16|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = ($296|0)==($298|0);
         if ($299) {
          $300 = HEAP32[$294>>2]|0;
          $301 = (($300) + 36|0);
          $302 = HEAP32[$301>>2]|0;
          __THREW__ = 0;
          $303 = (invoke_ii($302|0,($294|0))|0);
          $304 = __THREW__; __THREW__ = 0;
          $305 = $304&1;
          if ($305) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          }
          $$pre452 = HEAP8[$__psn>>0]|0;
          $$pre574 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre574) + 12|0);
          $$pre575 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert576 = (($$pre574) + 16|0);
          $$pre577 = HEAP32[$$phi$trans$insert576>>2]|0;
          $$0$i$i96 = $303;$310 = $$pre452;$316 = $$pre574;$318 = $$pre575;$319 = $$pre577;
         } else {
          $306 = HEAP8[$296>>0]|0;
          $307 = $306&255;
          $$0$i$i96 = $307;$310 = $187;$316 = $294;$318 = $296;$319 = $298;
         }
         $308 = $$0$i$i96&255;
         $309 = $310 & 1;
         $311 = ($309<<24>>24)==(0);
         $312 = HEAP32[$10>>2]|0;
         $$463 = $311 ? $8 : $312;
         $313 = HEAP8[$$463>>0]|0;
         $314 = ($308<<24>>24)==($313<<24>>24);
         $315 = (($316) + 12|0);
         $317 = ($318|0)==($319|0);
         if ($314) {
          if ($317) {
           $320 = HEAP32[$316>>2]|0;
           $321 = (($320) + 40|0);
           $322 = HEAP32[$321>>2]|0;
           __THREW__ = 0;
           (invoke_ii($322|0,($316|0))|0);
           $323 = __THREW__; __THREW__ = 0;
           $324 = $323&1;
           if ($324) {
            $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
            label = 23;
            break L3;
           }
          } else {
           $325 = (($318) + 1|0);
           HEAP32[$315>>2] = $325;
          }
          $326 = HEAP8[$__psn>>0]|0;
          $327 = $326 & 1;
          $328 = ($327<<24>>24)==(0);
          if ($328) {
           $330 = $326&255;
           $331 = $330 >>> 1;
           $333 = $331;
          } else {
           $329 = HEAP32[$9>>2]|0;
           $333 = $329;
          }
          $332 = ($333>>>0)>(1);
          $__psn$__trailing_sign$05 = $332 ? $__psn : $__trailing_sign$0355;
          $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free203 = $free202349;
          break L25;
         }
         if ($317) {
          $334 = HEAP32[$316>>2]|0;
          $335 = (($334) + 36|0);
          $336 = HEAP32[$335>>2]|0;
          __THREW__ = 0;
          $337 = (invoke_ii($336|0,($316|0))|0);
          $338 = __THREW__; __THREW__ = 0;
          $339 = $338&1;
          if ($339) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          } else {
           $$0$i$i114 = $337;
          }
         } else {
          $340 = HEAP8[$318>>0]|0;
          $341 = $340&255;
          $$0$i$i114 = $341;
         }
         $342 = $$0$i$i114&255;
         $343 = HEAP8[$__nsn>>0]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         $346 = HEAP32[$7>>2]|0;
         $$464 = $345 ? $5 : $346;
         $347 = HEAP8[$$464>>0]|0;
         $348 = ($342<<24>>24)==($347<<24>>24);
         if (!($348)) {
          label = 131;
          break L3;
         }
         $349 = HEAP32[$__b>>2]|0;
         $350 = (($349) + 12|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = (($349) + 16|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($351|0)==($353|0);
         if ($354) {
          $355 = HEAP32[$349>>2]|0;
          $356 = (($355) + 40|0);
          $357 = HEAP32[$356>>2]|0;
          __THREW__ = 0;
          (invoke_ii($357|0,($349|0))|0);
          $358 = __THREW__; __THREW__ = 0;
          $359 = $358&1;
          if ($359) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          }
         } else {
          $360 = (($351) + 1|0);
          HEAP32[$350>>2] = $360;
         }
         HEAP8[$__neg>>0] = 1;
         $361 = HEAP8[$__nsn>>0]|0;
         $362 = $361 & 1;
         $363 = ($362<<24>>24)==(0);
         if ($363) {
          $365 = $361&255;
          $366 = $365 >>> 1;
          $368 = $366;
         } else {
          $364 = HEAP32[$6>>2]|0;
          $368 = $364;
         }
         $367 = ($368>>>0)>(1);
         $__nsn$__trailing_sign$06 = $367 ? $__nsn : $__trailing_sign$0355;
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free203 = $free202349;
         break L25;
        }
       }
       if ($189) {
        $214 = $187&255;
        $215 = $214 >>> 1;
        $217 = $215;
       } else {
        $213 = HEAP32[$9>>2]|0;
        $217 = $213;
       }
       $216 = ($217|0)==(0);
       $218 = HEAP32[$__b>>2]|0;
       $219 = (($218) + 12|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = (($218) + 16|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ($220|0)==($222|0);
       if ($216) {
        if ($223) {
         $259 = HEAP32[$218>>2]|0;
         $260 = (($259) + 36|0);
         $261 = HEAP32[$260>>2]|0;
         __THREW__ = 0;
         $262 = (invoke_ii($261|0,($218|0))|0);
         $263 = __THREW__; __THREW__ = 0;
         $264 = $263&1;
         if ($264) {
          $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         }
         $$pre450 = HEAP8[$__nsn>>0]|0;
         $$0$i$i84 = $262;$269 = $$pre450;
        } else {
         $265 = HEAP8[$220>>0]|0;
         $266 = $265&255;
         $$0$i$i84 = $266;$269 = $193;
        }
        $267 = $$0$i$i84&255;
        $268 = $269 & 1;
        $270 = ($268<<24>>24)==(0);
        $271 = HEAP32[$7>>2]|0;
        $$462 = $270 ? $5 : $271;
        $272 = HEAP8[$$462>>0]|0;
        $273 = ($267<<24>>24)==($272<<24>>24);
        if (!($273)) {
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L25;
        }
        $274 = HEAP32[$__b>>2]|0;
        $275 = (($274) + 12|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = (($274) + 16|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = ($276|0)==($278|0);
        if ($279) {
         $280 = HEAP32[$274>>2]|0;
         $281 = (($280) + 40|0);
         $282 = HEAP32[$281>>2]|0;
         __THREW__ = 0;
         (invoke_ii($282|0,($274|0))|0);
         $283 = __THREW__; __THREW__ = 0;
         $284 = $283&1;
         if ($284) {
          $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         }
        } else {
         $285 = (($276) + 1|0);
         HEAP32[$275>>2] = $285;
        }
        HEAP8[$__neg>>0] = 1;
        $286 = HEAP8[$__nsn>>0]|0;
        $287 = $286 & 1;
        $288 = ($287<<24>>24)==(0);
        if ($288) {
         $290 = $286&255;
         $291 = $290 >>> 1;
         $293 = $291;
        } else {
         $289 = HEAP32[$6>>2]|0;
         $293 = $289;
        }
        $292 = ($293>>>0)>(1);
        $__nsn$__trailing_sign$0 = $292 ? $__nsn : $__trailing_sign$0355;
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free203 = $free202349;
        break L25;
       }
       if ($223) {
        $224 = HEAP32[$218>>2]|0;
        $225 = (($224) + 36|0);
        $226 = HEAP32[$225>>2]|0;
        __THREW__ = 0;
        $227 = (invoke_ii($226|0,($218|0))|0);
        $228 = __THREW__; __THREW__ = 0;
        $229 = $228&1;
        if ($229) {
         $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L3;
        }
        $$pre451 = HEAP8[$__psn>>0]|0;
        $$0$i$i67 = $227;$234 = $$pre451;
       } else {
        $230 = HEAP8[$220>>0]|0;
        $231 = $230&255;
        $$0$i$i67 = $231;$234 = $187;
       }
       $232 = $$0$i$i67&255;
       $233 = $234 & 1;
       $235 = ($233<<24>>24)==(0);
       $236 = HEAP32[$10>>2]|0;
       $$ = $235 ? $8 : $236;
       $237 = HEAP8[$$>>0]|0;
       $238 = ($232<<24>>24)==($237<<24>>24);
       if (!($238)) {
        HEAP8[$__neg>>0] = 1;
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L25;
       }
       $239 = HEAP32[$__b>>2]|0;
       $240 = (($239) + 12|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = (($239) + 16|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = ($241|0)==($243|0);
       if ($244) {
        $245 = HEAP32[$239>>2]|0;
        $246 = (($245) + 40|0);
        $247 = HEAP32[$246>>2]|0;
        __THREW__ = 0;
        (invoke_ii($247|0,($239|0))|0);
        $248 = __THREW__; __THREW__ = 0;
        $249 = $248&1;
        if ($249) {
         $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L3;
        }
       } else {
        $250 = (($241) + 1|0);
        HEAP32[$240>>2] = $250;
       }
       $251 = HEAP8[$__psn>>0]|0;
       $252 = $251 & 1;
       $253 = ($252<<24>>24)==(0);
       if ($253) {
        $255 = $251&255;
        $256 = $255 >>> 1;
        $258 = $256;
       } else {
        $254 = HEAP32[$9>>2]|0;
        $258 = $254;
       }
       $257 = ($258>>>0)>(1);
       $__psn$__trailing_sign$0 = $257 ? $__psn : $__trailing_sign$0355;
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free203 = $free202349;
      }
      break;
     }
     default: {
      $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
     }
     }
    } while(0);
    L350: do {
     if ((label|0) == 40) {
      label = 0;
      $116 = ($__p$0353|0)==(3);
      if ($116) {
       $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L3;
      } else {
       $$pre$i2$i$i39 = $936;$134 = $936;
      }
      while(1) {
       $117 = HEAP32[$__b>>2]|0;
       $118 = ($117|0)==(0|0);
       do {
        if ($118) {
         $132 = 0;
        } else {
         $119 = (($117) + 12|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = (($117) + 16|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ($120|0)==($122|0);
         if ($123) {
          $124 = HEAP32[$117>>2]|0;
          $125 = (($124) + 36|0);
          $126 = HEAP32[$125>>2]|0;
          __THREW__ = 0;
          $127 = (invoke_ii($126|0,($117|0))|0);
          $128 = __THREW__; __THREW__ = 0;
          $129 = $128&1;
          if ($129) {
           label = 22;
           break L3;
          }
          $130 = ($127|0)==(-1);
          if ($130) {
           HEAP32[$__b>>2] = 0;
           $132 = 0;
           break;
          } else {
           $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
           $132 = $$pre$i$i$i35;
           break;
          }
         } else {
          $132 = $117;
         }
        }
       } while(0);
       $131 = ($132|0)==(0|0);
       $133 = ($134|0)==(0|0);
       do {
        if ($133) {
         $$pre$i2$i$i39424 = $$pre$i2$i$i39;
         label = 53;
        } else {
         $135 = (($134) + 12|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (($134) + 16|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = ($136|0)==($138|0);
         if (!($139)) {
          if ($131) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$942 = $134;
           break;
          } else {
           $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L350;
          }
         }
         $140 = HEAP32[$134>>2]|0;
         $141 = (($140) + 36|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_ii($142|0,($134|0))|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          label = 22;
          break L3;
         }
         $146 = ($143|0)==(-1);
         if ($146) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i39424 = 0;
          label = 53;
          break;
         } else {
          $147 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $131 ^ $147;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$942 = $$pre$i2$i$i39;
           break;
          } else {
           $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L350;
          }
         }
        }
       } while(0);
       if ((label|0) == 53) {
        label = 0;
        if ($131) {
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L350;
        } else {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39424;$942 = 0;
        }
       }
       $148 = HEAP32[$__b>>2]|0;
       $149 = (($148) + 12|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($148) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($150|0)==($152|0);
       if ($153) {
        $154 = HEAP32[$148>>2]|0;
        $155 = (($154) + 36|0);
        $156 = HEAP32[$155>>2]|0;
        __THREW__ = 0;
        $157 = (invoke_ii($156|0,($148|0))|0);
        $158 = __THREW__; __THREW__ = 0;
        $159 = $158&1;
        if ($159) {
         label = 22;
         break L3;
        } else {
         $$0$i$i45 = $157;
        }
       } else {
        $160 = HEAP8[$150>>0]|0;
        $161 = $160&255;
        $$0$i$i45 = $161;
       }
       $162 = $$0$i$i45&255;
       $isascii1$i48 = ($162<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L350;
       }
       $sext231 = $$0$i$i45 << 24;
       $163 = $sext231 >> 24;
       $164 = HEAP32[$4>>2]|0;
       $165 = (($164) + ($163<<1)|0);
       $166 = HEAP16[$165>>1]|0;
       $167 = $166 & 8192;
       $168 = ($167<<16>>16)==(0);
       if ($168) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L350;
       }
       $169 = HEAP32[$__b>>2]|0;
       $170 = (($169) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = (($169) + 16|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($171|0)==($173|0);
       if ($174) {
        $175 = HEAP32[$169>>2]|0;
        $176 = (($175) + 40|0);
        $177 = HEAP32[$176>>2]|0;
        __THREW__ = 0;
        $178 = (invoke_ii($177|0,($169|0))|0);
        $179 = __THREW__; __THREW__ = 0;
        $180 = $179&1;
        if ($180) {
         label = 22;
         break L3;
        } else {
         $$0$i$i50 = $178;
        }
       } else {
        $181 = (($171) + 1|0);
        HEAP32[$170>>2] = $181;
        $182 = HEAP8[$171>>0]|0;
        $183 = $182&255;
        $$0$i$i50 = $183;
       }
       $184 = $$0$i$i50&255;
       __THREW__ = 0;
       invoke_vii(465,($__spaces|0),($184|0));
       $185 = __THREW__; __THREW__ = 0;
       $186 = $185&1;
       if ($186) {
        label = 22;
        break L3;
       } else {
        $$pre$i2$i$i39 = $$pre$i2$i$i39426;$134 = $942;
       }
      }
     }
    } while(0);
    $839 = (($__p$0353) + 1)|0;
    $840 = ($839>>>0)<(4);
    if ($840) {
     $932 = $940;$933 = $939;$934 = $938;$935 = $937;$__p$0353 = $839;$__trailing_sign$0355 = $__trailing_sign$1;$free202349 = $free203;
    } else {
     $$lcssa293 = $938;$$lcssa309 = $939;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free202$lcssa = $free203;
     label = 301;
     break;
    }
   }
   L385:    switch (label|0) {
    case 19: {
     $57 = ___cxa_find_matching_catch(-1,-1)|0;
     $58 = tempRet0;
     $70 = $$ph$ph;$free206 = $free206$ph$ph;$lpad$phi$index = $57;$lpad$phi$index7 = $58;
     break L1;
     break;
    }
    case 20: {
     $59 = ___cxa_find_matching_catch(-1,-1)|0;
     $60 = tempRet0;
     $70 = $941;$free206 = $free204;$lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
     break;
    }
    case 21: {
     $61 = ___cxa_find_matching_catch(-1,-1)|0;
     $62 = tempRet0;
     $70 = $934;$free206 = $free202349;$lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
     break;
    }
    case 22: {
     $63 = ___cxa_find_matching_catch(-1,-1)|0;
     $64 = tempRet0;
     $70 = $934;$free206 = $free202349;$lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
     break;
    }
    case 23: {
     $65 = ___cxa_find_matching_catch(-1,-1)|0;
     $66 = tempRet0;
     $70 = $$ph$ph235$ph$ph$ph$ph;$free206 = $free206$ph$ph234$ph$ph$ph$ph;$lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
     break;
    }
    case 39: {
     $114 = HEAP32[$__err>>2]|0;
     $115 = $114 | 4;
     HEAP32[$__err>>2] = $115;
     $$0 = 0;$927 = $934;$free208 = $free202349;
     break;
    }
    case 131: {
     $369 = HEAP32[$__err>>2]|0;
     $370 = $369 | 4;
     HEAP32[$__err>>2] = $370;
     $$0 = 0;$927 = $934;$free208 = $free202349;
     break;
    }
    case 183: {
     $513 = HEAP32[$__err>>2]|0;
     $514 = $513 | 4;
     HEAP32[$__err>>2] = $514;
     $$0 = 0;$927 = $934;$free208 = $free202349;
     break;
    }
    case 211: {
     $586 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $587 = tempRet0;
     ___clang_call_terminate($586);
     // unreachable;
     break;
    }
    case 256: {
     $708 = HEAP32[$__err>>2]|0;
     $709 = $708 | 4;
     HEAP32[$__err>>2] = $709;
     $$0 = 0;$927 = $941;$free208 = $free204;
     break;
    }
    case 279: {
     $774 = HEAP32[$__err>>2]|0;
     $775 = $774 | 4;
     HEAP32[$__err>>2] = $775;
     $$0 = 0;$927 = $941;$free208 = $free204;
     break;
    }
    case 288: {
     $796 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $797 = tempRet0;
     ___clang_call_terminate($796);
     // unreachable;
     break;
    }
    case 299: {
     $837 = HEAP32[$__err>>2]|0;
     $838 = $837 | 4;
     HEAP32[$__err>>2] = $838;
     $$0 = 0;$927 = $941;$free208 = $free204;
     break;
    }
    case 301: {
     $841 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L394: do {
      if (!($841)) {
       $842 = (($__trailing_sign$0$lcssa) + 1|0);
       $843 = (($__trailing_sign$0$lcssa) + 8|0);
       $844 = (($__trailing_sign$0$lcssa) + 4|0);
       $__i$0 = 1;
       L396: while(1) {
        $845 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $846 = $845 & 1;
        $847 = ($846<<24>>24)==(0);
        if ($847) {
         $849 = $845&255;
         $850 = $849 >>> 1;
         $852 = $850;
        } else {
         $848 = HEAP32[$844>>2]|0;
         $852 = $848;
        }
        $851 = ($__i$0>>>0)<($852>>>0);
        if (!($851)) {
         break L394;
        }
        $853 = HEAP32[$__b>>2]|0;
        $854 = ($853|0)==(0|0);
        do {
         if ($854) {
          $868 = 0;
         } else {
          $855 = (($853) + 12|0);
          $856 = HEAP32[$855>>2]|0;
          $857 = (($853) + 16|0);
          $858 = HEAP32[$857>>2]|0;
          $859 = ($856|0)==($858|0);
          if ($859) {
           $860 = HEAP32[$853>>2]|0;
           $861 = (($860) + 36|0);
           $862 = HEAP32[$861>>2]|0;
           __THREW__ = 0;
           $863 = (invoke_ii($862|0,($853|0))|0);
           $864 = __THREW__; __THREW__ = 0;
           $865 = $864&1;
           if ($865) {
            label = 18;
            break L396;
           }
           $866 = ($863|0)==(-1);
           if ($866) {
            HEAP32[$__b>>2] = 0;
            $868 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $868 = $$pre$i$i$i;
            break;
           }
          } else {
           $868 = $853;
          }
         }
        } while(0);
        $867 = ($868|0)==(0|0);
        $869 = HEAP32[$__e>>2]|0;
        $870 = ($869|0)==(0|0);
        do {
         if ($870) {
          label = 319;
         } else {
          $871 = (($869) + 12|0);
          $872 = HEAP32[$871>>2]|0;
          $873 = (($869) + 16|0);
          $874 = HEAP32[$873>>2]|0;
          $875 = ($872|0)==($874|0);
          if (!($875)) {
           if ($867) {
            break;
           } else {
            label = 327;
            break L396;
           }
          }
          $876 = HEAP32[$869>>2]|0;
          $877 = (($876) + 36|0);
          $878 = HEAP32[$877>>2]|0;
          __THREW__ = 0;
          $879 = (invoke_ii($878|0,($869|0))|0);
          $880 = __THREW__; __THREW__ = 0;
          $881 = $880&1;
          if ($881) {
           label = 18;
           break L396;
          }
          $882 = ($879|0)==(-1);
          if ($882) {
           HEAP32[$__e>>2] = 0;
           label = 319;
           break;
          } else {
           if ($867) {
            break;
           } else {
            label = 327;
            break L396;
           }
          }
         }
        } while(0);
        if ((label|0) == 319) {
         label = 0;
         if ($867) {
          label = 327;
          break;
         }
        }
        $883 = HEAP32[$__b>>2]|0;
        $884 = (($883) + 12|0);
        $885 = HEAP32[$884>>2]|0;
        $886 = (($883) + 16|0);
        $887 = HEAP32[$886>>2]|0;
        $888 = ($885|0)==($887|0);
        if ($888) {
         $889 = HEAP32[$883>>2]|0;
         $890 = (($889) + 36|0);
         $891 = HEAP32[$890>>2]|0;
         __THREW__ = 0;
         $892 = (invoke_ii($891|0,($883|0))|0);
         $893 = __THREW__; __THREW__ = 0;
         $894 = $893&1;
         if ($894) {
          label = 18;
          break;
         } else {
          $$0$i$i = $892;
         }
        } else {
         $895 = HEAP8[$885>>0]|0;
         $896 = $895&255;
         $$0$i$i = $896;
        }
        $897 = $$0$i$i&255;
        $898 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $899 = $898 & 1;
        $900 = ($899<<24>>24)==(0);
        if ($900) {
         $903 = $842;
        } else {
         $901 = HEAP32[$843>>2]|0;
         $903 = $901;
        }
        $902 = (($903) + ($__i$0)|0);
        $904 = HEAP8[$902>>0]|0;
        $905 = ($897<<24>>24)==($904<<24>>24);
        if (!($905)) {
         label = 327;
         break;
        }
        $908 = (($__i$0) + 1)|0;
        $909 = HEAP32[$__b>>2]|0;
        $910 = (($909) + 12|0);
        $911 = HEAP32[$910>>2]|0;
        $912 = (($909) + 16|0);
        $913 = HEAP32[$912>>2]|0;
        $914 = ($911|0)==($913|0);
        if ($914) {
         $915 = HEAP32[$909>>2]|0;
         $916 = (($915) + 40|0);
         $917 = HEAP32[$916>>2]|0;
         __THREW__ = 0;
         (invoke_ii($917|0,($909|0))|0);
         $918 = __THREW__; __THREW__ = 0;
         $919 = $918&1;
         if ($919) {
          label = 18;
          break;
         } else {
          $__i$0 = $908;
          continue;
         }
        } else {
         $920 = (($911) + 1|0);
         HEAP32[$910>>2] = $920;
         $__i$0 = $908;
         continue;
        }
       }
       if ((label|0) == 18) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $70 = $$lcssa293;$free206 = $free202$lcssa;$lpad$phi$index = $55;$lpad$phi$index7 = $56;
        break L1;
       }
       else if ((label|0) == 327) {
        $906 = HEAP32[$__err>>2]|0;
        $907 = $906 | 4;
        HEAP32[$__err>>2] = $907;
        $$0 = 0;$927 = $$lcssa293;$free208 = $free202$lcssa;
        break L385;
       }
      }
     } while(0);
     $921 = ($$lcssa293|0)==($$lcssa309|0);
     if ($921) {
      $$0 = 1;$927 = $$lcssa309;$free208 = $free202$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa293,$$lcssa309,$__et);
      $922 = HEAP32[$__et>>2]|0;
      $923 = ($922|0)==(0);
      if ($923) {
       $$0 = 1;$927 = $$lcssa293;$free208 = $free202$lcssa;
      } else {
       $924 = HEAP32[$__err>>2]|0;
       $925 = $924 | 4;
       HEAP32[$__err>>2] = $925;
       $$0 = 0;$927 = $$lcssa293;$free208 = $free202$lcssa;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $926 = ($927|0)==(0|0);
   if ($926) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free208|0,($927|0));
   $928 = __THREW__; __THREW__ = 0;
   $929 = $928&1;
   if ($929) {
    $930 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $931 = tempRet0;
    ___clang_call_terminate($930);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $69 = ($70|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free206|0,($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(623,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(5576|0),(116|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0117 = 0, $$0118 = 0, $$019 = 0, $$020 = 0, $$byval_copy = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 12|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 36|0;
 $__wb = sp + 16|0;
 $__wn = sp + 32|0;
 $__loc = sp + 28|0;
 $__neg = sp + 136|0;
 $0 = sp + 24|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 661;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(456,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0117 = $53;$$019 = $52;$115 = $__wbuf;
 } else {
  $5 = HEAP32[$__loc>>2]|0;
  $6 = HEAP32[9136>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 4;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 9136;
   $8 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$8>>2] = (631);
   $9 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$9>>2] = 0;
   __THREW__ = 0;
   invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  }
  L5: do {
   if ((label|0) == 4) {
    $12 = HEAP32[((9136 + 4|0))>>2]|0;
    $13 = (($12) + -1)|0;
    $14 = (($5) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $15;
    $19 = $17;
    $20 = (($18) - ($19))|0;
    $21 = $20 >> 2;
    $22 = ($21>>>0)>($13>>>0);
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP8[$__neg>>0] = 0;
      $29 = HEAP32[$__e>>2]|0;
      HEAP32[$0>>2] = $29;
      $30 = (($__iob) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      $32 = (invoke_iiiiiiiiiiii(662,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      if ($32) {
       $35 = HEAP8[$__v>>0]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 1|0);
        HEAP8[$41>>0] = 0;
        HEAP8[$__v>>0] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP8[$39>>0] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg>>0]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 28|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        __THREW__ = 0;
        invoke_vii(465,($__v|0),($47|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         break;
        }
       }
       $54 = HEAP32[$24>>2]|0;
       $55 = (($54) + 28|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_iii($56|0,($24|0),48)|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = HEAP32[$__wb>>2]|0;
       $61 = HEAP32[$__wn>>2]|0;
       $62 = (($61) + -1|0);
       $63 = ($60>>>0)<($62>>>0);
       L22: do {
        if ($63) {
         $__w$09 = $60;
         while(1) {
          $66 = HEAP8[$__w$09>>0]|0;
          $67 = ($66<<24>>24)==($57<<24>>24);
          $65 = (($__w$09) + 1|0);
          if (!($67)) {
           $__w$0$lcssa = $__w$09;
           break L22;
          }
          $64 = ($65>>>0)<($62>>>0);
          if ($64) {
           $__w$09 = $65;
          } else {
           $__w$0$lcssa = $65;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $60;
        }
       } while(0);
       __THREW__ = 0;
       (invoke_iiii(664,($__v|0),($__w$0$lcssa|0),($61|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
      }
      $70 = HEAP32[$__b>>2]|0;
      $71 = ($70|0)==(0|0);
      if ($71) {
       $85 = 0;
      } else {
       $72 = (($70) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($70) + 16|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = ($73|0)==($75|0);
       if ($76) {
        $77 = HEAP32[$70>>2]|0;
        $78 = (($77) + 36|0);
        $79 = HEAP32[$78>>2]|0;
        __THREW__ = 0;
        $80 = (invoke_ii($79|0,($70|0))|0);
        $81 = __THREW__; __THREW__ = 0;
        $82 = $81&1;
        if ($82) {
         break;
        }
        $83 = ($80|0)==(-1);
        if ($83) {
         HEAP32[$__b>>2] = 0;
         $85 = 0;
        } else {
         $85 = $70;
        }
       } else {
        $85 = $70;
       }
      }
      $84 = ($85|0)==(0|0);
      $86 = ($29|0)==(0|0);
      do {
       if ($86) {
        label = 33;
       } else {
        $87 = (($29) + 12|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (($29) + 16|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($88|0)==($90|0);
        if (!($91)) {
         if ($84) {
          break;
         } else {
          label = 35;
          break;
         }
        }
        $92 = HEAP32[$29>>2]|0;
        $93 = (($92) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        __THREW__ = 0;
        $95 = (invoke_ii($94|0,($29|0))|0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         break L5;
        }
        $98 = ($95|0)==(-1);
        if ($98) {
         HEAP32[$__e>>2] = 0;
         label = 33;
         break;
        } else {
         $99 = ($29|0)==(0|0);
         $tmp$i$i = $84 ^ $99;
         if ($tmp$i$i) {
          break;
         } else {
          label = 35;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 33) {
       if ($84) {
        label = 35;
       }
      }
      if ((label|0) == 35) {
       $100 = HEAP32[$__err>>2]|0;
       $101 = $100 | 2;
       HEAP32[$__err>>2] = $101;
      }
      HEAP32[$agg$result>>2] = $85;
      $102 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
      $103 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       STACKTOP = sp;return;
      }
      $105 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
    $26 = (___cxa_allocate_exception(4)|0);
    __ZNSt8bad_castC2Ev($26);
    __THREW__ = 0;
    invoke_viii(454,($26|0),(17096|0),(390|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  } while(0);
  $110 = ___cxa_find_matching_catch(-1,-1)|0;
  $111 = tempRet0;
  $112 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($112)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $113 = ($$pre|0)==(0|0);
  if ($113) {
   $$0118 = $111;$$020 = $110;
   ___resumeException($$020|0);
   // unreachable;
  } else {
   $$0117 = $111;$$019 = $110;$115 = $$pre;
  }
 }
 $114 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($114|0,($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $118 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $$0118 = $$0117;$$020 = $$019;
  ___resumeException($$020|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 80|0;
 $6 = sp + 84|0;
 $7 = sp + 96|0;
 $8 = sp + 108|0;
 $9 = sp + 120|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[8576>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i>>2] = 8576;
   $13 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$13>>2] = (631);
   $14 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8576,$__p$i$i$i$i,633);
  }
  $15 = HEAP32[((8576 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(17096|0),(390|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(17096|0),(390|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 1023]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 1023]($1,$27);
  $37 = HEAP8[$__nsn>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 1|0);
   HEAP8[$43>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP8[$41>>0] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__nsn|0),0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $48 = HEAP32[$27>>2]|0;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 1023]($2,$27);
  $51 = HEAP8[$__psn>>0]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__psn) + 1|0);
   HEAP8[$57>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $54 = (($__psn) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP8[$55>>0] = 0;
   $56 = (($__psn) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__psn|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_ii[$64 & 1023]($27)|0);
  HEAP8[$__dp>>0] = $65;
  $66 = HEAP32[$27>>2]|0;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 1023]($27)|0);
  HEAP8[$__ts>>0] = $69;
  $70 = HEAP32[$27>>2]|0;
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($3,$27);
  $73 = HEAP8[$__grp>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__grp) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $76 = (($__grp) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__grp) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $84 = HEAP32[$27>>2]|0;
  $85 = (($84) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($4,$27);
  $87 = HEAP8[$__sym>>0]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = (($__sym) + 1|0);
   HEAP8[$93>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $90 = (($__sym) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP8[$91>>0] = 0;
   $92 = (($__sym) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__sym|0),0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $98 = HEAP32[$27>>2]|0;
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 1023]($27)|0);
  $storemerge = $101;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$__loc>>2]|0;
  $103 = HEAP32[8512>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   HEAP32[$__p$i$i$i$i8>>2] = 8512;
   $105 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$105>>2] = (631);
   $106 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$106>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8512,$__p$i$i$i$i8,633);
  }
  $107 = HEAP32[((8512 + 4|0))>>2]|0;
  $108 = (($107) + -1)|0;
  $109 = (($102) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($102) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $110;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = $115 >> 2;
  $117 = ($116>>>0)>($108>>>0);
  if (!($117)) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(17096|0),(390|0));
   // unreachable;
  }
  $118 = (($112) + ($108<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(17096|0),(390|0));
   // unreachable;
  }
  $122 = HEAP32[$119>>2]|0;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  FUNCTION_TABLE_vii[$124 & 1023]($5,$119);
  $125 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$125&255;HEAP8[$__pat+1>>0]=($125>>8)&255;HEAP8[$__pat+2>>0]=($125>>16)&255;HEAP8[$__pat+3>>0]=$125>>24;
  $126 = HEAP32[$119>>2]|0;
  $127 = (($126) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 1023]($6,$119);
  $129 = HEAP8[$__nsn>>0]|0;
  $130 = $129 & 1;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $135 = (($__nsn) + 1|0);
   HEAP8[$135>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $132 = (($__nsn) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP8[$133>>0] = 0;
   $134 = (($__nsn) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__nsn|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $140 = HEAP32[$119>>2]|0;
  $141 = (($140) + 28|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 1023]($7,$119);
  $143 = HEAP8[$__psn>>0]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $149 = (($__psn) + 1|0);
   HEAP8[$149>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $146 = (($__psn) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   HEAP8[$147>>0] = 0;
   $148 = (($__psn) + 4|0);
   HEAP32[$148>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__psn|0),0);
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   $152 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $153 = tempRet0;
   ___clang_call_terminate($152);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $154 = HEAP32[$119>>2]|0;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 1023]($119)|0);
  HEAP8[$__dp>>0] = $157;
  $158 = HEAP32[$119>>2]|0;
  $159 = (($158) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 1023]($119)|0);
  HEAP8[$__ts>>0] = $161;
  $162 = HEAP32[$119>>2]|0;
  $163 = (($162) + 20|0);
  $164 = HEAP32[$163>>2]|0;
  FUNCTION_TABLE_vii[$164 & 1023]($8,$119);
  $165 = HEAP8[$__grp>>0]|0;
  $166 = $165 & 1;
  $167 = ($166<<24>>24)==(0);
  if ($167) {
   $171 = (($__grp) + 1|0);
   HEAP8[$171>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $168 = (($__grp) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP8[$169>>0] = 0;
   $170 = (($__grp) + 4|0);
   HEAP32[$170>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $176 = HEAP32[$119>>2]|0;
  $177 = (($176) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  FUNCTION_TABLE_vii[$178 & 1023]($9,$119);
  $179 = HEAP8[$__sym>>0]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   $185 = (($__sym) + 1|0);
   HEAP8[$185>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $182 = (($__sym) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP8[$183>>0] = 0;
   $184 = (($__sym) + 4|0);
   HEAP32[$184>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__sym|0),0);
  $186 = __THREW__; __THREW__ = 0;
  $187 = $186&1;
  if ($187) {
   $188 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $189 = tempRet0;
   ___clang_call_terminate($188);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $190 = HEAP32[$119>>2]|0;
  $191 = (($190) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 1023]($119)|0);
  $storemerge = $193;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$116 = 0, $$117 = 0, $$1214 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0;
 var $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $$byval_copy = sp + 480|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 32|0;
 $__wb = sp + 472|0;
 $__wn = sp + 20|0;
 $__loc = sp + 28|0;
 $__neg = sp + 584|0;
 $0 = sp + 24|0;
 $__atoms = sp + 432|0;
 $__nbuf = sp + 484|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 661;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(456,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $52 = ___cxa_find_matching_catch(-1,-1)|0;
   $53 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$116 = $52;$$1214 = $53;$134 = 661;$135 = $__wbuf;
  } else {
   $5 = HEAP32[$__loc>>2]|0;
   $6 = HEAP32[9128>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    label = 4;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 9128;
    $8 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$8>>2] = (631);
    $9 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$9>>2] = 0;
    __THREW__ = 0;
    invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     $12 = HEAP32[((9128 + 4|0))>>2]|0;
     $13 = (($12) + -1)|0;
     $14 = (($5) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = ($21>>>0)>($13>>>0);
     if ($22) {
      $23 = (($17) + ($13<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       HEAP8[$__neg>>0] = 0;
       $29 = HEAP32[$__e>>2]|0;
       HEAP32[$0>>2] = $29;
       $30 = (($__iob) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       $32 = (invoke_iiiiiiiiiiii(666,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 15;
        break;
       }
       L12: do {
        if ($32) {
         $35 = HEAP32[$24>>2]|0;
         $36 = (($35) + 48|0);
         $37 = HEAP32[$36>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($37|0,($24|0),(8832|0),(((8832 + 10|0))|0),($__atoms|0))|0);
         $38 = __THREW__; __THREW__ = 0;
         $39 = $38&1;
         if ($39) {
          label = 15;
          break L6;
         }
         $40 = HEAP32[$__wn>>2]|0;
         $41 = HEAP32[$__wb>>2]|0;
         $42 = $40;
         $43 = $41;
         $44 = (($42) - ($43))|0;
         $45 = ($44|0)>(392);
         if ($45) {
          $46 = $44 >> 2;
          $47 = (($46) + 2)|0;
          $48 = (_malloc($47)|0);
          $49 = ($48|0)==(0|0);
          if ($49) {
           __THREW__ = 0;
           invoke_v(635);
           $50 = __THREW__; __THREW__ = 0;
           $51 = $50&1;
           if ($51) {
            $140 = 0;
            label = 16;
           } else {
            $90 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $90 = $48;$__nc$0 = $48;
           label = 19;
          }
         } else {
          $90 = 0;$__nc$0 = $__nbuf;
          label = 19;
         }
         do {
          if ((label|0) == 19) {
           $60 = HEAP8[$__neg>>0]|0;
           $61 = ($60<<24>>24)==(0);
           if ($61) {
            $__nc$1 = $__nc$0;
           } else {
            $62 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0>>0] = 45;
            $__nc$1 = $62;
           }
           $63 = ($41>>>0)<($40>>>0);
           if ($63) {
            $64 = (($__atoms) + 40|0);
            $65 = $__atoms;
            $__nc$210 = $__nc$1;$__w$011 = $41;
            while(1) {
             $66 = HEAP32[$__w$011>>2]|0;
             $$01$i = $__atoms;
             while(1) {
              $69 = HEAP32[$$01$i>>2]|0;
              $70 = ($69|0)==($66|0);
              $68 = (($$01$i) + 4|0);
              if ($70) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $67 = ($68|0)==($64|0);
              if ($67) {
               $$0$lcssa$i = $64;
               break;
              } else {
               $$01$i = $68;
              }
             }
             $71 = $$0$lcssa$i;
             $72 = (($71) - ($65))|0;
             $73 = $72 >> 2;
             $74 = (8832 + ($73)|0);
             $75 = HEAP8[$74>>0]|0;
             HEAP8[$__nc$210>>0] = $75;
             $76 = (($__w$011) + 4|0);
             $77 = (($__nc$210) + 1|0);
             $78 = HEAP32[$__wn>>2]|0;
             $79 = ($76>>>0)<($78>>>0);
             if ($79) {
              $__nc$210 = $77;$__w$011 = $76;
             } else {
              $__nc$2$lcssa = $77;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa>>0] = 0;
           HEAP32[$vararg_buffer>>2] = $__v;
           $80 = (_sscanf($__nbuf,8768,$vararg_buffer)|0);
           $81 = ($80|0)==(1);
           if ($81) {
            $89 = ($90|0)==(0|0);
            if ($89) {
             break L12;
            }
            _free($90);
            break L12;
           }
           $82 = (___cxa_allocate_exception(8)|0);
           __THREW__ = 0;
           invoke_vii(623,($82|0),(8776|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $87 = ___cxa_find_matching_catch(-1,-1)|0;
            $88 = tempRet0;
            ___cxa_free_exception(($82|0));
            $59 = $90;$eh$lpad$body$index2Z2D = $88;$eh$lpad$body$indexZ2D = $87;
            break;
           }
           __THREW__ = 0;
           invoke_viii(454,($82|0),(5576|0),(116|0));
           $85 = __THREW__; __THREW__ = 0;
           $86 = $85&1;
           if ($86) {
            $140 = $90;
            label = 16;
           } else {
            // unreachable;
           }
          }
         } while(0);
         if ((label|0) == 16) {
          $56 = ___cxa_find_matching_catch(-1,-1)|0;
          $57 = tempRet0;
          $59 = $140;$eh$lpad$body$index2Z2D = $57;$eh$lpad$body$indexZ2D = $56;
         }
         $58 = ($59|0)==(0|0);
         if ($58) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($59);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $91 = HEAP32[$__b>>2]|0;
       $92 = ($91|0)==(0|0);
       do {
        if ($92) {
         $141 = 1;
        } else {
         $93 = (($91) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($91) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$91>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          __THREW__ = 0;
          $101 = (invoke_ii($100|0,($91|0))|0);
          $102 = __THREW__; __THREW__ = 0;
          $103 = $102&1;
          if ($103) {
           label = 15;
           break L6;
          } else {
           $$0$i$i$i$i = $101;
          }
         } else {
          $104 = HEAP32[$94>>2]|0;
          $$0$i$i$i$i = $104;
         }
         $105 = ($$0$i$i$i$i|0)==(-1);
         if ($105) {
          HEAP32[$__b>>2] = 0;
          $141 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
          $141 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       $106 = HEAP32[$__e>>2]|0;
       $107 = ($106|0)==(0|0);
       do {
        if ($107) {
         label = 47;
        } else {
         $108 = (($106) + 12|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = (($106) + 16|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ($109|0)==($111|0);
         if ($112) {
          $113 = HEAP32[$106>>2]|0;
          $114 = (($113) + 36|0);
          $115 = HEAP32[$114>>2]|0;
          __THREW__ = 0;
          $116 = (invoke_ii($115|0,($106|0))|0);
          $117 = __THREW__; __THREW__ = 0;
          $118 = $117&1;
          if ($118) {
           label = 15;
           break L6;
          } else {
           $$0$i$i1$i$i = $116;
          }
         } else {
          $119 = HEAP32[$109>>2]|0;
          $$0$i$i1$i$i = $119;
         }
         $120 = ($$0$i$i1$i$i|0)==(-1);
         if ($120) {
          HEAP32[$__e>>2] = 0;
          label = 47;
          break;
         } else {
          if ($141) {
           break;
          } else {
           label = 49;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 47) {
        if ($141) {
         label = 49;
        }
       }
       if ((label|0) == 49) {
        $121 = HEAP32[$__err>>2]|0;
        $122 = $121 | 2;
        HEAP32[$__err>>2] = $122;
       }
       $123 = HEAP32[$__b>>2]|0;
       HEAP32[$agg$result>>2] = $123;
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       $125 = HEAP32[$__wb>>2]|0;
       HEAP32[$__wb>>2] = 0;
       $126 = ($125|0)==(0|0);
       if ($126) {
        STACKTOP = sp;return;
       }
       $127 = HEAP32[$1>>2]|0;
       __THREW__ = 0;
       invoke_vi($127|0,($125|0));
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       if ($129) {
        $130 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $131 = tempRet0;
        ___clang_call_terminate($130);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
     $26 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($26);
     __THREW__ = 0;
     invoke_viii(454,($26|0),(17096|0),(390|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 15;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $54 = ___cxa_find_matching_catch(-1,-1)|0;
    $55 = tempRet0;
    $$0 = $54;$$01 = $55;
   }
   $132 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($132)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $133 = ($$pre|0)==(0|0);
   if ($133) {
    $$117 = $$0;$$1215 = $$01;
    ___resumeException($$117|0);
    // unreachable;
   } else {
    $$pre19 = HEAP32[$1>>2]|0;
    $$116 = $$0;$$1214 = $$01;$134 = $$pre19;$135 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($134|0,($135|0));
 $136 = __THREW__; __THREW__ = 0;
 $137 = $136&1;
 if ($137) {
  $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $139 = tempRet0;
  ___clang_call_terminate($138);
  // unreachable;
 } else {
  $$117 = $$116;$$1215 = $$1214;
  ___resumeException($$117|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0;
 var $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$477 = 0, $$478 = 0, $$479 = 0, $$480 = 0, $$481 = 0, $$482 = 0;
 var $$483 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$ph$ph = 0, $$ph$ph251$ph$ph$ph$ph$ph = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i179 = 0, $$pre$i$i$i194 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i91 = 0, $$pre$i163 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0;
 var $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $$pre465 = 0, $$pre466 = 0, $$pre467 = 0, $$pre468 = 0, $$pre469 = 0, $$pre470 = 0, $$sum = 0, $$sum471 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0377 = 0;
 var $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0;
 var $free232 = 0, $free232$ph$ph = 0, $free232$ph$ph250$ph$ph$ph$ph$ph = 0, $free234 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond247 = 0, $or$cond248 = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i180 = 0, $phitmp$i$i$i195 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i92 = 0, $phitmp$i4$i$i201 = 0, $phitmp$i4$i$i48 = 0;
 var $phitmp$i4$i$i98 = 0, $switch = 0, $tmp$i$i100 = 0, $tmp$i$i203 = 0, $tmp$i$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $__gbuf = sp + 72|0;
 $__pat = sp + 24|0;
 $__dp = sp;
 $__ts = sp + 52|0;
 $__grp = sp + 56|0;
 $__sym = sp + 472|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 40|0;
 $__spaces = sp + 28|0;
 $__fd = sp + 8|0;
 $__et = sp + 4|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(667,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   $67 = $__gbuf;$free232 = 661;$lpad$phi$index = $64;$lpad$phi$index8 = $65;
  } else {
   $2 = (($__gbuf) + 400|0);
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = (($__nsn) + 4|0);
   $5 = (($__nsn) + 8|0);
   $6 = (($__psn) + 4|0);
   $7 = (($__psn) + 8|0);
   $8 = $__flags & 512;
   $9 = ($8|0)!=(0);
   $10 = (($__sym) + 4|0);
   $11 = (($__sym) + 8|0);
   $12 = (($__spaces) + 4|0);
   $13 = (($__spaces) + 8|0);
   $14 = (($__pat) + 3|0);
   $15 = (($__wb) + 4|0);
   $16 = (($__grp) + 4|0);
   $922 = $2;$923 = $__gbuf;$924 = $__gbuf;$925 = $__we;$__p$0377 = 0;$__trailing_sign$0379 = 0;$free228372 = 661;
   L4: while(1) {
    $17 = HEAP32[$__b>>2]|0;
    $18 = ($17|0)==(0|0);
    do {
     if ($18) {
      $926 = 1;
     } else {
      $19 = (($17) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + 16|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $24 = HEAP32[$17>>2]|0;
       $25 = (($24) + 36|0);
       $26 = HEAP32[$25>>2]|0;
       __THREW__ = 0;
       $27 = (invoke_ii($26|0,($17|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i$i$i18 = $27;
       }
      } else {
       $30 = HEAP32[$20>>2]|0;
       $$0$i$i$i$i18 = $30;
      }
      $31 = ($$0$i$i$i$i18|0)==(-1);
      if ($31) {
       HEAP32[$__b>>2] = 0;
       $926 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $926 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $32 = HEAP32[$__e>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      label = 16;
     } else {
      $34 = (($32) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($32) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = (($39) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i1$i$i24 = $42;
       }
      } else {
       $45 = HEAP32[$35>>2]|0;
       $$0$i$i1$i$i24 = $45;
      }
      $46 = ($$0$i$i1$i$i24|0)==(-1);
      if ($46) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($926) {
        $927 = $32;
        break;
       } else {
        $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
        label = 322;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($926) {
      $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
      label = 322;
      break;
     } else {
      $927 = 0;
     }
    }
    $47 = (($__pat) + ($__p$0377)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    L28: do {
     switch ($49|0) {
     case 0:  {
      label = 42;
      break;
     }
     case 1:  {
      $cond = ($__p$0377|0)==(3);
      if ($cond) {
       $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L4;
      }
      $72 = HEAP32[$__b>>2]|0;
      $73 = (($72) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($72) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$72>>2]|0;
       $79 = (($78) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       $81 = (invoke_ii($80|0,($72|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i33 = $81;
       }
      } else {
       $84 = HEAP32[$74>>2]|0;
       $$0$i$i33 = $84;
      }
      $85 = HEAP32[$__ct>>2]|0;
      $86 = (($85) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      __THREW__ = 0;
      $88 = (invoke_iiii($87|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      if ($90) {
       $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L4;
      }
      if (!($88)) {
       label = 41;
       break L4;
      }
      $91 = HEAP32[$__b>>2]|0;
      $92 = (($91) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 16|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($93|0)==($95|0);
      if ($96) {
       $97 = HEAP32[$91>>2]|0;
       $98 = (($97) + 40|0);
       $99 = HEAP32[$98>>2]|0;
       __THREW__ = 0;
       $100 = (invoke_ii($99|0,($91|0))|0);
       $101 = __THREW__; __THREW__ = 0;
       $102 = $101&1;
       if ($102) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i37 = $100;
       }
      } else {
       $103 = (($93) + 4|0);
       HEAP32[$92>>2] = $103;
       $104 = HEAP32[$93>>2]|0;
       $$0$i$i37 = $104;
      }
      __THREW__ = 0;
      invoke_vii(668,($__spaces|0),($$0$i$i37|0));
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L4;
      } else {
       label = 42;
      }
      break;
     }
     case 3:  {
      $176 = HEAP8[$__psn>>0]|0;
      $177 = $176 & 1;
      $178 = ($177<<24>>24)==(0);
      if ($178) {
       $180 = $176&255;
       $181 = $180 >>> 1;
       $191 = $181;
      } else {
       $179 = HEAP32[$6>>2]|0;
       $191 = $179;
      }
      $182 = HEAP8[$__nsn>>0]|0;
      $183 = $182 & 1;
      $184 = ($183<<24>>24)==(0);
      if ($184) {
       $186 = $182&255;
       $187 = $186 >>> 1;
       $189 = $187;
      } else {
       $185 = HEAP32[$4>>2]|0;
       $189 = $185;
      }
      $188 = (0 - ($189))|0;
      $190 = ($191|0)==($188|0);
      if ($190) {
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      } else {
       if ($178) {
        $193 = $176&255;
        $194 = $193 >>> 1;
        $196 = $194;
       } else {
        $192 = HEAP32[$6>>2]|0;
        $196 = $192;
       }
       $195 = ($196|0)==(0);
       if (!($195)) {
        if ($184) {
         $198 = $182&255;
         $199 = $198 >>> 1;
         $201 = $199;
        } else {
         $197 = HEAP32[$4>>2]|0;
         $201 = $197;
        }
        $200 = ($201|0)==(0);
        if (!($200)) {
         $279 = HEAP32[$__b>>2]|0;
         $280 = (($279) + 12|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = (($279) + 16|0);
         $283 = HEAP32[$282>>2]|0;
         $284 = ($281|0)==($283|0);
         if ($284) {
          $285 = HEAP32[$279>>2]|0;
          $286 = (($285) + 36|0);
          $287 = HEAP32[$286>>2]|0;
          __THREW__ = 0;
          $288 = (invoke_ii($287|0,($279|0))|0);
          $289 = __THREW__; __THREW__ = 0;
          $290 = $289&1;
          if ($290) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L4;
          }
          $$pre467 = HEAP8[$__psn>>0]|0;
          $$0$i$i104 = $288;$293 = $$pre467;
         } else {
          $291 = HEAP32[$281>>2]|0;
          $$0$i$i104 = $291;$293 = $176;
         }
         $292 = $293 & 1;
         $294 = ($292<<24>>24)==(0);
         $295 = HEAP32[$7>>2]|0;
         $$478 = $294 ? $6 : $295;
         $296 = HEAP32[$$478>>2]|0;
         $297 = ($$0$i$i104|0)==($296|0);
         $298 = HEAP32[$__b>>2]|0;
         $299 = (($298) + 12|0);
         $300 = HEAP32[$299>>2]|0;
         $301 = (($298) + 16|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = ($300|0)==($302|0);
         if ($297) {
          if ($303) {
           $304 = HEAP32[$298>>2]|0;
           $305 = (($304) + 40|0);
           $306 = HEAP32[$305>>2]|0;
           __THREW__ = 0;
           (invoke_ii($306|0,($298|0))|0);
           $307 = __THREW__; __THREW__ = 0;
           $308 = $307&1;
           if ($308) {
            $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
            label = 25;
            break L4;
           }
          } else {
           $309 = (($300) + 4|0);
           HEAP32[$299>>2] = $309;
          }
          $310 = HEAP8[$__psn>>0]|0;
          $311 = $310 & 1;
          $312 = ($311<<24>>24)==(0);
          if ($312) {
           $314 = $310&255;
           $315 = $314 >>> 1;
           $317 = $315;
          } else {
           $313 = HEAP32[$6>>2]|0;
           $317 = $313;
          }
          $316 = ($317>>>0)>(1);
          $__psn$__trailing_sign$05 = $316 ? $__psn : $__trailing_sign$0379;
          $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free229 = $free228372;
          break L28;
         }
         if ($303) {
          $318 = HEAP32[$298>>2]|0;
          $319 = (($318) + 36|0);
          $320 = HEAP32[$319>>2]|0;
          __THREW__ = 0;
          $321 = (invoke_ii($320|0,($298|0))|0);
          $322 = __THREW__; __THREW__ = 0;
          $323 = $322&1;
          if ($323) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L4;
          } else {
           $$0$i$i113 = $321;
          }
         } else {
          $324 = HEAP32[$300>>2]|0;
          $$0$i$i113 = $324;
         }
         $325 = HEAP8[$__nsn>>0]|0;
         $326 = $325 & 1;
         $327 = ($326<<24>>24)==(0);
         $328 = HEAP32[$5>>2]|0;
         $$479 = $327 ? $4 : $328;
         $329 = HEAP32[$$479>>2]|0;
         $330 = ($$0$i$i113|0)==($329|0);
         if (!($330)) {
          label = 134;
          break L4;
         }
         $331 = HEAP32[$__b>>2]|0;
         $332 = (($331) + 12|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = (($331) + 16|0);
         $335 = HEAP32[$334>>2]|0;
         $336 = ($333|0)==($335|0);
         if ($336) {
          $337 = HEAP32[$331>>2]|0;
          $338 = (($337) + 40|0);
          $339 = HEAP32[$338>>2]|0;
          __THREW__ = 0;
          (invoke_ii($339|0,($331|0))|0);
          $340 = __THREW__; __THREW__ = 0;
          $341 = $340&1;
          if ($341) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L4;
          }
         } else {
          $342 = (($333) + 4|0);
          HEAP32[$332>>2] = $342;
         }
         HEAP8[$__neg>>0] = 1;
         $343 = HEAP8[$__nsn>>0]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         if ($345) {
          $347 = $343&255;
          $348 = $347 >>> 1;
          $350 = $348;
         } else {
          $346 = HEAP32[$4>>2]|0;
          $350 = $346;
         }
         $349 = ($350>>>0)>(1);
         $__nsn$__trailing_sign$06 = $349 ? $__nsn : $__trailing_sign$0379;
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free229 = $free228372;
         break L28;
        }
       }
       if ($178) {
        $203 = $176&255;
        $204 = $203 >>> 1;
        $206 = $204;
       } else {
        $202 = HEAP32[$6>>2]|0;
        $206 = $202;
       }
       $205 = ($206|0)==(0);
       $207 = HEAP32[$__b>>2]|0;
       $208 = (($207) + 12|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = (($207) + 16|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($209|0)==($211|0);
       if ($205) {
        if ($212) {
         $246 = HEAP32[$207>>2]|0;
         $247 = (($246) + 36|0);
         $248 = HEAP32[$247>>2]|0;
         __THREW__ = 0;
         $249 = (invoke_ii($248|0,($207|0))|0);
         $250 = __THREW__; __THREW__ = 0;
         $251 = $250&1;
         if ($251) {
          $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L4;
         }
         $$pre465 = HEAP8[$__nsn>>0]|0;
         $$0$i$i79 = $249;$254 = $$pre465;
        } else {
         $252 = HEAP32[$209>>2]|0;
         $$0$i$i79 = $252;$254 = $182;
        }
        $253 = $254 & 1;
        $255 = ($253<<24>>24)==(0);
        $256 = HEAP32[$5>>2]|0;
        $$477 = $255 ? $4 : $256;
        $257 = HEAP32[$$477>>2]|0;
        $258 = ($$0$i$i79|0)==($257|0);
        if (!($258)) {
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L28;
        }
        $259 = HEAP32[$__b>>2]|0;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = (($259) + 16|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($261|0)==($263|0);
        if ($264) {
         $265 = HEAP32[$259>>2]|0;
         $266 = (($265) + 40|0);
         $267 = HEAP32[$266>>2]|0;
         __THREW__ = 0;
         (invoke_ii($267|0,($259|0))|0);
         $268 = __THREW__; __THREW__ = 0;
         $269 = $268&1;
         if ($269) {
          $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L4;
         }
        } else {
         $270 = (($261) + 4|0);
         HEAP32[$260>>2] = $270;
        }
        HEAP8[$__neg>>0] = 1;
        $271 = HEAP8[$__nsn>>0]|0;
        $272 = $271 & 1;
        $273 = ($272<<24>>24)==(0);
        if ($273) {
         $275 = $271&255;
         $276 = $275 >>> 1;
         $278 = $276;
        } else {
         $274 = HEAP32[$4>>2]|0;
         $278 = $274;
        }
        $277 = ($278>>>0)>(1);
        $__nsn$__trailing_sign$0 = $277 ? $__nsn : $__trailing_sign$0379;
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free229 = $free228372;
        break L28;
       }
       if ($212) {
        $213 = HEAP32[$207>>2]|0;
        $214 = (($213) + 36|0);
        $215 = HEAP32[$214>>2]|0;
        __THREW__ = 0;
        $216 = (invoke_ii($215|0,($207|0))|0);
        $217 = __THREW__; __THREW__ = 0;
        $218 = $217&1;
        if ($218) {
         $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L4;
        }
        $$pre466 = HEAP8[$__psn>>0]|0;
        $$0$i$i71 = $216;$221 = $$pre466;
       } else {
        $219 = HEAP32[$209>>2]|0;
        $$0$i$i71 = $219;$221 = $176;
       }
       $220 = $221 & 1;
       $222 = ($220<<24>>24)==(0);
       $223 = HEAP32[$7>>2]|0;
       $$ = $222 ? $6 : $223;
       $224 = HEAP32[$$>>2]|0;
       $225 = ($$0$i$i71|0)==($224|0);
       if (!($225)) {
        HEAP8[$__neg>>0] = 1;
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L28;
       }
       $226 = HEAP32[$__b>>2]|0;
       $227 = (($226) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($226) + 16|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($228|0)==($230|0);
       if ($231) {
        $232 = HEAP32[$226>>2]|0;
        $233 = (($232) + 40|0);
        $234 = HEAP32[$233>>2]|0;
        __THREW__ = 0;
        (invoke_ii($234|0,($226|0))|0);
        $235 = __THREW__; __THREW__ = 0;
        $236 = $235&1;
        if ($236) {
         $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L4;
        }
       } else {
        $237 = (($228) + 4|0);
        HEAP32[$227>>2] = $237;
       }
       $238 = HEAP8[$__psn>>0]|0;
       $239 = $238 & 1;
       $240 = ($239<<24>>24)==(0);
       if ($240) {
        $242 = $238&255;
        $243 = $242 >>> 1;
        $245 = $243;
       } else {
        $241 = HEAP32[$6>>2]|0;
        $245 = $241;
       }
       $244 = ($245>>>0)>(1);
       $__psn$__trailing_sign$0 = $244 ? $__psn : $__trailing_sign$0379;
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free229 = $free228372;
      }
      break;
     }
     case 2:  {
      $353 = ($__trailing_sign$0379|0)!=(0|0);
      $354 = ($__p$0377>>>0)<(2);
      $or$cond = $353 | $354;
      if (!($or$cond)) {
       $355 = ($__p$0377|0)==(2);
       if ($355) {
        $356 = HEAP8[$14>>0]|0;
        $357 = ($356<<24>>24)!=(0);
        $358 = $357;
       } else {
        $358 = 0;
       }
       $brmerge = $9 | $358;
       if (!($brmerge)) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = 0;$free229 = $free228372;
        break L28;
       }
      }
      $359 = HEAP8[$__sym>>0]|0;
      $360 = $359 & 1;
      $361 = ($360<<24>>24)==(0);
      $362 = HEAP32[$11>>2]|0;
      $$480 = $361 ? $10 : $362;
      $363 = ($__p$0377|0)==(0);
      L136: do {
       if ($363) {
        $$pre$i3$i$i200 = $927;$427 = $359;$437 = $$480;$454 = $927;
       } else {
        $364 = (($__p$0377) + -1)|0;
        $365 = (($__pat) + ($364)|0);
        $366 = HEAP8[$365>>0]|0;
        $switch = ($366&255)<(2);
        if ($switch) {
         $368 = $359;$378 = $$480;
         while(1) {
          $367 = $368 & 1;
          $369 = ($367<<24>>24)==(0);
          if ($369) {
           $372 = $368&255;
           $373 = $372 >>> 1;
           $375 = $10;$376 = $373;
          } else {
           $370 = HEAP32[$11>>2]|0;
           $371 = HEAP32[$10>>2]|0;
           $375 = $370;$376 = $371;
          }
          $374 = (($375) + ($376<<2)|0);
          $377 = ($378|0)==($374|0);
          if ($377) {
           $388 = $368;
           break;
          }
          $379 = HEAP32[$378>>2]|0;
          $380 = HEAP32[$__ct>>2]|0;
          $381 = (($380) + 12|0);
          $382 = HEAP32[$381>>2]|0;
          __THREW__ = 0;
          $383 = (invoke_iiii($382|0,($__ct|0),8192,($379|0))|0);
          $384 = __THREW__; __THREW__ = 0;
          $385 = $384&1;
          if ($385) {
           label = 22;
           break L4;
          }
          if (!($383)) {
           label = 148;
           break;
          }
          $386 = (($378) + 4|0);
          $$pre468 = HEAP8[$__sym>>0]|0;
          $368 = $$pre468;$378 = $386;
         }
         if ((label|0) == 148) {
          label = 0;
          $$pre469 = HEAP8[$__sym>>0]|0;
          $388 = $$pre469;
         }
         $387 = $388 & 1;
         $389 = ($387<<24>>24)==(0);
         $390 = HEAP32[$11>>2]|0;
         $$481 = $389 ? $10 : $390;
         $391 = $378;
         $392 = $$481;
         $393 = (($391) - ($392))|0;
         $394 = $393 >> 2;
         $395 = HEAP8[$__spaces>>0]|0;
         $396 = $395 & 1;
         $397 = ($396<<24>>24)==(0);
         if ($397) {
          $399 = $395&255;
          $400 = $399 >>> 1;
          $402 = $400;
         } else {
          $398 = HEAP32[$12>>2]|0;
          $402 = $398;
         }
         $401 = ($394>>>0)>($402>>>0);
         L154: do {
          if (!($401)) {
           if ($397) {
            $406 = $395&255;
            $407 = $406 >>> 1;
            $$sum471 = (($407) - ($394))|0;
            $408 = (($12) + ($$sum471<<2)|0);
            $409 = $395&255;
            $410 = $409 >>> 1;
            $412 = $12;$413 = $410;$416 = $408;
           } else {
            $403 = HEAP32[$13>>2]|0;
            $404 = HEAP32[$12>>2]|0;
            $$sum = (($404) - ($394))|0;
            $405 = (($403) + ($$sum<<2)|0);
            $412 = $403;$413 = $404;$416 = $405;
           }
           $411 = (($412) + ($413<<2)|0);
           $414 = HEAP32[$11>>2]|0;
           $$482 = $389 ? $10 : $414;
           $415 = ($416|0)==($411|0);
           if ($415) {
            $$pre$i3$i$i200 = $927;$427 = $388;$437 = $378;$454 = $927;
            break L136;
           } else {
            $418 = $416;$420 = $$482;
           }
           while(1) {
            $417 = HEAP32[$418>>2]|0;
            $419 = HEAP32[$420>>2]|0;
            $421 = ($417|0)==($419|0);
            if (!($421)) {
             break L154;
            }
            $422 = (($418) + 4|0);
            $423 = ($422|0)==($411|0);
            if ($423) {
             $$pre$i3$i$i200 = $927;$427 = $388;$437 = $378;$454 = $927;
             break L136;
            }
            $424 = (($420) + 4|0);
            $418 = $422;$420 = $424;
           }
          }
         } while(0);
         $425 = HEAP32[$11>>2]|0;
         $$483 = $389 ? $10 : $425;
         $$pre$i3$i$i200 = $927;$427 = $388;$437 = $$483;$454 = $927;
        } else {
         $$pre$i3$i$i200 = $927;$427 = $359;$437 = $$480;$454 = $927;
        }
       }
      } while(0);
      L165: while(1) {
       $426 = $427 & 1;
       $428 = ($426<<24>>24)==(0);
       if ($428) {
        $431 = $427&255;
        $432 = $431 >>> 1;
        $434 = $10;$435 = $432;
       } else {
        $429 = HEAP32[$11>>2]|0;
        $430 = HEAP32[$10>>2]|0;
        $434 = $429;$435 = $430;
       }
       $433 = (($434) + ($435<<2)|0);
       $436 = ($437|0)==($433|0);
       if ($436) {
        break;
       }
       $438 = HEAP32[$__b>>2]|0;
       $439 = ($438|0)==(0|0);
       do {
        if ($439) {
         $468 = 1;
        } else {
         $440 = (($438) + 12|0);
         $441 = HEAP32[$440>>2]|0;
         $442 = (($438) + 16|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = ($441|0)==($443|0);
         if ($444) {
          $445 = HEAP32[$438>>2]|0;
          $446 = (($445) + 36|0);
          $447 = HEAP32[$446>>2]|0;
          __THREW__ = 0;
          $448 = (invoke_ii($447|0,($438|0))|0);
          $449 = __THREW__; __THREW__ = 0;
          $450 = $449&1;
          if ($450) {
           label = 23;
           break L4;
          } else {
           $$0$i$i$i$i192 = $448;
          }
         } else {
          $451 = HEAP32[$441>>2]|0;
          $$0$i$i$i$i192 = $451;
         }
         $452 = ($$0$i$i$i$i192|0)==(-1);
         if ($452) {
          HEAP32[$__b>>2] = 0;
          $468 = 1;
          break;
         } else {
          $$pre$i$i$i194 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i195 = ($$pre$i$i$i194|0)==(0|0);
          $468 = $phitmp$i$i$i195;
          break;
         }
        }
       } while(0);
       $453 = ($454|0)==(0|0);
       do {
        if ($453) {
         $$pre$i3$i$i200456 = $$pre$i3$i$i200;
         label = 178;
        } else {
         $455 = (($454) + 12|0);
         $456 = HEAP32[$455>>2]|0;
         $457 = (($454) + 16|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = ($456|0)==($458|0);
         if ($459) {
          $460 = HEAP32[$454>>2]|0;
          $461 = (($460) + 36|0);
          $462 = HEAP32[$461>>2]|0;
          __THREW__ = 0;
          $463 = (invoke_ii($462|0,($454|0))|0);
          $464 = __THREW__; __THREW__ = 0;
          $465 = $464&1;
          if ($465) {
           label = 23;
           break L4;
          } else {
           $$0$i$i1$i$i198 = $463;
          }
         } else {
          $466 = HEAP32[$456>>2]|0;
          $$0$i$i1$i$i198 = $466;
         }
         $467 = ($$0$i$i1$i$i198|0)==(-1);
         if ($467) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i200456 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i201 = ($$pre$i3$i$i200|0)==(0|0);
          $tmp$i$i203 = $468 ^ $phitmp$i4$i$i201;
          if ($tmp$i$i203) {
           $$pre$i3$i$i200455 = $$pre$i3$i$i200;$934 = $$pre$i3$i$i200;
           break;
          } else {
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($468) {
         break;
        } else {
         $$pre$i3$i$i200455 = $$pre$i3$i$i200456;$934 = 0;
        }
       }
       $469 = HEAP32[$__b>>2]|0;
       $470 = (($469) + 12|0);
       $471 = HEAP32[$470>>2]|0;
       $472 = (($469) + 16|0);
       $473 = HEAP32[$472>>2]|0;
       $474 = ($471|0)==($473|0);
       if ($474) {
        $475 = HEAP32[$469>>2]|0;
        $476 = (($475) + 36|0);
        $477 = HEAP32[$476>>2]|0;
        __THREW__ = 0;
        $478 = (invoke_ii($477|0,($469|0))|0);
        $479 = __THREW__; __THREW__ = 0;
        $480 = $479&1;
        if ($480) {
         label = 23;
         break L4;
        } else {
         $$0$i$i207 = $478;
        }
       } else {
        $481 = HEAP32[$471>>2]|0;
        $$0$i$i207 = $481;
       }
       $482 = HEAP32[$437>>2]|0;
       $483 = ($$0$i$i207|0)==($482|0);
       if (!($483)) {
        break;
       }
       $484 = HEAP32[$__b>>2]|0;
       $485 = (($484) + 12|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (($484) + 16|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = ($486|0)==($488|0);
       if ($489) {
        $490 = HEAP32[$484>>2]|0;
        $491 = (($490) + 40|0);
        $492 = HEAP32[$491>>2]|0;
        __THREW__ = 0;
        (invoke_ii($492|0,($484|0))|0);
        $493 = __THREW__; __THREW__ = 0;
        $494 = $493&1;
        if ($494) {
         label = 23;
         break L4;
        }
       } else {
        $495 = (($486) + 4|0);
        HEAP32[$485>>2] = $495;
       }
       $496 = (($437) + 4|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i200 = $$pre$i3$i$i200455;$427 = $$pre;$437 = $496;$454 = $934;
      }
      if ($9) {
       $497 = HEAP8[$__sym>>0]|0;
       $498 = $497 & 1;
       $499 = ($498<<24>>24)==(0);
       if ($499) {
        $502 = $497&255;
        $503 = $502 >>> 1;
        $505 = $10;$506 = $503;
       } else {
        $500 = HEAP32[$11>>2]|0;
        $501 = HEAP32[$10>>2]|0;
        $505 = $500;$506 = $501;
       }
       $504 = (($505) + ($506<<2)|0);
       $507 = ($437|0)==($504|0);
       if ($507) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       } else {
        label = 193;
        break L4;
       }
      } else {
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      }
      break;
     }
     case 4:  {
      $561 = $925;$602 = $923;$603 = $922;$607 = $924;$__ng$0 = 0;$free227 = $free228372;
      L209: while(1) {
       $510 = HEAP32[$__b>>2]|0;
       $511 = ($510|0)==(0|0);
       do {
        if ($511) {
         $935 = 1;
        } else {
         $512 = (($510) + 12|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = (($510) + 16|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($513|0)==($515|0);
         if ($516) {
          $517 = HEAP32[$510>>2]|0;
          $518 = (($517) + 36|0);
          $519 = HEAP32[$518>>2]|0;
          __THREW__ = 0;
          $520 = (invoke_ii($519|0,($510|0))|0);
          $521 = __THREW__; __THREW__ = 0;
          $522 = $521&1;
          if ($522) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          } else {
           $$0$i$i$i$i177 = $520;
          }
         } else {
          $523 = HEAP32[$513>>2]|0;
          $$0$i$i$i$i177 = $523;
         }
         $524 = ($$0$i$i$i$i177|0)==(-1);
         if ($524) {
          HEAP32[$__b>>2] = 0;
          $935 = 1;
          break;
         } else {
          $$pre$i$i$i179 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i180 = ($$pre$i$i$i179|0)==(0|0);
          $935 = $phitmp$i$i$i180;
          break;
         }
        }
       } while(0);
       $525 = HEAP32[$__e>>2]|0;
       $526 = ($525|0)==(0|0);
       do {
        if ($526) {
         label = 207;
        } else {
         $527 = (($525) + 12|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = (($525) + 16|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = ($528|0)==($530|0);
         if ($531) {
          $532 = HEAP32[$525>>2]|0;
          $533 = (($532) + 36|0);
          $534 = HEAP32[$533>>2]|0;
          __THREW__ = 0;
          $535 = (invoke_ii($534|0,($525|0))|0);
          $536 = __THREW__; __THREW__ = 0;
          $537 = $536&1;
          if ($537) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          } else {
           $$0$i$i1$i$i183 = $535;
          }
         } else {
          $538 = HEAP32[$528>>2]|0;
          $$0$i$i1$i$i183 = $538;
         }
         $539 = ($$0$i$i1$i$i183|0)==(-1);
         if ($539) {
          HEAP32[$__e>>2] = 0;
          label = 207;
          break;
         } else {
          if ($935) {
           break;
          } else {
           break L209;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($935) {
         break;
        }
       }
       $540 = HEAP32[$__b>>2]|0;
       $541 = (($540) + 12|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = (($540) + 16|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ($542|0)==($544|0);
       if ($545) {
        $546 = HEAP32[$540>>2]|0;
        $547 = (($546) + 36|0);
        $548 = HEAP32[$547>>2]|0;
        __THREW__ = 0;
        $549 = (invoke_ii($548|0,($540|0))|0);
        $550 = __THREW__; __THREW__ = 0;
        $551 = $550&1;
        if ($551) {
         $$ph$ph = $607;$free232$ph$ph = $free227;
         label = 20;
         break L4;
        } else {
         $$0$i$i173 = $549;
        }
       } else {
        $552 = HEAP32[$542>>2]|0;
        $$0$i$i173 = $552;
       }
       $553 = HEAP32[$__ct>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       __THREW__ = 0;
       $556 = (invoke_iiii($555|0,($__ct|0),2048,($$0$i$i173|0))|0);
       $557 = __THREW__; __THREW__ = 0;
       $558 = $557&1;
       if ($558) {
        $$ph$ph = $607;$free232$ph$ph = $free227;
        label = 20;
        break L4;
       }
       if ($556) {
        $559 = HEAP32[$__wn>>2]|0;
        $560 = ($559|0)==($561|0);
        if ($560) {
         $562 = HEAP32[$15>>2]|0;
         $563 = ($562|0)!=(661|0);
         $564 = HEAP32[$__wb>>2]|0;
         $565 = $561;
         $566 = $564;
         $567 = (($565) - ($566))|0;
         $568 = ($567>>>0)<(2147483647);
         $569 = $567 << 1;
         $$$i159 = $568 ? $569 : -1;
         $570 = $567 >> 2;
         if ($563) {
          $571 = $564;
         } else {
          $571 = 0;
         }
         $572 = (_realloc($571,$$$i159)|0);
         $573 = ($572|0)==(0|0);
         if ($573) {
          __THREW__ = 0;
          invoke_v(635);
          $574 = __THREW__; __THREW__ = 0;
          $575 = $574&1;
          if ($575) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          }
         }
         if ($563) {
          HEAP32[$__wb>>2] = $572;
          $584 = $572;
         } else {
          $$pr$i162 = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $572;
          $576 = ($$pr$i162|0)==(0|0);
          if ($576) {
           $584 = $572;
          } else {
           $577 = HEAP32[$15>>2]|0;
           __THREW__ = 0;
           invoke_vi($577|0,($$pr$i162|0));
           $578 = __THREW__; __THREW__ = 0;
           $579 = $578&1;
           if ($579) {
            label = 224;
            break L4;
           }
           $$pre$i163 = HEAP32[$__wb>>2]|0;
           $584 = $$pre$i163;
          }
         }
         HEAP32[$15>>2] = 636;
         $582 = $$$i159 >>> 2;
         $583 = (($584) + ($570<<2)|0);
         HEAP32[$__wn>>2] = $583;
         $585 = HEAP32[$__wb>>2]|0;
         $586 = (($585) + ($582<<2)|0);
         $588 = $583;$936 = $586;
        } else {
         $588 = $559;$936 = $561;
        }
        $587 = (($588) + 4|0);
        HEAP32[$__wn>>2] = $587;
        HEAP32[$588>>2] = $$0$i$i173;
        $589 = (($__ng$0) + 1)|0;
        $937 = $936;$938 = $607;$939 = $602;$940 = $603;$__ng$1 = $589;$free = $free227;
       } else {
        $590 = HEAP8[$__grp>>0]|0;
        $591 = $590 & 1;
        $592 = ($591<<24>>24)==(0);
        if ($592) {
         $594 = $590&255;
         $595 = $594 >>> 1;
         $597 = $595;
        } else {
         $593 = HEAP32[$16>>2]|0;
         $597 = $593;
        }
        $596 = ($597|0)==(0);
        $598 = ($__ng$0|0)==(0);
        $or$cond7 = $596 | $598;
        if ($or$cond7) {
         break;
        }
        $599 = HEAP32[$__ts>>2]|0;
        $600 = ($$0$i$i173|0)==($599|0);
        if (!($600)) {
         break;
        }
        $601 = ($602|0)==($603|0);
        if ($601) {
         $604 = ($free227|0)!=(661|0);
         $605 = $602;
         $606 = $607;
         $608 = (($605) - ($606))|0;
         $609 = ($608>>>0)<(2147483647);
         $610 = $608 << 1;
         $$$i149 = $609 ? $610 : -1;
         $611 = $608 >> 2;
         if ($604) {
          $612 = $607;
         } else {
          $612 = 0;
         }
         $613 = (_realloc($612,$$$i149)|0);
         $614 = ($613|0)==(0|0);
         if ($614) {
          __THREW__ = 0;
          invoke_v(635);
          $615 = __THREW__; __THREW__ = 0;
          $616 = $615&1;
          if ($616) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          }
         }
         $617 = ($607|0)==(0|0);
         $or$cond247 = $604 | $617;
         if (!($or$cond247)) {
         }
         $618 = $$$i149 >>> 2;
         $619 = (($613) + ($611<<2)|0);
         $620 = (($613) + ($618<<2)|0);
         $622 = $619;$941 = $613;$942 = $620;$free226 = 636;
        } else {
         $622 = $602;$941 = $607;$942 = $603;$free226 = $free227;
        }
        $621 = (($622) + 4|0);
        HEAP32[$622>>2] = $__ng$0;
        $937 = $561;$938 = $941;$939 = $621;$940 = $942;$__ng$1 = 0;$free = $free226;
       }
       $623 = HEAP32[$__b>>2]|0;
       $624 = (($623) + 12|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = (($623) + 16|0);
       $627 = HEAP32[$626>>2]|0;
       $628 = ($625|0)==($627|0);
       if ($628) {
        $629 = HEAP32[$623>>2]|0;
        $630 = (($629) + 40|0);
        $631 = HEAP32[$630>>2]|0;
        __THREW__ = 0;
        (invoke_ii($631|0,($623|0))|0);
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         $$ph$ph = $938;$free232$ph$ph = $free;
         label = 20;
         break L4;
        } else {
         $561 = $937;$602 = $939;$603 = $940;$607 = $938;$__ng$0 = $__ng$1;$free227 = $free;
         continue;
        }
       } else {
        $634 = (($625) + 4|0);
        HEAP32[$624>>2] = $634;
        $561 = $937;$602 = $939;$603 = $940;$607 = $938;$__ng$0 = $__ng$1;$free227 = $free;
        continue;
       }
      }
      $635 = ($607|0)==($602|0);
      $636 = ($__ng$0|0)==(0);
      $or$cond8 = $635 | $636;
      if ($or$cond8) {
       $932 = $607;$943 = $602;$944 = $603;$free230 = $free227;
      } else {
       $637 = ($602|0)==($603|0);
       if ($637) {
        $638 = ($free227|0)!=(661|0);
        $639 = $602;
        $640 = $607;
        $641 = (($639) - ($640))|0;
        $642 = ($641>>>0)<(2147483647);
        $643 = $641 << 1;
        $$$i138 = $642 ? $643 : -1;
        $644 = $641 >> 2;
        if ($638) {
         $645 = $607;
        } else {
         $645 = 0;
        }
        $646 = (_realloc($645,$$$i138)|0);
        $647 = ($646|0)==(0|0);
        if ($647) {
         __THREW__ = 0;
         invoke_v(635);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          $$ph$ph251$ph$ph$ph$ph$ph = $607;$free232$ph$ph250$ph$ph$ph$ph$ph = $free227;
          label = 25;
          break L4;
         }
        }
        $650 = ($607|0)==(0|0);
        $or$cond248 = $638 | $650;
        if (!($or$cond248)) {
        }
        $651 = $$$i138 >>> 2;
        $652 = (($646) + ($644<<2)|0);
        $653 = (($646) + ($651<<2)|0);
        $655 = $652;$945 = $646;$946 = $653;$free231 = 636;
       } else {
        $655 = $602;$945 = $607;$946 = $603;$free231 = $free227;
       }
       $654 = (($655) + 4|0);
       HEAP32[$655>>2] = $__ng$0;
       $932 = $945;$943 = $654;$944 = $946;$free230 = $free231;
      }
      $656 = HEAP32[$__fd>>2]|0;
      $657 = ($656|0)>(0);
      if ($657) {
       $658 = HEAP32[$__b>>2]|0;
       $659 = ($658|0)==(0|0);
       do {
        if ($659) {
         $948 = 1;
        } else {
         $660 = (($658) + 12|0);
         $661 = HEAP32[$660>>2]|0;
         $662 = (($658) + 16|0);
         $663 = HEAP32[$662>>2]|0;
         $664 = ($661|0)==($663|0);
         if ($664) {
          $665 = HEAP32[$658>>2]|0;
          $666 = (($665) + 36|0);
          $667 = HEAP32[$666>>2]|0;
          __THREW__ = 0;
          $668 = (invoke_ii($667|0,($658|0))|0);
          $669 = __THREW__; __THREW__ = 0;
          $670 = $669&1;
          if ($670) {
           $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i123 = $668;
          }
         } else {
          $671 = HEAP32[$661>>2]|0;
          $$0$i$i$i$i123 = $671;
         }
         $672 = ($$0$i$i$i$i123|0)==(-1);
         if ($672) {
          HEAP32[$__b>>2] = 0;
          $948 = 1;
          break;
         } else {
          $$pre$i$i$i125 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
          $948 = $phitmp$i$i$i126;
          break;
         }
        }
       } while(0);
       $673 = HEAP32[$__e>>2]|0;
       $674 = ($673|0)==(0|0);
       do {
        if ($674) {
         label = 268;
        } else {
         $675 = (($673) + 12|0);
         $676 = HEAP32[$675>>2]|0;
         $677 = (($673) + 16|0);
         $678 = HEAP32[$677>>2]|0;
         $679 = ($676|0)==($678|0);
         if ($679) {
          $680 = HEAP32[$673>>2]|0;
          $681 = (($680) + 36|0);
          $682 = HEAP32[$681>>2]|0;
          __THREW__ = 0;
          $683 = (invoke_ii($682|0,($673|0))|0);
          $684 = __THREW__; __THREW__ = 0;
          $685 = $684&1;
          if ($685) {
           $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i129 = $683;
          }
         } else {
          $686 = HEAP32[$676>>2]|0;
          $$0$i$i1$i$i129 = $686;
         }
         $687 = ($$0$i$i1$i$i129|0)==(-1);
         if ($687) {
          HEAP32[$__e>>2] = 0;
          label = 268;
          break;
         } else {
          if ($948) {
           $949 = $673;
           break;
          } else {
           label = 274;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 268) {
        label = 0;
        if ($948) {
         label = 274;
         break L4;
        } else {
         $949 = 0;
        }
       }
       $688 = HEAP32[$__b>>2]|0;
       $689 = (($688) + 12|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($688) + 16|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($690|0)==($692|0);
       if ($693) {
        $694 = HEAP32[$688>>2]|0;
        $695 = (($694) + 36|0);
        $696 = HEAP32[$695>>2]|0;
        __THREW__ = 0;
        $697 = (invoke_ii($696|0,($688|0))|0);
        $698 = __THREW__; __THREW__ = 0;
        $699 = $698&1;
        if ($699) {
         $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L4;
        } else {
         $$0$i$i117 = $697;
        }
       } else {
        $700 = HEAP32[$690>>2]|0;
        $$0$i$i117 = $700;
       }
       $701 = HEAP32[$__dp>>2]|0;
       $702 = ($$0$i$i117|0)==($701|0);
       if (!($702)) {
        label = 274;
        break L4;
       }
       $705 = HEAP32[$__b>>2]|0;
       $706 = (($705) + 12|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = (($705) + 16|0);
       $709 = HEAP32[$708>>2]|0;
       $710 = ($707|0)==($709|0);
       if ($710) {
        $711 = HEAP32[$705>>2]|0;
        $712 = (($711) + 40|0);
        $713 = HEAP32[$712>>2]|0;
        __THREW__ = 0;
        (invoke_ii($713|0,($705|0))|0);
        $714 = __THREW__; __THREW__ = 0;
        $715 = $714&1;
        if ($715) {
         $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L4;
        } else {
         $$pre$i3$i$i97 = $949;$733 = $949;$771 = $561;$813 = $656;
        }
       } else {
        $716 = (($707) + 4|0);
        HEAP32[$706>>2] = $716;
        $$pre$i3$i$i97 = $949;$733 = $949;$771 = $561;$813 = $656;
       }
       while(1) {
        $717 = HEAP32[$__b>>2]|0;
        $718 = ($717|0)==(0|0);
        do {
         if ($718) {
          $747 = 1;
         } else {
          $719 = (($717) + 12|0);
          $720 = HEAP32[$719>>2]|0;
          $721 = (($717) + 16|0);
          $722 = HEAP32[$721>>2]|0;
          $723 = ($720|0)==($722|0);
          if ($723) {
           $724 = HEAP32[$717>>2]|0;
           $725 = (($724) + 36|0);
           $726 = HEAP32[$725>>2]|0;
           __THREW__ = 0;
           $727 = (invoke_ii($726|0,($717|0))|0);
           $728 = __THREW__; __THREW__ = 0;
           $729 = $728&1;
           if ($729) {
            label = 21;
            break L4;
           } else {
            $$0$i$i$i$i89 = $727;
           }
          } else {
           $730 = HEAP32[$720>>2]|0;
           $$0$i$i$i$i89 = $730;
          }
          $731 = ($$0$i$i$i$i89|0)==(-1);
          if ($731) {
           HEAP32[$__b>>2] = 0;
           $747 = 1;
           break;
          } else {
           $$pre$i$i$i91 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
           $747 = $phitmp$i$i$i92;
           break;
          }
         }
        } while(0);
        $732 = ($733|0)==(0|0);
        do {
         if ($732) {
          $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;
          label = 291;
         } else {
          $734 = (($733) + 12|0);
          $735 = HEAP32[$734>>2]|0;
          $736 = (($733) + 16|0);
          $737 = HEAP32[$736>>2]|0;
          $738 = ($735|0)==($737|0);
          if ($738) {
           $739 = HEAP32[$733>>2]|0;
           $740 = (($739) + 36|0);
           $741 = HEAP32[$740>>2]|0;
           __THREW__ = 0;
           $742 = (invoke_ii($741|0,($733|0))|0);
           $743 = __THREW__; __THREW__ = 0;
           $744 = $743&1;
           if ($744) {
            label = 21;
            break L4;
           } else {
            $$0$i$i1$i$i95 = $742;
           }
          } else {
           $745 = HEAP32[$735>>2]|0;
           $$0$i$i1$i$i95 = $745;
          }
          $746 = ($$0$i$i1$i$i95|0)==(-1);
          if ($746) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i97459$ph = 0;
           label = 291;
           break;
          } else {
           $phitmp$i4$i$i98 = ($$pre$i3$i$i97|0)==(0|0);
           $tmp$i$i100 = $747 ^ $phitmp$i4$i$i98;
           if ($tmp$i$i100) {
            $$pre$i3$i$i97459475 = $$pre$i3$i$i97;$950 = $$pre$i3$i$i97;
            break;
           } else {
            label = 298;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 291) {
         label = 0;
         if ($747) {
          label = 298;
          break L4;
         } else {
          $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;$950 = 0;
         }
        }
        $748 = HEAP32[$__b>>2]|0;
        $749 = (($748) + 12|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = (($748) + 16|0);
        $752 = HEAP32[$751>>2]|0;
        $753 = ($750|0)==($752|0);
        if ($753) {
         $754 = HEAP32[$748>>2]|0;
         $755 = (($754) + 36|0);
         $756 = HEAP32[$755>>2]|0;
         __THREW__ = 0;
         $757 = (invoke_ii($756|0,($748|0))|0);
         $758 = __THREW__; __THREW__ = 0;
         $759 = $758&1;
         if ($759) {
          label = 21;
          break L4;
         } else {
          $$0$i$i83 = $757;
         }
        } else {
         $760 = HEAP32[$750>>2]|0;
         $$0$i$i83 = $760;
        }
        $761 = HEAP32[$__ct>>2]|0;
        $762 = (($761) + 12|0);
        $763 = HEAP32[$762>>2]|0;
        __THREW__ = 0;
        $764 = (invoke_iiii($763|0,($__ct|0),2048,($$0$i$i83|0))|0);
        $765 = __THREW__; __THREW__ = 0;
        $766 = $765&1;
        if ($766) {
         label = 21;
         break L4;
        }
        if (!($764)) {
         label = 298;
         break L4;
        }
        $769 = HEAP32[$__wn>>2]|0;
        $770 = ($769|0)==($771|0);
        if ($770) {
         $772 = HEAP32[$15>>2]|0;
         $773 = ($772|0)!=(661|0);
         $774 = HEAP32[$__wb>>2]|0;
         $775 = $771;
         $776 = $774;
         $777 = (($775) - ($776))|0;
         $778 = ($777>>>0)<(2147483647);
         $779 = $777 << 1;
         $$$i = $778 ? $779 : -1;
         $780 = $777 >> 2;
         if ($773) {
          $781 = $774;
         } else {
          $781 = 0;
         }
         $782 = (_realloc($781,$$$i)|0);
         $783 = ($782|0)==(0|0);
         if ($783) {
          __THREW__ = 0;
          invoke_v(635);
          $784 = __THREW__; __THREW__ = 0;
          $785 = $784&1;
          if ($785) {
           label = 21;
           break L4;
          }
         }
         do {
          if ($773) {
           HEAP32[$__wb>>2] = $782;
           $794 = $782;
          } else {
           $$pr$i = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $782;
           $786 = ($$pr$i|0)==(0|0);
           if ($786) {
            $794 = $782;
            break;
           }
           $787 = HEAP32[$15>>2]|0;
           __THREW__ = 0;
           invoke_vi($787|0,($$pr$i|0));
           $788 = __THREW__; __THREW__ = 0;
           $789 = $788&1;
           if ($789) {
            label = 309;
            break L4;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $794 = $$pre$i;
          }
         } while(0);
         HEAP32[$15>>2] = 636;
         $792 = $$$i >>> 2;
         $793 = (($794) + ($780<<2)|0);
         HEAP32[$__wn>>2] = $793;
         $795 = HEAP32[$__wb>>2]|0;
         $796 = (($795) + ($792<<2)|0);
         $951 = $793;$952 = $796;
        } else {
         $951 = $769;$952 = $771;
        }
        $797 = HEAP32[$__b>>2]|0;
        $798 = (($797) + 12|0);
        $799 = HEAP32[$798>>2]|0;
        $800 = (($797) + 16|0);
        $801 = HEAP32[$800>>2]|0;
        $802 = ($799|0)==($801|0);
        if ($802) {
         $803 = HEAP32[$797>>2]|0;
         $804 = (($803) + 36|0);
         $805 = HEAP32[$804>>2]|0;
         __THREW__ = 0;
         $806 = (invoke_ii($805|0,($797|0))|0);
         $807 = __THREW__; __THREW__ = 0;
         $808 = $807&1;
         if ($808) {
          label = 21;
          break L4;
         }
         $$pre470 = HEAP32[$__wn>>2]|0;
         $$0$i$i64 = $806;$811 = $$pre470;
        } else {
         $809 = HEAP32[$799>>2]|0;
         $$0$i$i64 = $809;$811 = $951;
        }
        $810 = (($811) + 4|0);
        HEAP32[$__wn>>2] = $810;
        HEAP32[$811>>2] = $$0$i$i64;
        $812 = (($813) + -1)|0;
        HEAP32[$__fd>>2] = $812;
        $814 = HEAP32[$__b>>2]|0;
        $815 = (($814) + 12|0);
        $816 = HEAP32[$815>>2]|0;
        $817 = (($814) + 16|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        if ($819) {
         $820 = HEAP32[$814>>2]|0;
         $821 = (($820) + 40|0);
         $822 = HEAP32[$821>>2]|0;
         __THREW__ = 0;
         (invoke_ii($822|0,($814|0))|0);
         $823 = __THREW__; __THREW__ = 0;
         $824 = $823&1;
         if ($824) {
          label = 21;
          break L4;
         }
        } else {
         $826 = (($816) + 4|0);
         HEAP32[$815>>2] = $826;
        }
        $825 = ($812|0)>(0);
        if ($825) {
         $$pre$i3$i$i97 = $$pre$i3$i$i97459475;$733 = $950;$771 = $952;$813 = $812;
        } else {
         $947 = $952;
         break;
        }
       }
      } else {
       $947 = $561;
      }
      $827 = HEAP32[$__wn>>2]|0;
      $828 = HEAP32[$__wb>>2]|0;
      $829 = ($827|0)==($828|0);
      if ($829) {
       label = 320;
       break L4;
      } else {
       $928 = $947;$929 = $932;$930 = $943;$931 = $944;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free230;
      }
      break;
     }
     default: {
      $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
     }
     }
    } while(0);
    L381: do {
     if ((label|0) == 42) {
      label = 0;
      $109 = ($__p$0377|0)==(3);
      if ($109) {
       $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L4;
      } else {
       $$pre$i3$i$i47 = $927;$126 = $927;
      }
      while(1) {
       $110 = HEAP32[$__b>>2]|0;
       $111 = ($110|0)==(0|0);
       do {
        if ($111) {
         $140 = 1;
        } else {
         $112 = (($110) + 12|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = (($110) + 16|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($113|0)==($115|0);
         if ($116) {
          $117 = HEAP32[$110>>2]|0;
          $118 = (($117) + 36|0);
          $119 = HEAP32[$118>>2]|0;
          __THREW__ = 0;
          $120 = (invoke_ii($119|0,($110|0))|0);
          $121 = __THREW__; __THREW__ = 0;
          $122 = $121&1;
          if ($122) {
           label = 24;
           break L4;
          } else {
           $$0$i$i$i$i39 = $120;
          }
         } else {
          $123 = HEAP32[$113>>2]|0;
          $$0$i$i$i$i39 = $123;
         }
         $124 = ($$0$i$i$i$i39|0)==(-1);
         if ($124) {
          HEAP32[$__b>>2] = 0;
          $140 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $140 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $125 = ($126|0)==(0|0);
       do {
        if ($125) {
         $$pre$i3$i$i47452 = $$pre$i3$i$i47;
         label = 56;
        } else {
         $127 = (($126) + 12|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = (($126) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$126>>2]|0;
          $133 = (($132) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          __THREW__ = 0;
          $135 = (invoke_ii($134|0,($126|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if ($137) {
           label = 24;
           break L4;
          } else {
           $$0$i$i1$i$i45 = $135;
          }
         } else {
          $138 = HEAP32[$128>>2]|0;
          $$0$i$i1$i$i45 = $138;
         }
         $139 = ($$0$i$i1$i$i45|0)==(-1);
         if ($139) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i47452 = 0;
          label = 56;
          break;
         } else {
          $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
          $tmp$i$i50 = $140 ^ $phitmp$i4$i$i48;
          if ($tmp$i$i50) {
           $$pre$i3$i$i47454 = $$pre$i3$i$i47;$933 = $$pre$i3$i$i47;
           break;
          } else {
           $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
           break L381;
          }
         }
        }
       } while(0);
       if ((label|0) == 56) {
        label = 0;
        if ($140) {
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L381;
        } else {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47452;$933 = 0;
        }
       }
       $141 = HEAP32[$__b>>2]|0;
       $142 = (($141) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (($141) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$141>>2]|0;
        $148 = (($147) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($141|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         label = 24;
         break L4;
        } else {
         $$0$i$i54 = $150;
        }
       } else {
        $153 = HEAP32[$143>>2]|0;
        $$0$i$i54 = $153;
       }
       $154 = HEAP32[$__ct>>2]|0;
       $155 = (($154) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       __THREW__ = 0;
       $157 = (invoke_iiii($156|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $158 = __THREW__; __THREW__ = 0;
       $159 = $158&1;
       if ($159) {
        label = 24;
        break L4;
       }
       if (!($157)) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L381;
       }
       $160 = HEAP32[$__b>>2]|0;
       $161 = (($160) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 16|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($162|0)==($164|0);
       if ($165) {
        $166 = HEAP32[$160>>2]|0;
        $167 = (($166) + 40|0);
        $168 = HEAP32[$167>>2]|0;
        __THREW__ = 0;
        $169 = (invoke_ii($168|0,($160|0))|0);
        $170 = __THREW__; __THREW__ = 0;
        $171 = $170&1;
        if ($171) {
         label = 24;
         break L4;
        } else {
         $$0$i$i59 = $169;
        }
       } else {
        $172 = (($162) + 4|0);
        HEAP32[$161>>2] = $172;
        $173 = HEAP32[$162>>2]|0;
        $$0$i$i59 = $173;
       }
       __THREW__ = 0;
       invoke_vii(668,($__spaces|0),($$0$i$i59|0));
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        label = 24;
        break L4;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47454;$126 = $933;
       }
      }
     }
    } while(0);
    $832 = (($__p$0377) + 1)|0;
    $833 = ($832>>>0)<(4);
    if ($833) {
     $922 = $931;$923 = $930;$924 = $929;$925 = $928;$__p$0377 = $832;$__trailing_sign$0379 = $__trailing_sign$1;$free228372 = $free229;
    } else {
     $$lcssa313 = $929;$$lcssa330 = $930;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free228$lcssa = $free229;
     label = 322;
     break;
    }
   }
   L418:    switch (label|0) {
    case 20: {
     $52 = ___cxa_find_matching_catch(-1,-1)|0;
     $53 = tempRet0;
     $67 = $$ph$ph;$free232 = $free232$ph$ph;$lpad$phi$index = $52;$lpad$phi$index8 = $53;
     break L1;
     break;
    }
    case 21: {
     $54 = ___cxa_find_matching_catch(-1,-1)|0;
     $55 = tempRet0;
     $67 = $932;$free232 = $free230;$lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
     break;
    }
    case 22: {
     $56 = ___cxa_find_matching_catch(-1,-1)|0;
     $57 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
     break;
    }
    case 23: {
     $58 = ___cxa_find_matching_catch(-1,-1)|0;
     $59 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
     break;
    }
    case 24: {
     $60 = ___cxa_find_matching_catch(-1,-1)|0;
     $61 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
     break;
    }
    case 25: {
     $62 = ___cxa_find_matching_catch(-1,-1)|0;
     $63 = tempRet0;
     $67 = $$ph$ph251$ph$ph$ph$ph$ph;$free232 = $free232$ph$ph250$ph$ph$ph$ph$ph;$lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
     break;
    }
    case 41: {
     $107 = HEAP32[$__err>>2]|0;
     $108 = $107 | 4;
     HEAP32[$__err>>2] = $108;
     $$0 = 0;$917 = $924;$free234 = $free228372;
     break;
    }
    case 134: {
     $351 = HEAP32[$__err>>2]|0;
     $352 = $351 | 4;
     HEAP32[$__err>>2] = $352;
     $$0 = 0;$917 = $924;$free234 = $free228372;
     break;
    }
    case 193: {
     $508 = HEAP32[$__err>>2]|0;
     $509 = $508 | 4;
     HEAP32[$__err>>2] = $509;
     $$0 = 0;$917 = $924;$free234 = $free228372;
     break;
    }
    case 224: {
     $580 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $581 = tempRet0;
     ___clang_call_terminate($580);
     // unreachable;
     break;
    }
    case 274: {
     $703 = HEAP32[$__err>>2]|0;
     $704 = $703 | 4;
     HEAP32[$__err>>2] = $704;
     $$0 = 0;$917 = $932;$free234 = $free230;
     break;
    }
    case 298: {
     $767 = HEAP32[$__err>>2]|0;
     $768 = $767 | 4;
     HEAP32[$__err>>2] = $768;
     $$0 = 0;$917 = $932;$free234 = $free230;
     break;
    }
    case 309: {
     $790 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $791 = tempRet0;
     ___clang_call_terminate($790);
     // unreachable;
     break;
    }
    case 320: {
     $830 = HEAP32[$__err>>2]|0;
     $831 = $830 | 4;
     HEAP32[$__err>>2] = $831;
     $$0 = 0;$917 = $932;$free234 = $free230;
     break;
    }
    case 322: {
     $834 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L434: do {
      if (!($834)) {
       $835 = (($__trailing_sign$0$lcssa) + 4|0);
       $836 = (($__trailing_sign$0$lcssa) + 8|0);
       $__i$0 = 1;
       L436: while(1) {
        $837 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $838 = $837 & 1;
        $839 = ($838<<24>>24)==(0);
        if ($839) {
         $841 = $837&255;
         $842 = $841 >>> 1;
         $844 = $842;
        } else {
         $840 = HEAP32[$835>>2]|0;
         $844 = $840;
        }
        $843 = ($__i$0>>>0)<($844>>>0);
        if (!($843)) {
         break L434;
        }
        $845 = HEAP32[$__b>>2]|0;
        $846 = ($845|0)==(0|0);
        do {
         if ($846) {
          $953 = 1;
         } else {
          $847 = (($845) + 12|0);
          $848 = HEAP32[$847>>2]|0;
          $849 = (($845) + 16|0);
          $850 = HEAP32[$849>>2]|0;
          $851 = ($848|0)==($850|0);
          if ($851) {
           $852 = HEAP32[$845>>2]|0;
           $853 = (($852) + 36|0);
           $854 = HEAP32[$853>>2]|0;
           __THREW__ = 0;
           $855 = (invoke_ii($854|0,($845|0))|0);
           $856 = __THREW__; __THREW__ = 0;
           $857 = $856&1;
           if ($857) {
            label = 19;
            break L436;
           } else {
            $$0$i$i$i$i = $855;
           }
          } else {
           $858 = HEAP32[$848>>2]|0;
           $$0$i$i$i$i = $858;
          }
          $859 = ($$0$i$i$i$i|0)==(-1);
          if ($859) {
           HEAP32[$__b>>2] = 0;
           $953 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $953 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $860 = HEAP32[$__e>>2]|0;
        $861 = ($860|0)==(0|0);
        do {
         if ($861) {
          label = 341;
         } else {
          $862 = (($860) + 12|0);
          $863 = HEAP32[$862>>2]|0;
          $864 = (($860) + 16|0);
          $865 = HEAP32[$864>>2]|0;
          $866 = ($863|0)==($865|0);
          if ($866) {
           $867 = HEAP32[$860>>2]|0;
           $868 = (($867) + 36|0);
           $869 = HEAP32[$868>>2]|0;
           __THREW__ = 0;
           $870 = (invoke_ii($869|0,($860|0))|0);
           $871 = __THREW__; __THREW__ = 0;
           $872 = $871&1;
           if ($872) {
            label = 19;
            break L436;
           } else {
            $$0$i$i1$i$i = $870;
           }
          } else {
           $873 = HEAP32[$863>>2]|0;
           $$0$i$i1$i$i = $873;
          }
          $874 = ($$0$i$i1$i$i|0)==(-1);
          if ($874) {
           HEAP32[$__e>>2] = 0;
           label = 341;
           break;
          } else {
           if ($953) {
            break;
           } else {
            label = 349;
            break L436;
           }
          }
         }
        } while(0);
        if ((label|0) == 341) {
         label = 0;
         if ($953) {
          label = 349;
          break;
         }
        }
        $875 = HEAP32[$__b>>2]|0;
        $876 = (($875) + 12|0);
        $877 = HEAP32[$876>>2]|0;
        $878 = (($875) + 16|0);
        $879 = HEAP32[$878>>2]|0;
        $880 = ($877|0)==($879|0);
        if ($880) {
         $881 = HEAP32[$875>>2]|0;
         $882 = (($881) + 36|0);
         $883 = HEAP32[$882>>2]|0;
         __THREW__ = 0;
         $884 = (invoke_ii($883|0,($875|0))|0);
         $885 = __THREW__; __THREW__ = 0;
         $886 = $885&1;
         if ($886) {
          label = 19;
          break;
         } else {
          $$0$i$i = $884;
         }
        } else {
         $887 = HEAP32[$877>>2]|0;
         $$0$i$i = $887;
        }
        $888 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $889 = $888 & 1;
        $890 = ($889<<24>>24)==(0);
        if ($890) {
         $893 = $835;
        } else {
         $891 = HEAP32[$836>>2]|0;
         $893 = $891;
        }
        $892 = (($893) + ($__i$0<<2)|0);
        $894 = HEAP32[$892>>2]|0;
        $895 = ($$0$i$i|0)==($894|0);
        if (!($895)) {
         label = 349;
         break;
        }
        $898 = (($__i$0) + 1)|0;
        $899 = HEAP32[$__b>>2]|0;
        $900 = (($899) + 12|0);
        $901 = HEAP32[$900>>2]|0;
        $902 = (($899) + 16|0);
        $903 = HEAP32[$902>>2]|0;
        $904 = ($901|0)==($903|0);
        if ($904) {
         $905 = HEAP32[$899>>2]|0;
         $906 = (($905) + 40|0);
         $907 = HEAP32[$906>>2]|0;
         __THREW__ = 0;
         (invoke_ii($907|0,($899|0))|0);
         $908 = __THREW__; __THREW__ = 0;
         $909 = $908&1;
         if ($909) {
          label = 19;
          break;
         } else {
          $__i$0 = $898;
          continue;
         }
        } else {
         $910 = (($901) + 4|0);
         HEAP32[$900>>2] = $910;
         $__i$0 = $898;
         continue;
        }
       }
       if ((label|0) == 19) {
        $50 = ___cxa_find_matching_catch(-1,-1)|0;
        $51 = tempRet0;
        $67 = $$lcssa313;$free232 = $free228$lcssa;$lpad$phi$index = $50;$lpad$phi$index8 = $51;
        break L1;
       }
       else if ((label|0) == 349) {
        $896 = HEAP32[$__err>>2]|0;
        $897 = $896 | 4;
        HEAP32[$__err>>2] = $897;
        $$0 = 0;$917 = $$lcssa313;$free234 = $free228$lcssa;
        break L418;
       }
      }
     } while(0);
     $911 = ($$lcssa313|0)==($$lcssa330|0);
     if ($911) {
      $$0 = 1;$917 = $$lcssa330;$free234 = $free228$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa313,$$lcssa330,$__et);
      $912 = HEAP32[$__et>>2]|0;
      $913 = ($912|0)==(0);
      if ($913) {
       $$0 = 1;$917 = $$lcssa313;$free234 = $free228$lcssa;
      } else {
       $914 = HEAP32[$__err>>2]|0;
       $915 = $914 | 4;
       HEAP32[$__err>>2] = $915;
       $$0 = 0;$917 = $$lcssa313;$free234 = $free228$lcssa;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $916 = ($917|0)==(0|0);
   if ($916) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free234|0,($917|0));
   $918 = __THREW__; __THREW__ = 0;
   $919 = $918&1;
   if ($919) {
    $920 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $921 = tempRet0;
    ___clang_call_terminate($920);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $66 = ($67|0)==(0|0);
 if ($66) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free232|0,($67|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0116 = 0, $$0117 = 0, $$018 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $$byval_copy = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 32|0;
 $__wb = sp + 24|0;
 $__wn = sp + 436|0;
 $__loc = sp + 12|0;
 $__neg = sp + 440|0;
 $0 = sp + 432|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 661;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(456,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0116 = $53;$$018 = $52;$115 = $__wbuf;
 } else {
  $5 = HEAP32[$__loc>>2]|0;
  $6 = HEAP32[9128>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 4;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 9128;
   $8 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$8>>2] = (631);
   $9 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$9>>2] = 0;
   __THREW__ = 0;
   invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  }
  L6: do {
   if ((label|0) == 4) {
    $12 = HEAP32[((9128 + 4|0))>>2]|0;
    $13 = (($12) + -1)|0;
    $14 = (($5) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $15;
    $19 = $17;
    $20 = (($18) - ($19))|0;
    $21 = $20 >> 2;
    $22 = ($21>>>0)>($13>>>0);
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP8[$__neg>>0] = 0;
      $29 = HEAP32[$__e>>2]|0;
      HEAP32[$0>>2] = $29;
      $30 = (($__iob) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      $32 = (invoke_iiiiiiiiiiii(666,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      if ($32) {
       $35 = HEAP8[$__v>>0]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 4|0);
        HEAP32[$41>>2] = 0;
        HEAP8[$__v>>0] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP32[$39>>2] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg>>0]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 44|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        __THREW__ = 0;
        invoke_vii(668,($__v|0),($47|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         break;
        }
       }
       $54 = HEAP32[$24>>2]|0;
       $55 = (($54) + 44|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_iii($56|0,($24|0),48)|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = HEAP32[$__wb>>2]|0;
       $61 = HEAP32[$__wn>>2]|0;
       $62 = (($61) + -4|0);
       $63 = ($60>>>0)<($62>>>0);
       L23: do {
        if ($63) {
         $__w$09 = $60;
         while(1) {
          $66 = HEAP32[$__w$09>>2]|0;
          $67 = ($66|0)==($57|0);
          $65 = (($__w$09) + 4|0);
          if (!($67)) {
           $__w$0$lcssa = $__w$09;
           break L23;
          }
          $64 = ($65>>>0)<($62>>>0);
          if ($64) {
           $__w$09 = $65;
          } else {
           $__w$0$lcssa = $65;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $60;
        }
       } while(0);
       __THREW__ = 0;
       (invoke_iiii(669,($__v|0),($__w$0$lcssa|0),($61|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
      }
      $70 = HEAP32[$__b>>2]|0;
      $71 = ($70|0)==(0|0);
      do {
       if ($71) {
        $120 = 1;
       } else {
        $72 = (($70) + 12|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (($70) + 16|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ($73|0)==($75|0);
        if ($76) {
         $77 = HEAP32[$70>>2]|0;
         $78 = (($77) + 36|0);
         $79 = HEAP32[$78>>2]|0;
         __THREW__ = 0;
         $80 = (invoke_ii($79|0,($70|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          break L6;
         } else {
          $$0$i$i$i$i = $80;
         }
        } else {
         $83 = HEAP32[$73>>2]|0;
         $$0$i$i$i$i = $83;
        }
        $84 = ($$0$i$i$i$i|0)==(-1);
        if ($84) {
         HEAP32[$__b>>2] = 0;
         $120 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $120 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $85 = ($29|0)==(0|0);
      do {
       if ($85) {
        label = 35;
       } else {
        $86 = (($29) + 12|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (($29) + 16|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = ($87|0)==($89|0);
        if ($90) {
         $91 = HEAP32[$29>>2]|0;
         $92 = (($91) + 36|0);
         $93 = HEAP32[$92>>2]|0;
         __THREW__ = 0;
         $94 = (invoke_ii($93|0,($29|0))|0);
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         if ($96) {
          break L6;
         } else {
          $$0$i$i1$i$i = $94;
         }
        } else {
         $97 = HEAP32[$87>>2]|0;
         $$0$i$i1$i$i = $97;
        }
        $98 = ($$0$i$i1$i$i|0)==(-1);
        if ($98) {
         HEAP32[$__e>>2] = 0;
         label = 35;
         break;
        } else {
         if ($120) {
          break;
         } else {
          label = 37;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 35) {
       if ($120) {
        label = 37;
       }
      }
      if ((label|0) == 37) {
       $99 = HEAP32[$__err>>2]|0;
       $100 = $99 | 2;
       HEAP32[$__err>>2] = $100;
      }
      $101 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $101;
      $102 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
      $103 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       STACKTOP = sp;return;
      }
      $105 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
    $26 = (___cxa_allocate_exception(4)|0);
    __ZNSt8bad_castC2Ev($26);
    __THREW__ = 0;
    invoke_viii(454,($26|0),(17096|0),(390|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  } while(0);
  $110 = ___cxa_find_matching_catch(-1,-1)|0;
  $111 = tempRet0;
  $112 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($112)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $113 = ($$pre|0)==(0|0);
  if ($113) {
   $$0117 = $111;$$019 = $110;
   ___resumeException($$019|0);
   // unreachable;
  } else {
   $$0116 = $111;$$018 = $110;$115 = $$pre;
  }
 }
 $114 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($114|0,($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $118 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $$0117 = $$0116;$$019 = $$018;
  ___resumeException($$019|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $22 = $$pre;
 } else {
  $22 = $45;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = (0 - ($0))|0;
  $uglygep = (($scevgep) + ($30)|0);
  $uglygep4 = $uglygep;
  $31 = $uglygep4 >>> 2;
  $32 = (($17) + ($31))|0;
  $33 = (($32) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $34 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $34;
   $35 = (($__p$02) + 4|0);
   $36 = (($$01) + 4|0);
   $37 = ($36|0)==($__last|0);
   if ($37) {
    break;
   } else {
    $$01 = $36;$__p$02 = $35;
   }
  }
  $scevgep5 = (($28) + ($33<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $38 = (($17) + ($13))|0;
 $39 = HEAP8[$this>>0]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this>>0] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i6 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 80|0;
 $6 = sp + 84|0;
 $7 = sp + 96|0;
 $8 = sp + 108|0;
 $9 = sp + 120|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[8704>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i>>2] = 8704;
   $13 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$13>>2] = (631);
   $14 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8704,$__p$i$i$i$i,633);
  }
  $15 = HEAP32[((8704 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(17096|0),(390|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(17096|0),(390|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 1023]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 1023]($1,$27);
  $37 = HEAP8[$__nsn>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 4|0);
   HEAP32[$43>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$41>>2] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__nsn|0),0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $48 = HEAP32[$27>>2]|0;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 1023]($2,$27);
  $51 = HEAP8[$__psn>>0]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__psn) + 4|0);
   HEAP32[$57>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $54 = (($__psn) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[$55>>2] = 0;
   $56 = (($__psn) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__psn|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_ii[$64 & 1023]($27)|0);
  HEAP32[$__dp>>2] = $65;
  $66 = HEAP32[$27>>2]|0;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 1023]($27)|0);
  HEAP32[$__ts>>2] = $69;
  $70 = HEAP32[$27>>2]|0;
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($3,$27);
  $73 = HEAP8[$__grp>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__grp) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $76 = (($__grp) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__grp) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $84 = HEAP32[$27>>2]|0;
  $85 = (($84) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($4,$27);
  $87 = HEAP8[$__sym>>0]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = (($__sym) + 4|0);
   HEAP32[$93>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $90 = (($__sym) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP32[$91>>2] = 0;
   $92 = (($__sym) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__sym|0),0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $98 = HEAP32[$27>>2]|0;
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 1023]($27)|0);
  $storemerge = $101;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$__loc>>2]|0;
  $103 = HEAP32[8640>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   HEAP32[$__p$i$i$i$i6>>2] = 8640;
   $105 = (($__p$i$i$i$i6) + 4|0);
   HEAP32[$105>>2] = (631);
   $106 = (($__p$i$i$i$i6) + 8|0);
   HEAP32[$106>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8640,$__p$i$i$i$i6,633);
  }
  $107 = HEAP32[((8640 + 4|0))>>2]|0;
  $108 = (($107) + -1)|0;
  $109 = (($102) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($102) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $110;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = $115 >> 2;
  $117 = ($116>>>0)>($108>>>0);
  if (!($117)) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(17096|0),(390|0));
   // unreachable;
  }
  $118 = (($112) + ($108<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(17096|0),(390|0));
   // unreachable;
  }
  $122 = HEAP32[$119>>2]|0;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  FUNCTION_TABLE_vii[$124 & 1023]($5,$119);
  $125 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$125&255;HEAP8[$__pat+1>>0]=($125>>8)&255;HEAP8[$__pat+2>>0]=($125>>16)&255;HEAP8[$__pat+3>>0]=$125>>24;
  $126 = HEAP32[$119>>2]|0;
  $127 = (($126) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 1023]($6,$119);
  $129 = HEAP8[$__nsn>>0]|0;
  $130 = $129 & 1;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $135 = (($__nsn) + 4|0);
   HEAP32[$135>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $132 = (($__nsn) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP32[$133>>2] = 0;
   $134 = (($__nsn) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__nsn|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $140 = HEAP32[$119>>2]|0;
  $141 = (($140) + 28|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 1023]($7,$119);
  $143 = HEAP8[$__psn>>0]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $149 = (($__psn) + 4|0);
   HEAP32[$149>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $146 = (($__psn) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   HEAP32[$147>>2] = 0;
   $148 = (($__psn) + 4|0);
   HEAP32[$148>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__psn|0),0);
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   $152 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $153 = tempRet0;
   ___clang_call_terminate($152);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $154 = HEAP32[$119>>2]|0;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 1023]($119)|0);
  HEAP32[$__dp>>2] = $157;
  $158 = HEAP32[$119>>2]|0;
  $159 = (($158) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 1023]($119)|0);
  HEAP32[$__ts>>2] = $161;
  $162 = HEAP32[$119>>2]|0;
  $163 = (($162) + 20|0);
  $164 = HEAP32[$163>>2]|0;
  FUNCTION_TABLE_vii[$164 & 1023]($8,$119);
  $165 = HEAP8[$__grp>>0]|0;
  $166 = $165 & 1;
  $167 = ($166<<24>>24)==(0);
  if ($167) {
   $171 = (($__grp) + 1|0);
   HEAP8[$171>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $168 = (($__grp) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP8[$169>>0] = 0;
   $170 = (($__grp) + 4|0);
   HEAP32[$170>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $176 = HEAP32[$119>>2]|0;
  $177 = (($176) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  FUNCTION_TABLE_vii[$178 & 1023]($9,$119);
  $179 = HEAP8[$__sym>>0]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   $185 = (($__sym) + 4|0);
   HEAP32[$185>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $182 = (($__sym) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP32[$183>>2] = 0;
   $184 = (($__sym) + 4|0);
   HEAP32[$184>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__sym|0),0);
  $186 = __THREW__; __THREW__ = 0;
  $187 = $186&1;
  if ($187) {
   $188 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $189 = tempRet0;
   ___clang_call_terminate($188);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $190 = HEAP32[$119>>2]|0;
  $191 = (($190) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 1023]($119)|0);
  $storemerge = $193;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $$byval_copy = sp + 96|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__p$i$i$i$i = sp;
 $__buf = sp + 100|0;
 $__bb = sp + 56|0;
 $__digits = sp + 200|0;
 $__loc = sp + 64|0;
 $__pat = sp + 68|0;
 $__dp = sp + 300|0;
 $__ts = sp + 404|0;
 $__grp = sp + 80|0;
 $__sym = sp + 32|0;
 $__sn = sp + 44|0;
 $__fd = sp + 76|0;
 $__mbuf = sp + 304|0;
 $__mi = sp + 72|0;
 $__me = sp + 92|0;
 $0 = sp + 60|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,8888,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 L1: do {
  if ($2) {
   $3 = HEAP8[9032>>0]|0;
   $4 = ($3<<24>>24)==(0);
   do {
    if ($4) {
     $5 = (___cxa_guard_acquire((9032|0))|0);
     $6 = ($5|0)==(0);
     if (!($6)) {
      __THREW__ = 0;
      $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       $10 = ___cxa_find_matching_catch(-1,-1)|0;
       $11 = tempRet0;
       ___cxa_guard_abort((9032|0));
       $146 = 0;$147 = 0;$eh$lpad$body$index2Z2D = $11;$eh$lpad$body$indexZ2D = $10;
       label = 12;
       break L1;
      } else {
       HEAP32[9024>>2] = $7;
       ___cxa_guard_release((9032|0));
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[9024>>2]|0;
   __THREW__ = 0;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $13 = (invoke_iiiii(651,($__bb|0),($12|0),(8888|0),($vararg_buffer6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $148 = 0;$149 = 0;
    label = 11;
   } else {
    $16 = HEAP32[$__bb>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     __THREW__ = 0;
     invoke_v(635);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $148 = 0;$149 = 0;
      label = 11;
      break;
     }
     $$pre = HEAP32[$__bb>>2]|0;
     $150 = $$pre;
    } else {
     $150 = $16;
    }
    $22 = (_malloc($13)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     __THREW__ = 0;
     invoke_v(635);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $148 = $150;$149 = 0;
      label = 11;
     } else {
      $138 = 0;$140 = $150;$__db$0 = 0;$__n$0 = $13;
      label = 15;
     }
    } else {
     $138 = $22;$140 = $150;$__db$0 = $22;$__n$0 = $13;
     label = 15;
    }
   }
  } else {
   $138 = 0;$140 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vii(456,($__loc|0),($__iob|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $148 = $140;$149 = $138;
   label = 11;
  } else {
   $28 = HEAP32[$__loc>>2]|0;
   $29 = HEAP32[9136>>2]|0;
   $30 = ($29|0)==(-1);
   if ($30) {
    label = 18;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 9136;
    $31 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$31>>2] = (631);
    $32 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$32>>2] = 0;
    __THREW__ = 0;
    invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 45;
    } else {
     label = 18;
    }
   }
   do {
    if ((label|0) == 18) {
     $35 = HEAP32[((9136 + 4|0))>>2]|0;
     $36 = (($35) + -1)|0;
     $37 = (($28) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($28) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $38;
     $42 = $40;
     $43 = (($41) - ($42))|0;
     $44 = $43 >> 2;
     $45 = ($44>>>0)>($36>>>0);
     if ($45) {
      $46 = (($40) + ($36<<2)|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if (!($48)) {
       $52 = HEAP32[$__bb>>2]|0;
       $53 = (($52) + ($__n$0)|0);
       $54 = HEAP32[$47>>2]|0;
       $55 = (($54) + 32|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($56|0,($47|0),($52|0),($53|0),($__db$0|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        label = 45;
        break;
       }
       $59 = ($__n$0|0)==(0);
       if ($59) {
        $63 = 0;
       } else {
        $60 = HEAP32[$__bb>>2]|0;
        $61 = HEAP8[$60>>0]|0;
        $62 = ($61<<24>>24)==(45);
        $63 = $62;
       }
       HEAP32[$__pat>>2] = 0;
       ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
       ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
       ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(671,($__intl|0),($63|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $64 = __THREW__; __THREW__ = 0;
       $65 = $64&1;
       do {
        if ($65) {
         $117 = ___cxa_find_matching_catch(-1,-1)|0;
         $118 = tempRet0;
         $$0 = $117;$$01 = $118;
        } else {
         $66 = HEAP32[$__fd>>2]|0;
         $67 = ($__n$0|0)>($66|0);
         if ($67) {
          $68 = (($__n$0) - ($66))|0;
          $69 = $68 << 1;
          $70 = HEAP8[$__sn>>0]|0;
          $71 = $70 & 1;
          $72 = ($71<<24>>24)==(0);
          if ($72) {
           $75 = $70&255;
           $76 = $75 >>> 1;
           $86 = $76;
          } else {
           $73 = (($__sn) + 4|0);
           $74 = HEAP32[$73>>2]|0;
           $86 = $74;
          }
          $77 = HEAP8[$__sym>>0]|0;
          $78 = $77 & 1;
          $79 = ($78<<24>>24)==(0);
          if ($79) {
           $82 = $77&255;
           $83 = $82 >>> 1;
           $88 = $83;
          } else {
           $80 = (($__sym) + 4|0);
           $81 = HEAP32[$80>>2]|0;
           $88 = $81;
          }
          $84 = $69 | 1;
          $85 = (($86) + ($84))|0;
          $87 = (($85) + ($88))|0;
          $$pn = $87;
         } else {
          $89 = HEAP8[$__sn>>0]|0;
          $90 = $89 & 1;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           $94 = $89&255;
           $95 = $94 >>> 1;
           $104 = $95;
          } else {
           $92 = (($__sn) + 4|0);
           $93 = HEAP32[$92>>2]|0;
           $104 = $93;
          }
          $96 = HEAP8[$__sym>>0]|0;
          $97 = $96 & 1;
          $98 = ($97<<24>>24)==(0);
          if ($98) {
           $101 = $96&255;
           $102 = $101 >>> 1;
           $106 = $102;
          } else {
           $99 = (($__sym) + 4|0);
           $100 = HEAP32[$99>>2]|0;
           $106 = $100;
          }
          $103 = (($104) + 2)|0;
          $105 = (($103) + ($106))|0;
          $$pn = $105;
         }
         $107 = (($$pn) + ($66))|0;
         $108 = ($107>>>0)>(100);
         if ($108) {
          $109 = (_malloc($107)|0);
          $110 = ($109|0)==(0|0);
          if ($110) {
           __THREW__ = 0;
           invoke_v(635);
           $111 = __THREW__; __THREW__ = 0;
           $112 = $111&1;
           if ($112) {
            $113 = ___cxa_find_matching_catch(-1,-1)|0;
            $114 = tempRet0;
            $$0 = $113;$$01 = $114;
            break;
           } else {
            $122 = 0;$__mb$0 = 0;
           }
          } else {
           $122 = $109;$__mb$0 = $109;
          }
         } else {
          $122 = 0;$__mb$0 = $__mbuf;
         }
         $123 = (($__iob) + 4|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = (($__db$0) + ($__n$0)|0);
         $126 = HEAP8[$__dp>>0]|0;
         $127 = HEAP8[$__ts>>0]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(672,($__mb$0|0),($__mi|0),($__me|0),($124|0),($__db$0|0),($125|0),($47|0),($63|0),($__pat|0),($126|0),($127|0),($__grp|0),($__sym|0),($__sn|0),($66|0));
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if (!($129)) {
          $130 = HEAP32[$__s>>2]|0;
          HEAP32[$0>>2] = $130;
          $131 = HEAP32[$__mi>>2]|0;
          $132 = HEAP32[$__me>>2]|0;
          __THREW__ = 0;
          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
          invoke_viiiiiii(459,($agg$result|0),($$byval_copy|0),($__mb$0|0),($131|0),($132|0),($__iob|0),($__fl|0));
          $133 = __THREW__; __THREW__ = 0;
          $134 = $133&1;
          if (!($134)) {
           $135 = ($122|0)==(0|0);
           if (!($135)) {
            _free($122);
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $136 = HEAP32[$__loc>>2]|0;
           (__ZNSt3__114__shared_count16__release_sharedEv($136)|0);
           $137 = ($138|0)==(0|0);
           if (!($137)) {
            _free($138);
           }
           $139 = ($140|0)==(0|0);
           if ($139) {
            STACKTOP = sp;return;
           }
           _free($140);
           STACKTOP = sp;return;
          }
         }
         $119 = ___cxa_find_matching_catch(-1,-1)|0;
         $120 = tempRet0;
         $121 = ($122|0)==(0|0);
         if ($121) {
          $$0 = $119;$$01 = $120;
         } else {
          _free($122);
          $$0 = $119;$$01 = $120;
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break;
      }
     }
     $49 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($49);
     __THREW__ = 0;
     invoke_viii(454,($49|0),(17096|0),(390|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      label = 45;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 45) {
    $115 = ___cxa_find_matching_catch(-1,-1)|0;
    $116 = tempRet0;
    $$1 = $115;$$12 = $116;
   }
   $141 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($141)|0);
   $$2 = $$1;$$23 = $$12;$143 = $138;$145 = $140;
  }
 }
 if ((label|0) == 11) {
  $20 = ___cxa_find_matching_catch(-1,-1)|0;
  $21 = tempRet0;
  $146 = $148;$147 = $149;$eh$lpad$body$index2Z2D = $21;$eh$lpad$body$indexZ2D = $20;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$143 = $147;$145 = $146;
 }
 $142 = ($143|0)==(0|0);
 if (!($142)) {
  _free($143);
 }
 $144 = ($145|0)==(0|0);
 if ($144) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($145);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i10 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 56|0;
 $1 = sp + 72|0;
 $2 = sp + 28|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 60|0;
 $6 = sp + 84|0;
 $7 = sp + 88|0;
 $8 = sp + 100|0;
 $9 = sp + 104|0;
 $10 = sp + 116|0;
 $11 = sp + 128|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[8576>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i>>2] = 8576;
   $15 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$15>>2] = (631);
   $16 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8576,$__p$i$i$i$i,633);
  }
  $17 = HEAP32[((8576 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(17096|0),(390|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(17096|0),(390|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  do {
   if ($__neg) {
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vii[$34 & 1023]($0,$29);
    $35 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$38 & 1023]($1,$29);
    $39 = HEAP8[$__sn>>0]|0;
    $40 = $39 & 1;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $45 = (($__sn) + 1|0);
     HEAP8[$45>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $42 = (($__sn) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP8[$43>>0] = 0;
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(665,($__sn|0),0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $50 = (($32) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vii[$51 & 1023]($2,$29);
    $52 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$52&255;HEAP8[$__pat+1>>0]=($52>>8)&255;HEAP8[$__pat+2>>0]=($52>>16)&255;HEAP8[$__pat+3>>0]=$52>>24;
    $53 = HEAP32[$29>>2]|0;
    $54 = (($53) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    FUNCTION_TABLE_vii[$55 & 1023]($3,$29);
    $56 = HEAP8[$__sn>>0]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $62 = (($__sn) + 1|0);
     HEAP8[$62>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $59 = (($__sn) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     HEAP8[$60>>0] = 0;
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(665,($__sn|0),0);
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    if ($64) {
     $65 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 1023]($29)|0);
  HEAP8[$__dp>>0] = $70;
  $71 = HEAP32[$29>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 1023]($29)|0);
  HEAP8[$__ts>>0] = $74;
  $75 = HEAP32[$29>>2]|0;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 1023]($4,$29);
  $78 = HEAP8[$__grp>>0]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $84 = (($__grp) + 1|0);
   HEAP8[$84>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $81 = (($__grp) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP8[$82>>0] = 0;
   $83 = (($__grp) + 4|0);
   HEAP32[$83>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $89 = HEAP32[$29>>2]|0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 1023]($5,$29);
  $92 = HEAP8[$__sym>>0]|0;
  $93 = $92 & 1;
  $94 = ($93<<24>>24)==(0);
  if ($94) {
   $98 = (($__sym) + 1|0);
   HEAP8[$98>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $95 = (($__sym) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP8[$96>>0] = 0;
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__sym|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $103 = HEAP32[$29>>2]|0;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 1023]($29)|0);
  $storemerge = $106;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $107 = HEAP32[8512>>2]|0;
  $108 = ($107|0)==(-1);
  if (!($108)) {
   HEAP32[$__p$i$i$i$i10>>2] = 8512;
   $109 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$109>>2] = (631);
   $110 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$110>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8512,$__p$i$i$i$i10,633);
  }
  $111 = HEAP32[((8512 + 4|0))>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (($12) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($12) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $114;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = $119 >> 2;
  $121 = ($120>>>0)>($112>>>0);
  if (!($121)) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(17096|0),(390|0));
   // unreachable;
  }
  $122 = (($116) + ($112<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(17096|0),(390|0));
   // unreachable;
  }
  $126 = HEAP32[$123>>2]|0;
  do {
   if ($__neg) {
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vii[$128 & 1023]($6,$123);
    $129 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$129&255;HEAP8[$__pat+1>>0]=($129>>8)&255;HEAP8[$__pat+2>>0]=($129>>16)&255;HEAP8[$__pat+3>>0]=$129>>24;
    $130 = HEAP32[$123>>2]|0;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vii[$132 & 1023]($7,$123);
    $133 = HEAP8[$__sn>>0]|0;
    $134 = $133 & 1;
    $135 = ($134<<24>>24)==(0);
    if ($135) {
     $139 = (($__sn) + 1|0);
     HEAP8[$139>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $136 = (($__sn) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP8[$137>>0] = 0;
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(665,($__sn|0),0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $143 = tempRet0;
     ___clang_call_terminate($142);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $144 = (($126) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    FUNCTION_TABLE_vii[$145 & 1023]($8,$123);
    $146 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$146&255;HEAP8[$__pat+1>>0]=($146>>8)&255;HEAP8[$__pat+2>>0]=($146>>16)&255;HEAP8[$__pat+3>>0]=$146>>24;
    $147 = HEAP32[$123>>2]|0;
    $148 = (($147) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 1023]($9,$123);
    $150 = HEAP8[$__sn>>0]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $156 = (($__sn) + 1|0);
     HEAP8[$156>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $153 = (($__sn) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP8[$154>>0] = 0;
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(665,($__sn|0),0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $160 = tempRet0;
     ___clang_call_terminate($159);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $161 = HEAP32[$123>>2]|0;
  $162 = (($161) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 1023]($123)|0);
  HEAP8[$__dp>>0] = $164;
  $165 = HEAP32[$123>>2]|0;
  $166 = (($165) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 1023]($123)|0);
  HEAP8[$__ts>>0] = $168;
  $169 = HEAP32[$123>>2]|0;
  $170 = (($169) + 20|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 1023]($10,$123);
  $172 = HEAP8[$__grp>>0]|0;
  $173 = $172 & 1;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $178 = (($__grp) + 1|0);
   HEAP8[$178>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $175 = (($__grp) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP8[$176>>0] = 0;
   $177 = (($__grp) + 4|0);
   HEAP32[$177>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $181 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $182 = tempRet0;
   ___clang_call_terminate($181);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $183 = HEAP32[$123>>2]|0;
  $184 = (($183) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  FUNCTION_TABLE_vii[$185 & 1023]($11,$123);
  $186 = HEAP8[$__sym>>0]|0;
  $187 = $186 & 1;
  $188 = ($187<<24>>24)==(0);
  if ($188) {
   $192 = (($__sym) + 1|0);
   HEAP8[$192>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $189 = (($__sym) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   HEAP8[$190>>0] = 0;
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__sym|0),0);
  $193 = __THREW__; __THREW__ = 0;
  $194 = $193&1;
  if ($194) {
   $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $196 = tempRet0;
   ___clang_call_terminate($195);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $197 = HEAP32[$123>>2]|0;
  $198 = (($197) + 36|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 1023]($123)|0);
  $storemerge = $200;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0;
 var $__f$033 = 0, $__f$139 = 0, $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$050;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$050;
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$050) + 1|0);
   $$$0 = $__neg ? $62 : $$050;
   $63 = ($$$0>>>0)<($__de>>>0);
   L16: do {
    if ($63) {
     $__d$029 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$029>>0]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L16;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$029) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$029;
       break L16;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$029 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($74)|0);
     $scevgep59 = $scevgep;
     $75 = ($scevgep59>>>0)<($13>>>0);
     $umax = $75 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $79 = $61;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $76 = (($__d$132) + -1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($79) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$79>>0] = $77;
      $80 = (($__f$033) + -1)|0;
      $81 = ($76>>>0)>($$$0>>>0);
      $82 = ($80|0)>(0);
      $or$cond = $81 & $82;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $79 = $$pre;$__d$132 = $76;$__f$033 = $80;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($82) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $90 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iii[$85 & 1023]($__ct,48)|0);
     $90 = $86;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $87 = ($__f$0$lcssa71|0)>(0);
    $88 = HEAP32[$__me>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__me>>2] = $89;
    if ($87) {
     $91 = $88;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$91>>0] = $90;
      $92 = (($__f$139) + -1)|0;
      $93 = ($92|0)>(0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = (($94) + 1|0);
      HEAP32[$__me>>2] = $95;
      if ($93) {
       $91 = $94;$__f$139 = $92;
      } else {
       $$lcssa38 = $94;
       break;
      }
     }
    } else {
     $$lcssa38 = $88;
    }
    HEAP8[$$lcssa38>>0] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $96 = ($__d$2|0)==($$$0|0);
   if ($96) {
    $97 = HEAP32[$__ct>>2]|0;
    $98 = (($97) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (FUNCTION_TABLE_iii[$99 & 1023]($__ct,48)|0);
    $101 = HEAP32[$__me>>2]|0;
    $102 = (($101) + 1|0);
    HEAP32[$__me>>2] = $102;
    HEAP8[$101>>0] = $100;
   } else {
    $103 = HEAP8[$__grp>>0]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $107 = $103&255;
     $108 = $107 >>> 1;
     $110 = $108;
    } else {
     $106 = HEAP32[$11>>2]|0;
     $110 = $106;
    }
    $109 = ($110|0)==(0);
    if ($109) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($105) {
      $113 = $9;
     } else {
      $111 = HEAP32[$10>>2]|0;
      $113 = $111;
     }
     $112 = HEAP8[$113>>0]|0;
     $114 = $112 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $114;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $115 = ($__ng$044|0)==($__gl$046|0);
     if ($115) {
      $116 = HEAP32[$__me>>2]|0;
      $117 = (($116) + 1|0);
      HEAP32[$__me>>2] = $117;
      HEAP8[$116>>0] = $__ts;
      $118 = (($__ig$045) + 1)|0;
      $119 = HEAP8[$__grp>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      if ($121) {
       $123 = $119&255;
       $124 = $123 >>> 1;
       $126 = $124;
      } else {
       $122 = HEAP32[$11>>2]|0;
       $126 = $122;
      }
      $125 = ($118>>>0)<($126>>>0);
      if ($125) {
       if ($121) {
        $129 = $9;
       } else {
        $127 = HEAP32[$10>>2]|0;
        $129 = $127;
       }
       $128 = (($129) + ($118)|0);
       $130 = HEAP8[$128>>0]|0;
       $131 = ($130<<24>>24)==(127);
       if ($131) {
        $__gl$1 = -1;$__ig$1 = $118;$__ng$1 = 0;
       } else {
        if ($121) {
         $134 = $9;
        } else {
         $132 = HEAP32[$10>>2]|0;
         $134 = $132;
        }
        $133 = (($134) + ($118)|0);
        $135 = HEAP8[$133>>0]|0;
        $136 = $135 << 24 >> 24;
        $__gl$1 = $136;$__ig$1 = $118;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $118;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $137 = (($__d$343) + -1|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = HEAP32[$__me>>2]|0;
     $140 = (($139) + 1|0);
     HEAP32[$__me>>2] = $140;
     HEAP8[$139>>0] = $138;
     $141 = (($__ng$1) + 1)|0;
     $142 = ($137|0)==($$$0|0);
     if ($142) {
      break;
     } else {
      $__d$343 = $137;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $141;
     }
    }
   }
   $143 = HEAP32[$__me>>2]|0;
   $144 = ($61|0)==($143|0);
   if ($144) {
    $$2 = $$$0;
   } else {
    $145 = (($143) + -1|0);
    $146 = ($145>>>0)>($61>>>0);
    if ($146) {
     $$012$i$i = $61;$149 = $145;
     while(1) {
      $147 = HEAP8[$$012$i$i>>0]|0;
      $148 = HEAP8[$149>>0]|0;
      HEAP8[$$012$i$i>>0] = $148;
      HEAP8[$149>>0] = $147;
      $150 = (($$012$i$i) + 1|0);
      $151 = (($149) + -1|0);
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $$012$i$i = $150;$149 = $151;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$01$i$i15>>0] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i15) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i17 = $59;
       break;
      } else {
       $$01$i$i15 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $153 = (($__p$049) + 1)|0;
  $exitcond = ($153|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $153;
  }
 }
 $154 = HEAP8[$__sn>>0]|0;
 $155 = $154 & 1;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $158 = $154&255;
  $159 = $158 >>> 1;
  $161 = $159;
 } else {
  $157 = HEAP32[$2>>2]|0;
  $161 = $157;
 }
 $160 = ($161>>>0)>(1);
 if ($160) {
  if ($156) {
   $164 = $154&255;
   $165 = $164 >>> 1;
   $$pn = $0;$168 = $0;$169 = $165;
  } else {
   $162 = HEAP32[$1>>2]|0;
   $163 = HEAP32[$2>>2]|0;
   $$pn = $162;$168 = $162;$169 = $163;
  }
  $166 = (($$pn) + 1|0);
  $167 = (($168) + ($169)|0);
  $170 = HEAP32[$__me>>2]|0;
  $171 = ($166|0)==($167|0);
  if ($171) {
   $$0$lcssa$i$i = $170;
  } else {
   $$01$i$i = $170;$173 = $166;
   while(1) {
    $172 = HEAP8[$173>>0]|0;
    HEAP8[$$01$i$i>>0] = $172;
    $174 = (($173) + 1|0);
    $175 = (($$01$i$i) + 1|0);
    $176 = ($174|0)==($167|0);
    if ($176) {
     $$0$lcssa$i$i = $175;
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $177 = $__flags & 176;
 if ((($177|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($177|0) == 32)) {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $$byval_copy = sp + 44|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 36|0;
 $__pat = sp + 40|0;
 $__dp = sp + 76|0;
 $__ts = sp + 77|0;
 $__grp = sp + 20|0;
 $__sym = sp + 64|0;
 $__sn = sp + 48|0;
 $__fd = sp + 16|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 12|0;
 $__me = sp + 60|0;
 $0 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[9136>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9136;
  $4 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$4>>2] = (631);
  $5 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$5>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9136|0),($__p$i$i$i$i|0),(633|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = HEAP32[((9136 + 4|0))>>2]|0;
   $9 = (($8) + -1)|0;
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $11;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = $16 >> 2;
   $18 = ($17>>>0)>($9>>>0);
   if ($18) {
    $19 = (($13) + ($9<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $25 = HEAP8[$__digits>>0]|0;
     $26 = $25 & 1;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $30 = $25&255;
      $31 = $30 >>> 1;
      $33 = $31;
     } else {
      $28 = (($__digits) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $33 = $29;
     }
     $32 = ($33|0)==(0);
     if ($32) {
      $46 = 0;
     } else {
      if ($27) {
       $36 = (($__digits) + 1|0);
       $38 = $36;
      } else {
       $34 = (($__digits) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $38 = $35;
      }
      $37 = HEAP8[$38>>0]|0;
      $39 = HEAP32[$20>>2]|0;
      $40 = (($39) + 28|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_iii($41|0,($20|0),45)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = ($37<<24>>24)==($42<<24>>24);
      $46 = $45;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(671,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     L20: do {
      if ($48) {
       $113 = ___cxa_find_matching_catch(-1,-1)|0;
       $114 = tempRet0;
       $$0 = $113;$$01 = $114;
      } else {
       $49 = HEAP8[$__digits>>0]|0;
       $50 = $49 & 1;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $54 = $49&255;
        $55 = $54 >>> 1;
        $58 = $55;
       } else {
        $52 = (($__digits) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $58 = $53;
       }
       $56 = HEAP32[$__fd>>2]|0;
       $57 = ($58|0)>($56|0);
       if ($57) {
        if ($51) {
         $61 = $49&255;
         $62 = $61 >>> 1;
         $64 = $62;
        } else {
         $59 = (($__digits) + 4|0);
         $60 = HEAP32[$59>>2]|0;
         $64 = $60;
        }
        $63 = (($64) - ($56))|0;
        $65 = $63 << 1;
        $66 = HEAP8[$__sn>>0]|0;
        $67 = $66 & 1;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         $71 = $66&255;
         $72 = $71 >>> 1;
         $82 = $72;
        } else {
         $69 = (($__sn) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $82 = $70;
        }
        $73 = HEAP8[$__sym>>0]|0;
        $74 = $73 & 1;
        $75 = ($74<<24>>24)==(0);
        if ($75) {
         $78 = $73&255;
         $79 = $78 >>> 1;
         $84 = $79;
        } else {
         $76 = (($__sym) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $84 = $77;
        }
        $80 = $65 | 1;
        $81 = (($82) + ($80))|0;
        $83 = (($81) + ($84))|0;
        $$pn = $83;
       } else {
        $85 = HEAP8[$__sn>>0]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $85&255;
         $91 = $90 >>> 1;
         $100 = $91;
        } else {
         $88 = (($__sn) + 4|0);
         $89 = HEAP32[$88>>2]|0;
         $100 = $89;
        }
        $92 = HEAP8[$__sym>>0]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = $92&255;
         $98 = $97 >>> 1;
         $102 = $98;
        } else {
         $95 = (($__sym) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $102 = $96;
        }
        $99 = (($100) + 2)|0;
        $101 = (($99) + ($102))|0;
        $$pn = $101;
       }
       $103 = (($$pn) + ($56))|0;
       $104 = ($103>>>0)>(100);
       do {
        if ($104) {
         $105 = (_malloc($103)|0);
         $106 = ($105|0)==(0|0);
         if ($106) {
          __THREW__ = 0;
          invoke_v(635);
          $107 = __THREW__; __THREW__ = 0;
          $108 = $107&1;
          if ($108) {
           $109 = ___cxa_find_matching_catch(-1,-1)|0;
           $110 = tempRet0;
           $$0 = $109;$$01 = $110;
           break L20;
          } else {
           $$pre = HEAP8[$__digits>>0]|0;
           $118 = 0;$122 = $$pre;$__mb$0 = 0;
           break;
          }
         } else {
          $118 = $105;$122 = $49;$__mb$0 = $105;
         }
        } else {
         $118 = 0;$122 = $49;$__mb$0 = $__mbuf;
        }
       } while(0);
       $119 = (($__iob) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $122 & 1;
       $123 = ($121<<24>>24)==(0);
       if ($123) {
        $128 = (($__digits) + 1|0);
        $129 = $122&255;
        $130 = $129 >>> 1;
        $132 = $128;$133 = $130;
       } else {
        $124 = (($__digits) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (($__digits) + 4|0);
        $127 = HEAP32[$126>>2]|0;
        $132 = $125;$133 = $127;
       }
       $131 = (($132) + ($133)|0);
       $134 = HEAP8[$__dp>>0]|0;
       $135 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(672,($__mb$0|0),($__mi|0),($__me|0),($120|0),($132|0),($131|0),($20|0),($46|0),($__pat|0),($134|0),($135|0),($__grp|0),($__sym|0),($__sn|0),($56|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       if (!($137)) {
        $138 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $138;
        $139 = HEAP32[$__mi>>2]|0;
        $140 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(459,($agg$result|0),($$byval_copy|0),($__mb$0|0),($139|0),($140|0),($__iob|0),($__fl|0));
        $141 = __THREW__; __THREW__ = 0;
        $142 = $141&1;
        if (!($142)) {
         $143 = ($118|0)==(0|0);
         if ($143) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $144 = HEAP32[$__loc>>2]|0;
          (__ZNSt3__114__shared_count16__release_sharedEv($144)|0);
          STACKTOP = sp;return;
         }
         _free($118);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $144 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($144)|0);
         STACKTOP = sp;return;
        }
       }
       $115 = ___cxa_find_matching_catch(-1,-1)|0;
       $116 = tempRet0;
       $117 = ($118|0)==(0|0);
       if ($117) {
        $$0 = $115;$$01 = $116;
       } else {
        _free($118);
        $$0 = $115;$$01 = $116;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $145 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   }
   $22 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($22);
   __THREW__ = 0;
   invoke_viii(454,($22|0),(17096|0),(390|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    // unreachable;
   }
  }
 } while(0);
 $111 = ___cxa_find_matching_catch(-1,-1)|0;
 $112 = tempRet0;
 $$1 = $111;$$12 = $112;
 $145 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0;
 var $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $$byval_copy = sp + 444|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__p$i$i$i$i = sp;
 $__buf = sp + 912|0;
 $__bb = sp + 32|0;
 $__digits = sp + 40|0;
 $__loc = sp + 452|0;
 $__pat = sp + 904|0;
 $__dp = sp + 908|0;
 $__ts = sp + 460|0;
 $__grp = sp + 464|0;
 $__sym = sp + 476|0;
 $__sn = sp + 488|0;
 $__fd = sp + 500|0;
 $__mbuf = sp + 504|0;
 $__mi = sp + 456|0;
 $__me = sp + 448|0;
 $0 = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,8888,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 L1: do {
  if ($2) {
   $3 = HEAP8[9032>>0]|0;
   $4 = ($3<<24>>24)==(0);
   do {
    if ($4) {
     $5 = (___cxa_guard_acquire((9032|0))|0);
     $6 = ($5|0)==(0);
     if (!($6)) {
      __THREW__ = 0;
      $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       $10 = ___cxa_find_matching_catch(-1,-1)|0;
       $11 = tempRet0;
       ___cxa_guard_abort((9032|0));
       $148 = 0;$149 = 0;$eh$lpad$body$index2Z2D = $11;$eh$lpad$body$indexZ2D = $10;
       label = 12;
       break L1;
      } else {
       HEAP32[9024>>2] = $7;
       ___cxa_guard_release((9032|0));
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[9024>>2]|0;
   __THREW__ = 0;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $13 = (invoke_iiiii(651,($__bb|0),($12|0),(8888|0),($vararg_buffer6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $150 = 0;$151 = 0;
    label = 11;
   } else {
    $16 = HEAP32[$__bb>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     __THREW__ = 0;
     invoke_v(635);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $150 = 0;$151 = 0;
      label = 11;
      break;
     }
     $$pre = HEAP32[$__bb>>2]|0;
     $152 = $$pre;
    } else {
     $152 = $16;
    }
    $22 = $13 << 2;
    $23 = (_malloc($22)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     __THREW__ = 0;
     invoke_v(635);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $150 = $152;$151 = 0;
      label = 11;
     } else {
      $140 = 0;$142 = $152;$__db$0 = 0;$__n$0 = $13;
      label = 15;
     }
    } else {
     $140 = $23;$142 = $152;$__db$0 = $23;$__n$0 = $13;
     label = 15;
    }
   }
  } else {
   $140 = 0;$142 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vii(456,($__loc|0),($__iob|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $150 = $142;$151 = $140;
   label = 11;
  } else {
   $29 = HEAP32[$__loc>>2]|0;
   $30 = HEAP32[9128>>2]|0;
   $31 = ($30|0)==(-1);
   if ($31) {
    label = 18;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 9128;
    $32 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$32>>2] = (631);
    $33 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$33>>2] = 0;
    __THREW__ = 0;
    invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 45;
    } else {
     label = 18;
    }
   }
   do {
    if ((label|0) == 18) {
     $36 = HEAP32[((9128 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$__bb>>2]|0;
       $54 = (($53) + ($__n$0)|0);
       $55 = HEAP32[$48>>2]|0;
       $56 = (($55) + 48|0);
       $57 = HEAP32[$56>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($57|0,($48|0),($53|0),($54|0),($__db$0|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        label = 45;
        break;
       }
       $60 = ($__n$0|0)==(0);
       if ($60) {
        $64 = 0;
       } else {
        $61 = HEAP32[$__bb>>2]|0;
        $62 = HEAP8[$61>>0]|0;
        $63 = ($62<<24>>24)==(45);
        $64 = $63;
       }
       HEAP32[$__pat>>2] = 0;
       ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
       ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
       ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(673,($__intl|0),($64|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       do {
        if ($66) {
         $119 = ___cxa_find_matching_catch(-1,-1)|0;
         $120 = tempRet0;
         $$0 = $119;$$01 = $120;
        } else {
         $67 = HEAP32[$__fd>>2]|0;
         $68 = ($__n$0|0)>($67|0);
         if ($68) {
          $69 = (($__n$0) - ($67))|0;
          $70 = $69 << 1;
          $71 = HEAP8[$__sn>>0]|0;
          $72 = $71 & 1;
          $73 = ($72<<24>>24)==(0);
          if ($73) {
           $76 = $71&255;
           $77 = $76 >>> 1;
           $87 = $77;
          } else {
           $74 = (($__sn) + 4|0);
           $75 = HEAP32[$74>>2]|0;
           $87 = $75;
          }
          $78 = HEAP8[$__sym>>0]|0;
          $79 = $78 & 1;
          $80 = ($79<<24>>24)==(0);
          if ($80) {
           $83 = $78&255;
           $84 = $83 >>> 1;
           $89 = $84;
          } else {
           $81 = (($__sym) + 4|0);
           $82 = HEAP32[$81>>2]|0;
           $89 = $82;
          }
          $85 = $70 | 1;
          $86 = (($87) + ($85))|0;
          $88 = (($86) + ($89))|0;
          $$pn = $88;
         } else {
          $90 = HEAP8[$__sn>>0]|0;
          $91 = $90 & 1;
          $92 = ($91<<24>>24)==(0);
          if ($92) {
           $95 = $90&255;
           $96 = $95 >>> 1;
           $105 = $96;
          } else {
           $93 = (($__sn) + 4|0);
           $94 = HEAP32[$93>>2]|0;
           $105 = $94;
          }
          $97 = HEAP8[$__sym>>0]|0;
          $98 = $97 & 1;
          $99 = ($98<<24>>24)==(0);
          if ($99) {
           $102 = $97&255;
           $103 = $102 >>> 1;
           $107 = $103;
          } else {
           $100 = (($__sym) + 4|0);
           $101 = HEAP32[$100>>2]|0;
           $107 = $101;
          }
          $104 = (($105) + 2)|0;
          $106 = (($104) + ($107))|0;
          $$pn = $106;
         }
         $108 = (($$pn) + ($67))|0;
         $109 = ($108>>>0)>(100);
         if ($109) {
          $110 = $108 << 2;
          $111 = (_malloc($110)|0);
          $112 = ($111|0)==(0|0);
          if ($112) {
           __THREW__ = 0;
           invoke_v(635);
           $113 = __THREW__; __THREW__ = 0;
           $114 = $113&1;
           if ($114) {
            $115 = ___cxa_find_matching_catch(-1,-1)|0;
            $116 = tempRet0;
            $$0 = $115;$$01 = $116;
            break;
           } else {
            $124 = 0;$__mb$0 = 0;
           }
          } else {
           $124 = $111;$__mb$0 = $111;
          }
         } else {
          $124 = 0;$__mb$0 = $__mbuf;
         }
         $125 = (($__iob) + 4|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = (($__db$0) + ($__n$0<<2)|0);
         $128 = HEAP32[$__dp>>2]|0;
         $129 = HEAP32[$__ts>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(674,($__mb$0|0),($__mi|0),($__me|0),($126|0),($__db$0|0),($127|0),($48|0),($64|0),($__pat|0),($128|0),($129|0),($__grp|0),($__sym|0),($__sn|0),($67|0));
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if (!($131)) {
          $132 = HEAP32[$__s>>2]|0;
          HEAP32[$0>>2] = $132;
          $133 = HEAP32[$__mi>>2]|0;
          $134 = HEAP32[$__me>>2]|0;
          __THREW__ = 0;
          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
          invoke_viiiiiii(658,($agg$result|0),($$byval_copy|0),($__mb$0|0),($133|0),($134|0),($__iob|0),($__fl|0));
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if (!($136)) {
           $137 = ($124|0)==(0|0);
           if (!($137)) {
            _free($124);
           }
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $138 = HEAP32[$__loc>>2]|0;
           (__ZNSt3__114__shared_count16__release_sharedEv($138)|0);
           $139 = ($140|0)==(0|0);
           if (!($139)) {
            _free($140);
           }
           $141 = ($142|0)==(0|0);
           if ($141) {
            STACKTOP = sp;return;
           }
           _free($142);
           STACKTOP = sp;return;
          }
         }
         $121 = ___cxa_find_matching_catch(-1,-1)|0;
         $122 = tempRet0;
         $123 = ($124|0)==(0|0);
         if ($123) {
          $$0 = $121;$$01 = $122;
         } else {
          _free($124);
          $$0 = $121;$$01 = $122;
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(454,($50|0),(17096|0),(390|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 45;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 45) {
    $117 = ___cxa_find_matching_catch(-1,-1)|0;
    $118 = tempRet0;
    $$1 = $117;$$12 = $118;
   }
   $143 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($143)|0);
   $$2 = $$1;$$23 = $$12;$145 = $140;$147 = $142;
  }
 }
 if ((label|0) == 11) {
  $20 = ___cxa_find_matching_catch(-1,-1)|0;
  $21 = tempRet0;
  $148 = $150;$149 = $151;$eh$lpad$body$index2Z2D = $21;$eh$lpad$body$indexZ2D = $20;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$145 = $149;$147 = $148;
 }
 $144 = ($145|0)==(0|0);
 if (!($144)) {
  _free($145);
 }
 $146 = ($147|0)==(0|0);
 if ($146) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($147);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 32|0;
 $1 = sp + 72|0;
 $2 = sp + 28|0;
 $3 = sp + 36|0;
 $4 = sp + 48|0;
 $5 = sp + 60|0;
 $6 = sp + 84|0;
 $7 = sp + 88|0;
 $8 = sp + 100|0;
 $9 = sp + 104|0;
 $10 = sp + 116|0;
 $11 = sp + 128|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[8704>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i>>2] = 8704;
   $15 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$15>>2] = (631);
   $16 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8704,$__p$i$i$i$i,633);
  }
  $17 = HEAP32[((8704 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(17096|0),(390|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(17096|0),(390|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  do {
   if ($__neg) {
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vii[$34 & 1023]($0,$29);
    $35 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$38 & 1023]($1,$29);
    $39 = HEAP8[$__sn>>0]|0;
    $40 = $39 & 1;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $45 = (($__sn) + 4|0);
     HEAP32[$45>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $42 = (($__sn) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$43>>2] = 0;
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(670,($__sn|0),0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $50 = (($32) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vii[$51 & 1023]($2,$29);
    $52 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$52&255;HEAP8[$__pat+1>>0]=($52>>8)&255;HEAP8[$__pat+2>>0]=($52>>16)&255;HEAP8[$__pat+3>>0]=$52>>24;
    $53 = HEAP32[$29>>2]|0;
    $54 = (($53) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    FUNCTION_TABLE_vii[$55 & 1023]($3,$29);
    $56 = HEAP8[$__sn>>0]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $62 = (($__sn) + 4|0);
     HEAP32[$62>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $59 = (($__sn) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     HEAP32[$60>>2] = 0;
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(670,($__sn|0),0);
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    if ($64) {
     $65 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 1023]($29)|0);
  HEAP32[$__dp>>2] = $70;
  $71 = HEAP32[$29>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 1023]($29)|0);
  HEAP32[$__ts>>2] = $74;
  $75 = HEAP32[$29>>2]|0;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 1023]($4,$29);
  $78 = HEAP8[$__grp>>0]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $84 = (($__grp) + 1|0);
   HEAP8[$84>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $81 = (($__grp) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP8[$82>>0] = 0;
   $83 = (($__grp) + 4|0);
   HEAP32[$83>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $89 = HEAP32[$29>>2]|0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 1023]($5,$29);
  $92 = HEAP8[$__sym>>0]|0;
  $93 = $92 & 1;
  $94 = ($93<<24>>24)==(0);
  if ($94) {
   $98 = (($__sym) + 4|0);
   HEAP32[$98>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $95 = (($__sym) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP32[$96>>2] = 0;
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__sym|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $103 = HEAP32[$29>>2]|0;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 1023]($29)|0);
  $storemerge = $106;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $107 = HEAP32[8640>>2]|0;
  $108 = ($107|0)==(-1);
  if (!($108)) {
   HEAP32[$__p$i$i$i$i8>>2] = 8640;
   $109 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$109>>2] = (631);
   $110 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$110>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(8640,$__p$i$i$i$i8,633);
  }
  $111 = HEAP32[((8640 + 4|0))>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (($12) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($12) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $114;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = $119 >> 2;
  $121 = ($120>>>0)>($112>>>0);
  if (!($121)) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(17096|0),(390|0));
   // unreachable;
  }
  $122 = (($116) + ($112<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(17096|0),(390|0));
   // unreachable;
  }
  $126 = HEAP32[$123>>2]|0;
  do {
   if ($__neg) {
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vii[$128 & 1023]($6,$123);
    $129 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$129&255;HEAP8[$__pat+1>>0]=($129>>8)&255;HEAP8[$__pat+2>>0]=($129>>16)&255;HEAP8[$__pat+3>>0]=$129>>24;
    $130 = HEAP32[$123>>2]|0;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vii[$132 & 1023]($7,$123);
    $133 = HEAP8[$__sn>>0]|0;
    $134 = $133 & 1;
    $135 = ($134<<24>>24)==(0);
    if ($135) {
     $139 = (($__sn) + 4|0);
     HEAP32[$139>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $136 = (($__sn) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP32[$137>>2] = 0;
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(670,($__sn|0),0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $143 = tempRet0;
     ___clang_call_terminate($142);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $144 = (($126) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    FUNCTION_TABLE_vii[$145 & 1023]($8,$123);
    $146 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$146&255;HEAP8[$__pat+1>>0]=($146>>8)&255;HEAP8[$__pat+2>>0]=($146>>16)&255;HEAP8[$__pat+3>>0]=$146>>24;
    $147 = HEAP32[$123>>2]|0;
    $148 = (($147) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 1023]($9,$123);
    $150 = HEAP8[$__sn>>0]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $156 = (($__sn) + 4|0);
     HEAP32[$156>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $153 = (($__sn) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP32[$154>>2] = 0;
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(670,($__sn|0),0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $160 = tempRet0;
     ___clang_call_terminate($159);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $161 = HEAP32[$123>>2]|0;
  $162 = (($161) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 1023]($123)|0);
  HEAP32[$__dp>>2] = $164;
  $165 = HEAP32[$123>>2]|0;
  $166 = (($165) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 1023]($123)|0);
  HEAP32[$__ts>>2] = $168;
  $169 = HEAP32[$123>>2]|0;
  $170 = (($169) + 20|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 1023]($10,$123);
  $172 = HEAP8[$__grp>>0]|0;
  $173 = $172 & 1;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $178 = (($__grp) + 1|0);
   HEAP8[$178>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $175 = (($__grp) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP8[$176>>0] = 0;
   $177 = (($__grp) + 4|0);
   HEAP32[$177>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(665,($__grp|0),0);
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $181 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $182 = tempRet0;
   ___clang_call_terminate($181);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $183 = HEAP32[$123>>2]|0;
  $184 = (($183) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  FUNCTION_TABLE_vii[$185 & 1023]($11,$123);
  $186 = HEAP8[$__sym>>0]|0;
  $187 = $186 & 1;
  $188 = ($187<<24>>24)==(0);
  if ($188) {
   $192 = (($__sym) + 4|0);
   HEAP32[$192>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $189 = (($__sym) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   HEAP32[$190>>2] = 0;
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(670,($__sym|0),0);
  $193 = __THREW__; __THREW__ = 0;
  $194 = $193&1;
  if ($194) {
   $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $196 = tempRet0;
   ___clang_call_terminate($195);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $197 = HEAP32[$123>>2]|0;
  $198 = (($197) + 36|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 1023]($123)|0);
  $storemerge = $200;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $87$phi = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0;
 var $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0;
 var $scevgep70 = 0, $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$059) + 4|0);
   $$$0 = $__neg ? $61 : $$059;
   $62 = ($$$0>>>0)<($__de>>>0);
   L16: do {
    if ($62) {
     $__d$034 = $$$0;
     while(1) {
      $65 = HEAP32[$__d$034>>2]|0;
      $66 = HEAP32[$__ct>>2]|0;
      $67 = (($66) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiii[$68 & 1023]($__ct,2048,$65)|0);
      $64 = (($__d$034) + 4|0);
      if (!($69)) {
       $__d$0$lcssa = $__d$034;
       break L16;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$034 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $70 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($70) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $74 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $71 = (($__d$137) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($74) + 4|0);
      HEAP32[$74>>2] = $72;
      $75 = (($__f$038) + -1)|0;
      $76 = ($71>>>0)>($$$0>>>0);
      $77 = ($75|0)>(0);
      $or$cond = $76 & $77;
      if ($or$cond) {
       $74 = $73;$__d$137 = $71;$__f$038 = $75;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $73;
     if ($77) {
      $__d$1$lcssa79 = $71;$__f$0$lcssa77 = $75;
      label = 34;
     } else {
      $78 = HEAP32[$__me>>2]|0;
      $79 = (($78) + 4|0);
      HEAP32[$__me>>2] = $79;
      $$lcssa44 = $78;$__d$1$lcssa7880 = $71;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $80 = HEAP32[$__ct>>2]|0;
     $81 = (($80) + 44|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_iii[$82 & 1023]($__ct,48)|0);
     $84 = ($__f$0$lcssa77|0)>(0);
     $85 = HEAP32[$__me>>2]|0;
     $86 = (($85) + 4|0);
     HEAP32[$__me>>2] = $86;
     if ($84) {
      $87 = $85;$91 = $86;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$87>>2] = $83;
       $88 = (($__f$145) + -1)|0;
       $89 = ($88|0)>(0);
       $90 = (($91) + 4|0);
       if ($89) {
        $87$phi = $91;$91 = $90;$__f$145 = $88;$87 = $87$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($85) + ($$sum75<<2)|0);
      $scevgep70 = (($85) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $85;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $92 = ($__d$2|0)==($$$0|0);
   if ($92) {
    $93 = HEAP32[$__ct>>2]|0;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_iii[$95 & 1023]($__ct,48)|0);
    $97 = HEAP32[$__me>>2]|0;
    $98 = (($97) + 4|0);
    HEAP32[$__me>>2] = $98;
    HEAP32[$97>>2] = $96;
    $140 = $98;
   } else {
    $99 = HEAP8[$__grp>>0]|0;
    $100 = $99 & 1;
    $101 = ($100<<24>>24)==(0);
    if ($101) {
     $103 = $99&255;
     $104 = $103 >>> 1;
     $106 = $104;
    } else {
     $102 = HEAP32[$9>>2]|0;
     $106 = $102;
    }
    $105 = ($106|0)==(0);
    if ($105) {
     $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
    } else {
     if ($101) {
      $109 = $7;
     } else {
      $107 = HEAP32[$8>>2]|0;
      $109 = $107;
     }
     $108 = HEAP8[$109>>0]|0;
     $110 = $108 << 24 >> 24;
     $__d$353 = $__d$2;$__gl$056 = $110;$__ig$055 = 0;$__ng$054 = 0;
    }
    while(1) {
     $111 = ($__ng$054|0)==($__gl$056|0);
     $112 = HEAP32[$__me>>2]|0;
     if ($111) {
      $113 = (($112) + 4|0);
      HEAP32[$__me>>2] = $113;
      HEAP32[$112>>2] = $__ts;
      $114 = (($__ig$055) + 1)|0;
      $115 = HEAP8[$__grp>>0]|0;
      $116 = $115 & 1;
      $117 = ($116<<24>>24)==(0);
      if ($117) {
       $119 = $115&255;
       $120 = $119 >>> 1;
       $122 = $120;
      } else {
       $118 = HEAP32[$9>>2]|0;
       $122 = $118;
      }
      $121 = ($114>>>0)<($122>>>0);
      if ($121) {
       if ($117) {
        $125 = $7;
       } else {
        $123 = HEAP32[$8>>2]|0;
        $125 = $123;
       }
       $124 = (($125) + ($114)|0);
       $126 = HEAP8[$124>>0]|0;
       $127 = ($126<<24>>24)==(127);
       if ($127) {
        $136 = $113;$__gl$1 = -1;$__ig$1 = $114;$__ng$1 = 0;
       } else {
        if ($117) {
         $130 = $7;
        } else {
         $128 = HEAP32[$8>>2]|0;
         $130 = $128;
        }
        $129 = (($130) + ($114)|0);
        $131 = HEAP8[$129>>0]|0;
        $132 = $131 << 24 >> 24;
        $136 = $113;$__gl$1 = $132;$__ig$1 = $114;$__ng$1 = 0;
       }
      } else {
       $136 = $113;$__gl$1 = $__gl$056;$__ig$1 = $114;$__ng$1 = 0;
      }
     } else {
      $136 = $112;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $133 = (($__d$353) + -4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($136) + 4|0);
     HEAP32[$__me>>2] = $135;
     HEAP32[$136>>2] = $134;
     $137 = (($__ng$1) + 1)|0;
     $138 = ($133|0)==($$$0|0);
     if ($138) {
      $140 = $135;
      break;
     } else {
      $__d$353 = $133;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $137;
     }
    }
   }
   $139 = ($60|0)==($140|0);
   if ($139) {
    $$2 = $$$0;
   } else {
    $141 = (($140) + -4|0);
    $142 = ($141>>>0)>($60>>>0);
    if ($142) {
     $$012$i$i = $60;$145 = $141;
     while(1) {
      $143 = HEAP32[$$012$i$i>>2]|0;
      $144 = HEAP32[$145>>2]|0;
      HEAP32[$$012$i$i>>2] = $144;
      HEAP32[$145>>2] = $143;
      $146 = (($$012$i$i) + 4|0);
      $147 = (($145) + -4|0);
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $$012$i$i = $146;$145 = $147;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $52 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($52)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $53 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$55 = $51;
     while(1) {
      $54 = HEAP32[$55>>2]|0;
      HEAP32[$$01$i$i19>>2] = $54;
      $56 = (($55) + 4|0);
      $57 = ($56|0)==($46|0);
      if ($57) {
       break;
      }
      $58 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $58;$55 = $56;
     }
     $59 = (($53) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($59<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $149 = (($__p$058) + 1)|0;
  $exitcond = ($149|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $149;
  }
 }
 $150 = HEAP8[$__sn>>0]|0;
 $151 = $150 & 1;
 $152 = ($151<<24>>24)==(0);
 if ($152) {
  $154 = $150&255;
  $155 = $154 >>> 1;
  $157 = $155;
 } else {
  $153 = HEAP32[$0>>2]|0;
  $157 = $153;
 }
 $156 = ($157>>>0)>(1);
 if ($156) {
  if ($152) {
   $160 = $150&255;
   $161 = $160 >>> 1;
   $$pn = $0;$164 = $0;$165 = $161;
  } else {
   $158 = HEAP32[$1>>2]|0;
   $159 = HEAP32[$0>>2]|0;
   $$pn = $158;$164 = $158;$165 = $159;
  }
  $162 = (($$pn) + 4|0);
  $163 = (($164) + ($165<<2)|0);
  $166 = HEAP32[$__me>>2]|0;
  $167 = ($162|0)==($163|0);
  if ($167) {
   $$0$lcssa$i$i = $166;
  } else {
   $$promoted4$i$i = $162;
   $$sum = (($165) + -1)|0;
   $scevgep$i$i = (($164) + ($$sum<<2)|0);
   $168 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($168)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $169 = $uglygep5$i$i >>> 2;
   $$01$i$i = $166;$171 = $162;
   while(1) {
    $170 = HEAP32[$171>>2]|0;
    HEAP32[$$01$i$i>>2] = $170;
    $172 = (($171) + 4|0);
    $173 = (($$01$i$i) + 4|0);
    $174 = ($172|0)==($163|0);
    if ($174) {
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
   $175 = (($169) + 1)|0;
   $scevgep6$i$i = (($166) + ($175<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $176 = $__flags & 176;
 if ((($176|0) == 32)) {
  $177 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $177;
  STACKTOP = sp;return;
 } else if ((($176|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $$byval_copy = sp + 36|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 44|0;
 $__pat = sp + 12|0;
 $__dp = sp + 32|0;
 $__ts = sp + 16|0;
 $__grp = sp + 20|0;
 $__sym = sp + 472|0;
 $__sn = sp + 48|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 64|0;
 $__mi = sp + 464|0;
 $__me = sp + 468|0;
 $0 = sp + 40|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[9128>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 9128;
  $4 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$4>>2] = (631);
  $5 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$5>>2] = 0;
  __THREW__ = 0;
  invoke_viii(632,(9128|0),($__p$i$i$i$i|0),(633|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = HEAP32[((9128 + 4|0))>>2]|0;
   $9 = (($8) + -1)|0;
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $11;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = $16 >> 2;
   $18 = ($17>>>0)>($9>>>0);
   if ($18) {
    $19 = (($13) + ($9<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $25 = HEAP8[$__digits>>0]|0;
     $26 = $25 & 1;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $30 = $25&255;
      $31 = $30 >>> 1;
      $33 = $31;
     } else {
      $28 = (($__digits) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $33 = $29;
     }
     $32 = ($33|0)==(0);
     if ($32) {
      $46 = 0;
     } else {
      if ($27) {
       $36 = (($__digits) + 4|0);
       $38 = $36;
      } else {
       $34 = (($__digits) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $38 = $35;
      }
      $37 = HEAP32[$38>>2]|0;
      $39 = HEAP32[$20>>2]|0;
      $40 = (($39) + 44|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_iii($41|0,($20|0),45)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = ($37|0)==($42|0);
      $46 = $45;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(673,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     L20: do {
      if ($48) {
       $114 = ___cxa_find_matching_catch(-1,-1)|0;
       $115 = tempRet0;
       $$0 = $114;$$01 = $115;
      } else {
       $49 = HEAP8[$__digits>>0]|0;
       $50 = $49 & 1;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $54 = $49&255;
        $55 = $54 >>> 1;
        $58 = $55;
       } else {
        $52 = (($__digits) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $58 = $53;
       }
       $56 = HEAP32[$__fd>>2]|0;
       $57 = ($58|0)>($56|0);
       if ($57) {
        if ($51) {
         $61 = $49&255;
         $62 = $61 >>> 1;
         $64 = $62;
        } else {
         $59 = (($__digits) + 4|0);
         $60 = HEAP32[$59>>2]|0;
         $64 = $60;
        }
        $63 = (($64) - ($56))|0;
        $65 = $63 << 1;
        $66 = HEAP8[$__sn>>0]|0;
        $67 = $66 & 1;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         $71 = $66&255;
         $72 = $71 >>> 1;
         $82 = $72;
        } else {
         $69 = (($__sn) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $82 = $70;
        }
        $73 = HEAP8[$__sym>>0]|0;
        $74 = $73 & 1;
        $75 = ($74<<24>>24)==(0);
        if ($75) {
         $78 = $73&255;
         $79 = $78 >>> 1;
         $84 = $79;
        } else {
         $76 = (($__sym) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $84 = $77;
        }
        $80 = $65 | 1;
        $81 = (($82) + ($80))|0;
        $83 = (($81) + ($84))|0;
        $$pn = $83;
       } else {
        $85 = HEAP8[$__sn>>0]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $85&255;
         $91 = $90 >>> 1;
         $100 = $91;
        } else {
         $88 = (($__sn) + 4|0);
         $89 = HEAP32[$88>>2]|0;
         $100 = $89;
        }
        $92 = HEAP8[$__sym>>0]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = $92&255;
         $98 = $97 >>> 1;
         $102 = $98;
        } else {
         $95 = (($__sym) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $102 = $96;
        }
        $99 = (($100) + 2)|0;
        $101 = (($99) + ($102))|0;
        $$pn = $101;
       }
       $103 = (($$pn) + ($56))|0;
       $104 = ($103>>>0)>(100);
       do {
        if ($104) {
         $105 = $103 << 2;
         $106 = (_malloc($105)|0);
         $107 = ($106|0)==(0|0);
         if ($107) {
          __THREW__ = 0;
          invoke_v(635);
          $108 = __THREW__; __THREW__ = 0;
          $109 = $108&1;
          if ($109) {
           $110 = ___cxa_find_matching_catch(-1,-1)|0;
           $111 = tempRet0;
           $$0 = $110;$$01 = $111;
           break L20;
          } else {
           $$pre = HEAP8[$__digits>>0]|0;
           $119 = 0;$123 = $$pre;$__mb$0 = 0;
           break;
          }
         } else {
          $119 = $106;$123 = $49;$__mb$0 = $106;
         }
        } else {
         $119 = 0;$123 = $49;$__mb$0 = $__mbuf;
        }
       } while(0);
       $120 = (($__iob) + 4|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $123 & 1;
       $124 = ($122<<24>>24)==(0);
       if ($124) {
        $129 = (($__digits) + 4|0);
        $130 = $123&255;
        $131 = $130 >>> 1;
        $133 = $129;$134 = $131;
       } else {
        $125 = (($__digits) + 8|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($__digits) + 4|0);
        $128 = HEAP32[$127>>2]|0;
        $133 = $126;$134 = $128;
       }
       $132 = (($133) + ($134<<2)|0);
       $135 = HEAP32[$__dp>>2]|0;
       $136 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(674,($__mb$0|0),($__mi|0),($__me|0),($121|0),($133|0),($132|0),($20|0),($46|0),($__pat|0),($135|0),($136|0),($__grp|0),($__sym|0),($__sn|0),($56|0));
       $137 = __THREW__; __THREW__ = 0;
       $138 = $137&1;
       if (!($138)) {
        $139 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $139;
        $140 = HEAP32[$__mi>>2]|0;
        $141 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(658,($agg$result|0),($$byval_copy|0),($__mb$0|0),($140|0),($141|0),($__iob|0),($__fl|0));
        $142 = __THREW__; __THREW__ = 0;
        $143 = $142&1;
        if (!($143)) {
         $144 = ($119|0)==(0|0);
         if ($144) {
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $145 = HEAP32[$__loc>>2]|0;
          (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
          STACKTOP = sp;return;
         }
         _free($119);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $145 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
         STACKTOP = sp;return;
        }
       }
       $116 = ___cxa_find_matching_catch(-1,-1)|0;
       $117 = tempRet0;
       $118 = ($119|0)==(0|0);
       if ($118) {
        $$0 = $116;$$01 = $117;
       } else {
        _free($119);
        $$0 = $116;$$01 = $117;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $146 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($146)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   }
   $22 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($22);
   __THREW__ = 0;
   invoke_viii(454,($22|0),(17096|0),(390|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    // unreachable;
   }
  }
 } while(0);
 $112 = ___cxa_find_matching_catch(-1,-1)|0;
 $113 = tempRet0;
 $$1 = $112;$$12 = $113;
 $146 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($146)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(465,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch(-1,-1)|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(675,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch(-1,-1)|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(465,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch(-1,-1)|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((10784 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$04$i16 = $22;$25 = ((10784 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$04$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$04$i16|0);
    $or$cond2$i17 = $30 | $32;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$03$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(465,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$03$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$03$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(619,(10016|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch(-1,-1)|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch(-1,-1)|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(675,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((10888 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$04$i = $56;$78 = ((10888 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$04$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$04$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$04$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$04$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$04$i|0);
  $or$cond2$i = $88 | $90;
  if ($or$cond2$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$03$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$03$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(668,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$03$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$03$i = $98;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$04$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(619,(10016|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch(-1,-1)|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch(-1,-1)|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch(-1,-1)|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9216 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[9032>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((9032|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[9024>>2] = $6;
     ___cxa_guard_release((9032|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((9032|0));
    __ZSt9terminatev();
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[9024>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(659,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(628,($0|0),(9016|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((5488 + 8|0));
  ___cxa_throw(($0|0),(5536|0),(113|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i$i = 0, $__p$i$i$i = 0, $__p$i$i$i102 = 0, $__p$i$i$i109 = 0, $__p$i$i$i113 = 0;
 var $__p$i$i$i12 = 0, $__p$i$i$i16 = 0, $__p$i$i$i20 = 0, $__p$i$i$i24 = 0, $__p$i$i$i28 = 0, $__p$i$i$i32 = 0, $__p$i$i$i36 = 0, $__p$i$i$i4 = 0, $__p$i$i$i40 = 0, $__p$i$i$i44 = 0, $__p$i$i$i48 = 0, $__p$i$i$i52 = 0, $__p$i$i$i56 = 0, $__p$i$i$i60 = 0, $__p$i$i$i64 = 0, $__p$i$i$i68 = 0, $__p$i$i$i72 = 0, $__p$i$i$i76 = 0, $__p$i$i$i8 = 0, $__p$i$i$i80 = 0;
 var $__p$i$i$i84 = 0, $__p$i$i$i88 = 0, $__p$i$i$i92 = 0, $__p$i$i$i96 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $__p$i$i$i113 = sp + 160|0;
 $__p$i$i$i109 = sp + 144|0;
 $__p$i$i$i102 = sp + 128|0;
 $__p$i$i$i96 = sp + 400|0;
 $__p$i$i$i92 = sp + 368|0;
 $__p$i$i$i88 = sp + 32|0;
 $__p$i$i$i84 = sp + 48|0;
 $__p$i$i$i80 = sp + 256|0;
 $__p$i$i$i76 = sp + 64|0;
 $__p$i$i$i72 = sp + 80|0;
 $__p$i$i$i68 = sp + 320|0;
 $__p$i$i$i64 = sp + 352|0;
 $__p$i$i$i60 = sp + 384|0;
 $__p$i$i$i56 = sp + 416|0;
 $__p$i$i$i52 = sp + 432|0;
 $__p$i$i$i48 = sp + 240|0;
 $__p$i$i$i44 = sp + 176|0;
 $__p$i$i$i40 = sp + 192|0;
 $__p$i$i$i36 = sp + 208|0;
 $__p$i$i$i32 = sp + 224|0;
 $__p$i$i$i28 = sp + 16|0;
 $__p$i$i$i24 = sp + 272|0;
 $__p$i$i$i20 = sp + 304|0;
 $__p$i$i$i16 = sp + 96|0;
 $__p$i$i$i12 = sp + 288|0;
 $__p$i$i$i8 = sp;
 $__p$i$i$i4 = sp + 112|0;
 $__p$i$i$i = sp + 336|0;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((9048 + 8|0));
 $2 = (($this) + 8|0);
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $5 = (($this) + 136|0);
 $6 = (($this) + 24|0);
 HEAP8[$5>>0] = 1;
 HEAP32[$3>>2] = $6;
 HEAP32[$2>>2] = $6;
 HEAP32[$4>>2] = $5;
 $$0$i$i = 28;$8 = $6;
 while(1) {
  $7 = ($8|0)==(0|0);
  if ($7) {
   $10 = 0;
  } else {
   HEAP32[$8>>2] = 0;
   $$pre1$i$i = HEAP32[$3>>2]|0;
   $10 = $$pre1$i$i;
  }
  $9 = (($10) + 4|0);
  HEAP32[$3>>2] = $9;
  $11 = (($$0$i$i) + -1)|0;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i$i = $11;$8 = $9;
  }
 }
 $13 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(431,($13|0),(9040|0),1);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $338 = ___cxa_find_matching_catch(-1,-1)|0;
  $339 = tempRet0;
  $$0 = $339;$$01 = $338;
 } else {
  $16 = HEAP32[$2>>2]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = ($17|0)==($16|0);
  if (!($18)) {
   $__new_last2$i$i$i = $16;
   $scevgep$i$i$i = (($17) + -4|0);
   $19 = (0 - ($__new_last2$i$i$i))|0;
   $uglygep$i$i$i = (($scevgep$i$i$i) + ($19)|0);
   $uglygep3$i$i$i = $uglygep$i$i$i;
   $20 = $uglygep3$i$i$i >>> 2;
   $21 = $20 ^ -1;
   $scevgep4$i$i$i = (($17) + ($21<<2)|0);
   HEAP32[$3>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((13944 + 4|0))>>2] = 0;
  HEAP32[13944>>2] = ((7528 + 8|0));
  $22 = HEAP32[7560>>2]|0;
  $23 = ($22|0)==(-1);
  if ($23) {
   label = 10;
  } else {
   HEAP32[$__p$i$i$i4>>2] = 7560;
   $24 = (($__p$i$i$i4) + 4|0);
   HEAP32[$24>>2] = (631);
   $25 = (($__p$i$i$i4) + 8|0);
   HEAP32[$25>>2] = 0;
   __THREW__ = 0;
   invoke_viii(632,(7560|0),($__p$i$i$i4|0),(633|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 111;
   } else {
    label = 10;
   }
  }
  L14: do {
   if ((label|0) == 10) {
    $28 = HEAP32[((7560 + 4|0))>>2]|0;
    $29 = (($28) + -1)|0;
    __THREW__ = 0;
    invoke_viii(676,($this|0),(13944|0),($29|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 111;
    } else {
     HEAP32[((13936 + 4|0))>>2] = 0;
     HEAP32[13936>>2] = ((7568 + 8|0));
     $32 = HEAP32[7600>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i8>>2] = 7600;
      $34 = (($__p$i$i$i8) + 4|0);
      HEAP32[$34>>2] = (631);
      $35 = (($__p$i$i$i8) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_viii(632,(7600|0),($__p$i$i$i8|0),(633|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 111;
       break;
      }
     }
     $38 = HEAP32[((7600 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     __THREW__ = 0;
     invoke_viii(676,($this|0),(13936|0),($39|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      label = 111;
     } else {
      HEAP32[((13920 + 4|0))>>2] = 0;
      HEAP32[13920>>2] = ((9144 + 8|0));
      HEAP32[((13920 + 8|0))>>2] = 0;
      HEAP8[((13920 + 12|0))>>0] = 0;
      __THREW__ = 0;
      $42 = (invoke_i(677)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
      $47 = HEAP32[$42>>2]|0;
      HEAP32[((13920 + 8|0))>>2] = $47;
      $48 = HEAP32[9136>>2]|0;
      $49 = ($48|0)==(-1);
      if (!($49)) {
       HEAP32[$__p$i$i$i12>>2] = 9136;
       $50 = (($__p$i$i$i12) + 4|0);
       HEAP32[$50>>2] = (631);
       $51 = (($__p$i$i$i12) + 8|0);
       HEAP32[$51>>2] = 0;
       __THREW__ = 0;
       invoke_viii(632,(9136|0),($__p$i$i$i12|0),(633|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 111;
        break;
       }
      }
      $54 = HEAP32[((9136 + 4|0))>>2]|0;
      $55 = (($54) + -1)|0;
      __THREW__ = 0;
      invoke_viii(676,($this|0),(13920|0),($55|0));
      $56 = __THREW__; __THREW__ = 0;
      $57 = $56&1;
      if ($57) {
       label = 111;
      } else {
       HEAP32[((13912 + 4|0))>>2] = 0;
       HEAP32[13912>>2] = ((10104 + 8|0));
       $58 = HEAP32[9128>>2]|0;
       $59 = ($58|0)==(-1);
       if (!($59)) {
        HEAP32[$__p$i$i$i16>>2] = 9128;
        $60 = (($__p$i$i$i16) + 4|0);
        HEAP32[$60>>2] = (631);
        $61 = (($__p$i$i$i16) + 8|0);
        HEAP32[$61>>2] = 0;
        __THREW__ = 0;
        invoke_viii(632,(9128|0),($__p$i$i$i16|0),(633|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         label = 111;
         break;
        }
       }
       $64 = HEAP32[((9128 + 4|0))>>2]|0;
       $65 = (($64) + -1)|0;
       __THREW__ = 0;
       invoke_viii(676,($this|0),(13912|0),($65|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        label = 111;
       } else {
        HEAP32[((13904 + 4|0))>>2] = 0;
        HEAP32[13904>>2] = ((10320 + 8|0));
        $68 = HEAP32[9200>>2]|0;
        $69 = ($68|0)==(-1);
        if (!($69)) {
         HEAP32[$__p$i$i$i20>>2] = 9200;
         $70 = (($__p$i$i$i20) + 4|0);
         HEAP32[$70>>2] = (631);
         $71 = (($__p$i$i$i20) + 8|0);
         HEAP32[$71>>2] = 0;
         __THREW__ = 0;
         invoke_viii(632,(9200|0),($__p$i$i$i20|0),(633|0));
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 111;
          break;
         }
        }
        $74 = HEAP32[((9200 + 4|0))>>2]|0;
        $75 = (($74) + -1)|0;
        __THREW__ = 0;
        invoke_viii(676,($this|0),(13904|0),($75|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 111;
        } else {
         HEAP32[((13888 + 4|0))>>2] = 0;
         HEAP32[13888>>2] = ((9216 + 8|0));
         $78 = HEAP8[9032>>0]|0;
         $79 = ($78<<24>>24)==(0);
         do {
          if ($79) {
           $80 = (___cxa_guard_acquire((9032|0))|0);
           $81 = ($80|0)==(0);
           if (!($81)) {
            __THREW__ = 0;
            $82 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
            $83 = __THREW__; __THREW__ = 0;
            $84 = $83&1;
            if ($84) {
             $85 = ___cxa_find_matching_catch(-1,-1)|0;
             $86 = tempRet0;
             ___cxa_guard_abort((9032|0));
             $eh$lpad$body$index4Z2D = $86;$eh$lpad$body$indexZ2D = $85;
             break L14;
            } else {
             HEAP32[9024>>2] = $82;
             ___cxa_guard_release((9032|0));
             break;
            }
           }
          }
         } while(0);
         $87 = HEAP32[9024>>2]|0;
         HEAP32[((13888 + 8|0))>>2] = $87;
         $88 = HEAP32[9208>>2]|0;
         $89 = ($88|0)==(-1);
         if (!($89)) {
          HEAP32[$__p$i$i$i24>>2] = 9208;
          $90 = (($__p$i$i$i24) + 4|0);
          HEAP32[$90>>2] = (631);
          $91 = (($__p$i$i$i24) + 8|0);
          HEAP32[$91>>2] = 0;
          __THREW__ = 0;
          invoke_viii(632,(9208|0),($__p$i$i$i24|0),(633|0));
          $92 = __THREW__; __THREW__ = 0;
          $93 = $92&1;
          if ($93) {
           label = 111;
           break;
          }
         }
         $94 = HEAP32[((9208 + 4|0))>>2]|0;
         $95 = (($94) + -1)|0;
         __THREW__ = 0;
         invoke_viii(676,($this|0),(13888|0),($95|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 111;
         } else {
          HEAP32[((13880 + 4|0))>>2] = 0;
          HEAP32[13880>>2] = ((10544 + 8|0));
          $98 = HEAP32[9264>>2]|0;
          $99 = ($98|0)==(-1);
          if (!($99)) {
           HEAP32[$__p$i$i$i28>>2] = 9264;
           $100 = (($__p$i$i$i28) + 4|0);
           HEAP32[$100>>2] = (631);
           $101 = (($__p$i$i$i28) + 8|0);
           HEAP32[$101>>2] = 0;
           __THREW__ = 0;
           invoke_viii(632,(9264|0),($__p$i$i$i28|0),(633|0));
           $102 = __THREW__; __THREW__ = 0;
           $103 = $102&1;
           if ($103) {
            label = 111;
            break;
           }
          }
          $104 = HEAP32[((9264 + 4|0))>>2]|0;
          $105 = (($104) + -1)|0;
          __THREW__ = 0;
          invoke_viii(676,($this|0),(13880|0),($105|0));
          $106 = __THREW__; __THREW__ = 0;
          $107 = $106&1;
          if ($107) {
           label = 111;
          } else {
           HEAP32[((13872 + 4|0))>>2] = 0;
           HEAP32[13872>>2] = ((10664 + 8|0));
           $108 = HEAP32[9272>>2]|0;
           $109 = ($108|0)==(-1);
           if (!($109)) {
            HEAP32[$__p$i$i$i32>>2] = 9272;
            $110 = (($__p$i$i$i32) + 4|0);
            HEAP32[$110>>2] = (631);
            $111 = (($__p$i$i$i32) + 8|0);
            HEAP32[$111>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(9272|0),($__p$i$i$i32|0),(633|0));
            $112 = __THREW__; __THREW__ = 0;
            $113 = $112&1;
            if ($113) {
             label = 111;
             break;
            }
           }
           $114 = HEAP32[((9272 + 4|0))>>2]|0;
           $115 = (($114) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13872|0),($115|0));
           $116 = __THREW__; __THREW__ = 0;
           $117 = $116&1;
           if ($117) {
            label = 111;
            break;
           }
           HEAP32[((13848 + 4|0))>>2] = 0;
           HEAP32[13848>>2] = ((9296 + 8|0));
           HEAP8[((13848 + 8|0))>>0] = 46;
           HEAP8[((13848 + 9|0))>>0] = 44;
           ;HEAP32[((13848 + 12|0))+0>>2]=0|0;HEAP32[((13848 + 12|0))+4>>2]=0|0;HEAP32[((13848 + 12|0))+8>>2]=0|0;
           $118 = HEAP32[9280>>2]|0;
           $119 = ($118|0)==(-1);
           if (!($119)) {
            HEAP32[$__p$i$i$i36>>2] = 9280;
            $120 = (($__p$i$i$i36) + 4|0);
            HEAP32[$120>>2] = (631);
            $121 = (($__p$i$i$i36) + 8|0);
            HEAP32[$121>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(9280|0),($__p$i$i$i36|0),(633|0));
            $122 = __THREW__; __THREW__ = 0;
            $123 = $122&1;
            if ($123) {
             label = 111;
             break;
            }
           }
           $124 = HEAP32[((9280 + 4|0))>>2]|0;
           $125 = (($124) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13848|0),($125|0));
           $126 = __THREW__; __THREW__ = 0;
           $127 = $126&1;
           if ($127) {
            label = 111;
            break;
           }
           HEAP32[((13816 + 4|0))>>2] = 0;
           HEAP32[13816>>2] = ((9336 + 8|0));
           HEAP32[((13816 + 8|0))>>2] = 46;
           HEAP32[((13816 + 12|0))>>2] = 44;
           ;HEAP32[((13816 + 16|0))+0>>2]=0|0;HEAP32[((13816 + 16|0))+4>>2]=0|0;HEAP32[((13816 + 16|0))+8>>2]=0|0;
           $128 = HEAP32[9288>>2]|0;
           $129 = ($128|0)==(-1);
           if (!($129)) {
            HEAP32[$__p$i$i$i40>>2] = 9288;
            $130 = (($__p$i$i$i40) + 4|0);
            HEAP32[$130>>2] = (631);
            $131 = (($__p$i$i$i40) + 8|0);
            HEAP32[$131>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(9288|0),($__p$i$i$i40|0),(633|0));
            $132 = __THREW__; __THREW__ = 0;
            $133 = $132&1;
            if ($133) {
             label = 111;
             break;
            }
           }
           $134 = HEAP32[((9288 + 4|0))>>2]|0;
           $135 = (($134) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13816|0),($135|0));
           $136 = __THREW__; __THREW__ = 0;
           $137 = $136&1;
           if ($137) {
            label = 111;
            break;
           }
           HEAP32[((13808 + 4|0))>>2] = 0;
           HEAP32[13808>>2] = ((7608 + 8|0));
           $138 = HEAP32[7672>>2]|0;
           $139 = ($138|0)==(-1);
           if (!($139)) {
            HEAP32[$__p$i$i$i44>>2] = 7672;
            $140 = (($__p$i$i$i44) + 4|0);
            HEAP32[$140>>2] = (631);
            $141 = (($__p$i$i$i44) + 8|0);
            HEAP32[$141>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(7672|0),($__p$i$i$i44|0),(633|0));
            $142 = __THREW__; __THREW__ = 0;
            $143 = $142&1;
            if ($143) {
             label = 111;
             break;
            }
           }
           $144 = HEAP32[((7672 + 4|0))>>2]|0;
           $145 = (($144) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13808|0),($145|0));
           $146 = __THREW__; __THREW__ = 0;
           $147 = $146&1;
           if ($147) {
            label = 111;
            break;
           }
           HEAP32[((13800 + 4|0))>>2] = 0;
           HEAP32[13800>>2] = ((7728 + 8|0));
           $148 = HEAP32[7792>>2]|0;
           $149 = ($148|0)==(-1);
           if (!($149)) {
            HEAP32[$__p$i$i$i48>>2] = 7792;
            $150 = (($__p$i$i$i48) + 4|0);
            HEAP32[$150>>2] = (631);
            $151 = (($__p$i$i$i48) + 8|0);
            HEAP32[$151>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(7792|0),($__p$i$i$i48|0),(633|0));
            $152 = __THREW__; __THREW__ = 0;
            $153 = $152&1;
            if ($153) {
             label = 111;
             break;
            }
           }
           $154 = HEAP32[((7792 + 4|0))>>2]|0;
           $155 = (($154) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13800|0),($155|0));
           $156 = __THREW__; __THREW__ = 0;
           $157 = $156&1;
           if ($157) {
            label = 111;
            break;
           }
           HEAP32[((13792 + 4|0))>>2] = 0;
           HEAP32[13792>>2] = ((7800 + 8|0));
           $158 = HEAP32[7856>>2]|0;
           $159 = ($158|0)==(-1);
           if (!($159)) {
            HEAP32[$__p$i$i$i52>>2] = 7856;
            $160 = (($__p$i$i$i52) + 4|0);
            HEAP32[$160>>2] = (631);
            $161 = (($__p$i$i$i52) + 8|0);
            HEAP32[$161>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(7856|0),($__p$i$i$i52|0),(633|0));
            $162 = __THREW__; __THREW__ = 0;
            $163 = $162&1;
            if ($163) {
             label = 111;
             break;
            }
           }
           $164 = HEAP32[((7856 + 4|0))>>2]|0;
           $165 = (($164) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13792|0),($165|0));
           $166 = __THREW__; __THREW__ = 0;
           $167 = $166&1;
           if ($167) {
            label = 111;
            break;
           }
           HEAP32[((13784 + 4|0))>>2] = 0;
           HEAP32[13784>>2] = ((7864 + 8|0));
           $168 = HEAP32[7920>>2]|0;
           $169 = ($168|0)==(-1);
           if (!($169)) {
            HEAP32[$__p$i$i$i56>>2] = 7920;
            $170 = (($__p$i$i$i56) + 4|0);
            HEAP32[$170>>2] = (631);
            $171 = (($__p$i$i$i56) + 8|0);
            HEAP32[$171>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(7920|0),($__p$i$i$i56|0),(633|0));
            $172 = __THREW__; __THREW__ = 0;
            $173 = $172&1;
            if ($173) {
             label = 111;
             break;
            }
           }
           $174 = HEAP32[((7920 + 4|0))>>2]|0;
           $175 = (($174) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13784|0),($175|0));
           $176 = __THREW__; __THREW__ = 0;
           $177 = $176&1;
           if ($177) {
            label = 111;
            break;
           }
           HEAP32[((13776 + 4|0))>>2] = 0;
           HEAP32[13776>>2] = ((8456 + 8|0));
           $178 = HEAP32[8512>>2]|0;
           $179 = ($178|0)==(-1);
           if (!($179)) {
            HEAP32[$__p$i$i$i60>>2] = 8512;
            $180 = (($__p$i$i$i60) + 4|0);
            HEAP32[$180>>2] = (631);
            $181 = (($__p$i$i$i60) + 8|0);
            HEAP32[$181>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8512|0),($__p$i$i$i60|0),(633|0));
            $182 = __THREW__; __THREW__ = 0;
            $183 = $182&1;
            if ($183) {
             label = 111;
             break;
            }
           }
           $184 = HEAP32[((8512 + 4|0))>>2]|0;
           $185 = (($184) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13776|0),($185|0));
           $186 = __THREW__; __THREW__ = 0;
           $187 = $186&1;
           if ($187) {
            label = 111;
            break;
           }
           HEAP32[((13768 + 4|0))>>2] = 0;
           HEAP32[13768>>2] = ((8520 + 8|0));
           $188 = HEAP32[8576>>2]|0;
           $189 = ($188|0)==(-1);
           if (!($189)) {
            HEAP32[$__p$i$i$i64>>2] = 8576;
            $190 = (($__p$i$i$i64) + 4|0);
            HEAP32[$190>>2] = (631);
            $191 = (($__p$i$i$i64) + 8|0);
            HEAP32[$191>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8576|0),($__p$i$i$i64|0),(633|0));
            $192 = __THREW__; __THREW__ = 0;
            $193 = $192&1;
            if ($193) {
             label = 111;
             break;
            }
           }
           $194 = HEAP32[((8576 + 4|0))>>2]|0;
           $195 = (($194) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13768|0),($195|0));
           $196 = __THREW__; __THREW__ = 0;
           $197 = $196&1;
           if ($197) {
            label = 111;
            break;
           }
           HEAP32[((13760 + 4|0))>>2] = 0;
           HEAP32[13760>>2] = ((8584 + 8|0));
           $198 = HEAP32[8640>>2]|0;
           $199 = ($198|0)==(-1);
           if (!($199)) {
            HEAP32[$__p$i$i$i68>>2] = 8640;
            $200 = (($__p$i$i$i68) + 4|0);
            HEAP32[$200>>2] = (631);
            $201 = (($__p$i$i$i68) + 8|0);
            HEAP32[$201>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8640|0),($__p$i$i$i68|0),(633|0));
            $202 = __THREW__; __THREW__ = 0;
            $203 = $202&1;
            if ($203) {
             label = 111;
             break;
            }
           }
           $204 = HEAP32[((8640 + 4|0))>>2]|0;
           $205 = (($204) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13760|0),($205|0));
           $206 = __THREW__; __THREW__ = 0;
           $207 = $206&1;
           if ($207) {
            label = 111;
            break;
           }
           HEAP32[((13752 + 4|0))>>2] = 0;
           HEAP32[13752>>2] = ((8648 + 8|0));
           $208 = HEAP32[8704>>2]|0;
           $209 = ($208|0)==(-1);
           if (!($209)) {
            HEAP32[$__p$i$i$i72>>2] = 8704;
            $210 = (($__p$i$i$i72) + 4|0);
            HEAP32[$210>>2] = (631);
            $211 = (($__p$i$i$i72) + 8|0);
            HEAP32[$211>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8704|0),($__p$i$i$i72|0),(633|0));
            $212 = __THREW__; __THREW__ = 0;
            $213 = $212&1;
            if ($213) {
             label = 111;
             break;
            }
           }
           $214 = HEAP32[((8704 + 4|0))>>2]|0;
           $215 = (($214) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13752|0),($215|0));
           $216 = __THREW__; __THREW__ = 0;
           $217 = $216&1;
           if ($217) {
            label = 111;
            break;
           }
           HEAP32[((13744 + 4|0))>>2] = 0;
           HEAP32[13744>>2] = ((8712 + 8|0));
           $218 = HEAP32[8744>>2]|0;
           $219 = ($218|0)==(-1);
           if (!($219)) {
            HEAP32[$__p$i$i$i76>>2] = 8744;
            $220 = (($__p$i$i$i76) + 4|0);
            HEAP32[$220>>2] = (631);
            $221 = (($__p$i$i$i76) + 8|0);
            HEAP32[$221>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8744|0),($__p$i$i$i76|0),(633|0));
            $222 = __THREW__; __THREW__ = 0;
            $223 = $222&1;
            if ($223) {
             label = 111;
             break;
            }
           }
           $224 = HEAP32[((8744 + 4|0))>>2]|0;
           $225 = (($224) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13744|0),($225|0));
           $226 = __THREW__; __THREW__ = 0;
           $227 = $226&1;
           if ($227) {
            label = 111;
            break;
           }
           HEAP32[((13736 + 4|0))>>2] = 0;
           HEAP32[13736>>2] = ((8792 + 8|0));
           $228 = HEAP32[8824>>2]|0;
           $229 = ($228|0)==(-1);
           if (!($229)) {
            HEAP32[$__p$i$i$i80>>2] = 8824;
            $230 = (($__p$i$i$i80) + 4|0);
            HEAP32[$230>>2] = (631);
            $231 = (($__p$i$i$i80) + 8|0);
            HEAP32[$231>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8824|0),($__p$i$i$i80|0),(633|0));
            $232 = __THREW__; __THREW__ = 0;
            $233 = $232&1;
            if ($233) {
             label = 111;
             break;
            }
           }
           $234 = HEAP32[((8824 + 4|0))>>2]|0;
           $235 = (($234) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13736|0),($235|0));
           $236 = __THREW__; __THREW__ = 0;
           $237 = $236&1;
           if ($237) {
            label = 111;
            break;
           }
           HEAP32[((13728 + 4|0))>>2] = 0;
           HEAP32[13728>>2] = ((8848 + 8|0));
           $238 = HEAP32[8880>>2]|0;
           $239 = ($238|0)==(-1);
           if (!($239)) {
            HEAP32[$__p$i$i$i84>>2] = 8880;
            $240 = (($__p$i$i$i84) + 4|0);
            HEAP32[$240>>2] = (631);
            $241 = (($__p$i$i$i84) + 8|0);
            HEAP32[$241>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8880|0),($__p$i$i$i84|0),(633|0));
            $242 = __THREW__; __THREW__ = 0;
            $243 = $242&1;
            if ($243) {
             label = 111;
             break;
            }
           }
           $244 = HEAP32[((8880 + 4|0))>>2]|0;
           $245 = (($244) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13728|0),($245|0));
           $246 = __THREW__; __THREW__ = 0;
           $247 = $246&1;
           if ($247) {
            label = 111;
            break;
           }
           HEAP32[((13720 + 4|0))>>2] = 0;
           HEAP32[13720>>2] = ((8896 + 8|0));
           $248 = HEAP32[8928>>2]|0;
           $249 = ($248|0)==(-1);
           if (!($249)) {
            HEAP32[$__p$i$i$i88>>2] = 8928;
            $250 = (($__p$i$i$i88) + 4|0);
            HEAP32[$250>>2] = (631);
            $251 = (($__p$i$i$i88) + 8|0);
            HEAP32[$251>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8928|0),($__p$i$i$i88|0),(633|0));
            $252 = __THREW__; __THREW__ = 0;
            $253 = $252&1;
            if ($253) {
             label = 111;
             break;
            }
           }
           $254 = HEAP32[((8928 + 4|0))>>2]|0;
           $255 = (($254) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13720|0),($255|0));
           $256 = __THREW__; __THREW__ = 0;
           $257 = $256&1;
           if ($257) {
            label = 111;
            break;
           }
           HEAP32[((13704 + 4|0))>>2] = 0;
           HEAP32[13704>>2] = ((7944 + 8|0));
           HEAP32[((13704 + 8|0))>>2] = ((7944 + 56|0));
           $258 = HEAP32[8032>>2]|0;
           $259 = ($258|0)==(-1);
           if (!($259)) {
            HEAP32[$__p$i$i$i92>>2] = 8032;
            $260 = (($__p$i$i$i92) + 4|0);
            HEAP32[$260>>2] = (631);
            $261 = (($__p$i$i$i92) + 8|0);
            HEAP32[$261>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8032|0),($__p$i$i$i92|0),(633|0));
            $262 = __THREW__; __THREW__ = 0;
            $263 = $262&1;
            if ($263) {
             label = 111;
             break;
            }
           }
           $264 = HEAP32[((8032 + 4|0))>>2]|0;
           $265 = (($264) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13704|0),($265|0));
           $266 = __THREW__; __THREW__ = 0;
           $267 = $266&1;
           if ($267) {
            label = 111;
            break;
           }
           HEAP32[((13688 + 4|0))>>2] = 0;
           HEAP32[13688>>2] = ((8096 + 8|0));
           HEAP32[((13688 + 8|0))>>2] = ((8096 + 56|0));
           $268 = HEAP32[8184>>2]|0;
           $269 = ($268|0)==(-1);
           if (!($269)) {
            HEAP32[$__p$i$i$i96>>2] = 8184;
            $270 = (($__p$i$i$i96) + 4|0);
            HEAP32[$270>>2] = (631);
            $271 = (($__p$i$i$i96) + 8|0);
            HEAP32[$271>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8184|0),($__p$i$i$i96|0),(633|0));
            $272 = __THREW__; __THREW__ = 0;
            $273 = $272&1;
            if ($273) {
             label = 111;
             break;
            }
           }
           $274 = HEAP32[((8184 + 4|0))>>2]|0;
           $275 = (($274) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13688|0),($275|0));
           $276 = __THREW__; __THREW__ = 0;
           $277 = $276&1;
           if ($277) {
            label = 111;
            break;
           }
           HEAP32[((13672 + 4|0))>>2] = 0;
           HEAP32[13672>>2] = ((10040 + 8|0));
           $278 = HEAP8[9032>>0]|0;
           $279 = ($278<<24>>24)==(0);
           do {
            if ($279) {
             $280 = (___cxa_guard_acquire((9032|0))|0);
             $281 = ($280|0)==(0);
             if ($281) {
              break;
             }
             __THREW__ = 0;
             $282 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
             $283 = __THREW__; __THREW__ = 0;
             $284 = $283&1;
             if ($284) {
              $285 = ___cxa_find_matching_catch(-1,-1)|0;
              $286 = tempRet0;
              ___cxa_guard_abort((9032|0));
              $eh$lpad$body$index4Z2D = $286;$eh$lpad$body$indexZ2D = $285;
              break L14;
             } else {
              HEAP32[9024>>2] = $282;
              ___cxa_guard_release((9032|0));
              break;
             }
            }
           } while(0);
           $287 = HEAP32[9024>>2]|0;
           HEAP32[((13672 + 8|0))>>2] = $287;
           HEAP32[13672>>2] = ((8392 + 8|0));
           $288 = HEAP32[8416>>2]|0;
           $289 = ($288|0)==(-1);
           if (!($289)) {
            HEAP32[$__p$i$i$i102>>2] = 8416;
            $290 = (($__p$i$i$i102) + 4|0);
            HEAP32[$290>>2] = (631);
            $291 = (($__p$i$i$i102) + 8|0);
            HEAP32[$291>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8416|0),($__p$i$i$i102|0),(633|0));
            $292 = __THREW__; __THREW__ = 0;
            $293 = $292&1;
            if ($293) {
             label = 111;
             break;
            }
           }
           $294 = HEAP32[((8416 + 4|0))>>2]|0;
           $295 = (($294) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13672|0),($295|0));
           $296 = __THREW__; __THREW__ = 0;
           $297 = $296&1;
           if ($297) {
            label = 111;
            break;
           }
           HEAP32[((13656 + 4|0))>>2] = 0;
           HEAP32[13656>>2] = ((10040 + 8|0));
           $298 = HEAP8[9032>>0]|0;
           $299 = ($298<<24>>24)==(0);
           do {
            if ($299) {
             $300 = (___cxa_guard_acquire((9032|0))|0);
             $301 = ($300|0)==(0);
             if ($301) {
              break;
             }
             __THREW__ = 0;
             $302 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
             $303 = __THREW__; __THREW__ = 0;
             $304 = $303&1;
             if ($304) {
              $305 = ___cxa_find_matching_catch(-1,-1)|0;
              $306 = tempRet0;
              ___cxa_guard_abort((9032|0));
              $eh$lpad$body$index4Z2D = $306;$eh$lpad$body$indexZ2D = $305;
              break L14;
             } else {
              HEAP32[9024>>2] = $302;
              ___cxa_guard_release((9032|0));
              break;
             }
            }
           } while(0);
           $307 = HEAP32[9024>>2]|0;
           HEAP32[((13656 + 8|0))>>2] = $307;
           HEAP32[13656>>2] = ((8424 + 8|0));
           $308 = HEAP32[8448>>2]|0;
           $309 = ($308|0)==(-1);
           if (!($309)) {
            HEAP32[$__p$i$i$i109>>2] = 8448;
            $310 = (($__p$i$i$i109) + 4|0);
            HEAP32[$310>>2] = (631);
            $311 = (($__p$i$i$i109) + 8|0);
            HEAP32[$311>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8448|0),($__p$i$i$i109|0),(633|0));
            $312 = __THREW__; __THREW__ = 0;
            $313 = $312&1;
            if ($313) {
             label = 111;
             break;
            }
           }
           $314 = HEAP32[((8448 + 4|0))>>2]|0;
           $315 = (($314) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13656|0),($315|0));
           $316 = __THREW__; __THREW__ = 0;
           $317 = $316&1;
           if ($317) {
            label = 111;
            break;
           }
           HEAP32[((13648 + 4|0))>>2] = 0;
           HEAP32[13648>>2] = ((8936 + 8|0));
           $318 = HEAP32[8968>>2]|0;
           $319 = ($318|0)==(-1);
           if (!($319)) {
            HEAP32[$__p$i$i$i113>>2] = 8968;
            $320 = (($__p$i$i$i113) + 4|0);
            HEAP32[$320>>2] = (631);
            $321 = (($__p$i$i$i113) + 8|0);
            HEAP32[$321>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(8968|0),($__p$i$i$i113|0),(633|0));
            $322 = __THREW__; __THREW__ = 0;
            $323 = $322&1;
            if ($323) {
             label = 111;
             break;
            }
           }
           $324 = HEAP32[((8968 + 4|0))>>2]|0;
           $325 = (($324) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13648|0),($325|0));
           $326 = __THREW__; __THREW__ = 0;
           $327 = $326&1;
           if ($327) {
            label = 111;
            break;
           }
           HEAP32[((13640 + 4|0))>>2] = 0;
           HEAP32[13640>>2] = ((8976 + 8|0));
           $328 = HEAP32[9008>>2]|0;
           $329 = ($328|0)==(-1);
           if (!($329)) {
            HEAP32[$__p$i$i$i>>2] = 9008;
            $330 = (($__p$i$i$i) + 4|0);
            HEAP32[$330>>2] = (631);
            $331 = (($__p$i$i$i) + 8|0);
            HEAP32[$331>>2] = 0;
            __THREW__ = 0;
            invoke_viii(632,(9008|0),($__p$i$i$i|0),(633|0));
            $332 = __THREW__; __THREW__ = 0;
            $333 = $332&1;
            if ($333) {
             label = 111;
             break;
            }
           }
           $334 = HEAP32[((9008 + 4|0))>>2]|0;
           $335 = (($334) + -1)|0;
           __THREW__ = 0;
           invoke_viii(676,($this|0),(13640|0),($335|0));
           $336 = __THREW__; __THREW__ = 0;
           $337 = $336&1;
           if ($337) {
            label = 111;
            break;
           }
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 111) {
   $340 = ___cxa_find_matching_catch(-1,-1)|0;
   $341 = tempRet0;
   $eh$lpad$body$index4Z2D = $341;$eh$lpad$body$indexZ2D = $340;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
  $$0 = $eh$lpad$body$index4Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 $342 = HEAP32[$2>>2]|0;
 $343 = ($342|0)==(0|0);
 if ($343) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $344 = HEAP32[$3>>2]|0;
 $345 = ($344|0)==($342|0);
 if (!($345)) {
  $__new_last2$i$i$i$i$i = $342;
  $scevgep$i$i$i$i$i = (($344) + -4|0);
  $346 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($346)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $347 = $uglygep3$i$i$i$i$i >>> 2;
  $348 = $347 ^ -1;
  $scevgep4$i$i$i$i$i = (($344) + ($348<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i$i$i;
 }
 $349 = ($6|0)==($342|0);
 if ($349) {
  HEAP8[$5>>0] = 0;
  ___resumeException($$01|0);
  // unreachable;
 } else {
  __ZdlPv($342);
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $24 = $3;
  } else {
   $9 = (($id) + 1)|0;
   $10 = ($7>>>0)<($9>>>0);
   if (!($10)) {
    $14 = ($7>>>0)>($9>>>0);
    if (!($14)) {
     $24 = $3;
     break;
    }
    $15 = (($3) + ($9<<2)|0);
    $16 = ($2|0)==($15|0);
    if ($16) {
     $24 = $3;
     break;
    }
    $__new_last2$i$i$i = $15;
    $scevgep$i$i$i = (($2) + -4|0);
    $17 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $18 = $uglygep3$i$i$i >>> 2;
    $19 = $18 ^ -1;
    $scevgep4$i$i$i = (($2) + ($19<<2)|0);
    HEAP32[$1>>2] = $scevgep4$i$i$i;
    $24 = $3;
    break;
   }
   $11 = (($9) - ($7))|0;
   __THREW__ = 0;
   invoke_vii(678,($0|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$pre2 = HEAP32[$0>>2]|0;
    $24 = $$pre2;
    break;
   }
   $20 = ___cxa_find_matching_catch(-1,-1)|0;
   $21 = tempRet0;
   $22 = ($f|0)==(0|0);
   if ($22) {
    ___resumeException($20|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($20|0);
   // unreachable;
  }
 } while(0);
 $23 = (($24) + ($id<<2)|0);
 $25 = HEAP32[$23>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $28 = $24;
  $27 = (($28) + ($id<<2)|0);
  HEAP32[$27>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 $$pre = HEAP32[$0>>2]|0;
 $28 = $$pre;
 $27 = (($28) + ($id<<2)|0);
 HEAP32[$27>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9048 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $28 = $1;$6 = $3;$i$02 = 0;
  while(1) {
   $5 = (($6) + ($i$02<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $28;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$0>>2]|0;
    $$pre4 = HEAP32[$2>>2]|0;
    $11 = $$pre;$13 = $$pre4;
   }
   $9 = (($i$02) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $28 = $11;$6 = $13;$i$02 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20|0)==($18|0);
 if (!($21)) {
  $__new_last2$i$i$i$i$i = $18;
  $scevgep$i$i$i$i$i = (($20) + -4|0);
  $22 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($22)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $23 = $uglygep3$i$i$i$i$i >>> 2;
  $24 = $23 ^ -1;
  $scevgep4$i$i$i$i$i = (($20) + ($24<<2)|0);
  HEAP32[$0>>2] = $scevgep4$i$i$i$i$i;
 }
 $25 = (($this) + 24|0);
 $26 = ($25|0)==($18|0);
 if ($26) {
  $27 = (($this) + 136|0);
  HEAP8[$27>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($18);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9112>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[9104>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((9112|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[9104>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[9088>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((9088|0))|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    __THREW__ = 0;
    invoke_vii(679,(13480|0),1);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $13 = ___cxa_find_matching_catch(-1,-1)|0;
     $14 = tempRet0;
     ___cxa_guard_abort((9088|0));
     ___cxa_guard_abort((9112|0));
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[9072>>2] = 13480;
     HEAP32[9080>>2] = 9072;
     ___cxa_guard_release((9088|0));
     break;
    }
   }
  }
 } while(0);
 $10 = HEAP32[9080>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[9096>>2] = $11;
 __ZNSt3__114__shared_count12__add_sharedEv($11);
 HEAP32[9104>>2] = 9096;
 ___cxa_guard_release((9112|0));
 $12 = HEAP32[9104>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(680)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$x>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i>>2] = $x;
  $3 = (($__p$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x,$__p$i$i,633);
 }
 $5 = (($x) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($0) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = 0;
  STACKTOP = sp;return ($20|0);
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = $19;
 STACKTOP = sp;return ($20|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$x>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i>>2] = $x;
  $3 = (($__p$i$i) + 4|0);
  HEAP32[$3>>2] = (631);
  $4 = (($__p$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x,$__p$i$i,633);
 }
 $5 = (($x) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($0) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(17096|0),(390|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(17096|0),(390|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9120>>2]|0;HEAP32[9120>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(677)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  $1 = HEAP32[$$013>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(677)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9;
  } else {
   $10 = 0;
  }
  HEAP16[$$04>>1] = $10;
  $11 = (($$013) + 4|0);
  $12 = (($$04) + 2|0);
  $13 = ($11|0)==($high|0);
  if ($13) {
   $$01$lcssa = $high;
   label = 7;
   break;
  } else {
   $$013 = $11;$$04 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(677)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$02;
    label = 7;
    break;
   }
  }
  $12 = (($$02) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $3 = HEAP32[$$02>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$02;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(677)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($3<<1)|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & $m;
    $13 = ($12<<16>>16)==(0);
    $2 = (($$02) + 4|0);
    if ($13) {
     $$0$lcssa = $$02;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$02 = $2;
    }
   }
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(681)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(681)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(682)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(682)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9144 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9144 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(681)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(681)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03>>0] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(682)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(682)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03>>0] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(683,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(648,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(684,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(648,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L23: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012>>0]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97>>0] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L23;
         }
         $100 = (($p$012) + 1|0);
         $$pre99 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre99;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L28: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L28;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch(-1,-1)|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(648,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L53: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(684,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(648,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L53;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L53;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch(-1,-1)|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(648,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch(-1,-1)|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(648,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(685,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(648,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     } else if ((($26|0) == -1)) {
      label = 16;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre113;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(686,($70|0),($$pre113|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(648,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L23: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216>>0]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L23;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch(-1,-1)|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(648,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L49: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(686,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(648,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == -2)) {
         label = 28;
         break;
        } else if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else if ((($47|0) == -1)) {
         label = 27;
         break;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L49;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(648,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch(-1,-1)|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(648,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(684,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(648,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(648,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03>>0]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27>>0] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(648,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(687,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(648,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(648,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(648,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(648,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(688,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(648,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(648,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(648,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(648,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113>>0] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125>>0] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130>>0] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87>>0] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105>>0] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110>>0] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($mx) - ($nchar16_t$014))|0;
      $77 = ($76>>>0)<(2);
      if ($77) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $78 = (($frm_nxt$115) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$115) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 36;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 34;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $113 = (($nchar16_t$014) + 1)|0;
      $114 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41>>0] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69>>0] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75>>0] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80>>0] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $113 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $112 & $113;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $114 = $frm_nxt$1$lcssa;
 $115 = $frm;
 $116 = (($114) - ($115))|0;
 $$0 = $116;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9296 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9296 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9336 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9336 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,9376,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(9384)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,9384,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,9408,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(9416)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,9416,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9448>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[9440>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((9448|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[9440>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[16648>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16648|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16480|0),0,168)|0;
   (___cxa_atexit((689|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16648|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(690,(16480|0),(16656|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(690,(((16480 + 12|0))|0),(16664|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(690,(((16480 + 24|0))|0),(16672|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(690,(((16480 + 36|0))|0),(16680|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(690,(((16480 + 48|0))|0),(16696|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(690,(((16480 + 60|0))|0),(16712|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(690,(((16480 + 72|0))|0),(16720|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(690,(((16480 + 84|0))|0),(16736|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(690,(((16480 + 96|0))|0),(16744|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(690,(((16480 + 108|0))|0),(16752|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(690,(((16480 + 120|0))|0),(16760|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(690,(((16480 + 132|0))|0),(16768|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(690,(((16480 + 144|0))|0),(16776|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(690,(((16480 + 156|0))|0),(16784|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[9440>>2] = 16480;
               ___cxa_guard_release((9448|0));
               $36 = HEAP32[9440>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((9448|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9464>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[9456>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((9464|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[9456>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[16112>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16112|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((15944|0),0,168)|0;
   (___cxa_atexit((691|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16112|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(692,(15944|0),(16120|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(692,(((15944 + 12|0))|0),(16152|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(692,(((15944 + 24|0))|0),(16184|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(692,(((15944 + 36|0))|0),(16216|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(692,(((15944 + 48|0))|0),(16256|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(692,(((15944 + 60|0))|0),(16296|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(692,(((15944 + 72|0))|0),(16328|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(692,(((15944 + 84|0))|0),(16368|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(692,(((15944 + 96|0))|0),(16384|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(692,(((15944 + 108|0))|0),(16400|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(692,(((15944 + 120|0))|0),(16416|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(692,(((15944 + 132|0))|0),(16432|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(692,(((15944 + 144|0))|0),(16448|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(692,(((15944 + 156|0))|0),(16464|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[9456>>2] = 15944;
               ___cxa_guard_release((9464|0));
               $36 = HEAP32[9456>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((9464|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9480>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[9472>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((9480|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[9472>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[15720>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((15720|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((15432|0),0,288)|0;
   (___cxa_atexit((693|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((15720|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(690,(15432|0),(15728|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(690,(((15432 + 12|0))|0),(15736|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(690,(((15432 + 24|0))|0),(15752|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(690,(((15432 + 36|0))|0),(15760|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(690,(((15432 + 48|0))|0),(15768|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(690,(((15432 + 60|0))|0),(15776|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(690,(((15432 + 72|0))|0),(15784|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(690,(((15432 + 84|0))|0),(15792|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(690,(((15432 + 96|0))|0),(15800|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(690,(((15432 + 108|0))|0),(15816|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(690,(((15432 + 120|0))|0),(15824|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(690,(((15432 + 132|0))|0),(15840|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(690,(((15432 + 144|0))|0),(15856|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(690,(((15432 + 156|0))|0),(15864|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(690,(((15432 + 168|0))|0),(15872|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(690,(((15432 + 180|0))|0),(15880|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 192|0))|0),(15768|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 204|0))|0),(15888|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 216|0))|0),(15896|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 228|0))|0),(15904|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 240|0))|0),(15912|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 252|0))|0),(15920|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 264|0))|0),(15928|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(690,(((15432 + 276|0))|0),(15936|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[9472>>2] = 15432;
                  ___cxa_guard_release((9480|0));
                  $56 = HEAP32[9472>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((9480|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9496>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[9488>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((9496|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[9488>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[14880>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((14880|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((14592|0),0,288)|0;
   (___cxa_atexit((694|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((14880|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(692,(14592|0),(14888|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(692,(((14592 + 12|0))|0),(14920|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(692,(((14592 + 24|0))|0),(14960|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(692,(((14592 + 36|0))|0),(14984|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(692,(((14592 + 48|0))|0),(15304|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(692,(((14592 + 60|0))|0),(15008|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(692,(((14592 + 72|0))|0),(15032|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(692,(((14592 + 84|0))|0),(15056|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(692,(((14592 + 96|0))|0),(15088|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(692,(((14592 + 108|0))|0),(15128|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(692,(((14592 + 120|0))|0),(15160|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(692,(((14592 + 132|0))|0),(15200|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(692,(((14592 + 144|0))|0),(15240|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(692,(((14592 + 156|0))|0),(15256|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(692,(((14592 + 168|0))|0),(15272|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(692,(((14592 + 180|0))|0),(15288|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 192|0))|0),(15304|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 204|0))|0),(15320|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 216|0))|0),(15336|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 228|0))|0),(15352|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 240|0))|0),(15368|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 252|0))|0),(15384|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 264|0))|0),(15400|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(692,(((14592 + 276|0))|0),(15416|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[9488>>2] = 14592;
                  ___cxa_guard_release((9496|0));
                  $56 = HEAP32[9488>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((9496|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9512>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[9504>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((9512|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[9504>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[14568>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((14568|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((14280|0),0,288)|0;
   (___cxa_atexit((695|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((14568|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(690,(14280|0),(14576|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((9512|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(690,(((14280 + 12|0))|0),(14584|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((9512|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[9504>>2] = 14280;
 ___cxa_guard_release((9512|0));
 $12 = HEAP32[9504>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9528>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[9520>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((9528|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[9520>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[14240>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((14240|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13952|0),0,288)|0;
   (___cxa_atexit((696|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((14240|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(692,(13952|0),(14248|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((9528|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(692,(((13952 + 12|0))|0),(14264|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((9528|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[9520>>2] = 13952;
 ___cxa_guard_release((9528|0));
 $12 = HEAP32[9520>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9552>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9536|0);
 }
 $2 = (___cxa_guard_acquire((9552|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9536|0);
 }
 __THREW__ = 0;
 invoke_viii(431,(9536|0),(9560|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((9552|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((415|0),(9536|0),(___dso_handle|0))|0);
 ___cxa_guard_release((9552|0));
 STACKTOP = sp;return (9536|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9592>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9576|0);
 }
 $2 = (___cxa_guard_acquire((9592|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9576|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(697,(9600|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(698,(9576|0),(9600|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((699|0),(9576|0),(___dso_handle|0))|0);
   ___cxa_guard_release((9592|0));
   STACKTOP = sp;return (9576|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((9592|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9656>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9640|0);
 }
 $2 = (___cxa_guard_acquire((9656|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9640|0);
 }
 __THREW__ = 0;
 invoke_viii(431,(9640|0),(9664|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((9656|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((415|0),(9640|0),(___dso_handle|0))|0);
 ___cxa_guard_release((9656|0));
 STACKTOP = sp;return (9640|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9696>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9680|0);
 }
 $2 = (___cxa_guard_acquire((9696|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9680|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(697,(9704|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(698,(9680|0),(9704|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((699|0),(9680|0),(___dso_handle|0))|0);
   ___cxa_guard_release((9696|0));
   STACKTOP = sp;return (9680|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((9696|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9760>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9744|0);
 }
 $2 = (___cxa_guard_acquire((9760|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9744|0);
 }
 __THREW__ = 0;
 invoke_viii(431,(9744|0),(9768|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((9760|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((415|0),(9744|0),(___dso_handle|0))|0);
 ___cxa_guard_release((9760|0));
 STACKTOP = sp;return (9744|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9808>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9792|0);
 }
 $2 = (___cxa_guard_acquire((9808|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9792|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(697,(9816|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(698,(9792|0),(9816|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((699|0),(9792|0),(___dso_handle|0))|0);
   ___cxa_guard_release((9808|0));
   STACKTOP = sp;return (9792|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((9808|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9920>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9904|0);
 }
 $2 = (___cxa_guard_acquire((9920|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9904|0);
 }
 __THREW__ = 0;
 invoke_viii(431,(9904|0),(9928|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((9920|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((415|0),(9904|0),(___dso_handle|0))|0);
 ___cxa_guard_release((9920|0));
 STACKTOP = sp;return (9904|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[9960>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (9944|0);
 }
 $2 = (___cxa_guard_acquire((9960|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (9944|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(697,(9968|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(698,(9944|0),(9968|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((699|0),(9944|0),(___dso_handle|0))|0);
   ___cxa_guard_release((9960|0));
   STACKTOP = sp;return (9944|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((9960|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[9032>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((9032|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $7;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[9024>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if (!($18)) {
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $13;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[9032>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((9032|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $7;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[9024>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if (!($18)) {
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $13;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[9032>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((9032|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $7;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[9024>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if ($18) {
  HEAP32[$__err>>2] = 4;
 }
 $19 = $13;
 $$0 = $19;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[9032>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((9032|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $9;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[9024>>2]|0;
 $15 = (_strtoull_l($__a,$__p2,$__base,$14)|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $21 = ($17|0)==(34);
 if (!($21)) {
  $22 = $16;$23 = $15;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 HEAP32[$__err>>2] = 4;
 $22 = -1;$23 = -1;
 tempRet0 = $22;
 STACKTOP = sp;return ($23|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[9032>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((9032|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $9;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[9024>>2]|0;
 $15 = (_strtoull_l($__a,$__p2,$__base,$14)|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(4294967295);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[9032>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((9032|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $9;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[9024>>2]|0;
 $15 = (_strtoull_l($__a,$__p2,$__base,$14)|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(4294967295);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[9032>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((9032|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $9;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[9024>>2]|0;
 $15 = (_strtoull_l($__a,$__p2,$__base,$14)|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(65535);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $15&65535;
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[9032>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((9032|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $7;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[9024>>2]|0;
 $13 = (_strtoll_l($__a,$__p2,$__base,$12)|0);
 $14 = tempRet0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$1>>2] = $2;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $19 = ($15|0)==(34);
 if ($19) {
  HEAP32[$__err>>2] = 4;
  $20 = ($14|0)>(0);
  $21 = ($14|0)==(0);
  $22 = ($13>>>0)>(0);
  $23 = $21 & $22;
  $24 = $20 | $23;
  $25 = $24 ? -1 : 0;
  $26 = $24 ? 2147483647 : -2147483648;
  tempRet0 = $26;
  STACKTOP = sp;return ($25|0);
 } else {
  $27 = $14;$28 = $13;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[9032>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((9032|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(646,2147483647,(9040|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((9032|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[9024>>2] = $7;
     ___cxa_guard_release((9032|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[9024>>2]|0;
 $13 = (_strtoll_l($__a,$__p2,$__base,$12)|0);
 $14 = tempRet0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$1>>2] = $2;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($15|0)==(34);
 do {
  if ($19) {
   HEAP32[$__err>>2] = 4;
   $30 = ($14|0)>(0);
   $31 = ($14|0)==(0);
   $32 = ($13>>>0)>(0);
   $33 = $31 & $32;
   $34 = $30 | $33;
   if ($34) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $20 = ($14|0)<(-1);
   $21 = ($14|0)==(-1);
   $22 = ($13>>>0)<(2147483648);
   $23 = $21 & $22;
   $24 = $20 | $23;
   if ($24) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $25 = ($14|0)>(0);
   $26 = ($14|0)==(0);
   $27 = ($13>>>0)>(2147483647);
   $28 = $26 & $27;
   $29 = $25 | $28;
   if ($29) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $13;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$__vp>>2]|0;
 $$idx1 = (($__vp) + 4|0);
 $$idx1$val$field = HEAPU8[$$idx1>>0]|(HEAPU8[$$idx1+1>>0]<<8)|(HEAPU8[$$idx1+2>>0]<<16)|(HEAPU8[$$idx1+3>>0]<<24);
 $$idx1$val$index1 = (($$idx1) + 4|0);
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1>>0]|(HEAPU8[$$idx1$val$index1+1>>0]<<8)|(HEAPU8[$$idx1$val$index1+2>>0]<<16)|(HEAPU8[$$idx1$val$index1+3>>0]<<24);
 $0 = $$idx1$val$field2 >> 1;
 $1 = (($$idx$val) + ($0)|0);
 $2 = $$idx1$val$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$idx1$val$field;
  $8 = $7;
  FUNCTION_TABLE_vi[$8 & 1023]($1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$idx1$val$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vi[$8 & 1023]($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $$pre1$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  $$0$i = $__n;$10 = $3;
  while(1) {
   $9 = ($10|0)==(0|0);
   if ($9) {
    $12 = 0;
   } else {
    HEAP32[$10>>2] = 0;
    $$pre1$i = HEAP32[$2>>2]|0;
    $12 = $$pre1$i;
   }
   $11 = (($12) + 4|0);
   HEAP32[$2>>2] = $11;
   $13 = (($$0$i) + -1)|0;
   $14 = ($13|0)==(0);
   if ($14) {
    break;
   } else {
    $$0$i = $13;$10 = $11;
   }
  }
  STACKTOP = sp;return;
 }
 $15 = (($this) + 16|0);
 $16 = HEAP32[$this>>2]|0;
 $17 = $16;
 $18 = (($5) - ($17))|0;
 $19 = $18 >> 2;
 $20 = (($19) + ($__n))|0;
 $21 = ($20>>>0)>(1073741823);
 if ($21) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $22 = (($4) - ($17))|0;
 $23 = $22 >> 2;
 $24 = ($23>>>0)<(536870911);
 if ($24) {
  $25 = $22 >> 1;
  $26 = ($25>>>0)<($20>>>0);
  $27 = $26 ? $20 : $25;
  $28 = ($27|0)==(0);
  if ($28) {
   $$0$i57 = 0;$36 = 0;
  } else {
   $29 = (($this) + 128|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(0);
   $32 = ($27>>>0)<(29);
   $or$cond$i$i$i$i = $31 & $32;
   if ($or$cond$i$i$i$i) {
    HEAP8[$29>>0] = 1;
    $$0$i57 = $27;$36 = $15;
   } else {
    $$0$i569 = $27;
    label = 11;
   }
  }
 } else {
  $$0$i569 = 1073741823;
  label = 11;
 }
 if ((label|0) == 11) {
  $33 = $$0$i569 << 2;
  $34 = (__Znwj($33)|0);
  $$0$i57 = $$0$i569;$36 = $34;
 }
 $35 = (($36) + ($19<<2)|0);
 $$0$i2 = $__n;$38 = $35;
 while(1) {
  $37 = ($38|0)==(0|0);
  if ($37) {
   $40 = 0;
  } else {
   HEAP32[$38>>2] = 0;
   $40 = $38;
  }
  $39 = (($40) + 4|0);
  $41 = (($$0$i2) + -1)|0;
  $42 = ($41|0)==(0);
  if ($42) {
   break;
  } else {
   $$0$i2 = $41;$38 = $39;
  }
 }
 $43 = (($36) + ($$0$i57<<2)|0);
 $44 = HEAP32[$this>>2]|0;
 $45 = HEAP32[$2>>2]|0;
 $46 = $45;
 $47 = $44;
 $48 = (($46) - ($47))|0;
 $49 = $48 >> 2;
 $$sum = (($19) - ($49))|0;
 $50 = (($36) + ($$sum<<2)|0);
 _memcpy(($50|0),($44|0),($48|0))|0;
 HEAP32[$this>>2] = $50;
 HEAP32[$2>>2] = $39;
 HEAP32[$0>>2] = $43;
 $51 = ($44|0)==(0|0);
 if ($51) {
  STACKTOP = sp;return;
 }
 $52 = ($15|0)==($44|0);
 if ($52) {
  $53 = (($this) + 128|0);
  HEAP8[$53>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($44);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13952);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14280);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14592);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15432);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15944);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16480);
 STACKTOP = sp;return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 17000;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 17008 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (16792 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$18 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$18 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $18;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$840 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524>>0]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(3);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 30;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78>>0]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81>>0]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85>>0]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(3);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 31;
         break;
        }
       }
       if ((label|0) == 30) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$89>>0]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$442 = $$2;$$840 = $$6;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (16792 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$442 = $ws;$$840 = $$24;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (16792 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $109 = HEAP8[$s$8>>0]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 37;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119>>0]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 40;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129>>0]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 43;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 46;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 46;
 }
 else if ((label|0) == 37) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 46;
 }
 else if ((label|0) == 40) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 46;
 }
 else if ((label|0) == 43) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 46;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 46) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$442 = $$4;$$840 = $$8;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $143 = HEAP8[$s$1044>>0]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$442|0)==(0|0);
   if (!($145)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$840))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$441 = $$442;$s$1043 = $s$1044;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$441|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1043;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (16792 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$17 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$17 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $16 = ($17|0)==(0|0);
 L11: do {
  if ($16) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$038 = 0;$6 = $3;$ws2$09 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$14 = (($$pn) + ($$038))|0;
   $9 = (($ws2$09) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$14;
    label = 26;
    break;
   } else {
    $$038 = $$14;$6 = $10;$ws2$09 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre41 = HEAP32[$ws>>2]|0;
   $$0226 = $s;$$2525 = $n;$13 = $$pre41;
   while(1) {
    $12 = HEAP32[$13>>2]|0;
    $14 = ($12|0)==(0);
    if ($14) {
     $$02$lcssa = $$0226;$$25$lcssa = $$2525;
     break L14;
    }
    $16 = ($12>>>0)>(127);
    if ($16) {
     $17 = (_wcrtomb($$0226,$12,0)|0);
     $18 = ($17|0)==(-1);
     if ($18) {
      $$0 = -1;
      break;
     }
     $19 = (($$0226) + ($17)|0);
     $20 = (($$2525) - ($17))|0;
     $$1 = $19;$$36 = $20;$25 = $13;
    } else {
     $21 = $12&255;
     $22 = (($$0226) + 1|0);
     HEAP8[$$0226>>0] = $21;
     $23 = (($$2525) + -1)|0;
     $$pre42 = HEAP32[$ws>>2]|0;
     $$1 = $22;$$36 = $23;$25 = $$pre42;
    }
    $24 = (($25) + 4|0);
    HEAP32[$ws>>2] = $24;
    $26 = ($$36>>>0)>(3);
    if ($26) {
     $$0226 = $$1;$$2525 = $$36;$13 = $24;
    } else {
     $$02$lcssa = $$1;$$25$lcssa = $$36;
     break L14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$02$lcssa = $s;$$25$lcssa = $n;
  }
 } while(0);
 $15 = ($$25$lcssa|0)==(0);
 L26: do {
  if ($15) {
   $$414 = 0;
  } else {
   $$pre = HEAP32[$ws>>2]|0;
   $$219 = $$02$lcssa;$$418 = $$25$lcssa;$28 = $$pre;
   while(1) {
    $27 = HEAP32[$28>>2]|0;
    $29 = ($27|0)==(0);
    if ($29) {
     label = 24;
     break;
    }
    $30 = ($27>>>0)>(127);
    if ($30) {
     $31 = (_wcrtomb($buf,$27,0)|0);
     $32 = ($31|0)==(-1);
     if ($32) {
      $$0 = -1;
      label = 26;
      break;
     }
     $33 = ($31>>>0)>($$418>>>0);
     if ($33) {
      label = 20;
      break;
     }
     $35 = HEAP32[$28>>2]|0;
     (_wcrtomb($$219,$35,0)|0);
     $36 = (($$219) + ($31)|0);
     $37 = (($$418) - ($31))|0;
     $$3 = $36;$$5 = $37;$42 = $28;
    } else {
     $38 = $27&255;
     $39 = (($$219) + 1|0);
     HEAP8[$$219>>0] = $38;
     $40 = (($$418) + -1)|0;
     $$pre40 = HEAP32[$ws>>2]|0;
     $$3 = $39;$$5 = $40;$42 = $$pre40;
    }
    $41 = (($42) + 4|0);
    HEAP32[$ws>>2] = $41;
    $43 = ($$5|0)==(0);
    if ($43) {
     $$414 = 0;
     break L26;
    } else {
     $$219 = $$3;$$418 = $$5;$28 = $41;
    }
   }
   if ((label|0) == 20) {
    $34 = (($n) - ($$418))|0;
    $$0 = $34;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 24) {
    HEAP8[$$219>>0] = 0;
    $$414 = $$418;
    break;
   }
   else if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$ws>>2] = 0;
 $44 = (($n) - ($$414))|0;
 $$0 = $44;
 STACKTOP = sp;return ($$0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi213Z2D = 0, $$pre193 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre210 = 0, $$pre211 = 0, $$pre212 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0116 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0122 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0121 = 0, $pos$1 = 0, $pos$2 = 0, $s$0114 = 0, $s$1$ph = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0115 = 0;
 var $wcs$1 = 0, $wcs$2$ph = 0, $wcs$2$ph146 = 0, $wcs$3 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0116 = 0;$p$0122 = $fmt;$pos$0121 = 0;$s$0114 = 0;$wcs$0115 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0122>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0122) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 37)) {
        break L21;
       } else if ((($45<<24>>24) == 42)) {
        $65 = (($p$0122) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0122) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0122) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 91)) {
       $pos$1 = $pos$0121;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0121;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $103 = ($pos$0121|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $106 = $pos$0121&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0121&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0121;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0121;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0121;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre206 = HEAP32[$3>>2]|0;
       if ($123) {
        $128 = $$pre206;
       } else {
        $124 = (($$pre206) + -1|0);
        HEAP32[$3>>2] = $124;
        $128 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $127 = $128;
       $129 = $126;
       $130 = (($125) + ($pos$0121))|0;
       $131 = (($130) + ($127))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $140 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
        label = 162;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $140 = $$pre207;
      }
      $139 = ($140|0)==(0|0);
      if (!($139)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L78: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L80: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi213Z2D = $155;$p$7$ph = $153;
          } else if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi213Z2D = $158;$p$7$ph = $156;
          } else {
           $$pre211 = $invert$0 ^ 1;
           $$pre212 = $$pre211&255;
           $$pre$phi213Z2D = $$pre212;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi213Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L80;
           } else if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
            label = 162;
            break L4;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi213Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L99: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$1 = $180;
           }
          } else {
           $wcs$1 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$2$ph = $wcs$1;
          L134: while(1) {
           $182 = ($wcs$2$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$2$ph146 = 0;
              break L134;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -2)) {
              continue;
             } else if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = 0;
              label = 162;
              break L4;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$2$ph146 = $wcs$2$ph;
               break L134;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$2$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$2$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$2$ph = $235;
          }
          L158: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$2$ph146 = $wcs$2$ph;
               break L158;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$2$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph146;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$2 = 0;$wcs$3 = $wcs$2$ph146;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$1$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$2 = $s$1$ph;$wcs$3 = 0;
              break L99;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$1$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$1$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$5 = $s$1$ph;$wcs$6 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$1$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $140;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$2 = 0;$wcs$3 = 0;
             break L99;
            }
            $$pre209 = HEAP32[$4>>2]|0;
            $278 = $$pre209;
           }
          } else {
           $263 = $140;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$2 = $dest$0;$wcs$3 = 0;
             break L99;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre193 = HEAP32[$4>>2]|0;
            $263 = $$pre193;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre208 = HEAP32[$3>>2]|0;
        if ($289) {
         $294 = $$pre208;
        } else {
         $290 = (($$pre208) + -1|0);
         HEAP32[$3>>2] = $290;
         $294 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $293 = $294;
        $295 = $292;
        $296 = (($293) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$2;$wcs$7 = $wcs$3;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$2;$wcs$7 = $wcs$3;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$3;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$2;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$3 = $s$2;$wcs$4 = $wcs$3;
        } else {
         $300 = ($wcs$3|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$3) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$2|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$3 = 0;$wcs$4 = $wcs$3;
         } else {
          $303 = (($s$2) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$3 = $s$2;$wcs$4 = $wcs$3;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$0114;$wcs$7 = $wcs$0115;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
        } else {
         if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         } else {
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$0114;$wcs$7 = $wcs$0115;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0116))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$4 = $s$3;$wcs$5 = $wcs$4;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0122) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0121) + 1)|0;
    $matches$1 = $matches$0116;$p$11 = $47;$pos$2 = $64;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
   } else {
    $p$1 = $p$0122;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre210 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre210;
    } else {
     $33 = (($$pre210) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0121))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0116;$p$11 = $p$1;$pos$2 = $41;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0116 = $matches$1;$p$0122 = $341;$pos$0121 = $pos$2;$s$0114 = $s$4;$wcs$0115 = $wcs$5;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
   label = 162;
  } else {
   $matches$3 = $matches$0116;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0116|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0116))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$6 = $s$5;$wcs$7 = $wcs$6;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$6);
 _free($wcs$7);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 700;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i16 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i15 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i11 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i10 = 0, $ip$0$ph76$i = 0;
 var $ip$0$ph76142$i = 0, $ip$0$ph79$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph56$i = 0, $ip$1$ph59$i = 0, $jp$0$ph19$ph70$i = 0, $jp$0$ph1964$i = 0, $jp$0$ph80$i = 0, $jp$1$ph60$i = 0, $jp$1$ph8$ph50$i = 0, $jp$1$ph844$i = 0, $k$027$i = 0, $k$114$i = 0, $k$2$us$i = 0, $k$36$i = 0, $k$36$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$037$i = 0;
 var $mem$0$us$i = 0, $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond3$us$i = 0, $p$0$ph$ph68$i = 0, $p$0$ph$ph68146$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph48$i = 0, $p$1$ph$ph51$i = 0, $p$3151$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$271 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$32 = $271;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$32 = 0;
    break;
   } else {
    $$01$i = $26;$271 = $27;$hw$0$in2$i = $29;
   }
  }
  $31 = ($32<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $31 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i15 = $66;$$lcssa$i14 = 0;
  } else {
   $$02$i11 = $66;$hw$03$i10 = $92;
   while(1) {
    $94 = $hw$03$i10 << 8;
    $95 = (($$02$i11) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i12 = $99 | $100;
    if ($or$cond$i12) {
     $$0$lcssa$i15 = $95;$$lcssa$i14 = $99;
     break;
    } else {
     $$02$i11 = $95;$hw$03$i10 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i15) + -3|0);
  $$$i16 = $$lcssa$i14 ? 0 : $101;
  $$0 = $$$i16;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$037$i = 0;
 while(1) {
  $102 = (($3) + ($l$037$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 80;
   break;
  }
  $105 = $106&255;
  $107 = $105 & 31;
  $108 = 1 << $107;
  $109 = $105 >>> 5;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$037$i) + 1)|0;
  $114 = (($shift$i) + ($105<<2)|0);
  HEAP32[$114>>2] = $113;
  $115 = (($n) + ($113)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   break;
  } else {
   $106 = $116;$l$037$i = $113;
  }
 }
 if ((label|0) == 80) {
  STACKTOP = sp;return ($$0|0);
 }
 $118 = ($113>>>0)>(1);
 L49: do {
  if ($118) {
   $272 = 1;$ip$0$ph79$i = -1;$jp$0$ph80$i = 0;
   L50: while(1) {
    $273 = $272;$jp$0$ph19$ph70$i = $jp$0$ph80$i;$p$0$ph$ph71$i = 1;
    while(1) {
     $274 = $273;$jp$0$ph1964$i = $jp$0$ph19$ph70$i;
     L54: while(1) {
      $120 = $274;$k$027$i = 1;
      while(1) {
       $125 = (($k$027$i) + ($ip$0$ph79$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($120)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = ($127<<24>>24)==($129<<24>>24);
       if (!($130)) {
        break L54;
       }
       $131 = ($k$027$i|0)==($p$0$ph$ph71$i|0);
       $123 = (($k$027$i) + 1)|0;
       if ($131) {
        break;
       }
       $122 = (($123) + ($jp$0$ph1964$i))|0;
       $124 = ($122>>>0)<($113>>>0);
       if ($124) {
        $120 = $122;$k$027$i = $123;
       } else {
        $ip$0$ph76$i = $ip$0$ph79$i;$p$0$ph$ph68$i = $p$0$ph$ph71$i;
        break L50;
       }
      }
      $132 = (($jp$0$ph1964$i) + ($p$0$ph$ph71$i))|0;
      $133 = (($132) + 1)|0;
      $134 = ($133>>>0)<($113>>>0);
      if ($134) {
       $274 = $133;$jp$0$ph1964$i = $132;
      } else {
       $ip$0$ph76$i = $ip$0$ph79$i;$p$0$ph$ph68$i = $p$0$ph$ph71$i;
       break L50;
      }
     }
     $135 = ($127&255)>($129&255);
     $136 = (($120) - ($ip$0$ph79$i))|0;
     if (!($135)) {
      break;
     }
     $119 = (($120) + 1)|0;
     $121 = ($119>>>0)<($113>>>0);
     if ($121) {
      $273 = $119;$jp$0$ph19$ph70$i = $120;$p$0$ph$ph71$i = $136;
     } else {
      $ip$0$ph76$i = $ip$0$ph79$i;$p$0$ph$ph68$i = $136;
      break L50;
     }
    }
    $137 = (($jp$0$ph1964$i) + 1)|0;
    $138 = (($jp$0$ph1964$i) + 2)|0;
    $139 = ($138>>>0)<($113>>>0);
    if ($139) {
     $272 = $138;$ip$0$ph79$i = $jp$0$ph1964$i;$jp$0$ph80$i = $137;
    } else {
     $ip$0$ph76$i = $jp$0$ph1964$i;$p$0$ph$ph68$i = 1;
     break;
    }
   }
   $275 = 1;$ip$1$ph59$i = -1;$jp$1$ph60$i = 0;
   while(1) {
    $277 = $275;$jp$1$ph8$ph50$i = $jp$1$ph60$i;$p$1$ph$ph51$i = 1;
    while(1) {
     $276 = $277;$jp$1$ph844$i = $jp$1$ph8$ph50$i;
     L69: while(1) {
      $147 = $276;$k$114$i = 1;
      while(1) {
       $143 = (($k$114$i) + ($ip$1$ph59$i))|0;
       $144 = (($n) + ($143)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($n) + ($147)|0);
       $148 = HEAP8[$146>>0]|0;
       $149 = ($145<<24>>24)==($148<<24>>24);
       if (!($149)) {
        break L69;
       }
       $150 = ($k$114$i|0)==($p$1$ph$ph51$i|0);
       $141 = (($k$114$i) + 1)|0;
       if ($150) {
        break;
       }
       $140 = (($141) + ($jp$1$ph844$i))|0;
       $142 = ($140>>>0)<($113>>>0);
       if ($142) {
        $147 = $140;$k$114$i = $141;
       } else {
        $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $ip$1$ph59$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = $p$1$ph$ph51$i;
        break L49;
       }
      }
      $151 = (($jp$1$ph844$i) + ($p$1$ph$ph51$i))|0;
      $152 = (($151) + 1)|0;
      $153 = ($152>>>0)<($113>>>0);
      if ($153) {
       $276 = $152;$jp$1$ph844$i = $151;
      } else {
       $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $ip$1$ph59$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = $p$1$ph$ph51$i;
       break L49;
      }
     }
     $154 = ($145&255)<($148&255);
     $155 = (($147) - ($ip$1$ph59$i))|0;
     if (!($154)) {
      break;
     }
     $156 = (($147) + 1)|0;
     $157 = ($156>>>0)<($113>>>0);
     if ($157) {
      $277 = $156;$jp$1$ph8$ph50$i = $147;$p$1$ph$ph51$i = $155;
     } else {
      $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $ip$1$ph59$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = $155;
      break L49;
     }
    }
    $158 = (($jp$1$ph844$i) + 1)|0;
    $159 = (($jp$1$ph844$i) + 2)|0;
    $160 = ($159>>>0)<($113>>>0);
    if ($160) {
     $275 = $159;$ip$1$ph59$i = $jp$1$ph844$i;$jp$1$ph60$i = $158;
    } else {
     $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $jp$1$ph844$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph76142$i = -1;$ip$1$ph56$i = -1;$p$0$ph$ph68146$i = 1;$p$1$ph$ph48$i = 1;
  }
 } while(0);
 $161 = (($ip$1$ph56$i) + 1)|0;
 $162 = (($ip$0$ph76142$i) + 1)|0;
 $163 = ($161>>>0)>($162>>>0);
 $p$1$p$0$i = $163 ? $p$1$ph$ph48$i : $p$0$ph$ph68146$i;
 $ip$1$ip$0$i = $163 ? $ip$1$ph56$i : $ip$0$ph76142$i;
 $164 = (($n) + ($p$1$p$0$i)|0);
 $165 = (($ip$1$ip$0$i) + 1)|0;
 $166 = (_memcmp($n,$164,$165)|0);
 $167 = ($166|0)==(0);
 if ($167) {
  $173 = (($113) - ($p$1$p$0$i))|0;
  $174 = $113 | 63;
  $notlhs$i = ($113|0)==($p$1$p$0$i|0);
  if ($notlhs$i) {
   $229 = $174;$p$3151$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L82: while(1) {
    $176 = $z$0$us$i;
    $177 = $$02$us$i;
    $178 = (($176) - ($177))|0;
    $179 = ($178>>>0)<($113>>>0);
    do {
     if ($179) {
      $180 = (_memchr($z$0$us$i,0,$174)|0);
      $181 = ($180|0)==(0|0);
      if ($181) {
       $185 = (($z$0$us$i) + ($174)|0);
       $z$1$us$i = $185;
       break;
      } else {
       $182 = $180;
       $183 = (($182) - ($177))|0;
       $184 = ($183>>>0)<($113>>>0);
       if ($184) {
        $$0 = 0;
        label = 80;
        break L82;
       } else {
        $z$1$us$i = $180;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $186 = (($$02$us$i) + ($l$037$i)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $188 >>> 5;
    $190 = (($byteset$i) + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $188 & 31;
    $193 = 1 << $192;
    $194 = $193 & $191;
    $195 = ($194|0)==(0);
    if ($195) {
     $224 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $224;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $196 = (($shift$i) + ($188<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($113) - ($197))|0;
    $199 = ($113|0)==($197|0);
    if (!($199)) {
     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
     $200 = ($198>>>0)<($p$1$p$0$i>>>0);
     $or$cond3$us$i = $notrhs$us$i & $200;
     $k$2$us$i = $or$cond3$us$i ? $173 : $198;
     $201 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $201;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $202 = ($165>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $202 ? $165 : $mem$0$us$i;
    $203 = (($n) + ($$mem$0$us$i)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)==(0);
    L96: do {
     if ($205) {
      $k$4$us$i = $165;
     } else {
      $$pr$us$i = $204;$k$36$us$i = $$mem$0$us$i;
      while(1) {
       $210 = (($$02$us$i) + ($k$36$us$i)|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
       $207 = (($k$36$us$i) + 1)|0;
       if (!($212)) {
        break;
       }
       $206 = (($n) + ($207)|0);
       $208 = HEAP8[$206>>0]|0;
       $209 = ($208<<24>>24)==(0);
       if ($209) {
        $k$4$us$i = $165;
        break L96;
       } else {
        $$pr$us$i = $208;$k$36$us$i = $207;
       }
      }
      $213 = (($k$36$us$i) - ($ip$1$ip$0$i))|0;
      $214 = (($$02$us$i) + ($213)|0);
      $$02$us$i = $214;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L82;
     }
    } while(0);
    while(1) {
     $215 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($215)) {
      break;
     }
     $216 = (($k$4$us$i) + -1)|0;
     $217 = (($n) + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = (($$02$us$i) + ($216)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ($218<<24>>24)==($220<<24>>24);
     if ($221) {
      $k$4$us$i = $216;
     } else {
      break;
     }
    }
    $222 = ($k$4$us$i|0)==($mem$0$us$i|0);
    if ($222) {
     $$0 = $$02$us$i;
     label = 80;
     break;
    }
    $223 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $223;$mem$0$us$i = $173;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 80) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $168 = (($113) - ($ip$1$ip$0$i))|0;
  $169 = (($168) + -1)|0;
  $170 = ($ip$1$ip$0$i>>>0)>($169>>>0);
  $ip$1$ip$0$$i = $170 ? $ip$1$ip$0$i : $169;
  $171 = (($ip$1$ip$0$$i) + 1)|0;
  $172 = $113 | 63;
  $229 = $172;$p$3151$i = $171;
 }
 $175 = (($n) + ($165)|0);
 $$02$i = $3;$z$0$i = $3;
 L111: while(1) {
  $225 = $z$0$i;
  $226 = $$02$i;
  $227 = (($225) - ($226))|0;
  $228 = ($227>>>0)<($113>>>0);
  do {
   if ($228) {
    $230 = (_memchr($z$0$i,0,$229)|0);
    $231 = ($230|0)==(0|0);
    if ($231) {
     $235 = (($z$0$i) + ($229)|0);
     $z$1$i = $235;
     break;
    } else {
     $232 = $230;
     $233 = (($232) - ($226))|0;
     $234 = ($233>>>0)<($113>>>0);
     if ($234) {
      $$0 = 0;
      label = 80;
      break L111;
     } else {
      $z$1$i = $230;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $236 = (($$02$i) + ($l$037$i)|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $238 >>> 5;
  $240 = (($byteset$i) + ($239<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $238 & 31;
  $243 = 1 << $242;
  $244 = $243 & $241;
  $245 = ($244|0)==(0);
  if ($245) {
   $251 = (($$02$i) + ($113)|0);
   $$02$i = $251;$z$0$i = $z$1$i;
   continue;
  }
  $246 = (($shift$i) + ($238<<2)|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ($113|0)==($247|0);
  if (!($248)) {
   $249 = (($113) - ($247))|0;
   $250 = (($$02$i) + ($249)|0);
   $$02$i = $250;$z$0$i = $z$1$i;
   continue;
  }
  $252 = HEAP8[$175>>0]|0;
  $253 = ($252<<24>>24)==(0);
  L125: do {
   if ($253) {
    $k$4$i = $165;
   } else {
    $$pr$i = $252;$k$36$i = $165;
    while(1) {
     $258 = (($$02$i) + ($k$36$i)|0);
     $259 = HEAP8[$258>>0]|0;
     $260 = ($$pr$i<<24>>24)==($259<<24>>24);
     $255 = (($k$36$i) + 1)|0;
     if (!($260)) {
      break;
     }
     $254 = (($n) + ($255)|0);
     $256 = HEAP8[$254>>0]|0;
     $257 = ($256<<24>>24)==(0);
     if ($257) {
      $k$4$i = $165;
      break L125;
     } else {
      $$pr$i = $256;$k$36$i = $255;
     }
    }
    $261 = (($k$36$i) - ($ip$1$ip$0$i))|0;
    $262 = (($$02$i) + ($261)|0);
    $$02$i = $262;$z$0$i = $z$1$i;
    continue L111;
   }
  } while(0);
  while(1) {
   $263 = ($k$4$i|0)==(0);
   if ($263) {
    $$0 = $$02$i;
    label = 80;
    break L111;
   }
   $264 = (($k$4$i) + -1)|0;
   $265 = (($n) + ($264)|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = (($$02$i) + ($264)|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = ($266<<24>>24)==($268<<24>>24);
   if ($269) {
    $k$4$i = $264;
   } else {
    break;
   }
  }
  $270 = (($$02$i) + ($p$3151$i)|0);
  $$02$i = $270;$z$0$i = $z$1$i;
 }
 if ((label|0) == 80) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((17016 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (17040|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,17152,17208,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 1023]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   HEAP32[$3>>2] = $adjustedPtr;
   $6 = (($info) + 24|0);
   HEAP32[$6>>2] = $path_below;
   $7 = (($info) + 36|0);
   HEAP32[$7>>2] = 1;
   STACKTOP = sp;return;
  }
  $8 = ($4|0)==($adjustedPtr|0);
  if (!($8)) {
   $12 = (($info) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($info) + 24|0);
   HEAP32[$15>>2] = 2;
   $16 = (($info) + 54|0);
   HEAP8[$16>>0] = 1;
   STACKTOP = sp;return;
  }
  $9 = (($info) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $17 = (($this) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this) + ($18<<3)|0) + 16|0);
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >> 8;
 $23 = $21 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $offset_to_base$0$i1 = $22;
 } else {
  $25 = HEAP32[$adjustedPtr>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP32[$26>>2]|0;
  $offset_to_base$0$i1 = $27;
 }
 $28 = (($this) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $34 = $21 & 2;
 $35 = ($34|0)!=(0);
 $36 = $35 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$32 & 1023]($29,$info,$33,$36);
 $37 = ($18|0)>(1);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (($this) + 24|0);
 $39 = (($info) + 54|0);
 $p$0 = $38;
 while(1) {
  $40 = (($p$0) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 8;
  $43 = $41 & 1;
  $44 = ($43|0)==(0);
  if ($44) {
   $offset_to_base$0$i = $42;
  } else {
   $45 = HEAP32[$adjustedPtr>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP32[$46>>2]|0;
   $offset_to_base$0$i = $47;
  }
  $48 = HEAP32[$p$0>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $53 = $41 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$51 & 1023]($48,$info,$52,$55);
  $56 = HEAP8[$39>>0]|0;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   label = 16;
   break;
  }
  $58 = (($p$0) + 8|0);
  $59 = ($58>>>0)<($19>>>0);
  if ($59) {
   $p$0 = $58;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 1023]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 1023]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if ($10) {
  $11 = (($info) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($current_ptr|0);
  if (!($13)) {
   $14 = (($info) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($current_ptr|0);
   if (!($16)) {
    $19 = (($info) + 32|0);
    HEAP32[$19>>2] = $path_below;
    $20 = (($info) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(4);
    if ($22) {
     STACKTOP = sp;return;
    }
    $23 = (($this) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this) + ($24<<3)|0) + 16|0);
    $26 = ($24|0)>(0);
    L19: do {
     if ($26) {
      $27 = (($this) + 16|0);
      $28 = (($info) + 52|0);
      $29 = (($info) + 53|0);
      $30 = (($info) + 54|0);
      $31 = (($this) + 8|0);
      $32 = (($info) + 24|0);
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $27;
      L21: while(1) {
       HEAP8[$28>>0] = 0;
       HEAP8[$29>>0] = 0;
       $33 = (($p$020) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 >> 8;
       $36 = $34 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        $offset_to_base$0$i13 = $35;
       } else {
        $38 = HEAP32[$current_ptr>>2]|0;
        $39 = (($38) + ($35)|0);
        $40 = HEAP32[$39>>2]|0;
        $offset_to_base$0$i13 = $40;
       }
       $41 = HEAP32[$p$020>>2]|0;
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 20|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $46 = $34 >>> 1;
       $47 = $46 & 1;
       $48 = (2 - ($47))|0;
       FUNCTION_TABLE_viiiiii[$44 & 1023]($41,$info,$current_ptr,$45,$48,$use_strcmp);
       $49 = HEAP8[$30>>0]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $51 = HEAP8[$29>>0]|0;
       $52 = ($51<<24>>24)==(0);
       do {
        if ($52) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $53 = HEAP8[$28>>0]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $60 = HEAP32[$31>>2]|0;
          $61 = $60 & 1;
          $62 = ($61|0)==(0);
          if ($62) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $55 = HEAP32[$32>>2]|0;
         $56 = ($55|0)==(1);
         if ($56) {
          label = 27;
          break L19;
         }
         $57 = HEAP32[$31>>2]|0;
         $58 = $57 & 2;
         $59 = ($58|0)==(0);
         if ($59) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $63 = (($p$020) + 8|0);
       $64 = ($63>>>0)<($25>>>0);
       if ($64) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $63;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     HEAP32[$14>>2] = $current_ptr;
     $65 = (($info) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 1)|0;
     HEAP32[$65>>2] = $67;
     $68 = (($info) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = (($info) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(2);
      if ($73) {
       $74 = (($info) + 54|0);
       HEAP8[$74>>0] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$20>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  }
  $17 = ($path_below|0)==(1);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 32|0);
  HEAP32[$18>>2] = 1;
  STACKTOP = sp;return;
 }
 $75 = (($this) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this) + ($76<<3)|0) + 16|0);
 $78 = (($this) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = $79 & 1;
 $82 = ($81|0)==(0);
 if ($82) {
  $offset_to_base$0$i14 = $80;
 } else {
  $83 = HEAP32[$current_ptr>>2]|0;
  $84 = (($83) + ($80)|0);
  $85 = HEAP32[$84>>2]|0;
  $offset_to_base$0$i14 = $85;
 }
 $86 = (($this) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $92 = $79 & 2;
 $93 = ($92|0)!=(0);
 $94 = $93 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$90 & 1023]($87,$info,$91,$94,$use_strcmp);
 $95 = (($this) + 24|0);
 $96 = ($76|0)>(1);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = (($this) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 2;
 $100 = ($99|0)==(0);
 if ($100) {
  $101 = (($info) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(1);
  if (!($103)) {
   $125 = $98 & 1;
   $126 = ($125|0)==(0);
   if ($126) {
    $129 = (($info) + 54|0);
    $p2$2 = $95;
    while(1) {
     $154 = HEAP8[$129>>0]|0;
     $155 = ($154<<24>>24)==(0);
     if (!($155)) {
      label = 53;
      break;
     }
     $156 = HEAP32[$101>>2]|0;
     $157 = ($156|0)==(1);
     if ($157) {
      label = 53;
      break;
     }
     $158 = (($p2$2) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 >> 8;
     $161 = $159 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $offset_to_base$0$i = $160;
     } else {
      $163 = HEAP32[$current_ptr>>2]|0;
      $164 = (($163) + ($160)|0);
      $165 = HEAP32[$164>>2]|0;
      $offset_to_base$0$i = $165;
     }
     $166 = HEAP32[$p2$2>>2]|0;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 24|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $171 = $159 & 2;
     $172 = ($171|0)!=(0);
     $173 = $172 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$169 & 1023]($166,$info,$170,$173,$use_strcmp);
     $174 = (($p2$2) + 8|0);
     $175 = ($174>>>0)<($77>>>0);
     if ($175) {
      $p2$2 = $174;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $127 = (($info) + 24|0);
   $128 = (($info) + 54|0);
   $p2$1 = $95;
   while(1) {
    $130 = HEAP8[$128>>0]|0;
    $131 = ($130<<24>>24)==(0);
    if (!($131)) {
     label = 53;
     break;
    }
    $132 = HEAP32[$101>>2]|0;
    $133 = ($132|0)==(1);
    if ($133) {
     $134 = HEAP32[$127>>2]|0;
     $135 = ($134|0)==(1);
     if ($135) {
      label = 53;
      break;
     }
    }
    $136 = (($p2$1) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 >> 8;
    $139 = $137 & 1;
    $140 = ($139|0)==(0);
    if ($140) {
     $offset_to_base$0$i9 = $138;
    } else {
     $141 = HEAP32[$current_ptr>>2]|0;
     $142 = (($141) + ($138)|0);
     $143 = HEAP32[$142>>2]|0;
     $offset_to_base$0$i9 = $143;
    }
    $144 = HEAP32[$p2$1>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 24|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $149 = $137 & 2;
    $150 = ($149|0)!=(0);
    $151 = $150 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$147 & 1023]($144,$info,$148,$151,$use_strcmp);
    $152 = (($p2$1) + 8|0);
    $153 = ($152>>>0)<($77>>>0);
    if ($153) {
     $p2$1 = $152;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 }
 $104 = (($info) + 54|0);
 $p2$0 = $95;
 while(1) {
  $105 = HEAP8[$104>>0]|0;
  $106 = ($105<<24>>24)==(0);
  if (!($106)) {
   label = 53;
   break;
  }
  $107 = (($p2$0) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 >> 8;
  $110 = $108 & 1;
  $111 = ($110|0)==(0);
  if ($111) {
   $offset_to_base$0$i11 = $109;
  } else {
   $112 = HEAP32[$current_ptr>>2]|0;
   $113 = (($112) + ($109)|0);
   $114 = HEAP32[$113>>2]|0;
   $offset_to_base$0$i11 = $114;
  }
  $115 = HEAP32[$p2$0>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $120 = $108 & 2;
  $121 = ($120|0)!=(0);
  $122 = $121 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$118 & 1023]($115,$info,$119,$122,$use_strcmp);
  $123 = (($p2$0) + 8|0);
  $124 = ($123>>>0)<($77>>>0);
  if ($124) {
   $p2$0 = $123;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 1023]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 1023]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($info) + 52|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = (($info) + 53|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = (($this) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this) + ($37<<3)|0) + 16|0);
  HEAP8[$32>>0] = 0;
  HEAP8[$34>>0] = 0;
  $39 = (($this) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >> 8;
  $42 = $40 & 1;
  $43 = ($42|0)==(0);
  if ($43) {
   $offset_to_base$0$i1 = $41;
  } else {
   $44 = HEAP32[$current_ptr>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP32[$45>>2]|0;
   $offset_to_base$0$i1 = $46;
  }
  $47 = (($this) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $53 = $40 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$51 & 1023]($48,$info,$dst_ptr,$52,$55,$use_strcmp);
  $56 = ($37|0)>(1);
  L6: do {
   if ($56) {
    $57 = (($this) + 24|0);
    $58 = (($info) + 24|0);
    $59 = (($this) + 8|0);
    $60 = (($info) + 54|0);
    $p$0 = $57;
    while(1) {
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)==(0);
     if (!($62)) {
      break L6;
     }
     $63 = HEAP8[$32>>0]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $70 = HEAP8[$34>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = HEAP32[$59>>2]|0;
       $73 = $72 & 1;
       $74 = ($73|0)==(0);
       if ($74) {
        break L6;
       }
      }
     } else {
      $65 = HEAP32[$58>>2]|0;
      $66 = ($65|0)==(1);
      if ($66) {
       break L6;
      }
      $67 = HEAP32[$59>>2]|0;
      $68 = $67 & 2;
      $69 = ($68|0)==(0);
      if ($69) {
       break L6;
      }
     }
     HEAP8[$32>>0] = 0;
     HEAP8[$34>>0] = 0;
     $75 = (($p$0) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 >> 8;
     $78 = $76 & 1;
     $79 = ($78|0)==(0);
     if ($79) {
      $offset_to_base$0$i = $77;
     } else {
      $80 = HEAP32[$current_ptr>>2]|0;
      $81 = (($80) + ($77)|0);
      $82 = HEAP32[$81>>2]|0;
      $offset_to_base$0$i = $82;
     }
     $83 = HEAP32[$p$0>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 20|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $88 = $76 & 2;
     $89 = ($88|0)!=(0);
     $90 = $89 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$86 & 1023]($83,$info,$dst_ptr,$87,$90,$use_strcmp);
     $91 = (($p$0) + 8|0);
     $92 = ($91>>>0)<($38>>>0);
     if ($92) {
      $p$0 = $91;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$32>>0] = $33;
  HEAP8[$34>>0] = $35;
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 1023]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[17456>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((17456 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((17456 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[17456>>2] = $22;
     } else {
      $23 = HEAP32[((17456 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((17456 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((17456 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((17456 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[17456>>2] = $74;
      } else {
       $75 = HEAP32[((17456 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((17456 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((17456 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((17456 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[17456>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[17456>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((17456 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((17456 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((17456 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((17456 + 8|0))>>2] = $81;
     HEAP32[((17456 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((17456 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((17456 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((17456 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((17456 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((17456 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((17456 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((17456 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((17456 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((17456 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((17456 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((17456 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((17456 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((17456 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[17456>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[17456>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((17456 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((17456 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((17456 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((17456 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((17456 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((17456 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((17456 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((17456 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((17456 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((17456 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((17456 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((17456 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((17456 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((17456 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((17456 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((17456 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((17456 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((17456 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[17456>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[17456>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((17456 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((17456 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((17456 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((17456 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((17456 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((17456 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((17456 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((17456 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((17456 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((17456 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((17456 + 20|0))>>2] = $516;
   HEAP32[((17456 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((17456 + 8|0))>>2] = 0;
   HEAP32[((17456 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((17456 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((17456 + 12|0))>>2] = $530;
  $531 = HEAP32[((17456 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((17456 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[17928>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((17928 + 8|0))>>2] = $540;
    HEAP32[((17928 + 4|0))>>2] = $540;
    HEAP32[((17928 + 12|0))>>2] = -1;
    HEAP32[((17928 + 16|0))>>2] = -1;
    HEAP32[((17928 + 20|0))>>2] = 0;
    HEAP32[((17456 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[17928>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((17928 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((17456 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((17456 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((17456 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((17456 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((17456 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((17456 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((17928 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((17456 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((17456 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((17928 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((17456 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((17456 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((17456 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((17456 + 432|0))>>2] = $633;
  $634 = HEAP32[((17456 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((17456 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((17456 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((17456 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((17456 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((17456 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((17456 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((17456 + 460|0))>>2] = 0;
    $641 = HEAP32[17928>>2]|0;
    HEAP32[((17456 + 36|0))>>2] = $641;
    HEAP32[((17456 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((17456 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((17456 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((17456 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((17456 + 24|0))>>2] = $654;
    HEAP32[((17456 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((17928 + 16|0))>>2]|0;
    HEAP32[((17456 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((17456 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((17456 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((17456 + 24|0))>>2] = $684;
       HEAP32[((17456 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((17928 + 16|0))>>2]|0;
       HEAP32[((17456 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((17456 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((17456 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((17456 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((17456 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((17456 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((17456 + 12|0))>>2] = $732;
        HEAP32[((17456 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((17456 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((17456 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((17456 + 8|0))>>2] = $738;
         HEAP32[((17456 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((17456 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((17456 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[17456>>2]|0;
            $765 = $764 & $763;
            HEAP32[17456>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((17456 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((17456 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((17456 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((17456 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((17456 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((17456 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((17456 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((17456 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((17456 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((17456 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((17456 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[17456>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[17456>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((17456 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((17456 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((17456 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((17456 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((17456 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((17456 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((17456 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((17456 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((17456 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((17456 + 24|0))>>2] = $958;
    HEAP32[((17456 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((17928 + 16|0))>>2]|0;
    HEAP32[((17456 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((17456 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((17456 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((17456 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((17456 + 448|0))+12>>2]|0;
    HEAP32[((17456 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((17456 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((17456 + 460|0))>>2] = 0;
    HEAP32[((17456 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((17456 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[17456>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[17456>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((17456 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((17456 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((17456 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((17456 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((17456 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((17456 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((17456 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((17456 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((17456 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((17456 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((17456 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((17456 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((17456 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((17456 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((17456 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((17456 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[17456>>2]|0;
     $36 = $35 & $34;
     HEAP32[17456>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((17456 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((17456 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((17456 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((17456 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((17456 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((17456 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((17456 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((17456 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((17456 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((17456 + 12|0))>>2] = $122;
   HEAP32[((17456 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((17456 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((17456 + 20|0))>>2] = 0;
   HEAP32[((17456 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((17456 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((17456 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((17456 + 8|0))>>2] = $130;
   HEAP32[((17456 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((17456 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((17456 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[17456>>2]|0;
     $154 = $153 & $152;
     HEAP32[17456>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((17456 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((17456 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((17456 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((17456 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((17456 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((17456 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((17456 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((17456 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((17456 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((17456 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((17456 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((17456 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((17456 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[17456>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[17456>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((17456 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((17456 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((17456 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((17456 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((17456 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((17456 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((17456 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((17456 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((17456 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((17456 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((17456 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((17456 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((17456 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((17928 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((17456 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((17456 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((17456 + 24|0))>>2] = $38;
  HEAP32[((17456 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((17456 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((17456 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((17456 + 8|0))>>2] = $storemerge21;
  HEAP32[((17456 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((17456 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[17456>>2]|0;
    $90 = $89 & $88;
    HEAP32[17456>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((17456 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((17456 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((17456 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((17456 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((17456 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((17456 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((17456 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((17456 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((17456 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((17456 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((17456 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[17456>>2]|0;
     $32 = $31 & $30;
     HEAP32[17456>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((17456 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((17456 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((17456 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((17456 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((17456 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((17456 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((17456 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((17456 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((17456 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((17456 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((17456 + 12|0))>>2] = $117;
   HEAP32[((17456 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((17456 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((17456 + 20|0))>>2] = 0;
   HEAP32[((17456 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((17456 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((17456 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((17456 + 8|0))>>2] = $125;
   HEAP32[((17456 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((17456 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[17456>>2]|0;
     $148 = $147 & $146;
     HEAP32[17456>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((17456 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((17456 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((17456 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((17456 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((17456 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((17456 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((17456 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((17456 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((17456 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((17456 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[17456>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[17456>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((17456 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((17456 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((17456 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((17456 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((17456 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((17456 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((17456 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((17456 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 10;
   break;
  }
  $3 = HEAP32[17952>>2]|0;HEAP32[17952>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 9;
   break;
  }
  $5 = $3;
  __THREW__ = 0;
  invoke_v($5|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ___cxa_find_matching_catch(-1,-1,18016|0)|0;
   $9 = tempRet0;
   $lpad$phi$index = $8;$lpad$phi$index2 = $9;
  }
  else if ((label|0) == 9) {
   $13 = (___cxa_allocate_exception(4)|0);
   HEAP32[$13>>2] = ((17960 + 8|0));
   __THREW__ = 0;
   invoke_viii(454,($13|0),(18016|0),(409|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $10 = ___cxa_find_matching_catch(-1,-1,18016|0)|0;
    $11 = tempRet0;
    $lpad$phi$index = $10;$lpad$phi$index2 = $11;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 10) {
   STACKTOP = sp;return ($1|0);
  }
 } while(0);
 $12 = ($lpad$phi$index2|0)<(0);
 if ($12) {
  ___cxa_call_unexpected(($lpad$phi$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_ii(629,($size|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = ___cxa_find_matching_catch(-1,-1,18016|0)|0;
 $4 = tempRet0;
 $5 = ($4|0)<(0);
 if ($5) {
  ___cxa_call_unexpected(($3|0));
  // unreachable;
 } else {
  ___resumeException($3|0);
  // unreachable;
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (17984|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 HEAP32[$0>>2] = ((17960 + 8|0));
 ___cxa_throw(($0|0),(18016|0),(409|0));
 // unreachable;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (18032 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (18032 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (18296 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (18032 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (18032 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (18032 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (18032 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (18032 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (18032 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (18032 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (18032 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (18312 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (18328 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L71: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L71;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L84: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L84;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L84;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L173: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L173;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L187: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L187;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (18344 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (18344 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (18344 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L285: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L285;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L316: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (18336 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L316;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i38 = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i44 = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i49$i = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i60 = 0, $$0$lcssa$i63$i = 0;
 var $$0$lcssa$i67 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i78 = 0, $$0$lcssa$i85$i = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i36 = 0, $$01$i37$i = 0, $$01$i44$i = 0, $$01$i51 = 0, $$01$i54$i = 0, $$01$i58 = 0, $$01$i61$i = 0, $$01$i65 = 0, $$01$i67$i = 0;
 var $$01$i74$i = 0, $$01$i76 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i86$i = 0, $$012$i = 0, $$012$i73 = 0, $$03$i41 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i80$i = 0, $$06$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i113$i = 0, $$113$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i111$i = 0;
 var $$12$i120$i = 0, $$12$i135$i = 0, $$12$i88$i = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$18 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us160$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$22$i = 0.0, $$24$i = 0, $$26$i = 0, $$29$$24$i = 0, $$29$$26$i = 0, $$29$i = 0;
 var $$3$i = 0.0, $$310$i = 0, $$32$i = 0, $$4$i = 0.0, $$411$lcssa$i = 0, $$411176$i = 0, $$5194$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us319$i = 0, $$a$3$us320$i = 0, $$a$3321$i = 0, $$a$3322$i = 0, $$fl$4 = 0, $$lcssa94 = 0, $$mask$i = 0, $$mask$i31 = 0, $$mask1$i = 0, $$mask1$i30 = 0, $$neg152$i = 0;
 var $$neg153$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr147$i = 0, $$pre = 0, $$pre$i = 0, $$pre291 = 0, $$pre292 = 0, $$pre312$i = 0, $$sink = 0, $$sink300$off32 = 0, $$sum$i = 0, $$sum14$i = 0, $$sum15$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1048$phi = 0, $1049 = 0, $1049$phi = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0;
 var $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0.0;
 var $728 = 0.0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1257$i = 0, $a$2 = 0, $a$2$i = 0, $a$3$lcssa$i = 0, $a$3245$i = 0, $a$3245$us$i = 0, $a$6$i = 0, $a$7$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0;
 var $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0;
 var $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0;
 var $buf$i = 0, $carry$0250$i = 0, $carry3$0239$i = 0, $carry3$0239$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0251$i = 0, $d$1238$i = 0, $d$1238$us$i = 0, $d$2$a$3$i = 0, $d$2$lcssa$i = 0, $d$2220$i = 0, $d$3$i = 0, $d$4184$i = 0, $d$5175$i = 0, $d$6193$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2215$i = 0, $e$3$i = 0;
 var $e$4$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0102 = 0, $fl$0106 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0167 = 0, $i$0169 = 0, $i$0234$i = 0;
 var $i$03$i = 0, $i$03$i23 = 0, $i$1$lcssa$i = 0, $i$1175 = 0, $i$1226$i = 0, $i$2216$i = 0, $i$291 = 0, $i$3210$i = 0, $i$390 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i25 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i22 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i24 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i21 = 0, $isdigittmp11 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0225$i = 0, $j$0227$i = 0, $j$1211$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1168 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i36$i = 0, $or$cond$i43$i = 0, $or$cond$i50 = 0, $or$cond$i53$i = 0, $or$cond$i57 = 0, $or$cond$i60$i = 0, $or$cond$i64 = 0, $or$cond$i72 = 0, $or$cond$i73$i = 0, $or$cond$i75 = 0, $or$cond$i94$i = 0, $or$cond19$i = 0, $or$cond19315$i = 0, $or$cond23$i = 0, $or$cond29$i = 0, $or$cond29174$i = 0, $or$cond3$i = 0;
 var $or$cond30$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$7$i = 0, $re$0$i = 0;
 var $re$1166$i = 0, $round$0165$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us159$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us161$i = 0, $s1$0$i = 0, $s7$0181$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0170$i = 0, $s9$0$i = 0, $s9$1189$i = 0, $s9$2$i = 0;
 var $sext = 0, $sext86 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8100 = 0, $storemerge8105 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$31$i = 0, $wc = 0, $ws$0170 = 0, $ws$1176 = 0;
 var $y$03$i = 0, $y$03$i$i = 0, $y$03$i110$i = 0, $y$03$i119$i = 0, $y$03$i134$i = 0, $y$03$i87$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$095 = 0, $z$1$lcssa$i = 0, $z$1256$i = 0, $z$2 = 0, $z$2$i = 0, $z$2316$i = 0, $z$2317$i = 0, $z$3$lcssa$i = 0, $z$3244$i = 0, $z$3244$us$i = 0, $z$4$i = 0, $z$4$us$i = 0;
 var $z$5$i = 0, $z$6$i = 0, $z$7$$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 536|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 560|0;
 $buf = sp + 496|0;
 $wc = sp;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 264|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1048 = 0;$1049 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 339;
   break;
  } else {
   $1050 = $21;$25 = $22;
  }
  while(1) {
   if ((($1050<<24>>24) == 0)) {
    $$lcssa94 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1050<<24>>24) == 37)) {
    $27 = $25;$z$095 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1050 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa94 = $27;$z$0$lcssa = $z$095;
      break L12;
     }
     $30 = (($z$095) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$095 = $30;
      label = 9;
     } else {
      $$lcssa94 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1049$phi = $1049;$1048$phi = $1048;$22 = $$lcssa94;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1049 = $1049$phi;$1048 = $1048$phi;
   continue;
  }
  $38 = (($$lcssa94) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa94) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa94) + 3|0);
    $$pre291 = HEAP8[$44>>0]|0;
    $46 = $$pre291;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0106 = 0;$storemerge8105 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0102 = $fl$0106;$storemerge8100 = $storemerge8105;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0106;
     $59 = (($storemerge8105) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0106 = $58;$storemerge8105 = $59;
     } else {
      $65 = $60;$fl$0102 = $58;$storemerge8100 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0102 = 0;$storemerge8100 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge8100) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp11 = (($68) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $69 = (($storemerge8100) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge8100) + 3|0);
      $l10n$2 = 1;$storemerge13 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0102;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0102 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge13;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge13;$fl$1 = $fl$0102;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge8100;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 357;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge8100;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i21 = (($125) + -48)|0;
     $isdigit2$i22 = ($isdigittmp1$i21>>>0)<(10);
     if ($isdigit2$i22) {
      $128 = $125;$131 = $102;$i$03$i23 = 0;
     } else {
      $1051 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i23*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i24 = (($133) + -48)|0;
      $isdigit$i25 = ($isdigittmp$i24>>>0)<(10);
      if ($isdigit$i25) {
       $128 = $133;$131 = $130;$i$03$i23 = $129;
      } else {
       $1051 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp9 = (($107) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1051 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1051 = $105;$p$0 = $124;
    } else {
     $1051 = $105;$p$0 = 0;
    }
   } else {
    $1051 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1051;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 357;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((18376 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 357;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $198 = $134;$206 = $1049;$228 = $1048;
    } else {
     $1049$phi = $1049;$1048$phi = $1048;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;$1049 = $1049$phi;$1048 = $1048$phi;
     continue L1;
    }
   } else {
    L69: do {
     if ($147) {
      $148 = (($nl_type) + ($argpos$0<<2)|0);
      HEAP32[$148>>2] = $142;
      $149 = (($nl_arg) + ($argpos$0<<3)|0);
      $150 = $149;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $$sink = $152;$$sink300$off32 = $155;
      label = 64;
     } else {
      if (!($1)) {
       $$0 = 0;
       label = 357;
       break L1;
      }
      $156 = ($141&255)>(20);
      if ($156) {
       $198 = $134;$206 = $1049;$228 = $1048;
       break L65;
      }
      do {
       switch ($142|0) {
       case 15:  {
        $arglist_current23 = HEAP32[$ap>>2]|0;
        $180 = HEAP32[$arglist_current23>>2]|0;
        $arglist_next24 = (($arglist_current23) + 4|0);
        HEAP32[$ap>>2] = $arglist_next24;
        $181 = $180&255;
        $182 = $181 << 24 >> 24;
        $183 = ($182|0)<(0);
        $184 = $183 << 31 >> 31;
        $sext = $180 << 24;
        $185 = $sext >> 24;
        $186 = $185;
        $1052 = $186;$1053 = $184;
        break L69;
        break;
       }
       case 16:  {
        $arglist_current26 = HEAP32[$ap>>2]|0;
        $187 = HEAP32[$arglist_current26>>2]|0;
        $arglist_next27 = (($arglist_current26) + 4|0);
        HEAP32[$ap>>2] = $arglist_next27;
        $$mask$i31 = $187 & 255;
        $188 = $$mask$i31;
        $1052 = $188;$1053 = 0;
        break L69;
        break;
       }
       case 17:  {
        $arglist_current29 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$189 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next30 = (($arglist_current29) + 8|0);
        HEAP32[$ap>>2] = $arglist_next30;
        HEAPF64[tempDoublePtr>>3] = $189;$190 = HEAP32[tempDoublePtr>>2]|0;
        $191 = HEAP32[tempDoublePtr+4>>2]|0;
        $192 = $190;
        $1052 = $192;$1053 = $191;
        break L69;
        break;
       }
       case 18:  {
        $arglist_current32 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$193 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next33 = (($arglist_current32) + 8|0);
        HEAP32[$ap>>2] = $arglist_next33;
        HEAPF64[tempDoublePtr>>3] = $193;$194 = HEAP32[tempDoublePtr>>2]|0;
        $195 = HEAP32[tempDoublePtr+4>>2]|0;
        $$sink = $194;$$sink300$off32 = $195;
        label = 64;
        break L69;
        break;
       }
       case 14:  {
        $arglist_current20 = HEAP32[$ap>>2]|0;
        $178 = HEAP32[$arglist_current20>>2]|0;
        $arglist_next21 = (($arglist_current20) + 4|0);
        HEAP32[$ap>>2] = $arglist_next21;
        $$mask1$i30 = $178 & 65535;
        $179 = $$mask1$i30;
        $1052 = $179;$1053 = 0;
        break L69;
        break;
       }
       case 9:  {
        $arglist_current5 = HEAP32[$ap>>2]|0;
        $157 = HEAP32[$arglist_current5>>2]|0;
        $arglist_next6 = (($arglist_current5) + 4|0);
        HEAP32[$ap>>2] = $arglist_next6;
        $1052 = $157;$1053 = $1048;
        break L69;
        break;
       }
       case 10:  {
        $arglist_current8 = HEAP32[$ap>>2]|0;
        $158 = HEAP32[$arglist_current8>>2]|0;
        $arglist_next9 = (($arglist_current8) + 4|0);
        HEAP32[$ap>>2] = $arglist_next9;
        $159 = ($158|0)<(0);
        $160 = $159 << 31 >> 31;
        $161 = $158;
        $1052 = $161;$1053 = $160;
        break L69;
        break;
       }
       case 11:  {
        $arglist_current11 = HEAP32[$ap>>2]|0;
        $162 = HEAP32[$arglist_current11>>2]|0;
        $arglist_next12 = (($arglist_current11) + 4|0);
        HEAP32[$ap>>2] = $arglist_next12;
        $163 = $162;
        $1052 = $163;$1053 = 0;
        break L69;
        break;
       }
       case 12:  {
        $arglist_current14 = HEAP32[$ap>>2]|0;
        $164 = $arglist_current14;
        $165 = $164;
        $166 = HEAP32[$165>>2]|0;
        $167 = (($164) + 4)|0;
        $168 = $167;
        $169 = HEAP32[$168>>2]|0;
        $arglist_next15 = (($arglist_current14) + 8|0);
        HEAP32[$ap>>2] = $arglist_next15;
        $170 = $166;
        $1052 = $170;$1053 = $169;
        break L69;
        break;
       }
       case 13:  {
        $arglist_current17 = HEAP32[$ap>>2]|0;
        $171 = HEAP32[$arglist_current17>>2]|0;
        $arglist_next18 = (($arglist_current17) + 4|0);
        HEAP32[$ap>>2] = $arglist_next18;
        $172 = $171&65535;
        $173 = $172 << 16 >> 16;
        $174 = ($173|0)<(0);
        $175 = $174 << 31 >> 31;
        $sext86 = $171 << 16;
        $176 = $sext86 >> 16;
        $177 = $176;
        $1052 = $177;$1053 = $175;
        break L69;
        break;
       }
       default: {
        $1052 = $1049;$1053 = $1048;
        break L69;
       }
       }
      } while(0);
     }
    } while(0);
    if ((label|0) == 64) {
     label = 0;
     $196 = $$sink;
     if ($1) {
      $1052 = $196;$1053 = $$sink300$off32;
     } else {
      $1048 = $$sink300$off32;$1049 = $196;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
      continue L1;
     }
    }
    $$pre292 = HEAP8[$135>>0]|0;
    $198 = $$pre292;$206 = $1052;$228 = $1053;
   }
  } while(0);
  $197 = $198 << 24 >> 24;
  $199 = ($st$0|0)==(0);
  if ($199) {
   $t$0 = $197;
  } else {
   $200 = $197 & 15;
   $201 = ($200|0)==(3);
   $202 = $197 & -33;
   $$ = $201 ? $202 : $197;
   $t$0 = $$;
  }
  $203 = $fl$1 & 8192;
  $204 = ($203|0)==(0);
  $205 = $fl$1 & -65537;
  $fl$1$ = $204 ? $fl$1 : $205;
  L92: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $207 = ($cnt$1|0)<(0);
     $208 = $207 << 31 >> 31;
     $209 = $206;
     $210 = $209;
     HEAP32[$210>>2] = $cnt$1;
     $211 = (($209) + 4)|0;
     $212 = $211;
     HEAP32[$212>>2] = $208;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $213 = $cnt$1&65535;
     HEAP16[$206>>1] = $213;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $cnt$1&255;
     HEAP8[$206>>0] = $214;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $215 = ($cnt$1|0)<(0);
     $216 = $215 << 31 >> 31;
     $217 = $206;
     $218 = $217;
     HEAP32[$218>>2] = $cnt$1;
     $219 = (($217) + 4)|0;
     $220 = $219;
     HEAP32[$220>>2] = $216;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $367 = $206;
    HEAP32[tempDoublePtr>>2] = $367;HEAP32[tempDoublePtr+4>>2] = $228;$368 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $369 = ($228|0)<(0);
    if ($369) {
     $370 = -$368;
     $$06$i = $370;$pl$0$i = 1;$prefix$0$i = 18864;
    } else {
     $371 = $fl$1$ & 2048;
     $372 = ($371|0)==(0);
     if ($372) {
      $373 = $fl$1$ & 1;
      $374 = ($373|0)==(0);
      $$$i = $374 ? ((18864 + 1|0)) : ((18864 + 6|0));
      $$06$i = $368;$pl$0$i = $373;$prefix$0$i = $$$i;
     } else {
      $$06$i = $368;$pl$0$i = 1;$prefix$0$i = ((18864 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$06$i;$375 = HEAP32[tempDoublePtr>>2]|0;
    $376 = HEAP32[tempDoublePtr+4>>2]|0;
    $377 = $376 & 2146435072;
    $378 = ($377>>>0)<(2146435072);
    $379 = ($377|0)==(2146435072);
    $380 = (0)<(0);
    $381 = $379 & $380;
    $382 = $378 | $381;
    if (!($382)) {
     $383 = $t$0 & 32;
     $384 = ($383|0)!=(0);
     $385 = $384 ? 18888 : 18896;
     $386 = ($$06$i != $$06$i) | (0.0 != 0.0);
     if ($386) {
      $387 = $384 ? 18904 : 18912;
      $pl$1$i = 0;$s1$0$i = $387;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $385;
     }
     $388 = (($pl$1$i) + 3)|0;
     $389 = $fl$1$ & 8192;
     $390 = ($389|0)==(0);
     $391 = ($388|0)<($w$1|0);
     $or$cond$i36$i = $390 & $391;
     if ($or$cond$i36$i) {
      $392 = (($w$1) - ($388))|0;
      $393 = ($392>>>0)>(256);
      $394 = $393 ? 256 : $392;
      _memset(($pad$i|0),32,($394|0))|0;
      $395 = ($392>>>0)>(255);
      if ($395) {
       $$01$i37$i = $392;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $396 = (($$01$i37$i) + -256)|0;
        $397 = ($396>>>0)>(255);
        if ($397) {
         $$01$i37$i = $396;
        } else {
         $$0$lcssa$i39$i = $396;
         break;
        }
       }
      } else {
       $$0$lcssa$i39$i = $392;
      }
      (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $398 = $fl$1$ & 73728;
     $399 = ($398|0)==(8192);
     $or$cond$i43$i = $399 & $391;
     if ($or$cond$i43$i) {
      $400 = (($w$1) - ($388))|0;
      $401 = ($400>>>0)>(256);
      $402 = $401 ? 256 : $400;
      _memset(($pad$i|0),32,($402|0))|0;
      $403 = ($400>>>0)>(255);
      if ($403) {
       $$01$i44$i = $400;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $404 = (($$01$i44$i) + -256)|0;
        $405 = ($404>>>0)>(255);
        if ($405) {
         $$01$i44$i = $404;
        } else {
         $$0$lcssa$i46$i = $404;
         break;
        }
       }
      } else {
       $$0$lcssa$i46$i = $400;
      }
      (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
     }
     $w$$i = $391 ? $w$1 : $388;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $406 = (+_frexpl($$06$i,$e2$i));
    $407 = $406 * 2.0;
    $408 = $407 != 0.0;
    if ($408) {
     $409 = HEAP32[$e2$i>>2]|0;
     $410 = (($409) + -1)|0;
     HEAP32[$e2$i>>2] = $410;
    }
    $411 = $t$0 | 32;
    $412 = ($411|0)==(97);
    if ($412) {
     $413 = $t$0 & 32;
     $414 = ($413|0)==(0);
     $415 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $414 ? $prefix$0$i : $415;
     $416 = $pl$0$i | 2;
     $417 = ($p$0>>>0)>(11);
     $418 = (12 - ($p$0))|0;
     $re$0$i = $417 ? 0 : $418;
     $419 = ($re$0$i|0)==(0);
     do {
      if ($419) {
       $$1$i = $407;
      } else {
       $re$1166$i = $re$0$i;$round$0165$i = 8.0;
       while(1) {
        $420 = (($re$1166$i) + -1)|0;
        $421 = $round$0165$i * 16.0;
        $422 = ($420|0)==(0);
        if ($422) {
         break;
        } else {
         $re$1166$i = $420;$round$0165$i = $421;
        }
       }
       $423 = HEAP8[$prefix$0$$i>>0]|0;
       $424 = ($423<<24>>24)==(45);
       if ($424) {
        $425 = -$407;
        $426 = $425 - $421;
        $427 = $421 + $426;
        $428 = -$427;
        $$1$i = $428;
        break;
       } else {
        $429 = $407 + $421;
        $430 = $429 - $421;
        $$1$i = $430;
        break;
       }
      }
     } while(0);
     $431 = HEAP32[$e2$i>>2]|0;
     $432 = ($431|0)<(0);
     $433 = (0 - ($431))|0;
     $434 = $432 ? $433 : $431;
     $435 = ($434|0)<(0);
     if ($435) {
      $436 = ($434|0)<(0);
      $437 = $436 << 31 >> 31;
      $$05$i$i = $6;$438 = $434;$439 = $437;
      while(1) {
       $440 = (___uremdi3(($438|0),($439|0),10,0)|0);
       $441 = tempRet0;
       $442 = $440 | 48;
       $443 = $442&255;
       $444 = (($$05$i$i) + -1|0);
       HEAP8[$444>>0] = $443;
       $445 = (___udivdi3(($438|0),($439|0),10,0)|0);
       $446 = tempRet0;
       $447 = ($439>>>0)>(9);
       $448 = ($439|0)==(9);
       $449 = ($438>>>0)>(4294967295);
       $450 = $448 & $449;
       $451 = $447 | $450;
       if ($451) {
        $$05$i$i = $444;$438 = $445;$439 = $446;
       } else {
        break;
       }
      }
      $$0$lcssa$i49$i = $444;$$01$lcssa$off0$i$i = $445;
     } else {
      $$0$lcssa$i49$i = $6;$$01$lcssa$off0$i$i = $434;
     }
     $452 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($452) {
      $$1$lcssa$i$i = $$0$lcssa$i49$i;
     } else {
      $$12$i$i = $$0$lcssa$i49$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $453 = (($y$03$i$i>>>0) % 10)&-1;
       $454 = $453 | 48;
       $455 = $454&255;
       $456 = (($$12$i$i) + -1|0);
       HEAP8[$456>>0] = $455;
       $457 = (($y$03$i$i>>>0) / 10)&-1;
       $458 = ($y$03$i$i>>>0)<(10);
       if ($458) {
        $$1$lcssa$i$i = $456;
        break;
       } else {
        $$12$i$i = $456;$y$03$i$i = $457;
       }
      }
     }
     $459 = ($$1$lcssa$i$i|0)==($6|0);
     if ($459) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $460 = HEAP32[$e2$i>>2]|0;
     $461 = $460 >> 31;
     $462 = $461 & 2;
     $463 = (($462) + 43)|0;
     $464 = $463&255;
     $465 = (($estr$0$i) + -1|0);
     HEAP8[$465>>0] = $464;
     $466 = (($t$0) + 15)|0;
     $467 = $466&255;
     $468 = (($estr$0$i) + -2|0);
     HEAP8[$468>>0] = $467;
     $469 = ($p$0|0)>(0);
     $470 = $fl$1$ & 8;
     $471 = ($470|0)==(0);
     if ($469) {
      if ($471) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $472 = (~~(($$2$us$us$i)));
        $473 = (18920 + ($472)|0);
        $474 = HEAP8[$473>>0]|0;
        $475 = $474&255;
        $476 = $475 | $413;
        $477 = $476&255;
        $478 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $477;
        $479 = (+($472|0));
        $480 = $$2$us$us$i - $479;
        $481 = $480 * 16.0;
        $482 = $478;
        $483 = (($482) - ($0))|0;
        $484 = ($483|0)==(1);
        if ($484) {
         $485 = (($s$0$us$us$i) + 2|0);
         HEAP8[$478>>0] = 46;
         $s$1$us$us$i = $485;
        } else {
         $s$1$us$us$i = $478;
        }
        $486 = $481 != 0.0;
        if ($486) {
         $$2$us$us$i = $481;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $487 = (~~(($$2$us$i)));
        $488 = (18920 + ($487)|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = $490 | $413;
        $492 = $491&255;
        $493 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $492;
        $494 = (+($487|0));
        $495 = $$2$us$i - $494;
        $496 = $495 * 16.0;
        $497 = $493;
        $498 = (($497) - ($0))|0;
        $499 = ($498|0)==(1);
        if ($499) {
         $500 = (($s$0$us$i) + 2|0);
         HEAP8[$493>>0] = 46;
         $s$1$us$i = $500;
        } else {
         $s$1$us$i = $493;
        }
        $501 = $496 != 0.0;
        if ($501) {
         $$2$us$i = $496;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($471) {
       $$2$us160$i = $$1$i;$s$0$us159$i = $buf$i;
       while(1) {
        $502 = (~~(($$2$us160$i)));
        $503 = (18920 + ($502)|0);
        $504 = HEAP8[$503>>0]|0;
        $505 = $504&255;
        $506 = $505 | $413;
        $507 = $506&255;
        $508 = (($s$0$us159$i) + 1|0);
        HEAP8[$s$0$us159$i>>0] = $507;
        $509 = (+($502|0));
        $510 = $$2$us160$i - $509;
        $511 = $510 * 16.0;
        $512 = $508;
        $513 = (($512) - ($0))|0;
        $514 = ($513|0)==(1);
        $515 = $511 != 0.0;
        $or$cond$i72 = $514 & $515;
        if ($or$cond$i72) {
         $516 = (($s$0$us159$i) + 2|0);
         HEAP8[$508>>0] = 46;
         $s$1$us161$i = $516;
        } else {
         $s$1$us161$i = $508;
        }
        if ($515) {
         $$2$us160$i = $511;$s$0$us159$i = $s$1$us161$i;
        } else {
         $s$1$lcssa$i = $s$1$us161$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $517 = (~~(($$2$i)));
        $518 = (18920 + ($517)|0);
        $519 = HEAP8[$518>>0]|0;
        $520 = $519&255;
        $521 = $520 | $413;
        $522 = $521&255;
        $523 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $522;
        $524 = (+($517|0));
        $525 = $$2$i - $524;
        $526 = $525 * 16.0;
        $527 = $523;
        $528 = (($527) - ($0))|0;
        $529 = ($528|0)==(1);
        if ($529) {
         $530 = (($s$0$i) + 2|0);
         HEAP8[$523>>0] = 46;
         $s$1$i = $530;
        } else {
         $s$1$i = $523;
        }
        $531 = $526 != 0.0;
        if ($531) {
         $$2$i = $526;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $532 = ($p$0|0)==(0);
     $$pre312$i = $s$1$lcssa$i;
     do {
      if ($532) {
       label = 174;
      } else {
       $533 = (($10) + ($$pre312$i))|0;
       $534 = ($533|0)<($p$0|0);
       if (!($534)) {
        label = 174;
        break;
       }
       $535 = $468;
       $536 = (($11) + ($p$0))|0;
       $537 = (($536) - ($535))|0;
       $l$0$i = $537;
      }
     } while(0);
     if ((label|0) == 174) {
      label = 0;
      $538 = $468;
      $539 = (($9) - ($538))|0;
      $540 = (($539) + ($$pre312$i))|0;
      $l$0$i = $540;
     }
     $541 = (($l$0$i) + ($416))|0;
     $542 = $fl$1$ & 73728;
     $543 = ($542|0)==(0);
     $544 = ($541|0)<($w$1|0);
     $or$cond$i53$i = $543 & $544;
     if ($or$cond$i53$i) {
      $545 = (($w$1) - ($541))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i54$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i54$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i54$i = $549;
        } else {
         $$0$lcssa$i56$i = $549;
         break;
        }
       }
      } else {
       $$0$lcssa$i56$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$416,$f)|0);
     $551 = ($542|0)==(65536);
     $or$cond$i60$i = $551 & $544;
     if ($or$cond$i60$i) {
      $552 = (($w$1) - ($541))|0;
      $553 = ($552>>>0)>(256);
      $554 = $553 ? 256 : $552;
      _memset(($pad$i|0),48,($554|0))|0;
      $555 = ($552>>>0)>(255);
      if ($555) {
       $$01$i61$i = $552;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $556 = (($$01$i61$i) + -256)|0;
        $557 = ($556>>>0)>(255);
        if ($557) {
         $$01$i61$i = $556;
        } else {
         $$0$lcssa$i63$i = $556;
         break;
        }
       }
      } else {
       $$0$lcssa$i63$i = $552;
      }
      (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
     }
     $558 = (($$pre312$i) - ($0))|0;
     (___fwritex($buf$i,$558,$f)|0);
     $559 = $468;
     $560 = (($8) - ($559))|0;
     $561 = (($l$0$i) - ($560))|0;
     $562 = (($561) - ($558))|0;
     $563 = ($562|0)>(0);
     if ($563) {
      $564 = ($562>>>0)>(256);
      $565 = $564 ? 256 : $562;
      _memset(($pad$i|0),48,($565|0))|0;
      $566 = ($562>>>0)>(255);
      if ($566) {
       $$01$i67$i = $562;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $567 = (($$01$i67$i) + -256)|0;
        $568 = ($567>>>0)>(255);
        if ($568) {
         $$01$i67$i = $567;
        } else {
         $$0$lcssa$i69$i = $567;
         break;
        }
       }
      } else {
       $$0$lcssa$i69$i = $562;
      }
      (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
     }
     (___fwritex($468,$560,$f)|0);
     $569 = ($542|0)==(8192);
     $or$cond$i73$i = $569 & $544;
     if ($or$cond$i73$i) {
      $570 = (($w$1) - ($541))|0;
      $571 = ($570>>>0)>(256);
      $572 = $571 ? 256 : $570;
      _memset(($pad$i|0),32,($572|0))|0;
      $573 = ($570>>>0)>(255);
      if ($573) {
       $$01$i74$i = $570;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $574 = (($$01$i74$i) + -256)|0;
        $575 = ($574>>>0)>(255);
        if ($575) {
         $$01$i74$i = $574;
        } else {
         $$0$lcssa$i76$i = $574;
         break;
        }
       }
      } else {
       $$0$lcssa$i76$i = $570;
      }
      (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
     }
     $w$18$i = $544 ? $w$1 : $541;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $576 = ($p$0|0)<(0);
    $$p$i = $576 ? 6 : $p$0;
    if ($408) {
     $577 = $407 * 268435456.0;
     $578 = HEAP32[$e2$i>>2]|0;
     $579 = (($578) + -28)|0;
     HEAP32[$e2$i>>2] = $579;
     $$3$i = $577;$581 = $579;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $407;$581 = $$pre$i;
    }
    $580 = ($581|0)<(0);
    $$32$i = $580 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$32$i;
    while(1) {
     $582 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $582;
     $583 = (($z$0$i) + 4|0);
     $584 = (+($582>>>0));
     $585 = $$4$i - $584;
     $586 = $585 * 1.0E+9;
     $587 = $586 != 0.0;
     if ($587) {
      $$4$i = $586;$z$0$i = $583;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $588 = ($$pr$i|0)>(0);
    if ($588) {
     $590 = $$pr$i;$a$1257$i = $$32$i;$z$1256$i = $583;
     while(1) {
      $589 = ($590|0)>(29);
      $591 = $589 ? 29 : $590;
      $592 = (($z$1256$i) + -4|0);
      $593 = ($592>>>0)<($a$1257$i>>>0);
      do {
       if ($593) {
        $594 = HEAP32[$592>>2]|0;
        $595 = ($594|0)==(0);
        $596 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19315$i = $595 & $596;
        $z$2316$i = $or$cond19315$i ? $592 : $z$1256$i;
        $a$2$i = $a$1257$i;$z$2317$i = $z$2316$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $592;
        while(1) {
         $597 = HEAP32[$d$0251$i>>2]|0;
         $598 = (_bitshift64Shl(($597|0),0,($591|0))|0);
         $599 = tempRet0;
         $600 = (_i64Add(($598|0),($599|0),($carry$0250$i|0),0)|0);
         $601 = tempRet0;
         $602 = (___uremdi3(($600|0),($601|0),1000000000,0)|0);
         $603 = tempRet0;
         HEAP32[$d$0251$i>>2] = $602;
         $604 = (___udivdi3(($600|0),($601|0),1000000000,0)|0);
         $605 = tempRet0;
         $606 = (($d$0251$i) + -4|0);
         $607 = ($606>>>0)<($a$1257$i>>>0);
         if ($607) {
          break;
         } else {
          $carry$0250$i = $604;$d$0251$i = $606;
         }
        }
        $608 = HEAP32[$592>>2]|0;
        $609 = ($608|0)==(0);
        $610 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19$i = $609 & $610;
        $z$2$i = $or$cond19$i ? $592 : $z$1256$i;
        $611 = ($604|0)==(0);
        if ($611) {
         $a$2$i = $a$1257$i;$z$2317$i = $z$2$i;
         break;
        }
        $612 = (($a$1257$i) + -4|0);
        HEAP32[$612>>2] = $604;
        $a$2$i = $612;$z$2317$i = $z$2$i;
       }
      } while(0);
      $613 = HEAP32[$e2$i>>2]|0;
      $614 = (($613) - ($591))|0;
      HEAP32[$e2$i>>2] = $614;
      $615 = ($614|0)>(0);
      if ($615) {
       $590 = $614;$a$1257$i = $a$2$i;$z$1256$i = $z$2317$i;
      } else {
       $$pr147$i = $614;$a$1$lcssa$i = $a$2$i;$z$1$lcssa$i = $z$2317$i;
       break;
      }
     }
    } else {
     $$pr147$i = $$pr$i;$a$1$lcssa$i = $$32$i;$z$1$lcssa$i = $583;
    }
    $616 = ($$pr147$i|0)<(0);
    L234: do {
     if ($616) {
      $617 = ($411|0)==(102);
      $618 = (($$p$i|0) / 9)&-1;
      $619 = (($618) + 2)|0;
      if ($617) {
       $620 = $$32$i;
       $621 = (($$32$i) + ($619<<2)|0);
       $623 = $$pr147$i;$a$3245$us$i = $a$1$lcssa$i;$z$3244$us$i = $z$1$lcssa$i;
       while(1) {
        $622 = (0 - ($623))|0;
        $624 = ($622|0)>(9);
        $$20$us$i = $624 ? 9 : $622;
        $625 = ($a$3245$us$i>>>0)<($z$3244$us$i>>>0);
        do {
         if ($625) {
          $650 = 1 << $$20$us$i;
          $644 = (($650) + -1)|0;
          $647 = 1000000000 >>> $$20$us$i;
          $carry3$0239$us$i = 0;$d$1238$us$i = $a$3245$us$i;
          while(1) {
           $642 = HEAP32[$d$1238$us$i>>2]|0;
           $643 = $642 & $644;
           $645 = $642 >>> $$20$us$i;
           $646 = (($645) + ($carry3$0239$us$i))|0;
           HEAP32[$d$1238$us$i>>2] = $646;
           $633 = Math_imul($643, $647)|0;
           $648 = (($d$1238$us$i) + 4|0);
           $649 = ($648>>>0)<($z$3244$us$i>>>0);
           if ($649) {
            $carry3$0239$us$i = $633;$d$1238$us$i = $648;
           } else {
            break;
           }
          }
          $629 = HEAP32[$a$3245$us$i>>2]|0;
          $630 = ($629|0)==(0);
          $631 = (($a$3245$us$i) + 4|0);
          $$a$3$us$i = $630 ? $631 : $a$3245$us$i;
          $632 = ($633|0)==(0);
          if ($632) {
           $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $z$3244$us$i;
           break;
          }
          $634 = (($z$3244$us$i) + 4|0);
          HEAP32[$z$3244$us$i>>2] = $633;
          $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $634;
         } else {
          $626 = HEAP32[$a$3245$us$i>>2]|0;
          $627 = ($626|0)==(0);
          $628 = (($a$3245$us$i) + 4|0);
          $$a$3$us319$i = $627 ? $628 : $a$3245$us$i;
          $$a$3$us320$i = $$a$3$us319$i;$z$4$us$i = $z$3244$us$i;
         }
        } while(0);
        $635 = $z$4$us$i;
        $636 = (($635) - ($620))|0;
        $637 = $636 >> 2;
        $638 = ($637|0)>($619|0);
        $$z$4$us$i = $638 ? $621 : $z$4$us$i;
        $639 = HEAP32[$e2$i>>2]|0;
        $640 = (($639) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $640;
        $641 = ($640|0)<(0);
        if ($641) {
         $623 = $640;$a$3245$us$i = $$a$3$us320$i;$z$3244$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us320$i;$z$3$lcssa$i = $$z$4$us$i;
         break L234;
        }
       }
      } else {
       $652 = $$pr147$i;$a$3245$i = $a$1$lcssa$i;$z$3244$i = $z$1$lcssa$i;
      }
      while(1) {
       $651 = (0 - ($652))|0;
       $653 = ($651|0)>(9);
       $$20$i = $653 ? 9 : $651;
       $654 = ($a$3245$i>>>0)<($z$3244$i>>>0);
       do {
        if ($654) {
         $658 = 1 << $$20$i;
         $659 = (($658) + -1)|0;
         $660 = 1000000000 >>> $$20$i;
         $carry3$0239$i = 0;$d$1238$i = $a$3245$i;
         while(1) {
          $661 = HEAP32[$d$1238$i>>2]|0;
          $662 = $661 & $659;
          $663 = $661 >>> $$20$i;
          $664 = (($663) + ($carry3$0239$i))|0;
          HEAP32[$d$1238$i>>2] = $664;
          $665 = Math_imul($662, $660)|0;
          $666 = (($d$1238$i) + 4|0);
          $667 = ($666>>>0)<($z$3244$i>>>0);
          if ($667) {
           $carry3$0239$i = $665;$d$1238$i = $666;
          } else {
           break;
          }
         }
         $668 = HEAP32[$a$3245$i>>2]|0;
         $669 = ($668|0)==(0);
         $670 = (($a$3245$i) + 4|0);
         $$a$3$i = $669 ? $670 : $a$3245$i;
         $671 = ($665|0)==(0);
         if ($671) {
          $$a$3322$i = $$a$3$i;$z$4$i = $z$3244$i;
          break;
         }
         $672 = (($z$3244$i) + 4|0);
         HEAP32[$z$3244$i>>2] = $665;
         $$a$3322$i = $$a$3$i;$z$4$i = $672;
        } else {
         $655 = HEAP32[$a$3245$i>>2]|0;
         $656 = ($655|0)==(0);
         $657 = (($a$3245$i) + 4|0);
         $$a$3321$i = $656 ? $657 : $a$3245$i;
         $$a$3322$i = $$a$3321$i;$z$4$i = $z$3244$i;
        }
       } while(0);
       $673 = $z$4$i;
       $674 = $$a$3322$i;
       $675 = (($673) - ($674))|0;
       $676 = $675 >> 2;
       $677 = ($676|0)>($619|0);
       if ($677) {
        $678 = (($$a$3322$i) + ($619<<2)|0);
        $z$5$i = $678;
       } else {
        $z$5$i = $z$4$i;
       }
       $679 = HEAP32[$e2$i>>2]|0;
       $680 = (($679) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $680;
       $681 = ($680|0)<(0);
       if ($681) {
        $652 = $680;$a$3245$i = $$a$3322$i;$z$3244$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3322$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $682 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $683 = $$32$i;
    do {
     if ($682) {
      $684 = $a$3$lcssa$i;
      $685 = (($683) - ($684))|0;
      $686 = $685 >> 2;
      $687 = ($686*9)|0;
      $688 = HEAP32[$a$3$lcssa$i>>2]|0;
      $689 = ($688>>>0)<(10);
      if ($689) {
       $e$1$i = $687;
       break;
      } else {
       $e$0233$i = $687;$i$0234$i = 10;
      }
      while(1) {
       $690 = ($i$0234$i*10)|0;
       $691 = (($e$0233$i) + 1)|0;
       $692 = ($688>>>0)<($690>>>0);
       if ($692) {
        $e$1$i = $691;
        break;
       } else {
        $e$0233$i = $691;$i$0234$i = $690;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $693 = ($411|0)!=(102);
    $694 = $693 ? $e$1$i : 0;
    $695 = (($$p$i) - ($694))|0;
    $696 = ($411|0)==(103);
    $697 = ($$p$i|0)!=(0);
    $$21$i = $696 & $697;
    $$neg152$i = $$21$i << 31 >> 31;
    $698 = (($695) + ($$neg152$i))|0;
    $699 = $z$3$lcssa$i;
    $700 = (($699) - ($683))|0;
    $701 = $700 >> 2;
    $702 = ($701*9)|0;
    $703 = (($702) + -9)|0;
    $704 = ($698|0)<($703|0);
    if ($704) {
     $705 = (($698) + 9216)|0;
     $706 = (($705|0) / 9)&-1;
     $$sum$i = (($706) + -1023)|0;
     $707 = (($$32$i) + ($$sum$i<<2)|0);
     $708 = (($705|0) % 9)&-1;
     $j$0225$i = (($708) + 1)|0;
     $709 = ($j$0225$i|0)<(9);
     if ($709) {
      $i$1226$i = 10;$j$0227$i = $j$0225$i;
      while(1) {
       $710 = ($i$1226$i*10)|0;
       $j$0$i = (($j$0227$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $710;
        break;
       } else {
        $i$1226$i = $710;$j$0227$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $711 = HEAP32[$707>>2]|0;
     $712 = (($711>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $713 = ($712|0)==(0);
     if ($713) {
      $$sum14$i = (($706) + -1022)|0;
      $714 = (($$32$i) + ($$sum14$i<<2)|0);
      $715 = ($714|0)==($z$3$lcssa$i|0);
      if ($715) {
       $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $716 = (($711>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $717 = $716 & 1;
       $718 = ($717|0)==(0);
       $$22$i = $718 ? 9007199254740992.0 : 9007199254740994.0;
       $719 = (($i$1$lcssa$i|0) / 2)&-1;
       $720 = ($712>>>0)<($719>>>0);
       do {
        if ($720) {
         $small$0$i = 0.5;
        } else {
         $721 = ($712|0)==($719|0);
         if ($721) {
          $$sum15$i = (($706) + -1022)|0;
          $722 = (($$32$i) + ($$sum15$i<<2)|0);
          $723 = ($722|0)==($z$3$lcssa$i|0);
          if ($723) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $724 = ($pl$0$i|0)==(0);
       do {
        if ($724) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $725 = HEAP8[$prefix$0$i>>0]|0;
         $726 = ($725<<24>>24)==(45);
         if (!($726)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $727 = $$22$i * -1.0;
         $728 = $small$0$i * -1.0;
         $round6$1$i = $727;$small$1$i = $728;
        }
       } while(0);
       $729 = (($711) - ($712))|0;
       HEAP32[$707>>2] = $729;
       $730 = $round6$1$i + $small$1$i;
       $731 = $730 != $round6$1$i;
       if (!($731)) {
        $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
        break;
       }
       $732 = (($729) + ($i$1$lcssa$i))|0;
       HEAP32[$707>>2] = $732;
       $733 = ($732>>>0)>(999999999);
       if ($733) {
        $d$2220$i = $707;
        while(1) {
         $734 = (($d$2220$i) + -4|0);
         HEAP32[$d$2220$i>>2] = 0;
         $735 = HEAP32[$734>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$734>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $d$2220$i = $734;
         } else {
          $d$2$lcssa$i = $734;
          break;
         }
        }
       } else {
        $d$2$lcssa$i = $707;
       }
       $738 = ($d$2$lcssa$i>>>0)<($a$3$lcssa$i>>>0);
       $d$2$a$3$i = $738 ? $d$2$lcssa$i : $a$3$lcssa$i;
       $739 = $d$2$a$3$i;
       $740 = (($683) - ($739))|0;
       $741 = $740 >> 2;
       $742 = ($741*9)|0;
       $743 = HEAP32[$d$2$a$3$i>>2]|0;
       $744 = ($743>>>0)<(10);
       if ($744) {
        $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $742;
        break;
       } else {
        $e$2215$i = $742;$i$2216$i = 10;
       }
       while(1) {
        $745 = ($i$2216$i*10)|0;
        $746 = (($e$2215$i) + 1)|0;
        $747 = ($743>>>0)<($745>>>0);
        if ($747) {
         $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $746;
         break;
        } else {
         $e$2215$i = $746;$i$2216$i = $745;
        }
       }
      }
     } while(0);
     $748 = (($d$3$i) + 4|0);
     $749 = ($z$3$lcssa$i>>>0)>($748>>>0);
     $$z$3$i = $749 ? $748 : $z$3$lcssa$i;
     $z$6$i = $$z$3$i;
     while(1) {
      $750 = (($z$6$i) + -4|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = ($751|0)==(0);
      $753 = ($z$6$i>>>0)>($a$6$i>>>0);
      $or$cond23$i = $752 & $753;
      if ($or$cond23$i) {
       $z$6$i = $750;
      } else {
       $a$7$i = $a$6$i;$e$4$i = $e$3$i;$z$7$i = $z$6$i;
       break;
      }
     }
    } else {
     $a$7$i = $a$3$lcssa$i;$e$4$i = $e$1$i;$z$7$i = $z$3$lcssa$i;
    }
    $754 = (0 - ($e$4$i))|0;
    do {
     if ($696) {
      $755 = ($$p$i|0)==(0);
      $756 = $755&1;
      $$$p$i = (($756) + ($$p$i))|0;
      $757 = ($$$p$i|0)>($e$4$i|0);
      $758 = ($e$4$i|0)>(-5);
      $or$cond3$i = $757 & $758;
      if ($or$cond3$i) {
       $759 = (($t$0) + -1)|0;
       $$neg153$i = (($$$p$i) + -1)|0;
       $760 = (($$neg153$i) - ($e$4$i))|0;
       $$012$i73 = $759;$$29$i = $760;
      } else {
       $761 = (($t$0) + -2)|0;
       $762 = (($$$p$i) + -1)|0;
       $$012$i73 = $761;$$29$i = $762;
      }
      $763 = $fl$1$ & 8;
      $764 = ($763|0)==(0);
      if (!($764)) {
       $$113$i = $$012$i73;$$310$i = $$29$i;
       break;
      }
      $765 = ($z$7$i>>>0)>($a$7$i>>>0);
      do {
       if ($765) {
        $766 = (($z$7$i) + -4|0);
        $767 = HEAP32[$766>>2]|0;
        $768 = ($767|0)==(0);
        if ($768) {
         $j$2$i = 9;
         break;
        }
        $769 = (($767>>>0) % 10)&-1;
        $770 = ($769|0)==(0);
        if ($770) {
         $i$3210$i = 10;$j$1211$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $771 = ($i$3210$i*10)|0;
         $772 = (($j$1211$i) + 1)|0;
         $773 = (($767>>>0) % ($771>>>0))&-1;
         $774 = ($773|0)==(0);
         if ($774) {
          $i$3210$i = $771;$j$1211$i = $772;
         } else {
          $j$2$i = $772;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $775 = $$012$i73 | 32;
      $776 = ($775|0)==(102);
      $777 = $z$7$i;
      $778 = (($777) - ($683))|0;
      $779 = $778 >> 2;
      $780 = ($779*9)|0;
      $781 = (($780) + -9)|0;
      if ($776) {
       $782 = (($781) - ($j$2$i))|0;
       $783 = ($782|0)<(0);
       $$24$i = $783 ? 0 : $782;
       $784 = ($$29$i|0)<($$24$i|0);
       $$29$$24$i = $784 ? $$29$i : $$24$i;
       $$113$i = $$012$i73;$$310$i = $$29$$24$i;
       break;
      } else {
       $785 = (($781) + ($e$4$i))|0;
       $786 = (($785) - ($j$2$i))|0;
       $787 = ($786|0)<(0);
       $$26$i = $787 ? 0 : $786;
       $788 = ($$29$i|0)<($$26$i|0);
       $$29$$26$i = $788 ? $$29$i : $$26$i;
       $$113$i = $$012$i73;$$310$i = $$29$$26$i;
       break;
      }
     } else {
      $$113$i = $t$0;$$310$i = $$p$i;
     }
    } while(0);
    $789 = ($$310$i|0)!=(0);
    if ($789) {
     $793 = 1;
    } else {
     $790 = $fl$1$ & 8;
     $791 = ($790|0)!=(0);
     $793 = $791;
    }
    $792 = $793&1;
    $794 = $$113$i | 32;
    $795 = ($794|0)==(102);
    if ($795) {
     $796 = ($e$4$i|0)>(0);
     $797 = $796 ? $e$4$i : 0;
     $$pn$i = $797;$estr$2$i = 0;
    } else {
     $798 = ($e$4$i|0)<(0);
     $799 = $798 ? $754 : $e$4$i;
     $800 = ($799|0)<(0);
     if ($800) {
      $801 = ($799|0)<(0);
      $802 = $801 << 31 >> 31;
      $$05$i80$i = $6;$803 = $799;$804 = $802;
      while(1) {
       $805 = (___uremdi3(($803|0),($804|0),10,0)|0);
       $806 = tempRet0;
       $807 = $805 | 48;
       $808 = $807&255;
       $809 = (($$05$i80$i) + -1|0);
       HEAP8[$809>>0] = $808;
       $810 = (___udivdi3(($803|0),($804|0),10,0)|0);
       $811 = tempRet0;
       $812 = ($804>>>0)>(9);
       $813 = ($804|0)==(9);
       $814 = ($803>>>0)>(4294967295);
       $815 = $813 & $814;
       $816 = $812 | $815;
       if ($816) {
        $$05$i80$i = $809;$803 = $810;$804 = $811;
       } else {
        break;
       }
      }
      $$0$lcssa$i85$i = $809;$$01$lcssa$off0$i86$i = $810;
     } else {
      $$0$lcssa$i85$i = $6;$$01$lcssa$off0$i86$i = $799;
     }
     $817 = ($$01$lcssa$off0$i86$i|0)==(0);
     if ($817) {
      $estr$1$ph$i = $$0$lcssa$i85$i;
     } else {
      $$12$i88$i = $$0$lcssa$i85$i;$y$03$i87$i = $$01$lcssa$off0$i86$i;
      while(1) {
       $818 = (($y$03$i87$i>>>0) % 10)&-1;
       $819 = $818 | 48;
       $820 = $819&255;
       $821 = (($$12$i88$i) + -1|0);
       HEAP8[$821>>0] = $820;
       $822 = (($y$03$i87$i>>>0) / 10)&-1;
       $823 = ($y$03$i87$i>>>0)<(10);
       if ($823) {
        $estr$1$ph$i = $821;
        break;
       } else {
        $$12$i88$i = $821;$y$03$i87$i = $822;
       }
      }
     }
     $824 = $estr$1$ph$i;
     $825 = (($8) - ($824))|0;
     $826 = ($825|0)<(2);
     if ($826) {
      $estr$1201$i = $estr$1$ph$i;
      while(1) {
       $827 = (($estr$1201$i) + -1|0);
       HEAP8[$827>>0] = 48;
       $828 = $827;
       $829 = (($8) - ($828))|0;
       $830 = ($829|0)<(2);
       if ($830) {
        $estr$1201$i = $827;
       } else {
        $estr$1$lcssa$i = $827;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $831 = $e$4$i >> 31;
     $832 = $831 & 2;
     $833 = (($832) + 43)|0;
     $834 = $833&255;
     $835 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$835>>0] = $834;
     $836 = $$113$i&255;
     $837 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$837>>0] = $836;
     $838 = $837;
     $839 = (($8) - ($838))|0;
     $$pn$i = $839;$estr$2$i = $837;
    }
    $840 = (($pl$0$i) + 1)|0;
    $841 = (($840) + ($$310$i))|0;
    $l$1$i = (($841) + ($792))|0;
    $842 = (($l$1$i) + ($$pn$i))|0;
    $843 = $fl$1$ & 73728;
    $844 = ($843|0)==(0);
    $845 = ($842|0)<($w$1|0);
    $or$cond$i94$i = $844 & $845;
    if ($or$cond$i94$i) {
     $846 = (($w$1) - ($842))|0;
     $847 = ($846>>>0)>(256);
     $848 = $847 ? 256 : $846;
     _memset(($pad$i|0),32,($848|0))|0;
     $849 = ($846>>>0)>(255);
     if ($849) {
      $$01$i95$i = $846;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $850 = (($$01$i95$i) + -256)|0;
       $851 = ($850>>>0)>(255);
       if ($851) {
        $$01$i95$i = $850;
       } else {
        $$0$lcssa$i97$i = $850;
        break;
       }
      }
     } else {
      $$0$lcssa$i97$i = $846;
     }
     (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $852 = ($843|0)==(65536);
    $or$cond$i101$i = $852 & $845;
    if ($or$cond$i101$i) {
     $853 = (($w$1) - ($842))|0;
     $854 = ($853>>>0)>(256);
     $855 = $854 ? 256 : $853;
     _memset(($pad$i|0),48,($855|0))|0;
     $856 = ($853>>>0)>(255);
     if ($856) {
      $$01$i102$i = $853;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $857 = (($$01$i102$i) + -256)|0;
       $858 = ($857>>>0)>(255);
       if ($858) {
        $$01$i102$i = $857;
       } else {
        $$0$lcssa$i104$i = $857;
        break;
       }
      }
     } else {
      $$0$lcssa$i104$i = $853;
     }
     (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
    }
    do {
     if ($795) {
      $859 = ($a$7$i>>>0)>($$32$i>>>0);
      $r$0$a$7$i = $859 ? $$32$i : $a$7$i;
      $d$4184$i = $r$0$a$7$i;
      while(1) {
       $860 = HEAP32[$d$4184$i>>2]|0;
       $861 = ($860|0)==(0);
       if ($861) {
        $$1$lcssa$i113$i = $13;
       } else {
        $$12$i111$i = $13;$y$03$i110$i = $860;
        while(1) {
         $862 = (($y$03$i110$i>>>0) % 10)&-1;
         $863 = $862 | 48;
         $864 = $863&255;
         $865 = (($$12$i111$i) + -1|0);
         HEAP8[$865>>0] = $864;
         $866 = (($y$03$i110$i>>>0) / 10)&-1;
         $867 = ($y$03$i110$i>>>0)<(10);
         if ($867) {
          $$1$lcssa$i113$i = $865;
          break;
         } else {
          $$12$i111$i = $865;$y$03$i110$i = $866;
         }
        }
       }
       $868 = ($d$4184$i|0)==($r$0$a$7$i|0);
       do {
        if ($868) {
         $872 = ($$1$lcssa$i113$i|0)==($13|0);
         if (!($872)) {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $869 = ($$1$lcssa$i113$i>>>0)>($buf$i>>>0);
         if ($869) {
          $s7$0181$i = $$1$lcssa$i113$i;
         } else {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         while(1) {
          $870 = (($s7$0181$i) + -1|0);
          HEAP8[$870>>0] = 48;
          $871 = ($870>>>0)>($buf$i>>>0);
          if ($871) {
           $s7$0181$i = $870;
          } else {
           $s7$1$i = $870;
           break;
          }
         }
        }
       } while(0);
       $873 = $s7$1$i;
       $874 = (($14) - ($873))|0;
       (___fwritex($s7$1$i,$874,$f)|0);
       $875 = (($d$4184$i) + 4|0);
       $876 = ($875>>>0)>($$32$i>>>0);
       if ($876) {
        break;
       } else {
        $d$4184$i = $875;
       }
      }
      if (!($789)) {
       $877 = $fl$1$ & 8;
       $878 = ($877|0)==(0);
       if ($878) {
        break;
       }
      }
      (___fwritex(18936,1,$f)|0);
      $879 = ($875>>>0)<($z$7$i>>>0);
      $880 = ($$310$i|0)>(0);
      $or$cond29174$i = $879 & $880;
      if ($or$cond29174$i) {
       $$411176$i = $$310$i;$d$5175$i = $875;
       while(1) {
        $881 = HEAP32[$d$5175$i>>2]|0;
        $882 = ($881|0)==(0);
        if ($882) {
         $s8$0170$i = $13;
         label = 295;
        } else {
         $$12$i120$i = $13;$y$03$i119$i = $881;
         while(1) {
          $883 = (($y$03$i119$i>>>0) % 10)&-1;
          $884 = $883 | 48;
          $885 = $884&255;
          $886 = (($$12$i120$i) + -1|0);
          HEAP8[$886>>0] = $885;
          $887 = (($y$03$i119$i>>>0) / 10)&-1;
          $888 = ($y$03$i119$i>>>0)<(10);
          if ($888) {
           break;
          } else {
           $$12$i120$i = $886;$y$03$i119$i = $887;
          }
         }
         $889 = ($886>>>0)>($buf$i>>>0);
         if ($889) {
          $s8$0170$i = $886;
          label = 295;
         } else {
          $s8$0$lcssa$i = $886;
         }
        }
        if ((label|0) == 295) {
         while(1) {
          label = 0;
          $890 = (($s8$0170$i) + -1|0);
          HEAP8[$890>>0] = 48;
          $891 = ($890>>>0)>($buf$i>>>0);
          if ($891) {
           $s8$0170$i = $890;
           label = 295;
          } else {
           $s8$0$lcssa$i = $890;
           break;
          }
         }
        }
        $892 = ($$411176$i|0)>(9);
        $893 = $892 ? 9 : $$411176$i;
        (___fwritex($s8$0$lcssa$i,$893,$f)|0);
        $894 = (($d$5175$i) + 4|0);
        $895 = (($$411176$i) + -9)|0;
        $896 = ($894>>>0)<($z$7$i>>>0);
        $897 = ($895|0)>(0);
        $or$cond29$i = $896 & $897;
        if ($or$cond29$i) {
         $$411176$i = $895;$d$5175$i = $894;
        } else {
         $$411$lcssa$i = $895;
         break;
        }
       }
      } else {
       $$411$lcssa$i = $$310$i;
      }
      $898 = ($$411$lcssa$i|0)>(0);
      if (!($898)) {
       break;
      }
      $899 = ($$411$lcssa$i>>>0)>(256);
      $900 = $899 ? 256 : $$411$lcssa$i;
      _memset(($pad$i|0),48,($900|0))|0;
      $901 = ($$411$lcssa$i>>>0)>(255);
      if ($901) {
       $$01$i126$i = $$411$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $902 = (($$01$i126$i) + -256)|0;
        $903 = ($902>>>0)>(255);
        if ($903) {
         $$01$i126$i = $902;
        } else {
         $$0$lcssa$i128$i = $902;
         break;
        }
       }
      } else {
       $$0$lcssa$i128$i = $$411$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
     } else {
      $904 = ($z$7$i>>>0)>($a$7$i>>>0);
      $905 = (($a$7$i) + 4|0);
      $z$7$$i = $904 ? $z$7$i : $905;
      $906 = ($$310$i|0)>(-1);
      do {
       if ($906) {
        $907 = $fl$1$ & 8;
        $$not$i = ($907|0)!=(0);
        $$5194$i = $$310$i;$d$6193$i = $a$7$i;
        while(1) {
         $908 = HEAP32[$d$6193$i>>2]|0;
         $909 = ($908|0)==(0);
         if ($909) {
          label = 306;
         } else {
          $$12$i135$i = $13;$y$03$i134$i = $908;
          while(1) {
           $910 = (($y$03$i134$i>>>0) % 10)&-1;
           $911 = $910 | 48;
           $912 = $911&255;
           $913 = (($$12$i135$i) + -1|0);
           HEAP8[$913>>0] = $912;
           $914 = (($y$03$i134$i>>>0) / 10)&-1;
           $915 = ($y$03$i134$i>>>0)<(10);
           if ($915) {
            break;
           } else {
            $$12$i135$i = $913;$y$03$i134$i = $914;
           }
          }
          $916 = ($913|0)==($13|0);
          if ($916) {
           label = 306;
          } else {
           $s9$0$i = $913;
          }
         }
         if ((label|0) == 306) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $917 = ($d$6193$i|0)==($a$7$i|0);
         do {
          if ($917) {
           $921 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $922 = ($$5194$i|0)>(0);
           $brmerge$i = $922 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $921;
            break;
           }
           (___fwritex(18936,1,$f)|0);
           $s9$2$i = $921;
          } else {
           $918 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($918) {
            $s9$1189$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $919 = (($s9$1189$i) + -1|0);
            HEAP8[$919>>0] = 48;
            $920 = ($919>>>0)>($buf$i>>>0);
            if ($920) {
             $s9$1189$i = $919;
            } else {
             $s9$2$i = $919;
             break;
            }
           }
          }
         } while(0);
         $923 = $s9$2$i;
         $924 = (($14) - ($923))|0;
         $925 = ($924|0)<($$5194$i|0);
         $$$5$i = $925 ? $924 : $$5194$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $926 = (($$5194$i) - ($924))|0;
         $927 = (($d$6193$i) + 4|0);
         $928 = ($927>>>0)<($z$7$$i>>>0);
         $929 = ($926|0)>(-1);
         $or$cond30$i = $928 & $929;
         if ($or$cond30$i) {
          $$5194$i = $926;$d$6193$i = $927;
         } else {
          break;
         }
        }
        $930 = ($926|0)>(0);
        if (!($930)) {
         break;
        }
        $931 = ($926>>>0)>(256);
        $932 = $931 ? 256 : $926;
        _memset(($pad$i|0),48,($932|0))|0;
        $933 = ($926>>>0)>(255);
        if ($933) {
         $$01$i141$i = $926;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $934 = (($$01$i141$i) + -256)|0;
          $935 = ($934>>>0)>(255);
          if ($935) {
           $$01$i141$i = $934;
          } else {
           $$0$lcssa$i143$i = $934;
           break;
          }
         }
        } else {
         $$0$lcssa$i143$i = $926;
        }
        (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
       }
      } while(0);
      $936 = $estr$2$i;
      $937 = (($8) - ($936))|0;
      (___fwritex($estr$2$i,$937,$f)|0);
     }
    } while(0);
    $938 = ($843|0)==(8192);
    $or$cond$i$i = $938 & $845;
    if ($or$cond$i$i) {
     $939 = (($w$1) - ($842))|0;
     $940 = ($939>>>0)>(256);
     $941 = $940 ? 256 : $939;
     _memset(($pad$i|0),32,($941|0))|0;
     $942 = ($939>>>0)>(255);
     if ($942) {
      $$01$i$i = $939;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $943 = (($$01$i$i) + -256)|0;
       $944 = ($943>>>0)>(255);
       if ($944) {
        $$01$i$i = $943;
       } else {
        $$0$lcssa$i$i = $943;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $939;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$31$i = $845 ? $w$1 : $842;
    $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$31$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 99:  {
    $318 = $206;
    $319 = $318&255;
    HEAP8[$4>>0] = $319;
    $1054 = $228;$1055 = $206;$a$2 = $4;$fl$6 = $205;$p$5 = 1;$pl$2 = 0;$prefix$2 = 18840;$z$2 = $2;
    break;
   }
   case 109:  {
    $320 = (___errno_location()|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (_strerror(($321|0))|0);
    $a$1 = $322;
    label = 100;
    break;
   }
   case 115:  {
    $323 = ($206|0)==(0|0);
    $$18 = $323 ? 18856 : $206;
    $a$1 = $$18;
    label = 100;
    break;
   }
   case 67:  {
    $330 = $206;
    HEAP32[$wc>>2] = $330;
    HEAP32[$5>>2] = 0;
    $1056 = $wc;$1057 = $wc;$p$4296 = -1;
    label = 105;
    break;
   }
   case 83:  {
    $331 = ($p$0|0)==(0);
    if ($331) {
     $1058 = $206;$1059 = $206;$i$0167 = 0;
     label = 111;
    } else {
     $1056 = $206;$1057 = $206;$p$4296 = $p$0;
     label = 105;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 78;
    break;
   }
   case 111:  {
    $248 = $206;
    $249 = ($248|0)==(0);
    $250 = ($228|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i44 = $2;
    } else {
     $$03$i41 = $2;$253 = $248;$257 = $228;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = (($$03$i41) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i44 = $256;
       break;
      } else {
       $$03$i41 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $307 = $206;$310 = $228;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 18840;
     label = 95;
    } else {
     $$14 = $251 ? 18840 : ((18840 + 5|0));
     $265 = $251&1;
     $$15 = $265 ^ 1;
     $307 = $206;$310 = $228;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$15;$prefix$1 = $$14;
     label = 95;
    }
    break;
   }
   case 105: case 100:  {
    $266 = $206;
    $267 = ($228|0)<(0);
    if ($267) {
     $268 = (_i64Subtract(0,0,($266|0),($228|0))|0);
     $269 = tempRet0;
     $270 = $268;
     $276 = $270;$278 = $269;$pl$0 = 1;$prefix$0 = 18840;
     label = 90;
     break L92;
    }
    $271 = $fl$1$ & 2048;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = $fl$1$ & 1;
     $274 = ($273|0)==(0);
     $$16 = $274 ? 18840 : ((18840 + 2|0));
     $276 = $206;$278 = $228;$pl$0 = $273;$prefix$0 = $$16;
     label = 90;
    } else {
     $276 = $206;$278 = $228;$pl$0 = 1;$prefix$0 = ((18840 + 1|0));
     label = 90;
    }
    break;
   }
   case 117:  {
    $276 = $206;$278 = $228;$pl$0 = 0;$prefix$0 = 18840;
    label = 90;
    break;
   }
   case 112:  {
    $221 = ($p$0>>>0)>(8);
    $222 = $221 ? $p$0 : 8;
    $223 = $fl$1$ | 8;
    $fl$3 = $223;$p$1 = $222;$t$1 = 120;
    label = 78;
    break;
   }
   default: {
    $1054 = $228;$1055 = $206;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 18840;$z$2 = $2;
   }
   }
  } while(0);
  L437: do {
   if ((label|0) == 78) {
    label = 0;
    $224 = $206;
    $225 = $t$1 & 32;
    $226 = ($224|0)==(0);
    $227 = ($228|0)==(0);
    $229 = $226 & $227;
    if ($229) {
     $307 = $206;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 18840;
     label = 95;
    } else {
     $$012$i = $2;$231 = $224;$238 = $228;
     while(1) {
      $230 = $231 & 15;
      $232 = (18920 + ($230)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = $233&255;
      $235 = $234 | $225;
      $236 = $235&255;
      $237 = (($$012$i) + -1|0);
      HEAP8[$237>>0] = $236;
      $239 = (_bitshift64Lshr(($231|0),($238|0),4)|0);
      $240 = tempRet0;
      $241 = ($239|0)==(0);
      $242 = ($240|0)==(0);
      $243 = $241 & $242;
      if ($243) {
       break;
      } else {
       $$012$i = $237;$231 = $239;$238 = $240;
      }
     }
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     if ($245) {
      $307 = $206;$310 = $228;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 18840;
      label = 95;
     } else {
      $246 = $t$1 >> 4;
      $247 = (18840 + ($246)|0);
      $307 = $206;$310 = $228;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 95;
     }
    }
   }
   else if ((label|0) == 90) {
    label = 0;
    $275 = $276;
    $277 = ($278>>>0)>(0);
    $279 = ($278|0)==(0);
    $280 = ($275>>>0)>(4294967295);
    $281 = $279 & $280;
    $282 = $277 | $281;
    if ($282) {
     $$05$i = $2;$283 = $275;$284 = $278;
     while(1) {
      $285 = (___uremdi3(($283|0),($284|0),10,0)|0);
      $286 = tempRet0;
      $287 = $285 | 48;
      $288 = $287&255;
      $289 = (($$05$i) + -1|0);
      HEAP8[$289>>0] = $288;
      $290 = (___udivdi3(($283|0),($284|0),10,0)|0);
      $291 = tempRet0;
      $292 = ($284>>>0)>(9);
      $293 = ($284|0)==(9);
      $294 = ($283>>>0)>(4294967295);
      $295 = $293 & $294;
      $296 = $292 | $295;
      if ($296) {
       $$05$i = $289;$283 = $290;$284 = $291;
      } else {
       break;
      }
     }
     $$0$lcssa$i46 = $289;$$01$lcssa$off0$i = $290;
    } else {
     $$0$lcssa$i46 = $2;$$01$lcssa$off0$i = $275;
    }
    $297 = ($$01$lcssa$off0$i|0)==(0);
    if ($297) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i46;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 95;
    } else {
     $$12$i = $$0$lcssa$i46;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $298 = (($y$03$i>>>0) % 10)&-1;
      $299 = $298 | 48;
      $300 = $299&255;
      $301 = (($$12$i) + -1|0);
      HEAP8[$301>>0] = $300;
      $302 = (($y$03$i>>>0) / 10)&-1;
      $303 = ($y$03$i>>>0)<(10);
      if ($303) {
       $307 = $276;$310 = $278;$a$0 = $301;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 95;
       break;
      } else {
       $$12$i = $301;$y$03$i = $302;
      }
     }
    }
   }
   else if ((label|0) == 100) {
    label = 0;
    $324 = (_memchr($a$1,0,$p$0)|0);
    $325 = ($324|0)==(0|0);
    if ($325) {
     $326 = (($a$1) + ($p$0)|0);
     $1054 = $228;$1055 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 18840;$z$2 = $326;
     break;
    } else {
     $327 = $324;
     $328 = $a$1;
     $329 = (($327) - ($328))|0;
     $1054 = $228;$1055 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $329;$pl$2 = 0;$prefix$2 = 18840;$z$2 = $324;
     break;
    }
   }
   else if ((label|0) == 105) {
    label = 0;
    $i$0169 = 0;$l$1168 = 0;$ws$0170 = $1056;
    while(1) {
     $335 = HEAP32[$ws$0170>>2]|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $i$0$lcssa = $i$0169;$l$1$lcssa = $l$1168;
      break;
     }
     $337 = (_wctomb($mb,$335)|0);
     $338 = ($337|0)>(-1);
     if (!($338)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     $339 = (($p$4296) - ($i$0169))|0;
     $340 = ($337>>>0)>($339>>>0);
     $334 = (($337) + ($i$0169))|0;
     if ($340) {
      $1058 = $1056;$1059 = $1057;$i$0167 = $i$0169;
      label = 111;
      break L437;
     }
     $332 = (($ws$0170) + 4|0);
     $333 = ($334>>>0)<($p$4296>>>0);
     if ($333) {
      $i$0169 = $334;$l$1168 = $337;$ws$0170 = $332;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $337;
      break;
     }
    }
    $341 = ($l$1$lcssa|0)<(0);
    if ($341) {
     $$0 = -1;
     label = 357;
     break L1;
    } else {
     $1058 = $1056;$1059 = $1057;$i$0167 = $i$0$lcssa;
     label = 111;
    }
   }
  } while(0);
  if ((label|0) == 95) {
   label = 0;
   $304 = ($p$2|0)>(-1);
   $305 = $fl$4 & -65537;
   $$fl$4 = $304 ? $305 : $fl$4;
   $306 = $307;
   $308 = ($306|0)==(0);
   $309 = ($310|0)==(0);
   $311 = $308 & $309;
   $312 = ($p$2|0)==(0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $1054 = $310;$1055 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $313 = $a$0;
    $314 = (($3) - ($313))|0;
    $315 = $311&1;
    $316 = (($315) + ($314))|0;
    $317 = ($p$2|0)>($316|0);
    $p$2$ = $317 ? $p$2 : $316;
    $1054 = $310;$1055 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 111) {
   label = 0;
   $342 = $fl$1$ & 73728;
   $343 = ($342|0)==(0);
   $344 = ($i$0167|0)<($w$1|0);
   $or$cond$i57 = $343 & $344;
   if ($or$cond$i57) {
    $345 = (($w$1) - ($i$0167))|0;
    $346 = ($345>>>0)>(256);
    $347 = $346 ? 256 : $345;
    _memset(($pad$i|0),32,($347|0))|0;
    $348 = ($345>>>0)>(255);
    if ($348) {
     $$01$i58 = $345;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $349 = (($$01$i58) + -256)|0;
      $350 = ($349>>>0)>(255);
      if ($350) {
       $$01$i58 = $349;
      } else {
       $$0$lcssa$i60 = $349;
       break;
      }
     }
    } else {
     $$0$lcssa$i60 = $345;
    }
    (___fwritex($pad$i,$$0$lcssa$i60,$f)|0);
   }
   $351 = ($i$0167|0)==(0);
   L473: do {
    if (!($351)) {
     $i$1175 = 0;$ws$1176 = $1058;
     while(1) {
      $352 = HEAP32[$ws$1176>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       break L473;
      }
      $354 = (_wctomb($mb,$352)|0);
      $355 = (($354) + ($i$1175))|0;
      $356 = ($355|0)>($i$0167|0);
      if ($356) {
       break L473;
      }
      $357 = (($ws$1176) + 4|0);
      (___fwritex($mb,$354,$f)|0);
      $358 = ($355>>>0)<($i$0167>>>0);
      if ($358) {
       $i$1175 = $355;$ws$1176 = $357;
      } else {
       break;
      }
     }
    }
   } while(0);
   $359 = ($342|0)==(8192);
   $or$cond$i64 = $359 & $344;
   if ($or$cond$i64) {
    $360 = (($w$1) - ($i$0167))|0;
    $361 = ($360>>>0)>(256);
    $362 = $361 ? 256 : $360;
    _memset(($pad$i|0),32,($362|0))|0;
    $363 = ($360>>>0)>(255);
    if ($363) {
     $$01$i65 = $360;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $364 = (($$01$i65) + -256)|0;
      $365 = ($364>>>0)>(255);
      if ($365) {
       $$01$i65 = $364;
      } else {
       $$0$lcssa$i67 = $364;
       break;
      }
     }
    } else {
     $$0$lcssa$i67 = $360;
    }
    (___fwritex($pad$i,$$0$lcssa$i67,$f)|0);
   }
   $366 = $344 ? $w$1 : $i$0167;
   $1048 = $228;$1049 = $1059;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $366;$l10n$0 = $l10n$3;
   continue;
  }
  $945 = $z$2;
  $946 = $a$2;
  $947 = (($945) - ($946))|0;
  $948 = ($p$5|0)<($947|0);
  $$p$5 = $948 ? $947 : $p$5;
  $949 = (($pl$2) + ($$p$5))|0;
  $950 = ($w$1|0)<($949|0);
  $w$2 = $950 ? $949 : $w$1;
  $951 = $fl$6 & 73728;
  $952 = ($951|0)==(0);
  $953 = ($949|0)<($w$2|0);
  $or$cond$i75 = $952 & $953;
  if ($or$cond$i75) {
   $954 = (($w$2) - ($949))|0;
   $955 = ($954>>>0)>(256);
   $956 = $955 ? 256 : $954;
   _memset(($pad$i|0),32,($956|0))|0;
   $957 = ($954>>>0)>(255);
   if ($957) {
    $$01$i76 = $954;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $958 = (($$01$i76) + -256)|0;
     $959 = ($958>>>0)>(255);
     if ($959) {
      $$01$i76 = $958;
     } else {
      $$0$lcssa$i78 = $958;
      break;
     }
    }
   } else {
    $$0$lcssa$i78 = $954;
   }
   (___fwritex($pad$i,$$0$lcssa$i78,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $960 = ($951|0)==(65536);
  $or$cond$i50 = $960 & $953;
  if ($or$cond$i50) {
   $961 = (($w$2) - ($949))|0;
   $962 = ($961>>>0)>(256);
   $963 = $962 ? 256 : $961;
   _memset(($pad$i|0),48,($963|0))|0;
   $964 = ($961>>>0)>(255);
   if ($964) {
    $$01$i51 = $961;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $965 = (($$01$i51) + -256)|0;
     $966 = ($965>>>0)>(255);
     if ($966) {
      $$01$i51 = $965;
     } else {
      $$0$lcssa$i53 = $965;
      break;
     }
    }
   } else {
    $$0$lcssa$i53 = $961;
   }
   (___fwritex($pad$i,$$0$lcssa$i53,$f)|0);
  }
  $967 = ($947|0)<($$p$5|0);
  if ($967) {
   $968 = (($$p$5) - ($947))|0;
   $969 = ($968>>>0)>(256);
   $970 = $969 ? 256 : $968;
   _memset(($pad$i|0),48,($970|0))|0;
   $971 = ($968>>>0)>(255);
   if ($971) {
    $$01$i36 = $968;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $972 = (($$01$i36) + -256)|0;
     $973 = ($972>>>0)>(255);
     if ($973) {
      $$01$i36 = $972;
     } else {
      $$0$lcssa$i38 = $972;
      break;
     }
    }
   } else {
    $$0$lcssa$i38 = $968;
   }
   (___fwritex($pad$i,$$0$lcssa$i38,$f)|0);
  }
  (___fwritex($a$2,$947,$f)|0);
  $974 = ($951|0)==(8192);
  $or$cond$i = $974 & $953;
  if (!($or$cond$i)) {
   $1048 = $1054;$1049 = $1055;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $975 = (($w$2) - ($949))|0;
  $976 = ($975>>>0)>(256);
  $977 = $976 ? 256 : $975;
  _memset(($pad$i|0),32,($977|0))|0;
  $978 = ($975>>>0)>(255);
  if ($978) {
   $$01$i = $975;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $979 = (($$01$i) + -256)|0;
    $980 = ($979>>>0)>(255);
    if ($980) {
     $$01$i = $979;
    } else {
     $$0$lcssa$i = $979;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $975;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1048 = $1054;$1049 = $1055;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 339) {
  $981 = ($f|0)==(0|0);
  if (!($981)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $982 = ($l10n$0|0)==(0);
  if ($982) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$291 = 1;
  }
  while(1) {
   $983 = (($nl_type) + ($i$291<<2)|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = ($984|0)==(0);
   if ($985) {
    $i$390 = $i$291;
    break;
   }
   $986 = (($nl_arg) + ($i$291<<3)|0);
   $987 = ($984>>>0)>(20);
   L523: do {
    if (!($987)) {
     do {
      switch ($984|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $988 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$986>>2] = $988;
       break L523;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $989 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $990 = ($989|0)<(0);
       $991 = $990 << 31 >> 31;
       $992 = $986;
       $993 = $992;
       HEAP32[$993>>2] = $989;
       $994 = (($992) + 4)|0;
       $995 = $994;
       HEAP32[$995>>2] = $991;
       break L523;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $996 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $997 = $986;
       $998 = $997;
       HEAP32[$998>>2] = $996;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = 0;
       break L523;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1001 = $arglist_current44;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $1004 = (($1001) + 4)|0;
       $1005 = $1004;
       $1006 = HEAP32[$1005>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1007 = $986;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1003;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L523;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1012 = $1011&65535;
       $1013 = $1012 << 16 >> 16;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $986;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L523;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1020 & 65535;
       $1021 = $986;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask1$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L523;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1026 = $1025&255;
       $1027 = $1026 << 24 >> 24;
       $1028 = ($1027|0)<(0);
       $1029 = $1028 << 31 >> 31;
       $1030 = $986;
       $1031 = $1030;
       HEAP32[$1031>>2] = $1027;
       $1032 = (($1030) + 4)|0;
       $1033 = $1032;
       HEAP32[$1033>>2] = $1029;
       break L523;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1034 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1034 & 255;
       $1035 = $986;
       $1036 = $1035;
       HEAP32[$1036>>2] = $$mask$i;
       $1037 = (($1035) + 4)|0;
       $1038 = $1037;
       HEAP32[$1038>>2] = 0;
       break L523;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1039 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$986>>3] = $1039;
       break L523;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1040 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$986>>3] = $1040;
       break L523;
       break;
      }
      default: {
       break L523;
      }
      }
     } while(0);
    }
   } while(0);
   $1041 = (($i$291) + 1)|0;
   $1042 = ($1041|0)<(10);
   if ($1042) {
    $i$291 = $1041;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1045 = (($nl_type) + ($i$390<<2)|0);
   $1046 = HEAP32[$1045>>2]|0;
   $1047 = ($1046|0)==(0);
   $1044 = (($i$390) + 1)|0;
   if (!($1047)) {
    $$0 = -1;
    label = 357;
    break;
   }
   $1043 = ($1044|0)<(10);
   if ($1043) {
    $i$390 = $1044;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 357) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=18944+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function runPostSets() {
 HEAP32[624] = __ZTISt9exception;HEAP32[1370] = __ZTISt9exception;HEAP32[1396] = __ZTISt9exception;HEAP32[4276] = __ZTISt9exception;HEAP32[4506] = __ZTISt9exception;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
}
function _rand_r(seedp) {
    seedp = seedp|0; 
    var val = 0;
    val = ((Math_imul(((HEAP32[((seedp)>>2)])|0), 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
    HEAP32[((seedp)>>2)]=val;
    return val|0;
}
function _rand() {
    return _rand_r(___rand_seed)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }
  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_vid(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=+a2;
      FUNCTION_TABLE_vid[index&63](a1|0,+a2);
    }
  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&1023](a1|0);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
    }
  

    function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return FUNCTION_TABLE_iiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }
  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
    }
  

    function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }
  

    function dynCall_vidd(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=+a2; a3=+a3;
      FUNCTION_TABLE_vidd[index&1023](a1|0,+a2,+a3);
    }
  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }
  

    function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }
  

    function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }
  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }
  

    function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      FUNCTION_TABLE_viiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }
  

    function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
    }
  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function dynCall_diii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
    }
  

    function dynCall_i(index) {
      index = index|0;
      
      return FUNCTION_TABLE_i[index&1023]()|0;
    }
  

    function dynCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      return FUNCTION_TABLE_iiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
    }
  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&1023]();
    }
  

    function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return FUNCTION_TABLE_iiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }
  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function _glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function _glfwSetWindowTitle__wrapper(p0) { p0 = p0|0; _glfwSetWindowTitle(p0|0); }
  function _glfwSetKeyCallback__wrapper(p0) { p0 = p0|0; _glfwSetKeyCallback(p0|0); }
  function _glfwSetMousePosCallback__wrapper(p0) { p0 = p0|0; _glfwSetMousePosCallback(p0|0); }
  function _glfwSetWindowSizeCallback__wrapper(p0) { p0 = p0|0; _glfwSetWindowSizeCallback(p0|0); }
  function _glCompileShader__wrapper(p0) { p0 = p0|0; _glCompileShader(p0|0); }
  function _glDeleteShader__wrapper(p0) { p0 = p0|0; _glDeleteShader(p0|0); }
  function _glLinkProgram__wrapper(p0) { p0 = p0|0; _glLinkProgram(p0|0); }
  function _glDeleteProgram__wrapper(p0) { p0 = p0|0; _glDeleteProgram(p0|0); }
  function _glUseProgram__wrapper(p0) { p0 = p0|0; _glUseProgram(p0|0); }
  function _glBindVertexArray__wrapper(p0) { p0 = p0|0; _glBindVertexArray(p0|0); }
  function _glEnableVertexAttribArray__wrapper(p0) { p0 = p0|0; _glEnableVertexAttribArray(p0|0); }
  function _glActiveTexture__wrapper(p0) { p0 = p0|0; _glActiveTexture(p0|0); }
  function _glEnable__wrapper(p0) { p0 = p0|0; _glEnable(p0|0); }
  function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function _glAttachShader__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glAttachShader(p0|0,p1|0); }
  function _glGenBuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenBuffers(p0|0,p1|0); }
  function _glBindBuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindBuffer(p0|0,p1|0); }
  function _glGenVertexArrays__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenVertexArrays(p0|0,p1|0); }
  function _glGenFramebuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenFramebuffers(p0|0,p1|0); }
  function _glGenTextures__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenTextures(p0|0,p1|0); }
  function _glBindFramebuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindFramebuffer(p0|0,p1|0); }
  function _glBindTexture__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindTexture(p0|0,p1|0); }
  function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0; }
  function _clGetProgramBuildInfo__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clGetProgramBuildInfo(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clCreateBuffer__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clCreateBuffer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clCreateContextFromType__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clCreateContextFromType(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _glCreateShader__wrapper(p0) { p0 = p0|0; return _glCreateShader(p0|0)|0; }
  function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0; }
  function b8(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(8); }
  function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0; }
  function _clCreateKernel__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _clCreateKernel(p0|0,p1|0,p2|0)|0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b10(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(11); }
  function b12(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(12); }
  function b13(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13); }
  function _glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0); }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(16); }
  function _glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
  function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(17); }
  function b18(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function b19(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(19);return 0; }
  function _clGetContextInfo__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clGetContextInfo(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateFromGLBuffer__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateFromGLBuffer(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateCommandQueue__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateCommandQueue(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateProgramWithSource__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateProgramWithSource(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(20);return +0; }
  function b21() { ; nullFunc_i(21);return 0; }
  function _glewInit__wrapper() { ; return _glewInit()|0; }
  function _glCreateProgram__wrapper() { ; return _glCreateProgram()|0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b22(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_iiiiiiiiii(22);return 0; }
  function _glfwOpenWindow__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; return _glfwOpenWindow(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0)|0; }
  function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function _glGetShaderiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetShaderiv(p0|0,p1|0,p2|0); }
  function _glBindAttribLocation__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glBindAttribLocation(p0|0,p1|0,p2|0); }
  function _glGetProgramiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetProgramiv(p0|0,p1|0,p2|0); }
  function _glTexParameteri__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glTexParameteri(p0|0,p1|0,p2|0); }
  function b24() { ; nullFunc_v(24); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function _glfwTerminate__wrapper() { ; _glfwTerminate(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b25(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(25);return 0; }
  function b26(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(26);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b27(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27); }
  function _glViewport__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glViewport(p0|0,p1|0,p2|0,p3|0); }
  function _glShaderSource__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glShaderSource(p0|0,p1|0,p2|0,p3|0); }
  function _glGetShaderInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0); }
  function _glGetProgramInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0); }
  function _glBufferData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferData(p0|0,p1|0,p2|0,p3|0); }
  function _glBlendFuncSeparate__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0); }
  function _glBufferSubData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferSubData(p0|0,p1|0,p2|0,p3|0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNSt3__16vectorINS_5EventENS7_9allocatorIS9_EEEEPS9_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_glFramebufferTexture2D__wrapper,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN19LorenzAttractorDemo6renderEf,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN11ApplicationD2Ev,__ZN11ApplicationD0Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZN19LorenzAttractorDemoD2Ev,__ZN19LorenzAttractorDemoD0Ev,b3,__ZN19LorenzAttractorDemo6updateEv,__ZN19LorenzAttractorDemo4initEv,b3,__ZN4DemoD1Ev,__ZN4DemoD0Ev
  ,b3,__ZN27LorenzAttractorOpenCLSolverD2Ev,__ZN27LorenzAttractorOpenCLSolverD0Ev,__ZN27LorenzAttractorOpenCLSolver4initEv,b3,__ZN2cl5ErrorD1Ev,__ZN2cl5ErrorD0Ev,b3,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZN6SolverD1Ev,__ZN6SolverD0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,b3,b3,b3,b3,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b3
  ,__ZNSt12length_errorD0Ev,__ZNSt14overflow_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3
  ,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
  ,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3
  ,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3
  ,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev
  ,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,b3,__ZN11ApplicationC2Ev,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b3,_glfwSetWindowTitle__wrapper,b3
  ,b3,b3,_glfwSetKeyCallback__wrapper,b3,_glfwSetMousePosCallback__wrapper,b3,_glfwSetWindowSizeCallback__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN19LorenzAttractorDemoC2Ev,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16localeD2Ev,b3,b3,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,__ZN10ParametersD1Ev,__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev,__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev,__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev,__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev,__ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev,__ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev,__ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev,__ZNSt3__117__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev,b3,b3
  ,b3,b3,b3,b3,_glCompileShader__wrapper,b3,b3,b3,b3,__ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev,_glDeleteShader__wrapper,b3,__ZNSt3__14listIjNS_9allocatorIjEEED2Ev,b3,b3,__ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev,b3,b3,__ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev,__ZN4DemoD2Ev,b3,b3,b3,b3,b3,_glLinkProgram__wrapper,b3,b3,_glDeleteProgram__wrapper,_glUseProgram__wrapper,b3,b3,b3,b3,b3,_glBindVertexArray__wrapper,_glEnableVertexAttribArray__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,_glActiveTexture__wrapper,b3,b3,b3,b3,_glEnable__wrapper,b3,__ZN7gltools15ShaderContainerD2Ev,b3,b3,b3,__ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev,__ZN2cl7NDRangeD1Ev,__ZN2cl7ContextC1Ev,__ZN2cl7ProgramC1Ev
  ,__ZN2cl6KernelC1Ev,__ZN2cl12CommandQueueC1Ev,__ZN2cl6BufferC1Ev,__ZN2cl6BufferD1Ev,__ZN2cl12CommandQueueD1Ev,__ZN2cl6KernelD1Ev,__ZN2cl7ProgramD1Ev,__ZN2cl7ContextD1Ev,__ZN6SolverD2Ev,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED1Ev,__ZN27LorenzAttractorOpenCLSolver6__initEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN2cl8BufferGLD1Ev
  ,b3,b3,b3,b3,__ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev,__ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev,__ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev,b3,b3,b3,__ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev,b3,b3,b3,b3,b3,b3,__ZN2cl6MemoryD1Ev,b3,b3,__ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev,b3,__ZN2cl6DeviceD1Ev,b3,__ZN2cl6size_tILi3EED1Ev,__ZN2cl8PlatformD1Ev,b3,b3,b3,__ZN2cl6MemoryD2Ev
  ,b3,__ZN2cl6BufferD2Ev,b3,b3,__ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev,b3,b3,__ZN2cl6detail7WrapperIP10_cl_kernelED2Ev,__ZN2cl6detail7WrapperIP11_cl_programED2Ev,b3,b3,__ZN2cl6detail7WrapperIP11_cl_contextED2Ev,b3,b3,b3,__ZN11Application3runEv,_exit__wrapper,__ZN27LorenzAttractorOpenCLSolverC2Ev,b3,b3,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,__ZNSt3__16locale2id6__initEv,b3,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,_free,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,_freelocale__wrapper,b3,__ZNSt3__112__do_nothingEPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,___cxx_global_array_dtor120,b3,___cxx_global_array_dtor105,b3,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4
  ,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,__Z12key_callbackii,b4,__Z19cursor_pos_callbackii,b4,__Z25framebuffer_size_callbackii,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,b4,b4,b4,b4,b4,__ZNSt3__18ios_base4initEPv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b4,b4
  ,b4,b4,b4,__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,b4,b4,b4,__ZNSt3__18ios_base5clearEj,b4,b4,b4,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej,b4,b4,b4,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev,b4,__ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj,__ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj,b4,b4,b4,b4,b4,b4,__ZNSt3__14listIjNS_9allocatorIjEEE9push_backERKj,b4,_glAttachShader__wrapper,b4,b4,b4,b4,b4,b4
  ,_glGenBuffers__wrapper,_glBindBuffer__wrapper,b4,b4,_glGenVertexArrays__wrapper,b4,b4,b4,b4,__ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj,b4,b4,_glGenFramebuffers__wrapper,_glGenTextures__wrapper,_glBindFramebuffer__wrapper,b4,_glBindTexture__wrapper,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj,__ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE7reserveEj,__ZN2cl6MemoryC1ERKS0_,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b4,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8allocateEj,b4,b4,b4,__ZN2cl6vectorIjLj3EE9push_backERKj,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj,__ZNSt3__16locale5__impC2Ej,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_clGetProgramBuildInfo__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,_clCreateBuffer__wrapper,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_clCreateContextFromType__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,__ZNK2cl5Error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b6,b6,b6,b6,b6
  ,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,b6,b6,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b6,b6,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,__ZNKSt13runtime_error4whatEv
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__119__iostream_category4nameEv,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv
  ,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b6
  ,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv
  ,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b6
  ,b6,b6,b6,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_strlen__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,_glCreateShader__wrapper,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_fclose__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK2cl5Error3errEv,__ZN2cl8Platform3getEPNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE,__ZN2cl6detail7WrapperIP15_cl_platform_idEclEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK2cl6detail7WrapperIP11_cl_contextEclEv,b6,b6,b6
  ,b6,b6,__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv,b6,b6,__ZNK2cl6detail7WrapperIP11_cl_programEclEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b6,b6,__Znaj,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6
  ,__Znwj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_uselocale__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_vidd = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,__ZN27LorenzAttractorOpenCLSolver4stepEff,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN27LorenzAttractorOpenCLSolver6__stepEff,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_iiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b9,b9
  ,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b9,b9,b9,b9,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b9,b9,b9,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b9,b9,b9
  ,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b9
  ,b9,b9,b9,b9,b9,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b9,b9,b9,b9,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b9,b9,b9,b9,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b9,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b9,b9,__ZNKSt3__15ctypeIcE9do_narrowEcc,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__15ctypeIwE5do_isEtw,b9,b9,b9,b9,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b9
  ,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b9,b9,__ZNKSt3__15ctypeIwE9do_narrowEwc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_sn_write,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_memcmp,__ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,__ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,__ZNK2cl7Context7getInfoINSt3__16vectorINS_6DeviceENS2_9allocatorIS4_EEEEEEijPT_,b9,b9,b9,b9,b9,__ZN2cl6Kernel6setArgINS_6BufferEEEijT_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,_clCreateKernel__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_newlocale__wrapper,b9,b9,b9,b9,b9,b9,_vasprintf,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b9,b9,b9,b9,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_wcrtomb,b9,b9,_mbtowc,_mbrlen
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_do_read,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b10,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_viiiiid = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiiiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b12,b12,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b12,b12,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12];
  var FUNCTION_TABLE_viiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b13,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b13,b13,b13,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b13,b13,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b13,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b13,b13,b13,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b13,b13,b13,b13,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,_glVertexAttribPointer__wrapper,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi,b13,b13,__ZN2cl8BufferGLC1ERKNS_7ContextEyjPi,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b14,b14,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt
  ,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b14,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b14,b14,b14,b14,b14,b14
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b14,b14,b14,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN2cl7ContextC1EyPiPFvPKcPKvjPvES6_S1_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,__ZN2cl6BufferC1ERKNS_7ContextEyjPvPi,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b14,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b14,b14,b14,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiiiiid = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce
  ,b15,b15,b15,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_viiiiiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_glTexImage2D__wrapper,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16];
  var FUNCTION_TABLE_viiiiiiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b17,b17,b17,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b17,b17,b17,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b17,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17];
  var FUNCTION_TABLE_iii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b18,__ZNSt3__111__stdoutbufIwE8overflowEj,b18,b18
  ,b18,b18,b18,b18,__ZNSt3__110__stdinbufIwE9pbackfailEj,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b18,__ZNSt3__111__stdoutbufIcE8overflowEi,b18,b18,b18,b18,b18,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIcE10do_toupperEc,b18,__ZNKSt3__15ctypeIcE10do_tolowerEc,b18,__ZNKSt3__15ctypeIcE8do_widenEc,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIwE10do_toupperEw,b18,__ZNKSt3__15ctypeIwE10do_tolowerEw
  ,b18,__ZNKSt3__15ctypeIwE8do_widenEc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,_printf__wrapper,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi,b18,b18,b18,b18,b18,b18,__ZNKSt3__16locale9use_facetERNS0_2idE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE,b18,b18,b18,b18,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__16locale9has_facetERNS0_2idE,b18,b18,__ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN2cl7ContextaSERKS0_,b18,b18,b18,__ZN2cl7ProgramaSERKS0_,b18,b18,b18,__ZN2cl6KernelaSERKS0_,b18,__ZN2cl12CommandQueueaSERKS0_,b18,b18,__ZN2cl6BufferaSERKS0_,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN2cl6detailL10errHandlerEiPKc,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN2cl8PlatformaSERKS0_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_isxdigit_l,_isdigit_l,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b18,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b19,b19,b19,b19,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b19,b19,b19
  ,b19,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b19,b19,b19,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNK2cl7Program5buildERKNSt3__16vectorINS_6DeviceENS1_9allocatorIS3_EEEEPKcPFvP11_cl_programPvESD_,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_clGetContextInfo__wrapper,b19,b19,b19,b19,b19,b19,b19,b19
  ,_clCreateFromGLBuffer__wrapper,b19,b19,_clCreateCommandQueue__wrapper,b19,b19,b19,b19,b19,_clCreateProgramWithSource__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_wcsnrtombs,b19,_mbsnrtowcs,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19];
  var FUNCTION_TABLE_diii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20];
  var FUNCTION_TABLE_i = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,_glewInit__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,__ZN6global3parEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,_glCreateProgram__wrapper,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN11Application3getEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___ctype_b_loc__wrapper,b21,b21,__ZNSt3__16locale8__globalEv,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21];
  var FUNCTION_TABLE_iiiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_glfwOpenWindow__wrapper,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22];
  var FUNCTION_TABLE_viii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN19LorenzAttractorDemo12resizeWindowEii,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__114error_category23default_error_conditionEi,b23,b23,__ZNKSt3__119__iostream_category7messageEi
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,__ZN5error8throw_exEPKcS1_i,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b23,b23,b23,__ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_,__ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE,b23,b23,b23,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,___cxa_throw__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,_glGetShaderiv__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_glBindAttribLocation__wrapper,b23,_glGetProgramiv__wrapper,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,b23,b23,__ZNK11Application13getWindowSizeERiS0_,b23,b23,b23,b23,b23,b23,_glTexParameteri__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK2cl7Context7getInfoILi4225EEENS_6detail12param_traitsINS2_15cl_context_infoEXT_EE10param_typeEPi,__ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC1EjRKS4_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN2cl5ErrorC1EiPKc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b23,b23,b23,b23,b23,b23
  ,b23,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,b23,__ZNSt3__111__call_onceERVmPvPFvS2_E,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23];
  var FUNCTION_TABLE_v = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,___cxa_pure_virtual__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_glfwTerminate__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__Z24emscripten_loop_callbackv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_end_catch__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_rethrow__wrapper,b24
  ,b24,b24,b24,b24,b24,b24,__ZSt17__throw_bad_allocv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24];
  var FUNCTION_TABLE_iiiiiiiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_
  ,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25];
  var FUNCTION_TABLE_iiiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b26,b26,b26
  ,b26,b26,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK2cl7Program12getBuildInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEiRKNS_6DeviceEjPT_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b26,b26,b26,b26,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b26,b26,b26,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b26,b26,b26,b26,b26,b26,b26
  ,b26,_mbsrtowcs,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,_catgets__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,_mbrtowc,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26];
  var FUNCTION_TABLE_viiii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b27,b27,b27,b27,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b27,b27,b27,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b27,b27,b27,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b27,b27,b27,b27,b27,__ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,_glViewport__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,_glShaderSource__wrapper,b27,b27,b27,b27,_glGetShaderInfoLog__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,_glGetProgramInfoLog__wrapper,b27,b27
  ,b27,b27,b27,_glBufferData__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,_glBlendFuncSeparate__wrapper,b27,_glBufferSubData__wrapper,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN2cl7ProgramC1ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi,b27,b27,__ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi,__ZN2cl6KernelC1ERKNS_7ProgramEPKcPi,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27];

    return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _rand_r: _rand_r, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _llvm_ctlz_i32: _llvm_ctlz_i32, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _rand: _rand, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a35: __GLOBAL__I_a35, __GLOBAL__I_a47: __GLOBAL__I_a47, __GLOBAL__I_a126: __GLOBAL__I_a126, __GLOBAL__I_a154: __GLOBAL__I_a154, __GLOBAL__I_a268: __GLOBAL__I_a268, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiiiiiiii": nullFunc_iiiiiiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_clReleaseProgram": _clReleaseProgram, "_fread": _fread, "__ZSt9terminatev": __ZSt9terminatev, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glfwInit": _glfwInit, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "_clEnqueueNDRangeKernel": _clEnqueueNDRangeKernel, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_clCreateProgramWithSource": _clCreateProgramWithSource, "_glfwSwapBuffers": _glfwSwapBuffers, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "__addDays": __addDays, "_fsync": _fsync, "_catgets": _catgets, "_ceilf": _ceilf, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "_sysconf": _sysconf, "_clRetainKernel": _clRetainKernel, "_close": _close, "_tanf": _tanf, "_fprintf": _fprintf, "_glfwTerminate": _glfwTerminate, "_clCreateCommandQueue": _clCreateCommandQueue, "_clCreateContextFromType": _clCreateContextFromType, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_clEnqueueReleaseGLObjects": _clEnqueueReleaseGLObjects, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_glTexParameteri": _glTexParameteri, "_glVertexAttribPointer": _glVertexAttribPointer, "_send": _send, "_clReleaseKernel": _clReleaseKernel, "_glGetProgramInfoLog": _glGetProgramInfoLog, "___cxa_is_number_type": ___cxa_is_number_type, "_glfwOpenWindow": _glfwOpenWindow, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_clGetProgramBuildInfo": _clGetProgramBuildInfo, "___cxa_guard_release": ___cxa_guard_release, "_glBufferSubData": _glBufferSubData, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_clReleaseCommandQueue": _clReleaseCommandQueue, "_glGetString": _glGetString, "_fopen": _fopen, "_glCreateShader": _glCreateShader, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "_clCreateKernel": _clCreateKernel, "_clSetKernelArg": _clSetKernelArg, "_fwrite": _fwrite, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_glGenFramebuffers": _glGenFramebuffers, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "_glfwPollEvents": _glfwPollEvents, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "___cxa_allocate_exception": ___cxa_allocate_exception, "_sbrk": _sbrk, "_glBlendFuncSeparate": _glBlendFuncSeparate, "_glfwSetMousePosCallback": _glfwSetMousePosCallback, "_pwrite": _pwrite, "_glFinish": _glFinish, "_open": _open, "_uselocale": _uselocale, "_glBindTexture": _glBindTexture, "_glUniform1f": _glUniform1f, "_clReleaseMemObject": _clReleaseMemObject, "___cxa_end_catch": ___cxa_end_catch, "_clGetPlatformIDs": _clGetPlatformIDs, "_glUniform1i": _glUniform1i, "_strftime": _strftime, "_glDrawArrays": _glDrawArrays, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_clFinish": _clFinish, "_fseek": _fseek, "_clEnqueueAcquireGLObjects": _clEnqueueAcquireGLObjects, "_fclose": _fclose, "_sqrtf": _sqrtf, "_glActiveTexture": _glActiveTexture, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_clCreateBuffer": _clCreateBuffer, "_recv": _recv, "_fgetc": _fgetc, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glBindVertexArray": _glBindVertexArray, "_clBuildProgram": _clBuildProgram, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_glewInit": _glewInit, "_clGetContextInfo": _clGetContextInfo, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_cond_wait": _pthread_cond_wait, "_glDeleteShader": _glDeleteShader, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwGetTime": _glfwGetTime, "_clReleaseContext": _clReleaseContext, "_clCreateFromGLBuffer": _clCreateFromGLBuffer, "_glGenVertexArrays": _glGenVertexArrays, "___gxx_personality_v0": ___gxx_personality_v0, "_glfwGetWindowSize": _glfwGetWindowSize, "_glfwCloseWindow": _glfwCloseWindow, "_ungetc": _ungetc, "_clEnqueueWriteBuffer": _clEnqueueWriteBuffer, "_clRetainContext": _clRetainContext, "_glLinkProgram": _glLinkProgram, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "_glGetShaderiv": _glGetShaderiv, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_glGetUniformLocation": _glGetUniformLocation, "_strerror": _strerror, "_clRetainCommandQueue": _clRetainCommandQueue, "_glClear": _glClear, "_fileno": _fileno, "_read": _read, "__exit": __exit, "___ctype_toupper_loc": ___ctype_toupper_loc, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_clRetainProgram": _clRetainProgram, "_fflush": _fflush, "_clEnqueueReadBuffer": _clEnqueueReadBuffer, "___errno_location": ___errno_location, "_copysign": _copysign, "___cxa_throw": ___cxa_throw, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "__formatString": __formatString, "_atexit": _atexit, "_glfwSetWindowTitle": _glfwSetWindowTitle, "_clRetainMemObject": _clRetainMemObject, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "__ZTVSt9exception": __ZTVSt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _llvm_ctlz_i32 = Module["_llvm_ctlz_i32"] = asm["_llvm_ctlz_i32"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _rand = Module["_rand"] = asm["_rand"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a35 = Module["__GLOBAL__I_a35"] = asm["__GLOBAL__I_a35"];
var __GLOBAL__I_a47 = Module["__GLOBAL__I_a47"] = asm["__GLOBAL__I_a47"];
var __GLOBAL__I_a126 = Module["__GLOBAL__I_a126"] = asm["__GLOBAL__I_a126"];
var __GLOBAL__I_a154 = Module["__GLOBAL__I_a154"] = asm["__GLOBAL__I_a154"];
var __GLOBAL__I_a268 = Module["__GLOBAL__I_a268"] = asm["__GLOBAL__I_a268"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



