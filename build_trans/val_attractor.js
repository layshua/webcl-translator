
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    function fetchRemotePackage(packageName, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        if (event.loaded && event.total) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: event.total
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage('val_attractor.data', function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'kernel', true, true);
Module['FS_createPath']('/', 'shader', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 16857, 0, 0).open('GET', '/kernel/lorenz.cl');
    new DataRequest(16857, 21540, 0, 0).open('GET', '/shader/lorenz.frag');
    new DataRequest(21540, 23048, 0, 0).open('GET', '/shader/lorenz.vert');

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '../build/val_attractor.data';
    var REMOTE_PACKAGE_NAME = 'val_attractor.data';
    var PACKAGE_UUID = '4ca508ce-cc23-481a-a908-362509ae13cb';
  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/kernel/lorenz.cl"].onload();
          DataRequest.prototype.requests["/shader/lorenz.frag"].onload();
          DataRequest.prototype.requests["/shader/lorenz.vert"].onload();
          Module['removeRunDependency']('datafile_../build/val_attractor.data');

    };
    Module['addRunDependency']('datafile_../build/val_attractor.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}










//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 367001600;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 18192;

var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;

/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a114() } },{ func: function() { __GLOBAL__I_a141() } },{ func: function() { __GLOBAL__I_a257() } });











































































































































































































































































































































































































































































var ___fsmu8;
var ___dso_handle;
var ___dso_handle=___dso_handle=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
































var __ZTVSt9exception;
























































































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,176,50,0,0,104,3,0,0,90,3,0,0,194,0,0,0,214,1,0,0,240,0,0,0,124,0,0,0,32,1,0,0,66,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,192,50,0,0,104,3,0,0,8,1,0,0,194,0,0,0,214,1,0,0,240,0,0,0,144,2,0,0,190,0,0,0,234,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;










































































































































































































var __ZTISt9exception;



















































































































































































































































































































































var __ZN11ApplicationC1Ev;
var __ZN11ApplicationD1Ev;
var __ZN7gltools15ShaderContainerD1Ev;
var __ZN19LorenzAttractorDemoC1Ev;
var __ZN19LorenzAttractorDemoD1Ev;
var __ZN27LorenzAttractorOpenCLSolverC1Ev;
var __ZN27LorenzAttractorOpenCLSolverD1Ev;
var __ZNSt13runtime_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE;
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt14overflow_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,107,101,114,110,101,108,83,116,101,112,0,0,0,0,0,0,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,114,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,79,112,101,110,67,76,32,98,117,105,108,100,32,102,97,105,108,101,100,58,0,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,71,76,83,76,32,112,114,111,103,114,97,109,32,98,117,105,108,100,32,102,97,105,108,101,100,0,0,0,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,79,112,101,110,67,76,32,101,114,114,111,114,44,32,0,0,97,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,67,80,85,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,107,101,114,110,101,108,32,102,105,108,101,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,67,80,85,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,71,80,85,0,0,0,0,0,107,101,114,110,101,108,70,105,108,101,110,97,109,101,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,67,111,108,111,114,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,71,80,85,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,110,111,32,79,112,101,110,67,76,32,100,101,118,105,99,101,115,32,102,111,117,110,100,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,118,101,114,116,101,120,80,111,115,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,97,114,97,109,101,116,101,114,32,100,101,116,101,99,116,32,37,115,32,100,101,118,105,99,101,10,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,91,37,115,93,32,80,97,114,116,105,99,108,101,115,58,32,37,100,32,32,68,105,115,112,108,97,121,58,32,37,100,32,102,112,115,32,40,37,115,41,10,0,0,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,0,0,0,0,0,0,0,0,115,114,99,47,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,68,101,109,111,46,99,112,112,0,0,0,0,0,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,70,114,111,109,84,121,112,101,0,99,108,67,114,101,97,116,101,80,114,111,103,114,97,109,87,105,116,104,83,111,117,114,99,101,0,0,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,115,104,97,100,101,114,32,0,0,0,0,0,0,0,99,108,66,117,105,108,100,80,114,111,103,114,97,109,0,0,99,108,67,114,101,97,116,101,75,101,114,110,101,108,0,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,0,0,0,0,105,110,116,101,114,111,112,0,99,108,67,114,101,97,116,101,70,114,111,109,71,76,66,117,102,102,101,114,0,0,0,0,99,108,67,114,101,97,116,101,66,117,102,102,101,114,0,0,117,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,69,87,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,99,108,69,110,113,117,101,117,101,65,99,113,117,105,114,101,71,76,79,98,106,101,99,116,115,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,115,104,97,100,101,114,32,102,105,108,101,32,0,0,0,0,0,110,111,32,79,112,101,110,67,76,32,112,108,97,116,102,111,114,109,115,32,102,111,117,110,100,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,78,68,82,97,110,103,101,75,101,114,110,101,108,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,82,101,108,101,97,115,101,71,76,79,98,106,101,99,116,115,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,71,76,83,76,32,112,114,111,103,114,97,109,0,0,0,99,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,82,101,97,100,66,117,102,102,101,114,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,83,104,97,100,101,114,32,99,111,109,112,105,108,101,32,108,111,103,58,32,0,0,0,0,99,108,71,101,116,67,111,110,116,101,120,116,73,110,102,111,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,103,112,117,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,32,105,110,32,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,71,76,70,87,32,119,105,110,100,111,119,0,0,0,0,115,114,99,47,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,79,112,101,110,67,76,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,102,97,108,115,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,103,101,111,109,101,116,114,121,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,116,114,117,101,0,0,0,0,58,32,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,115,104,97,100,101,114,32,111,98,106,101,99,116,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,100,101,109,111,0,0,0,46,47,103,108,109,47,99,111,114,101,47,116,121,112,101,95,109,97,116,52,120,52,46,105,110,108,0,0,0,0,0,0,108,105,102,101,116,105,109,101,0,0,0,0,0,0,0,0,46,47,103,108,109,47,99,111,114,101,47,116,121,112,101,95,118,101,99,52,46,105,110,108,0,0,0,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,115,111,108,118,101,114,0,99,112,117,0,0,0,0,0,99,108,71,101,116,80,114,111,103,114,97,109,66,117,105,108,100,73,110,102,111,0,0,0,99,111,108,111,114,0,0,0,105,32,60,32,116,104,105,115,45,62,108,101,110,103,116,104,40,41,0,0,0,0,0,0,112,111,115,0,0,0,0,0,119,105,110,100,111,119,84,105,116,108,101,0,0,0,0,0,119,105,110,100,111,119,72,101,105,103,104,116,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,119,105,110,100,111,119,87,105,100,116,104,0,0,0,0,0,32,0,0,0,0,0,0,0,97,43,98,0,0,0,0,0,101,109,112,116,121,0,0,0,107,101,114,110,101,108,47,108,111,114,101,110,122,46,99,108,0,0,0,0,0,0,0,0,116,97,115,107,0,0,0,0,119,43,98,0,0,0,0,0,110,97,110,0,0,0,0,0,67,0,0,0,0,0,0,0,99,108,83,101,116,75,101,114,110,101,108,65,114,103,0,0,107,101,114,110,101,108,70,105,108,101,110,97,109,101,0,0,77,86,80,0,0,0,0,0,114,43,98,0,0,0,0,0,118,101,99,116,111,114,0,0,108,105,102,101,116,105,109,101,0,0,0,0,0,0,0,0,115,104,97,100,101,114,47,108,111,114,101,110,122,46,102,114,97,103,0,0,0,0,0,0,102,114,97,103,109,101,110,116,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,116,105,109,101,0,0,0,0,114,98,0,0,0,0,0,0,37,46,48,76,102,0,0,0,99,111,108,111,114,0,0,0,102,114,97,103,109,101,110,116,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,112,111,115,0,0,0,0,0,118,98,111,67,111,108,111,114,0,0,0,0,0,0,0,0,97,98,0,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,115,114,99,47,103,108,116,111,111,108,115,46,99,112,112,0,115,104,97,100,101,114,47,108,111,114,101,110,122,46,118,101,114,116,0,0,0,0,0,0,118,98,111,67,111,108,111,114,0,0,0,0,0,0,0,0,118,98,111,80,111,115,0,0,119,98,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,37,76,102,0,0,0,0,0,84,104,117,0,0,0,0,0,100,101,109,111,32,109,117,115,116,32,98,101,32,99,114,101,97,116,101,32,98,101,102,111,114,101,32,115,111,108,118,101,114,0,0,0,0,0,0,0,69,82,82,79,82,58,32,0,87,101,100,0,0,0,0,0,44,32,108,105,110,101,32,0,84,117,101,0,0,0,0,0,118,101,114,116,101,120,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,0,0,118,98,111,80,111,115,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,97,43,0,0,0,0,0,0,115,114,99,47,68,101,109,111,46,99,112,112,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,69,82,82,79,82,58,32,117,110,107,110,111,119,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,99,111,112,121,105,110,103,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,99,111,108,111,114,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,119,43,0,0,0,0,0,0,119,105,110,100,111,119,84,105,116,108,101,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,115,114,99,47,83,111,108,118,101,114,46,99,112,112,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,109,111,32,65,84,0,69,82,82,79,82,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,112,112,108,105,99,97,116,105,111,110,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,97,116,116,97,99,104,101,100,0,0,0,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,112,111,115,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,115,114,99,47,65,112,112,108,105,99,97,116,105,111,110,46,99,112,112,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,56,44,0,0,84,0,0,0,122,1,0,0,222,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,44,0,0,114,2,0,0,250,1,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,44,0,0,224,0,0,0,48,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,44,0,0,224,0,0,0,132,3,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,44,0,0,44,1,0,0,18,0,0,0,206,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,44,0,0,44,1,0,0,46,0,0,0,206,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,44,0,0,2,2,0,0,10,1,0,0,144,0,0,0,46,2,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,44,0,0,118,3,0,0,60,2,0,0,144,0,0,0,66,3,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,44,0,0,248,1,0,0,64,2,0,0,144,0,0,0,50,2,0,0,100,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,124,3,0,0,192,1,0,0,144,0,0,0,30,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,45,0,0,204,2,0,0,132,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,45,0,0,110,3,0,0,40,1,0,0,144,0,0,0,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,45,0,0,246,1,0,0,224,1,0,0,144,0,0,0,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,45,0,0,110,0,0,0,106,1,0,0,144,0,0,0,6,3,0,0,24,0,0,0,66,2,0,0,32,0,0,0,238,0,0,0,8,3,0,0,16,1,0,0,248,255,255,255,224,45,0,0,138,0,0,0,56,0,0,0,216,0,0,0,96,0,0,0,10,0,0,0,202,0,0,0,40,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,46,0,0,88,3,0,0,18,3,0,0,144,0,0,0,134,0,0,0,160,0,0,0,42,3,0,0,208,1,0,0,200,0,0,0,16,0,0,0,234,2,0,0,248,255,255,255,8,46,0,0,174,1,0,0,172,2,0,0,238,2,0,0,26,3,0,0,126,2,0,0,34,1,0,0,80,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,46,0,0,250,0,0,0,74,2,0,0,144,0,0,0,56,1,0,0,14,1,0,0,142,0,0,0,178,1,0,0,14,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,46,0,0,60,1,0,0,210,0,0,0,144,0,0,0,26,1,0,0,58,2,0,0,192,0,0,0,38,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,46,0,0,92,3,0,0,2,0,0,0,144,0,0,0,218,1,0,0,112,3,0,0,148,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,46,0,0,136,0,0,0,12,0,0,0,144,0,0,0,246,0,0,0,248,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,46,0,0,252,2,0,0,116,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,46,0,0,78,0,0,0,190,1,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,46,0,0,14,0,0,0,8,2,0,0,144,0,0,0,122,0,0,0,108,0,0,0,100,0,0,0,106,0,0,0,98,0,0,0,118,0,0,0,116,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,46,0,0,52,1,0,0,42,0,0,0,144,0,0,0,106,2,0,0,110,2,0,0,96,2,0,0,108,2,0,0,50,1,0,0,100,2,0,0,98,2,0,0,12,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,46,0,0,112,0,0,0,58,0,0,0,144,0,0,0,184,2,0,0,180,2,0,0,170,2,0,0,174,2,0,0,56,2,0,0,178,2,0,0,168,2,0,0,192,2,0,0,188,2,0,0,186,2,0,0,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,47,0,0,164,0,0,0,4,0,0,0,144,0,0,0,28,3,0,0,64,3,0,0,58,3,0,0,60,3,0,0,38,3,0,0,62,3,0,0,56,3,0,0,72,3,0,0,70,3,0,0,68,3,0,0,176,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,47,0,0,236,0,0,0,36,1,0,0,144,0,0,0,158,1,0,0,92,2,0,0,108,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,47,0,0,74,0,0,0,16,2,0,0,144,0,0,0,86,2,0,0,218,2,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,47,0,0,26,0,0,0,54,2,0,0,144,0,0,0,94,0,0,0,40,2,0,0,34,2,0,0,4,3,0,0,158,2,0,0,248,2,0,0,222,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,47,0,0,24,2,0,0,170,1,0,0,144,0,0,0,46,3,0,0,116,3,0,0,120,2,0,0,62,1,0,0,54,0,0,0,124,2,0,0,104,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,47,0,0,24,2,0,0,6,1,0,0,144,0,0,0,42,1,0,0,132,0,0,0,22,1,0,0,146,2,0,0,118,1,0,0,240,1,0,0,74,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,47,0,0,24,2,0,0,70,1,0,0,144,0,0,0,94,2,0,0,10,2,0,0,216,2,0,0,186,0,0,0,210,1,0,0,188,1,0,0,122,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,47,0,0,24,2,0,0,92,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,47,0,0,176,0,0,0,148,1,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,47,0,0,24,2,0,0,0,1,0,0,144,0,0,0,198,1,0,0,222,0,0,0,142,1,0,0,106,3,0,0,226,0,0,0,130,2,0,0,78,2,0,0,68,0,0,0,150,0,0,0,242,2,0,0,84,1,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,48,0,0,130,3,0,0,102,0,0,0,144,0,0,0,180,0,0,0,62,0,0,0,164,1,0,0,230,2,0,0,172,0,0,0,168,1,0,0,252,1,0,0,242,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,56,48,0,0,190,2,0,0,112,2,0,0,200,255,255,255,200,255,255,255,56,48,0,0,86,0,0,0,76,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,48,0,0,214,0,0,0,10,3,0,0,236,1,0,0,140,2,0,0,130,1,0,0,220,2,0,0,208,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,88,48,0,0,142,2,0,0,126,3,0,0,56,0,0,0,248,255,255,255,88,48,0,0,140,0,0,0,188,0,0,0,192,255,255,255,192,255,255,255,88,48,0,0,134,2,0,0,152,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,48,0,0,24,2,0,0,12,1,0,0,144,0,0,0,94,2,0,0,10,2,0,0,216,2,0,0,186,0,0,0,210,1,0,0,188,1,0,0,122,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,48,0,0,24,2,0,0,254,1,0,0,144,0,0,0,94,2,0,0,10,2,0,0,216,2,0,0,186,0,0,0,210,1,0,0,188,1,0,0,122,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,48,0,0,146,0,0,0,250,2,0,0,76,2,0,0,30,3,0,0,116,2,0,0,130,0,0,0,58,1,0,0,62,2,0,0,160,1,0,0,16,3,0,0,70,0,0,0,194,2,0,0,136,1,0,0,18,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,48,0,0,152,1,0,0,48,3,0,0,232,0,0,0,216,1,0,0,46,1,0,0,138,2,0,0,80,2,0,0,162,2,0,0,198,2,0,0,178,0,0,0,166,0,0,0,156,0,0,0,22,0,0,0,68,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,48,0,0,20,0,0,0,124,1,0,0,76,2,0,0,30,3,0,0,24,3,0,0,88,2,0,0,58,1,0,0,62,2,0,0,160,1,0,0,36,0,0,0,70,0,0,0,50,3,0,0,136,1,0,0,32,2,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,208,48,0,0,232,1,0,0,22,2,0,0,148,255,255,255,148,255,255,255,208,48,0,0,88,1,0,0,80,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,49,0,0,128,0,0,0,212,2,0,0,252,255,255,255,252,255,255,255,0,49,0,0,202,1,0,0,150,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,24,49,0,0,254,2,0,0,52,3,0,0,252,255,255,255,252,255,255,255,24,49,0,0,102,1,0,0,132,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,48,49,0,0,20,1,0,0,134,3,0,0,248,255,255,255,248,255,255,255,48,49,0,0,26,2,0,0,44,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,72,49,0,0,100,1,0,0,166,2,0,0,248,255,255,255,248,255,255,255,72,49,0,0,182,1,0,0,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,49,0,0,232,2,0,0,196,0,0,0,220,1,0,0,90,2,0,0,146,1,0,0,158,0,0,0,54,1,0,0,62,2,0,0,160,1,0,0,102,2,0,0,70,0,0,0,138,1,0,0,136,1,0,0,36,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,49,0,0,156,2,0,0,28,2,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,49,0,0,94,3,0,0,22,3,0,0,218,0,0,0,216,1,0,0,46,1,0,0,138,2,0,0,92,1,0,0,162,2,0,0,198,2,0,0,178,0,0,0,166,0,0,0,156,0,0,0,182,2,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,49,0,0,226,1,0,0,202,2,0,0,112,1,0,0,30,3,0,0,24,3,0,0,88,2,0,0,82,2,0,0,62,2,0,0,160,1,0,0,36,0,0,0,70,0,0,0,50,3,0,0,76,3,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,49,0,0,198,0,0,0,200,1,0,0,144,0,0,0,172,1,0,0,244,2,0,0,110,1,0,0,108,3,0,0,66,0,0,0,72,1,0,0,68,1,0,0,252,0,0,0,166,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,49,0,0,96,1,0,0,174,0,0,0,144,0,0,0,214,2,0,0,226,2,0,0,160,2,0,0,14,3,0,0,34,3,0,0,30,1,0,0,224,2,0,0,18,2,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,50,0,0,20,3,0,0,120,1,0,0,144,0,0,0,120,0,0,0,114,1,0,0,88,0,0,0,228,1,0,0,120,3,0,0,20,2,0,0,122,2,0,0,42,2,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,50,0,0,244,0,0,0,6,2,0,0,144,0,0,0,164,2,0,0,196,2,0,0,64,1,0,0,240,2,0,0,38,1,0,0,234,0,0,0,238,1,0,0,210,2,0,0,200,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,50,0,0,24,1,0,0,38,0,0,0,156,1,0,0,216,1,0,0,46,1,0,0,138,2,0,0,80,2,0,0,162,2,0,0,198,2,0,0,186,1,0,0,36,2,0,0,206,0,0,0,22,0,0,0,68,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,50,0,0,30,0,0,0,0,3,0,0,154,2,0,0,30,3,0,0,24,3,0,0,88,2,0,0,58,1,0,0,62,2,0,0,160,1,0,0,136,2,0,0,154,0,0,0,34,0,0,0,136,1,0,0,32,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,50,0,0,154,1,0,0,206,1,0,0,86,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,50,0,0,104,3,0,0,118,2,0,0,194,0,0,0,214,1,0,0,240,0,0,0,82,0,0,0,246,2,0,0,74,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,50,0,0,182,0,0,0,180,1,0,0,72,2,0,0,72,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,50,0,0,184,1,0,0,244,1,0,0,72,2,0,0,72,2,0,0,72,2,0,0,72,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,50,0,0,84,3,0,0,150,2,0,0,102,3,0,0,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,144,1,0,0,98,1,0,0,208,0,0,0,44,0,0,0,236,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,51,0,0,44,2,0,0,72,0,0,0,0,0,0,0,0,0,0,0,20,24,0,0,36,51,0,0,56,51,0,0,40,24,0,0,116,24,0,0,116,51,0,0,180,51,0,0,200,51,0,0,76,51,0,0,96,51,0,0,156,51,0,0,136,51,0,0,156,24,0,0,136,24,0,0,4,26,0,0,220,51,0,0,240,51,0,0,24,26,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,50,99,108,53,69,114,114,111,114,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,54,83,111,108,118,101,114,0,52,68,101,109,111,0,0,0,50,55,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,79,112,101,110,67,76,83,111,108,118,101,114,0,0,0,49,57,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,68,101,109,111,0,0,0,49,49,65,112,112,108,105,99,97,116,105,111,110,0,0,0,0,0,0,0,176,30,0,0,0,0,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,30,0,0,104,44,0,0,0,0,0,0,0,0,0,0,248,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,31,0,0,136,44,0,0,0,0,0,0,0,0,0,0,40,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,31,0,0,152,29,0,0,80,31,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,184,49,0,0,0,0,0,0,152,29,0,0,152,31,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,192,49,0,0,0,0,0,0,152,29,0,0,224,31,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,200,49,0,0,0,0,0,0,152,29,0,0,40,32,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,208,49,0,0,0,0,0,0,0,0,0,0,112,32,0,0,144,46,0,0,0,0,0,0,0,0,0,0,160,32,0,0,144,46,0,0,0,0,0,0,152,29,0,0,208,32,0,0,0,0,0,0,1,0,0,0,232,48,0,0,0,0,0,0,152,29,0,0,232,32,0,0,0,0,0,0,1,0,0,0,232,48,0,0,0,0,0,0,152,29,0,0,0,33,0,0,0,0,0,0,1,0,0,0,240,48,0,0,0,0,0,0,152,29,0,0,24,33,0,0,0,0,0,0,1,0,0,0,240,48,0,0,0,0,0,0,152,29,0,0,48,33,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,104,50,0,0,0,8,0,0,152,29,0,0,120,33,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,104,50,0,0,0,8,0,0,152,29,0,0,192,33,0,0,0,0,0,0,3,0,0,0,200,47,0,0,2,0,0,0,152,44,0,0,2,0,0,0,40,48,0,0,0,8,0,0,152,29,0,0,8,34,0,0,0,0,0,0,3,0,0,0,200,47,0,0,2,0,0,0,152,44,0,0,2,0,0,0,48,48,0,0,0,8,0,0,0,0,0,0,80,34,0,0,200,47,0,0,0,0,0,0,0,0,0,0,104,34,0,0,200,47,0,0,0,0,0,0,152,29,0,0,128,34,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,248,48,0,0,2,0,0,0,152,29,0,0,152,34,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,248,48,0,0,2,0,0,0,0,0,0,0,176,34,0,0,0,0,0,0,200,34,0,0,112,49,0,0,0,0,0,0,152,29,0,0,232,34,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,64,45,0,0,0,0,0,0,152,29,0,0,48,35,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,88,45,0,0,0,0,0,0,152,29,0,0,120,35,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,112,45,0,0,0,0,0,0,152,29,0,0,192,35,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,136,45,0,0,0,0,0,0,0,0,0,0,8,36,0,0,200,47,0,0,0,0,0,0,0,0,0,0,32,36,0,0,200,47,0,0,0,0,0,0,152,29,0,0,56,36,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,128,49,0,0,2,0,0,0,152,29,0,0,96,36,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,128,49,0,0,2,0,0,0,152,29,0,0,136,36,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,128,49,0,0,2,0,0,0,152,29,0,0,176,36,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,128,49,0,0,2,0,0,0,0,0,0,0,216,36,0,0,224,48,0,0,0,0,0,0,0,0,0,0,240,36,0,0,200,47,0,0,0,0,0,0,152,29,0,0,8,37,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,96,50,0,0,2,0,0,0,152,29,0,0,32,37,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,96,50,0,0,2,0,0,0,0,0,0,0,56,37,0,0,0,0,0,0,96,37,0,0,0,0,0,0,136,37,0,0,24,49,0,0,0,0,0,0,0,0,0,0,208,37,0,0,136,49,0,0,0,0,0,0,0,0,0,0,240,37,0,0,176,48,0,0,0,0,0,0,0,0,0,0,56,38,0,0,168,47,0,0,0,0,0,0,0,0,0,0,96,38,0,0,168,47,0,0,0,0,0,0,0,0,0,0,136,38,0,0,160,48,0,0,0,0,0,0,0,0,0,0,208,38,0,0,0,0,0,0,8,39,0,0,0,0,0,0,64,39,0,0,152,29,0,0,96,39,0,0,3,0,0,0,2,0,0,0,72,49,0,0,2,0,0,0,24,49,0,0,2,8,0,0,0,0,0,0,144,39,0,0,72,49,0,0,0,0,0,0,0,0,0,0,192,39,0,0,0,0,0,0,224,39,0,0,0,0,0,0,0,40,0,0,0,0,0,0,32,40,0,0,152,29,0,0,56,40,0,0,0,0,0,0,1,0,0,0,32,45,0,0,3,244,255,255,152,29,0,0,104,40,0,0,0,0,0,0,1,0,0,0,48,45,0,0,3,244,255,255,152,29,0,0,152,40,0,0,0,0,0,0,1,0,0,0,32,45,0,0,3,244,255,255,152,29,0,0,200,40,0,0,0,0,0,0,1,0,0,0,48,45,0,0,3,244,255,255,0,0,0,0,248,40,0,0,160,48,0,0,0,0,0,0,0,0,0,0,40,41,0,0,104,44,0,0,0,0,0,0,0,0,0,0,64,41,0,0,0,0,0,0,88,41,0,0,168,48,0,0,0,0,0,0,0,0,0,0,112,41,0,0,152,48,0,0,0,0,0,0,0,0,0,0,144,41,0,0,160,48,0,0,0,0,0,0,0,0,0,0,176,41,0,0,0,0,0,0,208,41,0,0,0,0,0,0,240,41,0,0,0,0,0,0,16,42,0,0,152,29,0,0,48,42,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,88,50,0,0,2,0,0,0,152,29,0,0,80,42,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,88,50,0,0,2,0,0,0,152,29,0,0,112,42,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,88,50,0,0,2,0,0,0,152,29,0,0,144,42,0,0,0,0,0,0,2,0,0,0,200,47,0,0,2,0,0,0,88,50,0,0,2,0,0,0,0,0,0,0,176,42,0,0,0,0,0,0,200,42,0,0,0,0,0,0,224,42,0,0,0,0,0,0,248,42,0,0,152,48,0,0,0,0,0,0,0,0,0,0,16,43,0,0,160,48,0,0,0,0,0,0,0,0,0,0,40,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,43,0,0,192,50,0,0,0,0,0,0,0,0,0,0,96,43,0,0,192,50,0,0,0,0,0,0,0,0,0,0,136,43,0,0,208,50,0,0,0,0,0,0,0,0,0,0,176,43,0,0,48,44,0,0,0,0,0,0,0,0,0,0,216,43,0,0,0,0,0,0,224,43,0,0,0,0,0,0,232,43,0,0,224,50,0,0,0,0,0,0,0,0,0,0,8,44,0,0,232,50,0,0,0,0,0,0,0,0,0,0,32,44,0,0,56,0,0,0,0,0,0,0,24,49,0,0,254,2,0,0,52,3,0,0,200,255,255,255,200,255,255,255,24,49,0,0,102,1,0,0,132,2,0,0,56,0,0,0,0,0,0,0,24,49,0,0,254,2,0,0,52,3,0,0,200,255,255,255,200,255,255,255,24,49,0,0,102,1,0,0,132,2,0,0,64,0,0,0,0,0,0,0,176,48,0,0,114,3,0,0,48,2,0,0,56,0,0,0,248,255,255,255,176,48,0,0,78,3,0,0,12,3,0,0,192,255,255,255,192,255,255,255,176,48,0,0,194,1,0,0,78,1,0,0,0,0,0,0,64,0,0,0,0,0,0,0,72,49,0,0,100,1,0,0,166,2,0,0,192,255,255,255,192,255,255,255,72,49,0,0,182,1,0,0,162,0,0,0,108,0,0,0,0,0,0,0,72,49,0,0,100,1,0,0,166,2,0,0,148,255,255,255,148,255,255,255,72,49,0,0,182,1,0,0,162,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
function runPostSets() {

HEAP32[((11312 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11320 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11328 )>>2)]=__ZTISt9exception;
HEAP32[((11336 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11344 )>>2)]=__ZTISt9exception;
HEAP32[((11352 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11368 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11376 )>>2)]=__ZTISt9exception;
HEAP32[((11384 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11400 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11408 )>>2)]=__ZTISt9exception;
HEAP32[((11416 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11552 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11568 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11824 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11840 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11920 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11928 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12072 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12088 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12232 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12248 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12328 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12336 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12344 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12360 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12376 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12392 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12408 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12424 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12440 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12448 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12456 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12496 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12512 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12520 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12528 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12536 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12656 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12672 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12680 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12696 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12712 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12728 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12736 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12744 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12752 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12888 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12896 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12904 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12912 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12928 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12944 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12952 )>>2)]=__ZTISt9exception;
HEAP32[((12960 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12976 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12992 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13008 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13024 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13032 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13040 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13056 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13072 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
  
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
  
        if (!total) {
          // early out
          return callback(null);
        }
  
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
  
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
  
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
  
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat, node;
  
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
  
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
  
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
  
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
  
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          FS.FSNode.prototype = {};
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
  
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};function _glfwCloseWindow() {
      if (GLFW.closeFunc) {
        Runtime.dynCall('v', GLFW.closeFunc, []);
      }
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],clientBuffers:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.maxVertexAttribs; ++i) {
          var cb = GL.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, buf);
          GLctx.bufferSubData(GLctx.ARRAY_BUFFER,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          GLctx.vertexAttribPointer(i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, GL.buffers[GL.currArrayBuffer]);
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
        for (var i = 0; i < GL.maxVertexAttribs; i++) {
          GL.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0 };
        }
  
        GL.generateTempBuffers();
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  	  // Extension available from Firefox 25
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');   
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  
  var GLFW={keyFunc:null,charFunc:null,mouseButtonFunc:null,mousePosFunc:null,mouseWheelFunc:null,resizeFunc:null,closeFunc:null,refreshFunc:null,params:null,initTime:null,wheelPos:0,buttons:0,keys:0,initWindowWidth:640,initWindowHeight:480,windowX:0,windowY:0,windowWidth:0,windowHeight:0,DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x09: return 295 ; //DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x1B: return 255 ; //DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x6A: return 313 ; //DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6B: return 315 ; //DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6D: return 314 ; //DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6E: return 316 ; //DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F: return 312 ; //DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x70: return 258 ; //DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71: return 259 ; //DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72: return 260 ; //DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73: return 261 ; //DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74: return 262 ; //DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75: return 263 ; //DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76: return 264 ; //DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77: return 265 ; //DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78: return 266 ; //DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79: return 267 ; //DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7a: return 268 ; //DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7b: return 269 ; //DOM_VK_F12 -> GLFW_KEY_F12
          case 0x25: return 285 ; //DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x26: return 283 ; //DOM_VK_UP -> GLFW_KEY_UP
          case 0x27: return 286 ; //DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x28: return 284 ; //DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x21: return 298 ; //DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22: return 299 ; //DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24: return 300 ; //DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23: return 301 ; //DOM_VK_END -> GLFW_KEY_END
          case 0x2d: return 296 ; //DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 16  : return 287 ; //DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          case 0x05: return 287 ; //DOM_VK_LEFT_SHIFT -> GLFW_KEY_LSHIFT
          case 0x06: return 288 ; //DOM_VK_RIGHT_SHIFT -> GLFW_KEY_RSHIFT
          case 17  : return 289 ; //DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          case 0x03: return 289 ; //DOM_VK_LEFT_CONTROL -> GLFW_KEY_LCTRL
          case 0x04: return 290 ; //DOM_VK_RIGHT_CONTROL -> GLFW_KEY_RCTRL
          case 18  : return 291 ; //DOM_VK_ALT -> GLFW_KEY_LALT
          case 0x02: return 291 ; //DOM_VK_LEFT_ALT -> GLFW_KEY_LALT
          case 0x01: return 292 ; //DOM_VK_RIGHT_ALT -> GLFW_KEY_RALT
          case 96  : return 302 ; //GLFW_KEY_KP_0
          case 97  : return 303 ; //GLFW_KEY_KP_1
          case 98  : return 304 ; //GLFW_KEY_KP_2
          case 99  : return 305 ; //GLFW_KEY_KP_3
          case 100 : return 306 ; //GLFW_KEY_KP_4
          case 101 : return 307 ; //GLFW_KEY_KP_5
          case 102 : return 308 ; //GLFW_KEY_KP_6
          case 103 : return 309 ; //GLFW_KEY_KP_7
          case 104 : return 310 ; //GLFW_KEY_KP_8
          case 105 : return 311 ; //GLFW_KEY_KP_9
          default  : return keycode;
        };
      },getUnicodeChar:function (value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
      },onKeyPress:function (event) {
        //charCode is only available whith onKeyPress event
        var char = GLFW.getUnicodeChar(event.charCode);
  
        if (event.charCode) {
          var char = GLFW.getUnicodeChar(event.charCode);
          if (char !== null && GLFW.charFunc) {
            Runtime.dynCall('vii', GLFW.charFunc, [event.charCode, 1]);
          }
        }
      },onKeyChanged:function (event, status) {
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key && GLFW.keyFunc) {
          GLFW.keys[key] = status;
          Runtime.dynCall('vii', GLFW.keyFunc, [key, status]);
        }
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1);//GLFW_PRESS
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0);//GLFW_RELEASE
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
  
        if (event.target == Module["canvas"] && GLFW.mousePosFunc) {
          event.preventDefault();
          Runtime.dynCall('vii', GLFW.mousePosFunc, [lastX, lastY]);
        }
      },onMouseButtonChanged:function (event, status) {
        if (GLFW.mouseButtonFunc == null) {
          return;
        }
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) {
          return;
        }
  
        if (status == 1) {//GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        event.preventDefault();
        //DOM and glfw have the same button codes
        Runtime.dynCall('vii', GLFW.mouseButtonFunc, [event['button'], status]);
      },onMouseButtonDown:function (event) {
        GLFW.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1);//GLFW_PRESS
      },onMouseButtonUp:function (event) {
        GLFW.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0);//GLFW_RELEASE
      },onMouseWheel:function (event) {
        if (event.detail > 0) {
          GLFW.wheelPos++;
        }
  
        if (event.detail < 0) {
          GLFW.wheelPos--;
        }
  
        if (GLFW.mouseWheelFunc && event.target == Module["canvas"]) {
          Runtime.dynCall('vi', GLFW.mouseWheelFunc, [GLFW.wheelPos]);
          event.preventDefault();
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        }
        else {
          width = GLFW.windowWidth;
          height = GLFW.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLFW.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
  
        if (GLFW.resizeFunc) {
          Runtime.dynCall('vii', GLFW.resizeFunc, [width, height]);
        }
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      }};function _glfwTerminate() {}

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.shouldPause = true;
    }


  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      if (width == 0 && height > 0) {
        width = 4 * height / 3;
      }
      if (width > 0 && height == 0) {
        height = 3 * width / 4;
      }
      GLFW.params[0x00020005] = redbits; //GLFW_RED_BITS
      GLFW.params[0x00020006] = greenbits; //GLFW_GREEN_BITS
      GLFW.params[0x00020007] = bluebits; //GLFW_BLUE_BITS
      GLFW.params[0x00020008] = alphabits; //GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = depthbits; //GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = stencilbits; //GLFW_STENCIL_BITS
  
      if (mode == 0x00010001) {//GLFW_WINDOW
        Browser.setCanvasSize(GLFW.initWindowWidth = width,
                              GLFW.initWindowHeight = height);
        GLFW.params[0x00030003] = true; //GLFW_STICKY_MOUSE_BUTTONS
      }
      else if (mode == 0x00010002) {//GLFW_FULLSCREEN
        GLFW.requestFullScreen();
        GLFW.params[0x00030003] = false; //GLFW_STICKY_MOUSE_BUTTONS
      }
      else{
        throw "Invalid glfwOpenWindow mode.";
      }
  
      var contextAttributes = {
        antialias: (GLFW.params[0x00020013] > 1), //GLFW_FSAA_SAMPLES
        depth: (GLFW.params[0x00020009] > 0), //GLFW_DEPTH_BITS
        stencil: (GLFW.params[0x0002000A] > 0) //GLFW_STENCIL_BITS
      }
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return 1; //GL_TRUE
    }

  function _glfwInit() {
      GLFW.initTime = Date.now() / 1000;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("mousemove", GLFW.onMousemove, true);
      window.addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      window.addEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
      window.addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLFW.onKeydown, true);
        window.removeEventListener("keypress", GLFW.onKeyPress, true);
        window.removeEventListener("keyup", GLFW.onKeyup, true);
        window.removeEventListener("mousemove", GLFW.onMousemove, true);
        window.removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
        window.removeEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
        window.removeEventListener('mousewheel', GLFW.onMouseWheel, true);
        Module["canvas"].width = Module["canvas"].height = 1;
      }});
  
      //TODO: Init with correct values
      GLFW.params = new Array();
      GLFW.params[0x00030001] = true; //GLFW_MOUSE_CURSOR
      GLFW.params[0x00030002] = false; //GLFW_STICKY_KEYS
      GLFW.params[0x00030003] = true; //GLFW_STICKY_MOUSE_BUTTONS
      GLFW.params[0x00030004] = false; //GLFW_SYSTEM_KEYS
      GLFW.params[0x00030005] = false; //GLFW_KEY_REPEAT
      GLFW.params[0x00030006] = true; //GLFW_AUTO_POLL_EVENTS
      GLFW.params[0x00020001] = true; //GLFW_OPENED
      GLFW.params[0x00020002] = true; //GLFW_ACTIVE
      GLFW.params[0x00020003] = false; //GLFW_ICONIFIED
      GLFW.params[0x00020004] = true; //GLFW_ACCELERATED
      GLFW.params[0x00020005] = 0; //GLFW_RED_BITS
      GLFW.params[0x00020006] = 0; //GLFW_GREEN_BITS
      GLFW.params[0x00020007] = 0; //GLFW_BLUE_BITS
      GLFW.params[0x00020008] = 0; //GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = 0; //GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = 0; //GLFW_STENCIL_BITS
      GLFW.params[0x0002000B] = 0; //GLFW_REFRESH_RATE
      GLFW.params[0x0002000C] = 0; //GLFW_ACCUM_RED_BITS
      GLFW.params[0x0002000D] = 0; //GLFW_ACCUM_GREEN_BITS
      GLFW.params[0x0002000E] = 0; //GLFW_ACCUM_BLUE_BITS
      GLFW.params[0x0002000F] = 0; //GLFW_ACCUM_ALPHA_BITS
      GLFW.params[0x00020010] = 0; //GLFW_AUX_BUFFERS
      GLFW.params[0x00020011] = 0; //GLFW_STEREO
      GLFW.params[0x00020012] = 0; //GLFW_WINDOW_NO_RESIZE
      GLFW.params[0x00020013] = 0; //GLFW_FSAA_SAMPLES
      GLFW.params[0x00020014] = 0; //GLFW_OPENGL_VERSION_MAJOR
      GLFW.params[0x00020015] = 0; //GLFW_OPENGL_VERSION_MINOR
      GLFW.params[0x00020016] = 0; //GLFW_OPENGL_FORWARD_COMPAT
      GLFW.params[0x00020017] = 0; //GLFW_OPENGL_DEBUG_CONTEXT
      GLFW.params[0x00020018] = 0; //GLFW_OPENGL_PROFILE
  
      GLFW.keys = new Array();
  
      return 1; //GL_TRUE
    }

  function _glfwSetWindowTitle(title) {
      document.title = Pointer_stringify(title);
    }

  
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  function _glfwSetKeyCallback(cbfun) {
      GLFW.keyFunc = cbfun;
    }

  function _glfwSetMousePosCallback(cbfun) {
      GLFW.mousePosFunc = cbfun;
    }

  function _glfwSetWindowSizeCallback(cbfun) {
      GLFW.resizeFunc = cbfun;
    }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
      Module['noExitRuntime'] = true;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          Runtime.dynCall('v', func);
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        }
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        }
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  
  
  
  
  
  
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glfwSwapBuffers() {}

  function _glfwPollEvents() {}

  function _glfwGetWindowSize(width, height) {
      setValue(width, Module['canvas'].width, 'i32');
      setValue(height, Module['canvas'].height, 'i32');
    }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _glfwGetTime() {
      return (Date.now()/1000) - GLFW.initTime;
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type;
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }

  var _ceilf=Math_ceil;

  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);function _llvm_ctlz_i32(x) {
      x = x|0;
      var ret = 0;
      ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
      if ((ret|0) < 8) return ret|0;
      ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
      if ((ret|0) < 8) return (ret + 8)|0;
      ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
      if ((ret|0) < 8) return (ret + 16)|0;
      return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
    }

  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0;
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0;
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0;
      }
    }


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getShaderInfoLog(GL.shaders[shader]).length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _glDeleteShader(shader) {
      GLctx.deleteShader(GL.shaders[shader]);
      GL.shaders[shader] = null;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }


  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }


  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }


  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.buffers);
        var buffer = GLctx.createBuffer();
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
    }

  function _glGenVertexArrays(n , arrays) {
      assert(GL.vaoExt, 'Must have OES_vertex_array_object to use vao');
      for (var i = 0; i < n ; i++) {
        var id = GL.getNewId(GL.vaos);
        var vao = GL.vaoExt.createVertexArrayOES();
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _glBindVertexArray(vao) {
      assert(GL.vaoExt, 'Must have OES_vertex_array_object to use vao');    
      GL.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.clientBuffers[index];
      assert(cb, index);
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.clientBuffers[index];
      assert(cb, index);
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _glDrawArrays(mode, first, count) {
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(first + count);
  
      GLctx.drawArrays(mode, first, count);
  
      GL.postDrawHandleClientVertexAttribBindings();
    }

  function _glFinish() { GLctx.finish() }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _sqrtf=Math_sqrt;

  var _tanf=Math_tan;

  var _sinf=Math_sin;

  var _cosf=Math_cos;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  
  var CL={cl_init:0,cl_extensions:["KHR_GL_SHARING","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},cl_validator:{},cl_validator_argsize:{},init:function () {
        if (CL.cl_init == 0) {
          console.log('%c WebCL-Translator + Validator V2.0 by Anthony Liot & Steven Eliuk ! ', 'background: #222; color: #bada55');
          var nodejs = (typeof window === 'undefined');
          if(nodejs) {
            webcl = require('../webcl');
          }
  
          if (webcl == undefined) {
            alert("Unfortunately your system does not support WebCL. " +
            "Make sure that you have WebKit Samsung or Firefox Nokia plugin");
  
            console.error("Unfortunately your system does not support WebCL.\n");
            console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin\n");  
          } else {
  
            // Add webcl constant for parser
            // Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
            // Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
            // Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1302,writable : false });
            // Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
            // Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
            // Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
  
            for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
              if (webcl.enableExtension(CL.cl_extensions[i])) {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
              } else {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
              }
            }
            CL.cl_init = 1;
          }
        }
  
        return CL.cl_init;
      },udid:function (obj) {    
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
  
        var _uuid = [];
  
        _uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
        for (var i = 1; i < 6; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
  
        _id = _uuid.join('');
  
      
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          Object.defineProperty(obj, "udid", { value : _id,writable : false });
          CL.cl_objects[_id]=obj;
        }
  
        return _id;      
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1302 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';       
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';   
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';   
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';          
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
      
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ???? 
          _value = 0x1302 /*webcl.UNSIGNED_LONG*/;  
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;                     
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;          
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
          
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _str = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_str);
          }
      
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
        
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(","); 
          
          // Get type of the line
          var _type = CL.parseType(_var[i]);
        
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/); 
          if (_res != null) _arrayNum = _res;
        
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" "); 
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
            
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);  
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for 
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)  
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
        
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 10;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 10 loop
          _security --;
  
          var _kern = _stringKern.indexOf("__kernel ");
  
          if (_kern == -1) {
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) { 
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Fin workd 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + 8,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + 8,_stringKern.length - _kern);
          
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen);
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _param_validator = [];
          var _param_argsize_validator = [];
          var _array = _second_part.split(","); 
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else if (_type == -1) {
                         
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" "); 
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }             
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
              
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);         
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else {
              _param.push(_type);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
            }
          }        
  
          CL.cl_kernels_sig[_name] = _param;
  
          CL.cl_validator[_name] = _param_validator;
          CL.cl_validator_argsize[_name] = _param_argsize_validator;
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
        
        var _info = CL.cl_objects[image].getInfo(webcl.IMAGE_FORMAT);
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;      
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:      
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo(webcl.IMAGE_FORMAT);
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;        
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo(webcl.IMAGE_FORMAT);
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break; 
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:      
            _sizeOrder = 4;
            break;        
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;         
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;         
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,new Int8Array( HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,new Int16Array( HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,new Int32Array( HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,new Uint8Array( HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,new Uint16Array( HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,new Uint32Array( HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,new Float32Array( HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },getReferencePointerToArray:function (ptr,size,type) {  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = HEAP8.subarray((ptr),(ptr+size));
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = HEAP16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = HEAP32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = HEAPU8.subarray((ptr),(ptr+size));
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = HEAPU16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = HEAPU32.subarray((ptr)>>2,(ptr+size)>>2);
              break;         
            default:
              _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
          }
        } else {
          _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
  
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
        
        return _error;
      }};function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;          
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = _kernel.val_param[arg_index];
  
      var _sig = _kernel.sig[_posarg];
      
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
          var _sizearg = new Int32Array([arg_size]);
  
          if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
            _kernel.setArg(_posarg+1,_sizearg);
          }
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
            
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
            
              var _size = CL.cl_objects[_value].getInfo(webcl.MEM_SIZE);
              var _sizearg = new Int32Array([_size]);
  
              if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
                _kernel.setArg(_posarg+1,_sizearg);
              }
            }
            
          } else {
  
            var _array = CL.getReferencePointerToArray(arg_value,arg_size,[[_sig,1]]);
           
            _kernel.setArg(_posarg,_array);
  
            var _sizearg = new Int32Array([arg_size]);
  
            if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
              _kernel.setArg(_posarg+1,_sizearg);
            }
          }
        }
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
          
          // Call the callback 
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback 
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clRetainMemObject(memobj) {
  
  
      if (!(memobj in CL.cl_objects_retains)) {
        CL.cl_objects_retains[memobj] = 1;
      } else {
        CL.cl_objects_retains[memobj] = CL.cl_objects_retains[memobj] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try { 
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clGetContextInfo(context,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var _info = null;
  
      try { 
  
  
        if (param_name == 0x1080 /* CL_CONTEXT_REFERENCE_COUNT */) {
          _info = 0;
  
          if (context in CL.cl_objects) {
            _info++;
          }
  
          if (context in CL.cl_objects_retains) {
            _info+=CL.cl_objects_retains[context];
          }
  
        } else {
          _info = CL.cl_objects[context].getInfo(param_name);
        }
        
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof WebCLPlatform) {
       
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof WebCLContextProperties) {
    
          var _size = 0;
  
          if (param_value != 0) {
  
            if ( CL.cl_objects[context].hasOwnProperty('properties') ) {
              var _properties = CL.cl_objects[context].properties;
  
              for (elt in _properties) {
                HEAP32[(((param_value)+(_size*4))>>2)]=_properties[elt];
                _size ++;
  
              }
            }
          }
  
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_size*4;
          
        } else if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            var _id = CL.udid(_info[i]);
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_id;
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length*4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
   
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
    
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
  
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list,_event);
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list);
        } 
      } catch (e) {
        var _error = CL.catchError(e);
          
  
        return _error;
      }
  
      return webcl.SUCCESS;    
    }

  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _clEnqueueReleaseGLObjects(command_queue,num_objects,mem_objects,num_events_in_wait_list,event_wait_list,event) {
        
      var _event_wait_list = [];
      var _mem_objects = [];
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      for (var i = 0; i < num_objects; i++) {
        var _id = HEAP32[(((mem_objects)+(i*4))>>2)];
  
        
        _mem_objects.push(CL.cl_objects[_id]);
      }
  
      try { 
  
          if (event != 0) {
            var _event = new WebCLEvent();
            CL.cl_objects[command_queue].enqueueReleaseGLObjects(_mem_objects,_event_wait_list,_event);    
            HEAP32[((event)>>2)]=CL.udid(_event);  
          } else {
            CL.cl_objects[command_queue].enqueueReleaseGLObjects(_mem_objects,_event_wait_list);      
          }
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;
    }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list;
      var _local_work_size;
  
      // \todo need to be remove when webkit will be support null
      /**** **** **** **** **** **** **** ****/
      if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
        _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
        _local_work_size = (local_work_size != 0) ? [] : null;
      } else {
        _event_wait_list = [];
        _local_work_size = [];
      }
  
  
      var _global_work_offset = [];
      var _global_work_size = [];
      
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
      
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
         
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
             
      try { 
        
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);  
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list);  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;    
  
    }

  function _clEnqueueAcquireGLObjects(command_queue,num_objects,mem_objects,num_events_in_wait_list,event_wait_list,event) {
        
      var _event_wait_list = [];
      var _mem_objects = [];
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      for (var i = 0; i < num_objects; i++) {
        var _id = HEAP32[(((mem_objects)+(i*4))>>2)];
  
        
        _mem_objects.push(CL.cl_objects[_id]);
      }
  
      try { 
  
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueAcquireGLObjects(_mem_objects,_event_wait_list,_event); 
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueAcquireGLObjects(_mem_objects,_event_wait_list);    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;
    }

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
            
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list,_event);    
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list);    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
   
  
        return _error;
      }
  
  
      return webcl.SUCCESS;  
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
      
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
      
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type); 
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      } 
  
      try {
  
      
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_buffer);
  
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****/
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
          
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0; 
          }
        }
      }
      /**** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function _clCreateFromGLBuffer(context,flags_i64_1,flags_i64_2,bufobj,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
   
      var _id = null;
      var _buffer = null;
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        return 0; 
      }
  
  
      try {
  
        _buffer = CL.cl_objects[context].createFromGLBuffer(_flags,GL.buffers[bufobj]);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=_error;
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=0;
  
      _id = CL.udid(_buffer);
  
  
      return _id;
    }

  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32 
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try { 
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }

  function _clReleaseCommandQueue(command_queue) {
  
      // If is an object retain don't release it until retains > 0...
      if (command_queue in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[command_queue] - 1;
  
        CL.cl_objects_retains[command_queue] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clRetainCommandQueue(command_queue) {
  
  
      if (!(command_queue in CL.cl_objects_retains)) {
        CL.cl_objects_retains[command_queue] = 1;
      } else {
        CL.cl_objects_retains[command_queue] = CL.cl_objects_retains[command_queue] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
      
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
      
  
        _kernel = CL.cl_objects[program].createKernel(_name);
        
        Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
  
        Object.defineProperty(_kernel, "val_param", { value : CL.cl_validator[_name],writable : false });
        Object.defineProperty(_kernel, "val_param_argsize", { value : CL.cl_validator_argsize[_name],writable : false });
  
        
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  function _clReleaseKernel(kernel) {
  
      // If is an object retain don't release it until retains > 0...
      if (kernel in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[kernel] - 1;
  
        CL.cl_objects_retains[kernel] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[kernel].release();
          
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[kernel];
  
  
      return webcl.SUCCESS;
    }

  function _clRetainKernel(kernel) {
  
      if (!(kernel in CL.cl_objects_retains)) {
        CL.cl_objects_retains[kernel] = 1;
      } else {
        CL.cl_objects_retains[kernel] = CL.cl_objects_retains[kernel] + 1;
      }
  
      return webcl.SUCCESS;
    }

  function __ZNSt9exceptionD2Ev() {}

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options); 
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES); 
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return 
           */
          _callback = function() { 
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data) 
          };
        }
  
        
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;      
  
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
      
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
        
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);   
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);   
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]); 
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
    
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _clReleaseProgram(program) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (program in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[program] - 1;
  
        CL.cl_objects_retains[program] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[program].release();
          delete CL.cl_objects[program]; 
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clRetainProgram(program) {
  
  
      if (!(program in CL.cl_objects_retains)) {
        CL.cl_objects_retains[program] = 1;
      } else {
        CL.cl_objects_retains[program] = CL.cl_objects_retains[program] + 1;
      }
          
      return webcl.SUCCESS;
    }

  function _clCreateContextFromType(properties,device_type_i64_1,device_type_i64_2,pfn_notify,user_data,cl_errcode_ret) {
      // Assume the device_type is i32 
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
      
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer      
      }
  
      var _id = null;
      var _context = null;
  
      try { 
  
        var _platform = null;
        var _deviceType = device_type_i64_1;
        var _glclSharedContext = false;
        var _properties = [];
  
        // Verify the property
        if (properties != 0) {
          var _propertiesCounter = 0;
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:            
                _propertiesCounter ++;
                _glclSharedContext = true;
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0; 
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (_deviceType != 0 && _platform != null) {
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx, _platform,_deviceType);  
          } else {
            _context = webcl.createContext(_platform,_deviceType);  
          }
              
        } else if (_deviceType != 0) {
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_deviceType);  
          } else {
            _context = webcl.createContext(_deviceType);  
          }
  
        } else {
          if (cl_errcode_ret != 0) {
            HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_CONTEXT;
          }
  
          return 0; // NULL Pointer   
        }
     
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      Object.defineProperty(_context, "properties", { value : _properties,writable : false });
  
  
      return _id;
    }

  function _clReleaseContext(context) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (context in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[context] - 1;
  
        CL.cl_objects_retains[context] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];     
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clRetainContext(context) {
  
  
      if (!(context in CL.cl_objects_retains)) {
        CL.cl_objects_retains[context] = 1;
      } else {
        CL.cl_objects_retains[context] = CL.cl_objects_retains[context] + 1;
      }
         
      return webcl.SUCCESS;
    }

  function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try { 
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      } 
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  function _pthread_mutex_lock() {}

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  var _llvm_memset_p0i8_i64=_memset;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _abort() {
      Module['abort']();
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }

  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_guard_abort() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;

  function _uselocale(locale) {
      return 0;
    }

  var _llvm_va_start=undefined;

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _llvm_va_end() {}

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }


  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;






_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
var GLctx; GL.init()
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__Z25framebuffer_size_callbackii,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZN19LorenzAttractorDemo6updateEv,0,__ZNSt11logic_errorD0Ev,0,__ZNSt14overflow_errorD0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__Z24emscripten_loop_callbackv,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZN11ApplicationD0Ev,0,__ZNSt3__17collateIcED1Ev,0,__ZN7gltools15ShaderContainerD2Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZN19LorenzAttractorDemoC2Ev,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZN11ApplicationC2Ev,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZN6SolverD1Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZN19LorenzAttractorDemo6renderEf,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__Z19cursor_pos_callbackii,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZN27LorenzAttractorOpenCLSolverC2Ev,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,_clGetProgramBuildInfo,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZNK2cl5Error4whatEv,0,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,0,__ZN10ParametersD1Ev,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZN27LorenzAttractorOpenCLSolver4stepEff,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZN19LorenzAttractorDemoD0Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZN19LorenzAttractorDemo12resizeWindowEii,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZN19LorenzAttractorDemoD2Ev,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__16locale5__impD0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN2cl5ErrorD1Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZN6SolverD0Ev,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZN4DemoD1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZN2cl5ErrorD0Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt13runtime_errorC2EPKc,0,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZN4DemoD0Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZN11ApplicationD2Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,_fclose,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,_clGetContextInfo,0,___cxa_pure_virtual,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt8bad_castD2Ev,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZN27LorenzAttractorOpenCLSolverD0Ev,0,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__Z12key_callbackii,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZN19LorenzAttractorDemo4initEv,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZN27LorenzAttractorOpenCLSolverD2Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,0,_glDeleteShader,0,___cxx_global_array_dtor,0,__ZN27LorenzAttractorOpenCLSolverD2Ev,0,__ZN2cl7NDRangeD1Ev,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZN11ApplicationD2Ev,0,__ZN19LorenzAttractorDemoD2Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN27LorenzAttractorOpenCLSolver4initEv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120,0];

// EMSCRIPTEN_START_FUNCS

function __ZN11Application3getEv(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=HEAP32[((17992)>>2)];
 var $4=($3|0)!=0;
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 var $6=__Znwj(56);
 var $7=$6;
 (function() { try { __THREW__ = 0; return __ZN11ApplicationC2Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 HEAP32[((17992)>>2)]=$7;
 var $9=HEAP32[((17992)>>2)];
 __ZN11Application4initEv($9);
 label=5;break;
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $12=$11$0;
 $1=$12;
 var $13=$11$1;
 $2=$13;
 __ZdlPv($6);
 label=6;break;
 case 5: 
 var $15=HEAP32[((17992)>>2)];
 STACKTOP=sp;return $15;
 case 6: 
 var $17=$1;
 var $18=$2;
 var $19$0=$17;
 var $19$1=0;
 var $20$0=$19$0;
 var $20$1=$18;
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11Application4initEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $windowWidth;
 var $windowHeight;
 var $windowTitle=sp;
 var $35=(sp)+(16);
 var $36=(sp)+(32);
 var $37;
 var $38;
 var $b_window;
 $34=$this;
 var $39=$34;
 var $40=_glfwInit();
 var $41=($40|0)!=0;
 if($41){label=3;break;}else{label=2;break;}
 case 2: 
 __ZN5error8throw_exEPKcS1_i(4152,4128,156);
 label=3;break;
 case 3: 
 $windowWidth=1280;
 $windowHeight=720;
 var $44=__ZN6global3parEv();
 $32=$35;
 $33=2712;
 var $45=$32;
 var $46=$33;
 $30=$45;
 $31=$46;
 var $47=$30;
 var $48=$47;
 var $49=(($47)|0);
 $29=$49;
 var $50=$29;
 $28=$50;
 var $51=$28;
 var $52=$51;
 $27=$52;
 var $53=$27;
 var $54=$53;
 $26=$54;
 var $55=$26;
 var $56=(($53)|0);
 var $57=$31;
 var $58=$31;
 $25=$58;
 var $59=$25;
 var $60=_strlen($59);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($47,$57,$60);
 $24=$36;
 var $61=$24;
 $23=$61;
 var $62=$23;
 var $63=$62;
 var $64=(($62)|0);
 $22=$64;
 var $65=$22;
 $21=$65;
 var $66=$21;
 var $67=$66;
 $20=$67;
 var $68=$20;
 var $69=$68;
 $19=$69;
 var $70=$19;
 var $71=(($68)|0);
 $18=$62;
 var $72=$18;
 var $73=(($72)|0);
 $17=$73;
 var $74=$17;
 var $75=$74;
 $16=$75;
 var $76=$16;
 var $77=(($76)|0);
 var $78=(($77)|0);
 var $79=$78;
 var $80=(($79)|0);
 $__a_i_i_i=$80;
 $__i_i_i_i=0;
 label=4;break;
 case 4: 
 var $82=$__i_i_i_i;
 var $83=($82>>>0)<3;
 if($83){label=5;break;}else{label=6;break;}
 case 5: 
 var $85=$__i_i_i_i;
 var $86=$__a_i_i_i;
 var $87=(($86+($85<<2))|0);
 HEAP32[(($87)>>2)]=0;
 var $88=$__i_i_i_i;
 var $89=((($88)+(1))|0);
 $__i_i_i_i=$89;
 label=4;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($windowTitle,$44,$35,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=16;break; }
 case 7: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($36);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($35);
 var $91=$windowWidth;
 var $92=$windowHeight;
 var $93=(function() { try { __THREW__ = 0; return _glfwOpenWindow($91,$92,8,8,8,0,0,0,65537) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 $b_window=$93;
 $15=$windowTitle;
 var $95=$15;
 $14=$95;
 var $96=$14;
 $13=$96;
 var $97=$13;
 $12=$97;
 var $98=$12;
 var $99=(($98)|0);
 $11=$99;
 var $100=$11;
 var $101=$100;
 $10=$101;
 var $102=$10;
 var $103=(($102)|0);
 var $104=(($103)|0);
 var $105=$104;
 var $106=(($105)|0);
 var $107=$106;
 var $108=HEAP8[($107)];
 var $109=($108&255);
 var $110=$109&1;
 var $111=($110|0)!=0;
 if($111){label=9;break;}else{label=10;break;}
 case 9: 
 $4=$97;
 var $113=$4;
 var $114=(($113)|0);
 $3=$114;
 var $115=$3;
 var $116=$115;
 $2=$116;
 var $117=$2;
 var $118=(($117)|0);
 var $119=(($118)|0);
 var $120=$119;
 var $121=(($120+8)|0);
 var $122=HEAP32[(($121)>>2)];
 var $136=$122;label=11;break;
 case 10: 
 $9=$97;
 var $124=$9;
 var $125=(($124)|0);
 $8=$125;
 var $126=$8;
 var $127=$126;
 $7=$127;
 var $128=$7;
 var $129=(($128)|0);
 var $130=(($129)|0);
 var $131=$130;
 var $132=(($131+1)|0);
 var $133=(($132)|0);
 $6=$133;
 var $134=$6;
 $5=$134;
 var $135=$5;
 var $136=$135;label=11;break;
 case 11: 
 var $136;
 $1=$136;
 var $137=$1;
 (function() { try { __THREW__ = 0; return _glfwSetWindowTitle($137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=17;break; }
 case 12: 
 var $139=$b_window;
 var $140=($139|0)!=0;
 if($140){label=18;break;}else{label=13;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return _glfwTerminate() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=17;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(2288,4128,172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 label=18;break;
 case 16: 
 var $145$0 = ___cxa_find_matching_catch(-1, -1); var $145$1 = tempRet0;
 var $146=$145$0;
 $37=$146;
 var $147=$145$1;
 $38=$147;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($36);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($35);
 label=27;break;
 case 17: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 $37=$150;
 var $151=$149$1;
 $38=$151;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($windowTitle);
 label=27;break;
 case 18: 
 var $153=(function() { try { __THREW__ = 0; return _glewInit() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=17;break; }
 case 19: 
 var $155=($153|0)!=0;
 if($155){label=20;break;}else{label=22;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(1640,4128,180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=17;break; }
 case 21: 
 label=22;break;
 case 22: 
 (function() { try { __THREW__ = 0; return _glfwSetKeyCallback(740) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return _glfwSetMousePosCallback(228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=17;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return _glfwSetWindowSizeCallback(40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=17;break; }
 case 25: 
 var $162=$windowWidth;
 var $163=$windowHeight;
 (function() { try { __THREW__ = 0; return _glViewport(0,0,$162,$163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=17;break; }
 case 26: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($windowTitle);
 STACKTOP=sp;return;
 case 27: 
 var $166=$37;
 var $167=$38;
 var $168$0=$166;
 var $168$1=0;
 var $169$0=$168$0;
 var $169$1=$167;
 ___resumeException($169$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11ApplicationC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=7768;
 var $4=(($2+4)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2+48)|0);
 HEAPF32[(($5)>>2)]=0;
 var $6=(($2+52)|0);
 HEAPF32[(($6)>>2)]=0;
 var $7=(($2+8)|0);
 HEAPF32[(($7)>>2)]=0;
 var $8=(($2+12)|0);
 HEAPF32[(($8)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN11ApplicationD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN11ApplicationD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZN11ApplicationD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=7768;
 var $4=(($2+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return _glfwCloseWindow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $9=(($2+4)|0);
 HEAP32[(($9)>>2)]=0;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 var $13=$12$0;
 ___clang_call_terminate($13);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function ___clang_call_terminate($0){
 var label=0;


 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}


function __Z12key_callbackii($key,$action){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$key;
 $2=$action;
 var $3=$1;
 var $4=($3|0)==255;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$1;
 var $7=($6|0)==81;
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=$2;
 var $10=($9|0)==1;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 _glViewport(0,0,0,0);
 _glfwCloseWindow();

 _emscripten_cancel_main_loop();
 _exit(0);
 throw "Reached an unreachable!";
 case 5: 
 var $13=$1;
 var $14=($13|0)==32;
 if($14){label=6;break;}else{label=8;break;}
 case 6: 
 var $16=$2;
 var $17=($16|0)==1;
 if($17){label=7;break;}else{label=8;break;}
 case 7: 
 label=15;break;
 case 8: 
 var $20=$1;
 var $21=($20|0)==70;
 if($21){label=9;break;}else{label=14;break;}
 case 9: 
 var $23=$2;
 var $24=($23|0)==1;
 if($24){label=10;break;}else{label=14;break;}
 case 10: 
 var $26=HEAP8[(13792)];
 var $27=(($26)&1);
 var $28=$27^1;
 var $29=($28&1);
 HEAP8[(13792)]=$29;
 var $30=HEAP8[(13792)];
 var $31=(($30)&1);
 if($31){label=11;break;}else{label=12;break;}
 case 11: 
 var $33=_glfwOpenWindow(1920,1080,8,8,8,0,0,0,65538);
 label=13;break;
 case 12: 
 var $35=_glfwOpenWindow(1280,720,8,8,8,0,0,0,65537);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z19cursor_pos_callbackii($dx,$dy){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$dx;
 $2=$dy;
 var $3=__ZN11Application3getEv();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=__ZN11Application3getEv();
 var $7=$1;
 var $8=($7|0);
 var $9=$2;
 var $10=($9|0);
 __ZN11Application12setCursorPosEff($6,$8,$10);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11Application12setCursorPosEff($this,$x,$y){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$x;
 $3=$y;
 var $4=$1;
 var $5=$2;
 var $6=(($4+8)|0);
 HEAPF32[(($6)>>2)]=$5;
 var $7=$3;
 var $8=(($4+12)|0);
 HEAPF32[(($8)>>2)]=$7;
 STACKTOP=sp;return;
}


function __Z25framebuffer_size_callbackii($width,$height){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$width;
 $2=$height;
 var $3=__ZN11Application3getEv();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=__ZN11Application3getEv();
 var $7=$1;
 var $8=$2;
 __ZN11Application12resizeWindowEii($6,$7,$8);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11Application12resizeWindowEii($this,$width,$height){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$width;
 $3=$height;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 _glViewport(0,0,$5,$6);
 var $7=__ZN4Demo3getEv();
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=$3;
 FUNCTION_TABLE[$11]($7,$12,$13);
 STACKTOP=sp;return;
}


function __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($agg_result,$this,$key,$def){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__i1_i_i1=sp;
 var $22;
 var $23=(sp)+(8);
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30=(sp)+(16);
 var $31;
 var $__i1_i_i=(sp)+(24);
 var $32;
 var $33=(sp)+(32);
 var $34;
 var $35;
 var $36=(sp)+(40);
 var $37;
 var $38;
 var $it=(sp)+(48);
 var $39=(sp)+(56);
 $37=$this;
 $38=$key;
 var $40=$37;
 var $41=(($40+60)|0);
 var $42=$38;
 $34=$41;
 $35=$42;
 var $43=$34;
 var $44=(($43)|0);
 var $45=$35;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($36,$44,$45);
 var $tmp_i=$33;
 var $tmp1_i=$36;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $32=$it;
 var $46=$32;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$33;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $31=$46;
 var $47=$31;
 var $48=(($47)|0);
 var $49=$48;
 var $50=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];
 var $51=(($40+60)|0);
 $29=$51;
 var $52=$29;
 var $53=(($52)|0);
 $28=$53;
 var $54=$28;
 $26=$30;
 $27=0;
 var $55=$26;
 var $56=$27;
 $24=$55;
 $25=$56;
 var $57=$24;
 var $58=(($57)|0);
 var $59=$25;
 HEAP32[(($58)>>2)]=$59;
 var $tmp_i2=$23;
 var $tmp1_i3=$30;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $22=$39;
 var $60=$22;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$23;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $21=$60;
 var $61=$21;
 var $62=(($61)|0);
 var $63=$62;
 var $64=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];
 $11=$it;
 $12=$39;
 var $65=$11;
 var $66=(($65)|0);
 var $67=$12;
 var $68=(($67)|0);
 $9=$66;
 $10=$68;
 var $69=$9;
 var $70=$10;
 $7=$69;
 $8=$70;
 var $71=$7;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$8;
 var $75=(($74)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($73|0)==($76|0);
 var $78=$77^1;
 if($78){label=2;break;}else{label=3;break;}
 case 2: 
 $6=$it;
 var $80=$6;
 var $81=(($80)|0);
 $5=$81;
 var $82=$5;
 var $83=(($82)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 $4=$85;
 var $86=$4;
 $3=$86;
 var $87=$3;
 var $88=$87;
 var $89=$88;
 var $90=$89;
 $2=$90;
 var $91=$2;
 $1=$91;
 var $92=$1;
 var $93=$92;
 var $94=$93;
 var $95=(($94+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$95);
 label=7;break;
 case 3: 
 $19=$agg_result;
 $20=$def;
 var $97=$19;
 var $98=$20;
 $17=$97;
 $18=$98;
 var $99=$17;
 var $100=$99;
 var $101=(($99)|0);
 var $102=$18;
 var $103=(($102)|0);
 $16=$103;
 var $104=$16;
 var $105=$101;
 var $106=$104;
 assert(12 % 1 === 0);HEAP32[(($105)>>2)]=HEAP32[(($106)>>2)];HEAP32[((($105)+(4))>>2)]=HEAP32[((($106)+(4))>>2)];HEAP32[((($105)+(8))>>2)]=HEAP32[((($106)+(8))>>2)];
 var $107=$18;
 $15=$107;
 var $108=$15;
 var $109=(($108)|0);
 $14=$109;
 var $110=$14;
 var $111=$110;
 $13=$111;
 var $112=$13;
 var $113=(($112)|0);
 var $114=(($113)|0);
 var $115=$114;
 var $116=(($115)|0);
 $__a_i_i_i=$116;
 $__i_i_i_i=0;
 label=4;break;
 case 4: 
 var $118=$__i_i_i_i;
 var $119=($118>>>0)<3;
 if($119){label=5;break;}else{label=6;break;}
 case 5: 
 var $121=$__i_i_i_i;
 var $122=$__a_i_i_i;
 var $123=(($122+($121<<2))|0);
 HEAP32[(($123)>>2)]=0;
 var $124=$__i_i_i_i;
 var $125=((($124)+(1))|0);
 $__i_i_i_i=$125;
 label=4;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z24emscripten_loop_callbackv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZN11Application3getEv();
 var $2=($1|0)!=0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=__ZN11Application3getEv();
 __ZN11Application8mainLoopEv($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11Application8mainLoopEv($this){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $realTime;
 var $29=sp;
 var $30;
 var $31;
 var $32=(sp)+(16);
 var $33=(sp)+(32);
 $28=$this;
 var $34=$28;
 var $35=__ZN11Application11getRealTimeEv();
 $realTime=$35;
 var $36=HEAP32[((13776)>>2)];
 var $37=((($36)+(1))|0);
 HEAP32[((13776)>>2)]=$37;
 var $38=HEAP32[((13768)>>2)];
 var $39=$realTime;
 var $40=(($39)&-1);
 var $41=($38|0)!=($40|0);
 if($41){label=2;break;}else{label=23;break;}
 case 2: 
 var $43=$realTime;
 var $44=(($43)&-1);
 HEAP32[((13768)>>2)]=$44;
 var $45=__ZN6global3parEv();
 $26=$29;
 $27=1056;
 var $46=$26;
 var $47=$27;
 $24=$46;
 $25=$47;
 var $48=$24;
 var $49=$48;
 var $50=(($48)|0);
 $23=$50;
 var $51=$23;
 $22=$51;
 var $52=$22;
 var $53=$52;
 $21=$53;
 var $54=$21;
 var $55=$54;
 $20=$55;
 var $56=$20;
 var $57=(($54)|0);
 var $58=$25;
 var $59=$25;
 $19=$59;
 var $60=$19;
 var $61=_strlen($60);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($48,$58,$61);
 var $62=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($45,$29,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $64=($62|0)!=0;
 if($64){label=4;break;}else{label=5;break;}
 case 4: 
 var $68=696;label=6;break;
 case 5: 
 var $68=464;label=6;break;
 case 6: 
 var $68;
 var $69=(($68)|0);
 var $70=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=18;break; }
 case 7: 
 $17=$32;
 $18=248;
 var $72=$17;
 var $73=$18;
 $15=$72;
 $16=$73;
 var $74=$15;
 var $75=$74;
 var $76=(($74)|0);
 $14=$76;
 var $77=$14;
 $13=$77;
 var $78=$13;
 var $79=$78;
 $12=$79;
 var $80=$12;
 var $81=$80;
 $11=$81;
 var $82=$11;
 var $83=(($80)|0);
 var $84=$16;
 var $85=$16;
 $10=$85;
 var $86=$10;
 var $87=(function() { try { __THREW__ = 0; return _strlen($86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($74,$84,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=18;break; }
 case 9: 
 label=10;break;
 case 10: 
 var $89=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($70,$32,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=19;break; }
 case 11: 
 var $91=HEAP32[((13776)>>2)];
 var $92=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=19;break; }
 case 12: 
 $8=$33;
 $9=4112;
 var $94=$8;
 var $95=$9;
 $6=$94;
 $7=$95;
 var $96=$6;
 var $97=$96;
 var $98=(($96)|0);
 $5=$98;
 var $99=$5;
 $4=$99;
 var $100=$4;
 var $101=$100;
 $3=$101;
 var $102=$3;
 var $103=$102;
 $2=$103;
 var $104=$2;
 var $105=(($102)|0);
 var $106=$7;
 var $107=$7;
 $1=$107;
 var $108=$1;
 var $109=(function() { try { __THREW__ = 0; return _strlen($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=19;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($96,$106,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=19;break; }
 case 14: 
 label=15;break;
 case 15: 
 var $111=(function() { try { __THREW__ = 0; return __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($92,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 var $113=($111?3872:3488);
 var $114=(function() { try { __THREW__ = 0; return _printf(1328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$69,HEAP32[(((tempVarArgs)+(8))>>2)]=$89,HEAP32[(((tempVarArgs)+(16))>>2)]=$91,HEAP32[(((tempVarArgs)+(24))>>2)]=$113,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($33);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($32);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($29);
 HEAP32[((13776)>>2)]=0;
 label=23;break;
 case 18: 
 var $117$0 = ___cxa_find_matching_catch(-1, -1); var $117$1 = tempRet0;
 var $118=$117$0;
 $30=$118;
 var $119=$117$1;
 $31=$119;
 label=22;break;
 case 19: 
 var $121$0 = ___cxa_find_matching_catch(-1, -1); var $121$1 = tempRet0;
 var $122=$121$0;
 $30=$122;
 var $123=$121$1;
 $31=$123;
 label=21;break;
 case 20: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 $30=$126;
 var $127=$125$1;
 $31=$127;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($33);
 label=21;break;
 case 21: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($32);
 label=22;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($29);
 label=24;break;
 case 23: 
 var $131=__ZN4Demo3getEv();
 var $132=$131;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+8)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($34+48)|0);
 var $137=HEAPF32[(($136)>>2)];
 FUNCTION_TABLE[$135]($131,$137);

 var $138=__ZN6Solver3getEv();
 var $139=$138;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($34+48)|0);
 var $144=HEAPF32[(($143)>>2)];
 var $145=(($34+52)|0);
 var $146=HEAPF32[(($145)>>2)];
 FUNCTION_TABLE[$142]($138,$144,$146);
 var $147=__ZN4Demo3getEv();
 var $148=$147;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+12)|0);
 var $151=HEAP32[(($150)>>2)];
 FUNCTION_TABLE[$151]($147);

 var $152=(($34+52)|0);
 var $153=HEAPF32[(($152)>>2)];
 var $154=(($34+48)|0);
 var $155=HEAPF32[(($154)>>2)];
 var $156=($155)+($153);
 HEAPF32[(($154)>>2)]=$156;
 var $157=HEAP32[((13784)>>2)];
 var $158=((($157)+(1))|0);
 HEAP32[((13784)>>2)]=$158;
 STACKTOP=sp;return;
 case 24: 
 var $160=$30;
 var $161=$31;
 var $162$0=$160;
 var $162$1=0;
 var $163$0=$162$0;
 var $163$1=$161;
 ___resumeException($163$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11Application3runEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN11Application20setupLorenzAttractorEv($2);
 _emscripten_set_main_loop(64,-1,0);
 STACKTOP=sp;return;
}


function __ZN11Application20setupLorenzAttractorEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $nX;
 var $nY;
 var $nZ;
 var $nParticles;
 var $92=sp;
 var $93;
 var $94;
 var $95=(sp)+(16);
 var $96=(sp)+(32);
 var $97=(sp)+(48);
 var $98=(sp)+(64);
 var $99=(sp)+(80);
 var $100=(sp)+(96);
 var $onePiece;
 var $pos;
 var $color;
 var $lifetime;
 var $side;
 var $i;
 var $j;
 var $k;
 var $idx;
 var $101=(sp)+(112);
 var $102=(sp)+(128);
 var $103=(sp)+(144);
 $91=$this;
 var $104=$91;
 var $105=(($104+48)|0);
 HEAPF32[(($105)>>2)]=0;
 var $106=(($104+52)|0);
 HEAPF32[(($106)>>2)]=0.01666666753590107;
 $nX=200;
 $nY=200;
 $nZ=200;
 var $107=$nX;
 var $108=$nY;
 var $109=(Math_imul($107,$108)|0);
 var $110=$nZ;
 var $111=(Math_imul($109,$110)|0);
 $nParticles=$111;
 var $112=__ZN6global3parEv();
 $89=$92;
 $90=248;
 var $113=$89;
 var $114=$90;
 $87=$113;
 $88=$114;
 var $115=$87;
 var $116=$115;
 var $117=(($115)|0);
 $86=$117;
 var $118=$86;
 $85=$118;
 var $119=$85;
 var $120=$119;
 $84=$120;
 var $121=$84;
 var $122=$121;
 $83=$122;
 var $123=$83;
 var $124=(($121)|0);
 var $125=$88;
 var $126=$88;
 $82=$126;
 var $127=$82;
 var $128=_strlen($127);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($115,$125,$128);
 var $129=$nParticles;
 (function() { try { __THREW__ = 0; return __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($112,$92,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($92);
 var $131=__ZN6global3parEv();
 $80=$95;
 $81=3288;
 var $132=$80;
 var $133=$81;
 $78=$132;
 $79=$133;
 var $134=$78;
 var $135=$134;
 var $136=(($134)|0);
 $77=$136;
 var $137=$77;
 $76=$137;
 var $138=$76;
 var $139=$138;
 $75=$139;
 var $140=$75;
 var $141=$140;
 $74=$141;
 var $142=$74;
 var $143=(($140)|0);
 var $144=$79;
 var $145=$79;
 $73=$145;
 var $146=$73;
 var $147=_strlen($146);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($134,$144,$147);
 $71=$96;
 $72=3112;
 var $148=$71;
 var $149=$72;
 $69=$148;
 $70=$149;
 var $150=$69;
 var $151=$150;
 var $152=(($150)|0);
 $68=$152;
 var $153=$68;
 $67=$153;
 var $154=$67;
 var $155=$154;
 $66=$155;
 var $156=$66;
 var $157=$156;
 $65=$157;
 var $158=$65;
 var $159=(($156)|0);
 var $160=$70;
 var $161=$70;
 $64=$161;
 var $162=$64;
 var $163=(function() { try { __THREW__ = 0; return _strlen($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($150,$160,$163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=17;break; }
 case 4: 
 label=5;break;
 case 5: 
 (function() { try { __THREW__ = 0; return __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($131,$95,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($95);
 var $166=__ZN6global3parEv();
 $62=$97;
 $63=3024;
 var $167=$62;
 var $168=$63;
 $60=$167;
 $61=$168;
 var $169=$60;
 var $170=$169;
 var $171=(($169)|0);
 $59=$171;
 var $172=$59;
 $58=$172;
 var $173=$58;
 var $174=$173;
 $57=$174;
 var $175=$57;
 var $176=$175;
 $56=$176;
 var $177=$56;
 var $178=(($175)|0);
 var $179=$61;
 var $180=$61;
 $55=$180;
 var $181=$55;
 var $182=_strlen($181);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($169,$179,$182);
 $53=$98;
 $54=2944;
 var $183=$53;
 var $184=$54;
 $51=$183;
 $52=$184;
 var $185=$51;
 var $186=$185;
 var $187=(($185)|0);
 $50=$187;
 var $188=$50;
 $49=$188;
 var $189=$49;
 var $190=$189;
 $48=$190;
 var $191=$48;
 var $192=$191;
 $47=$192;
 var $193=$47;
 var $194=(($191)|0);
 var $195=$52;
 var $196=$52;
 $46=$196;
 var $197=$46;
 var $198=(function() { try { __THREW__ = 0; return _strlen($197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=20;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($185,$195,$198) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=20;break; }
 case 8: 
 label=9;break;
 case 9: 
 (function() { try { __THREW__ = 0; return __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($166,$97,$98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=21;break; }
 case 10: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($98);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($97);
 var $201=__ZN6global3parEv();
 $44=$99;
 $45=2888;
 var $202=$44;
 var $203=$45;
 $42=$202;
 $43=$203;
 var $204=$42;
 var $205=$204;
 var $206=(($204)|0);
 $41=$206;
 var $207=$41;
 $40=$207;
 var $208=$40;
 var $209=$208;
 $39=$209;
 var $210=$39;
 var $211=$210;
 $38=$211;
 var $212=$38;
 var $213=(($210)|0);
 var $214=$43;
 var $215=$43;
 $37=$215;
 var $216=$37;
 var $217=_strlen($216);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($204,$214,$217);
 $35=$100;
 $36=2816;
 var $218=$35;
 var $219=$36;
 $33=$218;
 $34=$219;
 var $220=$33;
 var $221=$220;
 var $222=(($220)|0);
 $32=$222;
 var $223=$32;
 $31=$223;
 var $224=$31;
 var $225=$224;
 $30=$225;
 var $226=$30;
 var $227=$226;
 $29=$227;
 var $228=$29;
 var $229=(($226)|0);
 var $230=$34;
 var $231=$34;
 $28=$231;
 var $232=$28;
 var $233=(function() { try { __THREW__ = 0; return _strlen($232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=23;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($220,$230,$233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 label=13;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($201,$99,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=24;break; }
 case 14: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($99);
 $onePiece=0;
 var $236=$nParticles;
 var $237=((($236)*(9))&-1);
 var $238=($237<<2);
 var $239=_malloc($238);
 var $240=$239;
 var $241=$240;
 $onePiece=$241;
 var $242=$onePiece;
 var $243=($242|0)==0;
 if($243){label=15;break;}else{label=26;break;}
 case 15: 
 __ZN5error8throw_exEPKcS1_i(2744,4128,406);
 label=26;break;
 case 16: 
 var $246$0 = ___cxa_find_matching_catch(-1, -1); var $246$1 = tempRet0;
 var $247=$246$0;
 $93=$247;
 var $248=$246$1;
 $94=$248;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($92);
 label=45;break;
 case 17: 
 var $250$0 = ___cxa_find_matching_catch(-1, -1); var $250$1 = tempRet0;
 var $251=$250$0;
 $93=$251;
 var $252=$250$1;
 $94=$252;
 label=19;break;
 case 18: 
 var $254$0 = ___cxa_find_matching_catch(-1, -1); var $254$1 = tempRet0;
 var $255=$254$0;
 $93=$255;
 var $256=$254$1;
 $94=$256;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
 label=19;break;
 case 19: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($95);
 label=45;break;
 case 20: 
 var $259$0 = ___cxa_find_matching_catch(-1, -1); var $259$1 = tempRet0;
 var $260=$259$0;
 $93=$260;
 var $261=$259$1;
 $94=$261;
 label=22;break;
 case 21: 
 var $263$0 = ___cxa_find_matching_catch(-1, -1); var $263$1 = tempRet0;
 var $264=$263$0;
 $93=$264;
 var $265=$263$1;
 $94=$265;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($98);
 label=22;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($97);
 label=45;break;
 case 23: 
 var $268$0 = ___cxa_find_matching_catch(-1, -1); var $268$1 = tempRet0;
 var $269=$268$0;
 $93=$269;
 var $270=$268$1;
 $94=$270;
 label=25;break;
 case 24: 
 var $272$0 = ___cxa_find_matching_catch(-1, -1); var $272$1 = tempRet0;
 var $273=$272$0;
 $93=$273;
 var $274=$272$1;
 $94=$274;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($100);
 label=25;break;
 case 25: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($99);
 label=45;break;
 case 26: 
 var $277=$onePiece;
 var $278=$277;
 $pos=$278;
 var $279=$pos;
 var $280=$nParticles;
 var $281=($280<<2);
 var $282=(($279+($281<<2))|0);
 $color=$282;
 var $283=$pos;
 var $284=$nParticles;
 var $285=($284<<3);
 var $286=(($283+($285<<2))|0);
 $lifetime=$286;
 var $287=$color;
 var $288=$287;
 var $289=$nParticles;
 var $290=($289<<2);
 var $291=($290<<2);
 _memset($288, 0, $291)|0;
 $side=100;
 $i=0;
 label=27;break;
 case 27: 
 var $293=$i;
 var $294=$nX;
 var $295=($293|0)<($294|0);
 if($295){label=28;break;}else{label=38;break;}
 case 28: 
 $j=0;
 label=29;break;
 case 29: 
 var $298=$j;
 var $299=$nY;
 var $300=($298|0)<($299|0);
 if($300){label=30;break;}else{label=36;break;}
 case 30: 
 $k=0;
 label=31;break;
 case 31: 
 var $303=$k;
 var $304=$nZ;
 var $305=($303|0)<($304|0);
 if($305){label=32;break;}else{label=34;break;}
 case 32: 
 var $307=$i;
 var $308=$nY;
 var $309=(Math_imul($307,$308)|0);
 var $310=$j;
 var $311=((($309)+($310))|0);
 var $312=$nZ;
 var $313=(Math_imul($311,$312)|0);
 var $314=$k;
 var $315=((($313)+($314))|0);
 $idx=$315;
 var $316=_rand();
 var $317=($316|0);
 var $318=($317)*(30);
 var $319=($318)/(2147483648);
 var $320=$319;
 var $321=$idx;
 var $322=$lifetime;
 var $323=(($322+($321<<2))|0);
 HEAPF32[(($323)>>2)]=$320;
 var $324=$idx;
 var $325=($324<<2);
 $idx=$325;
 var $326=$side;
 var $327=$i;
 var $328=($327<<1);
 var $329=$nX;
 var $330=((($328)-($329))|0);
 var $331=($330|0);
 var $332=($326)*($331);
 var $333=$nX;
 var $334=($333|0);
 var $335=($332)/($334);
 var $336=$idx;
 var $337=(($336)|0);
 var $338=$pos;
 var $339=(($338+($337<<2))|0);
 HEAPF32[(($339)>>2)]=$335;
 var $340=$side;
 var $341=$j;
 var $342=($341<<1);
 var $343=$nY;
 var $344=((($342)-($343))|0);
 var $345=($344|0);
 var $346=($340)*($345);
 var $347=$nY;
 var $348=($347|0);
 var $349=($346)/($348);
 var $350=$idx;
 var $351=((($350)+(1))|0);
 var $352=$pos;
 var $353=(($352+($351<<2))|0);
 HEAPF32[(($353)>>2)]=$349;
 var $354=$side;
 var $355=$k;
 var $356=($355<<1);
 var $357=$nZ;
 var $358=((($356)-($357))|0);
 var $359=($358|0);
 var $360=($354)*($359);
 var $361=$nZ;
 var $362=($361|0);
 var $363=($360)/($362);
 var $364=$idx;
 var $365=((($364)+(2))|0);
 var $366=$pos;
 var $367=(($366+($365<<2))|0);
 HEAPF32[(($367)>>2)]=$363;
 var $368=$idx;
 var $369=((($368)+(3))|0);
 var $370=$pos;
 var $371=(($370+($369<<2))|0);
 HEAPF32[(($371)>>2)]=1;
 label=33;break;
 case 33: 
 var $373=$k;
 var $374=((($373)+(1))|0);
 $k=$374;
 label=31;break;
 case 34: 
 label=35;break;
 case 35: 
 var $377=$j;
 var $378=((($377)+(1))|0);
 $j=$378;
 label=29;break;
 case 36: 
 label=37;break;
 case 37: 
 var $381=$i;
 var $382=((($381)+(1))|0);
 $i=$382;
 label=27;break;
 case 38: 
 var $384=__ZN6global3parEv();
 $26=$101;
 $27=2704;
 var $385=$26;
 var $386=$27;
 $24=$385;
 $25=$386;
 var $387=$24;
 var $388=$387;
 var $389=(($387)|0);
 $23=$389;
 var $390=$23;
 $22=$390;
 var $391=$22;
 var $392=$391;
 $21=$392;
 var $393=$21;
 var $394=$393;
 $20=$394;
 var $395=$20;
 var $396=(($393)|0);
 var $397=$25;
 var $398=$25;
 $19=$398;
 var $399=$19;
 var $400=_strlen($399);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($387,$397,$400);
 var $401=$pos;
 var $402=$401;
 (function() { try { __THREW__ = 0; return __ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($384,$101,$402) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=42;break; }
 case 39: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
 var $404=__ZN6global3parEv();
 $17=$102;
 $18=2672;
 var $405=$17;
 var $406=$18;
 $15=$405;
 $16=$406;
 var $407=$15;
 var $408=$407;
 var $409=(($407)|0);
 $14=$409;
 var $410=$14;
 $13=$410;
 var $411=$13;
 var $412=$411;
 $12=$412;
 var $413=$12;
 var $414=$413;
 $11=$414;
 var $415=$11;
 var $416=(($413)|0);
 var $417=$16;
 var $418=$16;
 $10=$418;
 var $419=$10;
 var $420=_strlen($419);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($407,$417,$420);
 var $421=$color;
 var $422=$421;
 (function() { try { __THREW__ = 0; return __ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($404,$102,$422) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=43;break; }
 case 40: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($102);
 var $424=__ZN6global3parEv();
 $8=$103;
 $9=2552;
 var $425=$8;
 var $426=$9;
 $6=$425;
 $7=$426;
 var $427=$6;
 var $428=$427;
 var $429=(($427)|0);
 $5=$429;
 var $430=$5;
 $4=$430;
 var $431=$4;
 var $432=$431;
 $3=$432;
 var $433=$3;
 var $434=$433;
 $2=$434;
 var $435=$2;
 var $436=(($433)|0);
 var $437=$7;
 var $438=$7;
 $1=$438;
 var $439=$1;
 var $440=_strlen($439);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($427,$437,$440);
 var $441=$lifetime;
 var $442=$441;
 (function() { try { __THREW__ = 0; return __ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($424,$103,$442) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=44;break; }
 case 41: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 __ZN4Demo6createENS_4TypeE(0);
 __ZN6Solver6createENS_4TypeE(0);
 STACKTOP=sp;return;
 case 42: 
 var $445$0 = ___cxa_find_matching_catch(-1, -1); var $445$1 = tempRet0;
 var $446=$445$0;
 $93=$446;
 var $447=$445$1;
 $94=$447;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
 label=45;break;
 case 43: 
 var $449$0 = ___cxa_find_matching_catch(-1, -1); var $449$1 = tempRet0;
 var $450=$449$0;
 $93=$450;
 var $451=$449$1;
 $94=$451;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($102);
 label=45;break;
 case 44: 
 var $453$0 = ___cxa_find_matching_catch(-1, -1); var $453$1 = tempRet0;
 var $454=$453$0;
 $93=$454;
 var $455=$453$1;
 $94=$455;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 label=45;break;
 case 45: 
 var $457=$93;
 var $458=$94;
 var $459$0=$457;
 var $459$1=0;
 var $460$0=$459$0;
 var $460$1=$458;
 ___resumeException($460$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN11Application11getRealTimeEv(){
 var label=0;


 var $1=_glfwGetTime();
 var $2=$1;
 return $2;
}


function __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($this,$key,$def){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $__i1_i_i1=sp;
 var $14;
 var $15=(sp)+(8);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=(sp)+(16);
 var $23;
 var $__i1_i_i=(sp)+(24);
 var $24;
 var $25=(sp)+(32);
 var $26;
 var $27;
 var $28=(sp)+(40);
 var $29;
 var $30;
 var $31;
 var $32;
 var $it=(sp)+(48);
 var $33=(sp)+(56);
 $30=$this;
 $31=$key;
 $32=$def;
 var $34=$30;
 var $35=(($34)|0);
 var $36=$31;
 $26=$35;
 $27=$36;
 var $37=$26;
 var $38=(($37)|0);
 var $39=$27;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($28,$38,$39);
 var $tmp_i=$25;
 var $tmp1_i=$28;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $24=$it;
 var $40=$24;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$25;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $23=$40;
 var $41=$23;
 var $42=(($41)|0);
 var $43=$42;
 var $44=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];
 var $45=(($34)|0);
 $21=$45;
 var $46=$21;
 var $47=(($46)|0);
 $20=$47;
 var $48=$20;
 $18=$22;
 $19=0;
 var $49=$18;
 var $50=$19;
 $16=$49;
 $17=$50;
 var $51=$16;
 var $52=(($51)|0);
 var $53=$17;
 HEAP32[(($52)>>2)]=$53;
 var $tmp_i2=$15;
 var $tmp1_i3=$22;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $14=$33;
 var $54=$14;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$15;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $13=$54;
 var $55=$13;
 var $56=(($55)|0);
 var $57=$56;
 var $58=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];
 $5=$it;
 $6=$33;
 var $59=$5;
 var $60=(($59)|0);
 var $61=$6;
 var $62=(($61)|0);
 $3=$60;
 $4=$62;
 var $63=$3;
 var $64=$4;
 $1=$63;
 $2=$64;
 var $65=$1;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$2;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($67|0)==($70|0);
 var $72=$71^1;
 if($72){label=2;break;}else{label=3;break;}
 case 2: 
 $12=$it;
 var $74=$12;
 var $75=(($74)|0);
 $11=$75;
 var $76=$11;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+8)|0);
 $10=$79;
 var $80=$10;
 $9=$80;
 var $81=$9;
 var $82=$81;
 var $83=$82;
 var $84=$83;
 $8=$84;
 var $85=$8;
 $7=$85;
 var $86=$7;
 var $87=$86;
 var $88=$87;
 var $89=(($88+12)|0);
 var $90=HEAP32[(($89)>>2)];
 $29=$90;
 label=4;break;
 case 3: 
 var $92=$32;
 $29=$92;
 label=4;break;
 case 4: 
 var $94=$29;
 STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$key;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($3,$4,0);
 var $6=($5|0)!=0;
 var $7=($6?1:0);
 STACKTOP=sp;return $7;
}


function __ZNK11Application13getWindowSizeERiS0_($this,$width,$height){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$width;
 $3=$height;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 _glfwGetWindowSize($5,$6);
 STACKTOP=sp;return;
}


function __ZNK11Application14getCursorPos01ERfS0_($this,$x,$y){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $width=sp;
 var $height=(sp)+(8);
 $1=$this;
 $2=$x;
 $3=$y;
 var $4=$1;
 HEAP32[(($width)>>2)]=-1;
 HEAP32[(($height)>>2)]=-1;
 __ZNK11Application13getWindowSizeERiS0_($4,$width,$height);
 var $5=(($4+8)|0);
 var $6=HEAPF32[(($5)>>2)];
 var $7=HEAP32[(($width)>>2)];
 var $8=($7|0);
 var $9=($6)/($8);
 var $10=$2;
 HEAPF32[(($10)>>2)]=$9;
 var $11=(($4+12)|0);
 var $12=HEAPF32[(($11)>>2)];
 var $13=HEAP32[(($height)>>2)];
 var $14=($13|0);
 var $15=($12)/($14);
 var $16=$3;
 HEAPF32[(($16)>>2)]=$15;
 STACKTOP=sp;return;
}


function __ZN11Application12setCursorRayEPfS0_($this,$origin,$dir){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$origin;
 $3=$dir;
 var $4=$1;
 var $5=(($4+16)|0);
 var $6=$5;
 var $7=$2;
 var $8=$7;
 assert(16 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];HEAP32[((($6)+(12))>>2)]=HEAP32[((($8)+(12))>>2)];
 var $9=(($4+32)|0);
 var $10=$9;
 var $11=$3;
 var $12=$11;
 assert(16 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];HEAP32[((($10)+(12))>>2)]=HEAP32[((($12)+(12))>>2)];
 STACKTOP=sp;return;
}


function __ZNK11Application12getCursorRayEPfS0_($this,$origin,$dir){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$origin;
 $3=$dir;
 var $4=$1;
 var $5=$2;
 var $6=$5;
 var $7=(($4+16)|0);
 var $8=$7;
 assert(16 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];HEAP32[((($6)+(12))>>2)]=HEAP32[((($8)+(12))>>2)];
 var $9=$3;
 var $10=$9;
 var $11=(($4+32)|0);
 var $12=$11;
 assert(16 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];HEAP32[((($10)+(12))>>2)]=HEAP32[((($12)+(12))>>2)];
 STACKTOP=sp;return;
}


function __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($this,$key,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$key;
 $3=$val;
 var $4=$1;
 var $5=$3;
 var $6=(($4)|0);
 var $7=$2;
 var $8=__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($6,$7);
 HEAP32[(($8)>>2)]=$5;
 STACKTOP=sp;return;
}


function __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($this,$key,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$key;
 $3=$val;
 var $4=$1;
 var $5=(($4+60)|0);
 var $6=$2;
 var $7=__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSC_($5,$6);
 var $8=$3;
 var $9=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($7,$8);
 STACKTOP=sp;return;
}


function __ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($this,$key,$ptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$key;
 $3=$ptr;
 var $4=$1;
 var $5=$3;
 var $6=$5;
 var $7=(($4+80)|0);
 var $8=$2;
 var $9=__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($7,$8);
 HEAP32[(($9)>>2)]=$6;
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $__t_i;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $__i1_i_i_i=sp;
 var $13;
 var $14=(sp)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(16);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33=(sp)+(24);
 var $34;
 var $35;
 var $36=(sp)+(32);
 var $37=(sp)+(40);
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47=(sp)+(48);
 var $48;
 var $49;
 var $50=(sp)+(56);
 var $51=(sp)+(64);
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $__tmp_i_i_i6;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79=(sp)+(72);
 var $80;
 var $81;
 var $82=(sp)+(80);
 var $83=(sp)+(88);
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93=(sp)+(96);
 var $94;
 var $95;
 var $96=(sp)+(104);
 var $97=(sp)+(112);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $__tmp_i_i_i;
 var $105;
 var $106;
 var $107;
 var $__i1_i_i1=(sp)+(120);
 var $108;
 var $109=(sp)+(128);
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116=(sp)+(136);
 var $117;
 var $__i1_i_i=(sp)+(144);
 var $118;
 var $119=(sp)+(152);
 var $120;
 var $121;
 var $122=(sp)+(160);
 var $123;
 var $124;
 var $125;
 var $__i=(sp)+(168);
 var $126=(sp)+(176);
 var $__h=(sp)+(184);
 var $__r=(sp)+(200);
 var $127=(sp)+(208);
 var $128;
 var $129;
 var $130;
 $124=$this;
 $125=$__k;
 var $131=$124;
 var $132=$125;
 $120=$131;
 $121=$132;
 var $133=$120;
 var $134=(($133)|0);
 var $135=$121;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($122,$134,$135);
 var $tmp_i=$119;
 var $tmp1_i=$122;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $118=$__i;
 var $136=$118;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$119;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $117=$136;
 var $137=$117;
 var $138=(($137)|0);
 var $139=$138;
 var $140=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];
 $115=$131;
 var $141=$115;
 var $142=(($141)|0);
 $114=$142;
 var $143=$114;
 $112=$116;
 $113=0;
 var $144=$112;
 var $145=$113;
 $110=$144;
 $111=$145;
 var $146=$110;
 var $147=(($146)|0);
 var $148=$111;
 HEAP32[(($147)>>2)]=$148;
 var $tmp_i2=$109;
 var $tmp1_i3=$116;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $108=$126;
 var $149=$108;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$109;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $107=$149;
 var $150=$107;
 var $151=(($150)|0);
 var $152=$151;
 var $153=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];
 $71=$__i;
 $72=$126;
 var $154=$71;
 var $155=(($154)|0);
 var $156=$72;
 var $157=(($156)|0);
 $69=$155;
 $70=$157;
 var $158=$69;
 var $159=$70;
 $67=$158;
 $68=$159;
 var $160=$67;
 var $161=(($160)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$68;
 var $164=(($163)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($162|0)==($165|0);
 var $167=$166^1;
 if($167){label=2;break;}else{label=3;break;}
 case 2: 
 $66=$__i;
 var $169=$66;
 var $170=(($169)|0);
 $65=$170;
 var $171=$65;
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+8)|0);
 $64=$174;
 var $175=$64;
 $63=$175;
 var $176=$63;
 var $177=$176;
 var $178=$177;
 var $179=$178;
 $62=$179;
 var $180=$62;
 $61=$180;
 var $181=$61;
 var $182=$181;
 var $183=$182;
 var $184=(($183+12)|0);
 $123=$184;
 label=24;break;
 case 3: 
 var $186=$125;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSC_($__h,$131,$186);
 var $187=(($131)|0);
 $26=$__h;
 var $188=$26;
 var $189=(($188)|0);
 $25=$189;
 var $190=$25;
 var $191=$190;
 $24=$191;
 var $192=$24;
 var $193=(($192)|0);
 var $194=HEAP32[(($193)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($127,$187,$194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 $21=$__r;
 $22=$127;
 $23=0;
 var $196=$21;
 var $197=$23;
 var $198=$22;
 $17=$196;
 $18=$198;
 $19=$197;
 var $199=$17;
 var $200=(($199)|0);
 var $201=$18;
 var $202=(($201)|0);
 $16=$202;
 var $203=$16;
 var $204=$20;
 var $205=$203;
 assert(4 % 1 === 0);HEAP32[(($204)>>2)]=HEAP32[(($205)>>2)];
 var $tmp_i_i13=$14;
 var $tmp1_i_i=$20;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i13)]=HEAP8[($tmp1_i_i)];HEAP8[((($tmp_i_i13)+(1))|0)]=HEAP8[((($tmp1_i_i)+(1))|0)];HEAP8[((($tmp_i_i13)+(2))|0)]=HEAP8[((($tmp1_i_i)+(2))|0)];HEAP8[((($tmp_i_i13)+(3))|0)]=HEAP8[((($tmp1_i_i)+(3))|0)];
 $13=$200;
 var $206=$13;
 var $tmp_i_i_i=$__i1_i_i_i;
 var $tmp2_i_i_i=$14;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp2_i_i_i)];HEAP8[((($tmp_i_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i_i)+(3))|0)];
 $12=$206;
 var $207=$12;
 var $208=(($207)|0);
 var $209=$208;
 var $210=$__i1_i_i_i;
 assert(4 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($210)>>2)];
 var $211=(($199+4)|0);
 var $212=$18;
 var $213=(($212+4)|0);
 $15=$213;
 var $214=$15;
 var $215=HEAP8[($214)];
 var $216=(($215)&1);
 var $217=($216&1);
 HEAP8[($211)]=$217;
 label=5;break;
 case 5: 
 $5=$__h;
 var $219=$5;
 var $220=(($219)|0);
 $4=$220;
 var $221=$4;
 var $222=$221;
 $3=$222;
 var $223=$3;
 var $224=(($223)|0);
 var $225=HEAP32[(($224)>>2)];
 $__t_i=$225;
 var $226=(($219)|0);
 $2=$226;
 var $227=$2;
 var $228=$227;
 $1=$228;
 var $229=$1;
 var $230=(($229)|0);
 HEAP32[(($230)>>2)]=0;
 var $231=$__t_i;
 var $232=(($__r)|0);
 $11=$232;
 var $233=$11;
 var $234=(($233)|0);
 $10=$234;
 var $235=$10;
 var $236=(($235)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+8)|0);
 $9=$238;
 var $239=$9;
 $8=$239;
 var $240=$8;
 var $241=$240;
 var $242=$241;
 var $243=$242;
 $7=$243;
 var $244=$7;
 $6=$244;
 var $245=$6;
 var $246=$245;
 var $247=$246;
 label=6;break;
 case 6: 
 var $249=(($247+12)|0);
 $123=$249;
 $130=1;
 $60=$__h;
 var $250=$60;
 $59=$250;
 var $251=$59;
 $57=$251;
 $58=0;
 var $252=$57;
 var $253=(($252)|0);
 $56=$253;
 var $254=$56;
 var $255=$254;
 $55=$255;
 var $256=$55;
 var $257=(($256)|0);
 var $258=HEAP32[(($257)>>2)];
 $__tmp_i_i_i6=$258;
 var $259=$58;
 var $260=(($252)|0);
 $30=$260;
 var $261=$30;
 var $262=$261;
 $29=$262;
 var $263=$29;
 var $264=(($263)|0);
 HEAP32[(($264)>>2)]=$259;
 var $265=$__tmp_i_i_i6;
 var $266=($265|0)!=0;
 if($266){label=7;break;}else{label=14;break;}
 case 7: 
 var $268=(($252)|0);
 $28=$268;
 var $269=$28;
 var $270=$269;
 $27=$270;
 var $271=$27;
 var $272=(($271+4)|0);
 var $273=$__tmp_i_i_i6;
 $53=$272;
 $54=$273;
 var $274=$53;
 var $275=(($274+5)|0);
 var $276=HEAP8[($275)];
 var $277=(($276)&1);
 if($277){label=8;break;}else{label=9;break;}
 case 8: 
 var $279=(($274)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=$54;
 var $282=(($281+8)|0);
 var $283=$282;
 var $284=(($283+12)|0);
 $52=$284;
 var $285=$52;
 var $286=$285;
 var $287=$286;
 $48=$280;
 $49=$287;
 var $288=$51;
 var $289=$48;
 var $290=$49;
 var $tmp_i_i_i_i_i7=$47;
 var $tmp1_i_i_i_i_i8=$50;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i7)]=HEAP8[($tmp1_i_i_i_i_i8)];
 $45=$289;
 $46=$290;
 var $291=$46;
 label=9;break;
 case 9: 
 var $293=(($274+4)|0);
 var $294=HEAP8[($293)];
 var $295=(($294)&1);
 if($295){label=10;break;}else{label=11;break;}
 case 10: 
 var $297=(($274)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$54;
 var $300=(($299+8)|0);
 var $301=$300;
 var $302=(($301)|0);
 $38=$302;
 var $303=$38;
 var $304=$303;
 var $305=$304;
 $34=$298;
 $35=$305;
 var $306=$37;
 var $307=$34;
 var $308=$35;
 var $tmp_i1_i_i_i_i9=$33;
 var $tmp1_i2_i_i_i_i10=$36;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i9)]=HEAP8[($tmp1_i2_i_i_i_i10)];
 $31=$307;
 $32=$308;
 var $309=$32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($309);
 label=11;break;
 case 11: 
 var $311=$54;
 var $312=($311|0)!=0;
 if($312){label=12;break;}else{label=13;break;}
 case 12: 
 var $314=(($274)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=$54;
 $42=$315;
 $43=$316;
 $44=1;
 var $317=$42;
 var $318=$43;
 var $319=$44;
 $39=$317;
 $40=$318;
 $41=$319;
 var $320=$39;
 var $321=$40;
 var $322=$321;
 __ZdlPv($322);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=24;break;
 case 15: 
 var $324$0 = ___cxa_find_matching_catch(-1, -1); var $324$1 = tempRet0;
 var $325=$324$0;
 $128=$325;
 var $326=$324$1;
 $129=$326;
 $106=$__h;
 var $327=$106;
 $105=$327;
 var $328=$105;
 $103=$328;
 $104=0;
 var $329=$103;
 var $330=(($329)|0);
 $102=$330;
 var $331=$102;
 var $332=$331;
 $101=$332;
 var $333=$101;
 var $334=(($333)|0);
 var $335=HEAP32[(($334)>>2)];
 $__tmp_i_i_i=$335;
 var $336=$104;
 var $337=(($329)|0);
 $76=$337;
 var $338=$76;
 var $339=$338;
 $75=$339;
 var $340=$75;
 var $341=(($340)|0);
 HEAP32[(($341)>>2)]=$336;
 var $342=$__tmp_i_i_i;
 var $343=($342|0)!=0;
 if($343){label=16;break;}else{label=23;break;}
 case 16: 
 var $345=(($329)|0);
 $74=$345;
 var $346=$74;
 var $347=$346;
 $73=$347;
 var $348=$73;
 var $349=(($348+4)|0);
 var $350=$__tmp_i_i_i;
 $99=$349;
 $100=$350;
 var $351=$99;
 var $352=(($351+5)|0);
 var $353=HEAP8[($352)];
 var $354=(($353)&1);
 if($354){label=17;break;}else{label=18;break;}
 case 17: 
 var $356=(($351)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=$100;
 var $359=(($358+8)|0);
 var $360=$359;
 var $361=(($360+12)|0);
 $98=$361;
 var $362=$98;
 var $363=$362;
 var $364=$363;
 $94=$357;
 $95=$364;
 var $365=$97;
 var $366=$94;
 var $367=$95;
 var $tmp_i_i_i_i_i=$93;
 var $tmp1_i_i_i_i_i=$96;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $91=$366;
 $92=$367;
 var $368=$92;
 label=18;break;
 case 18: 
 var $370=(($351+4)|0);
 var $371=HEAP8[($370)];
 var $372=(($371)&1);
 if($372){label=19;break;}else{label=20;break;}
 case 19: 
 var $374=(($351)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=$100;
 var $377=(($376+8)|0);
 var $378=$377;
 var $379=(($378)|0);
 $84=$379;
 var $380=$84;
 var $381=$380;
 var $382=$381;
 $80=$375;
 $81=$382;
 var $383=$83;
 var $384=$80;
 var $385=$81;
 var $tmp_i1_i_i_i_i=$79;
 var $tmp1_i2_i_i_i_i=$82;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $77=$384;
 $78=$385;
 var $386=$78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($386);
 label=20;break;
 case 20: 
 var $388=$100;
 var $389=($388|0)!=0;
 if($389){label=21;break;}else{label=22;break;}
 case 21: 
 var $391=(($351)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$100;
 $88=$392;
 $89=$393;
 $90=1;
 var $394=$88;
 var $395=$89;
 var $396=$90;
 $85=$394;
 $86=$395;
 $87=$396;
 var $397=$85;
 var $398=$86;
 var $399=$398;
 __ZdlPv($399);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=25;break;
 case 24: 
 var $401=$123;
 STACKTOP=sp;return $401;
 case 25: 
 var $403=$128;
 var $404=$129;
 var $405$0=$403;
 var $405$1=0;
 var $406$0=$405$0;
 var $406$1=$404;
 ___resumeException($406$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSC_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=(sp)+(8);
 var $15=(sp)+(16);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27=(sp)+(24);
 var $28;
 var $29;
 var $30=(sp)+(32);
 var $31=(sp)+(40);
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41=(sp)+(48);
 var $42=(sp)+(56);
 var $43;
 var $44;
 var $45=(sp)+(64);
 var $46=(sp)+(72);
 var $__t21_i_i_i8=(sp)+(80);
 var $47;
 var $48;
 var $49=(sp)+(88);
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $__t_i_i_i;
 var $58;
 var $59;
 var $60=(sp)+(96);
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73=(sp)+(104);
 var $74;
 var $75;
 var $76=(sp)+(112);
 var $77=(sp)+(120);
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87=(sp)+(128);
 var $88;
 var $89;
 var $90=(sp)+(136);
 var $91=(sp)+(144);
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $__tmp_i_i_i1;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105=(sp)+(152);
 var $106=(sp)+(160);
 var $107;
 var $108;
 var $109=(sp)+(168);
 var $110=(sp)+(176);
 var $__t21_i_i_i=(sp)+(184);
 var $111;
 var $112;
 var $113=(sp)+(192);
 var $114;
 var $115;
 var $116;
 var $117;
 var $118=(sp)+(200);
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137=(sp)+(208);
 var $138;
 var $139;
 var $140=(sp)+(216);
 var $141=(sp)+(224);
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151=(sp)+(232);
 var $152;
 var $153;
 var $154=(sp)+(240);
 var $155=(sp)+(248);
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $__tmp_i_i_i;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $__na;
 var $__h=(sp)+(256);
 var $170=(sp)+(272);
 var $171;
 var $172;
 var $173;
 $168=$this;
 $169=$__k;
 var $174=$168;
 var $175=(($174)|0);
 $167=$175;
 var $176=$167;
 var $177=(($176+8)|0);
 $166=$177;
 var $178=$166;
 var $179=$178;
 $165=$179;
 var $180=$165;
 var $181=$180;
 $__na=$181;
 var $182=$__na;
 $129=$182;
 $130=1;
 var $183=$129;
 var $184=$130;
 $126=$183;
 $127=$184;
 $128=0;
 var $185=$126;
 var $186=$127;
 var $187=((($186)*(24))&-1);
 var $188=__Znwj($187);
 var $189=$188;
 var $190=$__na;
 $124=$170;
 $125=$190;
 var $191=$124;
 var $192=$125;
 $122=$191;
 $123=$192;
 var $193=$122;
 var $194=(($193)|0);
 var $195=$123;
 HEAP32[(($194)>>2)]=$195;
 var $196=(($193+4)|0);
 HEAP8[($196)]=0;
 var $197=(($193+5)|0);
 HEAP8[($197)]=0;
 $119=$__h;
 $120=$189;
 $121=$170;
 var $198=$119;
 var $199=$120;
 var $200=$121;
 $115=$198;
 $116=$199;
 $117=$200;
 var $201=$115;
 var $202=(($201)|0);
 var $203=$116;
 var $204=$117;
 $114=$204;
 var $205=$114;
 var $206=$118;
 var $207=$205;
 assert(8 % 1 === 0);HEAP32[(($206)>>2)]=HEAP32[(($207)>>2)];HEAP32[((($206)+(4))>>2)]=HEAP32[((($207)+(4))>>2)];
 var $tmp_i_i=$113;
 var $tmp1_i_i=$118;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $111=$202;
 $112=$203;
 var $208=$111;
 var $209=$112;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$113;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $108=$208;
 HEAP32[(($109)>>2)]=$209;
 var $210=$108;
 var $211=$210;
 $107=$109;
 var $212=$107;
 var $213=HEAP32[(($212)>>2)];
 $101=$__t21_i_i_i;
 var $214=$101;
 var $215=$110;
 var $216=$214;
 assert(8 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];
 var $tmp_i_i_i_i=$106;
 var $tmp1_i_i_i_i=$110;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $104=$211;
 HEAP32[(($105)>>2)]=$213;
 var $217=$104;
 var $218=(($217)|0);
 $103=$105;
 var $219=$103;
 var $220=HEAP32[(($219)>>2)];
 HEAP32[(($218)>>2)]=$220;
 var $221=(($217+4)|0);
 $102=$106;
 var $222=$102;
 var $223=$221;
 var $224=$222;
 assert(8 % 1 === 0);HEAP32[(($223)>>2)]=HEAP32[(($224)>>2)];HEAP32[((($223)+(4))>>2)]=HEAP32[((($224)+(4))>>2)];
 var $225=$__na;
 $66=$__h;
 var $226=$66;
 var $227=(($226)|0);
 $65=$227;
 var $228=$65;
 var $229=$228;
 $64=$229;
 var $230=$64;
 var $231=(($230)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+8)|0);
 var $234=$233;
 var $235=(($234)|0);
 $63=$235;
 var $236=$63;
 var $237=$236;
 var $238=$237;
 var $239=$169;
 $11=$225;
 $12=$238;
 $13=$239;
 var $240=$15;
 var $241=$11;
 var $242=$12;
 var $243=$13;
 $10=$243;
 var $244=$10;
 var $tmp_i15=$9;
 var $tmp1_i16=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i15)]=HEAP8[($tmp1_i16)];
 $6=$241;
 $7=$242;
 $8=$244;
 var $245=$6;
 var $246=$7;
 var $247=$8;
 $5=$247;
 var $248=$5;
 $2=$245;
 $3=$246;
 $4=$248;
 var $249=$2;
 var $250=$3;
 var $251=$250;
 var $252=($251|0)==0;
 if($252){var $257=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $254=$251;
 var $255=$4;
 $1=$255;
 var $256=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($254,$256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $257=$254;label=4;break;
 case 4: 
 var $257;
 label=5;break;
 case 5: 
 $18=$__h;
 var $259=$18;
 var $260=(($259)|0);
 $17=$260;
 var $261=$17;
 var $262=$261;
 $16=$262;
 var $263=$16;
 var $264=(($263+4)|0);
 var $265=(($264+4)|0);
 HEAP8[($265)]=1;
 var $266=$__na;
 $21=$__h;
 var $267=$21;
 var $268=(($267)|0);
 $20=$268;
 var $269=$20;
 var $270=$269;
 $19=$270;
 var $271=$19;
 var $272=(($271)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+8)|0);
 var $275=$274;
 var $276=(($275+12)|0);
 $22=$276;
 var $277=$22;
 var $278=$277;
 var $279=$278;
 $28=$266;
 $29=$279;
 var $280=$31;
 var $281=$28;
 var $282=$29;
 var $tmp_i=$27;
 var $tmp1_i=$30;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $25=$281;
 $26=$282;
 var $283=$25;
 var $284=$26;
 $23=$283;
 $24=$284;
 var $285=$23;
 var $286=$24;
 var $287=$286;
 var $288=($287|0)==0;
 if($288){var $291=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $290=$287;
 HEAP32[(($290)>>2)]=0;
 var $291=$290;label=7;break;
 case 7: 
 var $291;
 label=8;break;
 case 8: 
 $34=$__h;
 var $293=$34;
 var $294=(($293)|0);
 $33=$294;
 var $295=$33;
 var $296=$295;
 $32=$296;
 var $297=$32;
 var $298=(($297+4)|0);
 var $299=(($298+5)|0);
 HEAP8[($299)]=1;
 $35=$__h;
 var $300=$35;
 $61=$agg_result;
 $62=$300;
 var $301=$61;
 var $302=$62;
 $58=$301;
 $59=$302;
 var $303=$58;
 var $304=(($303)|0);
 var $305=$59;
 $57=$305;
 var $306=$57;
 var $307=(($306)|0);
 $56=$307;
 var $308=$56;
 var $309=$308;
 $55=$309;
 var $310=$55;
 var $311=(($310)|0);
 var $312=HEAP32[(($311)>>2)];
 $__t_i_i_i=$312;
 var $313=(($306)|0);
 $54=$313;
 var $314=$54;
 var $315=$314;
 $53=$315;
 var $316=$53;
 var $317=(($316)|0);
 HEAP32[(($317)>>2)]=0;
 var $318=$__t_i_i_i;
 var $319=$59;
 $52=$319;
 var $320=$52;
 var $321=(($320)|0);
 $51=$321;
 var $322=$51;
 var $323=$322;
 $50=$323;
 var $324=$50;
 var $325=(($324+4)|0);
 $36=$325;
 var $326=$36;
 var $327=$60;
 var $328=$326;
 assert(8 % 1 === 0);HEAP32[(($327)>>2)]=HEAP32[(($328)>>2)];HEAP32[((($327)+(4))>>2)]=HEAP32[((($328)+(4))>>2)];
 var $tmp_i_i9=$49;
 var $tmp1_i_i10=$60;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i9, $tmp1_i_i10, 8)|0);
 $47=$304;
 $48=$318;
 var $329=$47;
 var $330=$48;
 var $tmp_i_i_i11=$__t21_i_i_i8;
 var $tmp2_i_i_i12=$49;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i11, $tmp2_i_i_i12, 8)|0);
 $44=$329;
 HEAP32[(($45)>>2)]=$330;
 var $331=$44;
 var $332=$331;
 $43=$45;
 var $333=$43;
 var $334=HEAP32[(($333)>>2)];
 $37=$__t21_i_i_i8;
 var $335=$37;
 var $336=$46;
 var $337=$335;
 assert(8 % 1 === 0);HEAP32[(($336)>>2)]=HEAP32[(($337)>>2)];HEAP32[((($336)+(4))>>2)]=HEAP32[((($337)+(4))>>2)];
 var $tmp_i_i_i_i13=$42;
 var $tmp1_i_i_i_i14=$46;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i13, $tmp1_i_i_i_i14, 8)|0);
 $40=$332;
 HEAP32[(($41)>>2)]=$334;
 var $338=$40;
 var $339=(($338)|0);
 $39=$41;
 var $340=$39;
 var $341=HEAP32[(($340)>>2)];
 HEAP32[(($339)>>2)]=$341;
 var $342=(($338+4)|0);
 $38=$42;
 var $343=$38;
 var $344=$342;
 var $345=$343;
 assert(8 % 1 === 0);HEAP32[(($344)>>2)]=HEAP32[(($345)>>2)];HEAP32[((($344)+(4))>>2)]=HEAP32[((($345)+(4))>>2)];
 $173=1;
 $100=$__h;
 var $346=$100;
 $99=$346;
 var $347=$99;
 $97=$347;
 $98=0;
 var $348=$97;
 var $349=(($348)|0);
 $96=$349;
 var $350=$96;
 var $351=$350;
 $95=$351;
 var $352=$95;
 var $353=(($352)|0);
 var $354=HEAP32[(($353)>>2)];
 $__tmp_i_i_i1=$354;
 var $355=$98;
 var $356=(($348)|0);
 $70=$356;
 var $357=$70;
 var $358=$357;
 $69=$358;
 var $359=$69;
 var $360=(($359)|0);
 HEAP32[(($360)>>2)]=$355;
 var $361=$__tmp_i_i_i1;
 var $362=($361|0)!=0;
 if($362){label=9;break;}else{label=16;break;}
 case 9: 
 var $364=(($348)|0);
 $68=$364;
 var $365=$68;
 var $366=$365;
 $67=$366;
 var $367=$67;
 var $368=(($367+4)|0);
 var $369=$__tmp_i_i_i1;
 $93=$368;
 $94=$369;
 var $370=$93;
 var $371=(($370+5)|0);
 var $372=HEAP8[($371)];
 var $373=(($372)&1);
 if($373){label=10;break;}else{label=11;break;}
 case 10: 
 var $375=(($370)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=$94;
 var $378=(($377+8)|0);
 var $379=$378;
 var $380=(($379+12)|0);
 $92=$380;
 var $381=$92;
 var $382=$381;
 var $383=$382;
 $88=$376;
 $89=$383;
 var $384=$91;
 var $385=$88;
 var $386=$89;
 var $tmp_i_i_i_i_i2=$87;
 var $tmp1_i_i_i_i_i3=$90;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i2)]=HEAP8[($tmp1_i_i_i_i_i3)];
 $85=$385;
 $86=$386;
 var $387=$86;
 label=11;break;
 case 11: 
 var $389=(($370+4)|0);
 var $390=HEAP8[($389)];
 var $391=(($390)&1);
 if($391){label=12;break;}else{label=13;break;}
 case 12: 
 var $393=(($370)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$94;
 var $396=(($395+8)|0);
 var $397=$396;
 var $398=(($397)|0);
 $78=$398;
 var $399=$78;
 var $400=$399;
 var $401=$400;
 $74=$394;
 $75=$401;
 var $402=$77;
 var $403=$74;
 var $404=$75;
 var $tmp_i1_i_i_i_i4=$73;
 var $tmp1_i2_i_i_i_i5=$76;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i4)]=HEAP8[($tmp1_i2_i_i_i_i5)];
 $71=$403;
 $72=$404;
 var $405=$72;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($405);
 label=13;break;
 case 13: 
 var $407=$94;
 var $408=($407|0)!=0;
 if($408){label=14;break;}else{label=15;break;}
 case 14: 
 var $410=(($370)|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=$94;
 $82=$411;
 $83=$412;
 $84=1;
 var $413=$82;
 var $414=$83;
 var $415=$84;
 $79=$413;
 $80=$414;
 $81=$415;
 var $416=$79;
 var $417=$80;
 var $418=$417;
 __ZdlPv($418);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
 case 17: 
 var $420$0 = ___cxa_find_matching_catch(-1, -1); var $420$1 = tempRet0;
 var $421=$420$0;
 $171=$421;
 var $422=$420$1;
 $172=$422;
 $164=$__h;
 var $423=$164;
 $163=$423;
 var $424=$163;
 $161=$424;
 $162=0;
 var $425=$161;
 var $426=(($425)|0);
 $160=$426;
 var $427=$160;
 var $428=$427;
 $159=$428;
 var $429=$159;
 var $430=(($429)|0);
 var $431=HEAP32[(($430)>>2)];
 $__tmp_i_i_i=$431;
 var $432=$162;
 var $433=(($425)|0);
 $134=$433;
 var $434=$134;
 var $435=$434;
 $133=$435;
 var $436=$133;
 var $437=(($436)|0);
 HEAP32[(($437)>>2)]=$432;
 var $438=$__tmp_i_i_i;
 var $439=($438|0)!=0;
 if($439){label=18;break;}else{label=25;break;}
 case 18: 
 var $441=(($425)|0);
 $132=$441;
 var $442=$132;
 var $443=$442;
 $131=$443;
 var $444=$131;
 var $445=(($444+4)|0);
 var $446=$__tmp_i_i_i;
 $157=$445;
 $158=$446;
 var $447=$157;
 var $448=(($447+5)|0);
 var $449=HEAP8[($448)];
 var $450=(($449)&1);
 if($450){label=19;break;}else{label=20;break;}
 case 19: 
 var $452=(($447)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$158;
 var $455=(($454+8)|0);
 var $456=$455;
 var $457=(($456+12)|0);
 $156=$457;
 var $458=$156;
 var $459=$458;
 var $460=$459;
 $152=$453;
 $153=$460;
 var $461=$155;
 var $462=$152;
 var $463=$153;
 var $tmp_i_i_i_i_i=$151;
 var $tmp1_i_i_i_i_i=$154;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $149=$462;
 $150=$463;
 var $464=$150;
 label=20;break;
 case 20: 
 var $466=(($447+4)|0);
 var $467=HEAP8[($466)];
 var $468=(($467)&1);
 if($468){label=21;break;}else{label=22;break;}
 case 21: 
 var $470=(($447)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$158;
 var $473=(($472+8)|0);
 var $474=$473;
 var $475=(($474)|0);
 $142=$475;
 var $476=$142;
 var $477=$476;
 var $478=$477;
 $138=$471;
 $139=$478;
 var $479=$141;
 var $480=$138;
 var $481=$139;
 var $tmp_i1_i_i_i_i=$137;
 var $tmp1_i2_i_i_i_i=$140;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $135=$480;
 $136=$481;
 var $482=$136;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($482);
 label=22;break;
 case 22: 
 var $484=$158;
 var $485=($484|0)!=0;
 if($485){label=23;break;}else{label=24;break;}
 case 23: 
 var $487=(($447)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=$158;
 $146=$488;
 $147=$489;
 $148=1;
 var $490=$146;
 var $491=$147;
 var $492=$148;
 $143=$490;
 $144=$491;
 $145=$492;
 var $493=$143;
 var $494=$144;
 var $495=$494;
 __ZdlPv($495);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $497=$171;
 var $498=$172;
 var $499$0=$497;
 var $499$1=0;
 var $500$0=$499$0;
 var $500$1=$498;
 ___resumeException($500$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg_result,$this,$__nd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94=sp;
 var $95;
 var $96;
 var $97=(sp)+(8);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $__bc;
 var $__inserted=(sp)+(16);
 var $__ndptr;
 var $__chash;
 var $154=(sp)+(24);
 var $155=(sp)+(32);
 var $__pn;
 var $156=(sp)+(40);
 $152=$this;
 $153=$__nd;
 var $157=$152;
 $151=$157;
 var $158=$151;
 var $159=(($158+12)|0);
 $150=$159;
 var $160=$150;
 var $161=$160;
 $149=$161;
 var $162=$149;
 var $163=$162;
 var $164=$153;
 var $165=(($164+8)|0);
 $105=$163;
 $106=$165;
 var $166=$105;
 var $167=$166;
 var $168=$106;
 var $169=$168;
 var $170=(($169)|0);
 var $171=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($167,$170);
 var $172=$153;
 var $173=(($172+4)|0);
 HEAP32[(($173)>>2)]=$171;
 $104=$157;
 var $174=$104;
 var $175=(($174)|0);
 $103=$175;
 var $176=$103;
 var $177=(($176)|0);
 $102=$177;
 var $178=$102;
 var $179=$178;
 $101=$179;
 var $180=$101;
 var $181=(($180+4)|0);
 $100=$181;
 var $182=$100;
 var $183=(($182)|0);
 $99=$183;
 var $184=$99;
 var $185=$184;
 $98=$185;
 var $186=$98;
 var $187=(($186)|0);
 var $188=HEAP32[(($187)>>2)];
 $__bc=$188;
 HEAP8[($__inserted)]=0;
 var $189=$__bc;
 var $190=($189|0)!=0;
 if($190){label=2;break;}else{label=43;break;}
 case 2: 
 var $192=$153;
 var $193=(($192+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$__bc;
 $86=$194;
 $87=$195;
 var $196=$87;
 var $197=$87;
 var $198=((($197)-(1))|0);
 var $199=$196&$198;
 var $200=($199|0)!=0;
 if($200){label=4;break;}else{label=3;break;}
 case 3: 
 var $202=$86;
 var $203=$87;
 var $204=((($203)-(1))|0);
 var $205=$202&$204;
 var $210=$205;label=5;break;
 case 4: 
 var $207=$86;
 var $208=$87;
 var $209=(((($207>>>0))%(($208>>>0)))&-1);
 var $210=$209;label=5;break;
 case 5: 
 var $210;
 $__chash=$210;
 var $211=(($157)|0);
 var $212=$__chash;
 $8=$211;
 $9=$212;
 var $213=$8;
 var $214=$9;
 var $215=(($213)|0);
 $7=$215;
 var $216=$7;
 var $217=$216;
 $6=$217;
 var $218=$6;
 var $219=(($218)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+($214<<2))|0);
 var $222=HEAP32[(($221)>>2)];
 $__ndptr=$222;
 var $223=$__ndptr;
 var $224=($223|0)!=0;
 if($224){label=6;break;}else{label=42;break;}
 case 6: 
 var $226=$__ndptr;
 var $227=$226;
 var $228=(($227)|0);
 var $229=HEAP32[(($228)>>2)];
 $__ndptr=$229;
 label=7;break;
 case 7: 
 var $231=$__ndptr;
 var $232=($231|0)!=0;
 if($232){label=8;break;}else{var $256=0;label=12;break;}
 case 8: 
 var $234=$__ndptr;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=$__bc;
 $4=$236;
 $5=$237;
 var $238=$5;
 var $239=$5;
 var $240=((($239)-(1))|0);
 var $241=$238&$240;
 var $242=($241|0)!=0;
 if($242){label=10;break;}else{label=9;break;}
 case 9: 
 var $244=$4;
 var $245=$5;
 var $246=((($245)-(1))|0);
 var $247=$244&$246;
 var $252=$247;label=11;break;
 case 10: 
 var $249=$4;
 var $250=$5;
 var $251=(((($249>>>0))%(($250>>>0)))&-1);
 var $252=$251;label=11;break;
 case 11: 
 var $252;
 var $253=$__chash;
 var $254=($252|0)==($253|0);
 var $256=$254;label=12;break;
 case 12: 
 var $256;
 if($256){label=13;break;}else{label=41;break;}
 case 13: 
 $3=$157;
 var $258=$3;
 var $259=(($258+16)|0);
 $2=$259;
 var $260=$2;
 var $261=$260;
 $1=$261;
 var $262=$1;
 var $263=$262;
 var $264=$__ndptr;
 var $265=(($264+8)|0);
 var $266=$153;
 var $267=(($266+8)|0);
 $70=$263;
 $71=$265;
 $72=$267;
 var $268=$70;
 var $269=$268;
 var $270=$71;
 var $271=$270;
 var $272=(($271)|0);
 var $273=$72;
 var $274=$273;
 var $275=(($274)|0);
 $67=$269;
 $68=$272;
 $69=$275;
 var $276=$67;
 var $277=$68;
 var $278=$69;
 $65=$277;
 $66=$278;
 var $279=$65;
 $63=$279;
 var $280=$63;
 $62=$280;
 var $281=$62;
 var $282=(($281)|0);
 $61=$282;
 var $283=$61;
 var $284=$283;
 $60=$284;
 var $285=$60;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292&1;
 var $294=($293|0)!=0;
 if($294){label=14;break;}else{label=15;break;}
 case 14: 
 $56=$280;
 var $296=$56;
 var $297=(($296)|0);
 $55=$297;
 var $298=$55;
 var $299=$298;
 $54=$299;
 var $300=$54;
 var $301=(($300)|0);
 var $302=(($301)|0);
 var $303=$302;
 var $304=(($303+4)|0);
 var $305=HEAP32[(($304)>>2)];
 var $320=$305;label=16;break;
 case 15: 
 $59=$280;
 var $307=$59;
 var $308=(($307)|0);
 $58=$308;
 var $309=$58;
 var $310=$309;
 $57=$310;
 var $311=$57;
 var $312=(($311)|0);
 var $313=(($312)|0);
 var $314=$313;
 var $315=(($314)|0);
 var $316=$315;
 var $317=HEAP8[($316)];
 var $318=($317&255);
 var $319=$318>>1;
 var $320=$319;label=16;break;
 case 16: 
 var $320;
 $__lhs_sz_i_i_i=$320;
 var $321=$__lhs_sz_i_i_i;
 var $322=$66;
 $53=$322;
 var $323=$53;
 $52=$323;
 var $324=$52;
 var $325=(($324)|0);
 $51=$325;
 var $326=$51;
 var $327=$326;
 $50=$327;
 var $328=$50;
 var $329=(($328)|0);
 var $330=(($329)|0);
 var $331=$330;
 var $332=(($331)|0);
 var $333=$332;
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=$335&1;
 var $337=($336|0)!=0;
 if($337){label=17;break;}else{label=18;break;}
 case 17: 
 $46=$323;
 var $339=$46;
 var $340=(($339)|0);
 $45=$340;
 var $341=$45;
 var $342=$341;
 $44=$342;
 var $343=$44;
 var $344=(($343)|0);
 var $345=(($344)|0);
 var $346=$345;
 var $347=(($346+4)|0);
 var $348=HEAP32[(($347)>>2)];
 var $363=$348;label=19;break;
 case 18: 
 $49=$323;
 var $350=$49;
 var $351=(($350)|0);
 $48=$351;
 var $352=$48;
 var $353=$352;
 $47=$353;
 var $354=$47;
 var $355=(($354)|0);
 var $356=(($355)|0);
 var $357=$356;
 var $358=(($357)|0);
 var $359=$358;
 var $360=HEAP8[($359)];
 var $361=($360&255);
 var $362=$361>>1;
 var $363=$362;label=19;break;
 case 19: 
 var $363;
 var $364=($321|0)!=($363|0);
 if($364){label=20;break;}else{label=21;break;}
 case 20: 
 $64=0;
 label=37;break;
 case 21: 
 var $367=$65;
 $40=$367;
 var $368=$40;
 $39=$368;
 var $369=$39;
 $38=$369;
 var $370=$38;
 var $371=(($370)|0);
 $37=$371;
 var $372=$37;
 var $373=$372;
 $36=$373;
 var $374=$36;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377)|0);
 var $379=$378;
 var $380=HEAP8[($379)];
 var $381=($380&255);
 var $382=$381&1;
 var $383=($382|0)!=0;
 if($383){label=22;break;}else{label=23;break;}
 case 22: 
 $30=$369;
 var $385=$30;
 var $386=(($385)|0);
 $29=$386;
 var $387=$29;
 var $388=$387;
 $28=$388;
 var $389=$28;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392+8)|0);
 var $394=HEAP32[(($393)>>2)];
 var $408=$394;label=24;break;
 case 23: 
 $35=$369;
 var $396=$35;
 var $397=(($396)|0);
 $34=$397;
 var $398=$34;
 var $399=$398;
 $33=$399;
 var $400=$33;
 var $401=(($400)|0);
 var $402=(($401)|0);
 var $403=$402;
 var $404=(($403+1)|0);
 var $405=(($404)|0);
 $32=$405;
 var $406=$32;
 $31=$406;
 var $407=$31;
 var $408=$407;label=24;break;
 case 24: 
 var $408;
 $27=$408;
 var $409=$27;
 $__lp_i_i_i=$409;
 var $410=$66;
 $23=$410;
 var $411=$23;
 $22=$411;
 var $412=$22;
 $21=$412;
 var $413=$21;
 var $414=(($413)|0);
 $20=$414;
 var $415=$20;
 var $416=$415;
 $19=$416;
 var $417=$19;
 var $418=(($417)|0);
 var $419=(($418)|0);
 var $420=$419;
 var $421=(($420)|0);
 var $422=$421;
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=$424&1;
 var $426=($425|0)!=0;
 if($426){label=25;break;}else{label=26;break;}
 case 25: 
 $13=$412;
 var $428=$13;
 var $429=(($428)|0);
 $12=$429;
 var $430=$12;
 var $431=$430;
 $11=$431;
 var $432=$11;
 var $433=(($432)|0);
 var $434=(($433)|0);
 var $435=$434;
 var $436=(($435+8)|0);
 var $437=HEAP32[(($436)>>2)];
 var $451=$437;label=27;break;
 case 26: 
 $18=$412;
 var $439=$18;
 var $440=(($439)|0);
 $17=$440;
 var $441=$17;
 var $442=$441;
 $16=$442;
 var $443=$16;
 var $444=(($443)|0);
 var $445=(($444)|0);
 var $446=$445;
 var $447=(($446+1)|0);
 var $448=(($447)|0);
 $15=$448;
 var $449=$15;
 $14=$449;
 var $450=$14;
 var $451=$450;label=27;break;
 case 27: 
 var $451;
 $10=$451;
 var $452=$10;
 $__rp_i_i_i=$452;
 var $453=$65;
 $26=$453;
 var $454=$26;
 var $455=(($454)|0);
 $25=$455;
 var $456=$25;
 var $457=$456;
 $24=$457;
 var $458=$24;
 var $459=(($458)|0);
 var $460=(($459)|0);
 var $461=$460;
 var $462=(($461)|0);
 var $463=$462;
 var $464=HEAP8[($463)];
 var $465=($464&255);
 var $466=$465&1;
 var $467=($466|0)!=0;
 if($467){label=28;break;}else{label=30;break;}
 case 28: 
 var $469=$__lp_i_i_i;
 var $470=$__rp_i_i_i;
 var $471=$__lhs_sz_i_i_i;
 $41=$469;
 $42=$470;
 $43=$471;
 var $472=$41;
 var $473=$42;
 var $474=$43;
 var $475=(function() { try { __THREW__ = 0; return _memcmp($472,$473,$474) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $476=($475|0)==0;
 $64=$476;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $479=$__lhs_sz_i_i_i;
 var $480=($479|0)!=0;
 if($480){label=32;break;}else{label=35;break;}
 case 32: 
 var $482=$__lp_i_i_i;
 var $483=HEAP8[($482)];
 var $484=(($483<<24)>>24);
 var $485=$__rp_i_i_i;
 var $486=HEAP8[($485)];
 var $487=(($486<<24)>>24);
 var $488=($484|0)!=($487|0);
 if($488){label=33;break;}else{label=34;break;}
 case 33: 
 $64=0;
 label=37;break;
 case 34: 
 var $491=$__lhs_sz_i_i_i;
 var $492=((($491)-(1))|0);
 $__lhs_sz_i_i_i=$492;
 var $493=$__lp_i_i_i;
 var $494=(($493+1)|0);
 $__lp_i_i_i=$494;
 var $495=$__rp_i_i_i;
 var $496=(($495+1)|0);
 $__rp_i_i_i=$496;
 label=31;break;
 case 35: 
 $64=1;
 label=37;break;
 case 36: 
 var $499$0 = ___cxa_find_matching_catch(-1, -1,0); var $499$1 = tempRet0;
 var $500=$499$0;
 ___clang_call_terminate($500);
 throw "Reached an unreachable!";
 case 37: 
 var $501=$64;
 if($501){label=38;break;}else{label=39;break;}
 case 38: 
 label=63;break;
 case 39: 
 label=40;break;
 case 40: 
 var $505=$__ndptr;
 var $506=$505;
 var $507=(($506)|0);
 var $508=HEAP32[(($507)>>2)];
 $__ndptr=$508;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $75=$157;
 var $512=$75;
 var $513=(($512+12)|0);
 $74=$513;
 var $514=$74;
 var $515=$514;
 $73=$515;
 var $516=$73;
 var $517=(($516)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=((($518)+(1))|0);
 var $520=($519>>>0);
 var $521=$__bc;
 var $522=($521>>>0);
 $78=$157;
 var $523=$78;
 var $524=(($523+16)|0);
 $77=$524;
 var $525=$77;
 var $526=$525;
 $76=$526;
 var $527=$76;
 var $528=(($527)|0);
 var $529=HEAPF32[(($528)>>2)];
 var $530=($522)*($529);
 var $531=$520>$530;
 if($531){label=45;break;}else{label=44;break;}
 case 44: 
 var $533=$__bc;
 var $534=($533|0)==0;
 if($534){label=45;break;}else{label=54;break;}
 case 45: 
 var $536=$__bc;
 var $537=($536<<1);
 var $538=$__bc;
 $79=$538;
 var $539=$79;
 var $540=($539>>>0)>2;
 if($540){label=46;break;}else{var $548=0;label=47;break;}
 case 46: 
 var $542=$79;
 var $543=$79;
 var $544=((($543)-(1))|0);
 var $545=$542&$544;
 var $546=($545|0)!=0;
 var $547=$546^1;
 var $548=$547;label=47;break;
 case 47: 
 var $548;
 var $549=$548^1;
 var $550=($549&1);
 var $551=((($537)+($550))|0);
 HEAP32[(($154)>>2)]=$551;
 $82=$157;
 var $552=$82;
 var $553=(($552+12)|0);
 $81=$553;
 var $554=$81;
 var $555=$554;
 $80=$555;
 var $556=$80;
 var $557=(($556)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=((($558)+(1))|0);
 var $560=($559>>>0);
 $85=$157;
 var $561=$85;
 var $562=(($561+16)|0);
 $84=$562;
 var $563=$84;
 var $564=$563;
 $83=$564;
 var $565=$83;
 var $566=(($565)|0);
 var $567=HEAPF32[(($566)>>2)];
 var $568=($560)/($567);
 $88=$568;
 var $569=$88;
 var $570=Math_ceil($569);
 var $571=($570>=0 ? Math_floor($570) : Math_ceil($570));
 HEAP32[(($155)>>2)]=$571;
 $95=$154;
 $96=$155;
 var $572=$95;
 var $573=$96;
 var $tmp_i=$94;
 var $tmp1_i=$97;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $92=$572;
 $93=$573;
 var $574=$92;
 var $575=$93;
 $89=$94;
 $90=$574;
 $91=$575;
 var $576=$89;
 var $577=$90;
 var $578=HEAP32[(($577)>>2)];
 var $579=$91;
 var $580=HEAP32[(($579)>>2)];
 var $581=($578>>>0)<($580>>>0);
 if($581){label=48;break;}else{label=49;break;}
 case 48: 
 var $583=$93;
 var $586=$583;label=50;break;
 case 49: 
 var $585=$92;
 var $586=$585;label=50;break;
 case 50: 
 var $586;
 var $587=HEAP32[(($586)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($157,$587);
 $113=$157;
 var $588=$113;
 var $589=(($588)|0);
 $112=$589;
 var $590=$112;
 var $591=(($590)|0);
 $111=$591;
 var $592=$111;
 var $593=$592;
 $110=$593;
 var $594=$110;
 var $595=(($594+4)|0);
 $109=$595;
 var $596=$109;
 var $597=(($596)|0);
 $108=$597;
 var $598=$108;
 var $599=$598;
 $107=$599;
 var $600=$107;
 var $601=(($600)|0);
 var $602=HEAP32[(($601)>>2)];
 $__bc=$602;
 var $603=$153;
 var $604=(($603+4)|0);
 var $605=HEAP32[(($604)>>2)];
 var $606=$__bc;
 $114=$605;
 $115=$606;
 var $607=$115;
 var $608=$115;
 var $609=((($608)-(1))|0);
 var $610=$607&$609;
 var $611=($610|0)!=0;
 if($611){label=52;break;}else{label=51;break;}
 case 51: 
 var $613=$114;
 var $614=$115;
 var $615=((($614)-(1))|0);
 var $616=$613&$615;
 var $621=$616;label=53;break;
 case 52: 
 var $618=$114;
 var $619=$115;
 var $620=(((($618>>>0))%(($619>>>0)))&-1);
 var $621=$620;label=53;break;
 case 53: 
 var $621;
 $__chash=$621;
 label=54;break;
 case 54: 
 var $623=(($157)|0);
 var $624=$__chash;
 $118=$623;
 $119=$624;
 var $625=$118;
 var $626=$119;
 var $627=(($625)|0);
 $117=$627;
 var $628=$117;
 var $629=$628;
 $116=$629;
 var $630=$116;
 var $631=(($630)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(($632+($626<<2))|0);
 var $634=HEAP32[(($633)>>2)];
 $__pn=$634;
 var $635=$__pn;
 var $636=($635|0)==0;
 if($636){label=55;break;}else{label=61;break;}
 case 55: 
 var $638=(($157+8)|0);
 $121=$638;
 var $639=$121;
 var $640=$639;
 $120=$640;
 var $641=$120;
 var $642=(($641)|0);
 $123=$642;
 var $643=$123;
 $122=$643;
 var $644=$122;
 var $645=$644;
 var $646=$645;
 var $647=$646;
 $__pn=$647;
 var $648=$__pn;
 var $649=$648;
 var $650=(($649)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=$153;
 var $653=$652;
 var $654=(($653)|0);
 HEAP32[(($654)>>2)]=$651;
 var $655=$153;
 var $656=$__pn;
 var $657=$656;
 var $658=(($657)|0);
 HEAP32[(($658)>>2)]=$655;
 var $659=$__pn;
 var $660=(($157)|0);
 var $661=$__chash;
 $126=$660;
 $127=$661;
 var $662=$126;
 var $663=$127;
 var $664=(($662)|0);
 $125=$664;
 var $665=$125;
 var $666=$665;
 $124=$666;
 var $667=$124;
 var $668=(($667)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=(($669+($663<<2))|0);
 HEAP32[(($670)>>2)]=$659;
 var $671=$153;
 var $672=$671;
 var $673=(($672)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=($674|0)!=0;
 if($675){label=56;break;}else{label=60;break;}
 case 56: 
 var $677=$153;
 var $678=(($157)|0);
 var $679=$153;
 var $680=$679;
 var $681=(($680)|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=(($682+4)|0);
 var $684=HEAP32[(($683)>>2)];
 var $685=$__bc;
 $128=$684;
 $129=$685;
 var $686=$129;
 var $687=$129;
 var $688=((($687)-(1))|0);
 var $689=$686&$688;
 var $690=($689|0)!=0;
 if($690){label=58;break;}else{label=57;break;}
 case 57: 
 var $692=$128;
 var $693=$129;
 var $694=((($693)-(1))|0);
 var $695=$692&$694;
 var $700=$695;label=59;break;
 case 58: 
 var $697=$128;
 var $698=$129;
 var $699=(((($697>>>0))%(($698>>>0)))&-1);
 var $700=$699;label=59;break;
 case 59: 
 var $700;
 $132=$678;
 $133=$700;
 var $701=$132;
 var $702=$133;
 var $703=(($701)|0);
 $131=$703;
 var $704=$131;
 var $705=$704;
 $130=$705;
 var $706=$130;
 var $707=(($706)|0);
 var $708=HEAP32[(($707)>>2)];
 var $709=(($708+($702<<2))|0);
 HEAP32[(($709)>>2)]=$677;
 label=60;break;
 case 60: 
 label=62;break;
 case 61: 
 var $712=$__pn;
 var $713=$712;
 var $714=(($713)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=$153;
 var $717=$716;
 var $718=(($717)|0);
 HEAP32[(($718)>>2)]=$715;
 var $719=$153;
 var $720=$__pn;
 var $721=$720;
 var $722=(($721)|0);
 HEAP32[(($722)>>2)]=$719;
 label=62;break;
 case 62: 
 var $724=$153;
 $__ndptr=$724;
 $136=$157;
 var $725=$136;
 var $726=(($725+12)|0);
 $135=$726;
 var $727=$135;
 var $728=$727;
 $134=$728;
 var $729=$134;
 var $730=(($729)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=((($731)+(1))|0);
 HEAP32[(($730)>>2)]=$732;
 HEAP8[($__inserted)]=1;
 label=63;break;
 case 63: 
 var $734=$__ndptr;
 $139=$156;
 $140=$734;
 var $735=$139;
 var $736=$140;
 $137=$735;
 $138=$736;
 var $737=$137;
 var $738=(($737)|0);
 var $739=$138;
 HEAP32[(($738)>>2)]=$739;
 $146=$agg_result;
 $147=$156;
 $148=$__inserted;
 var $740=$146;
 var $741=$148;
 var $742=$147;
 $143=$740;
 $144=$742;
 $145=$741;
 var $743=$143;
 var $744=(($743)|0);
 var $745=$144;
 $142=$745;
 var $746=$142;
 var $747=$744;
 var $748=$746;
 assert(4 % 1 === 0);HEAP32[(($747)>>2)]=HEAP32[(($748)>>2)];
 var $749=(($743+4)|0);
 var $750=$145;
 $141=$750;
 var $751=$141;
 var $752=HEAP8[($751)];
 var $753=(($752)&1);
 var $754=($753&1);
 HEAP8[($749)]=$754;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=sp;
 var $23;
 var $24;
 var $25=(sp)+(8);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=(sp)+(16);
 var $__bc;
 var $36=(sp)+(24);
 $34=$this;
 HEAP32[(($35)>>2)]=$__n;
 var $37=$34;
 var $38=HEAP32[(($35)>>2)];
 var $39=($38|0)==1;
 if($39){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($35)>>2)]=2;
 label=6;break;
 case 3: 
 var $42=HEAP32[(($35)>>2)];
 var $43=HEAP32[(($35)>>2)];
 var $44=((($43)-(1))|0);
 var $45=$42&$44;
 var $46=($45|0)!=0;
 if($46){label=4;break;}else{label=5;break;}
 case 4: 
 var $48=HEAP32[(($35)>>2)];
 var $49=__ZNSt3__112__next_primeEj($48);
 HEAP32[(($35)>>2)]=$49;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 $33=$37;
 var $52=$33;
 var $53=(($52)|0);
 $32=$53;
 var $54=$32;
 var $55=(($54)|0);
 $31=$55;
 var $56=$31;
 var $57=$56;
 $30=$57;
 var $58=$30;
 var $59=(($58+4)|0);
 $29=$59;
 var $60=$29;
 var $61=(($60)|0);
 $28=$61;
 var $62=$28;
 var $63=$62;
 $27=$63;
 var $64=$27;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 $__bc=$66;
 var $67=HEAP32[(($35)>>2)];
 var $68=$__bc;
 var $69=($67>>>0)>($68>>>0);
 if($69){label=7;break;}else{label=8;break;}
 case 7: 
 var $71=HEAP32[(($35)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$71);
 label=21;break;
 case 8: 
 var $73=HEAP32[(($35)>>2)];
 var $74=$__bc;
 var $75=($73>>>0)<($74>>>0);
 if($75){label=9;break;}else{label=20;break;}
 case 9: 
 var $77=$__bc;
 $26=$77;
 var $78=$26;
 var $79=($78>>>0)>2;
 if($79){label=10;break;}else{var $87=0;label=11;break;}
 case 10: 
 var $81=$26;
 var $82=$26;
 var $83=((($82)-(1))|0);
 var $84=$81&$83;
 var $85=($84|0)!=0;
 var $86=$85^1;
 var $87=$86;label=11;break;
 case 11: 
 var $87;
 if($87){label=12;break;}else{label=13;break;}
 case 12: 
 $15=$37;
 var $89=$15;
 var $90=(($89+12)|0);
 $14=$90;
 var $91=$14;
 var $92=$91;
 $13=$92;
 var $93=$13;
 var $94=(($93)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95>>>0);
 $3=$37;
 var $97=$3;
 var $98=(($97+16)|0);
 $2=$98;
 var $99=$2;
 var $100=$99;
 $1=$100;
 var $101=$1;
 var $102=(($101)|0);
 var $103=HEAPF32[(($102)>>2)];
 var $104=($96)/($103);
 $4=$104;
 var $105=$4;
 var $106=Math_ceil($105);
 var $107=($106>=0 ? Math_floor($106) : Math_ceil($106));
 $6=$107;
 var $108=$6;
 var $109=((($108)-(1))|0);
 $5=$109;
 var $110=$5;
 var $111=_llvm_ctlz_i32($110,1);
 var $112=(((32)-($111))|0);
 var $113=1<<$112;
 var $136=$113;label=14;break;
 case 13: 
 $9=$37;
 var $115=$9;
 var $116=(($115+12)|0);
 $8=$116;
 var $117=$8;
 var $118=$117;
 $7=$118;
 var $119=$7;
 var $120=(($119)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($121>>>0);
 $12=$37;
 var $123=$12;
 var $124=(($123+16)|0);
 $11=$124;
 var $125=$11;
 var $126=$125;
 $10=$126;
 var $127=$10;
 var $128=(($127)|0);
 var $129=HEAPF32[(($128)>>2)];
 var $130=($122)/($129);
 $16=$130;
 var $131=$16;
 var $132=Math_ceil($131);
 var $133=($132>=0 ? Math_floor($132) : Math_ceil($132));
 var $134=__ZNSt3__112__next_primeEj($133);
 var $136=$134;label=14;break;
 case 14: 
 var $136;
 HEAP32[(($36)>>2)]=$136;
 $23=$35;
 $24=$36;
 var $137=$23;
 var $138=$24;
 var $tmp_i=$22;
 var $tmp1_i=$25;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $20=$137;
 $21=$138;
 var $139=$20;
 var $140=$21;
 $17=$22;
 $18=$139;
 $19=$140;
 var $141=$17;
 var $142=$18;
 var $143=HEAP32[(($142)>>2)];
 var $144=$19;
 var $145=HEAP32[(($144)>>2)];
 var $146=($143>>>0)<($145>>>0);
 if($146){label=15;break;}else{label=16;break;}
 case 15: 
 var $148=$21;
 var $151=$148;label=17;break;
 case 16: 
 var $150=$20;
 var $151=$150;label=17;break;
 case 17: 
 var $151;
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($35)>>2)]=$152;
 var $153=HEAP32[(($35)>>2)];
 var $154=$__bc;
 var $155=($153>>>0)<($154>>>0);
 if($155){label=18;break;}else{label=19;break;}
 case 18: 
 var $157=HEAP32[(($35)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$157);
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $__tmp_i;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $__npa;
 var $__i;
 var $__pp;
 var $__cp;
 var $__chash;
 var $__phash;
 var $__np;
 $138=$this;
 $139=$__nbc;
 var $140=$138;
 var $141=(($140)|0);
 $137=$141;
 var $142=$137;
 var $143=(($142)|0);
 $136=$143;
 var $144=$136;
 var $145=$144;
 $135=$145;
 var $146=$135;
 var $147=(($146+4)|0);
 $63=$147;
 var $148=$63;
 var $149=(($148)|0);
 $62=$149;
 var $150=$62;
 var $151=$150;
 $61=$151;
 var $152=$61;
 var $153=$152;
 $__npa=$153;
 var $154=(($140)|0);
 var $155=$139;
 var $156=($155>>>0)>0;
 if($156){label=2;break;}else{label=3;break;}
 case 2: 
 var $158=$__npa;
 var $159=$139;
 $59=$158;
 $60=$159;
 var $160=$59;
 var $161=$60;
 $56=$160;
 $57=$161;
 $58=0;
 var $162=$56;
 var $163=$57;
 var $164=($163<<2);
 var $165=__Znwj($164);
 var $166=$165;
 var $169=$166;label=4;break;
 case 3: 
 var $169=0;label=4;break;
 case 4: 
 var $169;
 $54=$154;
 $55=$169;
 var $170=$54;
 var $171=(($170)|0);
 $53=$171;
 var $172=$53;
 var $173=$172;
 $52=$173;
 var $174=$52;
 var $175=(($174)|0);
 var $176=HEAP32[(($175)>>2)];
 $__tmp_i=$176;
 var $177=$55;
 var $178=(($170)|0);
 $37=$178;
 var $179=$37;
 var $180=$179;
 $36=$180;
 var $181=$36;
 var $182=(($181)|0);
 HEAP32[(($182)>>2)]=$177;
 var $183=$__tmp_i;
 var $184=($183|0)!=0;
 if($184){label=5;break;}else{label=6;break;}
 case 5: 
 var $186=(($170)|0);
 $35=$186;
 var $187=$35;
 var $188=$187;
 $34=$188;
 var $189=$34;
 var $190=(($189+4)|0);
 var $191=$__tmp_i;
 $50=$190;
 $51=$191;
 var $192=$50;
 $49=$192;
 var $193=$49;
 var $194=(($193)|0);
 $48=$194;
 var $195=$48;
 var $196=$195;
 $47=$196;
 var $197=$47;
 var $198=$197;
 var $199=$51;
 $40=$192;
 var $200=$40;
 var $201=(($200)|0);
 $39=$201;
 var $202=$39;
 var $203=$202;
 $38=$203;
 var $204=$38;
 var $205=(($204)|0);
 var $206=HEAP32[(($205)>>2)];
 $44=$198;
 $45=$199;
 $46=$206;
 var $207=$44;
 var $208=$45;
 var $209=$46;
 $41=$207;
 $42=$208;
 $43=$209;
 var $210=$41;
 var $211=$42;
 var $212=$211;
 __ZdlPv($212);
 label=6;break;
 case 6: 
 var $213=$139;
 var $214=(($140)|0);
 $33=$214;
 var $215=$33;
 var $216=(($215)|0);
 $32=$216;
 var $217=$32;
 var $218=$217;
 $31=$218;
 var $219=$31;
 var $220=(($219+4)|0);
 $3=$220;
 var $221=$3;
 var $222=(($221)|0);
 $2=$222;
 var $223=$2;
 var $224=$223;
 $1=$224;
 var $225=$1;
 var $226=(($225)|0);
 HEAP32[(($226)>>2)]=$213;
 var $227=$139;
 var $228=($227>>>0)>0;
 if($228){label=7;break;}else{label=60;break;}
 case 7: 
 $__i=0;
 label=8;break;
 case 8: 
 var $231=$__i;
 var $232=$139;
 var $233=($231>>>0)<($232>>>0);
 if($233){label=9;break;}else{label=11;break;}
 case 9: 
 var $235=(($140)|0);
 var $236=$__i;
 $6=$235;
 $7=$236;
 var $237=$6;
 var $238=$7;
 var $239=(($237)|0);
 $5=$239;
 var $240=$5;
 var $241=$240;
 $4=$241;
 var $242=$4;
 var $243=(($242)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+($238<<2))|0);
 HEAP32[(($245)>>2)]=0;
 label=10;break;
 case 10: 
 var $247=$__i;
 var $248=((($247)+(1))|0);
 $__i=$248;
 label=8;break;
 case 11: 
 var $250=(($140+8)|0);
 $9=$250;
 var $251=$9;
 var $252=$251;
 $8=$252;
 var $253=$8;
 var $254=(($253)|0);
 $11=$254;
 var $255=$11;
 $10=$255;
 var $256=$10;
 var $257=$256;
 var $258=$257;
 var $259=$258;
 $__pp=$259;
 var $260=$__pp;
 var $261=$260;
 var $262=(($261)|0);
 var $263=HEAP32[(($262)>>2)];
 $__cp=$263;
 var $264=$__cp;
 var $265=($264|0)!=0;
 if($265){label=12;break;}else{label=59;break;}
 case 12: 
 var $267=$__cp;
 var $268=(($267+4)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=$139;
 $12=$269;
 $13=$270;
 var $271=$13;
 var $272=$13;
 var $273=((($272)-(1))|0);
 var $274=$271&$273;
 var $275=($274|0)!=0;
 if($275){label=14;break;}else{label=13;break;}
 case 13: 
 var $277=$12;
 var $278=$13;
 var $279=((($278)-(1))|0);
 var $280=$277&$279;
 var $285=$280;label=15;break;
 case 14: 
 var $282=$12;
 var $283=$13;
 var $284=(((($282>>>0))%(($283>>>0)))&-1);
 var $285=$284;label=15;break;
 case 15: 
 var $285;
 $__chash=$285;
 var $286=$__pp;
 var $287=(($140)|0);
 var $288=$__chash;
 $16=$287;
 $17=$288;
 var $289=$16;
 var $290=$17;
 var $291=(($289)|0);
 $15=$291;
 var $292=$15;
 var $293=$292;
 $14=$293;
 var $294=$14;
 var $295=(($294)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+($290<<2))|0);
 HEAP32[(($297)>>2)]=$286;
 var $298=$__chash;
 $__phash=$298;
 var $299=$__cp;
 $__pp=$299;
 var $300=$__cp;
 var $301=$300;
 var $302=(($301)|0);
 var $303=HEAP32[(($302)>>2)];
 $__cp=$303;
 label=16;break;
 case 16: 
 var $305=$__cp;
 var $306=($305|0)!=0;
 if($306){label=17;break;}else{label=58;break;}
 case 17: 
 var $308=$__cp;
 var $309=(($308+4)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$139;
 $18=$310;
 $19=$311;
 var $312=$19;
 var $313=$19;
 var $314=((($313)-(1))|0);
 var $315=$312&$314;
 var $316=($315|0)!=0;
 if($316){label=19;break;}else{label=18;break;}
 case 18: 
 var $318=$18;
 var $319=$19;
 var $320=((($319)-(1))|0);
 var $321=$318&$320;
 var $326=$321;label=20;break;
 case 19: 
 var $323=$18;
 var $324=$19;
 var $325=(((($323>>>0))%(($324>>>0)))&-1);
 var $326=$325;label=20;break;
 case 20: 
 var $326;
 $__chash=$326;
 var $327=$__chash;
 var $328=$__phash;
 var $329=($327|0)==($328|0);
 if($329){label=21;break;}else{label=22;break;}
 case 21: 
 var $331=$__cp;
 $__pp=$331;
 label=56;break;
 case 22: 
 var $333=(($140)|0);
 var $334=$__chash;
 $22=$333;
 $23=$334;
 var $335=$22;
 var $336=$23;
 var $337=(($335)|0);
 $21=$337;
 var $338=$21;
 var $339=$338;
 $20=$339;
 var $340=$20;
 var $341=(($340)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($342+($336<<2))|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=23;break;}else{label=24;break;}
 case 23: 
 var $347=$__pp;
 var $348=(($140)|0);
 var $349=$__chash;
 $26=$348;
 $27=$349;
 var $350=$26;
 var $351=$27;
 var $352=(($350)|0);
 $25=$352;
 var $353=$25;
 var $354=$353;
 $24=$354;
 var $355=$24;
 var $356=(($355)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+($351<<2))|0);
 HEAP32[(($358)>>2)]=$347;
 var $359=$__cp;
 $__pp=$359;
 var $360=$__chash;
 $__phash=$360;
 label=55;break;
 case 24: 
 var $362=$__cp;
 $__np=$362;
 label=25;break;
 case 25: 
 var $364=$__np;
 var $365=$364;
 var $366=(($365)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($367|0)!=0;
 if($368){label=26;break;}else{var $618=0;label=51;break;}
 case 26: 
 $30=$140;
 var $370=$30;
 var $371=(($370+16)|0);
 $29=$371;
 var $372=$29;
 var $373=$372;
 $28=$373;
 var $374=$28;
 var $375=$374;
 var $376=$__cp;
 var $377=(($376+8)|0);
 var $378=$__np;
 var $379=$378;
 var $380=(($379)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($381+8)|0);
 $124=$375;
 $125=$377;
 $126=$382;
 var $383=$124;
 var $384=$383;
 var $385=$125;
 var $386=$385;
 var $387=(($386)|0);
 var $388=$126;
 var $389=$388;
 var $390=(($389)|0);
 $121=$384;
 $122=$387;
 $123=$390;
 var $391=$121;
 var $392=$122;
 var $393=$123;
 $119=$392;
 $120=$393;
 var $394=$119;
 $117=$394;
 var $395=$117;
 $116=$395;
 var $396=$116;
 var $397=(($396)|0);
 $115=$397;
 var $398=$115;
 var $399=$398;
 $114=$399;
 var $400=$114;
 var $401=(($400)|0);
 var $402=(($401)|0);
 var $403=$402;
 var $404=(($403)|0);
 var $405=$404;
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=$407&1;
 var $409=($408|0)!=0;
 if($409){label=27;break;}else{label=28;break;}
 case 27: 
 $110=$395;
 var $411=$110;
 var $412=(($411)|0);
 $109=$412;
 var $413=$109;
 var $414=$413;
 $108=$414;
 var $415=$108;
 var $416=(($415)|0);
 var $417=(($416)|0);
 var $418=$417;
 var $419=(($418+4)|0);
 var $420=HEAP32[(($419)>>2)];
 var $435=$420;label=29;break;
 case 28: 
 $113=$395;
 var $422=$113;
 var $423=(($422)|0);
 $112=$423;
 var $424=$112;
 var $425=$424;
 $111=$425;
 var $426=$111;
 var $427=(($426)|0);
 var $428=(($427)|0);
 var $429=$428;
 var $430=(($429)|0);
 var $431=$430;
 var $432=HEAP8[($431)];
 var $433=($432&255);
 var $434=$433>>1;
 var $435=$434;label=29;break;
 case 29: 
 var $435;
 $__lhs_sz_i_i_i=$435;
 var $436=$__lhs_sz_i_i_i;
 var $437=$120;
 $107=$437;
 var $438=$107;
 $106=$438;
 var $439=$106;
 var $440=(($439)|0);
 $105=$440;
 var $441=$105;
 var $442=$441;
 $104=$442;
 var $443=$104;
 var $444=(($443)|0);
 var $445=(($444)|0);
 var $446=$445;
 var $447=(($446)|0);
 var $448=$447;
 var $449=HEAP8[($448)];
 var $450=($449&255);
 var $451=$450&1;
 var $452=($451|0)!=0;
 if($452){label=30;break;}else{label=31;break;}
 case 30: 
 $100=$438;
 var $454=$100;
 var $455=(($454)|0);
 $99=$455;
 var $456=$99;
 var $457=$456;
 $98=$457;
 var $458=$98;
 var $459=(($458)|0);
 var $460=(($459)|0);
 var $461=$460;
 var $462=(($461+4)|0);
 var $463=HEAP32[(($462)>>2)];
 var $478=$463;label=32;break;
 case 31: 
 $103=$438;
 var $465=$103;
 var $466=(($465)|0);
 $102=$466;
 var $467=$102;
 var $468=$467;
 $101=$468;
 var $469=$101;
 var $470=(($469)|0);
 var $471=(($470)|0);
 var $472=$471;
 var $473=(($472)|0);
 var $474=$473;
 var $475=HEAP8[($474)];
 var $476=($475&255);
 var $477=$476>>1;
 var $478=$477;label=32;break;
 case 32: 
 var $478;
 var $479=($436|0)!=($478|0);
 if($479){label=33;break;}else{label=34;break;}
 case 33: 
 $118=0;
 label=50;break;
 case 34: 
 var $482=$119;
 $94=$482;
 var $483=$94;
 $93=$483;
 var $484=$93;
 $92=$484;
 var $485=$92;
 var $486=(($485)|0);
 $91=$486;
 var $487=$91;
 var $488=$487;
 $90=$488;
 var $489=$90;
 var $490=(($489)|0);
 var $491=(($490)|0);
 var $492=$491;
 var $493=(($492)|0);
 var $494=$493;
 var $495=HEAP8[($494)];
 var $496=($495&255);
 var $497=$496&1;
 var $498=($497|0)!=0;
 if($498){label=35;break;}else{label=36;break;}
 case 35: 
 $84=$484;
 var $500=$84;
 var $501=(($500)|0);
 $83=$501;
 var $502=$83;
 var $503=$502;
 $82=$503;
 var $504=$82;
 var $505=(($504)|0);
 var $506=(($505)|0);
 var $507=$506;
 var $508=(($507+8)|0);
 var $509=HEAP32[(($508)>>2)];
 var $523=$509;label=37;break;
 case 36: 
 $89=$484;
 var $511=$89;
 var $512=(($511)|0);
 $88=$512;
 var $513=$88;
 var $514=$513;
 $87=$514;
 var $515=$87;
 var $516=(($515)|0);
 var $517=(($516)|0);
 var $518=$517;
 var $519=(($518+1)|0);
 var $520=(($519)|0);
 $86=$520;
 var $521=$86;
 $85=$521;
 var $522=$85;
 var $523=$522;label=37;break;
 case 37: 
 var $523;
 $81=$523;
 var $524=$81;
 $__lp_i_i_i=$524;
 var $525=$120;
 $77=$525;
 var $526=$77;
 $76=$526;
 var $527=$76;
 $75=$527;
 var $528=$75;
 var $529=(($528)|0);
 $74=$529;
 var $530=$74;
 var $531=$530;
 $73=$531;
 var $532=$73;
 var $533=(($532)|0);
 var $534=(($533)|0);
 var $535=$534;
 var $536=(($535)|0);
 var $537=$536;
 var $538=HEAP8[($537)];
 var $539=($538&255);
 var $540=$539&1;
 var $541=($540|0)!=0;
 if($541){label=38;break;}else{label=39;break;}
 case 38: 
 $67=$527;
 var $543=$67;
 var $544=(($543)|0);
 $66=$544;
 var $545=$66;
 var $546=$545;
 $65=$546;
 var $547=$65;
 var $548=(($547)|0);
 var $549=(($548)|0);
 var $550=$549;
 var $551=(($550+8)|0);
 var $552=HEAP32[(($551)>>2)];
 var $566=$552;label=40;break;
 case 39: 
 $72=$527;
 var $554=$72;
 var $555=(($554)|0);
 $71=$555;
 var $556=$71;
 var $557=$556;
 $70=$557;
 var $558=$70;
 var $559=(($558)|0);
 var $560=(($559)|0);
 var $561=$560;
 var $562=(($561+1)|0);
 var $563=(($562)|0);
 $69=$563;
 var $564=$69;
 $68=$564;
 var $565=$68;
 var $566=$565;label=40;break;
 case 40: 
 var $566;
 $64=$566;
 var $567=$64;
 $__rp_i_i_i=$567;
 var $568=$119;
 $80=$568;
 var $569=$80;
 var $570=(($569)|0);
 $79=$570;
 var $571=$79;
 var $572=$571;
 $78=$572;
 var $573=$78;
 var $574=(($573)|0);
 var $575=(($574)|0);
 var $576=$575;
 var $577=(($576)|0);
 var $578=$577;
 var $579=HEAP8[($578)];
 var $580=($579&255);
 var $581=$580&1;
 var $582=($581|0)!=0;
 if($582){label=41;break;}else{label=43;break;}
 case 41: 
 var $584=$__lp_i_i_i;
 var $585=$__rp_i_i_i;
 var $586=$__lhs_sz_i_i_i;
 $95=$584;
 $96=$585;
 $97=$586;
 var $587=$95;
 var $588=$96;
 var $589=$97;
 var $590=(function() { try { __THREW__ = 0; return _memcmp($587,$588,$589) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=49;break; }
 case 42: 
 var $591=($590|0)==0;
 $118=$591;
 label=50;break;
 case 43: 
 label=44;break;
 case 44: 
 var $594=$__lhs_sz_i_i_i;
 var $595=($594|0)!=0;
 if($595){label=45;break;}else{label=48;break;}
 case 45: 
 var $597=$__lp_i_i_i;
 var $598=HEAP8[($597)];
 var $599=(($598<<24)>>24);
 var $600=$__rp_i_i_i;
 var $601=HEAP8[($600)];
 var $602=(($601<<24)>>24);
 var $603=($599|0)!=($602|0);
 if($603){label=46;break;}else{label=47;break;}
 case 46: 
 $118=0;
 label=50;break;
 case 47: 
 var $606=$__lhs_sz_i_i_i;
 var $607=((($606)-(1))|0);
 $__lhs_sz_i_i_i=$607;
 var $608=$__lp_i_i_i;
 var $609=(($608+1)|0);
 $__lp_i_i_i=$609;
 var $610=$__rp_i_i_i;
 var $611=(($610+1)|0);
 $__rp_i_i_i=$611;
 label=44;break;
 case 48: 
 $118=1;
 label=50;break;
 case 49: 
 var $614$0 = ___cxa_find_matching_catch(-1, -1,0); var $614$1 = tempRet0;
 var $615=$614$0;
 ___clang_call_terminate($615);
 throw "Reached an unreachable!";
 case 50: 
 var $616=$118;
 var $618=$616;label=51;break;
 case 51: 
 var $618;
 if($618){label=52;break;}else{label=54;break;}
 case 52: 
 label=53;break;
 case 53: 
 var $621=$__np;
 var $622=$621;
 var $623=(($622)|0);
 var $624=HEAP32[(($623)>>2)];
 $__np=$624;
 label=25;break;
 case 54: 
 var $626=$__np;
 var $627=$626;
 var $628=(($627)|0);
 var $629=HEAP32[(($628)>>2)];
 var $630=$__pp;
 var $631=$630;
 var $632=(($631)|0);
 HEAP32[(($632)>>2)]=$629;
 var $633=(($140)|0);
 var $634=$__chash;
 $129=$633;
 $130=$634;
 var $635=$129;
 var $636=$130;
 var $637=(($635)|0);
 $128=$637;
 var $638=$128;
 var $639=$638;
 $127=$639;
 var $640=$127;
 var $641=(($640)|0);
 var $642=HEAP32[(($641)>>2)];
 var $643=(($642+($636<<2))|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=$644;
 var $646=(($645)|0);
 var $647=HEAP32[(($646)>>2)];
 var $648=$__np;
 var $649=$648;
 var $650=(($649)|0);
 HEAP32[(($650)>>2)]=$647;
 var $651=$__cp;
 var $652=(($140)|0);
 var $653=$__chash;
 $133=$652;
 $134=$653;
 var $654=$133;
 var $655=$134;
 var $656=(($654)|0);
 $132=$656;
 var $657=$132;
 var $658=$657;
 $131=$658;
 var $659=$131;
 var $660=(($659)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+($655<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=$663;
 var $665=(($664)|0);
 HEAP32[(($665)>>2)]=$651;
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $669=$__pp;
 var $670=$669;
 var $671=(($670)|0);
 var $672=HEAP32[(($671)>>2)];
 $__cp=$672;
 label=16;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($this,$__val){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13=sp;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 $42=$this;
 $43=$__val;
 var $44=$42;
 var $45=$43;
 $41=$45;
 var $46=$41;
 $40=$46;
 var $47=$40;
 $39=$47;
 var $48=$39;
 var $49=(($48)|0);
 $38=$49;
 var $50=$38;
 var $51=$50;
 $37=$51;
 var $52=$37;
 var $53=(($52)|0);
 var $54=(($53)|0);
 var $55=$54;
 var $56=(($55)|0);
 var $57=$56;
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59&1;
 var $61=($60|0)!=0;
 if($61){label=2;break;}else{label=3;break;}
 case 2: 
 $31=$47;
 var $63=$31;
 var $64=(($63)|0);
 $30=$64;
 var $65=$30;
 var $66=$65;
 $29=$66;
 var $67=$29;
 var $68=(($67)|0);
 var $69=(($68)|0);
 var $70=$69;
 var $71=(($70+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $86=$72;label=4;break;
 case 3: 
 $36=$47;
 var $74=$36;
 var $75=(($74)|0);
 $35=$75;
 var $76=$35;
 var $77=$76;
 $34=$77;
 var $78=$34;
 var $79=(($78)|0);
 var $80=(($79)|0);
 var $81=$80;
 var $82=(($81+1)|0);
 var $83=(($82)|0);
 $33=$83;
 var $84=$33;
 $32=$84;
 var $85=$32;
 var $86=$85;label=4;break;
 case 4: 
 var $86;
 $28=$86;
 var $87=$28;
 var $88=$43;
 $27=$88;
 var $89=$27;
 $26=$89;
 var $90=$26;
 $25=$90;
 var $91=$25;
 var $92=(($91)|0);
 $24=$92;
 var $93=$24;
 var $94=$93;
 $23=$94;
 var $95=$23;
 var $96=(($95)|0);
 var $97=(($96)|0);
 var $98=$97;
 var $99=(($98)|0);
 var $100=$99;
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$102&1;
 var $104=($103|0)!=0;
 if($104){label=5;break;}else{label=6;break;}
 case 5: 
 $17=$90;
 var $106=$17;
 var $107=(($106)|0);
 $16=$107;
 var $108=$16;
 var $109=$108;
 $15=$109;
 var $110=$15;
 var $111=(($110)|0);
 var $112=(($111)|0);
 var $113=$112;
 var $114=(($113+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $129=$115;label=7;break;
 case 6: 
 $22=$90;
 var $117=$22;
 var $118=(($117)|0);
 $21=$118;
 var $119=$21;
 var $120=$119;
 $20=$120;
 var $121=$20;
 var $122=(($121)|0);
 var $123=(($122)|0);
 var $124=$123;
 var $125=(($124+1)|0);
 var $126=(($125)|0);
 $19=$126;
 var $127=$19;
 $18=$127;
 var $128=$18;
 var $129=$128;label=7;break;
 case 7: 
 var $129;
 $14=$129;
 var $130=$14;
 var $131=$43;
 $10=$131;
 var $132=$10;
 $9=$132;
 var $133=$9;
 var $134=(($133)|0);
 $8=$134;
 var $135=$8;
 var $136=$135;
 $7=$136;
 var $137=$7;
 var $138=(($137)|0);
 var $139=(($138)|0);
 var $140=$139;
 var $141=(($140)|0);
 var $142=$141;
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=$144&1;
 var $146=($145|0)!=0;
 if($146){label=8;break;}else{label=9;break;}
 case 8: 
 $3=$132;
 var $148=$3;
 var $149=(($148)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=(($153)|0);
 var $155=$154;
 var $156=(($155+4)|0);
 var $157=HEAP32[(($156)>>2)];
 var $172=$157;label=10;break;
 case 9: 
 $6=$132;
 var $159=$6;
 var $160=(($159)|0);
 $5=$160;
 var $161=$5;
 var $162=$161;
 $4=$162;
 var $163=$4;
 var $164=(($163)|0);
 var $165=(($164)|0);
 var $166=$165;
 var $167=(($166)|0);
 var $168=$167;
 var $169=HEAP8[($168)];
 var $170=($169&255);
 var $171=$170>>1;
 var $172=$171;label=10;break;
 case 10: 
 var $172;
 var $173=(($130+$172)|0);
 $11=$87;
 $12=$173;
 var $174=$11;
 var $175=$12;
 var $176=$11;
 var $177=$175;
 var $178=$176;
 var $179=((($177)-($178))|0);
 var $180=(function() { try { __THREW__ = 0; return __ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj($13,$174,$179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return $180;
 case 13: 
 var $183$0 = ___cxa_find_matching_catch(-1, -1,0); var $183$1 = tempRet0;
 var $184=$183$0;
 ___clang_call_terminate($184);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj($this,$__key,$__len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $__r_i=sp;
 var $2;
 var $3;
 var $4;
 var $__m;
 var $__r;
 var $__h;
 var $__data;
 var $__k;
 $2=$this;
 $3=$__key;
 $4=$__len;
 var $5=$2;
 $__m=1540483477;
 $__r=24;
 var $6=$4;
 $__h=$6;
 var $7=$3;
 $__data=$7;
 label=2;break;
 case 2: 
 var $9=$4;
 var $10=($9>>>0)>=4;
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=$__data;
 $1=$12;
 var $13=$__r_i;
 var $14=$1;
 assert(4 % 1 === 0);HEAP8[($13)]=HEAP8[($14)];HEAP8[((($13)+(1))|0)]=HEAP8[((($14)+(1))|0)];HEAP8[((($13)+(2))|0)]=HEAP8[((($14)+(2))|0)];HEAP8[((($13)+(3))|0)]=HEAP8[((($14)+(3))|0)];
 var $15=HEAP32[(($__r_i)>>2)];
 $__k=$15;
 var $16=$__k;
 var $17=(Math_imul($16,1540483477)|0);
 $__k=$17;
 var $18=$__k;
 var $19=$18>>>24;
 var $20=$__k;
 var $21=$20^$19;
 $__k=$21;
 var $22=$__k;
 var $23=(Math_imul($22,1540483477)|0);
 $__k=$23;
 var $24=$__h;
 var $25=(Math_imul($24,1540483477)|0);
 $__h=$25;
 var $26=$__k;
 var $27=$__h;
 var $28=$27^$26;
 $__h=$28;
 label=4;break;
 case 4: 
 var $30=$__data;
 var $31=(($30+4)|0);
 $__data=$31;
 var $32=$4;
 var $33=((($32)-(4))|0);
 $4=$33;
 label=2;break;
 case 5: 
 var $35=$4;
 if(($35|0)==3){ label=6;break;}else if(($35|0)==2){ label=7;break;}else if(($35|0)==1){ label=8;break;}else{label=9;break;}
 case 6: 
 var $37=$__data;
 var $38=(($37+2)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=$40<<16;
 var $42=$__h;
 var $43=$42^$41;
 $__h=$43;
 label=7;break;
 case 7: 
 var $45=$__data;
 var $46=(($45+1)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=$48<<8;
 var $50=$__h;
 var $51=$50^$49;
 $__h=$51;
 label=8;break;
 case 8: 
 var $53=$__data;
 var $54=(($53)|0);
 var $55=HEAP8[($54)];
 var $56=($55&255);
 var $57=$__h;
 var $58=$57^$56;
 $__h=$58;
 var $59=$__h;
 var $60=(Math_imul($59,1540483477)|0);
 $__h=$60;
 label=9;break;
 case 9: 
 var $62=$__h;
 var $63=$62>>>13;
 var $64=$__h;
 var $65=$64^$63;
 $__h=$65;
 var $66=$__h;
 var $67=(Math_imul($66,1540483477)|0);
 $__h=$67;
 var $68=$__h;
 var $69=$68>>>15;
 var $70=$__h;
 var $71=$70^$69;
 $__h=$71;
 var $72=$__h;
 STACKTOP=sp;return $72;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__hash;
 var $__bc;
 var $__chash;
 var $__nd;
 $96=$this;
 $97=$__k;
 var $98=$96;
 $95=$98;
 var $99=$95;
 var $100=(($99+12)|0);
 $94=$100;
 var $101=$94;
 var $102=$101;
 $93=$102;
 var $103=$93;
 var $104=$103;
 var $105=$97;
 $19=$104;
 $20=$105;
 var $106=$19;
 var $107=$106;
 var $108=$20;
 var $109=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108);
 $__hash=$109;
 $18=$98;
 var $110=$18;
 var $111=(($110)|0);
 $17=$111;
 var $112=$17;
 var $113=(($112)|0);
 $16=$113;
 var $114=$16;
 var $115=$114;
 $15=$115;
 var $116=$15;
 var $117=(($116+4)|0);
 $14=$117;
 var $118=$14;
 var $119=(($118)|0);
 $13=$119;
 var $120=$13;
 var $121=$120;
 $12=$121;
 var $122=$12;
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 $__bc=$124;
 var $125=$__bc;
 var $126=($125|0)!=0;
 if($126){label=2;break;}else{label=43;break;}
 case 2: 
 var $128=$__hash;
 var $129=$__bc;
 $10=$128;
 $11=$129;
 var $130=$11;
 var $131=$11;
 var $132=((($131)-(1))|0);
 var $133=$130&$132;
 var $134=($133|0)!=0;
 if($134){label=4;break;}else{label=3;break;}
 case 3: 
 var $136=$10;
 var $137=$11;
 var $138=((($137)-(1))|0);
 var $139=$136&$138;
 var $144=$139;label=5;break;
 case 4: 
 var $141=$10;
 var $142=$11;
 var $143=(((($141>>>0))%(($142>>>0)))&-1);
 var $144=$143;label=5;break;
 case 5: 
 var $144;
 $__chash=$144;
 var $145=(($98)|0);
 var $146=$__chash;
 $3=$145;
 $4=$146;
 var $147=$3;
 var $148=$4;
 var $149=(($147)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+($148<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 $__nd=$156;
 var $157=$__nd;
 var $158=($157|0)!=0;
 if($158){label=6;break;}else{label=42;break;}
 case 6: 
 var $160=$__nd;
 var $161=$160;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 $__nd=$163;
 label=7;break;
 case 7: 
 var $165=$__nd;
 var $166=($165|0)!=0;
 if($166){label=8;break;}else{var $190=0;label=12;break;}
 case 8: 
 var $168=$__nd;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$__bc;
 $5=$170;
 $6=$171;
 var $172=$6;
 var $173=$6;
 var $174=((($173)-(1))|0);
 var $175=$172&$174;
 var $176=($175|0)!=0;
 if($176){label=10;break;}else{label=9;break;}
 case 9: 
 var $178=$5;
 var $179=$6;
 var $180=((($179)-(1))|0);
 var $181=$178&$180;
 var $186=$181;label=11;break;
 case 10: 
 var $183=$5;
 var $184=$6;
 var $185=(((($183>>>0))%(($184>>>0)))&-1);
 var $186=$185;label=11;break;
 case 11: 
 var $186;
 var $187=$__chash;
 var $188=($186|0)==($187|0);
 var $190=$188;label=12;break;
 case 12: 
 var $190;
 if($190){label=13;break;}else{label=41;break;}
 case 13: 
 $9=$98;
 var $192=$9;
 var $193=(($192+16)|0);
 $8=$193;
 var $194=$8;
 var $195=$194;
 $7=$195;
 var $196=$7;
 var $197=$196;
 var $198=$__nd;
 var $199=(($198+8)|0);
 var $200=$97;
 $81=$197;
 $82=$199;
 $83=$200;
 var $201=$81;
 var $202=$201;
 var $203=$82;
 var $204=$203;
 var $205=(($204)|0);
 var $206=$83;
 $78=$202;
 $79=$205;
 $80=$206;
 var $207=$78;
 var $208=$79;
 var $209=$80;
 $76=$208;
 $77=$209;
 var $210=$76;
 $74=$210;
 var $211=$74;
 $73=$211;
 var $212=$73;
 var $213=(($212)|0);
 $72=$213;
 var $214=$72;
 var $215=$214;
 $71=$215;
 var $216=$71;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219)|0);
 var $221=$220;
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&1;
 var $225=($224|0)!=0;
 if($225){label=14;break;}else{label=15;break;}
 case 14: 
 $67=$211;
 var $227=$67;
 var $228=(($227)|0);
 $66=$228;
 var $229=$66;
 var $230=$229;
 $65=$230;
 var $231=$65;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $251=$236;label=16;break;
 case 15: 
 $70=$211;
 var $238=$70;
 var $239=(($238)|0);
 $69=$239;
 var $240=$69;
 var $241=$240;
 $68=$241;
 var $242=$68;
 var $243=(($242)|0);
 var $244=(($243)|0);
 var $245=$244;
 var $246=(($245)|0);
 var $247=$246;
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249>>1;
 var $251=$250;label=16;break;
 case 16: 
 var $251;
 $__lhs_sz_i_i_i=$251;
 var $252=$__lhs_sz_i_i_i;
 var $253=$77;
 $64=$253;
 var $254=$64;
 $63=$254;
 var $255=$63;
 var $256=(($255)|0);
 $62=$256;
 var $257=$62;
 var $258=$257;
 $61=$258;
 var $259=$61;
 var $260=(($259)|0);
 var $261=(($260)|0);
 var $262=$261;
 var $263=(($262)|0);
 var $264=$263;
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$266&1;
 var $268=($267|0)!=0;
 if($268){label=17;break;}else{label=18;break;}
 case 17: 
 $57=$254;
 var $270=$57;
 var $271=(($270)|0);
 $56=$271;
 var $272=$56;
 var $273=$272;
 $55=$273;
 var $274=$55;
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=$276;
 var $278=(($277+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $294=$279;label=19;break;
 case 18: 
 $60=$254;
 var $281=$60;
 var $282=(($281)|0);
 $59=$282;
 var $283=$59;
 var $284=$283;
 $58=$284;
 var $285=$58;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292>>1;
 var $294=$293;label=19;break;
 case 19: 
 var $294;
 var $295=($252|0)!=($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 $75=0;
 label=37;break;
 case 21: 
 var $298=$76;
 $51=$298;
 var $299=$51;
 $50=$299;
 var $300=$50;
 $49=$300;
 var $301=$49;
 var $302=(($301)|0);
 $48=$302;
 var $303=$48;
 var $304=$303;
 $47=$304;
 var $305=$47;
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$307;
 var $309=(($308)|0);
 var $310=$309;
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312&1;
 var $314=($313|0)!=0;
 if($314){label=22;break;}else{label=23;break;}
 case 22: 
 $41=$300;
 var $316=$41;
 var $317=(($316)|0);
 $40=$317;
 var $318=$40;
 var $319=$318;
 $39=$319;
 var $320=$39;
 var $321=(($320)|0);
 var $322=(($321)|0);
 var $323=$322;
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 var $339=$325;label=24;break;
 case 23: 
 $46=$300;
 var $327=$46;
 var $328=(($327)|0);
 $45=$328;
 var $329=$45;
 var $330=$329;
 $44=$330;
 var $331=$44;
 var $332=(($331)|0);
 var $333=(($332)|0);
 var $334=$333;
 var $335=(($334+1)|0);
 var $336=(($335)|0);
 $43=$336;
 var $337=$43;
 $42=$337;
 var $338=$42;
 var $339=$338;label=24;break;
 case 24: 
 var $339;
 $38=$339;
 var $340=$38;
 $__lp_i_i_i=$340;
 var $341=$77;
 $34=$341;
 var $342=$34;
 $33=$342;
 var $343=$33;
 $32=$343;
 var $344=$32;
 var $345=(($344)|0);
 $31=$345;
 var $346=$31;
 var $347=$346;
 $30=$347;
 var $348=$30;
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=$350;
 var $352=(($351)|0);
 var $353=$352;
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355&1;
 var $357=($356|0)!=0;
 if($357){label=25;break;}else{label=26;break;}
 case 25: 
 $24=$343;
 var $359=$24;
 var $360=(($359)|0);
 $23=$360;
 var $361=$23;
 var $362=$361;
 $22=$362;
 var $363=$22;
 var $364=(($363)|0);
 var $365=(($364)|0);
 var $366=$365;
 var $367=(($366+8)|0);
 var $368=HEAP32[(($367)>>2)];
 var $382=$368;label=27;break;
 case 26: 
 $29=$343;
 var $370=$29;
 var $371=(($370)|0);
 $28=$371;
 var $372=$28;
 var $373=$372;
 $27=$373;
 var $374=$27;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377+1)|0);
 var $379=(($378)|0);
 $26=$379;
 var $380=$26;
 $25=$380;
 var $381=$25;
 var $382=$381;label=27;break;
 case 27: 
 var $382;
 $21=$382;
 var $383=$21;
 $__rp_i_i_i=$383;
 var $384=$76;
 $37=$384;
 var $385=$37;
 var $386=(($385)|0);
 $36=$386;
 var $387=$36;
 var $388=$387;
 $35=$388;
 var $389=$35;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392)|0);
 var $394=$393;
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$396&1;
 var $398=($397|0)!=0;
 if($398){label=28;break;}else{label=30;break;}
 case 28: 
 var $400=$__lp_i_i_i;
 var $401=$__rp_i_i_i;
 var $402=$__lhs_sz_i_i_i;
 $52=$400;
 $53=$401;
 $54=$402;
 var $403=$52;
 var $404=$53;
 var $405=$54;
 var $406=(function() { try { __THREW__ = 0; return _memcmp($403,$404,$405) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $407=($406|0)==0;
 $75=$407;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $410=$__lhs_sz_i_i_i;
 var $411=($410|0)!=0;
 if($411){label=32;break;}else{label=35;break;}
 case 32: 
 var $413=$__lp_i_i_i;
 var $414=HEAP8[($413)];
 var $415=(($414<<24)>>24);
 var $416=$__rp_i_i_i;
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24);
 var $419=($415|0)!=($418|0);
 if($419){label=33;break;}else{label=34;break;}
 case 33: 
 $75=0;
 label=37;break;
 case 34: 
 var $422=$__lhs_sz_i_i_i;
 var $423=((($422)-(1))|0);
 $__lhs_sz_i_i_i=$423;
 var $424=$__lp_i_i_i;
 var $425=(($424+1)|0);
 $__lp_i_i_i=$425;
 var $426=$__rp_i_i_i;
 var $427=(($426+1)|0);
 $__rp_i_i_i=$427;
 label=31;break;
 case 35: 
 $75=1;
 label=37;break;
 case 36: 
 var $430$0 = ___cxa_find_matching_catch(-1, -1,0); var $430$1 = tempRet0;
 var $431=$430$0;
 ___clang_call_terminate($431);
 throw "Reached an unreachable!";
 case 37: 
 var $432=$75;
 if($432){label=38;break;}else{label=39;break;}
 case 38: 
 var $434=$__nd;
 $86=$agg_result;
 $87=$434;
 var $435=$86;
 var $436=$87;
 $84=$435;
 $85=$436;
 var $437=$84;
 var $438=(($437)|0);
 var $439=$85;
 HEAP32[(($438)>>2)]=$439;
 label=44;break;
 case 39: 
 label=40;break;
 case 40: 
 var $442=$__nd;
 var $443=$442;
 var $444=(($443)|0);
 var $445=HEAP32[(($444)>>2)];
 $__nd=$445;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $92=$98;
 var $449=$92;
 $90=$agg_result;
 $91=0;
 var $450=$90;
 var $451=$91;
 $88=$450;
 $89=$451;
 var $452=$88;
 var $453=(($452)|0);
 var $454=$89;
 HEAP32[(($453)>>2)]=$454;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSC_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $__t_i;
 var $12;
 var $__i1_i_i_i=sp;
 var $13;
 var $14=(sp)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(16);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30=(sp)+(24);
 var $31;
 var $32;
 var $33=(sp)+(32);
 var $34=(sp)+(40);
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44=(sp)+(48);
 var $45;
 var $46;
 var $47=(sp)+(56);
 var $48=(sp)+(64);
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $__tmp_i_i_i6;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79=(sp)+(72);
 var $80;
 var $81;
 var $82=(sp)+(80);
 var $83=(sp)+(88);
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93=(sp)+(96);
 var $94;
 var $95;
 var $96=(sp)+(104);
 var $97=(sp)+(112);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $__tmp_i_i_i;
 var $105;
 var $106;
 var $107;
 var $__i1_i_i1=(sp)+(120);
 var $108;
 var $109=(sp)+(128);
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116=(sp)+(136);
 var $117;
 var $__i1_i_i=(sp)+(144);
 var $118;
 var $119=(sp)+(152);
 var $120;
 var $121;
 var $122=(sp)+(160);
 var $123;
 var $124;
 var $125;
 var $__i=(sp)+(168);
 var $126=(sp)+(176);
 var $__h=(sp)+(184);
 var $__r=(sp)+(200);
 var $127=(sp)+(208);
 var $128;
 var $129;
 var $130;
 $124=$this;
 $125=$__k;
 var $131=$124;
 var $132=$125;
 $120=$131;
 $121=$132;
 var $133=$120;
 var $134=(($133)|0);
 var $135=$121;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($122,$134,$135);
 var $tmp_i=$119;
 var $tmp1_i=$122;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $118=$__i;
 var $136=$118;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$119;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $117=$136;
 var $137=$117;
 var $138=(($137)|0);
 var $139=$138;
 var $140=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];
 $115=$131;
 var $141=$115;
 var $142=(($141)|0);
 $114=$142;
 var $143=$114;
 $112=$116;
 $113=0;
 var $144=$112;
 var $145=$113;
 $110=$144;
 $111=$145;
 var $146=$110;
 var $147=(($146)|0);
 var $148=$111;
 HEAP32[(($147)>>2)]=$148;
 var $tmp_i2=$109;
 var $tmp1_i3=$116;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $108=$126;
 var $149=$108;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$109;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $107=$149;
 var $150=$107;
 var $151=(($150)|0);
 var $152=$151;
 var $153=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];
 $71=$__i;
 $72=$126;
 var $154=$71;
 var $155=(($154)|0);
 var $156=$72;
 var $157=(($156)|0);
 $69=$155;
 $70=$157;
 var $158=$69;
 var $159=$70;
 $67=$158;
 $68=$159;
 var $160=$67;
 var $161=(($160)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$68;
 var $164=(($163)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($162|0)==($165|0);
 var $167=$166^1;
 if($167){label=2;break;}else{label=3;break;}
 case 2: 
 $66=$__i;
 var $169=$66;
 var $170=(($169)|0);
 $65=$170;
 var $171=$65;
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+8)|0);
 $64=$174;
 var $175=$64;
 $63=$175;
 var $176=$63;
 var $177=$176;
 var $178=$177;
 var $179=$178;
 $62=$179;
 var $180=$62;
 $61=$180;
 var $181=$61;
 var $182=$181;
 var $183=$182;
 var $184=(($183+12)|0);
 $123=$184;
 label=24;break;
 case 3: 
 var $186=$125;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSC_($__h,$131,$186);
 var $187=(($131)|0);
 $60=$__h;
 var $188=$60;
 var $189=(($188)|0);
 $59=$189;
 var $190=$59;
 var $191=$190;
 $58=$191;
 var $192=$58;
 var $193=(($192)|0);
 var $194=HEAP32[(($193)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($127,$187,$194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 $21=$__r;
 $22=$127;
 $23=0;
 var $196=$21;
 var $197=$23;
 var $198=$22;
 $17=$196;
 $18=$198;
 $19=$197;
 var $199=$17;
 var $200=(($199)|0);
 var $201=$18;
 var $202=(($201)|0);
 $16=$202;
 var $203=$16;
 var $204=$20;
 var $205=$203;
 assert(4 % 1 === 0);HEAP32[(($204)>>2)]=HEAP32[(($205)>>2)];
 var $tmp_i_i13=$14;
 var $tmp1_i_i=$20;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i13)]=HEAP8[($tmp1_i_i)];HEAP8[((($tmp_i_i13)+(1))|0)]=HEAP8[((($tmp1_i_i)+(1))|0)];HEAP8[((($tmp_i_i13)+(2))|0)]=HEAP8[((($tmp1_i_i)+(2))|0)];HEAP8[((($tmp_i_i13)+(3))|0)]=HEAP8[((($tmp1_i_i)+(3))|0)];
 $13=$200;
 var $206=$13;
 var $tmp_i_i_i=$__i1_i_i_i;
 var $tmp2_i_i_i=$14;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp2_i_i_i)];HEAP8[((($tmp_i_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i_i)+(3))|0)];
 $12=$206;
 var $207=$12;
 var $208=(($207)|0);
 var $209=$208;
 var $210=$__i1_i_i_i;
 assert(4 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($210)>>2)];
 var $211=(($199+4)|0);
 var $212=$18;
 var $213=(($212+4)|0);
 $15=$213;
 var $214=$15;
 var $215=HEAP8[($214)];
 var $216=(($215)&1);
 var $217=($216&1);
 HEAP8[($211)]=$217;
 label=5;break;
 case 5: 
 $11=$__h;
 var $219=$11;
 var $220=(($219)|0);
 $10=$220;
 var $221=$10;
 var $222=$221;
 $9=$222;
 var $223=$9;
 var $224=(($223)|0);
 var $225=HEAP32[(($224)>>2)];
 $__t_i=$225;
 var $226=(($219)|0);
 $8=$226;
 var $227=$8;
 var $228=$227;
 $7=$228;
 var $229=$7;
 var $230=(($229)|0);
 HEAP32[(($230)>>2)]=0;
 var $231=$__t_i;
 var $232=(($__r)|0);
 $6=$232;
 var $233=$6;
 var $234=(($233)|0);
 $5=$234;
 var $235=$5;
 var $236=(($235)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+8)|0);
 $4=$238;
 var $239=$4;
 $3=$239;
 var $240=$3;
 var $241=$240;
 var $242=$241;
 var $243=$242;
 $2=$243;
 var $244=$2;
 $1=$244;
 var $245=$1;
 var $246=$245;
 var $247=$246;
 label=6;break;
 case 6: 
 var $249=(($247+12)|0);
 $123=$249;
 $130=1;
 $57=$__h;
 var $250=$57;
 $56=$250;
 var $251=$56;
 $54=$251;
 $55=0;
 var $252=$54;
 var $253=(($252)|0);
 $53=$253;
 var $254=$53;
 var $255=$254;
 $52=$255;
 var $256=$52;
 var $257=(($256)|0);
 var $258=HEAP32[(($257)>>2)];
 $__tmp_i_i_i6=$258;
 var $259=$55;
 var $260=(($252)|0);
 $27=$260;
 var $261=$27;
 var $262=$261;
 $26=$262;
 var $263=$26;
 var $264=(($263)|0);
 HEAP32[(($264)>>2)]=$259;
 var $265=$__tmp_i_i_i6;
 var $266=($265|0)!=0;
 if($266){label=7;break;}else{label=14;break;}
 case 7: 
 var $268=(($252)|0);
 $25=$268;
 var $269=$25;
 var $270=$269;
 $24=$270;
 var $271=$24;
 var $272=(($271+4)|0);
 var $273=$__tmp_i_i_i6;
 $50=$272;
 $51=$273;
 var $274=$50;
 var $275=(($274+5)|0);
 var $276=HEAP8[($275)];
 var $277=(($276)&1);
 if($277){label=8;break;}else{label=9;break;}
 case 8: 
 var $279=(($274)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=$51;
 var $282=(($281+8)|0);
 var $283=$282;
 var $284=(($283+12)|0);
 $49=$284;
 var $285=$49;
 var $286=$285;
 var $287=$286;
 $45=$280;
 $46=$287;
 var $288=$48;
 var $289=$45;
 var $290=$46;
 var $tmp_i_i_i_i_i7=$44;
 var $tmp1_i_i_i_i_i8=$47;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i7)]=HEAP8[($tmp1_i_i_i_i_i8)];
 $42=$289;
 $43=$290;
 var $291=$43;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($291);
 label=9;break;
 case 9: 
 var $293=(($274+4)|0);
 var $294=HEAP8[($293)];
 var $295=(($294)&1);
 if($295){label=10;break;}else{label=11;break;}
 case 10: 
 var $297=(($274)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$51;
 var $300=(($299+8)|0);
 var $301=$300;
 var $302=(($301)|0);
 $41=$302;
 var $303=$41;
 var $304=$303;
 var $305=$304;
 $31=$298;
 $32=$305;
 var $306=$34;
 var $307=$31;
 var $308=$32;
 var $tmp_i1_i_i_i_i9=$30;
 var $tmp1_i2_i_i_i_i10=$33;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i9)]=HEAP8[($tmp1_i2_i_i_i_i10)];
 $28=$307;
 $29=$308;
 var $309=$29;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($309);
 label=11;break;
 case 11: 
 var $311=$51;
 var $312=($311|0)!=0;
 if($312){label=12;break;}else{label=13;break;}
 case 12: 
 var $314=(($274)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=$51;
 $38=$315;
 $39=$316;
 $40=1;
 var $317=$38;
 var $318=$39;
 var $319=$40;
 $35=$317;
 $36=$318;
 $37=$319;
 var $320=$35;
 var $321=$36;
 var $322=$321;
 __ZdlPv($322);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=24;break;
 case 15: 
 var $324$0 = ___cxa_find_matching_catch(-1, -1); var $324$1 = tempRet0;
 var $325=$324$0;
 $128=$325;
 var $326=$324$1;
 $129=$326;
 $106=$__h;
 var $327=$106;
 $105=$327;
 var $328=$105;
 $103=$328;
 $104=0;
 var $329=$103;
 var $330=(($329)|0);
 $102=$330;
 var $331=$102;
 var $332=$331;
 $101=$332;
 var $333=$101;
 var $334=(($333)|0);
 var $335=HEAP32[(($334)>>2)];
 $__tmp_i_i_i=$335;
 var $336=$104;
 var $337=(($329)|0);
 $76=$337;
 var $338=$76;
 var $339=$338;
 $75=$339;
 var $340=$75;
 var $341=(($340)|0);
 HEAP32[(($341)>>2)]=$336;
 var $342=$__tmp_i_i_i;
 var $343=($342|0)!=0;
 if($343){label=16;break;}else{label=23;break;}
 case 16: 
 var $345=(($329)|0);
 $74=$345;
 var $346=$74;
 var $347=$346;
 $73=$347;
 var $348=$73;
 var $349=(($348+4)|0);
 var $350=$__tmp_i_i_i;
 $99=$349;
 $100=$350;
 var $351=$99;
 var $352=(($351+5)|0);
 var $353=HEAP8[($352)];
 var $354=(($353)&1);
 if($354){label=17;break;}else{label=18;break;}
 case 17: 
 var $356=(($351)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=$100;
 var $359=(($358+8)|0);
 var $360=$359;
 var $361=(($360+12)|0);
 $98=$361;
 var $362=$98;
 var $363=$362;
 var $364=$363;
 $94=$357;
 $95=$364;
 var $365=$97;
 var $366=$94;
 var $367=$95;
 var $tmp_i_i_i_i_i=$93;
 var $tmp1_i_i_i_i_i=$96;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $91=$366;
 $92=$367;
 var $368=$92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($368);
 label=18;break;
 case 18: 
 var $370=(($351+4)|0);
 var $371=HEAP8[($370)];
 var $372=(($371)&1);
 if($372){label=19;break;}else{label=20;break;}
 case 19: 
 var $374=(($351)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=$100;
 var $377=(($376+8)|0);
 var $378=$377;
 var $379=(($378)|0);
 $90=$379;
 var $380=$90;
 var $381=$380;
 var $382=$381;
 $80=$375;
 $81=$382;
 var $383=$83;
 var $384=$80;
 var $385=$81;
 var $tmp_i1_i_i_i_i=$79;
 var $tmp1_i2_i_i_i_i=$82;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $77=$384;
 $78=$385;
 var $386=$78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($386);
 label=20;break;
 case 20: 
 var $388=$100;
 var $389=($388|0)!=0;
 if($389){label=21;break;}else{label=22;break;}
 case 21: 
 var $391=(($351)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$100;
 $87=$392;
 $88=$393;
 $89=1;
 var $394=$87;
 var $395=$88;
 var $396=$89;
 $84=$394;
 $85=$395;
 $86=$396;
 var $397=$84;
 var $398=$85;
 var $399=$398;
 __ZdlPv($399);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=25;break;
 case 24: 
 var $401=$123;
 STACKTOP=sp;return $401;
 case 25: 
 var $403=$128;
 var $404=$129;
 var $405$0=$403;
 var $405$1=0;
 var $406$0=$405$0;
 var $406$1=$404;
 ___resumeException($406$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSC_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $__a_i_i_i_i_i_i;
 var $__i_i_i_i_i_i_i;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15=sp;
 var $16;
 var $17;
 var $18=(sp)+(8);
 var $19=(sp)+(16);
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29=(sp)+(24);
 var $30=(sp)+(32);
 var $31;
 var $32;
 var $33=(sp)+(40);
 var $34=(sp)+(48);
 var $__t21_i_i_i8=(sp)+(56);
 var $35;
 var $36;
 var $37=(sp)+(64);
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $__t_i_i_i;
 var $46;
 var $47;
 var $48=(sp)+(72);
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65=(sp)+(80);
 var $66;
 var $67;
 var $68;
 var $69;
 var $70=(sp)+(88);
 var $71=(sp)+(96);
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79=(sp)+(104);
 var $80;
 var $81;
 var $82=(sp)+(112);
 var $83=(sp)+(120);
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93=(sp)+(128);
 var $94;
 var $95;
 var $96=(sp)+(136);
 var $97=(sp)+(144);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $__tmp_i_i_i1;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114=(sp)+(152);
 var $115=(sp)+(160);
 var $116;
 var $117;
 var $118=(sp)+(168);
 var $119=(sp)+(176);
 var $__t21_i_i_i=(sp)+(184);
 var $120;
 var $121;
 var $122=(sp)+(192);
 var $123;
 var $124;
 var $125;
 var $126;
 var $127=(sp)+(200);
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146=(sp)+(208);
 var $147;
 var $148;
 var $149=(sp)+(216);
 var $150=(sp)+(224);
 var $151;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157;
 var $158;
 var $159;
 var $160=(sp)+(232);
 var $161;
 var $162;
 var $163=(sp)+(240);
 var $164=(sp)+(248);
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $__tmp_i_i_i;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $__na;
 var $__h=(sp)+(256);
 var $179=(sp)+(272);
 var $180;
 var $181;
 var $182;
 $177=$this;
 $178=$__k;
 var $183=$177;
 var $184=(($183)|0);
 $176=$184;
 var $185=$176;
 var $186=(($185+8)|0);
 $175=$186;
 var $187=$175;
 var $188=$187;
 $174=$188;
 var $189=$174;
 var $190=$189;
 $__na=$190;
 var $191=$__na;
 $138=$191;
 $139=1;
 var $192=$138;
 var $193=$139;
 $135=$192;
 $136=$193;
 $137=0;
 var $194=$135;
 var $195=$136;
 var $196=($195<<5);
 var $197=__Znwj($196);
 var $198=$197;
 var $199=$__na;
 $133=$179;
 $134=$199;
 var $200=$133;
 var $201=$134;
 $131=$200;
 $132=$201;
 var $202=$131;
 var $203=(($202)|0);
 var $204=$132;
 HEAP32[(($203)>>2)]=$204;
 var $205=(($202+4)|0);
 HEAP8[($205)]=0;
 var $206=(($202+5)|0);
 HEAP8[($206)]=0;
 $128=$__h;
 $129=$198;
 $130=$179;
 var $207=$128;
 var $208=$129;
 var $209=$130;
 $124=$207;
 $125=$208;
 $126=$209;
 var $210=$124;
 var $211=(($210)|0);
 var $212=$125;
 var $213=$126;
 $123=$213;
 var $214=$123;
 var $215=$127;
 var $216=$214;
 assert(8 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];
 var $tmp_i_i=$122;
 var $tmp1_i_i=$127;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $120=$211;
 $121=$212;
 var $217=$120;
 var $218=$121;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$122;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $117=$217;
 HEAP32[(($118)>>2)]=$218;
 var $219=$117;
 var $220=$219;
 $116=$118;
 var $221=$116;
 var $222=HEAP32[(($221)>>2)];
 $110=$__t21_i_i_i;
 var $223=$110;
 var $224=$119;
 var $225=$223;
 assert(8 % 1 === 0);HEAP32[(($224)>>2)]=HEAP32[(($225)>>2)];HEAP32[((($224)+(4))>>2)]=HEAP32[((($225)+(4))>>2)];
 var $tmp_i_i_i_i=$115;
 var $tmp1_i_i_i_i=$119;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $113=$220;
 HEAP32[(($114)>>2)]=$222;
 var $226=$113;
 var $227=(($226)|0);
 $112=$114;
 var $228=$112;
 var $229=HEAP32[(($228)>>2)];
 HEAP32[(($227)>>2)]=$229;
 var $230=(($226+4)|0);
 $111=$115;
 var $231=$111;
 var $232=$230;
 var $233=$231;
 assert(8 % 1 === 0);HEAP32[(($232)>>2)]=HEAP32[(($233)>>2)];HEAP32[((($232)+(4))>>2)]=HEAP32[((($233)+(4))>>2)];
 var $234=$__na;
 $109=$__h;
 var $235=$109;
 var $236=(($235)|0);
 $108=$236;
 var $237=$108;
 var $238=$237;
 $107=$238;
 var $239=$107;
 var $240=(($239)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241+8)|0);
 var $243=$242;
 var $244=(($243)|0);
 $72=$244;
 var $245=$72;
 var $246=$245;
 var $247=$246;
 var $248=$178;
 $67=$234;
 $68=$247;
 $69=$248;
 var $249=$71;
 var $250=$67;
 var $251=$68;
 var $252=$69;
 $66=$252;
 var $253=$66;
 var $tmp_i=$65;
 var $tmp1_i=$70;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $62=$250;
 $63=$251;
 $64=$253;
 var $254=$62;
 var $255=$63;
 var $256=$64;
 $61=$256;
 var $257=$61;
 $58=$254;
 $59=$255;
 $60=$257;
 var $258=$58;
 var $259=$59;
 var $260=$259;
 var $261=($260|0)==0;
 if($261){var $266=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $263=$260;
 var $264=$60;
 $57=$264;
 var $265=$57;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($263,$265) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $266=$263;label=4;break;
 case 4: 
 var $266;
 label=5;break;
 case 5: 
 $56=$__h;
 var $268=$56;
 var $269=(($268)|0);
 $55=$269;
 var $270=$55;
 var $271=$270;
 $54=$271;
 var $272=$54;
 var $273=(($272+4)|0);
 var $274=(($273+4)|0);
 HEAP8[($274)]=1;
 var $275=$__na;
 $53=$__h;
 var $276=$53;
 var $277=(($276)|0);
 $52=$277;
 var $278=$52;
 var $279=$278;
 $51=$279;
 var $280=$51;
 var $281=(($280)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=(($282+8)|0);
 var $284=$283;
 var $285=(($284+12)|0);
 $1=$285;
 var $286=$1;
 var $287=$286;
 var $288=$287;
 $16=$275;
 $17=$288;
 var $289=$19;
 var $290=$16;
 var $291=$17;
 var $tmp_i15=$15;
 var $tmp1_i16=$18;
 assert(1 % 1 === 0);HEAP8[($tmp_i15)]=HEAP8[($tmp1_i16)];
 $13=$290;
 $14=$291;
 var $292=$13;
 var $293=$14;
 $11=$292;
 $12=$293;
 var $294=$11;
 var $295=$12;
 var $296=$295;
 var $297=($296|0)==0;
 if($297){var $329=0;label=10;break;}else{label=6;break;}
 case 6: 
 var $299=$296;
 $10=$299;
 var $300=$10;
 $9=$300;
 var $301=$9;
 var $302=$301;
 var $303=(($301)|0);
 $8=$303;
 var $304=$8;
 $7=$304;
 var $305=$7;
 var $306=$305;
 $6=$306;
 var $307=$6;
 var $308=$307;
 $5=$308;
 var $309=$5;
 var $310=(($307)|0);
 $4=$301;
 var $311=$4;
 var $312=(($311)|0);
 $3=$312;
 var $313=$3;
 var $314=$313;
 $2=$314;
 var $315=$2;
 var $316=(($315)|0);
 var $317=(($316)|0);
 var $318=$317;
 var $319=(($318)|0);
 $__a_i_i_i_i_i_i=$319;
 $__i_i_i_i_i_i_i=0;
 label=7;break;
 case 7: 
 var $321=$__i_i_i_i_i_i_i;
 var $322=($321>>>0)<3;
 if($322){label=8;break;}else{label=9;break;}
 case 8: 
 var $324=$__i_i_i_i_i_i_i;
 var $325=$__a_i_i_i_i_i_i;
 var $326=(($325+($324<<2))|0);
 HEAP32[(($326)>>2)]=0;
 var $327=$__i_i_i_i_i_i_i;
 var $328=((($327)+(1))|0);
 $__i_i_i_i_i_i_i=$328;
 label=7;break;
 case 9: 
 var $329=$299;label=10;break;
 case 10: 
 var $329;
 label=11;break;
 case 11: 
 $22=$__h;
 var $331=$22;
 var $332=(($331)|0);
 $21=$332;
 var $333=$21;
 var $334=$333;
 $20=$334;
 var $335=$20;
 var $336=(($335+4)|0);
 var $337=(($336+5)|0);
 HEAP8[($337)]=1;
 $23=$__h;
 var $338=$23;
 $49=$agg_result;
 $50=$338;
 var $339=$49;
 var $340=$50;
 $46=$339;
 $47=$340;
 var $341=$46;
 var $342=(($341)|0);
 var $343=$47;
 $45=$343;
 var $344=$45;
 var $345=(($344)|0);
 $44=$345;
 var $346=$44;
 var $347=$346;
 $43=$347;
 var $348=$43;
 var $349=(($348)|0);
 var $350=HEAP32[(($349)>>2)];
 $__t_i_i_i=$350;
 var $351=(($344)|0);
 $42=$351;
 var $352=$42;
 var $353=$352;
 $41=$353;
 var $354=$41;
 var $355=(($354)|0);
 HEAP32[(($355)>>2)]=0;
 var $356=$__t_i_i_i;
 var $357=$47;
 $40=$357;
 var $358=$40;
 var $359=(($358)|0);
 $39=$359;
 var $360=$39;
 var $361=$360;
 $38=$361;
 var $362=$38;
 var $363=(($362+4)|0);
 $24=$363;
 var $364=$24;
 var $365=$48;
 var $366=$364;
 assert(8 % 1 === 0);HEAP32[(($365)>>2)]=HEAP32[(($366)>>2)];HEAP32[((($365)+(4))>>2)]=HEAP32[((($366)+(4))>>2)];
 var $tmp_i_i9=$37;
 var $tmp1_i_i10=$48;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i9, $tmp1_i_i10, 8)|0);
 $35=$342;
 $36=$356;
 var $367=$35;
 var $368=$36;
 var $tmp_i_i_i11=$__t21_i_i_i8;
 var $tmp2_i_i_i12=$37;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i11, $tmp2_i_i_i12, 8)|0);
 $32=$367;
 HEAP32[(($33)>>2)]=$368;
 var $369=$32;
 var $370=$369;
 $31=$33;
 var $371=$31;
 var $372=HEAP32[(($371)>>2)];
 $25=$__t21_i_i_i8;
 var $373=$25;
 var $374=$34;
 var $375=$373;
 assert(8 % 1 === 0);HEAP32[(($374)>>2)]=HEAP32[(($375)>>2)];HEAP32[((($374)+(4))>>2)]=HEAP32[((($375)+(4))>>2)];
 var $tmp_i_i_i_i13=$30;
 var $tmp1_i_i_i_i14=$34;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i13, $tmp1_i_i_i_i14, 8)|0);
 $28=$370;
 HEAP32[(($29)>>2)]=$372;
 var $376=$28;
 var $377=(($376)|0);
 $27=$29;
 var $378=$27;
 var $379=HEAP32[(($378)>>2)];
 HEAP32[(($377)>>2)]=$379;
 var $380=(($376+4)|0);
 $26=$30;
 var $381=$26;
 var $382=$380;
 var $383=$381;
 assert(8 % 1 === 0);HEAP32[(($382)>>2)]=HEAP32[(($383)>>2)];HEAP32[((($382)+(4))>>2)]=HEAP32[((($383)+(4))>>2)];
 $182=1;
 $106=$__h;
 var $384=$106;
 $105=$384;
 var $385=$105;
 $103=$385;
 $104=0;
 var $386=$103;
 var $387=(($386)|0);
 $102=$387;
 var $388=$102;
 var $389=$388;
 $101=$389;
 var $390=$101;
 var $391=(($390)|0);
 var $392=HEAP32[(($391)>>2)];
 $__tmp_i_i_i1=$392;
 var $393=$104;
 var $394=(($386)|0);
 $76=$394;
 var $395=$76;
 var $396=$395;
 $75=$396;
 var $397=$75;
 var $398=(($397)|0);
 HEAP32[(($398)>>2)]=$393;
 var $399=$__tmp_i_i_i1;
 var $400=($399|0)!=0;
 if($400){label=12;break;}else{label=19;break;}
 case 12: 
 var $402=(($386)|0);
 $74=$402;
 var $403=$74;
 var $404=$403;
 $73=$404;
 var $405=$73;
 var $406=(($405+4)|0);
 var $407=$__tmp_i_i_i1;
 $99=$406;
 $100=$407;
 var $408=$99;
 var $409=(($408+5)|0);
 var $410=HEAP8[($409)];
 var $411=(($410)&1);
 if($411){label=13;break;}else{label=14;break;}
 case 13: 
 var $413=(($408)|0);
 var $414=HEAP32[(($413)>>2)];
 var $415=$100;
 var $416=(($415+8)|0);
 var $417=$416;
 var $418=(($417+12)|0);
 $98=$418;
 var $419=$98;
 var $420=$419;
 var $421=$420;
 $94=$414;
 $95=$421;
 var $422=$97;
 var $423=$94;
 var $424=$95;
 var $tmp_i_i_i_i_i2=$93;
 var $tmp1_i_i_i_i_i3=$96;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i2)]=HEAP8[($tmp1_i_i_i_i_i3)];
 $91=$423;
 $92=$424;
 var $425=$92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($425);
 label=14;break;
 case 14: 
 var $427=(($408+4)|0);
 var $428=HEAP8[($427)];
 var $429=(($428)&1);
 if($429){label=15;break;}else{label=16;break;}
 case 15: 
 var $431=(($408)|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=$100;
 var $434=(($433+8)|0);
 var $435=$434;
 var $436=(($435)|0);
 $90=$436;
 var $437=$90;
 var $438=$437;
 var $439=$438;
 $80=$432;
 $81=$439;
 var $440=$83;
 var $441=$80;
 var $442=$81;
 var $tmp_i1_i_i_i_i4=$79;
 var $tmp1_i2_i_i_i_i5=$82;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i4)]=HEAP8[($tmp1_i2_i_i_i_i5)];
 $77=$441;
 $78=$442;
 var $443=$78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($443);
 label=16;break;
 case 16: 
 var $445=$100;
 var $446=($445|0)!=0;
 if($446){label=17;break;}else{label=18;break;}
 case 17: 
 var $448=(($408)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=$100;
 $87=$449;
 $88=$450;
 $89=1;
 var $451=$87;
 var $452=$88;
 var $453=$89;
 $84=$451;
 $85=$452;
 $86=$453;
 var $454=$84;
 var $455=$85;
 var $456=$455;
 __ZdlPv($456);
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
 case 20: 
 var $458$0 = ___cxa_find_matching_catch(-1, -1); var $458$1 = tempRet0;
 var $459=$458$0;
 $180=$459;
 var $460=$458$1;
 $181=$460;
 $173=$__h;
 var $461=$173;
 $172=$461;
 var $462=$172;
 $170=$462;
 $171=0;
 var $463=$170;
 var $464=(($463)|0);
 $169=$464;
 var $465=$169;
 var $466=$465;
 $168=$466;
 var $467=$168;
 var $468=(($467)|0);
 var $469=HEAP32[(($468)>>2)];
 $__tmp_i_i_i=$469;
 var $470=$171;
 var $471=(($463)|0);
 $143=$471;
 var $472=$143;
 var $473=$472;
 $142=$473;
 var $474=$142;
 var $475=(($474)|0);
 HEAP32[(($475)>>2)]=$470;
 var $476=$__tmp_i_i_i;
 var $477=($476|0)!=0;
 if($477){label=21;break;}else{label=28;break;}
 case 21: 
 var $479=(($463)|0);
 $141=$479;
 var $480=$141;
 var $481=$480;
 $140=$481;
 var $482=$140;
 var $483=(($482+4)|0);
 var $484=$__tmp_i_i_i;
 $166=$483;
 $167=$484;
 var $485=$166;
 var $486=(($485+5)|0);
 var $487=HEAP8[($486)];
 var $488=(($487)&1);
 if($488){label=22;break;}else{label=23;break;}
 case 22: 
 var $490=(($485)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=$167;
 var $493=(($492+8)|0);
 var $494=$493;
 var $495=(($494+12)|0);
 $165=$495;
 var $496=$165;
 var $497=$496;
 var $498=$497;
 $161=$491;
 $162=$498;
 var $499=$164;
 var $500=$161;
 var $501=$162;
 var $tmp_i_i_i_i_i=$160;
 var $tmp1_i_i_i_i_i=$163;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $158=$500;
 $159=$501;
 var $502=$159;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($502);
 label=23;break;
 case 23: 
 var $504=(($485+4)|0);
 var $505=HEAP8[($504)];
 var $506=(($505)&1);
 if($506){label=24;break;}else{label=25;break;}
 case 24: 
 var $508=(($485)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=$167;
 var $511=(($510+8)|0);
 var $512=$511;
 var $513=(($512)|0);
 $157=$513;
 var $514=$157;
 var $515=$514;
 var $516=$515;
 $147=$509;
 $148=$516;
 var $517=$150;
 var $518=$147;
 var $519=$148;
 var $tmp_i1_i_i_i_i=$146;
 var $tmp1_i2_i_i_i_i=$149;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $144=$518;
 $145=$519;
 var $520=$145;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($520);
 label=25;break;
 case 25: 
 var $522=$167;
 var $523=($522|0)!=0;
 if($523){label=26;break;}else{label=27;break;}
 case 26: 
 var $525=(($485)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=$167;
 $154=$526;
 $155=$527;
 $156=1;
 var $528=$154;
 var $529=$155;
 var $530=$156;
 $151=$528;
 $152=$529;
 $153=$530;
 var $531=$151;
 var $532=$152;
 var $533=$532;
 __ZdlPv($533);
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $535=$180;
 var $536=$181;
 var $537$0=$535;
 var $537$1=0;
 var $538$0=$537$0;
 var $538$1=$536;
 ___resumeException($538$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg_result,$this,$__nd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94=sp;
 var $95;
 var $96;
 var $97=(sp)+(8);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $__bc;
 var $__inserted=(sp)+(16);
 var $__ndptr;
 var $__chash;
 var $154=(sp)+(24);
 var $155=(sp)+(32);
 var $__pn;
 var $156=(sp)+(40);
 $152=$this;
 $153=$__nd;
 var $157=$152;
 $151=$157;
 var $158=$151;
 var $159=(($158+12)|0);
 $150=$159;
 var $160=$150;
 var $161=$160;
 $149=$161;
 var $162=$149;
 var $163=$162;
 var $164=$153;
 var $165=(($164+8)|0);
 $105=$163;
 $106=$165;
 var $166=$105;
 var $167=$166;
 var $168=$106;
 var $169=$168;
 var $170=(($169)|0);
 var $171=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($167,$170);
 var $172=$153;
 var $173=(($172+4)|0);
 HEAP32[(($173)>>2)]=$171;
 $104=$157;
 var $174=$104;
 var $175=(($174)|0);
 $103=$175;
 var $176=$103;
 var $177=(($176)|0);
 $102=$177;
 var $178=$102;
 var $179=$178;
 $101=$179;
 var $180=$101;
 var $181=(($180+4)|0);
 $100=$181;
 var $182=$100;
 var $183=(($182)|0);
 $99=$183;
 var $184=$99;
 var $185=$184;
 $98=$185;
 var $186=$98;
 var $187=(($186)|0);
 var $188=HEAP32[(($187)>>2)];
 $__bc=$188;
 HEAP8[($__inserted)]=0;
 var $189=$__bc;
 var $190=($189|0)!=0;
 if($190){label=2;break;}else{label=43;break;}
 case 2: 
 var $192=$153;
 var $193=(($192+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$__bc;
 $86=$194;
 $87=$195;
 var $196=$87;
 var $197=$87;
 var $198=((($197)-(1))|0);
 var $199=$196&$198;
 var $200=($199|0)!=0;
 if($200){label=4;break;}else{label=3;break;}
 case 3: 
 var $202=$86;
 var $203=$87;
 var $204=((($203)-(1))|0);
 var $205=$202&$204;
 var $210=$205;label=5;break;
 case 4: 
 var $207=$86;
 var $208=$87;
 var $209=(((($207>>>0))%(($208>>>0)))&-1);
 var $210=$209;label=5;break;
 case 5: 
 var $210;
 $__chash=$210;
 var $211=(($157)|0);
 var $212=$__chash;
 $8=$211;
 $9=$212;
 var $213=$8;
 var $214=$9;
 var $215=(($213)|0);
 $7=$215;
 var $216=$7;
 var $217=$216;
 $6=$217;
 var $218=$6;
 var $219=(($218)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+($214<<2))|0);
 var $222=HEAP32[(($221)>>2)];
 $__ndptr=$222;
 var $223=$__ndptr;
 var $224=($223|0)!=0;
 if($224){label=6;break;}else{label=42;break;}
 case 6: 
 var $226=$__ndptr;
 var $227=$226;
 var $228=(($227)|0);
 var $229=HEAP32[(($228)>>2)];
 $__ndptr=$229;
 label=7;break;
 case 7: 
 var $231=$__ndptr;
 var $232=($231|0)!=0;
 if($232){label=8;break;}else{var $256=0;label=12;break;}
 case 8: 
 var $234=$__ndptr;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=$__bc;
 $4=$236;
 $5=$237;
 var $238=$5;
 var $239=$5;
 var $240=((($239)-(1))|0);
 var $241=$238&$240;
 var $242=($241|0)!=0;
 if($242){label=10;break;}else{label=9;break;}
 case 9: 
 var $244=$4;
 var $245=$5;
 var $246=((($245)-(1))|0);
 var $247=$244&$246;
 var $252=$247;label=11;break;
 case 10: 
 var $249=$4;
 var $250=$5;
 var $251=(((($249>>>0))%(($250>>>0)))&-1);
 var $252=$251;label=11;break;
 case 11: 
 var $252;
 var $253=$__chash;
 var $254=($252|0)==($253|0);
 var $256=$254;label=12;break;
 case 12: 
 var $256;
 if($256){label=13;break;}else{label=41;break;}
 case 13: 
 $3=$157;
 var $258=$3;
 var $259=(($258+16)|0);
 $2=$259;
 var $260=$2;
 var $261=$260;
 $1=$261;
 var $262=$1;
 var $263=$262;
 var $264=$__ndptr;
 var $265=(($264+8)|0);
 var $266=$153;
 var $267=(($266+8)|0);
 $70=$263;
 $71=$265;
 $72=$267;
 var $268=$70;
 var $269=$268;
 var $270=$71;
 var $271=$270;
 var $272=(($271)|0);
 var $273=$72;
 var $274=$273;
 var $275=(($274)|0);
 $67=$269;
 $68=$272;
 $69=$275;
 var $276=$67;
 var $277=$68;
 var $278=$69;
 $65=$277;
 $66=$278;
 var $279=$65;
 $63=$279;
 var $280=$63;
 $62=$280;
 var $281=$62;
 var $282=(($281)|0);
 $61=$282;
 var $283=$61;
 var $284=$283;
 $60=$284;
 var $285=$60;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292&1;
 var $294=($293|0)!=0;
 if($294){label=14;break;}else{label=15;break;}
 case 14: 
 $56=$280;
 var $296=$56;
 var $297=(($296)|0);
 $55=$297;
 var $298=$55;
 var $299=$298;
 $54=$299;
 var $300=$54;
 var $301=(($300)|0);
 var $302=(($301)|0);
 var $303=$302;
 var $304=(($303+4)|0);
 var $305=HEAP32[(($304)>>2)];
 var $320=$305;label=16;break;
 case 15: 
 $59=$280;
 var $307=$59;
 var $308=(($307)|0);
 $58=$308;
 var $309=$58;
 var $310=$309;
 $57=$310;
 var $311=$57;
 var $312=(($311)|0);
 var $313=(($312)|0);
 var $314=$313;
 var $315=(($314)|0);
 var $316=$315;
 var $317=HEAP8[($316)];
 var $318=($317&255);
 var $319=$318>>1;
 var $320=$319;label=16;break;
 case 16: 
 var $320;
 $__lhs_sz_i_i_i=$320;
 var $321=$__lhs_sz_i_i_i;
 var $322=$66;
 $53=$322;
 var $323=$53;
 $52=$323;
 var $324=$52;
 var $325=(($324)|0);
 $51=$325;
 var $326=$51;
 var $327=$326;
 $50=$327;
 var $328=$50;
 var $329=(($328)|0);
 var $330=(($329)|0);
 var $331=$330;
 var $332=(($331)|0);
 var $333=$332;
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=$335&1;
 var $337=($336|0)!=0;
 if($337){label=17;break;}else{label=18;break;}
 case 17: 
 $46=$323;
 var $339=$46;
 var $340=(($339)|0);
 $45=$340;
 var $341=$45;
 var $342=$341;
 $44=$342;
 var $343=$44;
 var $344=(($343)|0);
 var $345=(($344)|0);
 var $346=$345;
 var $347=(($346+4)|0);
 var $348=HEAP32[(($347)>>2)];
 var $363=$348;label=19;break;
 case 18: 
 $49=$323;
 var $350=$49;
 var $351=(($350)|0);
 $48=$351;
 var $352=$48;
 var $353=$352;
 $47=$353;
 var $354=$47;
 var $355=(($354)|0);
 var $356=(($355)|0);
 var $357=$356;
 var $358=(($357)|0);
 var $359=$358;
 var $360=HEAP8[($359)];
 var $361=($360&255);
 var $362=$361>>1;
 var $363=$362;label=19;break;
 case 19: 
 var $363;
 var $364=($321|0)!=($363|0);
 if($364){label=20;break;}else{label=21;break;}
 case 20: 
 $64=0;
 label=37;break;
 case 21: 
 var $367=$65;
 $40=$367;
 var $368=$40;
 $39=$368;
 var $369=$39;
 $38=$369;
 var $370=$38;
 var $371=(($370)|0);
 $37=$371;
 var $372=$37;
 var $373=$372;
 $36=$373;
 var $374=$36;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377)|0);
 var $379=$378;
 var $380=HEAP8[($379)];
 var $381=($380&255);
 var $382=$381&1;
 var $383=($382|0)!=0;
 if($383){label=22;break;}else{label=23;break;}
 case 22: 
 $30=$369;
 var $385=$30;
 var $386=(($385)|0);
 $29=$386;
 var $387=$29;
 var $388=$387;
 $28=$388;
 var $389=$28;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392+8)|0);
 var $394=HEAP32[(($393)>>2)];
 var $408=$394;label=24;break;
 case 23: 
 $35=$369;
 var $396=$35;
 var $397=(($396)|0);
 $34=$397;
 var $398=$34;
 var $399=$398;
 $33=$399;
 var $400=$33;
 var $401=(($400)|0);
 var $402=(($401)|0);
 var $403=$402;
 var $404=(($403+1)|0);
 var $405=(($404)|0);
 $32=$405;
 var $406=$32;
 $31=$406;
 var $407=$31;
 var $408=$407;label=24;break;
 case 24: 
 var $408;
 $27=$408;
 var $409=$27;
 $__lp_i_i_i=$409;
 var $410=$66;
 $23=$410;
 var $411=$23;
 $22=$411;
 var $412=$22;
 $21=$412;
 var $413=$21;
 var $414=(($413)|0);
 $20=$414;
 var $415=$20;
 var $416=$415;
 $19=$416;
 var $417=$19;
 var $418=(($417)|0);
 var $419=(($418)|0);
 var $420=$419;
 var $421=(($420)|0);
 var $422=$421;
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=$424&1;
 var $426=($425|0)!=0;
 if($426){label=25;break;}else{label=26;break;}
 case 25: 
 $13=$412;
 var $428=$13;
 var $429=(($428)|0);
 $12=$429;
 var $430=$12;
 var $431=$430;
 $11=$431;
 var $432=$11;
 var $433=(($432)|0);
 var $434=(($433)|0);
 var $435=$434;
 var $436=(($435+8)|0);
 var $437=HEAP32[(($436)>>2)];
 var $451=$437;label=27;break;
 case 26: 
 $18=$412;
 var $439=$18;
 var $440=(($439)|0);
 $17=$440;
 var $441=$17;
 var $442=$441;
 $16=$442;
 var $443=$16;
 var $444=(($443)|0);
 var $445=(($444)|0);
 var $446=$445;
 var $447=(($446+1)|0);
 var $448=(($447)|0);
 $15=$448;
 var $449=$15;
 $14=$449;
 var $450=$14;
 var $451=$450;label=27;break;
 case 27: 
 var $451;
 $10=$451;
 var $452=$10;
 $__rp_i_i_i=$452;
 var $453=$65;
 $26=$453;
 var $454=$26;
 var $455=(($454)|0);
 $25=$455;
 var $456=$25;
 var $457=$456;
 $24=$457;
 var $458=$24;
 var $459=(($458)|0);
 var $460=(($459)|0);
 var $461=$460;
 var $462=(($461)|0);
 var $463=$462;
 var $464=HEAP8[($463)];
 var $465=($464&255);
 var $466=$465&1;
 var $467=($466|0)!=0;
 if($467){label=28;break;}else{label=30;break;}
 case 28: 
 var $469=$__lp_i_i_i;
 var $470=$__rp_i_i_i;
 var $471=$__lhs_sz_i_i_i;
 $41=$469;
 $42=$470;
 $43=$471;
 var $472=$41;
 var $473=$42;
 var $474=$43;
 var $475=(function() { try { __THREW__ = 0; return _memcmp($472,$473,$474) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $476=($475|0)==0;
 $64=$476;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $479=$__lhs_sz_i_i_i;
 var $480=($479|0)!=0;
 if($480){label=32;break;}else{label=35;break;}
 case 32: 
 var $482=$__lp_i_i_i;
 var $483=HEAP8[($482)];
 var $484=(($483<<24)>>24);
 var $485=$__rp_i_i_i;
 var $486=HEAP8[($485)];
 var $487=(($486<<24)>>24);
 var $488=($484|0)!=($487|0);
 if($488){label=33;break;}else{label=34;break;}
 case 33: 
 $64=0;
 label=37;break;
 case 34: 
 var $491=$__lhs_sz_i_i_i;
 var $492=((($491)-(1))|0);
 $__lhs_sz_i_i_i=$492;
 var $493=$__lp_i_i_i;
 var $494=(($493+1)|0);
 $__lp_i_i_i=$494;
 var $495=$__rp_i_i_i;
 var $496=(($495+1)|0);
 $__rp_i_i_i=$496;
 label=31;break;
 case 35: 
 $64=1;
 label=37;break;
 case 36: 
 var $499$0 = ___cxa_find_matching_catch(-1, -1,0); var $499$1 = tempRet0;
 var $500=$499$0;
 ___clang_call_terminate($500);
 throw "Reached an unreachable!";
 case 37: 
 var $501=$64;
 if($501){label=38;break;}else{label=39;break;}
 case 38: 
 label=63;break;
 case 39: 
 label=40;break;
 case 40: 
 var $505=$__ndptr;
 var $506=$505;
 var $507=(($506)|0);
 var $508=HEAP32[(($507)>>2)];
 $__ndptr=$508;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $75=$157;
 var $512=$75;
 var $513=(($512+12)|0);
 $74=$513;
 var $514=$74;
 var $515=$514;
 $73=$515;
 var $516=$73;
 var $517=(($516)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=((($518)+(1))|0);
 var $520=($519>>>0);
 var $521=$__bc;
 var $522=($521>>>0);
 $78=$157;
 var $523=$78;
 var $524=(($523+16)|0);
 $77=$524;
 var $525=$77;
 var $526=$525;
 $76=$526;
 var $527=$76;
 var $528=(($527)|0);
 var $529=HEAPF32[(($528)>>2)];
 var $530=($522)*($529);
 var $531=$520>$530;
 if($531){label=45;break;}else{label=44;break;}
 case 44: 
 var $533=$__bc;
 var $534=($533|0)==0;
 if($534){label=45;break;}else{label=54;break;}
 case 45: 
 var $536=$__bc;
 var $537=($536<<1);
 var $538=$__bc;
 $79=$538;
 var $539=$79;
 var $540=($539>>>0)>2;
 if($540){label=46;break;}else{var $548=0;label=47;break;}
 case 46: 
 var $542=$79;
 var $543=$79;
 var $544=((($543)-(1))|0);
 var $545=$542&$544;
 var $546=($545|0)!=0;
 var $547=$546^1;
 var $548=$547;label=47;break;
 case 47: 
 var $548;
 var $549=$548^1;
 var $550=($549&1);
 var $551=((($537)+($550))|0);
 HEAP32[(($154)>>2)]=$551;
 $82=$157;
 var $552=$82;
 var $553=(($552+12)|0);
 $81=$553;
 var $554=$81;
 var $555=$554;
 $80=$555;
 var $556=$80;
 var $557=(($556)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=((($558)+(1))|0);
 var $560=($559>>>0);
 $85=$157;
 var $561=$85;
 var $562=(($561+16)|0);
 $84=$562;
 var $563=$84;
 var $564=$563;
 $83=$564;
 var $565=$83;
 var $566=(($565)|0);
 var $567=HEAPF32[(($566)>>2)];
 var $568=($560)/($567);
 $88=$568;
 var $569=$88;
 var $570=Math_ceil($569);
 var $571=($570>=0 ? Math_floor($570) : Math_ceil($570));
 HEAP32[(($155)>>2)]=$571;
 $95=$154;
 $96=$155;
 var $572=$95;
 var $573=$96;
 var $tmp_i=$94;
 var $tmp1_i=$97;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $92=$572;
 $93=$573;
 var $574=$92;
 var $575=$93;
 $89=$94;
 $90=$574;
 $91=$575;
 var $576=$89;
 var $577=$90;
 var $578=HEAP32[(($577)>>2)];
 var $579=$91;
 var $580=HEAP32[(($579)>>2)];
 var $581=($578>>>0)<($580>>>0);
 if($581){label=48;break;}else{label=49;break;}
 case 48: 
 var $583=$93;
 var $586=$583;label=50;break;
 case 49: 
 var $585=$92;
 var $586=$585;label=50;break;
 case 50: 
 var $586;
 var $587=HEAP32[(($586)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($157,$587);
 $113=$157;
 var $588=$113;
 var $589=(($588)|0);
 $112=$589;
 var $590=$112;
 var $591=(($590)|0);
 $111=$591;
 var $592=$111;
 var $593=$592;
 $110=$593;
 var $594=$110;
 var $595=(($594+4)|0);
 $109=$595;
 var $596=$109;
 var $597=(($596)|0);
 $108=$597;
 var $598=$108;
 var $599=$598;
 $107=$599;
 var $600=$107;
 var $601=(($600)|0);
 var $602=HEAP32[(($601)>>2)];
 $__bc=$602;
 var $603=$153;
 var $604=(($603+4)|0);
 var $605=HEAP32[(($604)>>2)];
 var $606=$__bc;
 $114=$605;
 $115=$606;
 var $607=$115;
 var $608=$115;
 var $609=((($608)-(1))|0);
 var $610=$607&$609;
 var $611=($610|0)!=0;
 if($611){label=52;break;}else{label=51;break;}
 case 51: 
 var $613=$114;
 var $614=$115;
 var $615=((($614)-(1))|0);
 var $616=$613&$615;
 var $621=$616;label=53;break;
 case 52: 
 var $618=$114;
 var $619=$115;
 var $620=(((($618>>>0))%(($619>>>0)))&-1);
 var $621=$620;label=53;break;
 case 53: 
 var $621;
 $__chash=$621;
 label=54;break;
 case 54: 
 var $623=(($157)|0);
 var $624=$__chash;
 $118=$623;
 $119=$624;
 var $625=$118;
 var $626=$119;
 var $627=(($625)|0);
 $117=$627;
 var $628=$117;
 var $629=$628;
 $116=$629;
 var $630=$116;
 var $631=(($630)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(($632+($626<<2))|0);
 var $634=HEAP32[(($633)>>2)];
 $__pn=$634;
 var $635=$__pn;
 var $636=($635|0)==0;
 if($636){label=55;break;}else{label=61;break;}
 case 55: 
 var $638=(($157+8)|0);
 $121=$638;
 var $639=$121;
 var $640=$639;
 $120=$640;
 var $641=$120;
 var $642=(($641)|0);
 $123=$642;
 var $643=$123;
 $122=$643;
 var $644=$122;
 var $645=$644;
 var $646=$645;
 var $647=$646;
 $__pn=$647;
 var $648=$__pn;
 var $649=$648;
 var $650=(($649)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=$153;
 var $653=$652;
 var $654=(($653)|0);
 HEAP32[(($654)>>2)]=$651;
 var $655=$153;
 var $656=$__pn;
 var $657=$656;
 var $658=(($657)|0);
 HEAP32[(($658)>>2)]=$655;
 var $659=$__pn;
 var $660=(($157)|0);
 var $661=$__chash;
 $126=$660;
 $127=$661;
 var $662=$126;
 var $663=$127;
 var $664=(($662)|0);
 $125=$664;
 var $665=$125;
 var $666=$665;
 $124=$666;
 var $667=$124;
 var $668=(($667)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=(($669+($663<<2))|0);
 HEAP32[(($670)>>2)]=$659;
 var $671=$153;
 var $672=$671;
 var $673=(($672)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=($674|0)!=0;
 if($675){label=56;break;}else{label=60;break;}
 case 56: 
 var $677=$153;
 var $678=(($157)|0);
 var $679=$153;
 var $680=$679;
 var $681=(($680)|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=(($682+4)|0);
 var $684=HEAP32[(($683)>>2)];
 var $685=$__bc;
 $128=$684;
 $129=$685;
 var $686=$129;
 var $687=$129;
 var $688=((($687)-(1))|0);
 var $689=$686&$688;
 var $690=($689|0)!=0;
 if($690){label=58;break;}else{label=57;break;}
 case 57: 
 var $692=$128;
 var $693=$129;
 var $694=((($693)-(1))|0);
 var $695=$692&$694;
 var $700=$695;label=59;break;
 case 58: 
 var $697=$128;
 var $698=$129;
 var $699=(((($697>>>0))%(($698>>>0)))&-1);
 var $700=$699;label=59;break;
 case 59: 
 var $700;
 $132=$678;
 $133=$700;
 var $701=$132;
 var $702=$133;
 var $703=(($701)|0);
 $131=$703;
 var $704=$131;
 var $705=$704;
 $130=$705;
 var $706=$130;
 var $707=(($706)|0);
 var $708=HEAP32[(($707)>>2)];
 var $709=(($708+($702<<2))|0);
 HEAP32[(($709)>>2)]=$677;
 label=60;break;
 case 60: 
 label=62;break;
 case 61: 
 var $712=$__pn;
 var $713=$712;
 var $714=(($713)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=$153;
 var $717=$716;
 var $718=(($717)|0);
 HEAP32[(($718)>>2)]=$715;
 var $719=$153;
 var $720=$__pn;
 var $721=$720;
 var $722=(($721)|0);
 HEAP32[(($722)>>2)]=$719;
 label=62;break;
 case 62: 
 var $724=$153;
 $__ndptr=$724;
 $136=$157;
 var $725=$136;
 var $726=(($725+12)|0);
 $135=$726;
 var $727=$135;
 var $728=$727;
 $134=$728;
 var $729=$134;
 var $730=(($729)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=((($731)+(1))|0);
 HEAP32[(($730)>>2)]=$732;
 HEAP8[($__inserted)]=1;
 label=63;break;
 case 63: 
 var $734=$__ndptr;
 $139=$156;
 $140=$734;
 var $735=$139;
 var $736=$140;
 $137=$735;
 $138=$736;
 var $737=$137;
 var $738=(($737)|0);
 var $739=$138;
 HEAP32[(($738)>>2)]=$739;
 $146=$agg_result;
 $147=$156;
 $148=$__inserted;
 var $740=$146;
 var $741=$148;
 var $742=$147;
 $143=$740;
 $144=$742;
 $145=$741;
 var $743=$143;
 var $744=(($743)|0);
 var $745=$144;
 $142=$745;
 var $746=$142;
 var $747=$744;
 var $748=$746;
 assert(4 % 1 === 0);HEAP32[(($747)>>2)]=HEAP32[(($748)>>2)];
 var $749=(($743+4)|0);
 var $750=$145;
 $141=$750;
 var $751=$141;
 var $752=HEAP8[($751)];
 var $753=(($752)&1);
 var $754=($753&1);
 HEAP8[($749)]=$754;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=sp;
 var $23;
 var $24;
 var $25=(sp)+(8);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=(sp)+(16);
 var $__bc;
 var $36=(sp)+(24);
 $34=$this;
 HEAP32[(($35)>>2)]=$__n;
 var $37=$34;
 var $38=HEAP32[(($35)>>2)];
 var $39=($38|0)==1;
 if($39){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($35)>>2)]=2;
 label=6;break;
 case 3: 
 var $42=HEAP32[(($35)>>2)];
 var $43=HEAP32[(($35)>>2)];
 var $44=((($43)-(1))|0);
 var $45=$42&$44;
 var $46=($45|0)!=0;
 if($46){label=4;break;}else{label=5;break;}
 case 4: 
 var $48=HEAP32[(($35)>>2)];
 var $49=__ZNSt3__112__next_primeEj($48);
 HEAP32[(($35)>>2)]=$49;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 $33=$37;
 var $52=$33;
 var $53=(($52)|0);
 $32=$53;
 var $54=$32;
 var $55=(($54)|0);
 $31=$55;
 var $56=$31;
 var $57=$56;
 $30=$57;
 var $58=$30;
 var $59=(($58+4)|0);
 $29=$59;
 var $60=$29;
 var $61=(($60)|0);
 $28=$61;
 var $62=$28;
 var $63=$62;
 $27=$63;
 var $64=$27;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 $__bc=$66;
 var $67=HEAP32[(($35)>>2)];
 var $68=$__bc;
 var $69=($67>>>0)>($68>>>0);
 if($69){label=7;break;}else{label=8;break;}
 case 7: 
 var $71=HEAP32[(($35)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$71);
 label=21;break;
 case 8: 
 var $73=HEAP32[(($35)>>2)];
 var $74=$__bc;
 var $75=($73>>>0)<($74>>>0);
 if($75){label=9;break;}else{label=20;break;}
 case 9: 
 var $77=$__bc;
 $26=$77;
 var $78=$26;
 var $79=($78>>>0)>2;
 if($79){label=10;break;}else{var $87=0;label=11;break;}
 case 10: 
 var $81=$26;
 var $82=$26;
 var $83=((($82)-(1))|0);
 var $84=$81&$83;
 var $85=($84|0)!=0;
 var $86=$85^1;
 var $87=$86;label=11;break;
 case 11: 
 var $87;
 if($87){label=12;break;}else{label=13;break;}
 case 12: 
 $15=$37;
 var $89=$15;
 var $90=(($89+12)|0);
 $14=$90;
 var $91=$14;
 var $92=$91;
 $13=$92;
 var $93=$13;
 var $94=(($93)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95>>>0);
 $3=$37;
 var $97=$3;
 var $98=(($97+16)|0);
 $2=$98;
 var $99=$2;
 var $100=$99;
 $1=$100;
 var $101=$1;
 var $102=(($101)|0);
 var $103=HEAPF32[(($102)>>2)];
 var $104=($96)/($103);
 $4=$104;
 var $105=$4;
 var $106=Math_ceil($105);
 var $107=($106>=0 ? Math_floor($106) : Math_ceil($106));
 $6=$107;
 var $108=$6;
 var $109=((($108)-(1))|0);
 $5=$109;
 var $110=$5;
 var $111=_llvm_ctlz_i32($110,1);
 var $112=(((32)-($111))|0);
 var $113=1<<$112;
 var $136=$113;label=14;break;
 case 13: 
 $9=$37;
 var $115=$9;
 var $116=(($115+12)|0);
 $8=$116;
 var $117=$8;
 var $118=$117;
 $7=$118;
 var $119=$7;
 var $120=(($119)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($121>>>0);
 $12=$37;
 var $123=$12;
 var $124=(($123+16)|0);
 $11=$124;
 var $125=$11;
 var $126=$125;
 $10=$126;
 var $127=$10;
 var $128=(($127)|0);
 var $129=HEAPF32[(($128)>>2)];
 var $130=($122)/($129);
 $16=$130;
 var $131=$16;
 var $132=Math_ceil($131);
 var $133=($132>=0 ? Math_floor($132) : Math_ceil($132));
 var $134=__ZNSt3__112__next_primeEj($133);
 var $136=$134;label=14;break;
 case 14: 
 var $136;
 HEAP32[(($36)>>2)]=$136;
 $23=$35;
 $24=$36;
 var $137=$23;
 var $138=$24;
 var $tmp_i=$22;
 var $tmp1_i=$25;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $20=$137;
 $21=$138;
 var $139=$20;
 var $140=$21;
 $17=$22;
 $18=$139;
 $19=$140;
 var $141=$17;
 var $142=$18;
 var $143=HEAP32[(($142)>>2)];
 var $144=$19;
 var $145=HEAP32[(($144)>>2)];
 var $146=($143>>>0)<($145>>>0);
 if($146){label=15;break;}else{label=16;break;}
 case 15: 
 var $148=$21;
 var $151=$148;label=17;break;
 case 16: 
 var $150=$20;
 var $151=$150;label=17;break;
 case 17: 
 var $151;
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($35)>>2)]=$152;
 var $153=HEAP32[(($35)>>2)];
 var $154=$__bc;
 var $155=($153>>>0)<($154>>>0);
 if($155){label=18;break;}else{label=19;break;}
 case 18: 
 var $157=HEAP32[(($35)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$157);
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $__tmp_i;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $__npa;
 var $__i;
 var $__pp;
 var $__cp;
 var $__chash;
 var $__phash;
 var $__np;
 $138=$this;
 $139=$__nbc;
 var $140=$138;
 var $141=(($140)|0);
 $137=$141;
 var $142=$137;
 var $143=(($142)|0);
 $136=$143;
 var $144=$136;
 var $145=$144;
 $135=$145;
 var $146=$135;
 var $147=(($146+4)|0);
 $63=$147;
 var $148=$63;
 var $149=(($148)|0);
 $62=$149;
 var $150=$62;
 var $151=$150;
 $61=$151;
 var $152=$61;
 var $153=$152;
 $__npa=$153;
 var $154=(($140)|0);
 var $155=$139;
 var $156=($155>>>0)>0;
 if($156){label=2;break;}else{label=3;break;}
 case 2: 
 var $158=$__npa;
 var $159=$139;
 $59=$158;
 $60=$159;
 var $160=$59;
 var $161=$60;
 $56=$160;
 $57=$161;
 $58=0;
 var $162=$56;
 var $163=$57;
 var $164=($163<<2);
 var $165=__Znwj($164);
 var $166=$165;
 var $169=$166;label=4;break;
 case 3: 
 var $169=0;label=4;break;
 case 4: 
 var $169;
 $54=$154;
 $55=$169;
 var $170=$54;
 var $171=(($170)|0);
 $53=$171;
 var $172=$53;
 var $173=$172;
 $52=$173;
 var $174=$52;
 var $175=(($174)|0);
 var $176=HEAP32[(($175)>>2)];
 $__tmp_i=$176;
 var $177=$55;
 var $178=(($170)|0);
 $37=$178;
 var $179=$37;
 var $180=$179;
 $36=$180;
 var $181=$36;
 var $182=(($181)|0);
 HEAP32[(($182)>>2)]=$177;
 var $183=$__tmp_i;
 var $184=($183|0)!=0;
 if($184){label=5;break;}else{label=6;break;}
 case 5: 
 var $186=(($170)|0);
 $35=$186;
 var $187=$35;
 var $188=$187;
 $34=$188;
 var $189=$34;
 var $190=(($189+4)|0);
 var $191=$__tmp_i;
 $50=$190;
 $51=$191;
 var $192=$50;
 $49=$192;
 var $193=$49;
 var $194=(($193)|0);
 $48=$194;
 var $195=$48;
 var $196=$195;
 $47=$196;
 var $197=$47;
 var $198=$197;
 var $199=$51;
 $40=$192;
 var $200=$40;
 var $201=(($200)|0);
 $39=$201;
 var $202=$39;
 var $203=$202;
 $38=$203;
 var $204=$38;
 var $205=(($204)|0);
 var $206=HEAP32[(($205)>>2)];
 $44=$198;
 $45=$199;
 $46=$206;
 var $207=$44;
 var $208=$45;
 var $209=$46;
 $41=$207;
 $42=$208;
 $43=$209;
 var $210=$41;
 var $211=$42;
 var $212=$211;
 __ZdlPv($212);
 label=6;break;
 case 6: 
 var $213=$139;
 var $214=(($140)|0);
 $33=$214;
 var $215=$33;
 var $216=(($215)|0);
 $32=$216;
 var $217=$32;
 var $218=$217;
 $31=$218;
 var $219=$31;
 var $220=(($219+4)|0);
 $3=$220;
 var $221=$3;
 var $222=(($221)|0);
 $2=$222;
 var $223=$2;
 var $224=$223;
 $1=$224;
 var $225=$1;
 var $226=(($225)|0);
 HEAP32[(($226)>>2)]=$213;
 var $227=$139;
 var $228=($227>>>0)>0;
 if($228){label=7;break;}else{label=60;break;}
 case 7: 
 $__i=0;
 label=8;break;
 case 8: 
 var $231=$__i;
 var $232=$139;
 var $233=($231>>>0)<($232>>>0);
 if($233){label=9;break;}else{label=11;break;}
 case 9: 
 var $235=(($140)|0);
 var $236=$__i;
 $6=$235;
 $7=$236;
 var $237=$6;
 var $238=$7;
 var $239=(($237)|0);
 $5=$239;
 var $240=$5;
 var $241=$240;
 $4=$241;
 var $242=$4;
 var $243=(($242)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+($238<<2))|0);
 HEAP32[(($245)>>2)]=0;
 label=10;break;
 case 10: 
 var $247=$__i;
 var $248=((($247)+(1))|0);
 $__i=$248;
 label=8;break;
 case 11: 
 var $250=(($140+8)|0);
 $9=$250;
 var $251=$9;
 var $252=$251;
 $8=$252;
 var $253=$8;
 var $254=(($253)|0);
 $11=$254;
 var $255=$11;
 $10=$255;
 var $256=$10;
 var $257=$256;
 var $258=$257;
 var $259=$258;
 $__pp=$259;
 var $260=$__pp;
 var $261=$260;
 var $262=(($261)|0);
 var $263=HEAP32[(($262)>>2)];
 $__cp=$263;
 var $264=$__cp;
 var $265=($264|0)!=0;
 if($265){label=12;break;}else{label=59;break;}
 case 12: 
 var $267=$__cp;
 var $268=(($267+4)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=$139;
 $12=$269;
 $13=$270;
 var $271=$13;
 var $272=$13;
 var $273=((($272)-(1))|0);
 var $274=$271&$273;
 var $275=($274|0)!=0;
 if($275){label=14;break;}else{label=13;break;}
 case 13: 
 var $277=$12;
 var $278=$13;
 var $279=((($278)-(1))|0);
 var $280=$277&$279;
 var $285=$280;label=15;break;
 case 14: 
 var $282=$12;
 var $283=$13;
 var $284=(((($282>>>0))%(($283>>>0)))&-1);
 var $285=$284;label=15;break;
 case 15: 
 var $285;
 $__chash=$285;
 var $286=$__pp;
 var $287=(($140)|0);
 var $288=$__chash;
 $16=$287;
 $17=$288;
 var $289=$16;
 var $290=$17;
 var $291=(($289)|0);
 $15=$291;
 var $292=$15;
 var $293=$292;
 $14=$293;
 var $294=$14;
 var $295=(($294)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+($290<<2))|0);
 HEAP32[(($297)>>2)]=$286;
 var $298=$__chash;
 $__phash=$298;
 var $299=$__cp;
 $__pp=$299;
 var $300=$__cp;
 var $301=$300;
 var $302=(($301)|0);
 var $303=HEAP32[(($302)>>2)];
 $__cp=$303;
 label=16;break;
 case 16: 
 var $305=$__cp;
 var $306=($305|0)!=0;
 if($306){label=17;break;}else{label=58;break;}
 case 17: 
 var $308=$__cp;
 var $309=(($308+4)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$139;
 $18=$310;
 $19=$311;
 var $312=$19;
 var $313=$19;
 var $314=((($313)-(1))|0);
 var $315=$312&$314;
 var $316=($315|0)!=0;
 if($316){label=19;break;}else{label=18;break;}
 case 18: 
 var $318=$18;
 var $319=$19;
 var $320=((($319)-(1))|0);
 var $321=$318&$320;
 var $326=$321;label=20;break;
 case 19: 
 var $323=$18;
 var $324=$19;
 var $325=(((($323>>>0))%(($324>>>0)))&-1);
 var $326=$325;label=20;break;
 case 20: 
 var $326;
 $__chash=$326;
 var $327=$__chash;
 var $328=$__phash;
 var $329=($327|0)==($328|0);
 if($329){label=21;break;}else{label=22;break;}
 case 21: 
 var $331=$__cp;
 $__pp=$331;
 label=56;break;
 case 22: 
 var $333=(($140)|0);
 var $334=$__chash;
 $22=$333;
 $23=$334;
 var $335=$22;
 var $336=$23;
 var $337=(($335)|0);
 $21=$337;
 var $338=$21;
 var $339=$338;
 $20=$339;
 var $340=$20;
 var $341=(($340)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($342+($336<<2))|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=23;break;}else{label=24;break;}
 case 23: 
 var $347=$__pp;
 var $348=(($140)|0);
 var $349=$__chash;
 $26=$348;
 $27=$349;
 var $350=$26;
 var $351=$27;
 var $352=(($350)|0);
 $25=$352;
 var $353=$25;
 var $354=$353;
 $24=$354;
 var $355=$24;
 var $356=(($355)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+($351<<2))|0);
 HEAP32[(($358)>>2)]=$347;
 var $359=$__cp;
 $__pp=$359;
 var $360=$__chash;
 $__phash=$360;
 label=55;break;
 case 24: 
 var $362=$__cp;
 $__np=$362;
 label=25;break;
 case 25: 
 var $364=$__np;
 var $365=$364;
 var $366=(($365)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($367|0)!=0;
 if($368){label=26;break;}else{var $618=0;label=51;break;}
 case 26: 
 $30=$140;
 var $370=$30;
 var $371=(($370+16)|0);
 $29=$371;
 var $372=$29;
 var $373=$372;
 $28=$373;
 var $374=$28;
 var $375=$374;
 var $376=$__cp;
 var $377=(($376+8)|0);
 var $378=$__np;
 var $379=$378;
 var $380=(($379)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($381+8)|0);
 $124=$375;
 $125=$377;
 $126=$382;
 var $383=$124;
 var $384=$383;
 var $385=$125;
 var $386=$385;
 var $387=(($386)|0);
 var $388=$126;
 var $389=$388;
 var $390=(($389)|0);
 $121=$384;
 $122=$387;
 $123=$390;
 var $391=$121;
 var $392=$122;
 var $393=$123;
 $119=$392;
 $120=$393;
 var $394=$119;
 $117=$394;
 var $395=$117;
 $116=$395;
 var $396=$116;
 var $397=(($396)|0);
 $115=$397;
 var $398=$115;
 var $399=$398;
 $114=$399;
 var $400=$114;
 var $401=(($400)|0);
 var $402=(($401)|0);
 var $403=$402;
 var $404=(($403)|0);
 var $405=$404;
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=$407&1;
 var $409=($408|0)!=0;
 if($409){label=27;break;}else{label=28;break;}
 case 27: 
 $110=$395;
 var $411=$110;
 var $412=(($411)|0);
 $109=$412;
 var $413=$109;
 var $414=$413;
 $108=$414;
 var $415=$108;
 var $416=(($415)|0);
 var $417=(($416)|0);
 var $418=$417;
 var $419=(($418+4)|0);
 var $420=HEAP32[(($419)>>2)];
 var $435=$420;label=29;break;
 case 28: 
 $113=$395;
 var $422=$113;
 var $423=(($422)|0);
 $112=$423;
 var $424=$112;
 var $425=$424;
 $111=$425;
 var $426=$111;
 var $427=(($426)|0);
 var $428=(($427)|0);
 var $429=$428;
 var $430=(($429)|0);
 var $431=$430;
 var $432=HEAP8[($431)];
 var $433=($432&255);
 var $434=$433>>1;
 var $435=$434;label=29;break;
 case 29: 
 var $435;
 $__lhs_sz_i_i_i=$435;
 var $436=$__lhs_sz_i_i_i;
 var $437=$120;
 $107=$437;
 var $438=$107;
 $106=$438;
 var $439=$106;
 var $440=(($439)|0);
 $105=$440;
 var $441=$105;
 var $442=$441;
 $104=$442;
 var $443=$104;
 var $444=(($443)|0);
 var $445=(($444)|0);
 var $446=$445;
 var $447=(($446)|0);
 var $448=$447;
 var $449=HEAP8[($448)];
 var $450=($449&255);
 var $451=$450&1;
 var $452=($451|0)!=0;
 if($452){label=30;break;}else{label=31;break;}
 case 30: 
 $100=$438;
 var $454=$100;
 var $455=(($454)|0);
 $99=$455;
 var $456=$99;
 var $457=$456;
 $98=$457;
 var $458=$98;
 var $459=(($458)|0);
 var $460=(($459)|0);
 var $461=$460;
 var $462=(($461+4)|0);
 var $463=HEAP32[(($462)>>2)];
 var $478=$463;label=32;break;
 case 31: 
 $103=$438;
 var $465=$103;
 var $466=(($465)|0);
 $102=$466;
 var $467=$102;
 var $468=$467;
 $101=$468;
 var $469=$101;
 var $470=(($469)|0);
 var $471=(($470)|0);
 var $472=$471;
 var $473=(($472)|0);
 var $474=$473;
 var $475=HEAP8[($474)];
 var $476=($475&255);
 var $477=$476>>1;
 var $478=$477;label=32;break;
 case 32: 
 var $478;
 var $479=($436|0)!=($478|0);
 if($479){label=33;break;}else{label=34;break;}
 case 33: 
 $118=0;
 label=50;break;
 case 34: 
 var $482=$119;
 $94=$482;
 var $483=$94;
 $93=$483;
 var $484=$93;
 $92=$484;
 var $485=$92;
 var $486=(($485)|0);
 $91=$486;
 var $487=$91;
 var $488=$487;
 $90=$488;
 var $489=$90;
 var $490=(($489)|0);
 var $491=(($490)|0);
 var $492=$491;
 var $493=(($492)|0);
 var $494=$493;
 var $495=HEAP8[($494)];
 var $496=($495&255);
 var $497=$496&1;
 var $498=($497|0)!=0;
 if($498){label=35;break;}else{label=36;break;}
 case 35: 
 $84=$484;
 var $500=$84;
 var $501=(($500)|0);
 $83=$501;
 var $502=$83;
 var $503=$502;
 $82=$503;
 var $504=$82;
 var $505=(($504)|0);
 var $506=(($505)|0);
 var $507=$506;
 var $508=(($507+8)|0);
 var $509=HEAP32[(($508)>>2)];
 var $523=$509;label=37;break;
 case 36: 
 $89=$484;
 var $511=$89;
 var $512=(($511)|0);
 $88=$512;
 var $513=$88;
 var $514=$513;
 $87=$514;
 var $515=$87;
 var $516=(($515)|0);
 var $517=(($516)|0);
 var $518=$517;
 var $519=(($518+1)|0);
 var $520=(($519)|0);
 $86=$520;
 var $521=$86;
 $85=$521;
 var $522=$85;
 var $523=$522;label=37;break;
 case 37: 
 var $523;
 $81=$523;
 var $524=$81;
 $__lp_i_i_i=$524;
 var $525=$120;
 $77=$525;
 var $526=$77;
 $76=$526;
 var $527=$76;
 $75=$527;
 var $528=$75;
 var $529=(($528)|0);
 $74=$529;
 var $530=$74;
 var $531=$530;
 $73=$531;
 var $532=$73;
 var $533=(($532)|0);
 var $534=(($533)|0);
 var $535=$534;
 var $536=(($535)|0);
 var $537=$536;
 var $538=HEAP8[($537)];
 var $539=($538&255);
 var $540=$539&1;
 var $541=($540|0)!=0;
 if($541){label=38;break;}else{label=39;break;}
 case 38: 
 $67=$527;
 var $543=$67;
 var $544=(($543)|0);
 $66=$544;
 var $545=$66;
 var $546=$545;
 $65=$546;
 var $547=$65;
 var $548=(($547)|0);
 var $549=(($548)|0);
 var $550=$549;
 var $551=(($550+8)|0);
 var $552=HEAP32[(($551)>>2)];
 var $566=$552;label=40;break;
 case 39: 
 $72=$527;
 var $554=$72;
 var $555=(($554)|0);
 $71=$555;
 var $556=$71;
 var $557=$556;
 $70=$557;
 var $558=$70;
 var $559=(($558)|0);
 var $560=(($559)|0);
 var $561=$560;
 var $562=(($561+1)|0);
 var $563=(($562)|0);
 $69=$563;
 var $564=$69;
 $68=$564;
 var $565=$68;
 var $566=$565;label=40;break;
 case 40: 
 var $566;
 $64=$566;
 var $567=$64;
 $__rp_i_i_i=$567;
 var $568=$119;
 $80=$568;
 var $569=$80;
 var $570=(($569)|0);
 $79=$570;
 var $571=$79;
 var $572=$571;
 $78=$572;
 var $573=$78;
 var $574=(($573)|0);
 var $575=(($574)|0);
 var $576=$575;
 var $577=(($576)|0);
 var $578=$577;
 var $579=HEAP8[($578)];
 var $580=($579&255);
 var $581=$580&1;
 var $582=($581|0)!=0;
 if($582){label=41;break;}else{label=43;break;}
 case 41: 
 var $584=$__lp_i_i_i;
 var $585=$__rp_i_i_i;
 var $586=$__lhs_sz_i_i_i;
 $95=$584;
 $96=$585;
 $97=$586;
 var $587=$95;
 var $588=$96;
 var $589=$97;
 var $590=(function() { try { __THREW__ = 0; return _memcmp($587,$588,$589) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=49;break; }
 case 42: 
 var $591=($590|0)==0;
 $118=$591;
 label=50;break;
 case 43: 
 label=44;break;
 case 44: 
 var $594=$__lhs_sz_i_i_i;
 var $595=($594|0)!=0;
 if($595){label=45;break;}else{label=48;break;}
 case 45: 
 var $597=$__lp_i_i_i;
 var $598=HEAP8[($597)];
 var $599=(($598<<24)>>24);
 var $600=$__rp_i_i_i;
 var $601=HEAP8[($600)];
 var $602=(($601<<24)>>24);
 var $603=($599|0)!=($602|0);
 if($603){label=46;break;}else{label=47;break;}
 case 46: 
 $118=0;
 label=50;break;
 case 47: 
 var $606=$__lhs_sz_i_i_i;
 var $607=((($606)-(1))|0);
 $__lhs_sz_i_i_i=$607;
 var $608=$__lp_i_i_i;
 var $609=(($608+1)|0);
 $__lp_i_i_i=$609;
 var $610=$__rp_i_i_i;
 var $611=(($610+1)|0);
 $__rp_i_i_i=$611;
 label=44;break;
 case 48: 
 $118=1;
 label=50;break;
 case 49: 
 var $614$0 = ___cxa_find_matching_catch(-1, -1,0); var $614$1 = tempRet0;
 var $615=$614$0;
 ___clang_call_terminate($615);
 throw "Reached an unreachable!";
 case 50: 
 var $616=$118;
 var $618=$616;label=51;break;
 case 51: 
 var $618;
 if($618){label=52;break;}else{label=54;break;}
 case 52: 
 label=53;break;
 case 53: 
 var $621=$__np;
 var $622=$621;
 var $623=(($622)|0);
 var $624=HEAP32[(($623)>>2)];
 $__np=$624;
 label=25;break;
 case 54: 
 var $626=$__np;
 var $627=$626;
 var $628=(($627)|0);
 var $629=HEAP32[(($628)>>2)];
 var $630=$__pp;
 var $631=$630;
 var $632=(($631)|0);
 HEAP32[(($632)>>2)]=$629;
 var $633=(($140)|0);
 var $634=$__chash;
 $129=$633;
 $130=$634;
 var $635=$129;
 var $636=$130;
 var $637=(($635)|0);
 $128=$637;
 var $638=$128;
 var $639=$638;
 $127=$639;
 var $640=$127;
 var $641=(($640)|0);
 var $642=HEAP32[(($641)>>2)];
 var $643=(($642+($636<<2))|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=$644;
 var $646=(($645)|0);
 var $647=HEAP32[(($646)>>2)];
 var $648=$__np;
 var $649=$648;
 var $650=(($649)|0);
 HEAP32[(($650)>>2)]=$647;
 var $651=$__cp;
 var $652=(($140)|0);
 var $653=$__chash;
 $133=$652;
 $134=$653;
 var $654=$133;
 var $655=$134;
 var $656=(($654)|0);
 $132=$656;
 var $657=$132;
 var $658=$657;
 $131=$658;
 var $659=$131;
 var $660=(($659)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+($655<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=$663;
 var $665=(($664)|0);
 HEAP32[(($665)>>2)]=$651;
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $669=$__pp;
 var $670=$669;
 var $671=(($670)|0);
 var $672=HEAP32[(($671)>>2)];
 $__cp=$672;
 label=16;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__hash;
 var $__bc;
 var $__chash;
 var $__nd;
 $96=$this;
 $97=$__k;
 var $98=$96;
 $95=$98;
 var $99=$95;
 var $100=(($99+12)|0);
 $94=$100;
 var $101=$94;
 var $102=$101;
 $93=$102;
 var $103=$93;
 var $104=$103;
 var $105=$97;
 $19=$104;
 $20=$105;
 var $106=$19;
 var $107=$106;
 var $108=$20;
 var $109=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108);
 $__hash=$109;
 $18=$98;
 var $110=$18;
 var $111=(($110)|0);
 $17=$111;
 var $112=$17;
 var $113=(($112)|0);
 $16=$113;
 var $114=$16;
 var $115=$114;
 $15=$115;
 var $116=$15;
 var $117=(($116+4)|0);
 $14=$117;
 var $118=$14;
 var $119=(($118)|0);
 $13=$119;
 var $120=$13;
 var $121=$120;
 $12=$121;
 var $122=$12;
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 $__bc=$124;
 var $125=$__bc;
 var $126=($125|0)!=0;
 if($126){label=2;break;}else{label=43;break;}
 case 2: 
 var $128=$__hash;
 var $129=$__bc;
 $10=$128;
 $11=$129;
 var $130=$11;
 var $131=$11;
 var $132=((($131)-(1))|0);
 var $133=$130&$132;
 var $134=($133|0)!=0;
 if($134){label=4;break;}else{label=3;break;}
 case 3: 
 var $136=$10;
 var $137=$11;
 var $138=((($137)-(1))|0);
 var $139=$136&$138;
 var $144=$139;label=5;break;
 case 4: 
 var $141=$10;
 var $142=$11;
 var $143=(((($141>>>0))%(($142>>>0)))&-1);
 var $144=$143;label=5;break;
 case 5: 
 var $144;
 $__chash=$144;
 var $145=(($98)|0);
 var $146=$__chash;
 $3=$145;
 $4=$146;
 var $147=$3;
 var $148=$4;
 var $149=(($147)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+($148<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 $__nd=$156;
 var $157=$__nd;
 var $158=($157|0)!=0;
 if($158){label=6;break;}else{label=42;break;}
 case 6: 
 var $160=$__nd;
 var $161=$160;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 $__nd=$163;
 label=7;break;
 case 7: 
 var $165=$__nd;
 var $166=($165|0)!=0;
 if($166){label=8;break;}else{var $190=0;label=12;break;}
 case 8: 
 var $168=$__nd;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$__bc;
 $5=$170;
 $6=$171;
 var $172=$6;
 var $173=$6;
 var $174=((($173)-(1))|0);
 var $175=$172&$174;
 var $176=($175|0)!=0;
 if($176){label=10;break;}else{label=9;break;}
 case 9: 
 var $178=$5;
 var $179=$6;
 var $180=((($179)-(1))|0);
 var $181=$178&$180;
 var $186=$181;label=11;break;
 case 10: 
 var $183=$5;
 var $184=$6;
 var $185=(((($183>>>0))%(($184>>>0)))&-1);
 var $186=$185;label=11;break;
 case 11: 
 var $186;
 var $187=$__chash;
 var $188=($186|0)==($187|0);
 var $190=$188;label=12;break;
 case 12: 
 var $190;
 if($190){label=13;break;}else{label=41;break;}
 case 13: 
 $9=$98;
 var $192=$9;
 var $193=(($192+16)|0);
 $8=$193;
 var $194=$8;
 var $195=$194;
 $7=$195;
 var $196=$7;
 var $197=$196;
 var $198=$__nd;
 var $199=(($198+8)|0);
 var $200=$97;
 $81=$197;
 $82=$199;
 $83=$200;
 var $201=$81;
 var $202=$201;
 var $203=$82;
 var $204=$203;
 var $205=(($204)|0);
 var $206=$83;
 $78=$202;
 $79=$205;
 $80=$206;
 var $207=$78;
 var $208=$79;
 var $209=$80;
 $76=$208;
 $77=$209;
 var $210=$76;
 $74=$210;
 var $211=$74;
 $73=$211;
 var $212=$73;
 var $213=(($212)|0);
 $72=$213;
 var $214=$72;
 var $215=$214;
 $71=$215;
 var $216=$71;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219)|0);
 var $221=$220;
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&1;
 var $225=($224|0)!=0;
 if($225){label=14;break;}else{label=15;break;}
 case 14: 
 $67=$211;
 var $227=$67;
 var $228=(($227)|0);
 $66=$228;
 var $229=$66;
 var $230=$229;
 $65=$230;
 var $231=$65;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $251=$236;label=16;break;
 case 15: 
 $70=$211;
 var $238=$70;
 var $239=(($238)|0);
 $69=$239;
 var $240=$69;
 var $241=$240;
 $68=$241;
 var $242=$68;
 var $243=(($242)|0);
 var $244=(($243)|0);
 var $245=$244;
 var $246=(($245)|0);
 var $247=$246;
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249>>1;
 var $251=$250;label=16;break;
 case 16: 
 var $251;
 $__lhs_sz_i_i_i=$251;
 var $252=$__lhs_sz_i_i_i;
 var $253=$77;
 $64=$253;
 var $254=$64;
 $63=$254;
 var $255=$63;
 var $256=(($255)|0);
 $62=$256;
 var $257=$62;
 var $258=$257;
 $61=$258;
 var $259=$61;
 var $260=(($259)|0);
 var $261=(($260)|0);
 var $262=$261;
 var $263=(($262)|0);
 var $264=$263;
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$266&1;
 var $268=($267|0)!=0;
 if($268){label=17;break;}else{label=18;break;}
 case 17: 
 $57=$254;
 var $270=$57;
 var $271=(($270)|0);
 $56=$271;
 var $272=$56;
 var $273=$272;
 $55=$273;
 var $274=$55;
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=$276;
 var $278=(($277+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $294=$279;label=19;break;
 case 18: 
 $60=$254;
 var $281=$60;
 var $282=(($281)|0);
 $59=$282;
 var $283=$59;
 var $284=$283;
 $58=$284;
 var $285=$58;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292>>1;
 var $294=$293;label=19;break;
 case 19: 
 var $294;
 var $295=($252|0)!=($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 $75=0;
 label=37;break;
 case 21: 
 var $298=$76;
 $51=$298;
 var $299=$51;
 $50=$299;
 var $300=$50;
 $49=$300;
 var $301=$49;
 var $302=(($301)|0);
 $48=$302;
 var $303=$48;
 var $304=$303;
 $47=$304;
 var $305=$47;
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$307;
 var $309=(($308)|0);
 var $310=$309;
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312&1;
 var $314=($313|0)!=0;
 if($314){label=22;break;}else{label=23;break;}
 case 22: 
 $41=$300;
 var $316=$41;
 var $317=(($316)|0);
 $40=$317;
 var $318=$40;
 var $319=$318;
 $39=$319;
 var $320=$39;
 var $321=(($320)|0);
 var $322=(($321)|0);
 var $323=$322;
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 var $339=$325;label=24;break;
 case 23: 
 $46=$300;
 var $327=$46;
 var $328=(($327)|0);
 $45=$328;
 var $329=$45;
 var $330=$329;
 $44=$330;
 var $331=$44;
 var $332=(($331)|0);
 var $333=(($332)|0);
 var $334=$333;
 var $335=(($334+1)|0);
 var $336=(($335)|0);
 $43=$336;
 var $337=$43;
 $42=$337;
 var $338=$42;
 var $339=$338;label=24;break;
 case 24: 
 var $339;
 $38=$339;
 var $340=$38;
 $__lp_i_i_i=$340;
 var $341=$77;
 $34=$341;
 var $342=$34;
 $33=$342;
 var $343=$33;
 $32=$343;
 var $344=$32;
 var $345=(($344)|0);
 $31=$345;
 var $346=$31;
 var $347=$346;
 $30=$347;
 var $348=$30;
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=$350;
 var $352=(($351)|0);
 var $353=$352;
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355&1;
 var $357=($356|0)!=0;
 if($357){label=25;break;}else{label=26;break;}
 case 25: 
 $24=$343;
 var $359=$24;
 var $360=(($359)|0);
 $23=$360;
 var $361=$23;
 var $362=$361;
 $22=$362;
 var $363=$22;
 var $364=(($363)|0);
 var $365=(($364)|0);
 var $366=$365;
 var $367=(($366+8)|0);
 var $368=HEAP32[(($367)>>2)];
 var $382=$368;label=27;break;
 case 26: 
 $29=$343;
 var $370=$29;
 var $371=(($370)|0);
 $28=$371;
 var $372=$28;
 var $373=$372;
 $27=$373;
 var $374=$27;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377+1)|0);
 var $379=(($378)|0);
 $26=$379;
 var $380=$26;
 $25=$380;
 var $381=$25;
 var $382=$381;label=27;break;
 case 27: 
 var $382;
 $21=$382;
 var $383=$21;
 $__rp_i_i_i=$383;
 var $384=$76;
 $37=$384;
 var $385=$37;
 var $386=(($385)|0);
 $36=$386;
 var $387=$36;
 var $388=$387;
 $35=$388;
 var $389=$35;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392)|0);
 var $394=$393;
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$396&1;
 var $398=($397|0)!=0;
 if($398){label=28;break;}else{label=30;break;}
 case 28: 
 var $400=$__lp_i_i_i;
 var $401=$__rp_i_i_i;
 var $402=$__lhs_sz_i_i_i;
 $52=$400;
 $53=$401;
 $54=$402;
 var $403=$52;
 var $404=$53;
 var $405=$54;
 var $406=(function() { try { __THREW__ = 0; return _memcmp($403,$404,$405) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $407=($406|0)==0;
 $75=$407;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $410=$__lhs_sz_i_i_i;
 var $411=($410|0)!=0;
 if($411){label=32;break;}else{label=35;break;}
 case 32: 
 var $413=$__lp_i_i_i;
 var $414=HEAP8[($413)];
 var $415=(($414<<24)>>24);
 var $416=$__rp_i_i_i;
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24);
 var $419=($415|0)!=($418|0);
 if($419){label=33;break;}else{label=34;break;}
 case 33: 
 $75=0;
 label=37;break;
 case 34: 
 var $422=$__lhs_sz_i_i_i;
 var $423=((($422)-(1))|0);
 $__lhs_sz_i_i_i=$423;
 var $424=$__lp_i_i_i;
 var $425=(($424+1)|0);
 $__lp_i_i_i=$425;
 var $426=$__rp_i_i_i;
 var $427=(($426+1)|0);
 $__rp_i_i_i=$427;
 label=31;break;
 case 35: 
 $75=1;
 label=37;break;
 case 36: 
 var $430$0 = ___cxa_find_matching_catch(-1, -1,0); var $430$1 = tempRet0;
 var $431=$430$0;
 ___clang_call_terminate($431);
 throw "Reached an unreachable!";
 case 37: 
 var $432=$75;
 if($432){label=38;break;}else{label=39;break;}
 case 38: 
 var $434=$__nd;
 $86=$agg_result;
 $87=$434;
 var $435=$86;
 var $436=$87;
 $84=$435;
 $85=$436;
 var $437=$84;
 var $438=(($437)|0);
 var $439=$85;
 HEAP32[(($438)>>2)]=$439;
 label=44;break;
 case 39: 
 label=40;break;
 case 40: 
 var $442=$__nd;
 var $443=$442;
 var $444=(($443)|0);
 var $445=HEAP32[(($444)>>2)];
 $__nd=$445;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $92=$98;
 var $449=$92;
 $90=$agg_result;
 $91=0;
 var $450=$90;
 var $451=$91;
 $88=$450;
 $89=$451;
 var $452=$88;
 var $453=(($452)|0);
 var $454=$89;
 HEAP32[(($453)>>2)]=$454;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $__t_i;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $__i1_i_i_i=sp;
 var $13;
 var $14=(sp)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(16);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33=(sp)+(24);
 var $34;
 var $35;
 var $36=(sp)+(32);
 var $37=(sp)+(40);
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47=(sp)+(48);
 var $48;
 var $49;
 var $50=(sp)+(56);
 var $51=(sp)+(64);
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $__tmp_i_i_i6;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79=(sp)+(72);
 var $80;
 var $81;
 var $82=(sp)+(80);
 var $83=(sp)+(88);
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93=(sp)+(96);
 var $94;
 var $95;
 var $96=(sp)+(104);
 var $97=(sp)+(112);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $__tmp_i_i_i;
 var $105;
 var $106;
 var $107;
 var $__i1_i_i1=(sp)+(120);
 var $108;
 var $109=(sp)+(128);
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116=(sp)+(136);
 var $117;
 var $__i1_i_i=(sp)+(144);
 var $118;
 var $119=(sp)+(152);
 var $120;
 var $121;
 var $122=(sp)+(160);
 var $123;
 var $124;
 var $125;
 var $__i=(sp)+(168);
 var $126=(sp)+(176);
 var $__h=(sp)+(184);
 var $__r=(sp)+(200);
 var $127=(sp)+(208);
 var $128;
 var $129;
 var $130;
 $124=$this;
 $125=$__k;
 var $131=$124;
 var $132=$125;
 $120=$131;
 $121=$132;
 var $133=$120;
 var $134=(($133)|0);
 var $135=$121;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($122,$134,$135);
 var $tmp_i=$119;
 var $tmp1_i=$122;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $118=$__i;
 var $136=$118;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$119;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $117=$136;
 var $137=$117;
 var $138=(($137)|0);
 var $139=$138;
 var $140=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];
 $115=$131;
 var $141=$115;
 var $142=(($141)|0);
 $114=$142;
 var $143=$114;
 $112=$116;
 $113=0;
 var $144=$112;
 var $145=$113;
 $110=$144;
 $111=$145;
 var $146=$110;
 var $147=(($146)|0);
 var $148=$111;
 HEAP32[(($147)>>2)]=$148;
 var $tmp_i2=$109;
 var $tmp1_i3=$116;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $108=$126;
 var $149=$108;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$109;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $107=$149;
 var $150=$107;
 var $151=(($150)|0);
 var $152=$151;
 var $153=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];
 $71=$__i;
 $72=$126;
 var $154=$71;
 var $155=(($154)|0);
 var $156=$72;
 var $157=(($156)|0);
 $69=$155;
 $70=$157;
 var $158=$69;
 var $159=$70;
 $67=$158;
 $68=$159;
 var $160=$67;
 var $161=(($160)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$68;
 var $164=(($163)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($162|0)==($165|0);
 var $167=$166^1;
 if($167){label=2;break;}else{label=3;break;}
 case 2: 
 $66=$__i;
 var $169=$66;
 var $170=(($169)|0);
 $65=$170;
 var $171=$65;
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+8)|0);
 $64=$174;
 var $175=$64;
 $63=$175;
 var $176=$63;
 var $177=$176;
 var $178=$177;
 var $179=$178;
 $62=$179;
 var $180=$62;
 $61=$180;
 var $181=$61;
 var $182=$181;
 var $183=$182;
 var $184=(($183+12)|0);
 $123=$184;
 label=24;break;
 case 3: 
 var $186=$125;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEE25__construct_node_with_keyERSC_($__h,$131,$186);
 var $187=(($131)|0);
 $26=$__h;
 var $188=$26;
 var $189=(($188)|0);
 $25=$189;
 var $190=$25;
 var $191=$190;
 $24=$191;
 var $192=$24;
 var $193=(($192)|0);
 var $194=HEAP32[(($193)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($127,$187,$194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 $21=$__r;
 $22=$127;
 $23=0;
 var $196=$21;
 var $197=$23;
 var $198=$22;
 $17=$196;
 $18=$198;
 $19=$197;
 var $199=$17;
 var $200=(($199)|0);
 var $201=$18;
 var $202=(($201)|0);
 $16=$202;
 var $203=$16;
 var $204=$20;
 var $205=$203;
 assert(4 % 1 === 0);HEAP32[(($204)>>2)]=HEAP32[(($205)>>2)];
 var $tmp_i_i13=$14;
 var $tmp1_i_i=$20;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i13)]=HEAP8[($tmp1_i_i)];HEAP8[((($tmp_i_i13)+(1))|0)]=HEAP8[((($tmp1_i_i)+(1))|0)];HEAP8[((($tmp_i_i13)+(2))|0)]=HEAP8[((($tmp1_i_i)+(2))|0)];HEAP8[((($tmp_i_i13)+(3))|0)]=HEAP8[((($tmp1_i_i)+(3))|0)];
 $13=$200;
 var $206=$13;
 var $tmp_i_i_i=$__i1_i_i_i;
 var $tmp2_i_i_i=$14;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp2_i_i_i)];HEAP8[((($tmp_i_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i_i)+(3))|0)];
 $12=$206;
 var $207=$12;
 var $208=(($207)|0);
 var $209=$208;
 var $210=$__i1_i_i_i;
 assert(4 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($210)>>2)];
 var $211=(($199+4)|0);
 var $212=$18;
 var $213=(($212+4)|0);
 $15=$213;
 var $214=$15;
 var $215=HEAP8[($214)];
 var $216=(($215)&1);
 var $217=($216&1);
 HEAP8[($211)]=$217;
 label=5;break;
 case 5: 
 $5=$__h;
 var $219=$5;
 var $220=(($219)|0);
 $4=$220;
 var $221=$4;
 var $222=$221;
 $3=$222;
 var $223=$3;
 var $224=(($223)|0);
 var $225=HEAP32[(($224)>>2)];
 $__t_i=$225;
 var $226=(($219)|0);
 $2=$226;
 var $227=$2;
 var $228=$227;
 $1=$228;
 var $229=$1;
 var $230=(($229)|0);
 HEAP32[(($230)>>2)]=0;
 var $231=$__t_i;
 var $232=(($__r)|0);
 $11=$232;
 var $233=$11;
 var $234=(($233)|0);
 $10=$234;
 var $235=$10;
 var $236=(($235)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+8)|0);
 $9=$238;
 var $239=$9;
 $8=$239;
 var $240=$8;
 var $241=$240;
 var $242=$241;
 var $243=$242;
 $7=$243;
 var $244=$7;
 $6=$244;
 var $245=$6;
 var $246=$245;
 var $247=$246;
 label=6;break;
 case 6: 
 var $249=(($247+12)|0);
 $123=$249;
 $130=1;
 $60=$__h;
 var $250=$60;
 $59=$250;
 var $251=$59;
 $57=$251;
 $58=0;
 var $252=$57;
 var $253=(($252)|0);
 $56=$253;
 var $254=$56;
 var $255=$254;
 $55=$255;
 var $256=$55;
 var $257=(($256)|0);
 var $258=HEAP32[(($257)>>2)];
 $__tmp_i_i_i6=$258;
 var $259=$58;
 var $260=(($252)|0);
 $30=$260;
 var $261=$30;
 var $262=$261;
 $29=$262;
 var $263=$29;
 var $264=(($263)|0);
 HEAP32[(($264)>>2)]=$259;
 var $265=$__tmp_i_i_i6;
 var $266=($265|0)!=0;
 if($266){label=7;break;}else{label=14;break;}
 case 7: 
 var $268=(($252)|0);
 $28=$268;
 var $269=$28;
 var $270=$269;
 $27=$270;
 var $271=$27;
 var $272=(($271+4)|0);
 var $273=$__tmp_i_i_i6;
 $53=$272;
 $54=$273;
 var $274=$53;
 var $275=(($274+5)|0);
 var $276=HEAP8[($275)];
 var $277=(($276)&1);
 if($277){label=8;break;}else{label=9;break;}
 case 8: 
 var $279=(($274)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=$54;
 var $282=(($281+8)|0);
 var $283=$282;
 var $284=(($283+12)|0);
 $52=$284;
 var $285=$52;
 var $286=$285;
 var $287=$286;
 $48=$280;
 $49=$287;
 var $288=$51;
 var $289=$48;
 var $290=$49;
 var $tmp_i_i_i_i_i7=$47;
 var $tmp1_i_i_i_i_i8=$50;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i7)]=HEAP8[($tmp1_i_i_i_i_i8)];
 $45=$289;
 $46=$290;
 var $291=$46;
 label=9;break;
 case 9: 
 var $293=(($274+4)|0);
 var $294=HEAP8[($293)];
 var $295=(($294)&1);
 if($295){label=10;break;}else{label=11;break;}
 case 10: 
 var $297=(($274)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$54;
 var $300=(($299+8)|0);
 var $301=$300;
 var $302=(($301)|0);
 $38=$302;
 var $303=$38;
 var $304=$303;
 var $305=$304;
 $34=$298;
 $35=$305;
 var $306=$37;
 var $307=$34;
 var $308=$35;
 var $tmp_i1_i_i_i_i9=$33;
 var $tmp1_i2_i_i_i_i10=$36;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i9)]=HEAP8[($tmp1_i2_i_i_i_i10)];
 $31=$307;
 $32=$308;
 var $309=$32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($309);
 label=11;break;
 case 11: 
 var $311=$54;
 var $312=($311|0)!=0;
 if($312){label=12;break;}else{label=13;break;}
 case 12: 
 var $314=(($274)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=$54;
 $42=$315;
 $43=$316;
 $44=1;
 var $317=$42;
 var $318=$43;
 var $319=$44;
 $39=$317;
 $40=$318;
 $41=$319;
 var $320=$39;
 var $321=$40;
 var $322=$321;
 __ZdlPv($322);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=24;break;
 case 15: 
 var $324$0 = ___cxa_find_matching_catch(-1, -1); var $324$1 = tempRet0;
 var $325=$324$0;
 $128=$325;
 var $326=$324$1;
 $129=$326;
 $106=$__h;
 var $327=$106;
 $105=$327;
 var $328=$105;
 $103=$328;
 $104=0;
 var $329=$103;
 var $330=(($329)|0);
 $102=$330;
 var $331=$102;
 var $332=$331;
 $101=$332;
 var $333=$101;
 var $334=(($333)|0);
 var $335=HEAP32[(($334)>>2)];
 $__tmp_i_i_i=$335;
 var $336=$104;
 var $337=(($329)|0);
 $76=$337;
 var $338=$76;
 var $339=$338;
 $75=$339;
 var $340=$75;
 var $341=(($340)|0);
 HEAP32[(($341)>>2)]=$336;
 var $342=$__tmp_i_i_i;
 var $343=($342|0)!=0;
 if($343){label=16;break;}else{label=23;break;}
 case 16: 
 var $345=(($329)|0);
 $74=$345;
 var $346=$74;
 var $347=$346;
 $73=$347;
 var $348=$73;
 var $349=(($348+4)|0);
 var $350=$__tmp_i_i_i;
 $99=$349;
 $100=$350;
 var $351=$99;
 var $352=(($351+5)|0);
 var $353=HEAP8[($352)];
 var $354=(($353)&1);
 if($354){label=17;break;}else{label=18;break;}
 case 17: 
 var $356=(($351)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=$100;
 var $359=(($358+8)|0);
 var $360=$359;
 var $361=(($360+12)|0);
 $98=$361;
 var $362=$98;
 var $363=$362;
 var $364=$363;
 $94=$357;
 $95=$364;
 var $365=$97;
 var $366=$94;
 var $367=$95;
 var $tmp_i_i_i_i_i=$93;
 var $tmp1_i_i_i_i_i=$96;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $91=$366;
 $92=$367;
 var $368=$92;
 label=18;break;
 case 18: 
 var $370=(($351+4)|0);
 var $371=HEAP8[($370)];
 var $372=(($371)&1);
 if($372){label=19;break;}else{label=20;break;}
 case 19: 
 var $374=(($351)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=$100;
 var $377=(($376+8)|0);
 var $378=$377;
 var $379=(($378)|0);
 $84=$379;
 var $380=$84;
 var $381=$380;
 var $382=$381;
 $80=$375;
 $81=$382;
 var $383=$83;
 var $384=$80;
 var $385=$81;
 var $tmp_i1_i_i_i_i=$79;
 var $tmp1_i2_i_i_i_i=$82;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $77=$384;
 $78=$385;
 var $386=$78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($386);
 label=20;break;
 case 20: 
 var $388=$100;
 var $389=($388|0)!=0;
 if($389){label=21;break;}else{label=22;break;}
 case 21: 
 var $391=(($351)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$100;
 $88=$392;
 $89=$393;
 $90=1;
 var $394=$88;
 var $395=$89;
 var $396=$90;
 $85=$394;
 $86=$395;
 $87=$396;
 var $397=$85;
 var $398=$86;
 var $399=$398;
 __ZdlPv($399);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=25;break;
 case 24: 
 var $401=$123;
 STACKTOP=sp;return $401;
 case 25: 
 var $403=$128;
 var $404=$129;
 var $405$0=$403;
 var $405$1=0;
 var $406$0=$405$0;
 var $406$1=$404;
 ___resumeException($406$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEE25__construct_node_with_keyERSC_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=(sp)+(8);
 var $15=(sp)+(16);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27=(sp)+(24);
 var $28;
 var $29;
 var $30=(sp)+(32);
 var $31=(sp)+(40);
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41=(sp)+(48);
 var $42=(sp)+(56);
 var $43;
 var $44;
 var $45=(sp)+(64);
 var $46=(sp)+(72);
 var $__t21_i_i_i8=(sp)+(80);
 var $47;
 var $48;
 var $49=(sp)+(88);
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $__t_i_i_i;
 var $58;
 var $59;
 var $60=(sp)+(96);
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73=(sp)+(104);
 var $74;
 var $75;
 var $76=(sp)+(112);
 var $77=(sp)+(120);
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87=(sp)+(128);
 var $88;
 var $89;
 var $90=(sp)+(136);
 var $91=(sp)+(144);
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $__tmp_i_i_i1;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105=(sp)+(152);
 var $106=(sp)+(160);
 var $107;
 var $108;
 var $109=(sp)+(168);
 var $110=(sp)+(176);
 var $__t21_i_i_i=(sp)+(184);
 var $111;
 var $112;
 var $113=(sp)+(192);
 var $114;
 var $115;
 var $116;
 var $117;
 var $118=(sp)+(200);
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137=(sp)+(208);
 var $138;
 var $139;
 var $140=(sp)+(216);
 var $141=(sp)+(224);
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151=(sp)+(232);
 var $152;
 var $153;
 var $154=(sp)+(240);
 var $155=(sp)+(248);
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $__tmp_i_i_i;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $__na;
 var $__h=(sp)+(256);
 var $170=(sp)+(272);
 var $171;
 var $172;
 var $173;
 $168=$this;
 $169=$__k;
 var $174=$168;
 var $175=(($174)|0);
 $167=$175;
 var $176=$167;
 var $177=(($176+8)|0);
 $166=$177;
 var $178=$166;
 var $179=$178;
 $165=$179;
 var $180=$165;
 var $181=$180;
 $__na=$181;
 var $182=$__na;
 $129=$182;
 $130=1;
 var $183=$129;
 var $184=$130;
 $126=$183;
 $127=$184;
 $128=0;
 var $185=$126;
 var $186=$127;
 var $187=((($186)*(24))&-1);
 var $188=__Znwj($187);
 var $189=$188;
 var $190=$__na;
 $124=$170;
 $125=$190;
 var $191=$124;
 var $192=$125;
 $122=$191;
 $123=$192;
 var $193=$122;
 var $194=(($193)|0);
 var $195=$123;
 HEAP32[(($194)>>2)]=$195;
 var $196=(($193+4)|0);
 HEAP8[($196)]=0;
 var $197=(($193+5)|0);
 HEAP8[($197)]=0;
 $119=$__h;
 $120=$189;
 $121=$170;
 var $198=$119;
 var $199=$120;
 var $200=$121;
 $115=$198;
 $116=$199;
 $117=$200;
 var $201=$115;
 var $202=(($201)|0);
 var $203=$116;
 var $204=$117;
 $114=$204;
 var $205=$114;
 var $206=$118;
 var $207=$205;
 assert(8 % 1 === 0);HEAP32[(($206)>>2)]=HEAP32[(($207)>>2)];HEAP32[((($206)+(4))>>2)]=HEAP32[((($207)+(4))>>2)];
 var $tmp_i_i=$113;
 var $tmp1_i_i=$118;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $111=$202;
 $112=$203;
 var $208=$111;
 var $209=$112;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$113;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $108=$208;
 HEAP32[(($109)>>2)]=$209;
 var $210=$108;
 var $211=$210;
 $107=$109;
 var $212=$107;
 var $213=HEAP32[(($212)>>2)];
 $101=$__t21_i_i_i;
 var $214=$101;
 var $215=$110;
 var $216=$214;
 assert(8 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];
 var $tmp_i_i_i_i=$106;
 var $tmp1_i_i_i_i=$110;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $104=$211;
 HEAP32[(($105)>>2)]=$213;
 var $217=$104;
 var $218=(($217)|0);
 $103=$105;
 var $219=$103;
 var $220=HEAP32[(($219)>>2)];
 HEAP32[(($218)>>2)]=$220;
 var $221=(($217+4)|0);
 $102=$106;
 var $222=$102;
 var $223=$221;
 var $224=$222;
 assert(8 % 1 === 0);HEAP32[(($223)>>2)]=HEAP32[(($224)>>2)];HEAP32[((($223)+(4))>>2)]=HEAP32[((($224)+(4))>>2)];
 var $225=$__na;
 $66=$__h;
 var $226=$66;
 var $227=(($226)|0);
 $65=$227;
 var $228=$65;
 var $229=$228;
 $64=$229;
 var $230=$64;
 var $231=(($230)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+8)|0);
 var $234=$233;
 var $235=(($234)|0);
 $63=$235;
 var $236=$63;
 var $237=$236;
 var $238=$237;
 var $239=$169;
 $11=$225;
 $12=$238;
 $13=$239;
 var $240=$15;
 var $241=$11;
 var $242=$12;
 var $243=$13;
 $10=$243;
 var $244=$10;
 var $tmp_i15=$9;
 var $tmp1_i16=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i15)]=HEAP8[($tmp1_i16)];
 $6=$241;
 $7=$242;
 $8=$244;
 var $245=$6;
 var $246=$7;
 var $247=$8;
 $5=$247;
 var $248=$5;
 $2=$245;
 $3=$246;
 $4=$248;
 var $249=$2;
 var $250=$3;
 var $251=$250;
 var $252=($251|0)==0;
 if($252){var $257=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $254=$251;
 var $255=$4;
 $1=$255;
 var $256=$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($254,$256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $257=$254;label=4;break;
 case 4: 
 var $257;
 label=5;break;
 case 5: 
 $18=$__h;
 var $259=$18;
 var $260=(($259)|0);
 $17=$260;
 var $261=$17;
 var $262=$261;
 $16=$262;
 var $263=$16;
 var $264=(($263+4)|0);
 var $265=(($264+4)|0);
 HEAP8[($265)]=1;
 var $266=$__na;
 $21=$__h;
 var $267=$21;
 var $268=(($267)|0);
 $20=$268;
 var $269=$20;
 var $270=$269;
 $19=$270;
 var $271=$19;
 var $272=(($271)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+8)|0);
 var $275=$274;
 var $276=(($275+12)|0);
 $22=$276;
 var $277=$22;
 var $278=$277;
 var $279=$278;
 $28=$266;
 $29=$279;
 var $280=$31;
 var $281=$28;
 var $282=$29;
 var $tmp_i=$27;
 var $tmp1_i=$30;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $25=$281;
 $26=$282;
 var $283=$25;
 var $284=$26;
 $23=$283;
 $24=$284;
 var $285=$23;
 var $286=$24;
 var $287=$286;
 var $288=($287|0)==0;
 if($288){var $291=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $290=$287;
 HEAP32[(($290)>>2)]=0;
 var $291=$290;label=7;break;
 case 7: 
 var $291;
 label=8;break;
 case 8: 
 $34=$__h;
 var $293=$34;
 var $294=(($293)|0);
 $33=$294;
 var $295=$33;
 var $296=$295;
 $32=$296;
 var $297=$32;
 var $298=(($297+4)|0);
 var $299=(($298+5)|0);
 HEAP8[($299)]=1;
 $35=$__h;
 var $300=$35;
 $61=$agg_result;
 $62=$300;
 var $301=$61;
 var $302=$62;
 $58=$301;
 $59=$302;
 var $303=$58;
 var $304=(($303)|0);
 var $305=$59;
 $57=$305;
 var $306=$57;
 var $307=(($306)|0);
 $56=$307;
 var $308=$56;
 var $309=$308;
 $55=$309;
 var $310=$55;
 var $311=(($310)|0);
 var $312=HEAP32[(($311)>>2)];
 $__t_i_i_i=$312;
 var $313=(($306)|0);
 $54=$313;
 var $314=$54;
 var $315=$314;
 $53=$315;
 var $316=$53;
 var $317=(($316)|0);
 HEAP32[(($317)>>2)]=0;
 var $318=$__t_i_i_i;
 var $319=$59;
 $52=$319;
 var $320=$52;
 var $321=(($320)|0);
 $51=$321;
 var $322=$51;
 var $323=$322;
 $50=$323;
 var $324=$50;
 var $325=(($324+4)|0);
 $36=$325;
 var $326=$36;
 var $327=$60;
 var $328=$326;
 assert(8 % 1 === 0);HEAP32[(($327)>>2)]=HEAP32[(($328)>>2)];HEAP32[((($327)+(4))>>2)]=HEAP32[((($328)+(4))>>2)];
 var $tmp_i_i9=$49;
 var $tmp1_i_i10=$60;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i9, $tmp1_i_i10, 8)|0);
 $47=$304;
 $48=$318;
 var $329=$47;
 var $330=$48;
 var $tmp_i_i_i11=$__t21_i_i_i8;
 var $tmp2_i_i_i12=$49;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i11, $tmp2_i_i_i12, 8)|0);
 $44=$329;
 HEAP32[(($45)>>2)]=$330;
 var $331=$44;
 var $332=$331;
 $43=$45;
 var $333=$43;
 var $334=HEAP32[(($333)>>2)];
 $37=$__t21_i_i_i8;
 var $335=$37;
 var $336=$46;
 var $337=$335;
 assert(8 % 1 === 0);HEAP32[(($336)>>2)]=HEAP32[(($337)>>2)];HEAP32[((($336)+(4))>>2)]=HEAP32[((($337)+(4))>>2)];
 var $tmp_i_i_i_i13=$42;
 var $tmp1_i_i_i_i14=$46;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i13, $tmp1_i_i_i_i14, 8)|0);
 $40=$332;
 HEAP32[(($41)>>2)]=$334;
 var $338=$40;
 var $339=(($338)|0);
 $39=$41;
 var $340=$39;
 var $341=HEAP32[(($340)>>2)];
 HEAP32[(($339)>>2)]=$341;
 var $342=(($338+4)|0);
 $38=$42;
 var $343=$38;
 var $344=$342;
 var $345=$343;
 assert(8 % 1 === 0);HEAP32[(($344)>>2)]=HEAP32[(($345)>>2)];HEAP32[((($344)+(4))>>2)]=HEAP32[((($345)+(4))>>2)];
 $173=1;
 $100=$__h;
 var $346=$100;
 $99=$346;
 var $347=$99;
 $97=$347;
 $98=0;
 var $348=$97;
 var $349=(($348)|0);
 $96=$349;
 var $350=$96;
 var $351=$350;
 $95=$351;
 var $352=$95;
 var $353=(($352)|0);
 var $354=HEAP32[(($353)>>2)];
 $__tmp_i_i_i1=$354;
 var $355=$98;
 var $356=(($348)|0);
 $70=$356;
 var $357=$70;
 var $358=$357;
 $69=$358;
 var $359=$69;
 var $360=(($359)|0);
 HEAP32[(($360)>>2)]=$355;
 var $361=$__tmp_i_i_i1;
 var $362=($361|0)!=0;
 if($362){label=9;break;}else{label=16;break;}
 case 9: 
 var $364=(($348)|0);
 $68=$364;
 var $365=$68;
 var $366=$365;
 $67=$366;
 var $367=$67;
 var $368=(($367+4)|0);
 var $369=$__tmp_i_i_i1;
 $93=$368;
 $94=$369;
 var $370=$93;
 var $371=(($370+5)|0);
 var $372=HEAP8[($371)];
 var $373=(($372)&1);
 if($373){label=10;break;}else{label=11;break;}
 case 10: 
 var $375=(($370)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=$94;
 var $378=(($377+8)|0);
 var $379=$378;
 var $380=(($379+12)|0);
 $92=$380;
 var $381=$92;
 var $382=$381;
 var $383=$382;
 $88=$376;
 $89=$383;
 var $384=$91;
 var $385=$88;
 var $386=$89;
 var $tmp_i_i_i_i_i2=$87;
 var $tmp1_i_i_i_i_i3=$90;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i2)]=HEAP8[($tmp1_i_i_i_i_i3)];
 $85=$385;
 $86=$386;
 var $387=$86;
 label=11;break;
 case 11: 
 var $389=(($370+4)|0);
 var $390=HEAP8[($389)];
 var $391=(($390)&1);
 if($391){label=12;break;}else{label=13;break;}
 case 12: 
 var $393=(($370)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$94;
 var $396=(($395+8)|0);
 var $397=$396;
 var $398=(($397)|0);
 $78=$398;
 var $399=$78;
 var $400=$399;
 var $401=$400;
 $74=$394;
 $75=$401;
 var $402=$77;
 var $403=$74;
 var $404=$75;
 var $tmp_i1_i_i_i_i4=$73;
 var $tmp1_i2_i_i_i_i5=$76;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i4)]=HEAP8[($tmp1_i2_i_i_i_i5)];
 $71=$403;
 $72=$404;
 var $405=$72;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($405);
 label=13;break;
 case 13: 
 var $407=$94;
 var $408=($407|0)!=0;
 if($408){label=14;break;}else{label=15;break;}
 case 14: 
 var $410=(($370)|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=$94;
 $82=$411;
 $83=$412;
 $84=1;
 var $413=$82;
 var $414=$83;
 var $415=$84;
 $79=$413;
 $80=$414;
 $81=$415;
 var $416=$79;
 var $417=$80;
 var $418=$417;
 __ZdlPv($418);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
 case 17: 
 var $420$0 = ___cxa_find_matching_catch(-1, -1); var $420$1 = tempRet0;
 var $421=$420$0;
 $171=$421;
 var $422=$420$1;
 $172=$422;
 $164=$__h;
 var $423=$164;
 $163=$423;
 var $424=$163;
 $161=$424;
 $162=0;
 var $425=$161;
 var $426=(($425)|0);
 $160=$426;
 var $427=$160;
 var $428=$427;
 $159=$428;
 var $429=$159;
 var $430=(($429)|0);
 var $431=HEAP32[(($430)>>2)];
 $__tmp_i_i_i=$431;
 var $432=$162;
 var $433=(($425)|0);
 $134=$433;
 var $434=$134;
 var $435=$434;
 $133=$435;
 var $436=$133;
 var $437=(($436)|0);
 HEAP32[(($437)>>2)]=$432;
 var $438=$__tmp_i_i_i;
 var $439=($438|0)!=0;
 if($439){label=18;break;}else{label=25;break;}
 case 18: 
 var $441=(($425)|0);
 $132=$441;
 var $442=$132;
 var $443=$442;
 $131=$443;
 var $444=$131;
 var $445=(($444+4)|0);
 var $446=$__tmp_i_i_i;
 $157=$445;
 $158=$446;
 var $447=$157;
 var $448=(($447+5)|0);
 var $449=HEAP8[($448)];
 var $450=(($449)&1);
 if($450){label=19;break;}else{label=20;break;}
 case 19: 
 var $452=(($447)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$158;
 var $455=(($454+8)|0);
 var $456=$455;
 var $457=(($456+12)|0);
 $156=$457;
 var $458=$156;
 var $459=$458;
 var $460=$459;
 $152=$453;
 $153=$460;
 var $461=$155;
 var $462=$152;
 var $463=$153;
 var $tmp_i_i_i_i_i=$151;
 var $tmp1_i_i_i_i_i=$154;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
 $149=$462;
 $150=$463;
 var $464=$150;
 label=20;break;
 case 20: 
 var $466=(($447+4)|0);
 var $467=HEAP8[($466)];
 var $468=(($467)&1);
 if($468){label=21;break;}else{label=22;break;}
 case 21: 
 var $470=(($447)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$158;
 var $473=(($472+8)|0);
 var $474=$473;
 var $475=(($474)|0);
 $142=$475;
 var $476=$142;
 var $477=$476;
 var $478=$477;
 $138=$471;
 $139=$478;
 var $479=$141;
 var $480=$138;
 var $481=$139;
 var $tmp_i1_i_i_i_i=$137;
 var $tmp1_i2_i_i_i_i=$140;
 assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
 $135=$480;
 $136=$481;
 var $482=$136;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($482);
 label=22;break;
 case 22: 
 var $484=$158;
 var $485=($484|0)!=0;
 if($485){label=23;break;}else{label=24;break;}
 case 23: 
 var $487=(($447)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=$158;
 $146=$488;
 $147=$489;
 $148=1;
 var $490=$146;
 var $491=$147;
 var $492=$148;
 $143=$490;
 $144=$491;
 $145=$492;
 var $493=$143;
 var $494=$144;
 var $495=$494;
 __ZdlPv($495);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $497=$171;
 var $498=$172;
 var $499$0=$497;
 var $499$1=0;
 var $500$0=$499$0;
 var $500$1=$498;
 ___resumeException($500$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg_result,$this,$__nd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94=sp;
 var $95;
 var $96;
 var $97=(sp)+(8);
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $__bc;
 var $__inserted=(sp)+(16);
 var $__ndptr;
 var $__chash;
 var $154=(sp)+(24);
 var $155=(sp)+(32);
 var $__pn;
 var $156=(sp)+(40);
 $152=$this;
 $153=$__nd;
 var $157=$152;
 $151=$157;
 var $158=$151;
 var $159=(($158+12)|0);
 $150=$159;
 var $160=$150;
 var $161=$160;
 $149=$161;
 var $162=$149;
 var $163=$162;
 var $164=$153;
 var $165=(($164+8)|0);
 $105=$163;
 $106=$165;
 var $166=$105;
 var $167=$166;
 var $168=$106;
 var $169=$168;
 var $170=(($169)|0);
 var $171=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($167,$170);
 var $172=$153;
 var $173=(($172+4)|0);
 HEAP32[(($173)>>2)]=$171;
 $104=$157;
 var $174=$104;
 var $175=(($174)|0);
 $103=$175;
 var $176=$103;
 var $177=(($176)|0);
 $102=$177;
 var $178=$102;
 var $179=$178;
 $101=$179;
 var $180=$101;
 var $181=(($180+4)|0);
 $100=$181;
 var $182=$100;
 var $183=(($182)|0);
 $99=$183;
 var $184=$99;
 var $185=$184;
 $98=$185;
 var $186=$98;
 var $187=(($186)|0);
 var $188=HEAP32[(($187)>>2)];
 $__bc=$188;
 HEAP8[($__inserted)]=0;
 var $189=$__bc;
 var $190=($189|0)!=0;
 if($190){label=2;break;}else{label=43;break;}
 case 2: 
 var $192=$153;
 var $193=(($192+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$__bc;
 $86=$194;
 $87=$195;
 var $196=$87;
 var $197=$87;
 var $198=((($197)-(1))|0);
 var $199=$196&$198;
 var $200=($199|0)!=0;
 if($200){label=4;break;}else{label=3;break;}
 case 3: 
 var $202=$86;
 var $203=$87;
 var $204=((($203)-(1))|0);
 var $205=$202&$204;
 var $210=$205;label=5;break;
 case 4: 
 var $207=$86;
 var $208=$87;
 var $209=(((($207>>>0))%(($208>>>0)))&-1);
 var $210=$209;label=5;break;
 case 5: 
 var $210;
 $__chash=$210;
 var $211=(($157)|0);
 var $212=$__chash;
 $8=$211;
 $9=$212;
 var $213=$8;
 var $214=$9;
 var $215=(($213)|0);
 $7=$215;
 var $216=$7;
 var $217=$216;
 $6=$217;
 var $218=$6;
 var $219=(($218)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+($214<<2))|0);
 var $222=HEAP32[(($221)>>2)];
 $__ndptr=$222;
 var $223=$__ndptr;
 var $224=($223|0)!=0;
 if($224){label=6;break;}else{label=42;break;}
 case 6: 
 var $226=$__ndptr;
 var $227=$226;
 var $228=(($227)|0);
 var $229=HEAP32[(($228)>>2)];
 $__ndptr=$229;
 label=7;break;
 case 7: 
 var $231=$__ndptr;
 var $232=($231|0)!=0;
 if($232){label=8;break;}else{var $256=0;label=12;break;}
 case 8: 
 var $234=$__ndptr;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=$__bc;
 $4=$236;
 $5=$237;
 var $238=$5;
 var $239=$5;
 var $240=((($239)-(1))|0);
 var $241=$238&$240;
 var $242=($241|0)!=0;
 if($242){label=10;break;}else{label=9;break;}
 case 9: 
 var $244=$4;
 var $245=$5;
 var $246=((($245)-(1))|0);
 var $247=$244&$246;
 var $252=$247;label=11;break;
 case 10: 
 var $249=$4;
 var $250=$5;
 var $251=(((($249>>>0))%(($250>>>0)))&-1);
 var $252=$251;label=11;break;
 case 11: 
 var $252;
 var $253=$__chash;
 var $254=($252|0)==($253|0);
 var $256=$254;label=12;break;
 case 12: 
 var $256;
 if($256){label=13;break;}else{label=41;break;}
 case 13: 
 $3=$157;
 var $258=$3;
 var $259=(($258+16)|0);
 $2=$259;
 var $260=$2;
 var $261=$260;
 $1=$261;
 var $262=$1;
 var $263=$262;
 var $264=$__ndptr;
 var $265=(($264+8)|0);
 var $266=$153;
 var $267=(($266+8)|0);
 $70=$263;
 $71=$265;
 $72=$267;
 var $268=$70;
 var $269=$268;
 var $270=$71;
 var $271=$270;
 var $272=(($271)|0);
 var $273=$72;
 var $274=$273;
 var $275=(($274)|0);
 $67=$269;
 $68=$272;
 $69=$275;
 var $276=$67;
 var $277=$68;
 var $278=$69;
 $65=$277;
 $66=$278;
 var $279=$65;
 $63=$279;
 var $280=$63;
 $62=$280;
 var $281=$62;
 var $282=(($281)|0);
 $61=$282;
 var $283=$61;
 var $284=$283;
 $60=$284;
 var $285=$60;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292&1;
 var $294=($293|0)!=0;
 if($294){label=14;break;}else{label=15;break;}
 case 14: 
 $56=$280;
 var $296=$56;
 var $297=(($296)|0);
 $55=$297;
 var $298=$55;
 var $299=$298;
 $54=$299;
 var $300=$54;
 var $301=(($300)|0);
 var $302=(($301)|0);
 var $303=$302;
 var $304=(($303+4)|0);
 var $305=HEAP32[(($304)>>2)];
 var $320=$305;label=16;break;
 case 15: 
 $59=$280;
 var $307=$59;
 var $308=(($307)|0);
 $58=$308;
 var $309=$58;
 var $310=$309;
 $57=$310;
 var $311=$57;
 var $312=(($311)|0);
 var $313=(($312)|0);
 var $314=$313;
 var $315=(($314)|0);
 var $316=$315;
 var $317=HEAP8[($316)];
 var $318=($317&255);
 var $319=$318>>1;
 var $320=$319;label=16;break;
 case 16: 
 var $320;
 $__lhs_sz_i_i_i=$320;
 var $321=$__lhs_sz_i_i_i;
 var $322=$66;
 $53=$322;
 var $323=$53;
 $52=$323;
 var $324=$52;
 var $325=(($324)|0);
 $51=$325;
 var $326=$51;
 var $327=$326;
 $50=$327;
 var $328=$50;
 var $329=(($328)|0);
 var $330=(($329)|0);
 var $331=$330;
 var $332=(($331)|0);
 var $333=$332;
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=$335&1;
 var $337=($336|0)!=0;
 if($337){label=17;break;}else{label=18;break;}
 case 17: 
 $46=$323;
 var $339=$46;
 var $340=(($339)|0);
 $45=$340;
 var $341=$45;
 var $342=$341;
 $44=$342;
 var $343=$44;
 var $344=(($343)|0);
 var $345=(($344)|0);
 var $346=$345;
 var $347=(($346+4)|0);
 var $348=HEAP32[(($347)>>2)];
 var $363=$348;label=19;break;
 case 18: 
 $49=$323;
 var $350=$49;
 var $351=(($350)|0);
 $48=$351;
 var $352=$48;
 var $353=$352;
 $47=$353;
 var $354=$47;
 var $355=(($354)|0);
 var $356=(($355)|0);
 var $357=$356;
 var $358=(($357)|0);
 var $359=$358;
 var $360=HEAP8[($359)];
 var $361=($360&255);
 var $362=$361>>1;
 var $363=$362;label=19;break;
 case 19: 
 var $363;
 var $364=($321|0)!=($363|0);
 if($364){label=20;break;}else{label=21;break;}
 case 20: 
 $64=0;
 label=37;break;
 case 21: 
 var $367=$65;
 $40=$367;
 var $368=$40;
 $39=$368;
 var $369=$39;
 $38=$369;
 var $370=$38;
 var $371=(($370)|0);
 $37=$371;
 var $372=$37;
 var $373=$372;
 $36=$373;
 var $374=$36;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377)|0);
 var $379=$378;
 var $380=HEAP8[($379)];
 var $381=($380&255);
 var $382=$381&1;
 var $383=($382|0)!=0;
 if($383){label=22;break;}else{label=23;break;}
 case 22: 
 $30=$369;
 var $385=$30;
 var $386=(($385)|0);
 $29=$386;
 var $387=$29;
 var $388=$387;
 $28=$388;
 var $389=$28;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392+8)|0);
 var $394=HEAP32[(($393)>>2)];
 var $408=$394;label=24;break;
 case 23: 
 $35=$369;
 var $396=$35;
 var $397=(($396)|0);
 $34=$397;
 var $398=$34;
 var $399=$398;
 $33=$399;
 var $400=$33;
 var $401=(($400)|0);
 var $402=(($401)|0);
 var $403=$402;
 var $404=(($403+1)|0);
 var $405=(($404)|0);
 $32=$405;
 var $406=$32;
 $31=$406;
 var $407=$31;
 var $408=$407;label=24;break;
 case 24: 
 var $408;
 $27=$408;
 var $409=$27;
 $__lp_i_i_i=$409;
 var $410=$66;
 $23=$410;
 var $411=$23;
 $22=$411;
 var $412=$22;
 $21=$412;
 var $413=$21;
 var $414=(($413)|0);
 $20=$414;
 var $415=$20;
 var $416=$415;
 $19=$416;
 var $417=$19;
 var $418=(($417)|0);
 var $419=(($418)|0);
 var $420=$419;
 var $421=(($420)|0);
 var $422=$421;
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=$424&1;
 var $426=($425|0)!=0;
 if($426){label=25;break;}else{label=26;break;}
 case 25: 
 $13=$412;
 var $428=$13;
 var $429=(($428)|0);
 $12=$429;
 var $430=$12;
 var $431=$430;
 $11=$431;
 var $432=$11;
 var $433=(($432)|0);
 var $434=(($433)|0);
 var $435=$434;
 var $436=(($435+8)|0);
 var $437=HEAP32[(($436)>>2)];
 var $451=$437;label=27;break;
 case 26: 
 $18=$412;
 var $439=$18;
 var $440=(($439)|0);
 $17=$440;
 var $441=$17;
 var $442=$441;
 $16=$442;
 var $443=$16;
 var $444=(($443)|0);
 var $445=(($444)|0);
 var $446=$445;
 var $447=(($446+1)|0);
 var $448=(($447)|0);
 $15=$448;
 var $449=$15;
 $14=$449;
 var $450=$14;
 var $451=$450;label=27;break;
 case 27: 
 var $451;
 $10=$451;
 var $452=$10;
 $__rp_i_i_i=$452;
 var $453=$65;
 $26=$453;
 var $454=$26;
 var $455=(($454)|0);
 $25=$455;
 var $456=$25;
 var $457=$456;
 $24=$457;
 var $458=$24;
 var $459=(($458)|0);
 var $460=(($459)|0);
 var $461=$460;
 var $462=(($461)|0);
 var $463=$462;
 var $464=HEAP8[($463)];
 var $465=($464&255);
 var $466=$465&1;
 var $467=($466|0)!=0;
 if($467){label=28;break;}else{label=30;break;}
 case 28: 
 var $469=$__lp_i_i_i;
 var $470=$__rp_i_i_i;
 var $471=$__lhs_sz_i_i_i;
 $41=$469;
 $42=$470;
 $43=$471;
 var $472=$41;
 var $473=$42;
 var $474=$43;
 var $475=(function() { try { __THREW__ = 0; return _memcmp($472,$473,$474) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $476=($475|0)==0;
 $64=$476;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $479=$__lhs_sz_i_i_i;
 var $480=($479|0)!=0;
 if($480){label=32;break;}else{label=35;break;}
 case 32: 
 var $482=$__lp_i_i_i;
 var $483=HEAP8[($482)];
 var $484=(($483<<24)>>24);
 var $485=$__rp_i_i_i;
 var $486=HEAP8[($485)];
 var $487=(($486<<24)>>24);
 var $488=($484|0)!=($487|0);
 if($488){label=33;break;}else{label=34;break;}
 case 33: 
 $64=0;
 label=37;break;
 case 34: 
 var $491=$__lhs_sz_i_i_i;
 var $492=((($491)-(1))|0);
 $__lhs_sz_i_i_i=$492;
 var $493=$__lp_i_i_i;
 var $494=(($493+1)|0);
 $__lp_i_i_i=$494;
 var $495=$__rp_i_i_i;
 var $496=(($495+1)|0);
 $__rp_i_i_i=$496;
 label=31;break;
 case 35: 
 $64=1;
 label=37;break;
 case 36: 
 var $499$0 = ___cxa_find_matching_catch(-1, -1,0); var $499$1 = tempRet0;
 var $500=$499$0;
 ___clang_call_terminate($500);
 throw "Reached an unreachable!";
 case 37: 
 var $501=$64;
 if($501){label=38;break;}else{label=39;break;}
 case 38: 
 label=63;break;
 case 39: 
 label=40;break;
 case 40: 
 var $505=$__ndptr;
 var $506=$505;
 var $507=(($506)|0);
 var $508=HEAP32[(($507)>>2)];
 $__ndptr=$508;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $75=$157;
 var $512=$75;
 var $513=(($512+12)|0);
 $74=$513;
 var $514=$74;
 var $515=$514;
 $73=$515;
 var $516=$73;
 var $517=(($516)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=((($518)+(1))|0);
 var $520=($519>>>0);
 var $521=$__bc;
 var $522=($521>>>0);
 $78=$157;
 var $523=$78;
 var $524=(($523+16)|0);
 $77=$524;
 var $525=$77;
 var $526=$525;
 $76=$526;
 var $527=$76;
 var $528=(($527)|0);
 var $529=HEAPF32[(($528)>>2)];
 var $530=($522)*($529);
 var $531=$520>$530;
 if($531){label=45;break;}else{label=44;break;}
 case 44: 
 var $533=$__bc;
 var $534=($533|0)==0;
 if($534){label=45;break;}else{label=54;break;}
 case 45: 
 var $536=$__bc;
 var $537=($536<<1);
 var $538=$__bc;
 $79=$538;
 var $539=$79;
 var $540=($539>>>0)>2;
 if($540){label=46;break;}else{var $548=0;label=47;break;}
 case 46: 
 var $542=$79;
 var $543=$79;
 var $544=((($543)-(1))|0);
 var $545=$542&$544;
 var $546=($545|0)!=0;
 var $547=$546^1;
 var $548=$547;label=47;break;
 case 47: 
 var $548;
 var $549=$548^1;
 var $550=($549&1);
 var $551=((($537)+($550))|0);
 HEAP32[(($154)>>2)]=$551;
 $82=$157;
 var $552=$82;
 var $553=(($552+12)|0);
 $81=$553;
 var $554=$81;
 var $555=$554;
 $80=$555;
 var $556=$80;
 var $557=(($556)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=((($558)+(1))|0);
 var $560=($559>>>0);
 $85=$157;
 var $561=$85;
 var $562=(($561+16)|0);
 $84=$562;
 var $563=$84;
 var $564=$563;
 $83=$564;
 var $565=$83;
 var $566=(($565)|0);
 var $567=HEAPF32[(($566)>>2)];
 var $568=($560)/($567);
 $88=$568;
 var $569=$88;
 var $570=Math_ceil($569);
 var $571=($570>=0 ? Math_floor($570) : Math_ceil($570));
 HEAP32[(($155)>>2)]=$571;
 $95=$154;
 $96=$155;
 var $572=$95;
 var $573=$96;
 var $tmp_i=$94;
 var $tmp1_i=$97;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $92=$572;
 $93=$573;
 var $574=$92;
 var $575=$93;
 $89=$94;
 $90=$574;
 $91=$575;
 var $576=$89;
 var $577=$90;
 var $578=HEAP32[(($577)>>2)];
 var $579=$91;
 var $580=HEAP32[(($579)>>2)];
 var $581=($578>>>0)<($580>>>0);
 if($581){label=48;break;}else{label=49;break;}
 case 48: 
 var $583=$93;
 var $586=$583;label=50;break;
 case 49: 
 var $585=$92;
 var $586=$585;label=50;break;
 case 50: 
 var $586;
 var $587=HEAP32[(($586)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($157,$587);
 $113=$157;
 var $588=$113;
 var $589=(($588)|0);
 $112=$589;
 var $590=$112;
 var $591=(($590)|0);
 $111=$591;
 var $592=$111;
 var $593=$592;
 $110=$593;
 var $594=$110;
 var $595=(($594+4)|0);
 $109=$595;
 var $596=$109;
 var $597=(($596)|0);
 $108=$597;
 var $598=$108;
 var $599=$598;
 $107=$599;
 var $600=$107;
 var $601=(($600)|0);
 var $602=HEAP32[(($601)>>2)];
 $__bc=$602;
 var $603=$153;
 var $604=(($603+4)|0);
 var $605=HEAP32[(($604)>>2)];
 var $606=$__bc;
 $114=$605;
 $115=$606;
 var $607=$115;
 var $608=$115;
 var $609=((($608)-(1))|0);
 var $610=$607&$609;
 var $611=($610|0)!=0;
 if($611){label=52;break;}else{label=51;break;}
 case 51: 
 var $613=$114;
 var $614=$115;
 var $615=((($614)-(1))|0);
 var $616=$613&$615;
 var $621=$616;label=53;break;
 case 52: 
 var $618=$114;
 var $619=$115;
 var $620=(((($618>>>0))%(($619>>>0)))&-1);
 var $621=$620;label=53;break;
 case 53: 
 var $621;
 $__chash=$621;
 label=54;break;
 case 54: 
 var $623=(($157)|0);
 var $624=$__chash;
 $118=$623;
 $119=$624;
 var $625=$118;
 var $626=$119;
 var $627=(($625)|0);
 $117=$627;
 var $628=$117;
 var $629=$628;
 $116=$629;
 var $630=$116;
 var $631=(($630)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(($632+($626<<2))|0);
 var $634=HEAP32[(($633)>>2)];
 $__pn=$634;
 var $635=$__pn;
 var $636=($635|0)==0;
 if($636){label=55;break;}else{label=61;break;}
 case 55: 
 var $638=(($157+8)|0);
 $121=$638;
 var $639=$121;
 var $640=$639;
 $120=$640;
 var $641=$120;
 var $642=(($641)|0);
 $123=$642;
 var $643=$123;
 $122=$643;
 var $644=$122;
 var $645=$644;
 var $646=$645;
 var $647=$646;
 $__pn=$647;
 var $648=$__pn;
 var $649=$648;
 var $650=(($649)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=$153;
 var $653=$652;
 var $654=(($653)|0);
 HEAP32[(($654)>>2)]=$651;
 var $655=$153;
 var $656=$__pn;
 var $657=$656;
 var $658=(($657)|0);
 HEAP32[(($658)>>2)]=$655;
 var $659=$__pn;
 var $660=(($157)|0);
 var $661=$__chash;
 $126=$660;
 $127=$661;
 var $662=$126;
 var $663=$127;
 var $664=(($662)|0);
 $125=$664;
 var $665=$125;
 var $666=$665;
 $124=$666;
 var $667=$124;
 var $668=(($667)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=(($669+($663<<2))|0);
 HEAP32[(($670)>>2)]=$659;
 var $671=$153;
 var $672=$671;
 var $673=(($672)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=($674|0)!=0;
 if($675){label=56;break;}else{label=60;break;}
 case 56: 
 var $677=$153;
 var $678=(($157)|0);
 var $679=$153;
 var $680=$679;
 var $681=(($680)|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=(($682+4)|0);
 var $684=HEAP32[(($683)>>2)];
 var $685=$__bc;
 $128=$684;
 $129=$685;
 var $686=$129;
 var $687=$129;
 var $688=((($687)-(1))|0);
 var $689=$686&$688;
 var $690=($689|0)!=0;
 if($690){label=58;break;}else{label=57;break;}
 case 57: 
 var $692=$128;
 var $693=$129;
 var $694=((($693)-(1))|0);
 var $695=$692&$694;
 var $700=$695;label=59;break;
 case 58: 
 var $697=$128;
 var $698=$129;
 var $699=(((($697>>>0))%(($698>>>0)))&-1);
 var $700=$699;label=59;break;
 case 59: 
 var $700;
 $132=$678;
 $133=$700;
 var $701=$132;
 var $702=$133;
 var $703=(($701)|0);
 $131=$703;
 var $704=$131;
 var $705=$704;
 $130=$705;
 var $706=$130;
 var $707=(($706)|0);
 var $708=HEAP32[(($707)>>2)];
 var $709=(($708+($702<<2))|0);
 HEAP32[(($709)>>2)]=$677;
 label=60;break;
 case 60: 
 label=62;break;
 case 61: 
 var $712=$__pn;
 var $713=$712;
 var $714=(($713)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=$153;
 var $717=$716;
 var $718=(($717)|0);
 HEAP32[(($718)>>2)]=$715;
 var $719=$153;
 var $720=$__pn;
 var $721=$720;
 var $722=(($721)|0);
 HEAP32[(($722)>>2)]=$719;
 label=62;break;
 case 62: 
 var $724=$153;
 $__ndptr=$724;
 $136=$157;
 var $725=$136;
 var $726=(($725+12)|0);
 $135=$726;
 var $727=$135;
 var $728=$727;
 $134=$728;
 var $729=$134;
 var $730=(($729)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=((($731)+(1))|0);
 HEAP32[(($730)>>2)]=$732;
 HEAP8[($__inserted)]=1;
 label=63;break;
 case 63: 
 var $734=$__ndptr;
 $139=$156;
 $140=$734;
 var $735=$139;
 var $736=$140;
 $137=$735;
 $138=$736;
 var $737=$137;
 var $738=(($737)|0);
 var $739=$138;
 HEAP32[(($738)>>2)]=$739;
 $146=$agg_result;
 $147=$156;
 $148=$__inserted;
 var $740=$146;
 var $741=$148;
 var $742=$147;
 $143=$740;
 $144=$742;
 $145=$741;
 var $743=$143;
 var $744=(($743)|0);
 var $745=$144;
 $142=$745;
 var $746=$142;
 var $747=$744;
 var $748=$746;
 assert(4 % 1 === 0);HEAP32[(($747)>>2)]=HEAP32[(($748)>>2)];
 var $749=(($743+4)|0);
 var $750=$145;
 $141=$750;
 var $751=$141;
 var $752=HEAP8[($751)];
 var $753=(($752)&1);
 var $754=($753&1);
 HEAP8[($749)]=$754;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=sp;
 var $23;
 var $24;
 var $25=(sp)+(8);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=(sp)+(16);
 var $__bc;
 var $36=(sp)+(24);
 $34=$this;
 HEAP32[(($35)>>2)]=$__n;
 var $37=$34;
 var $38=HEAP32[(($35)>>2)];
 var $39=($38|0)==1;
 if($39){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($35)>>2)]=2;
 label=6;break;
 case 3: 
 var $42=HEAP32[(($35)>>2)];
 var $43=HEAP32[(($35)>>2)];
 var $44=((($43)-(1))|0);
 var $45=$42&$44;
 var $46=($45|0)!=0;
 if($46){label=4;break;}else{label=5;break;}
 case 4: 
 var $48=HEAP32[(($35)>>2)];
 var $49=__ZNSt3__112__next_primeEj($48);
 HEAP32[(($35)>>2)]=$49;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 $33=$37;
 var $52=$33;
 var $53=(($52)|0);
 $32=$53;
 var $54=$32;
 var $55=(($54)|0);
 $31=$55;
 var $56=$31;
 var $57=$56;
 $30=$57;
 var $58=$30;
 var $59=(($58+4)|0);
 $29=$59;
 var $60=$29;
 var $61=(($60)|0);
 $28=$61;
 var $62=$28;
 var $63=$62;
 $27=$63;
 var $64=$27;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 $__bc=$66;
 var $67=HEAP32[(($35)>>2)];
 var $68=$__bc;
 var $69=($67>>>0)>($68>>>0);
 if($69){label=7;break;}else{label=8;break;}
 case 7: 
 var $71=HEAP32[(($35)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$71);
 label=21;break;
 case 8: 
 var $73=HEAP32[(($35)>>2)];
 var $74=$__bc;
 var $75=($73>>>0)<($74>>>0);
 if($75){label=9;break;}else{label=20;break;}
 case 9: 
 var $77=$__bc;
 $26=$77;
 var $78=$26;
 var $79=($78>>>0)>2;
 if($79){label=10;break;}else{var $87=0;label=11;break;}
 case 10: 
 var $81=$26;
 var $82=$26;
 var $83=((($82)-(1))|0);
 var $84=$81&$83;
 var $85=($84|0)!=0;
 var $86=$85^1;
 var $87=$86;label=11;break;
 case 11: 
 var $87;
 if($87){label=12;break;}else{label=13;break;}
 case 12: 
 $15=$37;
 var $89=$15;
 var $90=(($89+12)|0);
 $14=$90;
 var $91=$14;
 var $92=$91;
 $13=$92;
 var $93=$13;
 var $94=(($93)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95>>>0);
 $3=$37;
 var $97=$3;
 var $98=(($97+16)|0);
 $2=$98;
 var $99=$2;
 var $100=$99;
 $1=$100;
 var $101=$1;
 var $102=(($101)|0);
 var $103=HEAPF32[(($102)>>2)];
 var $104=($96)/($103);
 $4=$104;
 var $105=$4;
 var $106=Math_ceil($105);
 var $107=($106>=0 ? Math_floor($106) : Math_ceil($106));
 $6=$107;
 var $108=$6;
 var $109=((($108)-(1))|0);
 $5=$109;
 var $110=$5;
 var $111=_llvm_ctlz_i32($110,1);
 var $112=(((32)-($111))|0);
 var $113=1<<$112;
 var $136=$113;label=14;break;
 case 13: 
 $9=$37;
 var $115=$9;
 var $116=(($115+12)|0);
 $8=$116;
 var $117=$8;
 var $118=$117;
 $7=$118;
 var $119=$7;
 var $120=(($119)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($121>>>0);
 $12=$37;
 var $123=$12;
 var $124=(($123+16)|0);
 $11=$124;
 var $125=$11;
 var $126=$125;
 $10=$126;
 var $127=$10;
 var $128=(($127)|0);
 var $129=HEAPF32[(($128)>>2)];
 var $130=($122)/($129);
 $16=$130;
 var $131=$16;
 var $132=Math_ceil($131);
 var $133=($132>=0 ? Math_floor($132) : Math_ceil($132));
 var $134=__ZNSt3__112__next_primeEj($133);
 var $136=$134;label=14;break;
 case 14: 
 var $136;
 HEAP32[(($36)>>2)]=$136;
 $23=$35;
 $24=$36;
 var $137=$23;
 var $138=$24;
 var $tmp_i=$22;
 var $tmp1_i=$25;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $20=$137;
 $21=$138;
 var $139=$20;
 var $140=$21;
 $17=$22;
 $18=$139;
 $19=$140;
 var $141=$17;
 var $142=$18;
 var $143=HEAP32[(($142)>>2)];
 var $144=$19;
 var $145=HEAP32[(($144)>>2)];
 var $146=($143>>>0)<($145>>>0);
 if($146){label=15;break;}else{label=16;break;}
 case 15: 
 var $148=$21;
 var $151=$148;label=17;break;
 case 16: 
 var $150=$20;
 var $151=$150;label=17;break;
 case 17: 
 var $151;
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($35)>>2)]=$152;
 var $153=HEAP32[(($35)>>2)];
 var $154=$__bc;
 var $155=($153>>>0)<($154>>>0);
 if($155){label=18;break;}else{label=19;break;}
 case 18: 
 var $157=HEAP32[(($35)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$157);
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $__tmp_i;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $__npa;
 var $__i;
 var $__pp;
 var $__cp;
 var $__chash;
 var $__phash;
 var $__np;
 $138=$this;
 $139=$__nbc;
 var $140=$138;
 var $141=(($140)|0);
 $137=$141;
 var $142=$137;
 var $143=(($142)|0);
 $136=$143;
 var $144=$136;
 var $145=$144;
 $135=$145;
 var $146=$135;
 var $147=(($146+4)|0);
 $63=$147;
 var $148=$63;
 var $149=(($148)|0);
 $62=$149;
 var $150=$62;
 var $151=$150;
 $61=$151;
 var $152=$61;
 var $153=$152;
 $__npa=$153;
 var $154=(($140)|0);
 var $155=$139;
 var $156=($155>>>0)>0;
 if($156){label=2;break;}else{label=3;break;}
 case 2: 
 var $158=$__npa;
 var $159=$139;
 $59=$158;
 $60=$159;
 var $160=$59;
 var $161=$60;
 $56=$160;
 $57=$161;
 $58=0;
 var $162=$56;
 var $163=$57;
 var $164=($163<<2);
 var $165=__Znwj($164);
 var $166=$165;
 var $169=$166;label=4;break;
 case 3: 
 var $169=0;label=4;break;
 case 4: 
 var $169;
 $54=$154;
 $55=$169;
 var $170=$54;
 var $171=(($170)|0);
 $53=$171;
 var $172=$53;
 var $173=$172;
 $52=$173;
 var $174=$52;
 var $175=(($174)|0);
 var $176=HEAP32[(($175)>>2)];
 $__tmp_i=$176;
 var $177=$55;
 var $178=(($170)|0);
 $37=$178;
 var $179=$37;
 var $180=$179;
 $36=$180;
 var $181=$36;
 var $182=(($181)|0);
 HEAP32[(($182)>>2)]=$177;
 var $183=$__tmp_i;
 var $184=($183|0)!=0;
 if($184){label=5;break;}else{label=6;break;}
 case 5: 
 var $186=(($170)|0);
 $35=$186;
 var $187=$35;
 var $188=$187;
 $34=$188;
 var $189=$34;
 var $190=(($189+4)|0);
 var $191=$__tmp_i;
 $50=$190;
 $51=$191;
 var $192=$50;
 $49=$192;
 var $193=$49;
 var $194=(($193)|0);
 $48=$194;
 var $195=$48;
 var $196=$195;
 $47=$196;
 var $197=$47;
 var $198=$197;
 var $199=$51;
 $40=$192;
 var $200=$40;
 var $201=(($200)|0);
 $39=$201;
 var $202=$39;
 var $203=$202;
 $38=$203;
 var $204=$38;
 var $205=(($204)|0);
 var $206=HEAP32[(($205)>>2)];
 $44=$198;
 $45=$199;
 $46=$206;
 var $207=$44;
 var $208=$45;
 var $209=$46;
 $41=$207;
 $42=$208;
 $43=$209;
 var $210=$41;
 var $211=$42;
 var $212=$211;
 __ZdlPv($212);
 label=6;break;
 case 6: 
 var $213=$139;
 var $214=(($140)|0);
 $33=$214;
 var $215=$33;
 var $216=(($215)|0);
 $32=$216;
 var $217=$32;
 var $218=$217;
 $31=$218;
 var $219=$31;
 var $220=(($219+4)|0);
 $3=$220;
 var $221=$3;
 var $222=(($221)|0);
 $2=$222;
 var $223=$2;
 var $224=$223;
 $1=$224;
 var $225=$1;
 var $226=(($225)|0);
 HEAP32[(($226)>>2)]=$213;
 var $227=$139;
 var $228=($227>>>0)>0;
 if($228){label=7;break;}else{label=60;break;}
 case 7: 
 $__i=0;
 label=8;break;
 case 8: 
 var $231=$__i;
 var $232=$139;
 var $233=($231>>>0)<($232>>>0);
 if($233){label=9;break;}else{label=11;break;}
 case 9: 
 var $235=(($140)|0);
 var $236=$__i;
 $6=$235;
 $7=$236;
 var $237=$6;
 var $238=$7;
 var $239=(($237)|0);
 $5=$239;
 var $240=$5;
 var $241=$240;
 $4=$241;
 var $242=$4;
 var $243=(($242)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+($238<<2))|0);
 HEAP32[(($245)>>2)]=0;
 label=10;break;
 case 10: 
 var $247=$__i;
 var $248=((($247)+(1))|0);
 $__i=$248;
 label=8;break;
 case 11: 
 var $250=(($140+8)|0);
 $9=$250;
 var $251=$9;
 var $252=$251;
 $8=$252;
 var $253=$8;
 var $254=(($253)|0);
 $11=$254;
 var $255=$11;
 $10=$255;
 var $256=$10;
 var $257=$256;
 var $258=$257;
 var $259=$258;
 $__pp=$259;
 var $260=$__pp;
 var $261=$260;
 var $262=(($261)|0);
 var $263=HEAP32[(($262)>>2)];
 $__cp=$263;
 var $264=$__cp;
 var $265=($264|0)!=0;
 if($265){label=12;break;}else{label=59;break;}
 case 12: 
 var $267=$__cp;
 var $268=(($267+4)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=$139;
 $12=$269;
 $13=$270;
 var $271=$13;
 var $272=$13;
 var $273=((($272)-(1))|0);
 var $274=$271&$273;
 var $275=($274|0)!=0;
 if($275){label=14;break;}else{label=13;break;}
 case 13: 
 var $277=$12;
 var $278=$13;
 var $279=((($278)-(1))|0);
 var $280=$277&$279;
 var $285=$280;label=15;break;
 case 14: 
 var $282=$12;
 var $283=$13;
 var $284=(((($282>>>0))%(($283>>>0)))&-1);
 var $285=$284;label=15;break;
 case 15: 
 var $285;
 $__chash=$285;
 var $286=$__pp;
 var $287=(($140)|0);
 var $288=$__chash;
 $16=$287;
 $17=$288;
 var $289=$16;
 var $290=$17;
 var $291=(($289)|0);
 $15=$291;
 var $292=$15;
 var $293=$292;
 $14=$293;
 var $294=$14;
 var $295=(($294)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+($290<<2))|0);
 HEAP32[(($297)>>2)]=$286;
 var $298=$__chash;
 $__phash=$298;
 var $299=$__cp;
 $__pp=$299;
 var $300=$__cp;
 var $301=$300;
 var $302=(($301)|0);
 var $303=HEAP32[(($302)>>2)];
 $__cp=$303;
 label=16;break;
 case 16: 
 var $305=$__cp;
 var $306=($305|0)!=0;
 if($306){label=17;break;}else{label=58;break;}
 case 17: 
 var $308=$__cp;
 var $309=(($308+4)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$139;
 $18=$310;
 $19=$311;
 var $312=$19;
 var $313=$19;
 var $314=((($313)-(1))|0);
 var $315=$312&$314;
 var $316=($315|0)!=0;
 if($316){label=19;break;}else{label=18;break;}
 case 18: 
 var $318=$18;
 var $319=$19;
 var $320=((($319)-(1))|0);
 var $321=$318&$320;
 var $326=$321;label=20;break;
 case 19: 
 var $323=$18;
 var $324=$19;
 var $325=(((($323>>>0))%(($324>>>0)))&-1);
 var $326=$325;label=20;break;
 case 20: 
 var $326;
 $__chash=$326;
 var $327=$__chash;
 var $328=$__phash;
 var $329=($327|0)==($328|0);
 if($329){label=21;break;}else{label=22;break;}
 case 21: 
 var $331=$__cp;
 $__pp=$331;
 label=56;break;
 case 22: 
 var $333=(($140)|0);
 var $334=$__chash;
 $22=$333;
 $23=$334;
 var $335=$22;
 var $336=$23;
 var $337=(($335)|0);
 $21=$337;
 var $338=$21;
 var $339=$338;
 $20=$339;
 var $340=$20;
 var $341=(($340)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($342+($336<<2))|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=23;break;}else{label=24;break;}
 case 23: 
 var $347=$__pp;
 var $348=(($140)|0);
 var $349=$__chash;
 $26=$348;
 $27=$349;
 var $350=$26;
 var $351=$27;
 var $352=(($350)|0);
 $25=$352;
 var $353=$25;
 var $354=$353;
 $24=$354;
 var $355=$24;
 var $356=(($355)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+($351<<2))|0);
 HEAP32[(($358)>>2)]=$347;
 var $359=$__cp;
 $__pp=$359;
 var $360=$__chash;
 $__phash=$360;
 label=55;break;
 case 24: 
 var $362=$__cp;
 $__np=$362;
 label=25;break;
 case 25: 
 var $364=$__np;
 var $365=$364;
 var $366=(($365)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($367|0)!=0;
 if($368){label=26;break;}else{var $618=0;label=51;break;}
 case 26: 
 $30=$140;
 var $370=$30;
 var $371=(($370+16)|0);
 $29=$371;
 var $372=$29;
 var $373=$372;
 $28=$373;
 var $374=$28;
 var $375=$374;
 var $376=$__cp;
 var $377=(($376+8)|0);
 var $378=$__np;
 var $379=$378;
 var $380=(($379)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($381+8)|0);
 $124=$375;
 $125=$377;
 $126=$382;
 var $383=$124;
 var $384=$383;
 var $385=$125;
 var $386=$385;
 var $387=(($386)|0);
 var $388=$126;
 var $389=$388;
 var $390=(($389)|0);
 $121=$384;
 $122=$387;
 $123=$390;
 var $391=$121;
 var $392=$122;
 var $393=$123;
 $119=$392;
 $120=$393;
 var $394=$119;
 $117=$394;
 var $395=$117;
 $116=$395;
 var $396=$116;
 var $397=(($396)|0);
 $115=$397;
 var $398=$115;
 var $399=$398;
 $114=$399;
 var $400=$114;
 var $401=(($400)|0);
 var $402=(($401)|0);
 var $403=$402;
 var $404=(($403)|0);
 var $405=$404;
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=$407&1;
 var $409=($408|0)!=0;
 if($409){label=27;break;}else{label=28;break;}
 case 27: 
 $110=$395;
 var $411=$110;
 var $412=(($411)|0);
 $109=$412;
 var $413=$109;
 var $414=$413;
 $108=$414;
 var $415=$108;
 var $416=(($415)|0);
 var $417=(($416)|0);
 var $418=$417;
 var $419=(($418+4)|0);
 var $420=HEAP32[(($419)>>2)];
 var $435=$420;label=29;break;
 case 28: 
 $113=$395;
 var $422=$113;
 var $423=(($422)|0);
 $112=$423;
 var $424=$112;
 var $425=$424;
 $111=$425;
 var $426=$111;
 var $427=(($426)|0);
 var $428=(($427)|0);
 var $429=$428;
 var $430=(($429)|0);
 var $431=$430;
 var $432=HEAP8[($431)];
 var $433=($432&255);
 var $434=$433>>1;
 var $435=$434;label=29;break;
 case 29: 
 var $435;
 $__lhs_sz_i_i_i=$435;
 var $436=$__lhs_sz_i_i_i;
 var $437=$120;
 $107=$437;
 var $438=$107;
 $106=$438;
 var $439=$106;
 var $440=(($439)|0);
 $105=$440;
 var $441=$105;
 var $442=$441;
 $104=$442;
 var $443=$104;
 var $444=(($443)|0);
 var $445=(($444)|0);
 var $446=$445;
 var $447=(($446)|0);
 var $448=$447;
 var $449=HEAP8[($448)];
 var $450=($449&255);
 var $451=$450&1;
 var $452=($451|0)!=0;
 if($452){label=30;break;}else{label=31;break;}
 case 30: 
 $100=$438;
 var $454=$100;
 var $455=(($454)|0);
 $99=$455;
 var $456=$99;
 var $457=$456;
 $98=$457;
 var $458=$98;
 var $459=(($458)|0);
 var $460=(($459)|0);
 var $461=$460;
 var $462=(($461+4)|0);
 var $463=HEAP32[(($462)>>2)];
 var $478=$463;label=32;break;
 case 31: 
 $103=$438;
 var $465=$103;
 var $466=(($465)|0);
 $102=$466;
 var $467=$102;
 var $468=$467;
 $101=$468;
 var $469=$101;
 var $470=(($469)|0);
 var $471=(($470)|0);
 var $472=$471;
 var $473=(($472)|0);
 var $474=$473;
 var $475=HEAP8[($474)];
 var $476=($475&255);
 var $477=$476>>1;
 var $478=$477;label=32;break;
 case 32: 
 var $478;
 var $479=($436|0)!=($478|0);
 if($479){label=33;break;}else{label=34;break;}
 case 33: 
 $118=0;
 label=50;break;
 case 34: 
 var $482=$119;
 $94=$482;
 var $483=$94;
 $93=$483;
 var $484=$93;
 $92=$484;
 var $485=$92;
 var $486=(($485)|0);
 $91=$486;
 var $487=$91;
 var $488=$487;
 $90=$488;
 var $489=$90;
 var $490=(($489)|0);
 var $491=(($490)|0);
 var $492=$491;
 var $493=(($492)|0);
 var $494=$493;
 var $495=HEAP8[($494)];
 var $496=($495&255);
 var $497=$496&1;
 var $498=($497|0)!=0;
 if($498){label=35;break;}else{label=36;break;}
 case 35: 
 $84=$484;
 var $500=$84;
 var $501=(($500)|0);
 $83=$501;
 var $502=$83;
 var $503=$502;
 $82=$503;
 var $504=$82;
 var $505=(($504)|0);
 var $506=(($505)|0);
 var $507=$506;
 var $508=(($507+8)|0);
 var $509=HEAP32[(($508)>>2)];
 var $523=$509;label=37;break;
 case 36: 
 $89=$484;
 var $511=$89;
 var $512=(($511)|0);
 $88=$512;
 var $513=$88;
 var $514=$513;
 $87=$514;
 var $515=$87;
 var $516=(($515)|0);
 var $517=(($516)|0);
 var $518=$517;
 var $519=(($518+1)|0);
 var $520=(($519)|0);
 $86=$520;
 var $521=$86;
 $85=$521;
 var $522=$85;
 var $523=$522;label=37;break;
 case 37: 
 var $523;
 $81=$523;
 var $524=$81;
 $__lp_i_i_i=$524;
 var $525=$120;
 $77=$525;
 var $526=$77;
 $76=$526;
 var $527=$76;
 $75=$527;
 var $528=$75;
 var $529=(($528)|0);
 $74=$529;
 var $530=$74;
 var $531=$530;
 $73=$531;
 var $532=$73;
 var $533=(($532)|0);
 var $534=(($533)|0);
 var $535=$534;
 var $536=(($535)|0);
 var $537=$536;
 var $538=HEAP8[($537)];
 var $539=($538&255);
 var $540=$539&1;
 var $541=($540|0)!=0;
 if($541){label=38;break;}else{label=39;break;}
 case 38: 
 $67=$527;
 var $543=$67;
 var $544=(($543)|0);
 $66=$544;
 var $545=$66;
 var $546=$545;
 $65=$546;
 var $547=$65;
 var $548=(($547)|0);
 var $549=(($548)|0);
 var $550=$549;
 var $551=(($550+8)|0);
 var $552=HEAP32[(($551)>>2)];
 var $566=$552;label=40;break;
 case 39: 
 $72=$527;
 var $554=$72;
 var $555=(($554)|0);
 $71=$555;
 var $556=$71;
 var $557=$556;
 $70=$557;
 var $558=$70;
 var $559=(($558)|0);
 var $560=(($559)|0);
 var $561=$560;
 var $562=(($561+1)|0);
 var $563=(($562)|0);
 $69=$563;
 var $564=$69;
 $68=$564;
 var $565=$68;
 var $566=$565;label=40;break;
 case 40: 
 var $566;
 $64=$566;
 var $567=$64;
 $__rp_i_i_i=$567;
 var $568=$119;
 $80=$568;
 var $569=$80;
 var $570=(($569)|0);
 $79=$570;
 var $571=$79;
 var $572=$571;
 $78=$572;
 var $573=$78;
 var $574=(($573)|0);
 var $575=(($574)|0);
 var $576=$575;
 var $577=(($576)|0);
 var $578=$577;
 var $579=HEAP8[($578)];
 var $580=($579&255);
 var $581=$580&1;
 var $582=($581|0)!=0;
 if($582){label=41;break;}else{label=43;break;}
 case 41: 
 var $584=$__lp_i_i_i;
 var $585=$__rp_i_i_i;
 var $586=$__lhs_sz_i_i_i;
 $95=$584;
 $96=$585;
 $97=$586;
 var $587=$95;
 var $588=$96;
 var $589=$97;
 var $590=(function() { try { __THREW__ = 0; return _memcmp($587,$588,$589) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=49;break; }
 case 42: 
 var $591=($590|0)==0;
 $118=$591;
 label=50;break;
 case 43: 
 label=44;break;
 case 44: 
 var $594=$__lhs_sz_i_i_i;
 var $595=($594|0)!=0;
 if($595){label=45;break;}else{label=48;break;}
 case 45: 
 var $597=$__lp_i_i_i;
 var $598=HEAP8[($597)];
 var $599=(($598<<24)>>24);
 var $600=$__rp_i_i_i;
 var $601=HEAP8[($600)];
 var $602=(($601<<24)>>24);
 var $603=($599|0)!=($602|0);
 if($603){label=46;break;}else{label=47;break;}
 case 46: 
 $118=0;
 label=50;break;
 case 47: 
 var $606=$__lhs_sz_i_i_i;
 var $607=((($606)-(1))|0);
 $__lhs_sz_i_i_i=$607;
 var $608=$__lp_i_i_i;
 var $609=(($608+1)|0);
 $__lp_i_i_i=$609;
 var $610=$__rp_i_i_i;
 var $611=(($610+1)|0);
 $__rp_i_i_i=$611;
 label=44;break;
 case 48: 
 $118=1;
 label=50;break;
 case 49: 
 var $614$0 = ___cxa_find_matching_catch(-1, -1,0); var $614$1 = tempRet0;
 var $615=$614$0;
 ___clang_call_terminate($615);
 throw "Reached an unreachable!";
 case 50: 
 var $616=$118;
 var $618=$616;label=51;break;
 case 51: 
 var $618;
 if($618){label=52;break;}else{label=54;break;}
 case 52: 
 label=53;break;
 case 53: 
 var $621=$__np;
 var $622=$621;
 var $623=(($622)|0);
 var $624=HEAP32[(($623)>>2)];
 $__np=$624;
 label=25;break;
 case 54: 
 var $626=$__np;
 var $627=$626;
 var $628=(($627)|0);
 var $629=HEAP32[(($628)>>2)];
 var $630=$__pp;
 var $631=$630;
 var $632=(($631)|0);
 HEAP32[(($632)>>2)]=$629;
 var $633=(($140)|0);
 var $634=$__chash;
 $129=$633;
 $130=$634;
 var $635=$129;
 var $636=$130;
 var $637=(($635)|0);
 $128=$637;
 var $638=$128;
 var $639=$638;
 $127=$639;
 var $640=$127;
 var $641=(($640)|0);
 var $642=HEAP32[(($641)>>2)];
 var $643=(($642+($636<<2))|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=$644;
 var $646=(($645)|0);
 var $647=HEAP32[(($646)>>2)];
 var $648=$__np;
 var $649=$648;
 var $650=(($649)|0);
 HEAP32[(($650)>>2)]=$647;
 var $651=$__cp;
 var $652=(($140)|0);
 var $653=$__chash;
 $133=$652;
 $134=$653;
 var $654=$133;
 var $655=$134;
 var $656=(($654)|0);
 $132=$656;
 var $657=$132;
 var $658=$657;
 $131=$658;
 var $659=$131;
 var $660=(($659)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+($655<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=$663;
 var $665=(($664)|0);
 HEAP32[(($665)>>2)]=$651;
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $669=$__pp;
 var $670=$669;
 var $671=(($670)|0);
 var $672=HEAP32[(($671)>>2)];
 $__cp=$672;
 label=16;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__hash;
 var $__bc;
 var $__chash;
 var $__nd;
 $96=$this;
 $97=$__k;
 var $98=$96;
 $95=$98;
 var $99=$95;
 var $100=(($99+12)|0);
 $94=$100;
 var $101=$94;
 var $102=$101;
 $93=$102;
 var $103=$93;
 var $104=$103;
 var $105=$97;
 $19=$104;
 $20=$105;
 var $106=$19;
 var $107=$106;
 var $108=$20;
 var $109=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108);
 $__hash=$109;
 $18=$98;
 var $110=$18;
 var $111=(($110)|0);
 $17=$111;
 var $112=$17;
 var $113=(($112)|0);
 $16=$113;
 var $114=$16;
 var $115=$114;
 $15=$115;
 var $116=$15;
 var $117=(($116+4)|0);
 $14=$117;
 var $118=$14;
 var $119=(($118)|0);
 $13=$119;
 var $120=$13;
 var $121=$120;
 $12=$121;
 var $122=$12;
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 $__bc=$124;
 var $125=$__bc;
 var $126=($125|0)!=0;
 if($126){label=2;break;}else{label=43;break;}
 case 2: 
 var $128=$__hash;
 var $129=$__bc;
 $10=$128;
 $11=$129;
 var $130=$11;
 var $131=$11;
 var $132=((($131)-(1))|0);
 var $133=$130&$132;
 var $134=($133|0)!=0;
 if($134){label=4;break;}else{label=3;break;}
 case 3: 
 var $136=$10;
 var $137=$11;
 var $138=((($137)-(1))|0);
 var $139=$136&$138;
 var $144=$139;label=5;break;
 case 4: 
 var $141=$10;
 var $142=$11;
 var $143=(((($141>>>0))%(($142>>>0)))&-1);
 var $144=$143;label=5;break;
 case 5: 
 var $144;
 $__chash=$144;
 var $145=(($98)|0);
 var $146=$__chash;
 $3=$145;
 $4=$146;
 var $147=$3;
 var $148=$4;
 var $149=(($147)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+($148<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 $__nd=$156;
 var $157=$__nd;
 var $158=($157|0)!=0;
 if($158){label=6;break;}else{label=42;break;}
 case 6: 
 var $160=$__nd;
 var $161=$160;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 $__nd=$163;
 label=7;break;
 case 7: 
 var $165=$__nd;
 var $166=($165|0)!=0;
 if($166){label=8;break;}else{var $190=0;label=12;break;}
 case 8: 
 var $168=$__nd;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$__bc;
 $5=$170;
 $6=$171;
 var $172=$6;
 var $173=$6;
 var $174=((($173)-(1))|0);
 var $175=$172&$174;
 var $176=($175|0)!=0;
 if($176){label=10;break;}else{label=9;break;}
 case 9: 
 var $178=$5;
 var $179=$6;
 var $180=((($179)-(1))|0);
 var $181=$178&$180;
 var $186=$181;label=11;break;
 case 10: 
 var $183=$5;
 var $184=$6;
 var $185=(((($183>>>0))%(($184>>>0)))&-1);
 var $186=$185;label=11;break;
 case 11: 
 var $186;
 var $187=$__chash;
 var $188=($186|0)==($187|0);
 var $190=$188;label=12;break;
 case 12: 
 var $190;
 if($190){label=13;break;}else{label=41;break;}
 case 13: 
 $9=$98;
 var $192=$9;
 var $193=(($192+16)|0);
 $8=$193;
 var $194=$8;
 var $195=$194;
 $7=$195;
 var $196=$7;
 var $197=$196;
 var $198=$__nd;
 var $199=(($198+8)|0);
 var $200=$97;
 $81=$197;
 $82=$199;
 $83=$200;
 var $201=$81;
 var $202=$201;
 var $203=$82;
 var $204=$203;
 var $205=(($204)|0);
 var $206=$83;
 $78=$202;
 $79=$205;
 $80=$206;
 var $207=$78;
 var $208=$79;
 var $209=$80;
 $76=$208;
 $77=$209;
 var $210=$76;
 $74=$210;
 var $211=$74;
 $73=$211;
 var $212=$73;
 var $213=(($212)|0);
 $72=$213;
 var $214=$72;
 var $215=$214;
 $71=$215;
 var $216=$71;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219)|0);
 var $221=$220;
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&1;
 var $225=($224|0)!=0;
 if($225){label=14;break;}else{label=15;break;}
 case 14: 
 $67=$211;
 var $227=$67;
 var $228=(($227)|0);
 $66=$228;
 var $229=$66;
 var $230=$229;
 $65=$230;
 var $231=$65;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $251=$236;label=16;break;
 case 15: 
 $70=$211;
 var $238=$70;
 var $239=(($238)|0);
 $69=$239;
 var $240=$69;
 var $241=$240;
 $68=$241;
 var $242=$68;
 var $243=(($242)|0);
 var $244=(($243)|0);
 var $245=$244;
 var $246=(($245)|0);
 var $247=$246;
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249>>1;
 var $251=$250;label=16;break;
 case 16: 
 var $251;
 $__lhs_sz_i_i_i=$251;
 var $252=$__lhs_sz_i_i_i;
 var $253=$77;
 $64=$253;
 var $254=$64;
 $63=$254;
 var $255=$63;
 var $256=(($255)|0);
 $62=$256;
 var $257=$62;
 var $258=$257;
 $61=$258;
 var $259=$61;
 var $260=(($259)|0);
 var $261=(($260)|0);
 var $262=$261;
 var $263=(($262)|0);
 var $264=$263;
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$266&1;
 var $268=($267|0)!=0;
 if($268){label=17;break;}else{label=18;break;}
 case 17: 
 $57=$254;
 var $270=$57;
 var $271=(($270)|0);
 $56=$271;
 var $272=$56;
 var $273=$272;
 $55=$273;
 var $274=$55;
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=$276;
 var $278=(($277+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $294=$279;label=19;break;
 case 18: 
 $60=$254;
 var $281=$60;
 var $282=(($281)|0);
 $59=$282;
 var $283=$59;
 var $284=$283;
 $58=$284;
 var $285=$58;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292>>1;
 var $294=$293;label=19;break;
 case 19: 
 var $294;
 var $295=($252|0)!=($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 $75=0;
 label=37;break;
 case 21: 
 var $298=$76;
 $51=$298;
 var $299=$51;
 $50=$299;
 var $300=$50;
 $49=$300;
 var $301=$49;
 var $302=(($301)|0);
 $48=$302;
 var $303=$48;
 var $304=$303;
 $47=$304;
 var $305=$47;
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$307;
 var $309=(($308)|0);
 var $310=$309;
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312&1;
 var $314=($313|0)!=0;
 if($314){label=22;break;}else{label=23;break;}
 case 22: 
 $41=$300;
 var $316=$41;
 var $317=(($316)|0);
 $40=$317;
 var $318=$40;
 var $319=$318;
 $39=$319;
 var $320=$39;
 var $321=(($320)|0);
 var $322=(($321)|0);
 var $323=$322;
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 var $339=$325;label=24;break;
 case 23: 
 $46=$300;
 var $327=$46;
 var $328=(($327)|0);
 $45=$328;
 var $329=$45;
 var $330=$329;
 $44=$330;
 var $331=$44;
 var $332=(($331)|0);
 var $333=(($332)|0);
 var $334=$333;
 var $335=(($334+1)|0);
 var $336=(($335)|0);
 $43=$336;
 var $337=$43;
 $42=$337;
 var $338=$42;
 var $339=$338;label=24;break;
 case 24: 
 var $339;
 $38=$339;
 var $340=$38;
 $__lp_i_i_i=$340;
 var $341=$77;
 $34=$341;
 var $342=$34;
 $33=$342;
 var $343=$33;
 $32=$343;
 var $344=$32;
 var $345=(($344)|0);
 $31=$345;
 var $346=$31;
 var $347=$346;
 $30=$347;
 var $348=$30;
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=$350;
 var $352=(($351)|0);
 var $353=$352;
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355&1;
 var $357=($356|0)!=0;
 if($357){label=25;break;}else{label=26;break;}
 case 25: 
 $24=$343;
 var $359=$24;
 var $360=(($359)|0);
 $23=$360;
 var $361=$23;
 var $362=$361;
 $22=$362;
 var $363=$22;
 var $364=(($363)|0);
 var $365=(($364)|0);
 var $366=$365;
 var $367=(($366+8)|0);
 var $368=HEAP32[(($367)>>2)];
 var $382=$368;label=27;break;
 case 26: 
 $29=$343;
 var $370=$29;
 var $371=(($370)|0);
 $28=$371;
 var $372=$28;
 var $373=$372;
 $27=$373;
 var $374=$27;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377+1)|0);
 var $379=(($378)|0);
 $26=$379;
 var $380=$26;
 $25=$380;
 var $381=$25;
 var $382=$381;label=27;break;
 case 27: 
 var $382;
 $21=$382;
 var $383=$21;
 $__rp_i_i_i=$383;
 var $384=$76;
 $37=$384;
 var $385=$37;
 var $386=(($385)|0);
 $36=$386;
 var $387=$36;
 var $388=$387;
 $35=$388;
 var $389=$35;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392)|0);
 var $394=$393;
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$396&1;
 var $398=($397|0)!=0;
 if($398){label=28;break;}else{label=30;break;}
 case 28: 
 var $400=$__lp_i_i_i;
 var $401=$__rp_i_i_i;
 var $402=$__lhs_sz_i_i_i;
 $52=$400;
 $53=$401;
 $54=$402;
 var $403=$52;
 var $404=$53;
 var $405=$54;
 var $406=(function() { try { __THREW__ = 0; return _memcmp($403,$404,$405) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $407=($406|0)==0;
 $75=$407;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $410=$__lhs_sz_i_i_i;
 var $411=($410|0)!=0;
 if($411){label=32;break;}else{label=35;break;}
 case 32: 
 var $413=$__lp_i_i_i;
 var $414=HEAP8[($413)];
 var $415=(($414<<24)>>24);
 var $416=$__rp_i_i_i;
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24);
 var $419=($415|0)!=($418|0);
 if($419){label=33;break;}else{label=34;break;}
 case 33: 
 $75=0;
 label=37;break;
 case 34: 
 var $422=$__lhs_sz_i_i_i;
 var $423=((($422)-(1))|0);
 $__lhs_sz_i_i_i=$423;
 var $424=$__lp_i_i_i;
 var $425=(($424+1)|0);
 $__lp_i_i_i=$425;
 var $426=$__rp_i_i_i;
 var $427=(($426+1)|0);
 $__rp_i_i_i=$427;
 label=31;break;
 case 35: 
 $75=1;
 label=37;break;
 case 36: 
 var $430$0 = ___cxa_find_matching_catch(-1, -1,0); var $430$1 = tempRet0;
 var $431=$430$0;
 ___clang_call_terminate($431);
 throw "Reached an unreachable!";
 case 37: 
 var $432=$75;
 if($432){label=38;break;}else{label=39;break;}
 case 38: 
 var $434=$__nd;
 $86=$agg_result;
 $87=$434;
 var $435=$86;
 var $436=$87;
 $84=$435;
 $85=$436;
 var $437=$84;
 var $438=(($437)|0);
 var $439=$85;
 HEAP32[(($438)>>2)]=$439;
 label=44;break;
 case 39: 
 label=40;break;
 case 40: 
 var $442=$__nd;
 var $443=$442;
 var $444=(($443)|0);
 var $445=HEAP32[(($444)>>2)];
 $__nd=$445;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $92=$98;
 var $449=$92;
 $90=$agg_result;
 $91=0;
 var $450=$90;
 var $451=$91;
 $88=$450;
 $89=$451;
 var $452=$88;
 var $453=(($452)|0);
 var $454=$89;
 HEAP32[(($453)>>2)]=$454;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__hash;
 var $__bc;
 var $__chash;
 var $__nd;
 $96=$this;
 $97=$__k;
 var $98=$96;
 $95=$98;
 var $99=$95;
 var $100=(($99+12)|0);
 $94=$100;
 var $101=$94;
 var $102=$101;
 $93=$102;
 var $103=$93;
 var $104=$103;
 var $105=$97;
 $19=$104;
 $20=$105;
 var $106=$19;
 var $107=$106;
 var $108=$20;
 var $109=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108);
 $__hash=$109;
 $18=$98;
 var $110=$18;
 var $111=(($110)|0);
 $17=$111;
 var $112=$17;
 var $113=(($112)|0);
 $16=$113;
 var $114=$16;
 var $115=$114;
 $15=$115;
 var $116=$15;
 var $117=(($116+4)|0);
 $14=$117;
 var $118=$14;
 var $119=(($118)|0);
 $13=$119;
 var $120=$13;
 var $121=$120;
 $12=$121;
 var $122=$12;
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 $__bc=$124;
 var $125=$__bc;
 var $126=($125|0)!=0;
 if($126){label=2;break;}else{label=43;break;}
 case 2: 
 var $128=$__hash;
 var $129=$__bc;
 $10=$128;
 $11=$129;
 var $130=$11;
 var $131=$11;
 var $132=((($131)-(1))|0);
 var $133=$130&$132;
 var $134=($133|0)!=0;
 if($134){label=4;break;}else{label=3;break;}
 case 3: 
 var $136=$10;
 var $137=$11;
 var $138=((($137)-(1))|0);
 var $139=$136&$138;
 var $144=$139;label=5;break;
 case 4: 
 var $141=$10;
 var $142=$11;
 var $143=(((($141>>>0))%(($142>>>0)))&-1);
 var $144=$143;label=5;break;
 case 5: 
 var $144;
 $__chash=$144;
 var $145=(($98)|0);
 var $146=$__chash;
 $3=$145;
 $4=$146;
 var $147=$3;
 var $148=$4;
 var $149=(($147)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+($148<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 $__nd=$156;
 var $157=$__nd;
 var $158=($157|0)!=0;
 if($158){label=6;break;}else{label=42;break;}
 case 6: 
 var $160=$__nd;
 var $161=$160;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 $__nd=$163;
 label=7;break;
 case 7: 
 var $165=$__nd;
 var $166=($165|0)!=0;
 if($166){label=8;break;}else{var $190=0;label=12;break;}
 case 8: 
 var $168=$__nd;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$__bc;
 $5=$170;
 $6=$171;
 var $172=$6;
 var $173=$6;
 var $174=((($173)-(1))|0);
 var $175=$172&$174;
 var $176=($175|0)!=0;
 if($176){label=10;break;}else{label=9;break;}
 case 9: 
 var $178=$5;
 var $179=$6;
 var $180=((($179)-(1))|0);
 var $181=$178&$180;
 var $186=$181;label=11;break;
 case 10: 
 var $183=$5;
 var $184=$6;
 var $185=(((($183>>>0))%(($184>>>0)))&-1);
 var $186=$185;label=11;break;
 case 11: 
 var $186;
 var $187=$__chash;
 var $188=($186|0)==($187|0);
 var $190=$188;label=12;break;
 case 12: 
 var $190;
 if($190){label=13;break;}else{label=41;break;}
 case 13: 
 $9=$98;
 var $192=$9;
 var $193=(($192+16)|0);
 $8=$193;
 var $194=$8;
 var $195=$194;
 $7=$195;
 var $196=$7;
 var $197=$196;
 var $198=$__nd;
 var $199=(($198+8)|0);
 var $200=$97;
 $81=$197;
 $82=$199;
 $83=$200;
 var $201=$81;
 var $202=$201;
 var $203=$82;
 var $204=$203;
 var $205=(($204)|0);
 var $206=$83;
 $78=$202;
 $79=$205;
 $80=$206;
 var $207=$78;
 var $208=$79;
 var $209=$80;
 $76=$208;
 $77=$209;
 var $210=$76;
 $74=$210;
 var $211=$74;
 $73=$211;
 var $212=$73;
 var $213=(($212)|0);
 $72=$213;
 var $214=$72;
 var $215=$214;
 $71=$215;
 var $216=$71;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219)|0);
 var $221=$220;
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&1;
 var $225=($224|0)!=0;
 if($225){label=14;break;}else{label=15;break;}
 case 14: 
 $67=$211;
 var $227=$67;
 var $228=(($227)|0);
 $66=$228;
 var $229=$66;
 var $230=$229;
 $65=$230;
 var $231=$65;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $251=$236;label=16;break;
 case 15: 
 $70=$211;
 var $238=$70;
 var $239=(($238)|0);
 $69=$239;
 var $240=$69;
 var $241=$240;
 $68=$241;
 var $242=$68;
 var $243=(($242)|0);
 var $244=(($243)|0);
 var $245=$244;
 var $246=(($245)|0);
 var $247=$246;
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249>>1;
 var $251=$250;label=16;break;
 case 16: 
 var $251;
 $__lhs_sz_i_i_i=$251;
 var $252=$__lhs_sz_i_i_i;
 var $253=$77;
 $64=$253;
 var $254=$64;
 $63=$254;
 var $255=$63;
 var $256=(($255)|0);
 $62=$256;
 var $257=$62;
 var $258=$257;
 $61=$258;
 var $259=$61;
 var $260=(($259)|0);
 var $261=(($260)|0);
 var $262=$261;
 var $263=(($262)|0);
 var $264=$263;
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$266&1;
 var $268=($267|0)!=0;
 if($268){label=17;break;}else{label=18;break;}
 case 17: 
 $57=$254;
 var $270=$57;
 var $271=(($270)|0);
 $56=$271;
 var $272=$56;
 var $273=$272;
 $55=$273;
 var $274=$55;
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=$276;
 var $278=(($277+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $294=$279;label=19;break;
 case 18: 
 $60=$254;
 var $281=$60;
 var $282=(($281)|0);
 $59=$282;
 var $283=$59;
 var $284=$283;
 $58=$284;
 var $285=$58;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292>>1;
 var $294=$293;label=19;break;
 case 19: 
 var $294;
 var $295=($252|0)!=($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 $75=0;
 label=37;break;
 case 21: 
 var $298=$76;
 $51=$298;
 var $299=$51;
 $50=$299;
 var $300=$50;
 $49=$300;
 var $301=$49;
 var $302=(($301)|0);
 $48=$302;
 var $303=$48;
 var $304=$303;
 $47=$304;
 var $305=$47;
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$307;
 var $309=(($308)|0);
 var $310=$309;
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312&1;
 var $314=($313|0)!=0;
 if($314){label=22;break;}else{label=23;break;}
 case 22: 
 $41=$300;
 var $316=$41;
 var $317=(($316)|0);
 $40=$317;
 var $318=$40;
 var $319=$318;
 $39=$319;
 var $320=$39;
 var $321=(($320)|0);
 var $322=(($321)|0);
 var $323=$322;
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 var $339=$325;label=24;break;
 case 23: 
 $46=$300;
 var $327=$46;
 var $328=(($327)|0);
 $45=$328;
 var $329=$45;
 var $330=$329;
 $44=$330;
 var $331=$44;
 var $332=(($331)|0);
 var $333=(($332)|0);
 var $334=$333;
 var $335=(($334+1)|0);
 var $336=(($335)|0);
 $43=$336;
 var $337=$43;
 $42=$337;
 var $338=$42;
 var $339=$338;label=24;break;
 case 24: 
 var $339;
 $38=$339;
 var $340=$38;
 $__lp_i_i_i=$340;
 var $341=$77;
 $34=$341;
 var $342=$34;
 $33=$342;
 var $343=$33;
 $32=$343;
 var $344=$32;
 var $345=(($344)|0);
 $31=$345;
 var $346=$31;
 var $347=$346;
 $30=$347;
 var $348=$30;
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=$350;
 var $352=(($351)|0);
 var $353=$352;
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355&1;
 var $357=($356|0)!=0;
 if($357){label=25;break;}else{label=26;break;}
 case 25: 
 $24=$343;
 var $359=$24;
 var $360=(($359)|0);
 $23=$360;
 var $361=$23;
 var $362=$361;
 $22=$362;
 var $363=$22;
 var $364=(($363)|0);
 var $365=(($364)|0);
 var $366=$365;
 var $367=(($366+8)|0);
 var $368=HEAP32[(($367)>>2)];
 var $382=$368;label=27;break;
 case 26: 
 $29=$343;
 var $370=$29;
 var $371=(($370)|0);
 $28=$371;
 var $372=$28;
 var $373=$372;
 $27=$373;
 var $374=$27;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377+1)|0);
 var $379=(($378)|0);
 $26=$379;
 var $380=$26;
 $25=$380;
 var $381=$25;
 var $382=$381;label=27;break;
 case 27: 
 var $382;
 $21=$382;
 var $383=$21;
 $__rp_i_i_i=$383;
 var $384=$76;
 $37=$384;
 var $385=$37;
 var $386=(($385)|0);
 $36=$386;
 var $387=$36;
 var $388=$387;
 $35=$388;
 var $389=$35;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392)|0);
 var $394=$393;
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$396&1;
 var $398=($397|0)!=0;
 if($398){label=28;break;}else{label=30;break;}
 case 28: 
 var $400=$__lp_i_i_i;
 var $401=$__rp_i_i_i;
 var $402=$__lhs_sz_i_i_i;
 $52=$400;
 $53=$401;
 $54=$402;
 var $403=$52;
 var $404=$53;
 var $405=$54;
 var $406=(function() { try { __THREW__ = 0; return _memcmp($403,$404,$405) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $407=($406|0)==0;
 $75=$407;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $410=$__lhs_sz_i_i_i;
 var $411=($410|0)!=0;
 if($411){label=32;break;}else{label=35;break;}
 case 32: 
 var $413=$__lp_i_i_i;
 var $414=HEAP8[($413)];
 var $415=(($414<<24)>>24);
 var $416=$__rp_i_i_i;
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24);
 var $419=($415|0)!=($418|0);
 if($419){label=33;break;}else{label=34;break;}
 case 33: 
 $75=0;
 label=37;break;
 case 34: 
 var $422=$__lhs_sz_i_i_i;
 var $423=((($422)-(1))|0);
 $__lhs_sz_i_i_i=$423;
 var $424=$__lp_i_i_i;
 var $425=(($424+1)|0);
 $__lp_i_i_i=$425;
 var $426=$__rp_i_i_i;
 var $427=(($426+1)|0);
 $__rp_i_i_i=$427;
 label=31;break;
 case 35: 
 $75=1;
 label=37;break;
 case 36: 
 var $430$0 = ___cxa_find_matching_catch(-1, -1,0); var $430$1 = tempRet0;
 var $431=$430$0;
 ___clang_call_terminate($431);
 throw "Reached an unreachable!";
 case 37: 
 var $432=$75;
 if($432){label=38;break;}else{label=39;break;}
 case 38: 
 var $434=$__nd;
 $86=$agg_result;
 $87=$434;
 var $435=$86;
 var $436=$87;
 $84=$435;
 $85=$436;
 var $437=$84;
 var $438=(($437)|0);
 var $439=$85;
 HEAP32[(($438)>>2)]=$439;
 label=44;break;
 case 39: 
 label=40;break;
 case 40: 
 var $442=$__nd;
 var $443=$442;
 var $444=(($443)|0);
 var $445=HEAP32[(($444)>>2)];
 $__nd=$445;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $92=$98;
 var $449=$92;
 $90=$agg_result;
 $91=0;
 var $450=$90;
 var $451=$91;
 $88=$450;
 $89=$451;
 var $452=$88;
 var $453=(($452)|0);
 var $454=$89;
 HEAP32[(($453)>>2)]=$454;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__hash;
 var $__bc;
 var $__chash;
 var $__nd;
 $96=$this;
 $97=$__k;
 var $98=$96;
 $95=$98;
 var $99=$95;
 var $100=(($99+12)|0);
 $94=$100;
 var $101=$94;
 var $102=$101;
 $93=$102;
 var $103=$93;
 var $104=$103;
 var $105=$97;
 $19=$104;
 $20=$105;
 var $106=$19;
 var $107=$106;
 var $108=$20;
 var $109=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108);
 $__hash=$109;
 $18=$98;
 var $110=$18;
 var $111=(($110)|0);
 $17=$111;
 var $112=$17;
 var $113=(($112)|0);
 $16=$113;
 var $114=$16;
 var $115=$114;
 $15=$115;
 var $116=$15;
 var $117=(($116+4)|0);
 $14=$117;
 var $118=$14;
 var $119=(($118)|0);
 $13=$119;
 var $120=$13;
 var $121=$120;
 $12=$121;
 var $122=$12;
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 $__bc=$124;
 var $125=$__bc;
 var $126=($125|0)!=0;
 if($126){label=2;break;}else{label=43;break;}
 case 2: 
 var $128=$__hash;
 var $129=$__bc;
 $10=$128;
 $11=$129;
 var $130=$11;
 var $131=$11;
 var $132=((($131)-(1))|0);
 var $133=$130&$132;
 var $134=($133|0)!=0;
 if($134){label=4;break;}else{label=3;break;}
 case 3: 
 var $136=$10;
 var $137=$11;
 var $138=((($137)-(1))|0);
 var $139=$136&$138;
 var $144=$139;label=5;break;
 case 4: 
 var $141=$10;
 var $142=$11;
 var $143=(((($141>>>0))%(($142>>>0)))&-1);
 var $144=$143;label=5;break;
 case 5: 
 var $144;
 $__chash=$144;
 var $145=(($98)|0);
 var $146=$__chash;
 $3=$145;
 $4=$146;
 var $147=$3;
 var $148=$4;
 var $149=(($147)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+($148<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 $__nd=$156;
 var $157=$__nd;
 var $158=($157|0)!=0;
 if($158){label=6;break;}else{label=42;break;}
 case 6: 
 var $160=$__nd;
 var $161=$160;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 $__nd=$163;
 label=7;break;
 case 7: 
 var $165=$__nd;
 var $166=($165|0)!=0;
 if($166){label=8;break;}else{var $190=0;label=12;break;}
 case 8: 
 var $168=$__nd;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$__bc;
 $5=$170;
 $6=$171;
 var $172=$6;
 var $173=$6;
 var $174=((($173)-(1))|0);
 var $175=$172&$174;
 var $176=($175|0)!=0;
 if($176){label=10;break;}else{label=9;break;}
 case 9: 
 var $178=$5;
 var $179=$6;
 var $180=((($179)-(1))|0);
 var $181=$178&$180;
 var $186=$181;label=11;break;
 case 10: 
 var $183=$5;
 var $184=$6;
 var $185=(((($183>>>0))%(($184>>>0)))&-1);
 var $186=$185;label=11;break;
 case 11: 
 var $186;
 var $187=$__chash;
 var $188=($186|0)==($187|0);
 var $190=$188;label=12;break;
 case 12: 
 var $190;
 if($190){label=13;break;}else{label=41;break;}
 case 13: 
 $9=$98;
 var $192=$9;
 var $193=(($192+16)|0);
 $8=$193;
 var $194=$8;
 var $195=$194;
 $7=$195;
 var $196=$7;
 var $197=$196;
 var $198=$__nd;
 var $199=(($198+8)|0);
 var $200=$97;
 $81=$197;
 $82=$199;
 $83=$200;
 var $201=$81;
 var $202=$201;
 var $203=$82;
 var $204=$203;
 var $205=(($204)|0);
 var $206=$83;
 $78=$202;
 $79=$205;
 $80=$206;
 var $207=$78;
 var $208=$79;
 var $209=$80;
 $76=$208;
 $77=$209;
 var $210=$76;
 $74=$210;
 var $211=$74;
 $73=$211;
 var $212=$73;
 var $213=(($212)|0);
 $72=$213;
 var $214=$72;
 var $215=$214;
 $71=$215;
 var $216=$71;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219)|0);
 var $221=$220;
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&1;
 var $225=($224|0)!=0;
 if($225){label=14;break;}else{label=15;break;}
 case 14: 
 $67=$211;
 var $227=$67;
 var $228=(($227)|0);
 $66=$228;
 var $229=$66;
 var $230=$229;
 $65=$230;
 var $231=$65;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $251=$236;label=16;break;
 case 15: 
 $70=$211;
 var $238=$70;
 var $239=(($238)|0);
 $69=$239;
 var $240=$69;
 var $241=$240;
 $68=$241;
 var $242=$68;
 var $243=(($242)|0);
 var $244=(($243)|0);
 var $245=$244;
 var $246=(($245)|0);
 var $247=$246;
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249>>1;
 var $251=$250;label=16;break;
 case 16: 
 var $251;
 $__lhs_sz_i_i_i=$251;
 var $252=$__lhs_sz_i_i_i;
 var $253=$77;
 $64=$253;
 var $254=$64;
 $63=$254;
 var $255=$63;
 var $256=(($255)|0);
 $62=$256;
 var $257=$62;
 var $258=$257;
 $61=$258;
 var $259=$61;
 var $260=(($259)|0);
 var $261=(($260)|0);
 var $262=$261;
 var $263=(($262)|0);
 var $264=$263;
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$266&1;
 var $268=($267|0)!=0;
 if($268){label=17;break;}else{label=18;break;}
 case 17: 
 $57=$254;
 var $270=$57;
 var $271=(($270)|0);
 $56=$271;
 var $272=$56;
 var $273=$272;
 $55=$273;
 var $274=$55;
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=$276;
 var $278=(($277+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $294=$279;label=19;break;
 case 18: 
 $60=$254;
 var $281=$60;
 var $282=(($281)|0);
 $59=$282;
 var $283=$59;
 var $284=$283;
 $58=$284;
 var $285=$58;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292>>1;
 var $294=$293;label=19;break;
 case 19: 
 var $294;
 var $295=($252|0)!=($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 $75=0;
 label=37;break;
 case 21: 
 var $298=$76;
 $51=$298;
 var $299=$51;
 $50=$299;
 var $300=$50;
 $49=$300;
 var $301=$49;
 var $302=(($301)|0);
 $48=$302;
 var $303=$48;
 var $304=$303;
 $47=$304;
 var $305=$47;
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$307;
 var $309=(($308)|0);
 var $310=$309;
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312&1;
 var $314=($313|0)!=0;
 if($314){label=22;break;}else{label=23;break;}
 case 22: 
 $41=$300;
 var $316=$41;
 var $317=(($316)|0);
 $40=$317;
 var $318=$40;
 var $319=$318;
 $39=$319;
 var $320=$39;
 var $321=(($320)|0);
 var $322=(($321)|0);
 var $323=$322;
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 var $339=$325;label=24;break;
 case 23: 
 $46=$300;
 var $327=$46;
 var $328=(($327)|0);
 $45=$328;
 var $329=$45;
 var $330=$329;
 $44=$330;
 var $331=$44;
 var $332=(($331)|0);
 var $333=(($332)|0);
 var $334=$333;
 var $335=(($334+1)|0);
 var $336=(($335)|0);
 $43=$336;
 var $337=$43;
 $42=$337;
 var $338=$42;
 var $339=$338;label=24;break;
 case 24: 
 var $339;
 $38=$339;
 var $340=$38;
 $__lp_i_i_i=$340;
 var $341=$77;
 $34=$341;
 var $342=$34;
 $33=$342;
 var $343=$33;
 $32=$343;
 var $344=$32;
 var $345=(($344)|0);
 $31=$345;
 var $346=$31;
 var $347=$346;
 $30=$347;
 var $348=$30;
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=$350;
 var $352=(($351)|0);
 var $353=$352;
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355&1;
 var $357=($356|0)!=0;
 if($357){label=25;break;}else{label=26;break;}
 case 25: 
 $24=$343;
 var $359=$24;
 var $360=(($359)|0);
 $23=$360;
 var $361=$23;
 var $362=$361;
 $22=$362;
 var $363=$22;
 var $364=(($363)|0);
 var $365=(($364)|0);
 var $366=$365;
 var $367=(($366+8)|0);
 var $368=HEAP32[(($367)>>2)];
 var $382=$368;label=27;break;
 case 26: 
 $29=$343;
 var $370=$29;
 var $371=(($370)|0);
 $28=$371;
 var $372=$28;
 var $373=$372;
 $27=$373;
 var $374=$27;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377+1)|0);
 var $379=(($378)|0);
 $26=$379;
 var $380=$26;
 $25=$380;
 var $381=$25;
 var $382=$381;label=27;break;
 case 27: 
 var $382;
 $21=$382;
 var $383=$21;
 $__rp_i_i_i=$383;
 var $384=$76;
 $37=$384;
 var $385=$37;
 var $386=(($385)|0);
 $36=$386;
 var $387=$36;
 var $388=$387;
 $35=$388;
 var $389=$35;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392)|0);
 var $394=$393;
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$396&1;
 var $398=($397|0)!=0;
 if($398){label=28;break;}else{label=30;break;}
 case 28: 
 var $400=$__lp_i_i_i;
 var $401=$__rp_i_i_i;
 var $402=$__lhs_sz_i_i_i;
 $52=$400;
 $53=$401;
 $54=$402;
 var $403=$52;
 var $404=$53;
 var $405=$54;
 var $406=(function() { try { __THREW__ = 0; return _memcmp($403,$404,$405) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $407=($406|0)==0;
 $75=$407;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $410=$__lhs_sz_i_i_i;
 var $411=($410|0)!=0;
 if($411){label=32;break;}else{label=35;break;}
 case 32: 
 var $413=$__lp_i_i_i;
 var $414=HEAP8[($413)];
 var $415=(($414<<24)>>24);
 var $416=$__rp_i_i_i;
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24);
 var $419=($415|0)!=($418|0);
 if($419){label=33;break;}else{label=34;break;}
 case 33: 
 $75=0;
 label=37;break;
 case 34: 
 var $422=$__lhs_sz_i_i_i;
 var $423=((($422)-(1))|0);
 $__lhs_sz_i_i_i=$423;
 var $424=$__lp_i_i_i;
 var $425=(($424+1)|0);
 $__lp_i_i_i=$425;
 var $426=$__rp_i_i_i;
 var $427=(($426+1)|0);
 $__rp_i_i_i=$427;
 label=31;break;
 case 35: 
 $75=1;
 label=37;break;
 case 36: 
 var $430$0 = ___cxa_find_matching_catch(-1, -1,0); var $430$1 = tempRet0;
 var $431=$430$0;
 ___clang_call_terminate($431);
 throw "Reached an unreachable!";
 case 37: 
 var $432=$75;
 if($432){label=38;break;}else{label=39;break;}
 case 38: 
 var $434=$__nd;
 $86=$agg_result;
 $87=$434;
 var $435=$86;
 var $436=$87;
 $84=$435;
 $85=$436;
 var $437=$84;
 var $438=(($437)|0);
 var $439=$85;
 HEAP32[(($438)>>2)]=$439;
 label=44;break;
 case 39: 
 label=40;break;
 case 40: 
 var $442=$__nd;
 var $443=$442;
 var $444=(($443)|0);
 var $445=HEAP32[(($444)>>2)];
 $__nd=$445;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $92=$98;
 var $449=$92;
 $90=$agg_result;
 $91=0;
 var $450=$90;
 var $451=$91;
 $88=$450;
 $89=$451;
 var $452=$88;
 var $453=(($452)|0);
 var $454=$89;
 HEAP32[(($453)>>2)]=$454;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN4Demo3getEv(){
 var label=0;


 var $1=HEAP32[((17984)>>2)];
 return $1;
}


function __ZN4Demo6createENS_4TypeE($type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$type;
 var $4=$1;
 if(($4|0)==0){ label=2;break;}else{label=5;break;}
 case 2: 
 var $6=__Znwj(60);
 var $7=$6;
 (function() { try { __THREW__ = 0; return __ZN19LorenzAttractorDemoC2Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 var $9=$7;
 HEAP32[((17984)>>2)]=$9;
 label=6;break;
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $12=$11$0;
 $2=$12;
 var $13=$11$1;
 $3=$13;
 __ZdlPv($6);
 label=9;break;
 case 5: 
 label=6;break;
 case 6: 
 var $16=HEAP32[((17984)>>2)];
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=8;break;}
 case 7: 
 __ZN5error8throw_exEPKcS1_i(2496,3400,45);
 label=8;break;
 case 8: 
 var $20=HEAP32[((17984)>>2)];
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+16)|0);
 var $24=HEAP32[(($23)>>2)];
 FUNCTION_TABLE[$24]($20);
 STACKTOP=sp;return;
 case 9: 
 var $26=$2;
 var $27=$3;
 var $28$0=$26;
 var $28$1=0;
 var $29$0=$28$0;
 var $29$1=$27;
 ___resumeException($29$0)
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 2549

function __ZN5error8throw_exEPKcS1_i($msg,$file,$line){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $__a_i_i_i1_i_i_i;
 var $__i_i_i_i2_i_i_i;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $__a_i_i_i_i_i_i;
 var $__i_i_i_i_i_i_i;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24=sp;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $ss=(sp)+(16);
 var $50;
 var $51;
 var $52=(sp)+(160);
 var $53;
 $47=$msg;
 $48=$file;
 $49=$line;
 $43=$ss;
 $44=24;
 var $54=$43;
 var $55=$54;
 var $56=(($55+64)|0);
 var $57=$56;
 $42=$57;
 var $58=$42;
 var $59=$58;
 $41=$59;
 var $60=$41;
 var $61=$60;
 HEAP32[(($61)>>2)]=5320;
 var $62=$58;
 HEAP32[(($62)>>2)]=4864;
 var $63=$54;
 HEAP32[(($63)>>2)]=6260;
 var $64=$54;
 var $65=(($64+64)|0);
 var $66=$65;
 HEAP32[(($66)>>2)]=6300;
 var $67=$54;
 var $68=(($67+8)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=6280;
 var $70=$54;
 var $71=(($54+12)|0);
 var $72=$71;
 $36=$70;
 $37=7804;
 $38=$72;
 var $73=$36;
 var $74=$37;
 var $75=$73;
 var $76=(($74+4)|0);
 var $77=$38;
 $33=$75;
 $34=$76;
 $35=$77;
 var $78=$33;
 var $79=$34;
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 HEAP32[(($81)>>2)]=$80;
 var $82=(($79+4)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=((($85)-(12))|0);
 var $87=$86;
 var $88=HEAP32[(($87)>>2)];
 var $89=$78;
 var $90=(($89+$88)|0);
 var $91=$90;
 HEAP32[(($91)>>2)]=$83;
 var $92=(($78+4)|0);
 HEAP32[(($92)>>2)]=0;
 var $93=$78;
 var $94=HEAP32[(($93)>>2)];
 var $95=((($94)-(12))|0);
 var $96=$95;
 var $97=HEAP32[(($96)>>2)];
 var $98=$78;
 var $99=(($98+$97)|0);
 var $100=$99;
 var $101=$35;
 $31=$100;
 $32=$101;
 var $102=$31;
 var $103=$102;
 var $104=$32;
 var $105=$104;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($103,$105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=10;break; }
 case 2: 
 var $106=(($102+72)|0);
 HEAP32[(($106)>>2)]=0;
 var $107=(($102+76)|0);
 HEAP32[(($107)>>2)]=-1;
 var $108=$73;
 var $109=(($108+8)|0);
 var $110=$109;
 var $111=(($74+12)|0);
 $29=$110;
 $30=$111;
 var $112=$29;
 var $113=$30;
 var $114=HEAP32[(($113)>>2)];
 var $115=$112;
 HEAP32[(($115)>>2)]=$114;
 var $116=(($113+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$112;
 var $119=HEAP32[(($118)>>2)];
 var $120=((($119)-(12))|0);
 var $121=$120;
 var $122=HEAP32[(($121)>>2)];
 var $123=$112;
 var $124=(($123+$122)|0);
 var $125=$124;
 HEAP32[(($125)>>2)]=$117;
 var $126=HEAP32[(($74)>>2)];
 var $127=$73;
 HEAP32[(($127)>>2)]=$126;
 var $128=(($74+20)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$73;
 var $131=HEAP32[(($130)>>2)];
 var $132=((($131)-(12))|0);
 var $133=$132;
 var $134=HEAP32[(($133)>>2)];
 var $135=$73;
 var $136=(($135+$134)|0);
 var $137=$136;
 HEAP32[(($137)>>2)]=$129;
 var $138=(($74+24)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$73;
 var $141=(($140+8)|0);
 var $142=$141;
 HEAP32[(($142)>>2)]=$139;
 var $143=$54;
 HEAP32[(($143)>>2)]=6260;
 var $144=$54;
 var $145=(($144+64)|0);
 var $146=$145;
 HEAP32[(($146)>>2)]=6300;
 var $147=$54;
 var $148=(($147+8)|0);
 var $149=$148;
 HEAP32[(($149)>>2)]=6280;
 var $150=(($54+12)|0);
 var $151=$44;
 $27=$150;
 $28=$151;
 var $152=$27;
 var $153=$28;
 $22=$152;
 $23=$153;
 var $154=$22;
 var $155=$154;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($155);
 var $156=$154;
 HEAP32[(($156)>>2)]=6440;
 var $157=(($154+32)|0);
 $21=$157;
 var $158=$21;
 $20=$158;
 var $159=$20;
 var $160=$159;
 var $161=(($159)|0);
 $19=$161;
 var $162=$19;
 $18=$162;
 var $163=$18;
 var $164=$163;
 $17=$164;
 var $165=$17;
 var $166=$165;
 $16=$166;
 var $167=$16;
 var $168=(($165)|0);
 $15=$159;
 var $169=$15;
 var $170=(($169)|0);
 $14=$170;
 var $171=$14;
 var $172=$171;
 $13=$172;
 var $173=$13;
 var $174=(($173)|0);
 var $175=(($174)|0);
 var $176=$175;
 var $177=(($176)|0);
 $__a_i_i_i_i_i_i=$177;
 $__i_i_i_i_i_i_i=0;
 label=3;break;
 case 3: 
 var $179=$__i_i_i_i_i_i_i;
 var $180=($179>>>0)<3;
 if($180){label=4;break;}else{label=5;break;}
 case 4: 
 var $182=$__i_i_i_i_i_i_i;
 var $183=$__a_i_i_i_i_i_i;
 var $184=(($183+($182<<2))|0);
 HEAP32[(($184)>>2)]=0;
 var $185=$__i_i_i_i_i_i_i;
 var $186=((($185)+(1))|0);
 $__i_i_i_i_i_i_i=$186;
 label=3;break;
 case 5: 
 var $187=(($154+44)|0);
 HEAP32[(($187)>>2)]=0;
 var $188=(($154+48)|0);
 var $189=$23;
 HEAP32[(($188)>>2)]=$189;
 $12=$24;
 var $190=$12;
 $11=$190;
 var $191=$11;
 var $192=$191;
 var $193=(($191)|0);
 $10=$193;
 var $194=$10;
 $9=$194;
 var $195=$9;
 var $196=$195;
 $8=$196;
 var $197=$8;
 var $198=$197;
 $7=$198;
 var $199=$7;
 var $200=(($197)|0);
 $6=$191;
 var $201=$6;
 var $202=(($201)|0);
 $5=$202;
 var $203=$5;
 var $204=$203;
 $4=$204;
 var $205=$4;
 var $206=(($205)|0);
 var $207=(($206)|0);
 var $208=$207;
 var $209=(($208)|0);
 $__a_i_i_i1_i_i_i=$209;
 $__i_i_i_i2_i_i_i=0;
 label=6;break;
 case 6: 
 var $211=$__i_i_i_i2_i_i_i;
 var $212=($211>>>0)<3;
 if($212){label=7;break;}else{label=8;break;}
 case 7: 
 var $214=$__i_i_i_i2_i_i_i;
 var $215=$__a_i_i_i1_i_i_i;
 var $216=(($215+($214<<2))|0);
 HEAP32[(($216)>>2)]=0;
 var $217=$__i_i_i_i2_i_i_i;
 var $218=((($217)+(1))|0);
 $__i_i_i_i2_i_i_i=$218;
 label=6;break;
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($154,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=9;break; }
 case 9: 
 var $220$0 = ___cxa_find_matching_catch(-1, -1); var $220$1 = tempRet0;
 var $221=$220$0;
 $25=$221;
 var $222=$220$1;
 $26=$222;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($157);
 var $223=$154;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($223);
 var $224=$25;
 var $225=$26;
 var $226$0=$224;
 var $226$1=0;
 var $227$0=$226$0;
 var $227$1=$225;
 var $228=$227$0;
 $45=$228;
 var $229=$227$1;
 $46=$229;
 var $230=$54;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($230,7804);
 label=11;break;
 case 10: 
 var $232$0 = ___cxa_find_matching_catch(-1, -1); var $232$1 = tempRet0;
 var $233=$232$0;
 $45=$233;
 var $234=$232$1;
 $46=$234;
 label=11;break;
 case 11: 
 var $236=$54;
 var $237=(($236+64)|0);
 var $238=$237;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($238);
 var $239=$45;
 var $240=$46;
 var $241$0=$239;
 var $241$1=0;
 var $242$0=$241$0;
 var $242$1=$240;
 ___resumeException($242$0)
 case 12: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 var $243=$ss;
 var $244=(($243+8)|0);
 var $245=$244;
 var $246=$47;
 var $247=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($245,$246) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=23;break; }
 case 13: 
 var $249=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($247,2280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=23;break; }
 case 14: 
 var $251=$48;
 var $252=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($249,$251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=23;break; }
 case 15: 
 var $254=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($252,3272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=23;break; }
 case 16: 
 var $256=$49;
 var $257=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($254,$256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=23;break; }
 case 17: 
 $2=$257;
 $3=8;
 var $259=$2;
 var $260=$3;
 var $261=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$260]($259) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=23;break; }
 case 18: 
 label=19;break;
 case 19: 
 var $263=___cxa_allocate_exception(8);
 $53=1;
 var $264=$263;
 $1=$ss;
 var $265=$1;
 var $266=(($265+12)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($52,$266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=24;break; }
 case 20: 
 label=21;break;
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($264,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=25;break; }
 case 22: 
 $53=0;
 (function() { try { __THREW__ = 0; return ___cxa_throw($263,11368,(50)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=25;break; }
 case 23: 
 var $270$0 = ___cxa_find_matching_catch(-1, -1); var $270$1 = tempRet0;
 var $271=$270$0;
 $50=$271;
 var $272=$270$1;
 $51=$272;
 label=29;break;
 case 24: 
 var $274$0 = ___cxa_find_matching_catch(-1, -1); var $274$1 = tempRet0;
 var $275=$274$0;
 $50=$275;
 var $276=$274$1;
 $51=$276;
 label=26;break;
 case 25: 
 var $278$0 = ___cxa_find_matching_catch(-1, -1); var $278$1 = tempRet0;
 var $279=$278$0;
 $50=$279;
 var $280=$278$1;
 $51=$280;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($52);
 label=26;break;
 case 26: 
 var $282=$53;
 if($282){label=27;break;}else{label=28;break;}
 case 27: 
 ___cxa_free_exception($263);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 label=30;break;
 case 30: 
 var $288=$50;
 var $289=$51;
 var $290$0=$288;
 var $290$1=0;
 var $291$0=$290$0;
 var $291$1=$289;
 ___resumeException($291$0)
 case 31: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13=sp;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $__s=(sp)+(8);
 var $28;
 var $29;
 var $__len;
 var $30=(sp)+(16);
 var $31=(sp)+(24);
 $26=$__os;
 $27=$__str;
 var $32=$26;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=22;break; }
 case 2: 
 $25=$__s;
 var $34=$25;
 var $35=(($34)|0);
 var $36=HEAP8[($35)];
 var $37=(($36)&1);
 label=3;break;
 case 3: 
 if($37){label=4;break;}else{label=29;break;}
 case 4: 
 var $40=$27;
 $24=$40;
 var $41=$24;
 var $42=(function() { try { __THREW__ = 0; return _strlen($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=23;break; }
 case 5: 
 label=6;break;
 case 6: 
 $__len=$42;
 var $44=$26;
 $22=$30;
 $23=$44;
 var $45=$22;
 var $46=$23;
 $20=$45;
 $21=$46;
 var $47=$20;
 var $48=$47;
 var $49=(($47)|0);
 var $50=$21;
 var $51=$50;
 var $52=HEAP32[(($51)>>2)];
 var $53=((($52)-(12))|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=$50;
 var $57=(($56+$55)|0);
 var $58=$57;
 $19=$58;
 var $59=$19;
 var $60=$59;
 $18=$60;
 var $61=$18;
 var $62=(($61+24)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$63;
 HEAP32[(($49)>>2)]=$64;
 var $65=$27;
 var $66=$26;
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=((($68)-(12))|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $72=$66;
 var $73=(($72+$71)|0);
 var $74=$73;
 $17=$74;
 var $75=$17;
 var $76=(($75+4)|0);
 var $77=HEAP32[(($76)>>2)];
 label=7;break;
 case 7: 
 var $79=$77&176;
 var $80=($79|0)==32;
 if($80){label=8;break;}else{label=9;break;}
 case 8: 
 var $82=$27;
 var $83=$__len;
 var $84=(($82+$83)|0);
 var $88=$84;label=10;break;
 case 9: 
 var $86=$27;
 var $88=$86;label=10;break;
 case 10: 
 var $88;
 var $89=$27;
 var $90=$__len;
 var $91=(($89+$90)|0);
 var $92=$26;
 var $93=$92;
 var $94=HEAP32[(($93)>>2)];
 var $95=((($94)-(12))|0);
 var $96=$95;
 var $97=HEAP32[(($96)>>2)];
 var $98=$92;
 var $99=(($98+$97)|0);
 var $100=$99;
 var $101=$26;
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=((($103)-(12))|0);
 var $105=$104;
 var $106=HEAP32[(($105)>>2)];
 var $107=$101;
 var $108=(($107+$106)|0);
 var $109=$108;
 $16=$109;
 var $110=$16;
 var $111=(($110+76)|0);
 var $112=HEAP32[(($111)>>2)];
 $6=-1;
 $7=$112;
 var $113=$6;
 var $114=$7;
 var $115=($113|0)==($114|0);
 if($115){label=11;break;}else{label=16;break;}
 case 11: 
 $11=$110;
 $12=32;
 var $117=$11;
 var $118=$117;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($13,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 $10=$13;
 var $119=$10;
 var $120=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($119,17336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 var $121=$120;
 var $122=$12;
 $8=$121;
 $9=$122;
 var $123=$8;
 var $124=$123;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+28)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$9;
 var $129=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($123,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1,0,0); var $131$1 = tempRet0;
 var $132=$131$0;
 $14=$132;
 var $133=$131$1;
 $15=$133;
 __ZNSt3__16localeD2Ev($13);
 var $134=$14;
 var $135=$15;
 var $136$0=$134;
 var $136$1=0;
 var $137$0=$136$0;
 var $137$1=$135;
 var $eh_lpad_body$1=$137$1;var $eh_lpad_body$0=$137$0;label=24;break;
 case 15: 
 __ZNSt3__16localeD2Ev($13);
 var $138=(($129<<24)>>24);
 var $139=(($110+76)|0);
 HEAP32[(($139)>>2)]=$138;
 label=16;break;
 case 16: 
 var $140=(($110+76)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141)&255);
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($31,$30,$65,$88,$91,$100,$142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=23;break; }
 case 18: 
 $5=$31;
 var $145=$5;
 var $146=(($145)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=19;break;}else{label=28;break;}
 case 19: 
 var $150=$26;
 var $151=$150;
 var $152=HEAP32[(($151)>>2)];
 var $153=((($152)-(12))|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$150;
 var $157=(($156+$155)|0);
 var $158=$157;
 $3=$158;
 $4=5;
 var $159=$3;
 var $160=$159;
 var $161=$4;
 $1=$160;
 $2=$161;
 var $162=$1;
 var $163=(($162+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=$2;
 var $166=$164|$165;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($162,$166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=23;break; }
 case 20: 
 label=21;break;
 case 21: 
 label=28;break;
 case 22: 
 var $169$0 = ___cxa_find_matching_catch(-1, -1,0); var $169$1 = tempRet0;
 var $170=$169$0;
 $28=$170;
 var $171=$169$1;
 $29=$171;
 label=25;break;
 case 23: 
 var $173$0 = ___cxa_find_matching_catch(-1, -1,0); var $173$1 = tempRet0;
 var $eh_lpad_body$1=$173$1;var $eh_lpad_body$0=$173$0;label=24;break;
 case 24: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $174=$eh_lpad_body$0;
 $28=$174;
 var $175=$eh_lpad_body$1;
 $29=$175;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
 label=25;break;
 case 25: 
 var $177=$28;
 var $178=___cxa_begin_catch($177);
 var $179=$26;
 var $180=$179;
 var $181=HEAP32[(($180)>>2)];
 var $182=((($181)-(12))|0);
 var $183=$182;
 var $184=HEAP32[(($183)>>2)];
 var $185=$179;
 var $186=(($185+$184)|0);
 var $187=$186;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=30;break; }
 case 26: 
 ___cxa_end_catch();
 label=27;break;
 case 27: 
 var $190=$26;
 STACKTOP=sp;return $190;
 case 28: 
 label=29;break;
 case 29: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
 label=27;break;
 case 30: 
 var $194$0 = ___cxa_find_matching_catch(-1, -1); var $194$1 = tempRet0;
 var $195=$194$0;
 $28=$195;
 var $196=$194$1;
 $29=$196;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=33;break; }
 case 31: 
 label=32;break;
 case 32: 
 var $199=$28;
 var $200=$29;
 var $201$0=$199;
 var $201$1=0;
 var $202$0=$201$0;
 var $202$1=$200;
 ___resumeException($202$0)
 case 33: 
 var $204$0 = ___cxa_find_matching_catch(-1, -1,0); var $204$1 = tempRet0;
 var $205=$204$0;
 ___clang_call_terminate($205);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9;
 $9=$__os;
 var $10=$9;
 var $11=$9;
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=((($13)-(12))|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$11;
 var $18=(($17+$16)|0);
 var $19=$18;
 $4=$19;
 $5=10;
 var $20=$4;
 var $21=$20;
 __ZNKSt3__18ios_base6getlocEv($6,$21);
 $3=$6;
 var $22=$3;
 var $23=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($22,17336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $24=$23;
 var $25=$5;
 $1=$24;
 $2=$25;
 var $26=$1;
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$2;
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 $7=$35;
 var $36=$34$1;
 $8=$36;
 __ZNSt3__16localeD2Ev($6);
 var $37=$7;
 var $38=$8;
 var $39$0=$37;
 var $39$1=0;
 var $40$0=$39$0;
 var $40$1=$38;
 ___resumeException($40$0)
 case 4: 
 __ZNSt3__16localeD2Ev($6);
 var $41=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10,$32);
 var $42=$9;
 var $43=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($42);
 var $44=$9;
 STACKTOP=sp;return $44;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2,7800);
 var $3=$2;
 var $4=(($3+64)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 STACKTOP=sp;return;
}


function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg_result,$this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8=sp;
 var $9;
 var $10;
 var $11=(sp)+(8);
 var $__t21_i_i_i8=(sp)+(16);
 var $12;
 var $13=(sp)+(24);
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=(sp)+(32);
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32=(sp)+(40);
 var $33;
 var $34;
 var $35=(sp)+(48);
 var $__t21_i_i_i1=(sp)+(56);
 var $36;
 var $37=(sp)+(64);
 var $38;
 var $39;
 var $40;
 var $41;
 var $42=(sp)+(72);
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $54;
 var $55;
 var $56=(sp)+(80);
 var $57;
 var $58;
 var $59=(sp)+(88);
 var $__t21_i_i_i=(sp)+(96);
 var $60;
 var $61=(sp)+(104);
 var $62;
 var $63;
 var $64=(sp)+(112);
 var $65;
 var $66;
 var $67;
 var $68;
 var $69=(sp)+(120);
 var $70=(sp)+(128);
 var $71=(sp)+(136);
 $68=$this;
 var $72=$68;
 var $73=(($72+48)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$74&16;
 var $76=($75|0)!=0;
 if($76){label=2;break;}else{label=5;break;}
 case 2: 
 var $78=(($72+44)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$72;
 $67=$80;
 var $81=$67;
 var $82=(($81+24)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($79>>>0)<($83>>>0);
 if($84){label=3;break;}else{label=4;break;}
 case 3: 
 var $86=$72;
 $29=$86;
 var $87=$29;
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($72+44)|0);
 HEAP32[(($90)>>2)]=$89;
 label=4;break;
 case 4: 
 var $92=$72;
 $5=$92;
 var $93=$5;
 var $94=(($93+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($72+44)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($72+32)|0);
 $4=$98;
 var $99=$4;
 $3=$99;
 var $100=$3;
 var $101=(($100)|0);
 $2=$101;
 var $102=$2;
 var $103=$102;
 $1=$103;
 var $104=$1;
 var $105=$104;
 $19=$agg_result;
 $20=$95;
 $21=$97;
 $22=$69;
 var $106=$19;
 var $107=$20;
 var $108=$21;
 var $109=$22;
 $14=$106;
 $15=$107;
 $16=$108;
 $17=$109;
 var $110=$14;
 var $111=$110;
 var $112=(($110)|0);
 var $113=$17;
 var $tmp_i_i9=$13;
 var $tmp1_i_i10=$18;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i9)]=HEAP8[($tmp1_i_i10)];
 $12=$112;
 var $114=$12;
 var $tmp_i_i_i11=$__t21_i_i_i8;
 var $tmp2_i_i_i12=$13;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i11)]=HEAP8[($tmp2_i_i_i12)];
 $10=$114;
 var $115=$10;
 var $116=$115;
 $9=$__t21_i_i_i8;
 var $117=$9;
 var $tmp_i_i_i_i13=$8;
 var $tmp1_i_i_i_i14=$11;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i13)]=HEAP8[($tmp1_i_i_i_i14)];
 $7=$116;
 var $118=$7;
 var $119=$118;
 $6=$8;
 var $120=$6;
 var $121=(($118)|0);
 var $122=$15;
 var $123=$16;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($110,$122,$123);
 label=12;break;
 case 5: 
 var $125=(($72+48)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$126&8;
 var $128=($127|0)!=0;
 if($128){label=6;break;}else{label=7;break;}
 case 6: 
 var $130=$72;
 $23=$130;
 var $131=$23;
 var $132=(($131+8)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$72;
 $24=$134;
 var $135=$24;
 var $136=(($135+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($72+32)|0);
 $28=$138;
 var $139=$28;
 $27=$139;
 var $140=$27;
 var $141=(($140)|0);
 $26=$141;
 var $142=$26;
 var $143=$142;
 $25=$143;
 var $144=$25;
 var $145=$144;
 $43=$agg_result;
 $44=$133;
 $45=$137;
 $46=$70;
 var $146=$43;
 var $147=$44;
 var $148=$45;
 var $149=$46;
 $38=$146;
 $39=$147;
 $40=$148;
 $41=$149;
 var $150=$38;
 var $151=$150;
 var $152=(($150)|0);
 var $153=$41;
 var $tmp_i_i2=$37;
 var $tmp1_i_i3=$42;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i2)]=HEAP8[($tmp1_i_i3)];
 $36=$152;
 var $154=$36;
 var $tmp_i_i_i4=$__t21_i_i_i1;
 var $tmp2_i_i_i5=$37;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i4)]=HEAP8[($tmp2_i_i_i5)];
 $34=$154;
 var $155=$34;
 var $156=$155;
 $33=$__t21_i_i_i1;
 var $157=$33;
 var $tmp_i_i_i_i6=$32;
 var $tmp1_i_i_i_i7=$35;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i6)]=HEAP8[($tmp1_i_i_i_i7)];
 $31=$156;
 var $158=$31;
 var $159=$158;
 $30=$32;
 var $160=$30;
 var $161=(($158)|0);
 var $162=$39;
 var $163=$40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($150,$162,$163);
 label=12;break;
 case 7: 
 label=8;break;
 case 8: 
 var $166=(($72+32)|0);
 $50=$166;
 var $167=$50;
 $49=$167;
 var $168=$49;
 var $169=(($168)|0);
 $48=$169;
 var $170=$48;
 var $171=$170;
 $47=$171;
 var $172=$47;
 var $173=$172;
 $65=$agg_result;
 $66=$71;
 var $174=$65;
 var $175=$66;
 $62=$174;
 $63=$175;
 var $176=$62;
 var $177=$176;
 var $178=(($176)|0);
 var $179=$63;
 var $tmp_i_i=$61;
 var $tmp1_i_i=$64;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $60=$178;
 var $180=$60;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$61;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp2_i_i_i)];
 $58=$180;
 var $181=$58;
 var $182=$181;
 $57=$__t21_i_i_i;
 var $183=$57;
 var $tmp_i_i_i_i=$56;
 var $tmp1_i_i_i_i=$59;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $55=$182;
 var $184=$55;
 var $185=$184;
 $54=$56;
 var $186=$54;
 var $187=(($184)|0);
 $53=$176;
 var $188=$53;
 var $189=(($188)|0);
 $52=$189;
 var $190=$52;
 var $191=$190;
 $51=$191;
 var $192=$51;
 var $193=(($192)|0);
 var $194=(($193)|0);
 var $195=$194;
 var $196=(($195)|0);
 $__a_i_i_i=$196;
 $__i_i_i_i=0;
 label=9;break;
 case 9: 
 var $198=$__i_i_i_i;
 var $199=($198>>>0)<3;
 if($199){label=10;break;}else{label=11;break;}
 case 10: 
 var $201=$__i_i_i_i;
 var $202=$__a_i_i_i;
 var $203=(($202+($201<<2))|0);
 HEAP32[(($203)>>2)]=0;
 var $204=$__i_i_i_i;
 var $205=((($204)+(1))|0);
 $__i_i_i_i=$205;
 label=9;break;
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17=sp;
 var $18;
 var $19=(sp)+(8);
 var $20=(sp)+(16);
 var $21;
 var $22;
 var $23;
 var $24;
 var $__m_i;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48=(sp)+(24);
 var $49;
 var $50;
 var $51=(sp)+(32);
 var $52;
 var $53;
 var $54;
 var $__sz;
 var $__p;
 var $__cap;
 var $55=(sp)+(40);
 $52=$this;
 $53=$__first;
 $54=$__last;
 var $56=$52;
 var $57=$53;
 var $58=$54;
 $49=$57;
 $50=$58;
 var $59=$49;
 var $60=$50;
 var $tmp_i=$48;
 var $tmp1_i=$51;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $46=$59;
 $47=$60;
 var $61=$47;
 var $62=$46;
 var $63=$61;
 var $64=$62;
 var $65=((($63)-($64))|0);
 $__sz=$65;
 var $66=$__sz;
 $24=$56;
 var $67=$24;
 $23=$67;
 var $68=$23;
 var $69=(($68)|0);
 $22=$69;
 var $70=$22;
 var $71=$70;
 $21=$71;
 var $72=$21;
 var $73=$72;
 $18=$73;
 var $74=$20;
 var $75=$18;
 var $tmp_i_i=$17;
 var $tmp1_i_i=$19;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $16=$75;
 var $76=$16;
 $15=$76;
 var $77=$15;
 $__m_i=-1;
 var $78=$__m_i;
 var $79=((($78)-(16))|0);
 var $80=($66>>>0)>($79>>>0);
 if($80){label=2;break;}else{label=3;break;}
 case 2: 
 var $82=$56;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($82);
 label=3;break;
 case 3: 
 var $84=$__sz;
 var $85=($84>>>0)<11;
 if($85){label=4;break;}else{label=5;break;}
 case 4: 
 var $87=$__sz;
 $3=$56;
 $4=$87;
 var $88=$3;
 var $89=$4;
 var $90=$89<<1;
 var $91=(($90)&255);
 var $92=(($88)|0);
 $2=$92;
 var $93=$2;
 var $94=$93;
 $1=$94;
 var $95=$1;
 var $96=(($95)|0);
 var $97=(($96)|0);
 var $98=$97;
 var $99=(($98)|0);
 var $100=$99;
 HEAP8[($100)]=$91;
 $9=$56;
 var $101=$9;
 var $102=(($101)|0);
 $8=$102;
 var $103=$8;
 var $104=$103;
 $7=$104;
 var $105=$7;
 var $106=(($105)|0);
 var $107=(($106)|0);
 var $108=$107;
 var $109=(($108+1)|0);
 var $110=(($109)|0);
 $6=$110;
 var $111=$6;
 $5=$111;
 var $112=$5;
 $__p=$112;
 label=9;break;
 case 5: 
 var $114=$__sz;
 $11=$114;
 var $115=$11;
 var $116=($115>>>0)<11;
 if($116){label=6;break;}else{label=7;break;}
 case 6: 
 var $124=11;label=8;break;
 case 7: 
 var $119=$11;
 var $120=((($119)+(1))|0);
 $10=$120;
 var $121=$10;
 var $122=((($121)+(15))|0);
 var $123=$122&-16;
 var $124=$123;label=8;break;
 case 8: 
 var $124;
 var $125=((($124)-(1))|0);
 $__cap=$125;
 $14=$56;
 var $126=$14;
 var $127=(($126)|0);
 $13=$127;
 var $128=$13;
 var $129=$128;
 $12=$129;
 var $130=$12;
 var $131=$130;
 var $132=$__cap;
 var $133=((($132)+(1))|0);
 $28=$131;
 $29=$133;
 var $134=$28;
 var $135=$29;
 $25=$134;
 $26=$135;
 $27=0;
 var $136=$25;
 var $137=$26;
 var $138=__Znwj($137);
 $__p=$138;
 var $139=$__p;
 $32=$56;
 $33=$139;
 var $140=$32;
 var $141=$33;
 var $142=(($140)|0);
 $31=$142;
 var $143=$31;
 var $144=$143;
 $30=$144;
 var $145=$30;
 var $146=(($145)|0);
 var $147=(($146)|0);
 var $148=$147;
 var $149=(($148+8)|0);
 HEAP32[(($149)>>2)]=$141;
 var $150=$__cap;
 var $151=((($150)+(1))|0);
 $36=$56;
 $37=$151;
 var $152=$36;
 var $153=$37;
 var $154=1|$153;
 var $155=(($152)|0);
 $35=$155;
 var $156=$35;
 var $157=$156;
 $34=$157;
 var $158=$34;
 var $159=(($158)|0);
 var $160=(($159)|0);
 var $161=$160;
 var $162=(($161)|0);
 HEAP32[(($162)>>2)]=$154;
 var $163=$__sz;
 $40=$56;
 $41=$163;
 var $164=$40;
 var $165=$41;
 var $166=(($164)|0);
 $39=$166;
 var $167=$39;
 var $168=$167;
 $38=$168;
 var $169=$38;
 var $170=(($169)|0);
 var $171=(($170)|0);
 var $172=$171;
 var $173=(($172+4)|0);
 HEAP32[(($173)>>2)]=$165;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $176=$53;
 var $177=$54;
 var $178=($176|0)!=($177|0);
 if($178){label=11;break;}else{label=13;break;}
 case 11: 
 var $180=$__p;
 var $181=$53;
 $42=$180;
 $43=$181;
 var $182=$43;
 var $183=HEAP8[($182)];
 var $184=$42;
 HEAP8[($184)]=$183;
 label=12;break;
 case 12: 
 var $186=$53;
 var $187=(($186+1)|0);
 $53=$187;
 var $188=$__p;
 var $189=(($188+1)|0);
 $__p=$189;
 label=10;break;
 case 13: 
 var $191=$__p;
 HEAP8[($55)]=0;
 $44=$191;
 $45=$55;
 var $192=$45;
 var $193=HEAP8[($192)];
 var $194=$44;
 HEAP8[($194)]=$193;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $__r_i;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $__sz;
 var $__ns;
 var $__np;
 var $__sp=sp;
 var $42;
 var $43;
 var $44;
 $37=$__ob;
 $38=$__op;
 $39=$__oe;
 $40=$__iob;
 $41=$__fl;
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=2;break;}else{label=3;break;}
 case 2: 
 var $49=$agg_result;
 var $50=$__s;
 assert(4 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];
 label=27;break;
 case 3: 
 var $52=$39;
 var $53=$37;
 var $54=$52;
 var $55=$53;
 var $56=((($54)-($55))|0);
 $__sz=$56;
 var $57=$40;
 $36=$57;
 var $58=$36;
 var $59=(($58+12)|0);
 var $60=HEAP32[(($59)>>2)];
 $__ns=$60;
 var $61=$__ns;
 var $62=$__sz;
 var $63=($61|0)>($62|0);
 if($63){label=4;break;}else{label=5;break;}
 case 4: 
 var $65=$__sz;
 var $66=$__ns;
 var $67=((($66)-($65))|0);
 $__ns=$67;
 label=6;break;
 case 5: 
 $__ns=0;
 label=6;break;
 case 6: 
 var $70=$38;
 var $71=$37;
 var $72=$70;
 var $73=$71;
 var $74=((($72)-($73))|0);
 $__np=$74;
 var $75=$__np;
 var $76=($75|0)>0;
 if($76){label=7;break;}else{label=10;break;}
 case 7: 
 var $78=(($__s)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$37;
 var $81=$__np;
 $28=$79;
 $29=$80;
 $30=$81;
 var $82=$28;
 var $83=$82;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+48)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=$29;
 var $88=$30;
 var $89=FUNCTION_TABLE[$86]($82,$87,$88);
 var $90=$__np;
 var $91=($89|0)!=($90|0);
 if($91){label=8;break;}else{label=9;break;}
 case 8: 
 var $93=(($__s)|0);
 HEAP32[(($93)>>2)]=0;
 var $94=$agg_result;
 var $95=$__s;
 assert(4 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];
 label=27;break;
 case 9: 
 label=10;break;
 case 10: 
 var $98=$__ns;
 var $99=($98|0)>0;
 if($99){label=11;break;}else{label=22;break;}
 case 11: 
 var $101=$__ns;
 var $102=$41;
 $25=$__sp;
 $26=$101;
 $27=$102;
 var $103=$25;
 var $104=$26;
 var $105=$27;
 $22=$103;
 $23=$104;
 $24=$105;
 var $106=$22;
 var $107=$106;
 var $108=(($106)|0);
 $21=$108;
 var $109=$21;
 $20=$109;
 var $110=$20;
 var $111=$110;
 $19=$111;
 var $112=$19;
 var $113=$112;
 $18=$113;
 var $114=$18;
 var $115=(($112)|0);
 var $116=$23;
 var $117=$24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($106,$116,$117);
 var $118=(($__s)|0);
 var $119=HEAP32[(($118)>>2)];
 $17=$__sp;
 var $120=$17;
 $16=$120;
 var $121=$16;
 $15=$121;
 var $122=$15;
 var $123=(($122)|0);
 $14=$123;
 var $124=$14;
 var $125=$124;
 $13=$125;
 var $126=$13;
 var $127=(($126)|0);
 var $128=(($127)|0);
 var $129=$128;
 var $130=(($129)|0);
 var $131=$130;
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$133&1;
 var $135=($134|0)!=0;
 if($135){label=12;break;}else{label=13;break;}
 case 12: 
 $7=$121;
 var $137=$7;
 var $138=(($137)|0);
 $6=$138;
 var $139=$6;
 var $140=$139;
 $5=$140;
 var $141=$5;
 var $142=(($141)|0);
 var $143=(($142)|0);
 var $144=$143;
 var $145=(($144+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $160=$146;label=14;break;
 case 13: 
 $12=$121;
 var $148=$12;
 var $149=(($148)|0);
 $11=$149;
 var $150=$11;
 var $151=$150;
 $10=$151;
 var $152=$10;
 var $153=(($152)|0);
 var $154=(($153)|0);
 var $155=$154;
 var $156=(($155+1)|0);
 var $157=(($156)|0);
 $9=$157;
 var $158=$9;
 $8=$158;
 var $159=$8;
 var $160=$159;label=14;break;
 case 14: 
 var $160;
 $4=$160;
 var $161=$4;
 var $162=$__ns;
 $1=$119;
 $2=$161;
 $3=$162;
 var $163=$1;
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+48)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$2;
 var $169=$3;
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($163,$168,$169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 label=16;break;
 case 16: 
 var $172=$__ns;
 var $173=($170|0)!=($172|0);
 if($173){label=17;break;}else{label=19;break;}
 case 17: 
 var $175=(($__s)|0);
 HEAP32[(($175)>>2)]=0;
 var $176=$agg_result;
 var $177=$__s;
 assert(4 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];
 $44=1;
 label=20;break;
 case 18: 
 var $179$0 = ___cxa_find_matching_catch(-1, -1); var $179$1 = tempRet0;
 var $180=$179$0;
 $42=$180;
 var $181=$179$1;
 $43=$181;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=28;break;
 case 19: 
 $44=0;
 label=20;break;
 case 20: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 var $cleanup_dest=$44;
 if(($cleanup_dest|0)==0){ label=21;break;}else if(($cleanup_dest|0)==1){ label=27;break;}else{label=29;break;}
 case 21: 
 label=22;break;
 case 22: 
 var $186=$39;
 var $187=$38;
 var $188=$186;
 var $189=$187;
 var $190=((($188)-($189))|0);
 $__np=$190;
 var $191=$__np;
 var $192=($191|0)>0;
 if($192){label=23;break;}else{label=26;break;}
 case 23: 
 var $194=(($__s)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=$38;
 var $197=$__np;
 $31=$195;
 $32=$196;
 $33=$197;
 var $198=$31;
 var $199=$198;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+48)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$32;
 var $204=$33;
 var $205=FUNCTION_TABLE[$202]($198,$203,$204);
 var $206=$__np;
 var $207=($205|0)!=($206|0);
 if($207){label=24;break;}else{label=25;break;}
 case 24: 
 var $209=(($__s)|0);
 HEAP32[(($209)>>2)]=0;
 var $210=$agg_result;
 var $211=$__s;
 assert(4 % 1 === 0);HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];
 label=27;break;
 case 25: 
 label=26;break;
 case 26: 
 var $214=$40;
 $34=$214;
 $35=0;
 var $215=$34;
 var $216=(($215+12)|0);
 var $217=HEAP32[(($216)>>2)];
 $__r_i=$217;
 var $218=$35;
 var $219=(($215+12)|0);
 HEAP32[(($219)>>2)]=$218;
 var $220=$__r_i;
 var $221=$agg_result;
 var $222=$__s;
 assert(4 % 1 === 0);HEAP32[(($221)>>2)]=HEAP32[(($222)>>2)];
 label=27;break;
 case 27: 
 STACKTOP=sp;return;
 case 28: 
 var $225=$42;
 var $226=$43;
 var $227$0=$225;
 var $227$1=0;
 var $228$0=$227$0;
 var $228$1=$226;
 ___resumeException($228$0)
 case 29: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=((($3)-(8))|0);
 var $5=$4;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP=sp;return;
}


function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=((($3)-(8))|0);
 var $5=$4;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP=sp;return;
}


function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 STACKTOP=sp;return;
}


function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($10);
 STACKTOP=sp;return;
}


function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 HEAP32[(($6)>>2)]=$5;
 var $7=(($4+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)-(12))|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$3;
 var $15=(($14+$13)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=$8;
 var $17=(($4+36)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=$18;
 var $22=(($3+12)|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($22);
 var $23=$3;
 var $24=(($4+4)|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($23,$24);
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=6440;
 var $4=(($2+32)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $5=$2;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$__off$0,$__off$1,$__way,$__wch){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5=(sp)+(8);
 var $6;
 var $7=(sp)+(16);
 var $8;
 var $9=(sp)+(24);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29=(sp)+(32);
 var $30;
 var $31=(sp)+(40);
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47=(sp)+(48);
 var $48;
 var $49=(sp)+(56);
 var $50;
 var $51;
 var $52=(sp)+(64);
 var $53;
 var $54=(sp)+(72);
 var $55;
 var $56;
 var $57=(sp)+(80);
 var $58;
 var $59=(sp)+(88);
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74=(sp)+(96);
 var $75;
 var $76=(sp)+(104);
 var $77;
 var $78;
 var $79=(sp)+(112);
 var $80;
 var $81;
 var $__noff=(sp)+(120);
 $78=$this;
 var $st$0$0=(($79)|0);
 HEAP32[(($st$0$0)>>2)]=$__off$0;
 var $st$1$1=(($79+4)|0);
 HEAP32[(($st$1$1)>>2)]=$__off$1;
 $80=$__way;
 $81=$__wch;
 var $82=$78;
 var $83=(($82+44)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$82;
 $77=$85;
 var $86=$77;
 var $87=(($86+24)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($84>>>0)<($88>>>0);
 if($89){label=2;break;}else{label=3;break;}
 case 2: 
 var $91=$82;
 $1=$91;
 var $92=$1;
 var $93=(($92+24)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($82+44)|0);
 HEAP32[(($95)>>2)]=$94;
 label=3;break;
 case 3: 
 var $97=$81;
 var $98=$97&24;
 var $99=($98|0)==0;
 if($99){label=4;break;}else{label=5;break;}
 case 4: 
 $4=$agg_result;
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $st$3$0=(($5)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($5+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 var $101=$4;
 var $ld$5$0=(($5)|0);
 var $102$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($5+4)|0);
 var $102$1=HEAP32[(($ld$6$1)>>2)];
 $2=$101;
 var $st$7$0=(($3)|0);
 HEAP32[(($st$7$0)>>2)]=$102$0;
 var $st$8$1=(($3+4)|0);
 HEAP32[(($st$8$1)>>2)]=$102$1;
 var $103=$2;
 var $104=(($103)|0);
 var $105=$104;
 HEAP32[(($105)>>2)]=0; HEAP32[((($105)+(4))>>2)]=0;
 var $106=(($103+8)|0);
 var $ld$9$0=(($3)|0);
 var $107$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($3+4)|0);
 var $107$1=HEAP32[(($ld$10$1)>>2)];
 var $st$11$0=(($106)|0);
 HEAP32[(($st$11$0)>>2)]=$107$0;
 var $st$12$1=(($106+4)|0);
 HEAP32[(($st$12$1)>>2)]=$107$1;
 label=38;break;
 case 5: 
 var $109=$81;
 var $110=$109&24;
 var $111=($110|0)==24;
 if($111){label=6;break;}else{label=8;break;}
 case 6: 
 var $113=$80;
 var $114=($113|0)==1;
 if($114){label=7;break;}else{label=8;break;}
 case 7: 
 $8=$agg_result;
 var $$etemp$13$0=-1;
 var $$etemp$13$1=-1;
 var $st$14$0=(($9)|0);
 HEAP32[(($st$14$0)>>2)]=$$etemp$13$0;
 var $st$15$1=(($9+4)|0);
 HEAP32[(($st$15$1)>>2)]=$$etemp$13$1;
 var $116=$8;
 var $ld$16$0=(($9)|0);
 var $117$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($9+4)|0);
 var $117$1=HEAP32[(($ld$17$1)>>2)];
 $6=$116;
 var $st$18$0=(($7)|0);
 HEAP32[(($st$18$0)>>2)]=$117$0;
 var $st$19$1=(($7+4)|0);
 HEAP32[(($st$19$1)>>2)]=$117$1;
 var $118=$6;
 var $119=(($118)|0);
 var $120=$119;
 HEAP32[(($120)>>2)]=0; HEAP32[((($120)+(4))>>2)]=0;
 var $121=(($118+8)|0);
 var $ld$20$0=(($7)|0);
 var $122$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($7+4)|0);
 var $122$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($121)|0);
 HEAP32[(($st$22$0)>>2)]=$122$0;
 var $st$23$1=(($121+4)|0);
 HEAP32[(($st$23$1)>>2)]=$122$1;
 label=38;break;
 case 8: 
 var $124=$80;
 if(($124|0)==1){ label=10;break;}else if(($124|0)==2){ label=14;break;}else if(($124|0)==0){ label=9;break;}else{label=18;break;}
 case 9: 
 var $$etemp$24$0=0;
 var $$etemp$24$1=0;
 var $st$25$0=(($__noff)|0);
 HEAP32[(($st$25$0)>>2)]=$$etemp$24$0;
 var $st$26$1=(($__noff+4)|0);
 HEAP32[(($st$26$1)>>2)]=$$etemp$24$1;
 label=19;break;
 case 10: 
 var $127=$81;
 var $128=$127&8;
 var $129=($128|0)!=0;
 if($129){label=11;break;}else{label=12;break;}
 case 11: 
 var $131=$82;
 $10=$131;
 var $132=$10;
 var $133=(($132+12)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=$82;
 $11=$135;
 var $136=$11;
 var $137=(($136+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$134;
 var $140=$138;
 var $141=((($139)-($140))|0);
 var $142$0=$141;
 var $142$1=((((($141|0)<0))|0)?-1:0);
 var $st$27$0=(($__noff)|0);
 HEAP32[(($st$27$0)>>2)]=$142$0;
 var $st$28$1=(($__noff+4)|0);
 HEAP32[(($st$28$1)>>2)]=$142$1;
 label=13;break;
 case 12: 
 var $144=$82;
 $12=$144;
 var $145=$12;
 var $146=(($145+24)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=$82;
 $13=$148;
 var $149=$13;
 var $150=(($149+20)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$147;
 var $153=$151;
 var $154=((($152)-($153))|0);
 var $155$0=$154;
 var $155$1=((((($154|0)<0))|0)?-1:0);
 var $st$29$0=(($__noff)|0);
 HEAP32[(($st$29$0)>>2)]=$155$0;
 var $st$30$1=(($__noff+4)|0);
 HEAP32[(($st$30$1)>>2)]=$155$1;
 label=13;break;
 case 13: 
 label=19;break;
 case 14: 
 var $158=(($82+44)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($82+32)|0);
 $27=$160;
 var $161=$27;
 $26=$161;
 var $162=$26;
 $25=$162;
 var $163=$25;
 var $164=(($163)|0);
 $24=$164;
 var $165=$24;
 var $166=$165;
 $23=$166;
 var $167=$23;
 var $168=(($167)|0);
 var $169=(($168)|0);
 var $170=$169;
 var $171=(($170)|0);
 var $172=$171;
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=$174&1;
 var $176=($175|0)!=0;
 if($176){label=15;break;}else{label=16;break;}
 case 15: 
 $17=$162;
 var $178=$17;
 var $179=(($178)|0);
 $16=$179;
 var $180=$16;
 var $181=$180;
 $15=$181;
 var $182=$15;
 var $183=(($182)|0);
 var $184=(($183)|0);
 var $185=$184;
 var $186=(($185+8)|0);
 var $187=HEAP32[(($186)>>2)];
 var $201=$187;label=17;break;
 case 16: 
 $22=$162;
 var $189=$22;
 var $190=(($189)|0);
 $21=$190;
 var $191=$21;
 var $192=$191;
 $20=$192;
 var $193=$20;
 var $194=(($193)|0);
 var $195=(($194)|0);
 var $196=$195;
 var $197=(($196+1)|0);
 var $198=(($197)|0);
 $19=$198;
 var $199=$19;
 $18=$199;
 var $200=$18;
 var $201=$200;label=17;break;
 case 17: 
 var $201;
 $14=$201;
 var $202=$14;
 var $203=$159;
 var $204=$202;
 var $205=((($203)-($204))|0);
 var $206$0=$205;
 var $206$1=((((($205|0)<0))|0)?-1:0);
 var $st$31$0=(($__noff)|0);
 HEAP32[(($st$31$0)>>2)]=$206$0;
 var $st$32$1=(($__noff+4)|0);
 HEAP32[(($st$32$1)>>2)]=$206$1;
 label=19;break;
 case 18: 
 $30=$agg_result;
 var $$etemp$33$0=-1;
 var $$etemp$33$1=-1;
 var $st$34$0=(($31)|0);
 HEAP32[(($st$34$0)>>2)]=$$etemp$33$0;
 var $st$35$1=(($31+4)|0);
 HEAP32[(($st$35$1)>>2)]=$$etemp$33$1;
 var $208=$30;
 var $ld$36$0=(($31)|0);
 var $209$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($31+4)|0);
 var $209$1=HEAP32[(($ld$37$1)>>2)];
 $28=$208;
 var $st$38$0=(($29)|0);
 HEAP32[(($st$38$0)>>2)]=$209$0;
 var $st$39$1=(($29+4)|0);
 HEAP32[(($st$39$1)>>2)]=$209$1;
 var $210=$28;
 var $211=(($210)|0);
 var $212=$211;
 HEAP32[(($212)>>2)]=0; HEAP32[((($212)+(4))>>2)]=0;
 var $213=(($210+8)|0);
 var $ld$40$0=(($29)|0);
 var $214$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($29+4)|0);
 var $214$1=HEAP32[(($ld$41$1)>>2)];
 var $st$42$0=(($213)|0);
 HEAP32[(($st$42$0)>>2)]=$214$0;
 var $st$43$1=(($213+4)|0);
 HEAP32[(($st$43$1)>>2)]=$214$1;
 label=38;break;
 case 19: 
 var $ld$44$0=(($79)|0);
 var $216$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($79+4)|0);
 var $216$1=HEAP32[(($ld$45$1)>>2)];
 var $ld$46$0=(($__noff)|0);
 var $217$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($__noff+4)|0);
 var $217$1=HEAP32[(($ld$47$1)>>2)];
 var $218$0=_i64Add($217$0,$217$1,$216$0,$216$1);var $218$1=tempRet0;
 var $st$48$0=(($__noff)|0);
 HEAP32[(($st$48$0)>>2)]=$218$0;
 var $st$49$1=(($__noff+4)|0);
 HEAP32[(($st$49$1)>>2)]=$218$1;
 var $ld$50$0=(($__noff)|0);
 var $219$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($__noff+4)|0);
 var $219$1=HEAP32[(($ld$51$1)>>2)];
 var $$etemp$52$0=0;
 var $$etemp$52$1=0;
 var $220=(($219$1|0) < ($$etemp$52$1|0)) | (((($219$1|0) == ($$etemp$52$1|0) & ($219$0>>>0) <  ($$etemp$52$0>>>0))));
 if($220){label=24;break;}else{label=20;break;}
 case 20: 
 var $222=(($82+44)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($82+32)|0);
 $45=$224;
 var $225=$45;
 $44=$225;
 var $226=$44;
 $43=$226;
 var $227=$43;
 var $228=(($227)|0);
 $42=$228;
 var $229=$42;
 var $230=$229;
 $41=$230;
 var $231=$41;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234)|0);
 var $236=$235;
 var $237=HEAP8[($236)];
 var $238=($237&255);
 var $239=$238&1;
 var $240=($239|0)!=0;
 if($240){label=21;break;}else{label=22;break;}
 case 21: 
 $35=$226;
 var $242=$35;
 var $243=(($242)|0);
 $34=$243;
 var $244=$34;
 var $245=$244;
 $33=$245;
 var $246=$33;
 var $247=(($246)|0);
 var $248=(($247)|0);
 var $249=$248;
 var $250=(($249+8)|0);
 var $251=HEAP32[(($250)>>2)];
 var $265=$251;label=23;break;
 case 22: 
 $40=$226;
 var $253=$40;
 var $254=(($253)|0);
 $39=$254;
 var $255=$39;
 var $256=$255;
 $38=$256;
 var $257=$38;
 var $258=(($257)|0);
 var $259=(($258)|0);
 var $260=$259;
 var $261=(($260+1)|0);
 var $262=(($261)|0);
 $37=$262;
 var $263=$37;
 $36=$263;
 var $264=$36;
 var $265=$264;label=23;break;
 case 23: 
 var $265;
 $32=$265;
 var $266=$32;
 var $267=$223;
 var $268=$266;
 var $269=((($267)-($268))|0);
 var $270$0=$269;
 var $270$1=((((($269|0)<0))|0)?-1:0);
 var $ld$53$0=(($__noff)|0);
 var $271$0=HEAP32[(($ld$53$0)>>2)];
 var $ld$54$1=(($__noff+4)|0);
 var $271$1=HEAP32[(($ld$54$1)>>2)];
 var $272=(($270$1|0) < ($271$1|0)) | (((($270$1|0) == ($271$1|0) & ($270$0>>>0) <  ($271$0>>>0))));
 if($272){label=24;break;}else{label=25;break;}
 case 24: 
 $48=$agg_result;
 var $$etemp$55$0=-1;
 var $$etemp$55$1=-1;
 var $st$56$0=(($49)|0);
 HEAP32[(($st$56$0)>>2)]=$$etemp$55$0;
 var $st$57$1=(($49+4)|0);
 HEAP32[(($st$57$1)>>2)]=$$etemp$55$1;
 var $274=$48;
 var $ld$58$0=(($49)|0);
 var $275$0=HEAP32[(($ld$58$0)>>2)];
 var $ld$59$1=(($49+4)|0);
 var $275$1=HEAP32[(($ld$59$1)>>2)];
 $46=$274;
 var $st$60$0=(($47)|0);
 HEAP32[(($st$60$0)>>2)]=$275$0;
 var $st$61$1=(($47+4)|0);
 HEAP32[(($st$61$1)>>2)]=$275$1;
 var $276=$46;
 var $277=(($276)|0);
 var $278=$277;
 HEAP32[(($278)>>2)]=0; HEAP32[((($278)+(4))>>2)]=0;
 var $279=(($276+8)|0);
 var $ld$62$0=(($47)|0);
 var $280$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($47+4)|0);
 var $280$1=HEAP32[(($ld$63$1)>>2)];
 var $st$64$0=(($279)|0);
 HEAP32[(($st$64$0)>>2)]=$280$0;
 var $st$65$1=(($279+4)|0);
 HEAP32[(($st$65$1)>>2)]=$280$1;
 label=38;break;
 case 25: 
 var $ld$66$0=(($__noff)|0);
 var $282$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($__noff+4)|0);
 var $282$1=HEAP32[(($ld$67$1)>>2)];
 var $$etemp$68$0=0;
 var $$etemp$68$1=0;
 var $283=(($282$0|0) != ($$etemp$68$0|0)) | (($282$1|0) != ($$etemp$68$1|0));
 if($283){label=26;break;}else{label=33;break;}
 case 26: 
 var $285=$81;
 var $286=$285&8;
 var $287=($286|0)!=0;
 if($287){label=27;break;}else{label=29;break;}
 case 27: 
 var $289=$82;
 $50=$289;
 var $290=$50;
 var $291=(($290+12)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=($292|0)==0;
 if($293){label=28;break;}else{label=29;break;}
 case 28: 
 $53=$agg_result;
 var $$etemp$69$0=-1;
 var $$etemp$69$1=-1;
 var $st$70$0=(($54)|0);
 HEAP32[(($st$70$0)>>2)]=$$etemp$69$0;
 var $st$71$1=(($54+4)|0);
 HEAP32[(($st$71$1)>>2)]=$$etemp$69$1;
 var $295=$53;
 var $ld$72$0=(($54)|0);
 var $296$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($54+4)|0);
 var $296$1=HEAP32[(($ld$73$1)>>2)];
 $51=$295;
 var $st$74$0=(($52)|0);
 HEAP32[(($st$74$0)>>2)]=$296$0;
 var $st$75$1=(($52+4)|0);
 HEAP32[(($st$75$1)>>2)]=$296$1;
 var $297=$51;
 var $298=(($297)|0);
 var $299=$298;
 HEAP32[(($299)>>2)]=0; HEAP32[((($299)+(4))>>2)]=0;
 var $300=(($297+8)|0);
 var $ld$76$0=(($52)|0);
 var $301$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($52+4)|0);
 var $301$1=HEAP32[(($ld$77$1)>>2)];
 var $st$78$0=(($300)|0);
 HEAP32[(($st$78$0)>>2)]=$301$0;
 var $st$79$1=(($300+4)|0);
 HEAP32[(($st$79$1)>>2)]=$301$1;
 label=38;break;
 case 29: 
 var $303=$81;
 var $304=$303&16;
 var $305=($304|0)!=0;
 if($305){label=30;break;}else{label=32;break;}
 case 30: 
 var $307=$82;
 $55=$307;
 var $308=$55;
 var $309=(($308+24)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=($310|0)==0;
 if($311){label=31;break;}else{label=32;break;}
 case 31: 
 $58=$agg_result;
 var $$etemp$80$0=-1;
 var $$etemp$80$1=-1;
 var $st$81$0=(($59)|0);
 HEAP32[(($st$81$0)>>2)]=$$etemp$80$0;
 var $st$82$1=(($59+4)|0);
 HEAP32[(($st$82$1)>>2)]=$$etemp$80$1;
 var $313=$58;
 var $ld$83$0=(($59)|0);
 var $314$0=HEAP32[(($ld$83$0)>>2)];
 var $ld$84$1=(($59+4)|0);
 var $314$1=HEAP32[(($ld$84$1)>>2)];
 $56=$313;
 var $st$85$0=(($57)|0);
 HEAP32[(($st$85$0)>>2)]=$314$0;
 var $st$86$1=(($57+4)|0);
 HEAP32[(($st$86$1)>>2)]=$314$1;
 var $315=$56;
 var $316=(($315)|0);
 var $317=$316;
 HEAP32[(($317)>>2)]=0; HEAP32[((($317)+(4))>>2)]=0;
 var $318=(($315+8)|0);
 var $ld$87$0=(($57)|0);
 var $319$0=HEAP32[(($ld$87$0)>>2)];
 var $ld$88$1=(($57+4)|0);
 var $319$1=HEAP32[(($ld$88$1)>>2)];
 var $st$89$0=(($318)|0);
 HEAP32[(($st$89$0)>>2)]=$319$0;
 var $st$90$1=(($318+4)|0);
 HEAP32[(($st$90$1)>>2)]=$319$1;
 label=38;break;
 case 32: 
 label=33;break;
 case 33: 
 var $322=$81;
 var $323=$322&8;
 var $324=($323|0)!=0;
 if($324){label=34;break;}else{label=35;break;}
 case 34: 
 var $326=$82;
 var $327=$82;
 $60=$327;
 var $328=$60;
 var $329=(($328+8)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$82;
 $61=$331;
 var $332=$61;
 var $333=(($332+8)|0);
 var $334=HEAP32[(($333)>>2)];
 var $ld$91$0=(($__noff)|0);
 var $335$0=HEAP32[(($ld$91$0)>>2)];
 var $ld$92$1=(($__noff+4)|0);
 var $335$1=HEAP32[(($ld$92$1)>>2)];
 var $336$0=$335$0;
 var $336=$336$0;
 var $337=(($334+$336)|0);
 var $338=(($82+44)|0);
 var $339=HEAP32[(($338)>>2)];
 $62=$326;
 $63=$330;
 $64=$337;
 $65=$339;
 var $340=$62;
 var $341=$63;
 var $342=(($340+8)|0);
 HEAP32[(($342)>>2)]=$341;
 var $343=$64;
 var $344=(($340+12)|0);
 HEAP32[(($344)>>2)]=$343;
 var $345=$65;
 var $346=(($340+16)|0);
 HEAP32[(($346)>>2)]=$345;
 label=35;break;
 case 35: 
 var $348=$81;
 var $349=$348&16;
 var $350=($349|0)!=0;
 if($350){label=36;break;}else{label=37;break;}
 case 36: 
 var $352=$82;
 var $353=$82;
 $66=$353;
 var $354=$66;
 var $355=(($354+20)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=$82;
 $67=$357;
 var $358=$67;
 var $359=(($358+28)|0);
 var $360=HEAP32[(($359)>>2)];
 $68=$352;
 $69=$356;
 $70=$360;
 var $361=$68;
 var $362=$69;
 var $363=(($361+24)|0);
 HEAP32[(($363)>>2)]=$362;
 var $364=(($361+20)|0);
 HEAP32[(($364)>>2)]=$362;
 var $365=$70;
 var $366=(($361+28)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$82;
 var $ld$93$0=(($__noff)|0);
 var $368$0=HEAP32[(($ld$93$0)>>2)];
 var $ld$94$1=(($__noff+4)|0);
 var $368$1=HEAP32[(($ld$94$1)>>2)];
 var $369$0=$368$0;
 var $369=$369$0;
 $71=$367;
 $72=$369;
 var $370=$71;
 var $371=$72;
 var $372=(($370+24)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+$371)|0);
 HEAP32[(($372)>>2)]=$374;
 label=37;break;
 case 37: 
 var $ld$95$0=(($__noff)|0);
 var $376$0=HEAP32[(($ld$95$0)>>2)];
 var $ld$96$1=(($__noff+4)|0);
 var $376$1=HEAP32[(($ld$96$1)>>2)];
 $75=$agg_result;
 var $st$97$0=(($76)|0);
 HEAP32[(($st$97$0)>>2)]=$376$0;
 var $st$98$1=(($76+4)|0);
 HEAP32[(($st$98$1)>>2)]=$376$1;
 var $377=$75;
 var $ld$99$0=(($76)|0);
 var $378$0=HEAP32[(($ld$99$0)>>2)];
 var $ld$100$1=(($76+4)|0);
 var $378$1=HEAP32[(($ld$100$1)>>2)];
 $73=$377;
 var $st$101$0=(($74)|0);
 HEAP32[(($st$101$0)>>2)]=$378$0;
 var $st$102$1=(($74+4)|0);
 HEAP32[(($st$102$1)>>2)]=$378$1;
 var $379=$73;
 var $380=(($379)|0);
 var $381=$380;
 HEAP32[(($381)>>2)]=0; HEAP32[((($381)+(4))>>2)]=0;
 var $382=(($379+8)|0);
 var $ld$103$0=(($74)|0);
 var $383$0=HEAP32[(($ld$103$0)>>2)];
 var $ld$104$1=(($74+4)|0);
 var $383$1=HEAP32[(($ld$104$1)>>2)];
 var $st$105$0=(($382)|0);
 HEAP32[(($st$105$0)>>2)]=$383$0;
 var $st$106$1=(($382+4)|0);
 HEAP32[(($st$106$1)>>2)]=$383$1;
 label=38;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$__sp,$__wch){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__sp; $__sp=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__sp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($__sp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($__sp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($__sp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$__wch;
 var $4=$2;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+16)|0);
 var $8=HEAP32[(($7)>>2)];
 $1=$__sp;
 var $9=$1;
 var $10=(($9+8)|0);
 var $ld$0$0=(($10)|0);
 var $11$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $11$1=HEAP32[(($ld$1$1)>>2)];
 var $12=$3;
 FUNCTION_TABLE[$8]($agg_result,$4,$11$0,$11$1,0,$12);
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 $15=$this;
 var $16=$15;
 var $17=(($16+44)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 $13=$19;
 var $20=$13;
 var $21=(($20+24)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($18>>>0)<($22>>>0);
 if($23){label=2;break;}else{label=3;break;}
 case 2: 
 var $25=$16;
 $1=$25;
 var $26=$1;
 var $27=(($26+24)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($16+44)|0);
 HEAP32[(($29)>>2)]=$28;
 label=3;break;
 case 3: 
 var $31=(($16+48)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32&8;
 var $34=($33|0)!=0;
 if($34){label=4;break;}else{label=9;break;}
 case 4: 
 var $36=$16;
 $2=$36;
 var $37=$2;
 var $38=(($37+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($16+44)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39>>>0)<($41>>>0);
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 var $44=$16;
 var $45=$16;
 $3=$45;
 var $46=$3;
 var $47=(($46+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$16;
 $4=$49;
 var $50=$4;
 var $51=(($50+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($16+44)|0);
 var $54=HEAP32[(($53)>>2)];
 $5=$44;
 $6=$48;
 $7=$52;
 $8=$54;
 var $55=$5;
 var $56=$6;
 var $57=(($55+8)|0);
 HEAP32[(($57)>>2)]=$56;
 var $58=$7;
 var $59=(($55+12)|0);
 HEAP32[(($59)>>2)]=$58;
 var $60=$8;
 var $61=(($55+16)|0);
 HEAP32[(($61)>>2)]=$60;
 label=6;break;
 case 6: 
 var $63=$16;
 $9=$63;
 var $64=$9;
 var $65=(($64+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$16;
 $10=$67;
 var $68=$10;
 var $69=(($68+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($66>>>0)<($70>>>0);
 if($71){label=7;break;}else{label=8;break;}
 case 7: 
 var $73=$16;
 $11=$73;
 var $74=$11;
 var $75=(($74+12)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=HEAP8[($76)];
 $12=$77;
 var $78=$12;
 var $79=($78&255);
 $14=$79;
 label=10;break;
 case 8: 
 label=9;break;
 case 9: 
 $14=-1;
 label=10;break;
 case 10: 
 var $83=$14;
 STACKTOP=sp;return $83;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $29=$this;
 $30=$__c;
 var $31=$29;
 var $32=(($31+44)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$31;
 $27=$34;
 var $35=$27;
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($33>>>0)<($37>>>0);
 if($38){label=2;break;}else{label=3;break;}
 case 2: 
 var $40=$31;
 $1=$40;
 var $41=$1;
 var $42=(($41+24)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($31+44)|0);
 HEAP32[(($44)>>2)]=$43;
 label=3;break;
 case 3: 
 var $46=$31;
 $2=$46;
 var $47=$2;
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$31;
 $3=$50;
 var $51=$3;
 var $52=(($51+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($49>>>0)<($53>>>0);
 if($54){label=4;break;}else{label=13;break;}
 case 4: 
 var $56=$30;
 $4=$56;
 $5=-1;
 var $57=$4;
 var $58=$5;
 var $59=($57|0)==($58|0);
 if($59){label=5;break;}else{label=9;break;}
 case 5: 
 var $61=$31;
 var $62=$31;
 $6=$62;
 var $63=$6;
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$31;
 $7=$66;
 var $67=$7;
 var $68=(($67+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=((($69)-(1))|0);
 var $71=(($31+44)|0);
 var $72=HEAP32[(($71)>>2)];
 $8=$61;
 $9=$65;
 $10=$70;
 $11=$72;
 var $73=$8;
 var $74=$9;
 var $75=(($73+8)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=$10;
 var $77=(($73+12)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=$11;
 var $79=(($73+16)|0);
 HEAP32[(($79)>>2)]=$78;
 var $80=$30;
 $14=$80;
 var $81=$14;
 $12=$81;
 $13=-1;
 var $82=$12;
 var $83=$13;
 var $84=($82|0)==($83|0);
 if($84){label=6;break;}else{label=7;break;}
 case 6: 
 var $88=0;label=8;break;
 case 7: 
 var $87=$14;
 var $88=$87;label=8;break;
 case 8: 
 var $88;
 $28=$88;
 label=14;break;
 case 9: 
 var $90=(($31+48)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$91&16;
 var $93=($92|0)!=0;
 if($93){label=11;break;}else{label=10;break;}
 case 10: 
 var $95=$30;
 $15=$95;
 var $96=$15;
 var $97=(($96)&255);
 var $98=$31;
 $16=$98;
 var $99=$16;
 var $100=(($99+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=((($101)-(1))|0);
 var $103=HEAP8[($102)];
 $17=$97;
 $18=$103;
 var $104=$17;
 var $105=(($104<<24)>>24);
 var $106=$18;
 var $107=(($106<<24)>>24);
 var $108=($105|0)==($107|0);
 if($108){label=11;break;}else{label=12;break;}
 case 11: 
 var $110=$31;
 var $111=$31;
 $19=$111;
 var $112=$19;
 var $113=(($112+8)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$31;
 $20=$115;
 var $116=$20;
 var $117=(($116+12)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=((($118)-(1))|0);
 var $120=(($31+44)|0);
 var $121=HEAP32[(($120)>>2)];
 $21=$110;
 $22=$114;
 $23=$119;
 $24=$121;
 var $122=$21;
 var $123=$22;
 var $124=(($122+8)|0);
 HEAP32[(($124)>>2)]=$123;
 var $125=$23;
 var $126=(($122+12)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=$24;
 var $128=(($122+16)|0);
 HEAP32[(($128)>>2)]=$127;
 var $129=$30;
 $25=$129;
 var $130=$25;
 var $131=(($130)&255);
 var $132=$31;
 $26=$132;
 var $133=$26;
 var $134=(($133+12)|0);
 var $135=HEAP32[(($134)>>2)];
 HEAP8[($135)]=$131;
 var $136=$30;
 $28=$136;
 label=14;break;
 case 12: 
 label=13;break;
 case 13: 
 $28=-1;
 label=14;break;
 case 14: 
 var $140=$28;
 STACKTOP=sp;return $140;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53=sp;
 var $54;
 var $55;
 var $56=(sp)+(8);
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $__ninp;
 var $__nout;
 var $88;
 var $89;
 var $__hm;
 var $__p;
 var $90;
 var $91=(sp)+(16);
 var $__p1;
 $86=$this;
 $87=$__c;
 var $92=$86;
 var $93=$87;
 $75=$93;
 $76=-1;
 var $94=$75;
 var $95=$76;
 var $96=($94|0)==($95|0);
 if($96){label=39;break;}else{label=2;break;}
 case 2: 
 var $98=$92;
 $14=$98;
 var $99=$14;
 var $100=(($99+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=$92;
 $6=$102;
 var $103=$6;
 var $104=(($103+8)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$101;
 var $107=$105;
 var $108=((($106)-($107))|0);
 $__ninp=$108;
 var $109=$92;
 $1=$109;
 var $110=$1;
 var $111=(($110+24)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$92;
 $2=$113;
 var $114=$2;
 var $115=(($114+28)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($112|0)==($116|0);
 if($117){label=3;break;}else{label=27;break;}
 case 3: 
 var $119=(($92+48)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$120&16;
 var $122=($121|0)!=0;
 if($122){label=5;break;}else{label=4;break;}
 case 4: 
 $85=-1;
 label=43;break;
 case 5: 
 var $125=$92;
 $3=$125;
 var $126=$3;
 var $127=(($126+24)|0);
 var $128=HEAP32[(($127)>>2)];
 label=6;break;
 case 6: 
 var $130=$92;
 $4=$130;
 var $131=$4;
 var $132=(($131+20)|0);
 var $133=HEAP32[(($132)>>2)];
 label=7;break;
 case 7: 
 var $135=$128;
 var $136=$133;
 var $137=((($135)-($136))|0);
 $__nout=$137;
 var $138=(($92+44)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$92;
 $5=$140;
 var $141=$5;
 var $142=(($141+20)|0);
 var $143=HEAP32[(($142)>>2)];
 label=8;break;
 case 8: 
 var $145=$139;
 var $146=$143;
 var $147=((($145)-($146))|0);
 $__hm=$147;
 var $148=(($92+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($148,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=24;break; }
 case 9: 
 var $150=(($92+32)|0);
 var $151=(($92+32)|0);
 $13=$151;
 var $152=$13;
 $12=$152;
 var $153=$12;
 var $154=(($153)|0);
 $11=$154;
 var $155=$11;
 var $156=$155;
 $10=$156;
 var $157=$10;
 var $158=(($157)|0);
 var $159=(($158)|0);
 var $160=$159;
 var $161=(($160)|0);
 var $162=$161;
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=$164&1;
 var $166=($165|0)!=0;
 if($166){label=10;break;}else{label=11;break;}
 case 10: 
 $9=$152;
 var $168=$9;
 var $169=(($168)|0);
 $8=$169;
 var $170=$8;
 var $171=$170;
 $7=$171;
 var $172=$7;
 var $173=(($172)|0);
 var $174=(($173)|0);
 var $175=$174;
 var $176=(($175)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=$177&-2;
 var $180=$178;label=12;break;
 case 11: 
 var $180=11;label=12;break;
 case 12: 
 var $180;
 var $181=((($180)-(1))|0);
 $15=$150;
 $16=$181;
 var $182=$15;
 var $183=$16;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($182,$183,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=24;break; }
 case 13: 
 label=14;break;
 case 14: 
 var $185=(($92+32)|0);
 $30=$185;
 var $186=$30;
 $29=$186;
 var $187=$29;
 $28=$187;
 var $188=$28;
 var $189=(($188)|0);
 $27=$189;
 var $190=$27;
 var $191=$190;
 $26=$191;
 var $192=$26;
 var $193=(($192)|0);
 var $194=(($193)|0);
 var $195=$194;
 var $196=(($195)|0);
 var $197=$196;
 var $198=HEAP8[($197)];
 var $199=($198&255);
 var $200=$199&1;
 var $201=($200|0)!=0;
 if($201){label=15;break;}else{label=16;break;}
 case 15: 
 $20=$187;
 var $203=$20;
 var $204=(($203)|0);
 $19=$204;
 var $205=$19;
 var $206=$205;
 $18=$206;
 var $207=$18;
 var $208=(($207)|0);
 var $209=(($208)|0);
 var $210=$209;
 var $211=(($210+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $226=$212;label=17;break;
 case 16: 
 $25=$187;
 var $214=$25;
 var $215=(($214)|0);
 $24=$215;
 var $216=$24;
 var $217=$216;
 $23=$217;
 var $218=$23;
 var $219=(($218)|0);
 var $220=(($219)|0);
 var $221=$220;
 var $222=(($221+1)|0);
 var $223=(($222)|0);
 $22=$223;
 var $224=$22;
 $21=$224;
 var $225=$21;
 var $226=$225;label=17;break;
 case 17: 
 var $226;
 $17=$226;
 var $227=$17;
 $__p=$227;
 var $228=$92;
 var $229=$__p;
 var $230=$__p;
 var $231=(($92+32)|0);
 $40=$231;
 var $232=$40;
 $39=$232;
 var $233=$39;
 var $234=(($233)|0);
 $38=$234;
 var $235=$38;
 var $236=$235;
 $37=$236;
 var $237=$37;
 var $238=(($237)|0);
 var $239=(($238)|0);
 var $240=$239;
 var $241=(($240)|0);
 var $242=$241;
 var $243=HEAP8[($242)];
 var $244=($243&255);
 var $245=$244&1;
 var $246=($245|0)!=0;
 if($246){label=18;break;}else{label=19;break;}
 case 18: 
 $33=$232;
 var $248=$33;
 var $249=(($248)|0);
 $32=$249;
 var $250=$32;
 var $251=$250;
 $31=$251;
 var $252=$31;
 var $253=(($252)|0);
 var $254=(($253)|0);
 var $255=$254;
 var $256=(($255+4)|0);
 var $257=HEAP32[(($256)>>2)];
 var $272=$257;label=20;break;
 case 19: 
 $36=$232;
 var $259=$36;
 var $260=(($259)|0);
 $35=$260;
 var $261=$35;
 var $262=$261;
 $34=$262;
 var $263=$34;
 var $264=(($263)|0);
 var $265=(($264)|0);
 var $266=$265;
 var $267=(($266)|0);
 var $268=$267;
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=$270>>1;
 var $272=$271;label=20;break;
 case 20: 
 var $272;
 var $273=(($230+$272)|0);
 $41=$228;
 $42=$229;
 $43=$273;
 var $274=$41;
 var $275=$42;
 var $276=(($274+24)|0);
 HEAP32[(($276)>>2)]=$275;
 var $277=(($274+20)|0);
 HEAP32[(($277)>>2)]=$275;
 var $278=$43;
 var $279=(($274+28)|0);
 HEAP32[(($279)>>2)]=$278;
 label=21;break;
 case 21: 
 var $281=$92;
 var $282=$__nout;
 $44=$281;
 $45=$282;
 var $283=$44;
 var $284=$45;
 var $285=(($283+24)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+$284)|0);
 HEAP32[(($285)>>2)]=$287;
 label=22;break;
 case 22: 
 var $289=$92;
 $46=$289;
 var $290=$46;
 var $291=(($290+20)|0);
 var $292=HEAP32[(($291)>>2)];
 label=23;break;
 case 23: 
 var $294=$__hm;
 var $295=(($292+$294)|0);
 var $296=(($92+44)|0);
 HEAP32[(($296)>>2)]=$295;
 label=26;break;
 case 24: 
 var $298$0 = ___cxa_find_matching_catch(-1, -1,0); var $298$1 = tempRet0;
 var $299=$298$0;
 $88=$299;
 var $300=$298$1;
 $89=$300;
 label=25;break;
 case 25: 
 var $302=$88;
 var $303=___cxa_begin_catch($302);
 $85=-1;
 $90=1;
 ___cxa_end_catch();
 label=43;break;
 case 26: 
 label=27;break;
 case 27: 
 var $306=$92;
 $47=$306;
 var $307=$47;
 var $308=(($307+24)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309+1)|0);
 HEAP32[(($91)>>2)]=$310;
 var $311=(($92+44)|0);
 $54=$91;
 $55=$311;
 var $312=$54;
 var $313=$55;
 var $tmp_i=$53;
 var $tmp1_i=$56;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $51=$312;
 $52=$313;
 var $314=$51;
 var $315=$52;
 $48=$53;
 $49=$314;
 $50=$315;
 var $316=$48;
 var $317=$49;
 var $318=HEAP32[(($317)>>2)];
 var $319=$50;
 var $320=HEAP32[(($319)>>2)];
 var $321=($318>>>0)<($320>>>0);
 if($321){label=28;break;}else{label=29;break;}
 case 28: 
 var $323=$52;
 var $326=$323;label=30;break;
 case 29: 
 var $325=$51;
 var $326=$325;label=30;break;
 case 30: 
 var $326;
 var $327=HEAP32[(($326)>>2)];
 var $328=(($92+44)|0);
 HEAP32[(($328)>>2)]=$327;
 var $329=(($92+48)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330&8;
 var $332=($331|0)!=0;
 if($332){label=31;break;}else{label=35;break;}
 case 31: 
 var $334=(($92+32)|0);
 $70=$334;
 var $335=$70;
 $69=$335;
 var $336=$69;
 $68=$336;
 var $337=$68;
 var $338=(($337)|0);
 $67=$338;
 var $339=$67;
 var $340=$339;
 $66=$340;
 var $341=$66;
 var $342=(($341)|0);
 var $343=(($342)|0);
 var $344=$343;
 var $345=(($344)|0);
 var $346=$345;
 var $347=HEAP8[($346)];
 var $348=($347&255);
 var $349=$348&1;
 var $350=($349|0)!=0;
 if($350){label=32;break;}else{label=33;break;}
 case 32: 
 $60=$336;
 var $352=$60;
 var $353=(($352)|0);
 $59=$353;
 var $354=$59;
 var $355=$354;
 $58=$355;
 var $356=$58;
 var $357=(($356)|0);
 var $358=(($357)|0);
 var $359=$358;
 var $360=(($359+8)|0);
 var $361=HEAP32[(($360)>>2)];
 var $375=$361;label=34;break;
 case 33: 
 $65=$336;
 var $363=$65;
 var $364=(($363)|0);
 $64=$364;
 var $365=$64;
 var $366=$365;
 $63=$366;
 var $367=$63;
 var $368=(($367)|0);
 var $369=(($368)|0);
 var $370=$369;
 var $371=(($370+1)|0);
 var $372=(($371)|0);
 $62=$372;
 var $373=$62;
 $61=$373;
 var $374=$61;
 var $375=$374;label=34;break;
 case 34: 
 var $375;
 $57=$375;
 var $376=$57;
 $__p1=$376;
 var $377=$92;
 var $378=$__p1;
 var $379=$__p1;
 var $380=$__ninp;
 var $381=(($379+$380)|0);
 var $382=(($92+44)|0);
 var $383=HEAP32[(($382)>>2)];
 $71=$377;
 $72=$378;
 $73=$381;
 $74=$383;
 var $384=$71;
 var $385=$72;
 var $386=(($384+8)|0);
 HEAP32[(($386)>>2)]=$385;
 var $387=$73;
 var $388=(($384+12)|0);
 HEAP32[(($388)>>2)]=$387;
 var $389=$74;
 var $390=(($384+16)|0);
 HEAP32[(($390)>>2)]=$389;
 label=35;break;
 case 35: 
 var $392=$92;
 var $393=$87;
 var $394=(($393)&255);
 $80=$392;
 $81=$394;
 var $395=$80;
 var $396=(($395+24)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(($395+28)|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=($397|0)==($399|0);
 if($400){label=36;break;}else{label=37;break;}
 case 36: 
 var $402=$395;
 var $403=HEAP32[(($402)>>2)];
 var $404=(($403+52)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=$81;
 $78=$406;
 var $407=$78;
 var $408=($407&255);
 var $409=FUNCTION_TABLE[$405]($395,$408);
 $79=$409;
 label=38;break;
 case 37: 
 var $411=$81;
 var $412=(($395+24)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(($413+1)|0);
 HEAP32[(($412)>>2)]=$414;
 HEAP8[($413)]=$411;
 var $415=$81;
 $77=$415;
 var $416=$77;
 var $417=($416&255);
 $79=$417;
 label=38;break;
 case 38: 
 var $418=$79;
 $85=$418;
 label=43;break;
 case 39: 
 var $420=$87;
 $84=$420;
 var $421=$84;
 $82=$421;
 $83=-1;
 var $422=$82;
 var $423=$83;
 var $424=($422|0)==($423|0);
 if($424){label=40;break;}else{label=41;break;}
 case 40: 
 var $428=0;label=42;break;
 case 41: 
 var $427=$84;
 var $428=$427;label=42;break;
 case 42: 
 var $428;
 $85=$428;
 label=43;break;
 case 43: 
 var $430=$85;
 STACKTOP=sp;return $430;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $__sz;
 $133=$this;
 $134=$__s;
 var $135=$133;
 var $136=(($135+32)|0);
 var $137=$134;
 var $138=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($136,$137);
 var $139=(($135+44)|0);
 HEAP32[(($139)>>2)]=0;
 var $140=(($135+48)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$141&8;
 var $143=($142|0)!=0;
 if($143){label=2;break;}else{label=15;break;}
 case 2: 
 var $145=(($135+32)|0);
 $132=$145;
 var $146=$132;
 $131=$146;
 var $147=$131;
 $130=$147;
 var $148=$130;
 var $149=(($148)|0);
 $129=$149;
 var $150=$129;
 var $151=$150;
 $128=$151;
 var $152=$128;
 var $153=(($152)|0);
 var $154=(($153)|0);
 var $155=$154;
 var $156=(($155)|0);
 var $157=$156;
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=$159&1;
 var $161=($160|0)!=0;
 if($161){label=3;break;}else{label=4;break;}
 case 3: 
 $122=$147;
 var $163=$122;
 var $164=(($163)|0);
 $121=$164;
 var $165=$121;
 var $166=$165;
 $120=$166;
 var $167=$120;
 var $168=(($167)|0);
 var $169=(($168)|0);
 var $170=$169;
 var $171=(($170+8)|0);
 var $172=HEAP32[(($171)>>2)];
 var $186=$172;label=5;break;
 case 4: 
 $127=$147;
 var $174=$127;
 var $175=(($174)|0);
 $126=$175;
 var $176=$126;
 var $177=$176;
 $125=$177;
 var $178=$125;
 var $179=(($178)|0);
 var $180=(($179)|0);
 var $181=$180;
 var $182=(($181+1)|0);
 var $183=(($182)|0);
 $124=$183;
 var $184=$124;
 $123=$184;
 var $185=$123;
 var $186=$185;label=5;break;
 case 5: 
 var $186;
 $119=$186;
 var $187=$119;
 var $188=(($135+32)|0);
 $73=$188;
 var $189=$73;
 $72=$189;
 var $190=$72;
 var $191=(($190)|0);
 $71=$191;
 var $192=$71;
 var $193=$192;
 $70=$193;
 var $194=$70;
 var $195=(($194)|0);
 var $196=(($195)|0);
 var $197=$196;
 var $198=(($197)|0);
 var $199=$198;
 var $200=HEAP8[($199)];
 var $201=($200&255);
 var $202=$201&1;
 var $203=($202|0)!=0;
 if($203){label=6;break;}else{label=7;break;}
 case 6: 
 $66=$189;
 var $205=$66;
 var $206=(($205)|0);
 $65=$206;
 var $207=$65;
 var $208=$207;
 $64=$208;
 var $209=$64;
 var $210=(($209)|0);
 var $211=(($210)|0);
 var $212=$211;
 var $213=(($212+4)|0);
 var $214=HEAP32[(($213)>>2)];
 var $229=$214;label=8;break;
 case 7: 
 $69=$189;
 var $216=$69;
 var $217=(($216)|0);
 $68=$217;
 var $218=$68;
 var $219=$218;
 $67=$219;
 var $220=$67;
 var $221=(($220)|0);
 var $222=(($221)|0);
 var $223=$222;
 var $224=(($223)|0);
 var $225=$224;
 var $226=HEAP8[($225)];
 var $227=($226&255);
 var $228=$227>>1;
 var $229=$228;label=8;break;
 case 8: 
 var $229;
 var $230=(($187+$229)|0);
 var $231=(($135+44)|0);
 HEAP32[(($231)>>2)]=$230;
 var $232=$135;
 var $233=(($135+32)|0);
 $14=$233;
 var $234=$14;
 $13=$234;
 var $235=$13;
 $12=$235;
 var $236=$12;
 var $237=(($236)|0);
 $11=$237;
 var $238=$11;
 var $239=$238;
 $10=$239;
 var $240=$10;
 var $241=(($240)|0);
 var $242=(($241)|0);
 var $243=$242;
 var $244=(($243)|0);
 var $245=$244;
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$247&1;
 var $249=($248|0)!=0;
 if($249){label=9;break;}else{label=10;break;}
 case 9: 
 $4=$235;
 var $251=$4;
 var $252=(($251)|0);
 $3=$252;
 var $253=$3;
 var $254=$253;
 $2=$254;
 var $255=$2;
 var $256=(($255)|0);
 var $257=(($256)|0);
 var $258=$257;
 var $259=(($258+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $274=$260;label=11;break;
 case 10: 
 $9=$235;
 var $262=$9;
 var $263=(($262)|0);
 $8=$263;
 var $264=$8;
 var $265=$264;
 $7=$265;
 var $266=$7;
 var $267=(($266)|0);
 var $268=(($267)|0);
 var $269=$268;
 var $270=(($269+1)|0);
 var $271=(($270)|0);
 $6=$271;
 var $272=$6;
 $5=$272;
 var $273=$5;
 var $274=$273;label=11;break;
 case 11: 
 var $274;
 $1=$274;
 var $275=$1;
 var $276=(($135+32)|0);
 $28=$276;
 var $277=$28;
 $27=$277;
 var $278=$27;
 $26=$278;
 var $279=$26;
 var $280=(($279)|0);
 $25=$280;
 var $281=$25;
 var $282=$281;
 $24=$282;
 var $283=$24;
 var $284=(($283)|0);
 var $285=(($284)|0);
 var $286=$285;
 var $287=(($286)|0);
 var $288=$287;
 var $289=HEAP8[($288)];
 var $290=($289&255);
 var $291=$290&1;
 var $292=($291|0)!=0;
 if($292){label=12;break;}else{label=13;break;}
 case 12: 
 $18=$278;
 var $294=$18;
 var $295=(($294)|0);
 $17=$295;
 var $296=$17;
 var $297=$296;
 $16=$297;
 var $298=$16;
 var $299=(($298)|0);
 var $300=(($299)|0);
 var $301=$300;
 var $302=(($301+8)|0);
 var $303=HEAP32[(($302)>>2)];
 var $317=$303;label=14;break;
 case 13: 
 $23=$278;
 var $305=$23;
 var $306=(($305)|0);
 $22=$306;
 var $307=$22;
 var $308=$307;
 $21=$308;
 var $309=$21;
 var $310=(($309)|0);
 var $311=(($310)|0);
 var $312=$311;
 var $313=(($312+1)|0);
 var $314=(($313)|0);
 $20=$314;
 var $315=$20;
 $19=$315;
 var $316=$19;
 var $317=$316;label=14;break;
 case 14: 
 var $317;
 $15=$317;
 var $318=$15;
 var $319=(($135+44)|0);
 var $320=HEAP32[(($319)>>2)];
 $29=$232;
 $30=$275;
 $31=$318;
 $32=$320;
 var $321=$29;
 var $322=$30;
 var $323=(($321+8)|0);
 HEAP32[(($323)>>2)]=$322;
 var $324=$31;
 var $325=(($321+12)|0);
 HEAP32[(($325)>>2)]=$324;
 var $326=$32;
 var $327=(($321+16)|0);
 HEAP32[(($327)>>2)]=$326;
 label=15;break;
 case 15: 
 var $329=(($135+48)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330&16;
 var $332=($331|0)!=0;
 if($332){label=16;break;}else{label=37;break;}
 case 16: 
 var $334=(($135+32)|0);
 $42=$334;
 var $335=$42;
 $41=$335;
 var $336=$41;
 var $337=(($336)|0);
 $40=$337;
 var $338=$40;
 var $339=$338;
 $39=$339;
 var $340=$39;
 var $341=(($340)|0);
 var $342=(($341)|0);
 var $343=$342;
 var $344=(($343)|0);
 var $345=$344;
 var $346=HEAP8[($345)];
 var $347=($346&255);
 var $348=$347&1;
 var $349=($348|0)!=0;
 if($349){label=17;break;}else{label=18;break;}
 case 17: 
 $35=$335;
 var $351=$35;
 var $352=(($351)|0);
 $34=$352;
 var $353=$34;
 var $354=$353;
 $33=$354;
 var $355=$33;
 var $356=(($355)|0);
 var $357=(($356)|0);
 var $358=$357;
 var $359=(($358+4)|0);
 var $360=HEAP32[(($359)>>2)];
 var $375=$360;label=19;break;
 case 18: 
 $38=$335;
 var $362=$38;
 var $363=(($362)|0);
 $37=$363;
 var $364=$37;
 var $365=$364;
 $36=$365;
 var $366=$36;
 var $367=(($366)|0);
 var $368=(($367)|0);
 var $369=$368;
 var $370=(($369)|0);
 var $371=$370;
 var $372=HEAP8[($371)];
 var $373=($372&255);
 var $374=$373>>1;
 var $375=$374;label=19;break;
 case 19: 
 var $375;
 $__sz=$375;
 var $376=(($135+32)|0);
 $56=$376;
 var $377=$56;
 $55=$377;
 var $378=$55;
 $54=$378;
 var $379=$54;
 var $380=(($379)|0);
 $53=$380;
 var $381=$53;
 var $382=$381;
 $52=$382;
 var $383=$52;
 var $384=(($383)|0);
 var $385=(($384)|0);
 var $386=$385;
 var $387=(($386)|0);
 var $388=$387;
 var $389=HEAP8[($388)];
 var $390=($389&255);
 var $391=$390&1;
 var $392=($391|0)!=0;
 if($392){label=20;break;}else{label=21;break;}
 case 20: 
 $46=$378;
 var $394=$46;
 var $395=(($394)|0);
 $45=$395;
 var $396=$45;
 var $397=$396;
 $44=$397;
 var $398=$44;
 var $399=(($398)|0);
 var $400=(($399)|0);
 var $401=$400;
 var $402=(($401+8)|0);
 var $403=HEAP32[(($402)>>2)];
 var $417=$403;label=22;break;
 case 21: 
 $51=$378;
 var $405=$51;
 var $406=(($405)|0);
 $50=$406;
 var $407=$50;
 var $408=$407;
 $49=$408;
 var $409=$49;
 var $410=(($409)|0);
 var $411=(($410)|0);
 var $412=$411;
 var $413=(($412+1)|0);
 var $414=(($413)|0);
 $48=$414;
 var $415=$48;
 $47=$415;
 var $416=$47;
 var $417=$416;label=22;break;
 case 22: 
 var $417;
 $43=$417;
 var $418=$43;
 var $419=$__sz;
 var $420=(($418+$419)|0);
 var $421=(($135+44)|0);
 HEAP32[(($421)>>2)]=$420;
 var $422=(($135+32)|0);
 var $423=(($135+32)|0);
 $63=$423;
 var $424=$63;
 $62=$424;
 var $425=$62;
 var $426=(($425)|0);
 $61=$426;
 var $427=$61;
 var $428=$427;
 $60=$428;
 var $429=$60;
 var $430=(($429)|0);
 var $431=(($430)|0);
 var $432=$431;
 var $433=(($432)|0);
 var $434=$433;
 var $435=HEAP8[($434)];
 var $436=($435&255);
 var $437=$436&1;
 var $438=($437|0)!=0;
 if($438){label=23;break;}else{label=24;break;}
 case 23: 
 $59=$424;
 var $440=$59;
 var $441=(($440)|0);
 $58=$441;
 var $442=$58;
 var $443=$442;
 $57=$443;
 var $444=$57;
 var $445=(($444)|0);
 var $446=(($445)|0);
 var $447=$446;
 var $448=(($447)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=$449&-2;
 var $452=$450;label=25;break;
 case 24: 
 var $452=11;label=25;break;
 case 25: 
 var $452;
 var $453=((($452)-(1))|0);
 $74=$422;
 $75=$453;
 var $454=$74;
 var $455=$75;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($454,$455,0);
 var $456=$135;
 var $457=(($135+32)|0);
 $89=$457;
 var $458=$89;
 $88=$458;
 var $459=$88;
 $87=$459;
 var $460=$87;
 var $461=(($460)|0);
 $86=$461;
 var $462=$86;
 var $463=$462;
 $85=$463;
 var $464=$85;
 var $465=(($464)|0);
 var $466=(($465)|0);
 var $467=$466;
 var $468=(($467)|0);
 var $469=$468;
 var $470=HEAP8[($469)];
 var $471=($470&255);
 var $472=$471&1;
 var $473=($472|0)!=0;
 if($473){label=26;break;}else{label=27;break;}
 case 26: 
 $79=$459;
 var $475=$79;
 var $476=(($475)|0);
 $78=$476;
 var $477=$78;
 var $478=$477;
 $77=$478;
 var $479=$77;
 var $480=(($479)|0);
 var $481=(($480)|0);
 var $482=$481;
 var $483=(($482+8)|0);
 var $484=HEAP32[(($483)>>2)];
 var $498=$484;label=28;break;
 case 27: 
 $84=$459;
 var $486=$84;
 var $487=(($486)|0);
 $83=$487;
 var $488=$83;
 var $489=$488;
 $82=$489;
 var $490=$82;
 var $491=(($490)|0);
 var $492=(($491)|0);
 var $493=$492;
 var $494=(($493+1)|0);
 var $495=(($494)|0);
 $81=$495;
 var $496=$81;
 $80=$496;
 var $497=$80;
 var $498=$497;label=28;break;
 case 28: 
 var $498;
 $76=$498;
 var $499=$76;
 var $500=(($135+32)|0);
 $103=$500;
 var $501=$103;
 $102=$501;
 var $502=$102;
 $101=$502;
 var $503=$101;
 var $504=(($503)|0);
 $100=$504;
 var $505=$100;
 var $506=$505;
 $99=$506;
 var $507=$99;
 var $508=(($507)|0);
 var $509=(($508)|0);
 var $510=$509;
 var $511=(($510)|0);
 var $512=$511;
 var $513=HEAP8[($512)];
 var $514=($513&255);
 var $515=$514&1;
 var $516=($515|0)!=0;
 if($516){label=29;break;}else{label=30;break;}
 case 29: 
 $93=$502;
 var $518=$93;
 var $519=(($518)|0);
 $92=$519;
 var $520=$92;
 var $521=$520;
 $91=$521;
 var $522=$91;
 var $523=(($522)|0);
 var $524=(($523)|0);
 var $525=$524;
 var $526=(($525+8)|0);
 var $527=HEAP32[(($526)>>2)];
 var $541=$527;label=31;break;
 case 30: 
 $98=$502;
 var $529=$98;
 var $530=(($529)|0);
 $97=$530;
 var $531=$97;
 var $532=$531;
 $96=$532;
 var $533=$96;
 var $534=(($533)|0);
 var $535=(($534)|0);
 var $536=$535;
 var $537=(($536+1)|0);
 var $538=(($537)|0);
 $95=$538;
 var $539=$95;
 $94=$539;
 var $540=$94;
 var $541=$540;label=31;break;
 case 31: 
 var $541;
 $90=$541;
 var $542=$90;
 var $543=(($135+32)|0);
 $113=$543;
 var $544=$113;
 $112=$544;
 var $545=$112;
 var $546=(($545)|0);
 $111=$546;
 var $547=$111;
 var $548=$547;
 $110=$548;
 var $549=$110;
 var $550=(($549)|0);
 var $551=(($550)|0);
 var $552=$551;
 var $553=(($552)|0);
 var $554=$553;
 var $555=HEAP8[($554)];
 var $556=($555&255);
 var $557=$556&1;
 var $558=($557|0)!=0;
 if($558){label=32;break;}else{label=33;break;}
 case 32: 
 $106=$544;
 var $560=$106;
 var $561=(($560)|0);
 $105=$561;
 var $562=$105;
 var $563=$562;
 $104=$563;
 var $564=$104;
 var $565=(($564)|0);
 var $566=(($565)|0);
 var $567=$566;
 var $568=(($567+4)|0);
 var $569=HEAP32[(($568)>>2)];
 var $584=$569;label=34;break;
 case 33: 
 $109=$544;
 var $571=$109;
 var $572=(($571)|0);
 $108=$572;
 var $573=$108;
 var $574=$573;
 $107=$574;
 var $575=$107;
 var $576=(($575)|0);
 var $577=(($576)|0);
 var $578=$577;
 var $579=(($578)|0);
 var $580=$579;
 var $581=HEAP8[($580)];
 var $582=($581&255);
 var $583=$582>>1;
 var $584=$583;label=34;break;
 case 34: 
 var $584;
 var $585=(($542+$584)|0);
 $114=$456;
 $115=$499;
 $116=$585;
 var $586=$114;
 var $587=$115;
 var $588=(($586+24)|0);
 HEAP32[(($588)>>2)]=$587;
 var $589=(($586+20)|0);
 HEAP32[(($589)>>2)]=$587;
 var $590=$116;
 var $591=(($586+28)|0);
 HEAP32[(($591)>>2)]=$590;
 var $592=(($135+48)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=$593&3;
 var $595=($594|0)!=0;
 if($595){label=35;break;}else{label=36;break;}
 case 35: 
 var $597=$135;
 var $598=$__sz;
 $117=$597;
 $118=$598;
 var $599=$117;
 var $600=$118;
 var $601=(($599+24)|0);
 var $602=HEAP32[(($601)>>2)];
 var $603=(($602+$600)|0);
 HEAP32[(($601)>>2)]=$603;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_var_init(){
 var label=0;


 __ZN10ParametersC1Ev(17824);
 var $1=_atexit((346),17824,___dso_handle);
 return;
}


function __ZN10ParametersC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN10ParametersC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN10ParametersD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN10ParametersD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN6global3parEv(){
 var label=0;


 return 17824;
}


function __ZN10ParametersD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+80)|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($3);
 var $4=(($2+60)|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($4);
 var $5=(($2+40)|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($5);
 var $6=(($2+20)|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($6);
 var $7=(($2)|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev($7);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 6793
// WARNING: content after a branch in a label, line: 6795
// WARNING: content after a branch in a label, line: 6796
// WARNING: content after a branch in a label, line: 6797
// WARNING: content after a branch in a label, line: 7046
// WARNING: content after a branch in a label, line: 7048
// WARNING: content after a branch in a label, line: 7049
// WARNING: content after a branch in a label, line: 7050
// WARNING: content after a branch in a label, line: 7299
// WARNING: content after a branch in a label, line: 7301
// WARNING: content after a branch in a label, line: 7302
// WARNING: content after a branch in a label, line: 7303
// WARNING: content after a branch in a label, line: 7554
// WARNING: content after a branch in a label, line: 7556
// WARNING: content after a branch in a label, line: 7557
// WARNING: content after a branch in a label, line: 7558

function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__tmp_i_i_i;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 $26=$this;
 var $27=$26;
 var $28=(($27+8)|0);
 $25=$28;
 var $29=$25;
 var $30=$29;
 $24=$30;
 var $31=$24;
 var $32=(($31)|0);
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 var $35=(($27)|0);
 $23=$35;
 var $36=$23;
 $22=$36;
 var $37=$22;
 $21=$37;
 var $38=$21;
 var $39=(($38)|0);
 $20=$39;
 var $40=$20;
 var $41=$40;
 $19=$41;
 var $42=$19;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 $__tmp_i_i_i=$44;
 var $45=(($38)|0);
 $4=$45;
 var $46=$4;
 var $47=$46;
 $3=$47;
 var $48=$3;
 var $49=(($48)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$__tmp_i_i_i;
 var $51=($50|0)!=0;
 if($51){label=2;break;}else{label=3;break;}
 case 2: 
 var $53=(($38)|0);
 $2=$53;
 var $54=$2;
 var $55=$54;
 $1=$55;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=$__tmp_i_i_i;
 $17=$57;
 $18=$58;
 var $59=$17;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 var $63=$62;
 $14=$63;
 var $64=$14;
 var $65=$64;
 var $66=$18;
 $7=$59;
 var $67=$7;
 var $68=(($67)|0);
 $6=$68;
 var $69=$6;
 var $70=$69;
 $5=$70;
 var $71=$5;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 $11=$65;
 $12=$66;
 $13=$73;
 var $74=$11;
 var $75=$12;
 var $76=$13;
 $8=$74;
 $9=$75;
 $10=$76;
 var $77=$8;
 var $78=$9;
 var $79=$78;
 __ZdlPv($79);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__na;
 var $__next;
 $20=$this;
 $21=$__np;
 var $22=$20;
 $19=$22;
 var $23=$19;
 var $24=(($23+8)|0);
 $18=$24;
 var $25=$18;
 var $26=$25;
 $17=$26;
 var $27=$17;
 var $28=$27;
 $__na=$28;
 label=2;break;
 case 2: 
 var $30=$21;
 var $31=($30|0)!=0;
 if($31){label=3;break;}else{label=5;break;}
 case 3: 
 var $33=$21;
 var $34=$33;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 $__next=$36;
 var $37=$__na;
 var $38=$21;
 var $39=(($38+8)|0);
 $16=$39;
 var $40=$16;
 var $41=$40;
 var $42=$41;
 $6=$37;
 $7=$42;
 var $43=$9;
 var $44=$6;
 var $45=$7;
 var $tmp_i=$5;
 var $tmp1_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $3=$44;
 $4=$45;
 var $46=$4;
 $2=$46;
 var $47=$2;
 $1=$47;
 var $48=$1;
 var $49=$48;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($49);
 label=4;break;
 case 4: 
 var $51=$__na;
 var $52=$21;
 $13=$51;
 $14=$52;
 $15=1;
 var $53=$13;
 var $54=$14;
 var $55=$15;
 $10=$53;
 $11=$54;
 $12=$55;
 var $56=$10;
 var $57=$11;
 var $58=$57;
 __ZdlPv($58);
 var $59=$__next;
 $21=$59;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__tmp_i_i_i;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 $26=$this;
 var $27=$26;
 var $28=(($27+8)|0);
 $25=$28;
 var $29=$25;
 var $30=$29;
 $24=$30;
 var $31=$24;
 var $32=(($31)|0);
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 var $35=(($27)|0);
 $23=$35;
 var $36=$23;
 $22=$36;
 var $37=$22;
 $21=$37;
 var $38=$21;
 var $39=(($38)|0);
 $20=$39;
 var $40=$20;
 var $41=$40;
 $19=$41;
 var $42=$19;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 $__tmp_i_i_i=$44;
 var $45=(($38)|0);
 $4=$45;
 var $46=$4;
 var $47=$46;
 $3=$47;
 var $48=$3;
 var $49=(($48)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$__tmp_i_i_i;
 var $51=($50|0)!=0;
 if($51){label=2;break;}else{label=3;break;}
 case 2: 
 var $53=(($38)|0);
 $2=$53;
 var $54=$2;
 var $55=$54;
 $1=$55;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=$__tmp_i_i_i;
 $17=$57;
 $18=$58;
 var $59=$17;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 var $63=$62;
 $14=$63;
 var $64=$14;
 var $65=$64;
 var $66=$18;
 $7=$59;
 var $67=$7;
 var $68=(($67)|0);
 $6=$68;
 var $69=$6;
 var $70=$69;
 $5=$70;
 var $71=$5;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 $11=$65;
 $12=$66;
 $13=$73;
 var $74=$11;
 var $75=$12;
 var $76=$13;
 $8=$74;
 $9=$75;
 $10=$76;
 var $77=$8;
 var $78=$9;
 var $79=$78;
 __ZdlPv($79);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__na;
 var $__next;
 $20=$this;
 $21=$__np;
 var $22=$20;
 $19=$22;
 var $23=$19;
 var $24=(($23+8)|0);
 $18=$24;
 var $25=$18;
 var $26=$25;
 $17=$26;
 var $27=$17;
 var $28=$27;
 $__na=$28;
 label=2;break;
 case 2: 
 var $30=$21;
 var $31=($30|0)!=0;
 if($31){label=3;break;}else{label=5;break;}
 case 3: 
 var $33=$21;
 var $34=$33;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 $__next=$36;
 var $37=$__na;
 var $38=$21;
 var $39=(($38+8)|0);
 $16=$39;
 var $40=$16;
 var $41=$40;
 var $42=$41;
 $6=$37;
 $7=$42;
 var $43=$9;
 var $44=$6;
 var $45=$7;
 var $tmp_i=$5;
 var $tmp1_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $3=$44;
 $4=$45;
 var $46=$4;
 $2=$46;
 var $47=$2;
 $1=$47;
 var $48=$1;
 var $49=$48;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($49);
 label=4;break;
 case 4: 
 var $51=$__na;
 var $52=$21;
 $13=$51;
 $14=$52;
 $15=1;
 var $53=$13;
 var $54=$14;
 var $55=$15;
 $10=$53;
 $11=$54;
 $12=$55;
 var $56=$10;
 var $57=$11;
 var $58=$57;
 __ZdlPv($58);
 var $59=$__next;
 $21=$59;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__tmp_i_i_i;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 $26=$this;
 var $27=$26;
 var $28=(($27+8)|0);
 $25=$28;
 var $29=$25;
 var $30=$29;
 $24=$30;
 var $31=$24;
 var $32=(($31)|0);
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 var $35=(($27)|0);
 $23=$35;
 var $36=$23;
 $22=$36;
 var $37=$22;
 $21=$37;
 var $38=$21;
 var $39=(($38)|0);
 $20=$39;
 var $40=$20;
 var $41=$40;
 $19=$41;
 var $42=$19;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 $__tmp_i_i_i=$44;
 var $45=(($38)|0);
 $4=$45;
 var $46=$4;
 var $47=$46;
 $3=$47;
 var $48=$3;
 var $49=(($48)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$__tmp_i_i_i;
 var $51=($50|0)!=0;
 if($51){label=2;break;}else{label=3;break;}
 case 2: 
 var $53=(($38)|0);
 $2=$53;
 var $54=$2;
 var $55=$54;
 $1=$55;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=$__tmp_i_i_i;
 $17=$57;
 $18=$58;
 var $59=$17;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 var $63=$62;
 $14=$63;
 var $64=$14;
 var $65=$64;
 var $66=$18;
 $7=$59;
 var $67=$7;
 var $68=(($67)|0);
 $6=$68;
 var $69=$6;
 var $70=$69;
 $5=$70;
 var $71=$5;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 $11=$65;
 $12=$66;
 $13=$73;
 var $74=$11;
 var $75=$12;
 var $76=$13;
 $8=$74;
 $9=$75;
 $10=$76;
 var $77=$8;
 var $78=$9;
 var $79=$78;
 __ZdlPv($79);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__na;
 var $__next;
 $20=$this;
 $21=$__np;
 var $22=$20;
 $19=$22;
 var $23=$19;
 var $24=(($23+8)|0);
 $18=$24;
 var $25=$18;
 var $26=$25;
 $17=$26;
 var $27=$17;
 var $28=$27;
 $__na=$28;
 label=2;break;
 case 2: 
 var $30=$21;
 var $31=($30|0)!=0;
 if($31){label=3;break;}else{label=5;break;}
 case 3: 
 var $33=$21;
 var $34=$33;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 $__next=$36;
 var $37=$__na;
 var $38=$21;
 var $39=(($38+8)|0);
 $16=$39;
 var $40=$16;
 var $41=$40;
 var $42=$41;
 $6=$37;
 $7=$42;
 var $43=$9;
 var $44=$6;
 var $45=$7;
 var $tmp_i=$5;
 var $tmp1_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $3=$44;
 $4=$45;
 var $46=$4;
 $2=$46;
 var $47=$2;
 $1=$47;
 var $48=$1;
 var $49=$48;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($49);
 label=4;break;
 case 4: 
 var $51=$__na;
 var $52=$21;
 $13=$51;
 $14=$52;
 $15=1;
 var $53=$13;
 var $54=$14;
 var $55=$15;
 $10=$53;
 $11=$54;
 $12=$55;
 var $56=$10;
 var $57=$11;
 var $58=$57;
 __ZdlPv($58);
 var $59=$__next;
 $21=$59;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 var $4=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 STACKTOP=sp;return;
}


function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__tmp_i_i_i;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 $26=$this;
 var $27=$26;
 var $28=(($27+8)|0);
 $25=$28;
 var $29=$25;
 var $30=$29;
 $24=$30;
 var $31=$24;
 var $32=(($31)|0);
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 var $35=(($27)|0);
 $23=$35;
 var $36=$23;
 $22=$36;
 var $37=$22;
 $21=$37;
 var $38=$21;
 var $39=(($38)|0);
 $20=$39;
 var $40=$20;
 var $41=$40;
 $19=$41;
 var $42=$19;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 $__tmp_i_i_i=$44;
 var $45=(($38)|0);
 $4=$45;
 var $46=$4;
 var $47=$46;
 $3=$47;
 var $48=$3;
 var $49=(($48)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$__tmp_i_i_i;
 var $51=($50|0)!=0;
 if($51){label=2;break;}else{label=3;break;}
 case 2: 
 var $53=(($38)|0);
 $2=$53;
 var $54=$2;
 var $55=$54;
 $1=$55;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=$__tmp_i_i_i;
 $17=$57;
 $18=$58;
 var $59=$17;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 var $63=$62;
 $14=$63;
 var $64=$14;
 var $65=$64;
 var $66=$18;
 $7=$59;
 var $67=$7;
 var $68=(($67)|0);
 $6=$68;
 var $69=$6;
 var $70=$69;
 $5=$70;
 var $71=$5;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 $11=$65;
 $12=$66;
 $13=$73;
 var $74=$11;
 var $75=$12;
 var $76=$13;
 $8=$74;
 $9=$75;
 $10=$76;
 var $77=$8;
 var $78=$9;
 var $79=$78;
 __ZdlPv($79);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__na;
 var $__next;
 $20=$this;
 $21=$__np;
 var $22=$20;
 $19=$22;
 var $23=$19;
 var $24=(($23+8)|0);
 $18=$24;
 var $25=$18;
 var $26=$25;
 $17=$26;
 var $27=$17;
 var $28=$27;
 $__na=$28;
 label=2;break;
 case 2: 
 var $30=$21;
 var $31=($30|0)!=0;
 if($31){label=3;break;}else{label=5;break;}
 case 3: 
 var $33=$21;
 var $34=$33;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 $__next=$36;
 var $37=$__na;
 var $38=$21;
 var $39=(($38+8)|0);
 $16=$39;
 var $40=$16;
 var $41=$40;
 var $42=$41;
 $6=$37;
 $7=$42;
 var $43=$9;
 var $44=$6;
 var $45=$7;
 var $tmp_i=$5;
 var $tmp1_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $3=$44;
 $4=$45;
 var $46=$4;
 $2=$46;
 var $47=$2;
 $1=$47;
 var $48=$1;
 var $49=$48;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($49);
 label=4;break;
 case 4: 
 var $51=$__na;
 var $52=$21;
 $13=$51;
 $14=$52;
 $15=1;
 var $53=$13;
 var $54=$14;
 var $55=$15;
 $10=$53;
 $11=$54;
 $12=$55;
 var $56=$10;
 var $57=$11;
 var $58=$57;
 __ZdlPv($58);
 var $59=$__next;
 $21=$59;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP=sp;return;
}


function __ZN10ParametersC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13=(sp)+(16);
 var $14;
 var $15;
 var $16=(sp)+(24);
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $__tmp_i_i_i_i_i_i_i4;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51=(sp)+(32);
 var $52;
 var $53;
 var $54=(sp)+(40);
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61=(sp)+(48);
 var $62;
 var $63;
 var $64=(sp)+(56);
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78=(sp)+(64);
 var $79;
 var $80;
 var $81=(sp)+(72);
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87=(sp)+(80);
 var $88;
 var $89;
 var $90=(sp)+(88);
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $__tmp_i_i_i_i_i_i_i3;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125=(sp)+(96);
 var $126;
 var $127;
 var $128=(sp)+(104);
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135=(sp)+(112);
 var $136;
 var $137;
 var $138=(sp)+(120);
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152=(sp)+(128);
 var $153;
 var $154;
 var $155=(sp)+(136);
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161=(sp)+(144);
 var $162;
 var $163;
 var $164=(sp)+(152);
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $179;
 var $180;
 var $181;
 var $182;
 var $183;
 var $184;
 var $185;
 var $186;
 var $187;
 var $188;
 var $189;
 var $190;
 var $191;
 var $192;
 var $193;
 var $__tmp_i_i_i_i_i_i_i2;
 var $194;
 var $195;
 var $196;
 var $197;
 var $198;
 var $199=(sp)+(160);
 var $200;
 var $201;
 var $202=(sp)+(168);
 var $203;
 var $204;
 var $205;
 var $206;
 var $207;
 var $208;
 var $209=(sp)+(176);
 var $210;
 var $211;
 var $212=(sp)+(184);
 var $213;
 var $214;
 var $215;
 var $216;
 var $217;
 var $218;
 var $219;
 var $220;
 var $221;
 var $222;
 var $223;
 var $224;
 var $225;
 var $226=(sp)+(192);
 var $227;
 var $228;
 var $229=(sp)+(200);
 var $230;
 var $231;
 var $232;
 var $233;
 var $234;
 var $235=(sp)+(208);
 var $236;
 var $237;
 var $238=(sp)+(216);
 var $239;
 var $240;
 var $241;
 var $242;
 var $243;
 var $244;
 var $245;
 var $246;
 var $247;
 var $248;
 var $249;
 var $250;
 var $251;
 var $252;
 var $253;
 var $254;
 var $255;
 var $256;
 var $257;
 var $258;
 var $259;
 var $260;
 var $261;
 var $262;
 var $263;
 var $264;
 var $265;
 var $266;
 var $267;
 var $__tmp_i_i_i_i_i_i_i1;
 var $268;
 var $269;
 var $270;
 var $271;
 var $272;
 var $273=(sp)+(224);
 var $274;
 var $275;
 var $276=(sp)+(232);
 var $277;
 var $278;
 var $279;
 var $280;
 var $281;
 var $282;
 var $283=(sp)+(240);
 var $284;
 var $285;
 var $286=(sp)+(248);
 var $287;
 var $288;
 var $289;
 var $290;
 var $291;
 var $292;
 var $293;
 var $294;
 var $295;
 var $296;
 var $297;
 var $298;
 var $299;
 var $300=(sp)+(256);
 var $301;
 var $302;
 var $303=(sp)+(264);
 var $304;
 var $305;
 var $306;
 var $307;
 var $308;
 var $309=(sp)+(272);
 var $310;
 var $311;
 var $312=(sp)+(280);
 var $313;
 var $314;
 var $315;
 var $316;
 var $317;
 var $318;
 var $319;
 var $320;
 var $321;
 var $322;
 var $323;
 var $324;
 var $325;
 var $326;
 var $327;
 var $328;
 var $329;
 var $330;
 var $331;
 var $332;
 var $333;
 var $334;
 var $335;
 var $336;
 var $337;
 var $338;
 var $339;
 var $340;
 var $341;
 var $__tmp_i_i_i_i_i_i_i;
 var $342;
 var $343;
 var $344;
 var $345;
 var $346;
 var $347=(sp)+(288);
 var $348;
 var $349;
 var $350=(sp)+(296);
 var $351;
 var $352;
 var $353;
 var $354;
 var $355;
 var $356;
 var $357=(sp)+(304);
 var $358;
 var $359;
 var $360=(sp)+(312);
 var $361;
 var $362;
 var $363;
 var $364;
 var $365;
 var $366;
 var $367;
 var $368;
 var $369;
 var $370;
 var $371;
 $371=$this;
 var $372=$371;
 var $373=(($372)|0);
 $370=$373;
 var $374=$370;
 $369=$374;
 var $375=$369;
 var $376=(($375)|0);
 $368=$376;
 var $377=$368;
 $365=$377;
 var $378=$365;
 var $379=(($378)|0);
 $364=$379;
 var $380=$364;
 $363=$380;
 var $381=$363;
 var $382=(($381)|0);
 $361=$382;
 $362=0;
 var $383=$361;
 var $384=$362;
 $359=$383;
 HEAP32[(($360)>>2)]=$384;
 var $385=$359;
 var $386=$385;
 $358=$360;
 var $387=$358;
 var $388=HEAP32[(($387)>>2)];
 $356=$386;
 HEAP32[(($357)>>2)]=$388;
 var $389=$356;
 var $390=(($389)|0);
 $355=$357;
 var $391=$355;
 var $392=HEAP32[(($391)>>2)];
 HEAP32[(($390)>>2)]=$392;
 var $393=(($389+4)|0);
 $354=$393;
 var $394=$354;
 $353=$394;
 var $395=$353;
 var $396=(($395)|0);
 $351=$396;
 $352=0;
 var $397=$351;
 var $398=$352;
 $349=$397;
 HEAP32[(($350)>>2)]=$398;
 var $399=$349;
 var $400=$399;
 $348=$350;
 var $401=$348;
 var $402=HEAP32[(($401)>>2)];
 $346=$400;
 HEAP32[(($347)>>2)]=$402;
 var $403=$346;
 var $404=$403;
 $345=$404;
 var $405=$345;
 var $406=(($403)|0);
 $344=$347;
 var $407=$344;
 var $408=HEAP32[(($407)>>2)];
 HEAP32[(($406)>>2)]=$408;
 var $409=(($378+8)|0);
 $320=$409;
 var $410=$320;
 $319=$410;
 var $411=$319;
 var $412=$411;
 $318=$412;
 var $413=$318;
 var $414=$413;
 $317=$414;
 var $415=$317;
 var $416=(($413)|0);
 $316=$416;
 var $417=$316;
 $315=$417;
 var $418=$315;
 var $419=(($418)|0);
 HEAP32[(($419)>>2)]=0;
 var $420=(($378+12)|0);
 $304=$420;
 $305=0;
 var $421=$304;
 var $422=$305;
 $302=$421;
 HEAP32[(($303)>>2)]=$422;
 var $423=$302;
 var $424=$423;
 $301=$303;
 var $425=$301;
 var $426=HEAP32[(($425)>>2)];
 $299=$424;
 HEAP32[(($300)>>2)]=$426;
 var $427=$299;
 var $428=$427;
 $298=$428;
 var $429=$298;
 var $430=$429;
 var $431=(($427)|0);
 $297=$300;
 var $432=$297;
 var $433=HEAP32[(($432)>>2)];
 HEAP32[(($431)>>2)]=$433;
 var $434=(($378+16)|0);
 $313=$434;
 $314=1;
 var $435=$313;
 var $436=$314;
 $311=$435;
 HEAPF32[(($312)>>2)]=$436;
 var $437=$311;
 var $438=$437;
 $310=$312;
 var $439=$310;
 var $440=HEAPF32[(($439)>>2)];
 $308=$438;
 HEAPF32[(($309)>>2)]=$440;
 var $441=$308;
 var $442=$441;
 $307=$442;
 var $443=$307;
 var $444=$443;
 var $445=(($441)|0);
 $306=$309;
 var $446=$306;
 var $447=HEAPF32[(($446)>>2)];
 HEAPF32[(($445)>>2)]=$447;
 var $448=(($372+20)|0);
 $74=$448;
 var $449=$74;
 $73=$449;
 var $450=$73;
 var $451=(($450)|0);
 $72=$451;
 var $452=$72;
 $69=$452;
 var $453=$69;
 var $454=(($453)|0);
 $68=$454;
 var $455=$68;
 $67=$455;
 var $456=$67;
 var $457=(($456)|0);
 $65=$457;
 $66=0;
 var $458=$65;
 var $459=$66;
 $63=$458;
 HEAP32[(($64)>>2)]=$459;
 var $460=$63;
 var $461=$460;
 $62=$64;
 var $462=$62;
 var $463=HEAP32[(($462)>>2)];
 $60=$461;
 HEAP32[(($61)>>2)]=$463;
 var $464=$60;
 var $465=(($464)|0);
 $59=$61;
 var $466=$59;
 var $467=HEAP32[(($466)>>2)];
 HEAP32[(($465)>>2)]=$467;
 var $468=(($464+4)|0);
 $58=$468;
 var $469=$58;
 $57=$469;
 var $470=$57;
 var $471=(($470)|0);
 $55=$471;
 $56=0;
 var $472=$55;
 var $473=$56;
 $53=$472;
 HEAP32[(($54)>>2)]=$473;
 var $474=$53;
 var $475=$474;
 $52=$54;
 var $476=$52;
 var $477=HEAP32[(($476)>>2)];
 $50=$475;
 HEAP32[(($51)>>2)]=$477;
 var $478=$50;
 var $479=$478;
 $49=$479;
 var $480=$49;
 var $481=(($478)|0);
 $48=$51;
 var $482=$48;
 var $483=HEAP32[(($482)>>2)];
 HEAP32[(($481)>>2)]=$483;
 var $484=(($453+8)|0);
 $24=$484;
 var $485=$24;
 $23=$485;
 var $486=$23;
 var $487=$486;
 $22=$487;
 var $488=$22;
 var $489=$488;
 $21=$489;
 var $490=$21;
 var $491=(($488)|0);
 $20=$491;
 var $492=$20;
 $19=$492;
 var $493=$19;
 var $494=(($493)|0);
 HEAP32[(($494)>>2)]=0;
 var $495=(($453+12)|0);
 $8=$495;
 $9=0;
 var $496=$8;
 var $497=$9;
 $6=$496;
 HEAP32[(($7)>>2)]=$497;
 var $498=$6;
 var $499=$498;
 $5=$7;
 var $500=$5;
 var $501=HEAP32[(($500)>>2)];
 $3=$499;
 HEAP32[(($4)>>2)]=$501;
 var $502=$3;
 var $503=$502;
 $2=$503;
 var $504=$2;
 var $505=$504;
 var $506=(($502)|0);
 $1=$4;
 var $507=$1;
 var $508=HEAP32[(($507)>>2)];
 HEAP32[(($506)>>2)]=$508;
 var $509=(($453+16)|0);
 $17=$509;
 $18=1;
 var $510=$17;
 var $511=$18;
 $15=$510;
 HEAPF32[(($16)>>2)]=$511;
 var $512=$15;
 var $513=$512;
 $14=$16;
 var $514=$14;
 var $515=HEAPF32[(($514)>>2)];
 $12=$513;
 HEAPF32[(($13)>>2)]=$515;
 var $516=$12;
 var $517=$516;
 $11=$517;
 var $518=$11;
 var $519=$518;
 var $520=(($516)|0);
 $10=$13;
 var $521=$10;
 var $522=HEAPF32[(($521)>>2)];
 HEAPF32[(($520)>>2)]=$522;
 var $523=(($372+40)|0);
 $148=$523;
 var $524=$148;
 $147=$524;
 var $525=$147;
 var $526=(($525)|0);
 $146=$526;
 var $527=$146;
 $143=$527;
 var $528=$143;
 var $529=(($528)|0);
 $142=$529;
 var $530=$142;
 $141=$530;
 var $531=$141;
 var $532=(($531)|0);
 $139=$532;
 $140=0;
 var $533=$139;
 var $534=$140;
 $137=$533;
 HEAP32[(($138)>>2)]=$534;
 var $535=$137;
 var $536=$535;
 $136=$138;
 var $537=$136;
 var $538=HEAP32[(($537)>>2)];
 $134=$536;
 HEAP32[(($135)>>2)]=$538;
 var $539=$134;
 var $540=(($539)|0);
 $133=$135;
 var $541=$133;
 var $542=HEAP32[(($541)>>2)];
 HEAP32[(($540)>>2)]=$542;
 var $543=(($539+4)|0);
 $132=$543;
 var $544=$132;
 $131=$544;
 var $545=$131;
 var $546=(($545)|0);
 $129=$546;
 $130=0;
 var $547=$129;
 var $548=$130;
 $127=$547;
 HEAP32[(($128)>>2)]=$548;
 var $549=$127;
 var $550=$549;
 $126=$128;
 var $551=$126;
 var $552=HEAP32[(($551)>>2)];
 $124=$550;
 HEAP32[(($125)>>2)]=$552;
 var $553=$124;
 var $554=$553;
 $123=$554;
 var $555=$123;
 var $556=(($553)|0);
 $122=$125;
 var $557=$122;
 var $558=HEAP32[(($557)>>2)];
 HEAP32[(($556)>>2)]=$558;
 var $559=(($528+8)|0);
 $98=$559;
 var $560=$98;
 $97=$560;
 var $561=$97;
 var $562=$561;
 $96=$562;
 var $563=$96;
 var $564=$563;
 $95=$564;
 var $565=$95;
 var $566=(($563)|0);
 $94=$566;
 var $567=$94;
 $93=$567;
 var $568=$93;
 var $569=(($568)|0);
 HEAP32[(($569)>>2)]=0;
 var $570=(($528+12)|0);
 $82=$570;
 $83=0;
 var $571=$82;
 var $572=$83;
 $80=$571;
 HEAP32[(($81)>>2)]=$572;
 var $573=$80;
 var $574=$573;
 $79=$81;
 var $575=$79;
 var $576=HEAP32[(($575)>>2)];
 $77=$574;
 HEAP32[(($78)>>2)]=$576;
 var $577=$77;
 var $578=$577;
 $76=$578;
 var $579=$76;
 var $580=$579;
 var $581=(($577)|0);
 $75=$78;
 var $582=$75;
 var $583=HEAP32[(($582)>>2)];
 HEAP32[(($581)>>2)]=$583;
 var $584=(($528+16)|0);
 $91=$584;
 $92=1;
 var $585=$91;
 var $586=$92;
 $89=$585;
 HEAPF32[(($90)>>2)]=$586;
 var $587=$89;
 var $588=$587;
 $88=$90;
 var $589=$88;
 var $590=HEAPF32[(($589)>>2)];
 $86=$588;
 HEAPF32[(($87)>>2)]=$590;
 var $591=$86;
 var $592=$591;
 $85=$592;
 var $593=$85;
 var $594=$593;
 var $595=(($591)|0);
 $84=$87;
 var $596=$84;
 var $597=HEAPF32[(($596)>>2)];
 HEAPF32[(($595)>>2)]=$597;
 var $598=(($372+60)|0);
 $222=$598;
 var $599=$222;
 $221=$599;
 var $600=$221;
 var $601=(($600)|0);
 $220=$601;
 var $602=$220;
 $217=$602;
 var $603=$217;
 var $604=(($603)|0);
 $216=$604;
 var $605=$216;
 $215=$605;
 var $606=$215;
 var $607=(($606)|0);
 $213=$607;
 $214=0;
 var $608=$213;
 var $609=$214;
 $211=$608;
 HEAP32[(($212)>>2)]=$609;
 var $610=$211;
 var $611=$610;
 $210=$212;
 var $612=$210;
 var $613=HEAP32[(($612)>>2)];
 $208=$611;
 HEAP32[(($209)>>2)]=$613;
 var $614=$208;
 var $615=(($614)|0);
 $207=$209;
 var $616=$207;
 var $617=HEAP32[(($616)>>2)];
 HEAP32[(($615)>>2)]=$617;
 var $618=(($614+4)|0);
 $206=$618;
 var $619=$206;
 $205=$619;
 var $620=$205;
 var $621=(($620)|0);
 $203=$621;
 $204=0;
 var $622=$203;
 var $623=$204;
 $201=$622;
 HEAP32[(($202)>>2)]=$623;
 var $624=$201;
 var $625=$624;
 $200=$202;
 var $626=$200;
 var $627=HEAP32[(($626)>>2)];
 $198=$625;
 HEAP32[(($199)>>2)]=$627;
 var $628=$198;
 var $629=$628;
 $197=$629;
 var $630=$197;
 var $631=(($628)|0);
 $196=$199;
 var $632=$196;
 var $633=HEAP32[(($632)>>2)];
 HEAP32[(($631)>>2)]=$633;
 var $634=(($603+8)|0);
 $172=$634;
 var $635=$172;
 $171=$635;
 var $636=$171;
 var $637=$636;
 $170=$637;
 var $638=$170;
 var $639=$638;
 $169=$639;
 var $640=$169;
 var $641=(($638)|0);
 $168=$641;
 var $642=$168;
 $167=$642;
 var $643=$167;
 var $644=(($643)|0);
 HEAP32[(($644)>>2)]=0;
 var $645=(($603+12)|0);
 $156=$645;
 $157=0;
 var $646=$156;
 var $647=$157;
 $154=$646;
 HEAP32[(($155)>>2)]=$647;
 var $648=$154;
 var $649=$648;
 $153=$155;
 var $650=$153;
 var $651=HEAP32[(($650)>>2)];
 $151=$649;
 HEAP32[(($152)>>2)]=$651;
 var $652=$151;
 var $653=$652;
 $150=$653;
 var $654=$150;
 var $655=$654;
 var $656=(($652)|0);
 $149=$152;
 var $657=$149;
 var $658=HEAP32[(($657)>>2)];
 HEAP32[(($656)>>2)]=$658;
 var $659=(($603+16)|0);
 $165=$659;
 $166=1;
 var $660=$165;
 var $661=$166;
 $163=$660;
 HEAPF32[(($164)>>2)]=$661;
 var $662=$163;
 var $663=$662;
 $162=$164;
 var $664=$162;
 var $665=HEAPF32[(($664)>>2)];
 $160=$663;
 HEAPF32[(($161)>>2)]=$665;
 var $666=$160;
 var $667=$666;
 $159=$667;
 var $668=$159;
 var $669=$668;
 var $670=(($666)|0);
 $158=$161;
 var $671=$158;
 var $672=HEAPF32[(($671)>>2)];
 HEAPF32[(($670)>>2)]=$672;
 var $673=(($372+80)|0);
 $296=$673;
 var $674=$296;
 $295=$674;
 var $675=$295;
 var $676=(($675)|0);
 $294=$676;
 var $677=$294;
 $291=$677;
 var $678=$291;
 var $679=(($678)|0);
 $290=$679;
 var $680=$290;
 $289=$680;
 var $681=$289;
 var $682=(($681)|0);
 $287=$682;
 $288=0;
 var $683=$287;
 var $684=$288;
 $285=$683;
 HEAP32[(($286)>>2)]=$684;
 var $685=$285;
 var $686=$685;
 $284=$286;
 var $687=$284;
 var $688=HEAP32[(($687)>>2)];
 $282=$686;
 HEAP32[(($283)>>2)]=$688;
 var $689=$282;
 var $690=(($689)|0);
 $281=$283;
 var $691=$281;
 var $692=HEAP32[(($691)>>2)];
 HEAP32[(($690)>>2)]=$692;
 var $693=(($689+4)|0);
 $280=$693;
 var $694=$280;
 $279=$694;
 var $695=$279;
 var $696=(($695)|0);
 $277=$696;
 $278=0;
 var $697=$277;
 var $698=$278;
 $275=$697;
 HEAP32[(($276)>>2)]=$698;
 var $699=$275;
 var $700=$699;
 $274=$276;
 var $701=$274;
 var $702=HEAP32[(($701)>>2)];
 $272=$700;
 HEAP32[(($273)>>2)]=$702;
 var $703=$272;
 var $704=$703;
 $271=$704;
 var $705=$271;
 var $706=(($703)|0);
 $270=$273;
 var $707=$270;
 var $708=HEAP32[(($707)>>2)];
 HEAP32[(($706)>>2)]=$708;
 var $709=(($678+8)|0);
 $246=$709;
 var $710=$246;
 $245=$710;
 var $711=$245;
 var $712=$711;
 $244=$712;
 var $713=$244;
 var $714=$713;
 $243=$714;
 var $715=$243;
 var $716=(($713)|0);
 $242=$716;
 var $717=$242;
 $241=$717;
 var $718=$241;
 var $719=(($718)|0);
 HEAP32[(($719)>>2)]=0;
 var $720=(($678+12)|0);
 $230=$720;
 $231=0;
 var $721=$230;
 var $722=$231;
 $228=$721;
 HEAP32[(($229)>>2)]=$722;
 var $723=$228;
 var $724=$723;
 $227=$229;
 var $725=$227;
 var $726=HEAP32[(($725)>>2)];
 $225=$724;
 HEAP32[(($226)>>2)]=$726;
 var $727=$225;
 var $728=$727;
 $224=$728;
 var $729=$224;
 var $730=$729;
 var $731=(($727)|0);
 $223=$226;
 var $732=$223;
 var $733=HEAP32[(($732)>>2)];
 HEAP32[(($731)>>2)]=$733;
 var $734=(($678+16)|0);
 $239=$734;
 $240=1;
 var $735=$239;
 var $736=$240;
 $237=$735;
 HEAPF32[(($238)>>2)]=$736;
 var $737=$237;
 var $738=$737;
 $236=$238;
 var $739=$236;
 var $740=HEAPF32[(($739)>>2)];
 $234=$738;
 HEAPF32[(($235)>>2)]=$740;
 var $741=$234;
 var $742=$741;
 $233=$742;
 var $743=$233;
 var $744=$743;
 var $745=(($741)|0);
 $232=$235;
 var $746=$232;
 var $747=HEAPF32[(($746)>>2)];
 HEAPF32[(($745)>>2)]=$747;
 STACKTOP=sp;return;
}


function __GLOBAL__I_a(){
 var label=0;


 ___cxx_global_var_init();
 return;
}


function __ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($filename,$type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $__a_i_i_i1_i_i_i;
 var $__i_i_i_i2_i_i_i;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $__a_i_i_i_i_i_i;
 var $__i_i_i_i_i_i_i;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103=sp;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $163;
 var $164;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $179;
 var $180;
 var $181;
 var $182;
 var $183;
 var $184;
 var $185;
 var $186;
 var $187;
 var $188;
 var $189;
 var $190;
 var $191;
 var $192;
 var $193;
 var $194;
 var $195;
 var $196;
 var $197;
 var $198;
 var $199;
 var $200;
 var $201;
 var $202;
 var $203;
 var $204;
 var $205;
 var $206;
 var $207;
 var $208;
 var $209;
 var $210;
 var $211;
 var $212;
 var $file=(sp)+(16);
 var $213;
 var $214;
 var $str=(sp)+(208);
 var $shader;
 var $ss=(sp)+(224);
 var $strSrc=(sp)+(368);
 var $charSrc=(sp)+(384);
 var $res=(sp)+(392);
 var $logSize=(sp)+(400);
 var $shaderLog=(sp)+(408);
 var $written=(sp)+(424);
 var $str1=(sp)+(432);
 var $215;
 $211=$filename;
 $212=$type;
 var $216=$211;
 $210=$216;
 var $217=$210;
 $209=$217;
 var $218=$209;
 $208=$218;
 var $219=$208;
 $207=$219;
 var $220=$207;
 var $221=(($220)|0);
 $206=$221;
 var $222=$206;
 var $223=$222;
 $205=$223;
 var $224=$205;
 var $225=(($224)|0);
 var $226=(($225)|0);
 var $227=$226;
 var $228=(($227)|0);
 var $229=$228;
 var $230=HEAP8[($229)];
 var $231=($230&255);
 var $232=$231&1;
 var $233=($232|0)!=0;
 if($233){label=2;break;}else{label=3;break;}
 case 2: 
 $199=$219;
 var $235=$199;
 var $236=(($235)|0);
 $198=$236;
 var $237=$198;
 var $238=$237;
 $197=$238;
 var $239=$197;
 var $240=(($239)|0);
 var $241=(($240)|0);
 var $242=$241;
 var $243=(($242+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $258=$244;label=4;break;
 case 3: 
 $204=$219;
 var $246=$204;
 var $247=(($246)|0);
 $203=$247;
 var $248=$203;
 var $249=$248;
 $202=$249;
 var $250=$202;
 var $251=(($250)|0);
 var $252=(($251)|0);
 var $253=$252;
 var $254=(($253+1)|0);
 var $255=(($254)|0);
 $201=$255;
 var $256=$201;
 $200=$256;
 var $257=$200;
 var $258=$257;label=4;break;
 case 4: 
 var $258;
 $196=$258;
 var $259=$196;
 $191=$file;
 $192=$259;
 $193=8;
 var $260=$191;
 var $261=$260;
 var $262=(($261+108)|0);
 var $263=$262;
 $190=$263;
 var $264=$190;
 var $265=$264;
 $189=$265;
 var $266=$189;
 var $267=$266;
 HEAP32[(($267)>>2)]=5320;
 var $268=$264;
 HEAP32[(($268)>>2)]=4864;
 var $269=$260;
 HEAP32[(($269)>>2)]=6660;
 var $270=$260;
 var $271=(($270+108)|0);
 var $272=$271;
 HEAP32[(($272)>>2)]=6680;
 var $273=$260;
 var $274=(($260+8)|0);
 var $275=$274;
 $186=$273;
 $187=7844;
 $188=$275;
 var $276=$186;
 var $277=$187;
 var $278=HEAP32[(($277)>>2)];
 var $279=$276;
 HEAP32[(($279)>>2)]=$278;
 var $280=(($277+4)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=$276;
 var $283=HEAP32[(($282)>>2)];
 var $284=((($283)-(12))|0);
 var $285=$284;
 var $286=HEAP32[(($285)>>2)];
 var $287=$276;
 var $288=(($287+$286)|0);
 var $289=$288;
 HEAP32[(($289)>>2)]=$281;
 var $290=(($276+4)|0);
 HEAP32[(($290)>>2)]=0;
 var $291=$276;
 var $292=HEAP32[(($291)>>2)];
 var $293=((($292)-(12))|0);
 var $294=$293;
 var $295=HEAP32[(($294)>>2)];
 var $296=$276;
 var $297=(($296+$295)|0);
 var $298=$297;
 var $299=$188;
 $184=$298;
 $185=$299;
 var $300=$184;
 var $301=$300;
 var $302=$185;
 var $303=$302;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($301,$303) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=10;break; }
 case 5: 
 var $304=(($300+72)|0);
 HEAP32[(($304)>>2)]=0;
 var $305=(($300+76)|0);
 HEAP32[(($305)>>2)]=-1;
 var $306=$260;
 HEAP32[(($306)>>2)]=6660;
 var $307=$260;
 var $308=(($307+108)|0);
 var $309=$308;
 HEAP32[(($309)>>2)]=6680;
 var $310=(($260+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $312=(($260+8)|0);
 var $313=$192;
 var $314=$193;
 var $315=$314|8;
 var $316=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($312,$313,$315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 var $318=($316|0)==0;
 if($318){label=8;break;}else{label=15;break;}
 case 8: 
 var $320=$260;
 var $321=HEAP32[(($320)>>2)];
 var $322=((($321)-(12))|0);
 var $323=$322;
 var $324=HEAP32[(($323)>>2)];
 var $325=$260;
 var $326=(($325+$324)|0);
 var $327=$326;
 $182=$327;
 $183=4;
 var $328=$182;
 var $329=$328;
 var $330=$183;
 $180=$329;
 $181=$330;
 var $331=$180;
 var $332=(($331+16)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=$181;
 var $335=$333|$334;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($331,$335) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 label=15;break;
 case 10: 
 var $337$0 = ___cxa_find_matching_catch(-1, -1); var $337$1 = tempRet0;
 var $338=$337$0;
 $194=$338;
 var $339=$337$1;
 $195=$339;
 label=14;break;
 case 11: 
 var $341$0 = ___cxa_find_matching_catch(-1, -1); var $341$1 = tempRet0;
 var $342=$341$0;
 $194=$342;
 var $343=$341$1;
 $195=$343;
 label=13;break;
 case 12: 
 var $345$0 = ___cxa_find_matching_catch(-1, -1); var $345$1 = tempRet0;
 var $346=$345$0;
 $194=$346;
 var $347=$345$1;
 $195=$347;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($310);
 label=13;break;
 case 13: 
 var $349=$260;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($349,7844);
 label=14;break;
 case 14: 
 var $351=$260;
 var $352=(($351+108)|0);
 var $353=$352;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($353);
 var $354=$194;
 var $355=$195;
 var $356$0=$354;
 var $356$1=0;
 var $357$0=$356$0;
 var $357$1=$355;
 ___resumeException($357$0)
 case 15: 
 $179=$file;
 var $358=$179;
 var $359=(($358+8)|0);
 $178=$359;
 var $360=$178;
 var $361=(($360+64)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=($362|0)!=0;
 label=16;break;
 case 16: 
 if($363){label=36;break;}else{label=17;break;}
 case 17: 
 $176=$str;
 $177=1728;
 var $366=$176;
 var $367=$177;
 $174=$366;
 $175=$367;
 var $368=$174;
 var $369=$368;
 var $370=(($368)|0);
 $173=$370;
 var $371=$173;
 $172=$371;
 var $372=$172;
 var $373=$372;
 $171=$373;
 var $374=$171;
 var $375=$374;
 $170=$375;
 var $376=$170;
 var $377=(($374)|0);
 var $378=$175;
 var $379=$175;
 $169=$379;
 var $380=$169;
 var $381=(function() { try { __THREW__ = 0; return _strlen($380) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=33;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($368,$378,$381) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=33;break; }
 case 19: 
 label=20;break;
 case 20: 
 var $383=$211;
 $167=$str;
 $168=$383;
 var $384=$167;
 var $385=$168;
 $165=$384;
 $166=$385;
 var $386=$165;
 var $387=$166;
 $164=$387;
 var $388=$164;
 $163=$388;
 var $389=$163;
 $162=$389;
 var $390=$162;
 var $391=(($390)|0);
 $161=$391;
 var $392=$161;
 var $393=$392;
 $160=$393;
 var $394=$160;
 var $395=(($394)|0);
 var $396=(($395)|0);
 var $397=$396;
 var $398=(($397)|0);
 var $399=$398;
 var $400=HEAP8[($399)];
 var $401=($400&255);
 var $402=$401&1;
 var $403=($402|0)!=0;
 if($403){label=21;break;}else{label=22;break;}
 case 21: 
 $154=$389;
 var $405=$154;
 var $406=(($405)|0);
 $153=$406;
 var $407=$153;
 var $408=$407;
 $152=$408;
 var $409=$152;
 var $410=(($409)|0);
 var $411=(($410)|0);
 var $412=$411;
 var $413=(($412+8)|0);
 var $414=HEAP32[(($413)>>2)];
 var $428=$414;label=23;break;
 case 22: 
 $159=$389;
 var $416=$159;
 var $417=(($416)|0);
 $158=$417;
 var $418=$158;
 var $419=$418;
 $157=$419;
 var $420=$157;
 var $421=(($420)|0);
 var $422=(($421)|0);
 var $423=$422;
 var $424=(($423+1)|0);
 var $425=(($424)|0);
 $156=$425;
 var $426=$156;
 $155=$426;
 var $427=$155;
 var $428=$427;label=23;break;
 case 23: 
 var $428;
 $151=$428;
 var $429=$151;
 var $430=$166;
 $150=$430;
 var $431=$150;
 $149=$431;
 var $432=$149;
 var $433=(($432)|0);
 $148=$433;
 var $434=$148;
 var $435=$434;
 $147=$435;
 var $436=$147;
 var $437=(($436)|0);
 var $438=(($437)|0);
 var $439=$438;
 var $440=(($439)|0);
 var $441=$440;
 var $442=HEAP8[($441)];
 var $443=($442&255);
 var $444=$443&1;
 var $445=($444|0)!=0;
 if($445){label=24;break;}else{label=25;break;}
 case 24: 
 $143=$431;
 var $447=$143;
 var $448=(($447)|0);
 $142=$448;
 var $449=$142;
 var $450=$449;
 $141=$450;
 var $451=$141;
 var $452=(($451)|0);
 var $453=(($452)|0);
 var $454=$453;
 var $455=(($454+4)|0);
 var $456=HEAP32[(($455)>>2)];
 var $471=$456;label=26;break;
 case 25: 
 $146=$431;
 var $458=$146;
 var $459=(($458)|0);
 $145=$459;
 var $460=$145;
 var $461=$460;
 $144=$461;
 var $462=$144;
 var $463=(($462)|0);
 var $464=(($463)|0);
 var $465=$464;
 var $466=(($465)|0);
 var $467=$466;
 var $468=HEAP8[($467)];
 var $469=($468&255);
 var $470=$469>>1;
 var $471=$470;label=26;break;
 case 26: 
 var $471;
 var $472=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($386,$429,$471) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=35;break; }
 case 27: 
 label=28;break;
 case 28: 
 $140=$str;
 var $474=$140;
 $139=$474;
 var $475=$139;
 $138=$475;
 var $476=$138;
 $137=$476;
 var $477=$137;
 var $478=(($477)|0);
 $136=$478;
 var $479=$136;
 var $480=$479;
 $135=$480;
 var $481=$135;
 var $482=(($481)|0);
 var $483=(($482)|0);
 var $484=$483;
 var $485=(($484)|0);
 var $486=$485;
 var $487=HEAP8[($486)];
 var $488=($487&255);
 var $489=$488&1;
 var $490=($489|0)!=0;
 if($490){label=29;break;}else{label=30;break;}
 case 29: 
 $129=$476;
 var $492=$129;
 var $493=(($492)|0);
 $128=$493;
 var $494=$128;
 var $495=$494;
 $127=$495;
 var $496=$127;
 var $497=(($496)|0);
 var $498=(($497)|0);
 var $499=$498;
 var $500=(($499+8)|0);
 var $501=HEAP32[(($500)>>2)];
 var $515=$501;label=31;break;
 case 30: 
 $134=$476;
 var $503=$134;
 var $504=(($503)|0);
 $133=$504;
 var $505=$133;
 var $506=$505;
 $132=$506;
 var $507=$132;
 var $508=(($507)|0);
 var $509=(($508)|0);
 var $510=$509;
 var $511=(($510+1)|0);
 var $512=(($511)|0);
 $131=$512;
 var $513=$131;
 $130=$513;
 var $514=$130;
 var $515=$514;label=31;break;
 case 31: 
 var $515;
 $126=$515;
 var $516=$126;
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i($516,3096,49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
 label=36;break;
 case 33: 
 var $519$0 = ___cxa_find_matching_catch(-1, -1); var $519$1 = tempRet0;
 var $eh_lpad_body$1=$519$1;var $eh_lpad_body$0=$519$0;label=34;break;
 case 34: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $520=$eh_lpad_body$0;
 $213=$520;
 var $521=$eh_lpad_body$1;
 $214=$521;
 label=104;break;
 case 35: 
 var $523$0 = ___cxa_find_matching_catch(-1, -1); var $523$1 = tempRet0;
 var $524=$523$0;
 $213=$524;
 var $525=$523$1;
 $214=$525;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
 label=104;break;
 case 36: 
 var $527=$212;
 var $528=(function() { try { __THREW__ = 0; return _glCreateShader($527) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=33;break; }
 case 37: 
 $shader=$528;
 var $530=$shader;
 var $531=($530|0)!=0;
 if($531){label=40;break;}else{label=38;break;}
 case 38: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(2464,3096,54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=33;break; }
 case 39: 
 label=40;break;
 case 40: 
 $122=$ss;
 $123=24;
 var $535=$122;
 var $536=$535;
 var $537=(($536+64)|0);
 var $538=$537;
 $121=$538;
 var $539=$121;
 var $540=$539;
 $120=$540;
 var $541=$120;
 var $542=$541;
 HEAP32[(($542)>>2)]=5320;
 var $543=$539;
 HEAP32[(($543)>>2)]=4864;
 var $544=$535;
 HEAP32[(($544)>>2)]=6260;
 var $545=$535;
 var $546=(($545+64)|0);
 var $547=$546;
 HEAP32[(($547)>>2)]=6300;
 var $548=$535;
 var $549=(($548+8)|0);
 var $550=$549;
 HEAP32[(($550)>>2)]=6280;
 var $551=$535;
 var $552=(($535+12)|0);
 var $553=$552;
 $115=$551;
 $116=7804;
 $117=$553;
 var $554=$115;
 var $555=$116;
 var $556=$554;
 var $557=(($555+4)|0);
 var $558=$117;
 $112=$556;
 $113=$557;
 $114=$558;
 var $559=$112;
 var $560=$113;
 var $561=HEAP32[(($560)>>2)];
 var $562=$559;
 HEAP32[(($562)>>2)]=$561;
 var $563=(($560+4)|0);
 var $564=HEAP32[(($563)>>2)];
 var $565=$559;
 var $566=HEAP32[(($565)>>2)];
 var $567=((($566)-(12))|0);
 var $568=$567;
 var $569=HEAP32[(($568)>>2)];
 var $570=$559;
 var $571=(($570+$569)|0);
 var $572=$571;
 HEAP32[(($572)>>2)]=$564;
 var $573=(($559+4)|0);
 HEAP32[(($573)>>2)]=0;
 var $574=$559;
 var $575=HEAP32[(($574)>>2)];
 var $576=((($575)-(12))|0);
 var $577=$576;
 var $578=HEAP32[(($577)>>2)];
 var $579=$559;
 var $580=(($579+$578)|0);
 var $581=$580;
 var $582=$114;
 $110=$581;
 $111=$582;
 var $583=$110;
 var $584=$583;
 var $585=$111;
 var $586=$585;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($584,$586) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=49;break; }
 case 41: 
 var $587=(($583+72)|0);
 HEAP32[(($587)>>2)]=0;
 var $588=(($583+76)|0);
 HEAP32[(($588)>>2)]=-1;
 var $589=$554;
 var $590=(($589+8)|0);
 var $591=$590;
 var $592=(($555+12)|0);
 $108=$591;
 $109=$592;
 var $593=$108;
 var $594=$109;
 var $595=HEAP32[(($594)>>2)];
 var $596=$593;
 HEAP32[(($596)>>2)]=$595;
 var $597=(($594+4)|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=$593;
 var $600=HEAP32[(($599)>>2)];
 var $601=((($600)-(12))|0);
 var $602=$601;
 var $603=HEAP32[(($602)>>2)];
 var $604=$593;
 var $605=(($604+$603)|0);
 var $606=$605;
 HEAP32[(($606)>>2)]=$598;
 var $607=HEAP32[(($555)>>2)];
 var $608=$554;
 HEAP32[(($608)>>2)]=$607;
 var $609=(($555+20)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=$554;
 var $612=HEAP32[(($611)>>2)];
 var $613=((($612)-(12))|0);
 var $614=$613;
 var $615=HEAP32[(($614)>>2)];
 var $616=$554;
 var $617=(($616+$615)|0);
 var $618=$617;
 HEAP32[(($618)>>2)]=$610;
 var $619=(($555+24)|0);
 var $620=HEAP32[(($619)>>2)];
 var $621=$554;
 var $622=(($621+8)|0);
 var $623=$622;
 HEAP32[(($623)>>2)]=$620;
 var $624=$535;
 HEAP32[(($624)>>2)]=6260;
 var $625=$535;
 var $626=(($625+64)|0);
 var $627=$626;
 HEAP32[(($627)>>2)]=6300;
 var $628=$535;
 var $629=(($628+8)|0);
 var $630=$629;
 HEAP32[(($630)>>2)]=6280;
 var $631=(($535+12)|0);
 var $632=$123;
 $106=$631;
 $107=$632;
 var $633=$106;
 var $634=$107;
 $101=$633;
 $102=$634;
 var $635=$101;
 var $636=$635;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($636);
 var $637=$635;
 HEAP32[(($637)>>2)]=6440;
 var $638=(($635+32)|0);
 $100=$638;
 var $639=$100;
 $99=$639;
 var $640=$99;
 var $641=$640;
 var $642=(($640)|0);
 $98=$642;
 var $643=$98;
 $97=$643;
 var $644=$97;
 var $645=$644;
 $96=$645;
 var $646=$96;
 var $647=$646;
 $95=$647;
 var $648=$95;
 var $649=(($646)|0);
 $94=$640;
 var $650=$94;
 var $651=(($650)|0);
 $93=$651;
 var $652=$93;
 var $653=$652;
 $92=$653;
 var $654=$92;
 var $655=(($654)|0);
 var $656=(($655)|0);
 var $657=$656;
 var $658=(($657)|0);
 $__a_i_i_i_i_i_i=$658;
 $__i_i_i_i_i_i_i=0;
 label=42;break;
 case 42: 
 var $660=$__i_i_i_i_i_i_i;
 var $661=($660>>>0)<3;
 if($661){label=43;break;}else{label=44;break;}
 case 43: 
 var $663=$__i_i_i_i_i_i_i;
 var $664=$__a_i_i_i_i_i_i;
 var $665=(($664+($663<<2))|0);
 HEAP32[(($665)>>2)]=0;
 var $666=$__i_i_i_i_i_i_i;
 var $667=((($666)+(1))|0);
 $__i_i_i_i_i_i_i=$667;
 label=42;break;
 case 44: 
 var $668=(($635+44)|0);
 HEAP32[(($668)>>2)]=0;
 var $669=(($635+48)|0);
 var $670=$102;
 HEAP32[(($669)>>2)]=$670;
 $91=$103;
 var $671=$91;
 $90=$671;
 var $672=$90;
 var $673=$672;
 var $674=(($672)|0);
 $89=$674;
 var $675=$89;
 $88=$675;
 var $676=$88;
 var $677=$676;
 $87=$677;
 var $678=$87;
 var $679=$678;
 $86=$679;
 var $680=$86;
 var $681=(($678)|0);
 $85=$672;
 var $682=$85;
 var $683=(($682)|0);
 $84=$683;
 var $684=$84;
 var $685=$684;
 $83=$685;
 var $686=$83;
 var $687=(($686)|0);
 var $688=(($687)|0);
 var $689=$688;
 var $690=(($689)|0);
 $__a_i_i_i1_i_i_i=$690;
 $__i_i_i_i2_i_i_i=0;
 label=45;break;
 case 45: 
 var $692=$__i_i_i_i2_i_i_i;
 var $693=($692>>>0)<3;
 if($693){label=46;break;}else{label=47;break;}
 case 46: 
 var $695=$__i_i_i_i2_i_i_i;
 var $696=$__a_i_i_i1_i_i_i;
 var $697=(($696+($695<<2))|0);
 HEAP32[(($697)>>2)]=0;
 var $698=$__i_i_i_i2_i_i_i;
 var $699=((($698)+(1))|0);
 $__i_i_i_i2_i_i_i=$699;
 label=45;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($635,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=48;break; }
 case 48: 
 var $701$0 = ___cxa_find_matching_catch(-1, -1); var $701$1 = tempRet0;
 var $702=$701$0;
 $104=$702;
 var $703=$701$1;
 $105=$703;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($638);
 var $704=$635;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($704);
 var $705=$104;
 var $706=$105;
 var $707$0=$705;
 var $707$1=0;
 var $708$0=$707$0;
 var $708$1=$706;
 var $709=$708$0;
 $124=$709;
 var $710=$708$1;
 $125=$710;
 var $711=$535;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($711,7804);
 label=50;break;
 case 49: 
 var $713$0 = ___cxa_find_matching_catch(-1, -1); var $713$1 = tempRet0;
 var $714=$713$0;
 $124=$714;
 var $715=$713$1;
 $125=$715;
 label=50;break;
 case 50: 
 var $717=$535;
 var $718=(($717+64)|0);
 var $719=$718;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($719);
 var $720=$124;
 var $721=$125;
 var $722$0=$720;
 var $722$1=0;
 var $723$0=$722$0;
 var $723$1=$721;
 var $eh_lpad_body$1=$723$1;var $eh_lpad_body$0=$723$0;label=34;break;
 case 51: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 label=52;break;
 case 52: 
 var $725=$ss;
 var $726=(($725+8)|0);
 var $727=$726;
 $82=$file;
 var $728=$82;
 var $729=(($728+8)|0);
 label=53;break;
 case 53: 
 var $731=$729;
 var $732=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE($727,$731) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=80;break; }
 case 54: 
 $81=$file;
 var $734=$81;
 var $735=(($734+8)|0);
 var $736=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($735) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=80;break; }
 case 55: 
 var $737=($736|0)==0;
 if($737){label=56;break;}else{label=58;break;}
 case 56: 
 var $739=$734;
 var $740=HEAP32[(($739)>>2)];
 var $741=((($740)-(12))|0);
 var $742=$741;
 var $743=HEAP32[(($742)>>2)];
 var $744=$734;
 var $745=(($744+$743)|0);
 var $746=$745;
 $79=$746;
 $80=4;
 var $747=$79;
 var $748=$747;
 var $749=$80;
 $77=$748;
 $78=$749;
 var $750=$77;
 var $751=(($750+16)|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=$78;
 var $754=$752|$753;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($750,$754) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=80;break; }
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $76=$ss;
 var $756=$76;
 var $757=(($756+12)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($strSrc,$757) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=80;break; }
 case 60: 
 label=61;break;
 case 61: 
 var $759=(($charSrc)|0);
 $75=$strSrc;
 var $760=$75;
 $74=$760;
 var $761=$74;
 $73=$761;
 var $762=$73;
 $72=$762;
 var $763=$72;
 var $764=(($763)|0);
 $71=$764;
 var $765=$71;
 var $766=$765;
 $70=$766;
 var $767=$70;
 var $768=(($767)|0);
 var $769=(($768)|0);
 var $770=$769;
 var $771=(($770)|0);
 var $772=$771;
 var $773=HEAP8[($772)];
 var $774=($773&255);
 var $775=$774&1;
 var $776=($775|0)!=0;
 if($776){label=62;break;}else{label=63;break;}
 case 62: 
 $64=$762;
 var $778=$64;
 var $779=(($778)|0);
 $63=$779;
 var $780=$63;
 var $781=$780;
 $62=$781;
 var $782=$62;
 var $783=(($782)|0);
 var $784=(($783)|0);
 var $785=$784;
 var $786=(($785+8)|0);
 var $787=HEAP32[(($786)>>2)];
 var $801=$787;label=64;break;
 case 63: 
 $69=$762;
 var $789=$69;
 var $790=(($789)|0);
 $68=$790;
 var $791=$68;
 var $792=$791;
 $67=$792;
 var $793=$67;
 var $794=(($793)|0);
 var $795=(($794)|0);
 var $796=$795;
 var $797=(($796+1)|0);
 var $798=(($797)|0);
 $66=$798;
 var $799=$66;
 $65=$799;
 var $800=$65;
 var $801=$800;label=64;break;
 case 64: 
 var $801;
 $61=$801;
 var $802=$61;
 HEAP32[(($759)>>2)]=$802;
 var $803=$shader;
 var $804=(($charSrc)|0);
 (function() { try { __THREW__ = 0; return _glShaderSource($803,1,$804,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=81;break; }
 case 65: 
 var $806=$shader;
 (function() { try { __THREW__ = 0; return _glCompileShader($806) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=81;break; }
 case 66: 
 var $808=$shader;
 (function() { try { __THREW__ = 0; return _glGetShaderiv($808,35713,$res) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=81;break; }
 case 67: 
 var $810=HEAP32[(($res)>>2)];
 var $811=($810|0)==0;
 if($811){label=68;break;}else{label=101;break;}
 case 68: 
 var $813=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,2112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=81;break; }
 case 69: 
 var $815=$211;
 var $816=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($813,$815) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=81;break; }
 case 70: 
 $59=$816;
 $60=8;
 var $818=$59;
 var $819=$60;
 var $820=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$819]($818) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=81;break; }
 case 71: 
 label=72;break;
 case 72: 
 var $822=$shader;
 (function() { try { __THREW__ = 0; return _glGetShaderiv($822,35716,$logSize) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=81;break; }
 case 73: 
 var $824=HEAP32[(($logSize)>>2)];
 var $825=($824|0)>0;
 if($825){label=74;break;}else{label=83;break;}
 case 74: 
 var $827=HEAP32[(($logSize)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej($shaderLog,$827) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=81;break; }
 case 75: 
 var $829=$shader;
 var $830=HEAP32[(($logSize)>>2)];
 $58=$shaderLog;
 var $831=$58;
 var $832=$831;
 var $833=(($832)|0);
 var $834=HEAP32[(($833)>>2)];
 $57=$834;
 var $835=$57;
 (function() { try { __THREW__ = 0; return _glGetShaderInfoLog($829,$830,$written,$835) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=82;break; }
 case 76: 
 $56=$shaderLog;
 var $837=$56;
 var $838=$837;
 var $839=(($838)|0);
 var $840=HEAP32[(($839)>>2)];
 $55=$840;
 var $841=$55;
 var $842=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,$841) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=82;break; }
 case 77: 
 $53=$842;
 $54=8;
 var $844=$53;
 var $845=$54;
 var $846=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$845]($844) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=82;break; }
 case 78: 
 label=79;break;
 case 79: 
 __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
 label=83;break;
 case 80: 
 var $849$0 = ___cxa_find_matching_catch(-1, -1); var $849$1 = tempRet0;
 var $850=$849$0;
 $213=$850;
 var $851=$849$1;
 $214=$851;
 label=103;break;
 case 81: 
 var $853$0 = ___cxa_find_matching_catch(-1, -1); var $853$1 = tempRet0;
 var $854=$853$0;
 $213=$854;
 var $855=$853$1;
 $214=$855;
 label=102;break;
 case 82: 
 var $857$0 = ___cxa_find_matching_catch(-1, -1); var $857$1 = tempRet0;
 var $858=$857$0;
 $213=$858;
 var $859=$857$1;
 $214=$859;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
 label=102;break;
 case 83: 
 var $861=$shader;
 (function() { try { __THREW__ = 0; return _glDeleteShader($861) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=81;break; }
 case 84: 
 $51=$str1;
 $52=1504;
 var $863=$51;
 var $864=$52;
 $49=$863;
 $50=$864;
 var $865=$49;
 var $866=$865;
 var $867=(($865)|0);
 $48=$867;
 var $868=$48;
 $47=$868;
 var $869=$47;
 var $870=$869;
 $46=$870;
 var $871=$46;
 var $872=$871;
 $45=$872;
 var $873=$45;
 var $874=(($871)|0);
 var $875=$50;
 var $876=$50;
 $44=$876;
 var $877=$44;
 var $878=(function() { try { __THREW__ = 0; return _strlen($877) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=81;break; }
 case 85: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($865,$875,$878) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=81;break; }
 case 86: 
 label=87;break;
 case 87: 
 var $880=$211;
 $42=$str1;
 $43=$880;
 var $881=$42;
 var $882=$43;
 $40=$881;
 $41=$882;
 var $883=$40;
 var $884=$41;
 $39=$884;
 var $885=$39;
 $38=$885;
 var $886=$38;
 $37=$886;
 var $887=$37;
 var $888=(($887)|0);
 $36=$888;
 var $889=$36;
 var $890=$889;
 $35=$890;
 var $891=$35;
 var $892=(($891)|0);
 var $893=(($892)|0);
 var $894=$893;
 var $895=(($894)|0);
 var $896=$895;
 var $897=HEAP8[($896)];
 var $898=($897&255);
 var $899=$898&1;
 var $900=($899|0)!=0;
 if($900){label=88;break;}else{label=89;break;}
 case 88: 
 $29=$886;
 var $902=$29;
 var $903=(($902)|0);
 $28=$903;
 var $904=$28;
 var $905=$904;
 $27=$905;
 var $906=$27;
 var $907=(($906)|0);
 var $908=(($907)|0);
 var $909=$908;
 var $910=(($909+8)|0);
 var $911=HEAP32[(($910)>>2)];
 var $925=$911;label=90;break;
 case 89: 
 $34=$886;
 var $913=$34;
 var $914=(($913)|0);
 $33=$914;
 var $915=$33;
 var $916=$915;
 $32=$916;
 var $917=$32;
 var $918=(($917)|0);
 var $919=(($918)|0);
 var $920=$919;
 var $921=(($920+1)|0);
 var $922=(($921)|0);
 $31=$922;
 var $923=$31;
 $30=$923;
 var $924=$30;
 var $925=$924;label=90;break;
 case 90: 
 var $925;
 $26=$925;
 var $926=$26;
 var $927=$41;
 $25=$927;
 var $928=$25;
 $24=$928;
 var $929=$24;
 var $930=(($929)|0);
 $23=$930;
 var $931=$23;
 var $932=$931;
 $22=$932;
 var $933=$22;
 var $934=(($933)|0);
 var $935=(($934)|0);
 var $936=$935;
 var $937=(($936)|0);
 var $938=$937;
 var $939=HEAP8[($938)];
 var $940=($939&255);
 var $941=$940&1;
 var $942=($941|0)!=0;
 if($942){label=91;break;}else{label=92;break;}
 case 91: 
 $18=$928;
 var $944=$18;
 var $945=(($944)|0);
 $17=$945;
 var $946=$17;
 var $947=$946;
 $16=$947;
 var $948=$16;
 var $949=(($948)|0);
 var $950=(($949)|0);
 var $951=$950;
 var $952=(($951+4)|0);
 var $953=HEAP32[(($952)>>2)];
 var $968=$953;label=93;break;
 case 92: 
 $21=$928;
 var $955=$21;
 var $956=(($955)|0);
 $20=$956;
 var $957=$20;
 var $958=$957;
 $19=$958;
 var $959=$19;
 var $960=(($959)|0);
 var $961=(($960)|0);
 var $962=$961;
 var $963=(($962)|0);
 var $964=$963;
 var $965=HEAP8[($964)];
 var $966=($965&255);
 var $967=$966>>1;
 var $968=$967;label=93;break;
 case 93: 
 var $968;
 var $969=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($883,$926,$968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=100;break; }
 case 94: 
 label=95;break;
 case 95: 
 $15=$str1;
 var $971=$15;
 $14=$971;
 var $972=$14;
 $13=$972;
 var $973=$13;
 $12=$973;
 var $974=$12;
 var $975=(($974)|0);
 $11=$975;
 var $976=$11;
 var $977=$976;
 $10=$977;
 var $978=$10;
 var $979=(($978)|0);
 var $980=(($979)|0);
 var $981=$980;
 var $982=(($981)|0);
 var $983=$982;
 var $984=HEAP8[($983)];
 var $985=($984&255);
 var $986=$985&1;
 var $987=($986|0)!=0;
 if($987){label=96;break;}else{label=97;break;}
 case 96: 
 $4=$973;
 var $989=$4;
 var $990=(($989)|0);
 $3=$990;
 var $991=$3;
 var $992=$991;
 $2=$992;
 var $993=$2;
 var $994=(($993)|0);
 var $995=(($994)|0);
 var $996=$995;
 var $997=(($996+8)|0);
 var $998=HEAP32[(($997)>>2)];
 var $1012=$998;label=98;break;
 case 97: 
 $9=$973;
 var $1000=$9;
 var $1001=(($1000)|0);
 $8=$1001;
 var $1002=$8;
 var $1003=$1002;
 $7=$1003;
 var $1004=$7;
 var $1005=(($1004)|0);
 var $1006=(($1005)|0);
 var $1007=$1006;
 var $1008=(($1007+1)|0);
 var $1009=(($1008)|0);
 $6=$1009;
 var $1010=$6;
 $5=$1010;
 var $1011=$5;
 var $1012=$1011;label=98;break;
 case 98: 
 var $1012;
 $1=$1012;
 var $1013=$1;
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i($1013,3096,89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=100;break; }
 case 99: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str1);
 label=101;break;
 case 100: 
 var $1016$0 = ___cxa_find_matching_catch(-1, -1); var $1016$1 = tempRet0;
 var $1017=$1016$0;
 $213=$1017;
 var $1018=$1016$1;
 $214=$1018;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str1);
 label=102;break;
 case 101: 
 var $1020=$shader;
 $215=1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
 STACKTOP=sp;return $1020;
 case 102: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
 label=103;break;
 case 103: 
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 label=104;break;
 case 104: 
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
 label=105;break;
 case 105: 
 var $1025=$213;
 var $1026=$214;
 var $1027$0=$1025;
 var $1027$1=0;
 var $1028$0=$1027$0;
 var $1028$1=$1026;
 ___resumeException($1028$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36=sp;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $__s=(sp)+(8);
 var $93;
 var $94;
 var $__len;
 var $95=(sp)+(16);
 var $96=(sp)+(24);
 $91=$__os;
 $92=$__str;
 var $97=$91;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 $90=$__s;
 var $99=$90;
 var $100=(($99)|0);
 var $101=HEAP8[($100)];
 var $102=(($101)&1);
 label=3;break;
 case 3: 
 if($102){label=4;break;}else{label=42;break;}
 case 4: 
 var $105=$92;
 $89=$105;
 var $106=$89;
 $88=$106;
 var $107=$88;
 var $108=(($107)|0);
 $87=$108;
 var $109=$87;
 var $110=$109;
 $86=$110;
 var $111=$86;
 var $112=(($111)|0);
 var $113=(($112)|0);
 var $114=$113;
 var $115=(($114)|0);
 var $116=$115;
 var $117=HEAP8[($116)];
 var $118=($117&255);
 var $119=$118&1;
 var $120=($119|0)!=0;
 if($120){label=5;break;}else{label=6;break;}
 case 5: 
 $82=$106;
 var $122=$82;
 var $123=(($122)|0);
 $81=$123;
 var $124=$81;
 var $125=$124;
 $80=$125;
 var $126=$80;
 var $127=(($126)|0);
 var $128=(($127)|0);
 var $129=$128;
 var $130=(($129+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $146=$131;label=7;break;
 case 6: 
 $85=$106;
 var $133=$85;
 var $134=(($133)|0);
 $84=$134;
 var $135=$84;
 var $136=$135;
 $83=$136;
 var $137=$83;
 var $138=(($137)|0);
 var $139=(($138)|0);
 var $140=$139;
 var $141=(($140)|0);
 var $142=$141;
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=$144>>1;
 var $146=$145;label=7;break;
 case 7: 
 var $146;
 $__len=$146;
 var $147=$91;
 $78=$95;
 $79=$147;
 var $148=$78;
 var $149=$79;
 $76=$148;
 $77=$149;
 var $150=$76;
 var $151=$150;
 var $152=(($150)|0);
 var $153=$77;
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=((($155)-(12))|0);
 var $157=$156;
 var $158=HEAP32[(($157)>>2)];
 var $159=$153;
 var $160=(($159+$158)|0);
 var $161=$160;
 $75=$161;
 var $162=$75;
 var $163=$162;
 $74=$163;
 var $164=$74;
 var $165=(($164+24)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=$166;
 HEAP32[(($152)>>2)]=$167;
 var $168=$92;
 $73=$168;
 var $169=$73;
 $72=$169;
 var $170=$72;
 $71=$170;
 var $171=$71;
 var $172=(($171)|0);
 $70=$172;
 var $173=$70;
 var $174=$173;
 $69=$174;
 var $175=$69;
 var $176=(($175)|0);
 var $177=(($176)|0);
 var $178=$177;
 var $179=(($178)|0);
 var $180=$179;
 var $181=HEAP8[($180)];
 var $182=($181&255);
 var $183=$182&1;
 var $184=($183|0)!=0;
 if($184){label=8;break;}else{label=9;break;}
 case 8: 
 $63=$170;
 var $186=$63;
 var $187=(($186)|0);
 $62=$187;
 var $188=$62;
 var $189=$188;
 $61=$189;
 var $190=$61;
 var $191=(($190)|0);
 var $192=(($191)|0);
 var $193=$192;
 var $194=(($193+8)|0);
 var $195=HEAP32[(($194)>>2)];
 var $209=$195;label=10;break;
 case 9: 
 $68=$170;
 var $197=$68;
 var $198=(($197)|0);
 $67=$198;
 var $199=$67;
 var $200=$199;
 $66=$200;
 var $201=$66;
 var $202=(($201)|0);
 var $203=(($202)|0);
 var $204=$203;
 var $205=(($204+1)|0);
 var $206=(($205)|0);
 $65=$206;
 var $207=$65;
 $64=$207;
 var $208=$64;
 var $209=$208;label=10;break;
 case 10: 
 var $209;
 $60=$209;
 var $210=$60;
 var $211=$91;
 var $212=$211;
 var $213=HEAP32[(($212)>>2)];
 var $214=((($213)-(12))|0);
 var $215=$214;
 var $216=HEAP32[(($215)>>2)];
 var $217=$211;
 var $218=(($217+$216)|0);
 var $219=$218;
 $55=$219;
 var $220=$55;
 var $221=(($220+4)|0);
 var $222=HEAP32[(($221)>>2)];
 label=11;break;
 case 11: 
 var $224=$222&176;
 var $225=($224|0)==32;
 if($225){label=12;break;}else{label=16;break;}
 case 12: 
 var $227=$92;
 $53=$227;
 var $228=$53;
 $52=$228;
 var $229=$52;
 $51=$229;
 var $230=$51;
 var $231=(($230)|0);
 $50=$231;
 var $232=$50;
 var $233=$232;
 $49=$233;
 var $234=$49;
 var $235=(($234)|0);
 var $236=(($235)|0);
 var $237=$236;
 var $238=(($237)|0);
 var $239=$238;
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=$241&1;
 var $243=($242|0)!=0;
 if($243){label=13;break;}else{label=14;break;}
 case 13: 
 $43=$229;
 var $245=$43;
 var $246=(($245)|0);
 $42=$246;
 var $247=$42;
 var $248=$247;
 $41=$248;
 var $249=$41;
 var $250=(($249)|0);
 var $251=(($250)|0);
 var $252=$251;
 var $253=(($252+8)|0);
 var $254=HEAP32[(($253)>>2)];
 var $268=$254;label=15;break;
 case 14: 
 $48=$229;
 var $256=$48;
 var $257=(($256)|0);
 $47=$257;
 var $258=$47;
 var $259=$258;
 $46=$259;
 var $260=$46;
 var $261=(($260)|0);
 var $262=(($261)|0);
 var $263=$262;
 var $264=(($263+1)|0);
 var $265=(($264)|0);
 $45=$265;
 var $266=$45;
 $44=$266;
 var $267=$44;
 var $268=$267;label=15;break;
 case 15: 
 var $268;
 $40=$268;
 var $269=$40;
 var $270=$__len;
 var $271=(($269+$270)|0);
 var $317=$271;label=20;break;
 case 16: 
 var $273=$92;
 $28=$273;
 var $274=$28;
 $27=$274;
 var $275=$27;
 $26=$275;
 var $276=$26;
 var $277=(($276)|0);
 $25=$277;
 var $278=$25;
 var $279=$278;
 $24=$279;
 var $280=$24;
 var $281=(($280)|0);
 var $282=(($281)|0);
 var $283=$282;
 var $284=(($283)|0);
 var $285=$284;
 var $286=HEAP8[($285)];
 var $287=($286&255);
 var $288=$287&1;
 var $289=($288|0)!=0;
 if($289){label=17;break;}else{label=18;break;}
 case 17: 
 $18=$275;
 var $291=$18;
 var $292=(($291)|0);
 $17=$292;
 var $293=$17;
 var $294=$293;
 $16=$294;
 var $295=$16;
 var $296=(($295)|0);
 var $297=(($296)|0);
 var $298=$297;
 var $299=(($298+8)|0);
 var $300=HEAP32[(($299)>>2)];
 var $314=$300;label=19;break;
 case 18: 
 $23=$275;
 var $302=$23;
 var $303=(($302)|0);
 $22=$303;
 var $304=$22;
 var $305=$304;
 $21=$305;
 var $306=$21;
 var $307=(($306)|0);
 var $308=(($307)|0);
 var $309=$308;
 var $310=(($309+1)|0);
 var $311=(($310)|0);
 $20=$311;
 var $312=$20;
 $19=$312;
 var $313=$19;
 var $314=$313;label=19;break;
 case 19: 
 var $314;
 $15=$314;
 var $315=$15;
 var $317=$315;label=20;break;
 case 20: 
 var $317;
 var $318=$92;
 $14=$318;
 var $319=$14;
 $13=$319;
 var $320=$13;
 $12=$320;
 var $321=$12;
 var $322=(($321)|0);
 $11=$322;
 var $323=$11;
 var $324=$323;
 $10=$324;
 var $325=$10;
 var $326=(($325)|0);
 var $327=(($326)|0);
 var $328=$327;
 var $329=(($328)|0);
 var $330=$329;
 var $331=HEAP8[($330)];
 var $332=($331&255);
 var $333=$332&1;
 var $334=($333|0)!=0;
 if($334){label=21;break;}else{label=22;break;}
 case 21: 
 $4=$320;
 var $336=$4;
 var $337=(($336)|0);
 $3=$337;
 var $338=$3;
 var $339=$338;
 $2=$339;
 var $340=$2;
 var $341=(($340)|0);
 var $342=(($341)|0);
 var $343=$342;
 var $344=(($343+8)|0);
 var $345=HEAP32[(($344)>>2)];
 var $359=$345;label=23;break;
 case 22: 
 $9=$320;
 var $347=$9;
 var $348=(($347)|0);
 $8=$348;
 var $349=$8;
 var $350=$349;
 $7=$350;
 var $351=$7;
 var $352=(($351)|0);
 var $353=(($352)|0);
 var $354=$353;
 var $355=(($354+1)|0);
 var $356=(($355)|0);
 $6=$356;
 var $357=$6;
 $5=$357;
 var $358=$5;
 var $359=$358;label=23;break;
 case 23: 
 var $359;
 $1=$359;
 var $360=$1;
 var $361=$__len;
 var $362=(($360+$361)|0);
 var $363=$91;
 var $364=$363;
 var $365=HEAP32[(($364)>>2)];
 var $366=((($365)-(12))|0);
 var $367=$366;
 var $368=HEAP32[(($367)>>2)];
 var $369=$363;
 var $370=(($369+$368)|0);
 var $371=$370;
 var $372=$91;
 var $373=$372;
 var $374=HEAP32[(($373)>>2)];
 var $375=((($374)-(12))|0);
 var $376=$375;
 var $377=HEAP32[(($376)>>2)];
 var $378=$372;
 var $379=(($378+$377)|0);
 var $380=$379;
 $39=$380;
 var $381=$39;
 var $382=(($381+76)|0);
 var $383=HEAP32[(($382)>>2)];
 $29=-1;
 $30=$383;
 var $384=$29;
 var $385=$30;
 var $386=($384|0)==($385|0);
 if($386){label=24;break;}else{label=29;break;}
 case 24: 
 $34=$381;
 $35=32;
 var $388=$34;
 var $389=$388;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($36,$389) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=36;break; }
 case 25: 
 $33=$36;
 var $390=$33;
 var $391=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($390,17336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=27;break; }
 case 26: 
 var $392=$391;
 var $393=$35;
 $31=$392;
 $32=$393;
 var $394=$31;
 var $395=$394;
 var $396=HEAP32[(($395)>>2)];
 var $397=(($396+28)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=$32;
 var $400=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$398]($394,$399) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=27;break; }
 case 27: 
 var $402$0 = ___cxa_find_matching_catch(-1, -1,0,0); var $402$1 = tempRet0;
 var $403=$402$0;
 $37=$403;
 var $404=$402$1;
 $38=$404;
 __ZNSt3__16localeD2Ev($36);
 var $405=$37;
 var $406=$38;
 var $407$0=$405;
 var $407$1=0;
 var $408$0=$407$0;
 var $408$1=$406;
 var $eh_lpad_body$1=$408$1;var $eh_lpad_body$0=$408$0;label=37;break;
 case 28: 
 __ZNSt3__16localeD2Ev($36);
 var $409=(($400<<24)>>24);
 var $410=(($381+76)|0);
 HEAP32[(($410)>>2)]=$409;
 label=29;break;
 case 29: 
 var $411=(($381+76)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($412)&255);
 label=30;break;
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($96,$95,$210,$317,$362,$371,$413) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=36;break; }
 case 31: 
 $54=$96;
 var $416=$54;
 var $417=(($416)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=($418|0)==0;
 if($419){label=32;break;}else{label=41;break;}
 case 32: 
 var $421=$91;
 var $422=$421;
 var $423=HEAP32[(($422)>>2)];
 var $424=((($423)-(12))|0);
 var $425=$424;
 var $426=HEAP32[(($425)>>2)];
 var $427=$421;
 var $428=(($427+$426)|0);
 var $429=$428;
 $58=$429;
 $59=5;
 var $430=$58;
 var $431=$430;
 var $432=$59;
 $56=$431;
 $57=$432;
 var $433=$56;
 var $434=(($433+16)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=$57;
 var $437=$435|$436;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($433,$437) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 label=34;break;
 case 34: 
 label=41;break;
 case 35: 
 var $440$0 = ___cxa_find_matching_catch(-1, -1,0); var $440$1 = tempRet0;
 var $441=$440$0;
 $93=$441;
 var $442=$440$1;
 $94=$442;
 label=38;break;
 case 36: 
 var $444$0 = ___cxa_find_matching_catch(-1, -1,0); var $444$1 = tempRet0;
 var $eh_lpad_body$1=$444$1;var $eh_lpad_body$0=$444$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $445=$eh_lpad_body$0;
 $93=$445;
 var $446=$eh_lpad_body$1;
 $94=$446;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
 label=38;break;
 case 38: 
 var $448=$93;
 var $449=___cxa_begin_catch($448);
 var $450=$91;
 var $451=$450;
 var $452=HEAP32[(($451)>>2)];
 var $453=((($452)-(12))|0);
 var $454=$453;
 var $455=HEAP32[(($454)>>2)];
 var $456=$450;
 var $457=(($456+$455)|0);
 var $458=$457;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($458) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=43;break; }
 case 39: 
 ___cxa_end_catch();
 label=40;break;
 case 40: 
 var $461=$91;
 STACKTOP=sp;return $461;
 case 41: 
 label=42;break;
 case 42: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
 label=40;break;
 case 43: 
 var $465$0 = ___cxa_find_matching_catch(-1, -1); var $465$1 = tempRet0;
 var $466=$465$0;
 $93=$466;
 var $467=$465$1;
 $94=$467;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=46;break; }
 case 44: 
 label=45;break;
 case 45: 
 var $470=$93;
 var $471=$94;
 var $472$0=$470;
 var $472$1=0;
 var $473$0=$472$0;
 var $473$1=$471;
 ___resumeException($473$0)
 case 46: 
 var $475$0 = ___cxa_find_matching_catch(-1, -1,0); var $475$1 = tempRet0;
 var $476=$475$0;
 ___clang_call_terminate($476);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej($this,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$__n;
 var $3=$1;
 var $4=$2;
 __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($3,$4);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($2,7840);
 var $3=$2;
 var $4=(($3+108)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 STACKTOP=sp;return;
}


function __ZN7gltools15ShaderContainerD2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8=sp;
 var $9=(sp)+(8);
 var $10=(sp)+(16);
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26=(sp)+(24);
 var $27=(sp)+(32);
 var $28;
 var $29;
 $25=$this;
 var $30=$25;
 var $31=$30;
 $24=$31;
 var $32=$24;
 var $33=$32;
 $23=$33;
 var $34=$23;
 var $35=(($34)|0);
 var $36=(($35+4)|0);
 var $37=HEAP32[(($36)>>2)];
 $21=$26;
 $22=$37;
 var $38=$21;
 var $39=$22;
 $19=$38;
 $20=$39;
 var $40=$19;
 var $41=(($40)|0);
 var $42=$20;
 HEAP32[(($41)>>2)]=$42;
 var $43=$30;
 $18=$43;
 var $44=$18;
 var $45=$44;
 $17=$45;
 var $46=$17;
 var $47=(($46)|0);
 $16=$47;
 var $48=$16;
 $15=$48;
 var $49=$15;
 var $50=$49;
 var $51=$50;
 var $52=$51;
 $13=$27;
 $14=$52;
 var $53=$13;
 var $54=$14;
 $11=$53;
 $12=$54;
 var $55=$11;
 var $56=(($55)|0);
 var $57=$12;
 HEAP32[(($56)>>2)]=$57;
 var $tmp=$10;
 var $tmp1=$26;
 assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
 var $tmp2=$9;
 var $tmp3=$27;
 assert(4 % 1 === 0);HEAP8[($tmp2)]=HEAP8[($tmp3)];HEAP8[((($tmp2)+(1))|0)]=HEAP8[((($tmp3)+(1))|0)];HEAP8[((($tmp2)+(2))|0)]=HEAP8[((($tmp3)+(2))|0)];HEAP8[((($tmp2)+(3))|0)]=HEAP8[((($tmp3)+(3))|0)];
 HEAP32[(($8)>>2)]=848;
 label=2;break;
 case 2: 
 $6=$10;
 $7=$9;
 var $59=$6;
 var $60=$7;
 $4=$59;
 $5=$60;
 var $61=$4;
 var $62=(($61)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$5;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($63|0)==($66|0);
 var $68=$67^1;
 if($68){label=3;break;}else{label=5;break;}
 case 3: 
 var $70=HEAP32[(($8)>>2)];
 $1=$10;
 var $71=$1;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+8)|0);
 var $75=HEAP32[(($74)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 $2=$10;
 var $76=$2;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$78;
 var $80=(($79+4)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($76)|0);
 HEAP32[(($82)>>2)]=$81;
 label=2;break;
 case 5: 
 $3=$8;
 var $83=$3;
 var $84=HEAP32[(($83)>>2)];
 label=6;break;
 case 6: 
 var $86=$30;
 __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($86);
 STACKTOP=sp;return;
 case 7: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 var $89=$88$0;
 $28=$89;
 var $90=$88$1;
 $29=$90;
 var $91=$30;
 __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($91);
 label=8;break;
 case 8: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__110__list_impIjNS_9allocatorIjEEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 $12=$this;
 $13=$__n;
 var $16=$12;
 var $17=$16;
 $11=$17;
 var $18=$11;
 var $19=$18;
 $10=$19;
 var $20=$10;
 var $21=(($18)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=(($18+4)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=(($18+8)|0);
 $8=$23;
 $9=0;
 var $24=$8;
 var $25=$9;
 $6=$24;
 HEAP32[(($7)>>2)]=$25;
 var $26=$6;
 var $27=$26;
 $5=$7;
 var $28=$5;
 var $29=HEAP32[(($28)>>2)];
 $3=$27;
 HEAP32[(($4)>>2)]=$29;
 var $30=$3;
 var $31=$30;
 $2=$31;
 var $32=$2;
 var $33=(($30)|0);
 $1=$4;
 var $34=$1;
 var $35=HEAP32[(($34)>>2)];
 HEAP32[(($33)>>2)]=$35;
 var $36=$13;
 var $37=($36>>>0)>0;
 if($37){label=2;break;}else{label=6;break;}
 case 2: 
 var $39=$13;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj($16,$39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $41=$13;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($16,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 label=6;break;
 case 5: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 var $45=$44$0;
 $14=$45;
 var $46=$44$1;
 $15=$46;
 var $47=$16;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($47);
 label=7;break;
 case 6: 
 STACKTOP=sp;return;
 case 7: 
 var $50=$14;
 var $51=$15;
 var $52$0=$50;
 var $52$1=0;
 var $53$0=$52$0;
 var $53$1=$51;
 ___resumeException($53$0)
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 11564
// WARNING: content after a branch in a label, line: 11566
// WARNING: content after a branch in a label, line: 11567
// WARNING: content after a branch in a label, line: 11568

function __ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj($this,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $12=$this;
 $13=$__n;
 var $14=$12;
 var $15=$13;
 var $16=__ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($14);
 var $17=($15>>>0)>($16>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$14;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19);
 label=3;break;
 case 3: 
 var $21=$14;
 $11=$21;
 var $22=$11;
 var $23=(($22+8)|0);
 $10=$23;
 var $24=$10;
 var $25=$24;
 $9=$25;
 var $26=$9;
 var $27=$26;
 var $28=$13;
 $4=$27;
 $5=$28;
 var $29=$4;
 var $30=$5;
 $1=$29;
 $2=$30;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=__Znwj($32);
 var $34=$14;
 var $35=(($34+4)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$14;
 var $37=(($36)|0);
 HEAP32[(($37)>>2)]=$33;
 var $38=$14;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$13;
 var $42=(($40+$41)|0);
 var $43=$14;
 $8=$43;
 var $44=$8;
 var $45=(($44+8)|0);
 $7=$45;
 var $46=$7;
 var $47=$46;
 $6=$47;
 var $48=$6;
 var $49=(($48)|0);
 HEAP32[(($49)>>2)]=$42;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10=(sp)+(16);
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $__a;
 $14=$this;
 $15=$__n;
 var $16=$14;
 var $17=$16;
 $13=$17;
 var $18=$13;
 var $19=(($18+8)|0);
 $12=$19;
 var $20=$12;
 var $21=$20;
 $11=$21;
 var $22=$11;
 var $23=$22;
 $__a=$23;
 label=2;break;
 case 2: 
 var $25=$__a;
 var $26=$16;
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 $1=$28;
 var $29=$1;
 $7=$25;
 $8=$29;
 var $30=$10;
 var $31=$7;
 var $32=$8;
 var $tmp_i=$6;
 var $tmp1_i=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $4=$31;
 $5=$32;
 var $33=$4;
 var $34=$5;
 $2=$33;
 $3=$34;
 var $35=$2;
 var $36=$3;
 var $37=($36|0)==0;
 if($37){var $39=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[($36)]=0;
 var $39=$36;label=4;break;
 case 4: 
 var $39;
 var $40=$16;
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+1)|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=$15;
 var $45=((($44)-(1))|0);
 $15=$45;
 label=5;break;
 case 5: 
 var $47=$15;
 var $48=($47>>>0)>0;
 if($48){label=2;break;}else{label=6;break;}
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $30=$this;
 var $31=$30;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=2;break;}else{label=6;break;}
 case 2: 
 $29=$31;
 var $36=$29;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 $27=$36;
 $28=$38;
 var $39=$27;
 label=3;break;
 case 3: 
 var $41=$28;
 var $42=(($39+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)!=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 $26=$39;
 var $46=$26;
 var $47=(($46+8)|0);
 $25=$47;
 var $48=$25;
 var $49=$48;
 $24=$49;
 var $50=$24;
 var $51=$50;
 var $52=(($39+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(1))|0);
 HEAP32[(($52)>>2)]=$54;
 $23=$54;
 var $55=$23;
 $19=$51;
 $20=$55;
 var $56=$22;
 var $57=$19;
 var $58=$20;
 var $tmp_i_i_i=$18;
 var $tmp1_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $16=$57;
 $17=$58;
 var $59=$16;
 var $60=$17;
 $14=$59;
 $15=$60;
 var $61=$14;
 var $62=$15;
 label=3;break;
 case 5: 
 $7=$31;
 var $63=$7;
 var $64=(($63+8)|0);
 $6=$64;
 var $65=$6;
 var $66=$65;
 $5=$66;
 var $67=$5;
 var $68=$67;
 var $69=(($31)|0);
 var $70=HEAP32[(($69)>>2)];
 $4=$31;
 var $71=$4;
 $3=$71;
 var $72=$3;
 var $73=(($72+8)|0);
 $2=$73;
 var $74=$2;
 var $75=$74;
 $1=$75;
 var $76=$1;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($71)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 var $82=$80;
 var $83=((($81)-($82))|0);
 $11=$68;
 $12=$70;
 $13=$83;
 var $84=$11;
 var $85=$12;
 var $86=$13;
 $8=$84;
 $9=$85;
 $10=$86;
 var $87=$8;
 var $88=$9;
 __ZdlPv($88);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12=(sp)+(16);
 var $13;
 var $14=(sp)+(24);
 var $15=(sp)+(32);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(40);
 var $21=(sp)+(48);
 $19=$this;
 var $22=$19;
 var $23=$22;
 $18=$23;
 var $24=$18;
 var $25=(($24+8)|0);
 $17=$25;
 var $26=$17;
 var $27=$26;
 $16=$27;
 var $28=$16;
 var $29=$28;
 $13=$29;
 var $30=$15;
 var $31=$13;
 var $tmp_i=$12;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$31;
 var $32=$11;
 $10=$32;
 var $33=$10;
 HEAP32[(($20)>>2)]=-1;
 var $34=((2147483647)&-1);
 HEAP32[(($21)>>2)]=$34;
 $7=$20;
 $8=$21;
 var $35=$7;
 var $36=$8;
 var $tmp_i1=$6;
 var $tmp1_i2=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $4=$35;
 $5=$36;
 var $37=$5;
 var $38=$4;
 $1=$6;
 $2=$37;
 $3=$38;
 var $39=$1;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=($41>>>0)<($43>>>0);
 if($44){label=2;break;}else{label=3;break;}
 case 2: 
 var $46=$5;
 var $49=$46;label=4;break;
 case 3: 
 var $48=$4;
 var $49=$48;label=4;break;
 case 4: 
 var $49;
 label=5;break;
 case 5: 
 var $51=HEAP32[(($49)>>2)];
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $__t_i;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $__tmp_i_i_i1;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $__tmp_i_i_i;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30=sp;
 var $31=(sp)+(8);
 var $32;
 var $33;
 var $34=(sp)+(16);
 var $35=(sp)+(24);
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $__rt;
 var $__h=(sp)+(32);
 var $47=(sp)+(40);
 var $48;
 var $49;
 $46=$this;
 var $50=$46;
 $__rt=0;
 var $51=(($50+64)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)!=0;
 if($53){label=2;break;}else{label=19;break;}
 case 2: 
 $__rt=$50;
 var $55=(($50+64)|0);
 var $56=HEAP32[(($55)>>2)];
 HEAP32[(($47)>>2)]=564;
 $43=$__h;
 $44=$56;
 $45=$47;
 var $57=$43;
 var $58=$44;
 var $59=$45;
 $40=$57;
 $41=$58;
 $42=$59;
 var $60=$40;
 var $61=(($60)|0);
 var $62=$41;
 var $63=$42;
 $39=$63;
 var $64=$39;
 var $65=HEAP32[(($64)>>2)];
 $36=$61;
 $37=$62;
 $38=$65;
 var $66=$36;
 var $67=$37;
 var $68=$38;
 $33=$66;
 HEAP32[(($34)>>2)]=$67;
 HEAP32[(($35)>>2)]=$68;
 var $69=$33;
 var $70=$69;
 $32=$34;
 var $71=$32;
 var $72=HEAP32[(($71)>>2)];
 $26=$35;
 var $73=$26;
 var $74=HEAP32[(($73)>>2)];
 $29=$70;
 HEAP32[(($30)>>2)]=$72;
 HEAP32[(($31)>>2)]=$74;
 var $75=$29;
 var $76=(($75)|0);
 $28=$30;
 var $77=$28;
 var $78=HEAP32[(($77)>>2)];
 HEAP32[(($76)>>2)]=$78;
 var $79=(($75+4)|0);
 $27=$31;
 var $80=$27;
 var $81=HEAP32[(($80)>>2)];
 HEAP32[(($79)>>2)]=$81;
 var $82=$50;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+24)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $88=($86|0)!=0;
 if($88){label=4;break;}else{label=10;break;}
 case 4: 
 $__rt=0;
 label=10;break;
 case 5: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $92=$91$0;
 $48=$92;
 var $93=$91$1;
 $49=$93;
 $15=$__h;
 var $94=$15;
 $14=$94;
 var $95=$14;
 $12=$95;
 $13=0;
 var $96=$12;
 var $97=(($96)|0);
 $11=$97;
 var $98=$11;
 var $99=$98;
 $10=$99;
 var $100=$10;
 var $101=(($100)|0);
 var $102=HEAP32[(($101)>>2)];
 $__tmp_i_i_i1=$102;
 var $103=$13;
 var $104=(($96)|0);
 $9=$104;
 var $105=$9;
 var $106=$105;
 $8=$106;
 var $107=$8;
 var $108=(($107)|0);
 HEAP32[(($108)>>2)]=$103;
 var $109=$__tmp_i_i_i1;
 var $110=($109|0)!=0;
 if($110){label=6;break;}else{label=9;break;}
 case 6: 
 var $112=(($96)|0);
 $7=$112;
 var $113=$7;
 var $114=$113;
 $6=$114;
 var $115=$6;
 var $116=(($115+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$__tmp_i_i_i1;
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 label=9;break;
 case 8: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 var $123=$122$0;
 ___clang_call_terminate($123);
 throw "Reached an unreachable!";
 case 9: 
 label=20;break;
 case 10: 
 $5=$__h;
 var $125=$5;
 var $126=(($125)|0);
 $4=$126;
 var $127=$4;
 var $128=$127;
 $3=$128;
 var $129=$3;
 var $130=(($129)|0);
 var $131=HEAP32[(($130)>>2)];
 $__t_i=$131;
 var $132=(($125)|0);
 $2=$132;
 var $133=$2;
 var $134=$133;
 $1=$134;
 var $135=$1;
 var $136=(($135)|0);
 HEAP32[(($136)>>2)]=0;
 var $137=$__t_i;
 var $138=(function() { try { __THREW__ = 0; return _fclose($137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=5;break; }
 case 11: 
 var $140=($138|0)==0;
 if($140){label=12;break;}else{label=13;break;}
 case 12: 
 var $142=(($50+64)|0);
 HEAP32[(($142)>>2)]=0;
 label=14;break;
 case 13: 
 $__rt=0;
 label=14;break;
 case 14: 
 $25=$__h;
 var $145=$25;
 $24=$145;
 var $146=$24;
 $22=$146;
 $23=0;
 var $147=$22;
 var $148=(($147)|0);
 $21=$148;
 var $149=$21;
 var $150=$149;
 $20=$150;
 var $151=$20;
 var $152=(($151)|0);
 var $153=HEAP32[(($152)>>2)];
 $__tmp_i_i_i=$153;
 var $154=$23;
 var $155=(($147)|0);
 $19=$155;
 var $156=$19;
 var $157=$156;
 $18=$157;
 var $158=$18;
 var $159=(($158)|0);
 HEAP32[(($159)>>2)]=$154;
 var $160=$__tmp_i_i_i;
 var $161=($160|0)!=0;
 if($161){label=15;break;}else{label=18;break;}
 case 15: 
 var $163=(($147)|0);
 $17=$163;
 var $164=$17;
 var $165=$164;
 $16=$165;
 var $166=$16;
 var $167=(($166+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$__tmp_i_i_i;
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 label=18;break;
 case 17: 
 var $173$0 = ___cxa_find_matching_catch(-1, -1,0); var $173$1 = tempRet0;
 var $174=$173$0;
 ___clang_call_terminate($174);
 throw "Reached an unreachable!";
 case 18: 
 label=19;break;
 case 19: 
 var $176=$__rt;
 STACKTOP=sp;return $176;
 case 20: 
 var $178=$48;
 var $179=$49;
 var $180$0=$178;
 var $180$1=0;
 var $181$0=$180$0;
 var $181$1=$179;
 ___resumeException($181$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $__rt;
 var $__mdstr;
 $1=$this;
 $2=$__s;
 $3=$__mode;
 var $4=$1;
 $__rt=0;
 var $5=(($4+64)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=26;break;}
 case 2: 
 $__rt=$4;
 var $9=$3;
 var $10=$9&-3;
 switch(($10|0)){case 21:case 5:{ label=10;break;}case 12:{ label=11;break;}case 28:{ label=12;break;}case 60:{ label=13;break;}case 29:case 13:{ label=14;break;}case 16:case 48:{ label=3;break;}case 17:case 1:{ label=4;break;}case 8:{ label=5;break;}case 24:{ label=6;break;}case 56:{ label=7;break;}case 25:case 9:{ label=8;break;}case 20:case 52:{ label=9;break;}default:{label=15;break;}}break;
 case 3: 
 $__mdstr=600;
 label=16;break;
 case 4: 
 $__mdstr=376;
 label=16;break;
 case 5: 
 $__mdstr=120;
 label=16;break;
 case 6: 
 $__mdstr=4048;
 label=16;break;
 case 7: 
 $__mdstr=3600;
 label=16;break;
 case 8: 
 $__mdstr=3392;
 label=16;break;
 case 9: 
 $__mdstr=3160;
 label=16;break;
 case 10: 
 $__mdstr=3072;
 label=16;break;
 case 11: 
 $__mdstr=3000;
 label=16;break;
 case 12: 
 $__mdstr=2912;
 label=16;break;
 case 13: 
 $__mdstr=2848;
 label=16;break;
 case 14: 
 $__mdstr=2800;
 label=16;break;
 case 15: 
 $__rt=0;
 label=16;break;
 case 16: 
 var $25=$__rt;
 var $26=($25|0)!=0;
 if($26){label=17;break;}else{label=25;break;}
 case 17: 
 var $28=$2;
 var $29=$__mdstr;
 var $30=_fopen($28,$29);
 var $31=(($4+64)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($4+64)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=18;break;}else{label=23;break;}
 case 18: 
 var $36=$3;
 var $37=(($4+88)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=$3;
 var $39=$38&2;
 var $40=($39|0)!=0;
 if($40){label=19;break;}else{label=22;break;}
 case 19: 
 var $42=(($4+64)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=_fseek($43,0,2);
 var $45=($44|0)!=0;
 if($45){label=20;break;}else{label=21;break;}
 case 20: 
 var $47=(($4+64)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=_fclose($48);
 var $50=(($4+64)|0);
 HEAP32[(($50)>>2)]=0;
 $__rt=0;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=24;break;
 case 23: 
 $__rt=0;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $57=$__rt;
 STACKTOP=sp;return $57;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($10);
 STACKTOP=sp;return;
}


function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($10);
 STACKTOP=sp;return;
}


function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 HEAP32[(($6)>>2)]=$5;
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)-(12))|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$3;
 var $15=(($14+$13)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=$8;
 var $17=(($3+8)|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($17);
 var $18=$3;
 var $19=(($4+4)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($18,$19);
 STACKTOP=sp;return;
}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$this;
 var $4=$1;
 var $5=$4;
 HEAP32[(($5)>>2)]=6896;
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 label=6;break;
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 $2=$10;
 var $11=$9$1;
 $3=$11;
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=___cxa_begin_catch($13);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=10;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $17=(($4+96)|0);
 var $18=HEAP8[($17)];
 var $19=(($18)&1);
 if($19){label=7;break;}else{label=11;break;}
 case 7: 
 var $21=(($4+32)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 __ZdaPv($22);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1,0); var $27$1 = tempRet0;
 var $28=$27$0;
 $2=$28;
 var $29=$27$1;
 $3=$29;
 var $30=$4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($30);
 label=16;break;
 case 11: 
 var $32=(($4+97)|0);
 var $33=HEAP8[($32)];
 var $34=(($33)&1);
 if($34){label=12;break;}else{label=15;break;}
 case 12: 
 var $36=(($4+56)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=14;break;}else{label=13;break;}
 case 13: 
 __ZdaPv($37);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $42=$4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($42);
 STACKTOP=sp;return;
 case 16: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $__old_anc;
 $10=$this;
 $11=$__loc;
 var $12=$10;
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($12);
 var $18=$11;
 $9=$18;
 var $19=$9;
 var $20=__ZNKSt3__16locale9use_facetERNS0_2idE($19,17032);
 var $21=$20;
 var $22=(($12+68)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($12+98)|0);
 var $24=HEAP8[($23)];
 var $25=(($24)&1);
 var $26=($25&1);
 $__old_anc=$26;
 var $27=(($12+68)|0);
 var $28=HEAP32[(($27)>>2)];
 $8=$28;
 var $29=$8;
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+28)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=FUNCTION_TABLE[$33]($29);
 var $35=(($12+98)|0);
 var $36=($34&1);
 HEAP8[($35)]=$36;
 var $37=$__old_anc;
 var $38=(($37)&1);
 var $39=($38&1);
 var $40=(($12+98)|0);
 var $41=HEAP8[($40)];
 var $42=(($41)&1);
 var $43=($42&1);
 var $44=($39|0)!=($43|0);
 if($44){label=2;break;}else{label=14;break;}
 case 2: 
 var $46=$12;
 $4=$46;
 $5=0;
 $6=0;
 $7=0;
 var $47=$4;
 var $48=$5;
 var $49=(($47+8)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=$6;
 var $51=(($47+12)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=$7;
 var $53=(($47+16)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=$12;
 $1=$54;
 $2=0;
 $3=0;
 var $55=$1;
 var $56=$2;
 var $57=(($55+24)|0);
 HEAP32[(($57)>>2)]=$56;
 var $58=(($55+20)|0);
 HEAP32[(($58)>>2)]=$56;
 var $59=$3;
 var $60=(($55+28)|0);
 HEAP32[(($60)>>2)]=$59;
 var $61=(($12+98)|0);
 var $62=HEAP8[($61)];
 var $63=(($62)&1);
 if($63){label=3;break;}else{label=8;break;}
 case 3: 
 var $65=(($12+96)|0);
 var $66=HEAP8[($65)];
 var $67=(($66)&1);
 if($67){label=4;break;}else{label=7;break;}
 case 4: 
 var $69=(($12+32)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=6;break;}else{label=5;break;}
 case 5: 
 __ZdaPv($70);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $75=(($12+97)|0);
 var $76=HEAP8[($75)];
 var $77=(($76)&1);
 var $78=(($12+96)|0);
 var $79=($77&1);
 HEAP8[($78)]=$79;
 var $80=(($12+60)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($12+52)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($12+56)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($12+32)|0);
 HEAP32[(($85)>>2)]=$84;
 var $86=(($12+60)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=(($12+56)|0);
 HEAP32[(($87)>>2)]=0;
 var $88=(($12+97)|0);
 HEAP8[($88)]=0;
 label=13;break;
 case 8: 
 var $90=(($12+96)|0);
 var $91=HEAP8[($90)];
 var $92=(($91)&1);
 if($92){label=11;break;}else{label=9;break;}
 case 9: 
 var $94=(($12+32)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($12+44)|0);
 var $97=(($96)|0);
 var $98=($95|0)!=($97|0);
 if($98){label=10;break;}else{label=11;break;}
 case 10: 
 var $100=(($12+52)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($12+60)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($12+32)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($12+56)|0);
 HEAP32[(($105)>>2)]=$104;
 var $106=(($12+97)|0);
 HEAP8[($106)]=0;
 var $107=(($12+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=__Znaj($108);
 var $110=(($12+32)|0);
 HEAP32[(($110)>>2)]=$109;
 var $111=(($12+96)|0);
 HEAP8[($111)]=1;
 label=12;break;
 case 11: 
 var $113=(($12+52)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($12+60)|0);
 HEAP32[(($115)>>2)]=$114;
 var $116=(($12+60)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=__Znaj($117);
 var $119=(($12+56)|0);
 HEAP32[(($119)>>2)]=$118;
 var $120=(($12+97)|0);
 HEAP8[($120)]=1;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12=(sp)+(8);
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=(sp)+(16);
 var $20=(sp)+(24);
 $17=$this;
 $18=$__s;
 HEAP32[(($19)>>2)]=$__n;
 var $21=$17;
 var $22=$21;
 $13=$22;
 $14=0;
 $15=0;
 $16=0;
 var $23=$13;
 var $24=$14;
 var $25=(($23+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$15;
 var $27=(($23+12)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=$16;
 var $29=(($23+16)|0);
 HEAP32[(($29)>>2)]=$28;
 var $30=$21;
 $1=$30;
 $2=0;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=(($31+24)|0);
 HEAP32[(($33)>>2)]=$32;
 var $34=(($31+20)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$3;
 var $36=(($31+28)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($21+96)|0);
 var $38=HEAP8[($37)];
 var $39=(($38)&1);
 if($39){label=2;break;}else{label=5;break;}
 case 2: 
 var $41=(($21+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($42);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $47=(($21+97)|0);
 var $48=HEAP8[($47)];
 var $49=(($48)&1);
 if($49){label=6;break;}else{label=9;break;}
 case 6: 
 var $51=(($21+56)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=8;break;}else{label=7;break;}
 case 7: 
 __ZdaPv($52);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $57=HEAP32[(($19)>>2)];
 var $58=(($21+52)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($21+52)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60>>>0)>8;
 if($61){label=10;break;}else{label=15;break;}
 case 10: 
 var $63=(($21+98)|0);
 var $64=HEAP8[($63)];
 var $65=(($64)&1);
 if($65){label=11;break;}else{label=13;break;}
 case 11: 
 var $67=$18;
 var $68=($67|0)!=0;
 if($68){label=12;break;}else{label=13;break;}
 case 12: 
 var $70=$18;
 var $71=(($21+32)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($21+96)|0);
 HEAP8[($72)]=0;
 label=14;break;
 case 13: 
 var $74=(($21+52)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=__Znaj($75);
 var $77=(($21+32)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($21+96)|0);
 HEAP8[($78)]=1;
 label=14;break;
 case 14: 
 label=16;break;
 case 15: 
 var $81=(($21+44)|0);
 var $82=(($81)|0);
 var $83=(($21+32)|0);
 HEAP32[(($83)>>2)]=$82;
 var $84=(($21+52)|0);
 HEAP32[(($84)>>2)]=8;
 var $85=(($21+96)|0);
 HEAP8[($85)]=0;
 label=16;break;
 case 16: 
 var $87=(($21+98)|0);
 var $88=HEAP8[($87)];
 var $89=(($88)&1);
 if($89){label=25;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($20)>>2)]=8;
 $10=$19;
 $11=$20;
 var $91=$10;
 var $92=$11;
 var $tmp_i=$9;
 var $tmp1_i=$12;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $7=$91;
 $8=$92;
 var $93=$7;
 var $94=$8;
 $4=$9;
 $5=$93;
 $6=$94;
 var $95=$4;
 var $96=$5;
 var $97=HEAP32[(($96)>>2)];
 var $98=$6;
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)<($99|0);
 if($100){label=18;break;}else{label=19;break;}
 case 18: 
 var $102=$8;
 var $105=$102;label=20;break;
 case 19: 
 var $104=$7;
 var $105=$104;label=20;break;
 case 20: 
 var $105;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($21+60)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=$18;
 var $109=($108|0)!=0;
 if($109){label=21;break;}else{label=23;break;}
 case 21: 
 var $111=(($21+60)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112>>>0)>=8;
 if($113){label=22;break;}else{label=23;break;}
 case 22: 
 var $115=$18;
 var $116=(($21+56)|0);
 HEAP32[(($116)>>2)]=$115;
 var $117=(($21+97)|0);
 HEAP8[($117)]=0;
 label=24;break;
 case 23: 
 var $119=(($21+60)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=__Znaj($120);
 var $122=(($21+56)|0);
 HEAP32[(($122)>>2)]=$121;
 var $123=(($21+97)|0);
 HEAP8[($123)]=1;
 label=24;break;
 case 24: 
 label=26;break;
 case 25: 
 var $126=(($21+60)|0);
 HEAP32[(($126)>>2)]=0;
 var $127=(($21+56)|0);
 HEAP32[(($127)>>2)]=0;
 var $128=(($21+97)|0);
 HEAP8[($128)]=0;
 label=26;break;
 case 26: 
 var $130=$21;
 STACKTOP=sp;return $130;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$__off$0,$__off$1,$__way,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3=sp;
 var $4;
 var $5=(sp)+(8);
 var $6;
 var $7=(sp)+(16);
 var $8;
 var $9=(sp)+(24);
 var $10;
 var $11=(sp)+(32);
 var $12;
 var $13=(sp)+(40);
 var $14;
 var $15=(sp)+(48);
 var $16;
 var $17=(sp)+(56);
 var $18;
 var $19=(sp)+(64);
 var $20;
 var $21;
 var $22=(sp)+(72);
 var $23;
 var $24;
 var $__width;
 var $__whence;
 var $__r=(sp)+(80);
 var $25=(sp)+(96);
 $21=$this;
 var $st$0$0=(($22)|0);
 HEAP32[(($st$0$0)>>2)]=$__off$0;
 var $st$1$1=(($22+4)|0);
 HEAP32[(($st$1$1)>>2)]=$__off$1;
 $23=$__way;
 $24=$0;
 var $26=$21;
 var $27=(($26+68)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)!=0;
 if($29){label=3;break;}else{label=2;break;}
 case 2: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 ___cxa_throw($31,11336,(432));
 throw "Reached an unreachable!";
 case 3: 
 var $34=(($26+68)|0);
 var $35=HEAP32[(($34)>>2)];
 $20=$35;
 var $36=$20;
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+24)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 $__width=$41;
 var $42=(($26+64)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=7;break;}else{label=4;break;}
 case 4: 
 var $46=$__width;
 var $47=($46|0)<=0;
 if($47){label=5;break;}else{label=6;break;}
 case 5: 
 var $ld$2$0=(($22)|0);
 var $49$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($22+4)|0);
 var $49$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $50=(($49$0|0) != ($$etemp$4$0|0)) | (($49$1|0) != ($$etemp$4$1|0));
 if($50){label=7;break;}else{label=6;break;}
 case 6: 
 var $52=$26;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+24)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=FUNCTION_TABLE[$55]($26);
 var $57=($56|0)!=0;
 if($57){label=7;break;}else{label=8;break;}
 case 7: 
 $18=$agg_result;
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $st$6$0=(($19)|0);
 HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
 var $st$7$1=(($19+4)|0);
 HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
 var $59=$18;
 var $ld$8$0=(($19)|0);
 var $60$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($19+4)|0);
 var $60$1=HEAP32[(($ld$9$1)>>2)];
 $16=$59;
 var $st$10$0=(($17)|0);
 HEAP32[(($st$10$0)>>2)]=$60$0;
 var $st$11$1=(($17+4)|0);
 HEAP32[(($st$11$1)>>2)]=$60$1;
 var $61=$16;
 var $62=(($61)|0);
 var $63=$62;
 HEAP32[(($63)>>2)]=0; HEAP32[((($63)+(4))>>2)]=0;
 var $64=(($61+8)|0);
 var $ld$12$0=(($17)|0);
 var $65$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($17+4)|0);
 var $65$1=HEAP32[(($ld$13$1)>>2)];
 var $st$14$0=(($64)|0);
 HEAP32[(($st$14$0)>>2)]=$65$0;
 var $st$15$1=(($64+4)|0);
 HEAP32[(($st$15$1)>>2)]=$65$1;
 label=19;break;
 case 8: 
 var $67=$23;
 if(($67|0)==1){ label=10;break;}else if(($67|0)==2){ label=11;break;}else if(($67|0)==0){ label=9;break;}else{label=12;break;}
 case 9: 
 $__whence=0;
 label=13;break;
 case 10: 
 $__whence=1;
 label=13;break;
 case 11: 
 $__whence=2;
 label=13;break;
 case 12: 
 $4=$agg_result;
 var $$etemp$16$0=-1;
 var $$etemp$16$1=-1;
 var $st$17$0=(($5)|0);
 HEAP32[(($st$17$0)>>2)]=$$etemp$16$0;
 var $st$18$1=(($5+4)|0);
 HEAP32[(($st$18$1)>>2)]=$$etemp$16$1;
 var $72=$4;
 var $ld$19$0=(($5)|0);
 var $73$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($5+4)|0);
 var $73$1=HEAP32[(($ld$20$1)>>2)];
 $2=$72;
 var $st$21$0=(($3)|0);
 HEAP32[(($st$21$0)>>2)]=$73$0;
 var $st$22$1=(($3+4)|0);
 HEAP32[(($st$22$1)>>2)]=$73$1;
 var $74=$2;
 var $75=(($74)|0);
 var $76=$75;
 HEAP32[(($76)>>2)]=0; HEAP32[((($76)+(4))>>2)]=0;
 var $77=(($74+8)|0);
 var $ld$23$0=(($3)|0);
 var $78$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($3+4)|0);
 var $78$1=HEAP32[(($ld$24$1)>>2)];
 var $st$25$0=(($77)|0);
 HEAP32[(($st$25$0)>>2)]=$78$0;
 var $st$26$1=(($77+4)|0);
 HEAP32[(($st$26$1)>>2)]=$78$1;
 label=19;break;
 case 13: 
 var $80=(($26+64)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$__width;
 var $83=($82|0)>0;
 if($83){label=14;break;}else{label=15;break;}
 case 14: 
 var $85=$__width;
 var $86$0=$85;
 var $86$1=((((($85|0)<0))|0)?-1:0);
 var $ld$27$0=(($22)|0);
 var $87$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($22+4)|0);
 var $87$1=HEAP32[(($ld$28$1)>>2)];
 var $88$0=___muldi3($86$0,$86$1,$87$0,$87$1);var $88$1=tempRet0;
 var $91$1=$88$1;var $91$0=$88$0;label=16;break;
 case 15: 
 var $91$1=0;var $91$0=0;label=16;break;
 case 16: 
 var $91$0;
 var $91$1;
 var $92$0=$91$0;
 var $92=$92$0;
 var $93=$__whence;
 var $94=_fseek($81,$92,$93);
 var $95=($94|0)!=0;
 if($95){label=17;break;}else{label=18;break;}
 case 17: 
 $8=$agg_result;
 var $$etemp$29$0=-1;
 var $$etemp$29$1=-1;
 var $st$30$0=(($9)|0);
 HEAP32[(($st$30$0)>>2)]=$$etemp$29$0;
 var $st$31$1=(($9+4)|0);
 HEAP32[(($st$31$1)>>2)]=$$etemp$29$1;
 var $97=$8;
 var $ld$32$0=(($9)|0);
 var $98$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($9+4)|0);
 var $98$1=HEAP32[(($ld$33$1)>>2)];
 $6=$97;
 var $st$34$0=(($7)|0);
 HEAP32[(($st$34$0)>>2)]=$98$0;
 var $st$35$1=(($7+4)|0);
 HEAP32[(($st$35$1)>>2)]=$98$1;
 var $99=$6;
 var $100=(($99)|0);
 var $101=$100;
 HEAP32[(($101)>>2)]=0; HEAP32[((($101)+(4))>>2)]=0;
 var $102=(($99+8)|0);
 var $ld$36$0=(($7)|0);
 var $103$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($7+4)|0);
 var $103$1=HEAP32[(($ld$37$1)>>2)];
 var $st$38$0=(($102)|0);
 HEAP32[(($st$38$0)>>2)]=$103$0;
 var $st$39$1=(($102+4)|0);
 HEAP32[(($st$39$1)>>2)]=$103$1;
 label=19;break;
 case 18: 
 var $105=(($26+64)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=_ftell($106);
 var $108$0=$107;
 var $108$1=((((($107|0)<0))|0)?-1:0);
 $12=$__r;
 var $st$40$0=(($13)|0);
 HEAP32[(($st$40$0)>>2)]=$108$0;
 var $st$41$1=(($13+4)|0);
 HEAP32[(($st$41$1)>>2)]=$108$1;
 var $109=$12;
 var $ld$42$0=(($13)|0);
 var $110$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($13+4)|0);
 var $110$1=HEAP32[(($ld$43$1)>>2)];
 $10=$109;
 var $st$44$0=(($11)|0);
 HEAP32[(($st$44$0)>>2)]=$110$0;
 var $st$45$1=(($11+4)|0);
 HEAP32[(($st$45$1)>>2)]=$110$1;
 var $111=$10;
 var $112=(($111)|0);
 var $113=$112;
 HEAP32[(($113)>>2)]=0; HEAP32[((($113)+(4))>>2)]=0;
 var $114=(($111+8)|0);
 var $ld$46$0=(($11)|0);
 var $115$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($11+4)|0);
 var $115$1=HEAP32[(($ld$47$1)>>2)];
 var $st$48$0=(($114)|0);
 HEAP32[(($st$48$0)>>2)]=$115$0;
 var $st$49$1=(($114+4)|0);
 HEAP32[(($st$49$1)>>2)]=$115$1;
 var $116=(($26+72)|0);
 var $117=$25;
 var $118=$116;
 assert(8 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];
 var $tmp=$15;
 var $tmp1=$25;
 assert(8 % 1 === 0);(_memcpy($tmp, $tmp1, 8)|0);
 $14=$__r;
 var $119=$14;
 var $120=(($119)|0);
 var $121=$120;
 var $122=$15;
 assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
 var $123=$agg_result;
 var $124=$__r;
 assert(16 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];HEAP32[((($123)+(12))>>2)]=HEAP32[((($124)+(12))>>2)];
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$__sp,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__sp; $__sp=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__sp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($__sp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($__sp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($__sp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6=(sp)+(8);
 var $7;
 var $8;
 var $9=(sp)+(16);
 var $10;
 var $11=(sp)+(24);
 var $12;
 var $13;
 var $14=(sp)+(32);
 $12=$this;
 $13=$0;
 var $15=$12;
 var $16=(($15+64)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=$15;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($15);
 var $25=($24|0)!=0;
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 $10=$agg_result;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $st$1$0=(($11)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($11+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $27=$10;
 var $ld$3$0=(($11)|0);
 var $28$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($11+4)|0);
 var $28$1=HEAP32[(($ld$4$1)>>2)];
 $8=$27;
 var $st$5$0=(($9)|0);
 HEAP32[(($st$5$0)>>2)]=$28$0;
 var $st$6$1=(($9+4)|0);
 HEAP32[(($st$6$1)>>2)]=$28$1;
 var $29=$8;
 var $30=(($29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=0; HEAP32[((($31)+(4))>>2)]=0;
 var $32=(($29+8)|0);
 var $ld$7$0=(($9)|0);
 var $33$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($9+4)|0);
 var $33$1=HEAP32[(($ld$8$1)>>2)];
 var $st$9$0=(($32)|0);
 HEAP32[(($st$9$0)>>2)]=$33$0;
 var $st$10$1=(($32+4)|0);
 HEAP32[(($st$10$1)>>2)]=$33$1;
 label=7;break;
 case 4: 
 var $35=(($15+64)|0);
 var $36=HEAP32[(($35)>>2)];
 $2=$__sp;
 var $37=$2;
 var $38=(($37+8)|0);
 var $ld$11$0=(($38)|0);
 var $39$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$12$1)>>2)];
 var $40$0=$39$0;
 var $40=$40$0;
 var $41=_fseek($36,$40,0);
 var $42=($41|0)!=0;
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 $5=$agg_result;
 var $$etemp$13$0=-1;
 var $$etemp$13$1=-1;
 var $st$14$0=(($6)|0);
 HEAP32[(($st$14$0)>>2)]=$$etemp$13$0;
 var $st$15$1=(($6+4)|0);
 HEAP32[(($st$15$1)>>2)]=$$etemp$13$1;
 var $44=$5;
 var $ld$16$0=(($6)|0);
 var $45$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($6+4)|0);
 var $45$1=HEAP32[(($ld$17$1)>>2)];
 $3=$44;
 var $st$18$0=(($4)|0);
 HEAP32[(($st$18$0)>>2)]=$45$0;
 var $st$19$1=(($4+4)|0);
 HEAP32[(($st$19$1)>>2)]=$45$1;
 var $46=$3;
 var $47=(($46)|0);
 var $48=$47;
 HEAP32[(($48)>>2)]=0; HEAP32[((($48)+(4))>>2)]=0;
 var $49=(($46+8)|0);
 var $ld$20$0=(($4)|0);
 var $50$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($4+4)|0);
 var $50$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($49)|0);
 HEAP32[(($st$22$0)>>2)]=$50$0;
 var $st$23$1=(($49+4)|0);
 HEAP32[(($st$23$1)>>2)]=$50$1;
 label=7;break;
 case 6: 
 var $52=(($15+72)|0);
 $7=$__sp;
 var $53=$7;
 var $54=(($53)|0);
 var $55=$14;
 var $56=$54;
 assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
 var $57=$52;
 var $58=$14;
 assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
 var $59=$agg_result;
 var $60=$__sp;
 assert(16 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];HEAP32[((($59)+(12))>>2)]=HEAP32[((($60)+(12))>>2)];
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $__r;
 var $__extbe=sp;
 var $__nmemb;
 var $__c=(sp)+(8);
 var $__state=(sp)+(16);
 var $__update_st;
 var $__width;
 var $__off;
 $27=$this;
 var $28=$27;
 var $29=(($28+64)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=2;break;}else{label=3;break;}
 case 2: 
 $26=0;
 label=36;break;
 case 3: 
 var $34=(($28+68)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)!=0;
 if($36){label=5;break;}else{label=4;break;}
 case 4: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 __ZNSt8bad_castC2Ev($39);
 ___cxa_throw($38,11336,(432));
 throw "Reached an unreachable!";
 case 5: 
 var $41=(($28+92)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42&16;
 var $44=($43|0)!=0;
 if($44){label=6;break;}else{label=20;break;}
 case 6: 
 var $46=$28;
 $25=$46;
 var $47=$25;
 var $48=(($47+24)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$28;
 $15=$50;
 var $51=$15;
 var $52=(($51+20)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($49|0)!=($53|0);
 if($54){label=7;break;}else{label=10;break;}
 case 7: 
 var $56=$28;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+52)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($28,-1);
 var $61=($60|0)==-1;
 if($61){label=8;break;}else{label=9;break;}
 case 8: 
 $26=-1;
 label=36;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $66=(($28+68)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($28+72)|0);
 var $69=(($28+32)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($28+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($28+52)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($72+$74)|0);
 $1=$67;
 $2=$68;
 $3=$70;
 $4=$75;
 $5=$__extbe;
 var $76=$1;
 var $77=$76;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+20)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$2;
 var $82=$3;
 var $83=$4;
 var $84=$5;
 var $85=FUNCTION_TABLE[$80]($76,$81,$82,$83,$84);
 $__r=$85;
 var $86=HEAP32[(($__extbe)>>2)];
 var $87=(($28+32)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$86;
 var $90=$88;
 var $91=((($89)-($90))|0);
 $__nmemb=$91;
 var $92=(($28+32)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$__nmemb;
 var $95=(($28+64)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=_fwrite($93,1,$94,$96);
 var $98=$__nmemb;
 var $99=($97|0)!=($98|0);
 if($99){label=12;break;}else{label=13;break;}
 case 12: 
 $26=-1;
 label=36;break;
 case 13: 
 label=14;break;
 case 14: 
 var $103=$__r;
 var $104=($103|0)==1;
 if($104){label=11;break;}else{label=15;break;}
 case 15: 
 var $106=$__r;
 var $107=($106|0)==2;
 if($107){label=16;break;}else{label=17;break;}
 case 16: 
 $26=-1;
 label=36;break;
 case 17: 
 var $110=(($28+64)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=_fflush($111);
 var $113=($112|0)!=0;
 if($113){label=18;break;}else{label=19;break;}
 case 18: 
 $26=-1;
 label=36;break;
 case 19: 
 label=35;break;
 case 20: 
 var $117=(($28+92)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$118&8;
 var $120=($119|0)!=0;
 if($120){label=21;break;}else{label=34;break;}
 case 21: 
 var $122=(($28+80)|0);
 var $123=$__state;
 var $124=$122;
 assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
 $__update_st=0;
 var $125=(($28+98)|0);
 var $126=HEAP8[($125)];
 var $127=(($126)&1);
 if($127){label=22;break;}else{label=23;break;}
 case 22: 
 var $129=$28;
 $6=$129;
 var $130=$6;
 var $131=(($130+16)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$28;
 $7=$133;
 var $134=$7;
 var $135=(($134+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$132;
 var $138=$136;
 var $139=((($137)-($138))|0);
 var $140$0=$139;
 var $140$1=((((($139|0)<0))|0)?-1:0);
 var $st$0$0=(($__c)|0);
 HEAP32[(($st$0$0)>>2)]=$140$0;
 var $st$1$1=(($__c+4)|0);
 HEAP32[(($st$1$1)>>2)]=$140$1;
 label=29;break;
 case 23: 
 var $142=(($28+68)|0);
 var $143=HEAP32[(($142)>>2)];
 $8=$143;
 var $144=$8;
 var $145=$144;
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+24)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=FUNCTION_TABLE[$148]($144);
 $__width=$149;
 var $150=(($28+40)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($28+36)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$151;
 var $155=$153;
 var $156=((($154)-($155))|0);
 var $157$0=$156;
 var $157$1=((((($156|0)<0))|0)?-1:0);
 var $st$2$0=(($__c)|0);
 HEAP32[(($st$2$0)>>2)]=$157$0;
 var $st$3$1=(($__c+4)|0);
 HEAP32[(($st$3$1)>>2)]=$157$1;
 var $158=$__width;
 var $159=($158|0)>0;
 if($159){label=24;break;}else{label=25;break;}
 case 24: 
 var $161=$__width;
 var $162=$28;
 $9=$162;
 var $163=$9;
 var $164=(($163+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$28;
 $10=$166;
 var $167=$10;
 var $168=(($167+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$165;
 var $171=$169;
 var $172=((($170)-($171))|0);
 var $173=(Math_imul($161,$172)|0);
 var $174$0=$173;
 var $174$1=((((($173|0)<0))|0)?-1:0);
 var $ld$4$0=(($__c)|0);
 var $175$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($__c+4)|0);
 var $175$1=HEAP32[(($ld$5$1)>>2)];
 var $176$0=_i64Add($175$0,$175$1,$174$0,$174$1);var $176$1=tempRet0;
 var $st$6$0=(($__c)|0);
 HEAP32[(($st$6$0)>>2)]=$176$0;
 var $st$7$1=(($__c+4)|0);
 HEAP32[(($st$7$1)>>2)]=$176$1;
 label=28;break;
 case 25: 
 var $178=$28;
 $11=$178;
 var $179=$11;
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$28;
 $12=$182;
 var $183=$12;
 var $184=(($183+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($181|0)!=($185|0);
 if($186){label=26;break;}else{label=27;break;}
 case 26: 
 var $188=(($28+68)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($28+32)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($28+36)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$28;
 $13=$194;
 var $195=$13;
 var $196=(($195+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$28;
 $14=$198;
 var $199=$14;
 var $200=(($199+8)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$197;
 var $203=$201;
 var $204=((($202)-($203))|0);
 $16=$189;
 $17=$__state;
 $18=$191;
 $19=$193;
 $20=$204;
 var $205=$16;
 var $206=$205;
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+32)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$17;
 var $211=$18;
 var $212=$19;
 var $213=$20;
 var $214=FUNCTION_TABLE[$209]($205,$210,$211,$212,$213);
 $__off=$214;
 var $215=(($28+36)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($28+32)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$216;
 var $220=$218;
 var $221=((($219)-($220))|0);
 var $222=$__off;
 var $223=((($221)-($222))|0);
 var $224$0=$223;
 var $224$1=((((($223|0)<0))|0)?-1:0);
 var $ld$8$0=(($__c)|0);
 var $225$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($__c+4)|0);
 var $225$1=HEAP32[(($ld$9$1)>>2)];
 var $226$0=_i64Add($225$0,$225$1,$224$0,$224$1);var $226$1=tempRet0;
 var $st$10$0=(($__c)|0);
 HEAP32[(($st$10$0)>>2)]=$226$0;
 var $st$11$1=(($__c+4)|0);
 HEAP32[(($st$11$1)>>2)]=$226$1;
 $__update_st=1;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $230=(($28+64)|0);
 var $231=HEAP32[(($230)>>2)];
 var $ld$12$0=(($__c)|0);
 var $232$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($__c+4)|0);
 var $232$1=HEAP32[(($ld$13$1)>>2)];
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $233$0=_i64Subtract($$etemp$14$0,$$etemp$14$1,$232$0,$232$1);var $233$1=tempRet0;
 var $234$0=$233$0;
 var $234=$234$0;
 var $235=_fseek($231,$234,1);
 var $236=($235|0)!=0;
 if($236){label=30;break;}else{label=31;break;}
 case 30: 
 $26=-1;
 label=36;break;
 case 31: 
 var $239=$__update_st;
 var $240=(($239)&1);
 if($240){label=32;break;}else{label=33;break;}
 case 32: 
 var $242=(($28+72)|0);
 var $243=$242;
 var $244=$__state;
 assert(8 % 1 === 0);HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];
 label=33;break;
 case 33: 
 var $246=(($28+32)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($28+40)|0);
 HEAP32[(($248)>>2)]=$247;
 var $249=(($28+36)|0);
 HEAP32[(($249)>>2)]=$247;
 var $250=$28;
 $21=$250;
 $22=0;
 $23=0;
 $24=0;
 var $251=$21;
 var $252=$22;
 var $253=(($251+8)|0);
 HEAP32[(($253)>>2)]=$252;
 var $254=$23;
 var $255=(($251+12)|0);
 HEAP32[(($255)>>2)]=$254;
 var $256=$24;
 var $257=(($251+16)|0);
 HEAP32[(($257)>>2)]=$256;
 var $258=(($28+92)|0);
 HEAP32[(($258)>>2)]=0;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 $26=0;
 label=36;break;
 case 36: 
 var $262=$26;
 STACKTOP=sp;return $262;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12=sp;
 var $13;
 var $14;
 var $15=(sp)+(8);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37=(sp)+(16);
 var $38;
 var $39;
 var $40=(sp)+(24);
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $__initial;
 var $__1buf=(sp)+(32);
 var $__unget_sz;
 var $76=(sp)+(40);
 var $77=(sp)+(48);
 var $__c;
 var $__nmemb;
 var $__nmemb1;
 var $78=(sp)+(56);
 var $79=(sp)+(64);
 var $__r;
 var $__nr;
 var $__inext=(sp)+(72);
 $75=$this;
 var $80=$75;
 var $81=(($80+64)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=2;break;}else{label=3;break;}
 case 2: 
 $74=-1;
 label=37;break;
 case 3: 
 var $86=__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($80);
 var $87=($86&1);
 $__initial=$87;
 var $88=$80;
 $43=$88;
 var $89=$43;
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($91|0)==0;
 if($92){label=4;break;}else{label=5;break;}
 case 4: 
 var $94=$80;
 var $95=(($__1buf+1)|0);
 var $96=(($__1buf+1)|0);
 $1=$94;
 $2=$__1buf;
 $3=$95;
 $4=$96;
 var $97=$1;
 var $98=$2;
 var $99=(($97+8)|0);
 HEAP32[(($99)>>2)]=$98;
 var $100=$3;
 var $101=(($97+12)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=$4;
 var $103=(($97+16)|0);
 HEAP32[(($103)>>2)]=$102;
 label=5;break;
 case 5: 
 var $105=$__initial;
 var $106=(($105)&1);
 if($106){label=6;break;}else{label=7;break;}
 case 6: 
 var $138=0;label=11;break;
 case 7: 
 var $109=$80;
 $5=$109;
 var $110=$5;
 var $111=(($110+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$80;
 $6=$113;
 var $114=$6;
 var $115=(($114+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$112;
 var $118=$116;
 var $119=((($117)-($118))|0);
 var $120=(((($119|0))/(2))&-1);
 HEAP32[(($76)>>2)]=$120;
 HEAP32[(($77)>>2)]=4;
 $13=$76;
 $14=$77;
 var $121=$13;
 var $122=$14;
 var $tmp_i2=$12;
 var $tmp1_i3=$15;
 assert(1 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];
 $10=$121;
 $11=$122;
 var $123=$11;
 var $124=$10;
 $7=$12;
 $8=$123;
 $9=$124;
 var $125=$7;
 var $126=$8;
 var $127=HEAP32[(($126)>>2)];
 var $128=$9;
 var $129=HEAP32[(($128)>>2)];
 var $130=($127>>>0)<($129>>>0);
 if($130){label=8;break;}else{label=9;break;}
 case 8: 
 var $132=$11;
 var $135=$132;label=10;break;
 case 9: 
 var $134=$10;
 var $135=$134;label=10;break;
 case 10: 
 var $135;
 var $136=HEAP32[(($135)>>2)];
 var $138=$136;label=11;break;
 case 11: 
 var $138;
 $__unget_sz=$138;
 $__c=-1;
 var $139=$80;
 $16=$139;
 var $140=$16;
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$80;
 $17=$143;
 var $144=$17;
 var $145=(($144+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($142|0)==($146|0);
 if($147){label=12;break;}else{label=33;break;}
 case 12: 
 var $149=$80;
 $18=$149;
 var $150=$18;
 var $151=(($150+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$80;
 $19=$153;
 var $154=$19;
 var $155=(($154+16)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$__unget_sz;
 var $158=(((-$157))|0);
 var $159=(($156+$158)|0);
 var $160=$__unget_sz;
 var $161=$160;
 _memmove($152,$159,$161,1,0);
 var $162=(($80+98)|0);
 var $163=HEAP8[($162)];
 var $164=(($163)&1);
 if($164){label=13;break;}else{label=16;break;}
 case 13: 
 var $166=$80;
 $20=$166;
 var $167=$20;
 var $168=(($167+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$80;
 $21=$170;
 var $171=$21;
 var $172=(($171+8)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$169;
 var $175=$173;
 var $176=((($174)-($175))|0);
 var $177=$__unget_sz;
 var $178=((($176)-($177))|0);
 $__nmemb=$178;
 var $179=$80;
 $22=$179;
 var $180=$22;
 var $181=(($180+8)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=$__unget_sz;
 var $184=(($182+$183)|0);
 var $185=$__nmemb;
 var $186=(($80+64)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=_fread($184,1,$185,$187);
 $__nmemb=$188;
 var $189=$__nmemb;
 var $190=($189|0)!=0;
 if($190){label=14;break;}else{label=15;break;}
 case 14: 
 var $192=$80;
 var $193=$80;
 $23=$193;
 var $194=$23;
 var $195=(($194+8)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=$80;
 $24=$197;
 var $198=$24;
 var $199=(($198+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$__unget_sz;
 var $202=(($200+$201)|0);
 var $203=$80;
 $25=$203;
 var $204=$25;
 var $205=(($204+8)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$__unget_sz;
 var $208=(($206+$207)|0);
 var $209=$__nmemb;
 var $210=(($208+$209)|0);
 $26=$192;
 $27=$196;
 $28=$202;
 $29=$210;
 var $211=$26;
 var $212=$27;
 var $213=(($211+8)|0);
 HEAP32[(($213)>>2)]=$212;
 var $214=$28;
 var $215=(($211+12)|0);
 HEAP32[(($215)>>2)]=$214;
 var $216=$29;
 var $217=(($211+16)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=$80;
 $30=$218;
 var $219=$30;
 var $220=(($219+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=HEAP8[($221)];
 $31=$222;
 var $223=$31;
 var $224=($223&255);
 $__c=$224;
 label=15;break;
 case 15: 
 label=32;break;
 case 16: 
 var $227=(($80+32)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($80+36)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($80+40)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($80+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$232;
 var $236=$234;
 var $237=((($235)-($236))|0);
 _memmove($228,$230,$237,1,0);
 var $238=(($80+32)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($80+40)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($80+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$241;
 var $245=$243;
 var $246=((($244)-($245))|0);
 var $247=(($239+$246)|0);
 var $248=(($80+36)|0);
 HEAP32[(($248)>>2)]=$247;
 var $249=(($80+32)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($80+32)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(($80+44)|0);
 var $254=(($253)|0);
 var $255=($252|0)==($254|0);
 if($255){label=17;break;}else{label=18;break;}
 case 17: 
 var $261=8;label=19;break;
 case 18: 
 var $258=(($80+52)|0);
 var $259=HEAP32[(($258)>>2)];
 var $261=$259;label=19;break;
 case 19: 
 var $261;
 var $262=(($250+$261)|0);
 var $263=(($80+40)|0);
 HEAP32[(($263)>>2)]=$262;
 var $264=(($80+60)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$__unget_sz;
 var $267=((($265)-($266))|0);
 HEAP32[(($78)>>2)]=$267;
 var $268=(($80+40)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($80+36)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=$269;
 var $273=$271;
 var $274=((($272)-($273))|0);
 HEAP32[(($79)>>2)]=$274;
 $38=$78;
 $39=$79;
 var $275=$38;
 var $276=$39;
 var $tmp_i=$37;
 var $tmp1_i=$40;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $35=$275;
 $36=$276;
 var $277=$36;
 var $278=$35;
 $32=$37;
 $33=$277;
 $34=$278;
 var $279=$32;
 var $280=$33;
 var $281=HEAP32[(($280)>>2)];
 var $282=$34;
 var $283=HEAP32[(($282)>>2)];
 var $284=($281>>>0)<($283>>>0);
 if($284){label=20;break;}else{label=21;break;}
 case 20: 
 var $286=$36;
 var $289=$286;label=22;break;
 case 21: 
 var $288=$35;
 var $289=$288;label=22;break;
 case 22: 
 var $289;
 var $290=HEAP32[(($289)>>2)];
 $__nmemb1=$290;
 var $291=(($80+80)|0);
 var $292=(($80+72)|0);
 var $293=$291;
 var $294=$292;
 assert(8 % 1 === 0);HEAP32[(($293)>>2)]=HEAP32[(($294)>>2)];HEAP32[((($293)+(4))>>2)]=HEAP32[((($294)+(4))>>2)];
 var $295=(($80+36)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=$__nmemb1;
 var $298=(($80+64)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=_fread($296,1,$297,$299);
 $__nr=$300;
 var $301=$__nr;
 var $302=($301|0)!=0;
 if($302){label=23;break;}else{label=31;break;}
 case 23: 
 var $304=(($80+68)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($305|0)!=0;
 if($306){label=25;break;}else{label=24;break;}
 case 24: 
 var $308=___cxa_allocate_exception(4);
 var $309=$308;
 __ZNSt8bad_castC2Ev($309);
 ___cxa_throw($308,11336,(432));
 throw "Reached an unreachable!";
 case 25: 
 var $311=(($80+36)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=$__nr;
 var $314=(($312+$313)|0);
 var $315=(($80+40)|0);
 HEAP32[(($315)>>2)]=$314;
 var $316=(($80+68)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($80+72)|0);
 var $319=(($80+32)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($80+40)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($80+36)|0);
 var $324=$80;
 $41=$324;
 var $325=$41;
 var $326=(($325+8)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=$__unget_sz;
 var $329=(($327+$328)|0);
 var $330=$80;
 $42=$330;
 var $331=$42;
 var $332=(($331+8)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($80+60)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($333+$335)|0);
 $44=$317;
 $45=$318;
 $46=$320;
 $47=$322;
 $48=$323;
 $49=$329;
 $50=$336;
 $51=$__inext;
 var $337=$44;
 var $338=$337;
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339+16)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=$45;
 var $343=$46;
 var $344=$47;
 var $345=$48;
 var $346=$49;
 var $347=$50;
 var $348=$51;
 var $349=FUNCTION_TABLE[$341]($337,$342,$343,$344,$345,$346,$347,$348);
 $__r=$349;
 var $350=$__r;
 var $351=($350|0)==3;
 if($351){label=26;break;}else{label=27;break;}
 case 26: 
 var $353=$80;
 var $354=(($80+32)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($80+32)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($80+40)|0);
 var $359=HEAP32[(($358)>>2)];
 $52=$353;
 $53=$355;
 $54=$357;
 $55=$359;
 var $360=$52;
 var $361=$53;
 var $362=(($360+8)|0);
 HEAP32[(($362)>>2)]=$361;
 var $363=$54;
 var $364=(($360+12)|0);
 HEAP32[(($364)>>2)]=$363;
 var $365=$55;
 var $366=(($360+16)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$80;
 $56=$367;
 var $368=$56;
 var $369=(($368+12)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=HEAP8[($370)];
 $57=$371;
 var $372=$57;
 var $373=($372&255);
 $__c=$373;
 label=30;break;
 case 27: 
 var $375=HEAP32[(($__inext)>>2)];
 var $376=$80;
 $58=$376;
 var $377=$58;
 var $378=(($377+8)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=$__unget_sz;
 var $381=(($379+$380)|0);
 var $382=($375|0)!=($381|0);
 if($382){label=28;break;}else{label=29;break;}
 case 28: 
 var $384=$80;
 var $385=$80;
 $59=$385;
 var $386=$59;
 var $387=(($386+8)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$80;
 $60=$389;
 var $390=$60;
 var $391=(($390+8)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$__unget_sz;
 var $394=(($392+$393)|0);
 var $395=HEAP32[(($__inext)>>2)];
 $61=$384;
 $62=$388;
 $63=$394;
 $64=$395;
 var $396=$61;
 var $397=$62;
 var $398=(($396+8)|0);
 HEAP32[(($398)>>2)]=$397;
 var $399=$63;
 var $400=(($396+12)|0);
 HEAP32[(($400)>>2)]=$399;
 var $401=$64;
 var $402=(($396+16)|0);
 HEAP32[(($402)>>2)]=$401;
 var $403=$80;
 $65=$403;
 var $404=$65;
 var $405=(($404+12)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=HEAP8[($406)];
 $66=$407;
 var $408=$66;
 var $409=($408&255);
 $__c=$409;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $415=$80;
 $67=$415;
 var $416=$67;
 var $417=(($416+12)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=HEAP8[($418)];
 $68=$419;
 var $420=$68;
 var $421=($420&255);
 $__c=$421;
 label=34;break;
 case 34: 
 var $423=$80;
 $69=$423;
 var $424=$69;
 var $425=(($424+8)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=($426|0)==($__1buf|0);
 if($427){label=35;break;}else{label=36;break;}
 case 35: 
 var $429=$80;
 $70=$429;
 $71=0;
 $72=0;
 $73=0;
 var $430=$70;
 var $431=$71;
 var $432=(($430+8)|0);
 HEAP32[(($432)>>2)]=$431;
 var $433=$72;
 var $434=(($430+12)|0);
 HEAP32[(($434)>>2)]=$433;
 var $435=$73;
 var $436=(($430+16)|0);
 HEAP32[(($436)>>2)]=$435;
 label=36;break;
 case 36: 
 var $438=$__c;
 $74=$438;
 label=37;break;
 case 37: 
 var $440=$74;
 STACKTOP=sp;return $440;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 $19=$this;
 $20=$__c;
 var $21=$19;
 var $22=(($21+64)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=12;break;}
 case 2: 
 var $26=$21;
 $17=$26;
 var $27=$17;
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$21;
 $1=$30;
 var $31=$1;
 var $32=(($31+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($29>>>0)<($33>>>0);
 if($34){label=3;break;}else{label=12;break;}
 case 3: 
 var $36=$20;
 $2=$36;
 $3=-1;
 var $37=$2;
 var $38=$3;
 var $39=($37|0)==($38|0);
 if($39){label=4;break;}else{label=8;break;}
 case 4: 
 var $41=$21;
 $4=$41;
 $5=-1;
 var $42=$4;
 var $43=$5;
 var $44=(($42+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+$43)|0);
 HEAP32[(($44)>>2)]=$46;
 var $47=$20;
 $8=$47;
 var $48=$8;
 $6=$48;
 $7=-1;
 var $49=$6;
 var $50=$7;
 var $51=($49|0)==($50|0);
 if($51){label=5;break;}else{label=6;break;}
 case 5: 
 var $55=0;label=7;break;
 case 6: 
 var $54=$8;
 var $55=$54;label=7;break;
 case 7: 
 var $55;
 $18=$55;
 label=13;break;
 case 8: 
 var $57=(($21+88)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$58&16;
 var $60=($59|0)!=0;
 if($60){label=10;break;}else{label=9;break;}
 case 9: 
 var $62=$20;
 $9=$62;
 var $63=$9;
 var $64=(($63)&255);
 var $65=$21;
 $10=$65;
 var $66=$10;
 var $67=(($66+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=((($68)-(1))|0);
 var $70=HEAP8[($69)];
 $11=$64;
 $12=$70;
 var $71=$11;
 var $72=(($71<<24)>>24);
 var $73=$12;
 var $74=(($73<<24)>>24);
 var $75=($72|0)==($74|0);
 if($75){label=10;break;}else{label=11;break;}
 case 10: 
 var $77=$21;
 $13=$77;
 $14=-1;
 var $78=$13;
 var $79=$14;
 var $80=(($78+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+$79)|0);
 HEAP32[(($80)>>2)]=$82;
 var $83=$20;
 $15=$83;
 var $84=$15;
 var $85=(($84)&255);
 var $86=$21;
 $16=$86;
 var $87=$16;
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP8[($89)]=$85;
 var $90=$20;
 $18=$90;
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 $18=-1;
 label=13;break;
 case 13: 
 var $94=$18;
 STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $__1buf=sp;
 var $__pb_save;
 var $__epb_save;
 var $__nmemb;
 var $__extbe=(sp)+(8);
 var $__r;
 var $__e=(sp)+(16);
 var $__nmemb1;
 var $__nmemb2;
 $47=$this;
 $48=$__c;
 var $49=$47;
 var $50=(($49+64)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=2;break;}else{label=3;break;}
 case 2: 
 $46=-1;
 label=38;break;
 case 3: 
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($49);
 var $55=$49;
 $19=$55;
 var $56=$19;
 var $57=(($56+20)|0);
 var $58=HEAP32[(($57)>>2)];
 $__pb_save=$58;
 var $59=$49;
 $1=$59;
 var $60=$1;
 var $61=(($60+28)|0);
 var $62=HEAP32[(($61)>>2)];
 $__epb_save=$62;
 var $63=$48;
 $2=$63;
 $3=-1;
 var $64=$2;
 var $65=$3;
 var $66=($64|0)==($65|0);
 if($66){label=7;break;}else{label=4;break;}
 case 4: 
 var $68=$49;
 $4=$68;
 var $69=$4;
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)==0;
 if($72){label=5;break;}else{label=6;break;}
 case 5: 
 var $74=$49;
 var $75=(($__1buf+1)|0);
 $5=$74;
 $6=$__1buf;
 $7=$75;
 var $76=$5;
 var $77=$6;
 var $78=(($76+24)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=(($76+20)|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=$7;
 var $81=(($76+28)|0);
 HEAP32[(($81)>>2)]=$80;
 label=6;break;
 case 6: 
 var $83=$48;
 $8=$83;
 var $84=$8;
 var $85=(($84)&255);
 var $86=$49;
 $9=$86;
 var $87=$9;
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP8[($89)]=$85;
 var $90=$49;
 $10=$90;
 $11=1;
 var $91=$10;
 var $92=$11;
 var $93=(($91+24)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+$92)|0);
 HEAP32[(($93)>>2)]=$95;
 label=7;break;
 case 7: 
 var $97=$49;
 $12=$97;
 var $98=$12;
 var $99=(($98+24)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$49;
 $13=$101;
 var $102=$13;
 var $103=(($102+20)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($100|0)!=($104|0);
 if($105){label=8;break;}else{label=34;break;}
 case 8: 
 var $107=(($49+98)|0);
 var $108=HEAP8[($107)];
 var $109=(($108)&1);
 if($109){label=9;break;}else{label=12;break;}
 case 9: 
 var $111=$49;
 $14=$111;
 var $112=$14;
 var $113=(($112+24)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$49;
 $15=$115;
 var $116=$15;
 var $117=(($116+20)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$114;
 var $120=$118;
 var $121=((($119)-($120))|0);
 $__nmemb=$121;
 var $122=$49;
 $16=$122;
 var $123=$16;
 var $124=(($123+20)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$__nmemb;
 var $127=(($49+64)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=_fwrite($125,1,$126,$128);
 var $130=$__nmemb;
 var $131=($129|0)!=($130|0);
 if($131){label=10;break;}else{label=11;break;}
 case 10: 
 $46=-1;
 label=38;break;
 case 11: 
 label=33;break;
 case 12: 
 var $135=(($49+32)|0);
 var $136=HEAP32[(($135)>>2)];
 HEAP32[(($__extbe)>>2)]=$136;
 label=13;break;
 case 13: 
 var $138=(($49+68)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)!=0;
 if($140){label=15;break;}else{label=14;break;}
 case 14: 
 var $142=___cxa_allocate_exception(4);
 var $143=$142;
 __ZNSt8bad_castC2Ev($143);
 ___cxa_throw($142,11336,(432));
 throw "Reached an unreachable!";
 case 15: 
 var $145=(($49+68)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($49+72)|0);
 var $148=$49;
 $17=$148;
 var $149=$17;
 var $150=(($149+20)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$49;
 $18=$152;
 var $153=$18;
 var $154=(($153+24)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($49+32)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($49+32)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($49+52)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+$161)|0);
 $20=$146;
 $21=$147;
 $22=$151;
 $23=$155;
 $24=$__e;
 $25=$157;
 $26=$162;
 $27=$__extbe;
 var $163=$20;
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$21;
 var $169=$22;
 var $170=$23;
 var $171=$24;
 var $172=$25;
 var $173=$26;
 var $174=$27;
 var $175=FUNCTION_TABLE[$167]($163,$168,$169,$170,$171,$172,$173,$174);
 $__r=$175;
 var $176=HEAP32[(($__e)>>2)];
 var $177=$49;
 $28=$177;
 var $178=$28;
 var $179=(($178+20)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($176|0)==($180|0);
 if($181){label=16;break;}else{label=17;break;}
 case 16: 
 $46=-1;
 label=38;break;
 case 17: 
 var $184=$__r;
 var $185=($184|0)==3;
 if($185){label=18;break;}else{label=21;break;}
 case 18: 
 var $187=$49;
 $29=$187;
 var $188=$29;
 var $189=(($188+24)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$49;
 $30=$191;
 var $192=$30;
 var $193=(($192+20)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$190;
 var $196=$194;
 var $197=((($195)-($196))|0);
 $__nmemb1=$197;
 var $198=$49;
 $31=$198;
 var $199=$31;
 var $200=(($199+20)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$__nmemb1;
 var $203=(($49+64)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=_fwrite($201,1,$202,$204);
 var $206=$__nmemb1;
 var $207=($205|0)!=($206|0);
 if($207){label=19;break;}else{label=20;break;}
 case 19: 
 $46=-1;
 label=38;break;
 case 20: 
 label=30;break;
 case 21: 
 var $211=$__r;
 var $212=($211|0)==0;
 if($212){label=23;break;}else{label=22;break;}
 case 22: 
 var $214=$__r;
 var $215=($214|0)==1;
 if($215){label=23;break;}else{label=28;break;}
 case 23: 
 var $217=HEAP32[(($__extbe)>>2)];
 var $218=(($49+32)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$217;
 var $221=$219;
 var $222=((($220)-($221))|0);
 $__nmemb2=$222;
 var $223=(($49+32)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$__nmemb2;
 var $226=(($49+64)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=_fwrite($224,1,$225,$227);
 var $229=$__nmemb2;
 var $230=($228|0)!=($229|0);
 if($230){label=24;break;}else{label=25;break;}
 case 24: 
 $46=-1;
 label=38;break;
 case 25: 
 var $233=$__r;
 var $234=($233|0)==1;
 if($234){label=26;break;}else{label=27;break;}
 case 26: 
 var $236=$49;
 var $237=HEAP32[(($__e)>>2)];
 var $238=$49;
 $32=$238;
 var $239=$32;
 var $240=(($239+24)|0);
 var $241=HEAP32[(($240)>>2)];
 $33=$236;
 $34=$237;
 $35=$241;
 var $242=$33;
 var $243=$34;
 var $244=(($242+24)|0);
 HEAP32[(($244)>>2)]=$243;
 var $245=(($242+20)|0);
 HEAP32[(($245)>>2)]=$243;
 var $246=$35;
 var $247=(($242+28)|0);
 HEAP32[(($247)>>2)]=$246;
 var $248=$49;
 var $249=$49;
 $36=$249;
 var $250=$36;
 var $251=(($250+28)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=$49;
 $37=$253;
 var $254=$37;
 var $255=(($254+20)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$252;
 var $258=$256;
 var $259=((($257)-($258))|0);
 $38=$248;
 $39=$259;
 var $260=$38;
 var $261=$39;
 var $262=(($260+24)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+$261)|0);
 HEAP32[(($262)>>2)]=$264;
 label=27;break;
 case 27: 
 label=29;break;
 case 28: 
 $46=-1;
 label=38;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $270=$__r;
 var $271=($270|0)==1;
 if($271){label=13;break;}else{label=32;break;}
 case 32: 
 label=33;break;
 case 33: 
 var $274=$49;
 var $275=$__pb_save;
 var $276=$__epb_save;
 $40=$274;
 $41=$275;
 $42=$276;
 var $277=$40;
 var $278=$41;
 var $279=(($277+24)|0);
 HEAP32[(($279)>>2)]=$278;
 var $280=(($277+20)|0);
 HEAP32[(($280)>>2)]=$278;
 var $281=$42;
 var $282=(($277+28)|0);
 HEAP32[(($282)>>2)]=$281;
 label=34;break;
 case 34: 
 var $284=$48;
 $45=$284;
 var $285=$45;
 $43=$285;
 $44=-1;
 var $286=$43;
 var $287=$44;
 var $288=($286|0)==($287|0);
 if($288){label=35;break;}else{label=36;break;}
 case 35: 
 var $292=0;label=37;break;
 case 36: 
 var $291=$45;
 var $292=$291;label=37;break;
 case 37: 
 var $292;
 $46=$292;
 label=38;break;
 case 38: 
 var $294=$46;
 STACKTOP=sp;return $294;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 $14=$this;
 var $15=$14;
 var $16=(($15+92)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&16;
 var $19=($18|0)!=0;
 if($19){label=9;break;}else{label=2;break;}
 case 2: 
 var $21=$15;
 $10=$21;
 $11=0;
 $12=0;
 $13=0;
 var $22=$10;
 var $23=$11;
 var $24=(($22+8)|0);
 HEAP32[(($24)>>2)]=$23;
 var $25=$12;
 var $26=(($22+12)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=$13;
 var $28=(($22+16)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($15+52)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30>>>0)>8;
 if($31){label=3;break;}else{label=7;break;}
 case 3: 
 var $33=(($15+98)|0);
 var $34=HEAP8[($33)];
 var $35=(($34)&1);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$15;
 var $38=(($15+32)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($15+32)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($15+52)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=((($43)-(1))|0);
 var $45=(($41+$44)|0);
 $1=$37;
 $2=$39;
 $3=$45;
 var $46=$1;
 var $47=$2;
 var $48=(($46+24)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($46+20)|0);
 HEAP32[(($49)>>2)]=$47;
 var $50=$3;
 var $51=(($46+28)|0);
 HEAP32[(($51)>>2)]=$50;
 label=6;break;
 case 5: 
 var $53=$15;
 var $54=(($15+56)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($15+56)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($15+60)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($59)-(1))|0);
 var $61=(($57+$60)|0);
 $4=$53;
 $5=$55;
 $6=$61;
 var $62=$4;
 var $63=$5;
 var $64=(($62+24)|0);
 HEAP32[(($64)>>2)]=$63;
 var $65=(($62+20)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$6;
 var $67=(($62+28)|0);
 HEAP32[(($67)>>2)]=$66;
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $70=$15;
 $7=$70;
 $8=0;
 $9=0;
 var $71=$7;
 var $72=$8;
 var $73=(($71+24)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($71+20)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$9;
 var $76=(($71+28)|0);
 HEAP32[(($76)>>2)]=$75;
 label=8;break;
 case 8: 
 var $78=(($15+92)|0);
 HEAP32[(($78)>>2)]=16;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $13=$this;
 var $14=$13;
 var $15=(($14+92)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&8;
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=2;break;}
 case 2: 
 var $20=$14;
 $9=$20;
 $10=0;
 $11=0;
 var $21=$9;
 var $22=$10;
 var $23=(($21+24)|0);
 HEAP32[(($23)>>2)]=$22;
 var $24=(($21+20)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$11;
 var $26=(($21+28)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=(($14+98)|0);
 var $28=HEAP8[($27)];
 var $29=(($28)&1);
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 var $31=$14;
 var $32=(($14+32)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($14+32)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($14+52)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($35+$37)|0);
 var $39=(($14+32)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($14+52)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+$42)|0);
 $1=$31;
 $2=$33;
 $3=$38;
 $4=$43;
 var $44=$1;
 var $45=$2;
 var $46=(($44+8)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=$3;
 var $48=(($44+12)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=$4;
 var $50=(($44+16)|0);
 HEAP32[(($50)>>2)]=$49;
 label=5;break;
 case 4: 
 var $52=$14;
 var $53=(($14+56)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($14+56)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($14+60)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($56+$58)|0);
 var $60=(($14+56)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($14+60)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($61+$63)|0);
 $5=$52;
 $6=$54;
 $7=$59;
 $8=$64;
 var $65=$5;
 var $66=$6;
 var $67=(($65+8)|0);
 HEAP32[(($67)>>2)]=$66;
 var $68=$7;
 var $69=(($65+12)|0);
 HEAP32[(($69)>>2)]=$68;
 var $70=$8;
 var $71=(($65+16)|0);
 HEAP32[(($71)>>2)]=$70;
 label=5;break;
 case 5: 
 var $73=(($14+92)|0);
 HEAP32[(($73)>>2)]=8;
 $12=1;
 label=7;break;
 case 6: 
 $12=0;
 label=7;break;
 case 7: 
 var $76=$12;
 STACKTOP=sp;return $76;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 $6=$this;
 var $11=$6;
 var $12=$11;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($12);
 var $13=$11;
 HEAP32[(($13)>>2)]=6896;
 var $14=(($11+32)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=(($11+36)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($11+40)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($11+52)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=(($11+56)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=(($11+60)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($11+64)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=(($11+68)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=(($11+72)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0;
 var $24=(($11+80)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0; HEAP32[((($25)+(4))>>2)]=0;
 var $26=(($11+88)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($11+92)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($11+96)|0);
 HEAP8[($28)]=0;
 var $29=(($11+97)|0);
 HEAP8[($29)]=0;
 var $30=(($11+98)|0);
 HEAP8[($30)]=0;
 var $31=$11;
 $5=$31;
 var $32=$5;
 var $33=(($32+4)|0);
 __ZNSt3__16localeC2ERKS0_($7,$33);
 label=2;break;
 case 2: 
 $4=$7;
 var $35=$4;
 var $36=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9has_facetERNS0_2idE($35,17032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $38$0 = ___cxa_find_matching_catch(-1, -1,0); var $38$1 = tempRet0;
 var $39=$38$0;
 ___clang_call_terminate($39);
 throw "Reached an unreachable!";
 case 4: 
 __ZNSt3__16localeD2Ev($7);
 if($36){label=5;break;}else{label=11;break;}
 case 5: 
 var $41=$11;
 $3=$41;
 var $42=$3;
 var $43=(($42+4)|0);
 __ZNSt3__16localeC2ERKS0_($10,$43);
 label=6;break;
 case 6: 
 $2=$10;
 var $45=$2;
 var $46=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($45,17032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $47=$46;
 label=8;break;
 case 8: 
 var $49=(($11+68)|0);
 HEAP32[(($49)>>2)]=$47;
 __ZNSt3__16localeD2Ev($10);
 var $50=(($11+68)|0);
 var $51=HEAP32[(($50)>>2)];
 $1=$51;
 var $52=$1;
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+28)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($52);
 var $58=(($11+98)|0);
 var $59=($57&1);
 HEAP8[($58)]=$59;
 label=11;break;
 case 9: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=$61$0;
 $8=$62;
 var $63=$61$1;
 $9=$63;
 label=13;break;
 case 10: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=$65$0;
 $8=$66;
 var $67=$65$1;
 $9=$67;
 __ZNSt3__16localeD2Ev($10);
 label=13;break;
 case 11: 
 var $69=$11;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($11,0,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=9;break; }
 case 12: 
 STACKTOP=sp;return;
 case 13: 
 var $76=$11;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($76);
 label=14;break;
 case 14: 
 var $78=$8;
 var $79=$9;
 var $80$0=$78;
 var $80$1=0;
 var $81$0=$80$0;
 var $81$1=$79;
 ___resumeException($81$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__list_impIjNS_9allocatorIjEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__110__list_impIjNS_9allocatorIjEEE5clearEv($2);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 15138
// WARNING: content after a branch in a label, line: 15140
// WARNING: content after a branch in a label, line: 15141
// WARNING: content after a branch in a label, line: 15142

function __ZNSt3__110__list_impIjNS_9allocatorIjEEE5clearEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12=(sp)+(8);
 var $13=(sp)+(16);
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $__na;
 var $__f;
 var $__l;
 var $__n;
 $29=$this;
 var $30=$29;
 $28=$30;
 var $31=$28;
 $27=$31;
 var $32=$27;
 var $33=(($32+8)|0);
 $26=$33;
 var $34=$26;
 var $35=$34;
 $25=$35;
 var $36=$25;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=2;break;}
 case 2: 
 $24=$30;
 var $41=$24;
 var $42=(($41+8)|0);
 $23=$42;
 var $43=$23;
 var $44=$43;
 $22=$44;
 var $45=$22;
 var $46=$45;
 $__na=$46;
 var $47=(($30)|0);
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 $__f=$49;
 var $50=(($30)|0);
 $15=$50;
 var $51=$15;
 $14=$51;
 var $52=$14;
 var $53=$52;
 var $54=$53;
 var $55=$54;
 $__l=$55;
 var $56=$__f;
 var $57=$__l;
 var $58=$57;
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 $1=$56;
 $2=$60;
 var $61=$2;
 var $62=$61;
 var $63=(($62+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$1;
 var $66=$65;
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=(($69+4)|0);
 HEAP32[(($70)>>2)]=$64;
 var $71=$1;
 var $72=$71;
 var $73=(($72)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$2;
 var $76=$75;
 var $77=(($76+4)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$78;
 var $80=(($79)|0);
 HEAP32[(($80)>>2)]=$74;
 $5=$30;
 var $81=$5;
 var $82=(($81+8)|0);
 $4=$82;
 var $83=$4;
 var $84=$83;
 $3=$84;
 var $85=$3;
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=0;
 label=3;break;
 case 3: 
 var $88=$__f;
 var $89=$__l;
 var $90=($88|0)!=($89|0);
 if($90){label=4;break;}else{label=6;break;}
 case 4: 
 var $92=$__f;
 $__n=$92;
 var $93=$__f;
 var $94=$93;
 var $95=(($94+4)|0);
 var $96=HEAP32[(($95)>>2)];
 $__f=$96;
 var $97=$__na;
 var $98=$__n;
 var $99=(($98+8)|0);
 $6=$99;
 var $100=$6;
 var $101=$100;
 var $102=$101;
 $10=$97;
 $11=$102;
 var $103=$13;
 var $104=$10;
 var $105=$11;
 var $tmp_i=$9;
 var $tmp1_i=$12;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $7=$104;
 $8=$105;
 var $106=$8;
 label=5;break;
 case 5: 
 var $108=$__na;
 var $109=$__n;
 $19=$108;
 $20=$109;
 $21=1;
 var $110=$19;
 var $111=$20;
 var $112=$21;
 $16=$110;
 $17=$111;
 $18=$112;
 var $113=$16;
 var $114=$17;
 var $115=$114;
 __ZdlPv($115);
 label=3;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN19LorenzAttractorDemoC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17=(sp)+(16);
 var $18;
 var $19;
 var $20=(sp)+(24);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30=(sp)+(32);
 var $31;
 var $32;
 var $33=(sp)+(40);
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 $40=$this;
 var $41=$40;
 var $42=$41;
 __ZN4DemoC2Ev($42);
 var $43=$41;
 HEAP32[(($43)>>2)]=7728;
 var $44=(($41+20)|0);
 $39=$44;
 var $45=$39;
 $38=$45;
 var $46=$38;
 var $47=$46;
 $37=$47;
 var $48=$37;
 var $49=$48;
 $36=$49;
 var $50=$36;
 var $51=(($48)|0);
 HEAP32[(($51)>>2)]=0;
 var $52=(($48+4)|0);
 HEAP32[(($52)>>2)]=0;
 var $53=(($48+8)|0);
 $34=$53;
 $35=0;
 var $54=$34;
 var $55=$35;
 $32=$54;
 HEAP32[(($33)>>2)]=$55;
 var $56=$32;
 var $57=$56;
 $31=$33;
 var $58=$31;
 var $59=HEAP32[(($58)>>2)];
 $29=$57;
 HEAP32[(($30)>>2)]=$59;
 var $60=$29;
 var $61=$60;
 $28=$61;
 var $62=$28;
 var $63=(($60)|0);
 $27=$30;
 var $64=$27;
 var $65=HEAP32[(($64)>>2)];
 HEAP32[(($63)>>2)]=$65;
 var $66=(($41+32)|0);
 $13=$66;
 var $67=$13;
 $12=$67;
 var $68=$12;
 var $69=$68;
 $11=$69;
 var $70=$11;
 var $71=$70;
 $10=$71;
 var $72=$10;
 var $73=(($70)|0);
 HEAP32[(($73)>>2)]=0;
 var $74=(($70+4)|0);
 HEAP32[(($74)>>2)]=0;
 var $75=(($70+8)|0);
 $8=$75;
 $9=0;
 var $76=$8;
 var $77=$9;
 $6=$76;
 HEAP32[(($7)>>2)]=$77;
 var $78=$6;
 var $79=$78;
 $5=$7;
 var $80=$5;
 var $81=HEAP32[(($80)>>2)];
 $3=$79;
 HEAP32[(($4)>>2)]=$81;
 var $82=$3;
 var $83=$82;
 $2=$83;
 var $84=$2;
 var $85=(($82)|0);
 $1=$4;
 var $86=$1;
 var $87=HEAP32[(($86)>>2)];
 HEAP32[(($85)>>2)]=$87;
 var $88=(($41+44)|0);
 $26=$88;
 var $89=$26;
 $25=$89;
 var $90=$25;
 var $91=$90;
 $24=$91;
 var $92=$24;
 var $93=$92;
 $23=$93;
 var $94=$23;
 var $95=(($92)|0);
 HEAP32[(($95)>>2)]=0;
 var $96=(($92+4)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=(($92+8)|0);
 $21=$97;
 $22=0;
 var $98=$21;
 var $99=$22;
 $19=$98;
 HEAP32[(($20)>>2)]=$99;
 var $100=$19;
 var $101=$100;
 $18=$20;
 var $102=$18;
 var $103=HEAP32[(($102)>>2)];
 $16=$101;
 HEAP32[(($17)>>2)]=$103;
 var $104=$16;
 var $105=$104;
 $15=$105;
 var $106=$15;
 var $107=(($104)|0);
 $14=$17;
 var $108=$14;
 var $109=HEAP32[(($108)>>2)];
 HEAP32[(($107)>>2)]=$109;
 var $110=(($41+16)|0);
 HEAP32[(($110)>>2)]=0;
 var $111=(($41+4)|0);
 HEAP32[(($111)>>2)]=0;
 var $112=(($41+8)|0);
 HEAP32[(($112)>>2)]=0;
 var $113=(($41+12)|0);
 HEAP32[(($113)>>2)]=0;
 var $114=(($41+56)|0);
 HEAP32[(($114)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN4DemoC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=7656;
 STACKTOP=sp;return;
}


function __ZN19LorenzAttractorDemoD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN19LorenzAttractorDemoD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZN19LorenzAttractorDemoD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=7728;
 var $4=(($2+44)|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($4);
 var $5=(($2+32)|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($5);
 var $6=(($2+20)|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($6);
 var $7=$2;
 __ZN4DemoD2Ev($7);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZN4DemoD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 STACKTOP=sp;return;
}


function __ZN19LorenzAttractorDemo4initEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $__a_i_i_i11;
 var $__i_i_i_i12;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $__a_i_i_i5;
 var $__i_i_i_i6;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $shaders=sp;
 var $148=(sp)+(16);
 var $149;
 var $150;
 var $151=(sp)+(32);
 var $152=(sp)+(48);
 var $153=(sp)+(64);
 var $154=(sp)+(72);
 var $155=(sp)+(88);
 var $156=(sp)+(104);
 var $157=(sp)+(120);
 var $geometryShaderFilename=(sp)+(128);
 var $158=(sp)+(144);
 var $159=(sp)+(160);
 var $160=(sp)+(176);
 var $it=(sp)+(184);
 var $161=(sp)+(192);
 var $res=(sp)+(200);
 var $logSize=(sp)+(208);
 var $shaderLog=(sp)+(216);
 var $written=(sp)+(232);
 var $nParticles;
 var $162=(sp)+(240);
 var $163=(sp)+(256);
 var $164=(sp)+(272);
 var $165=(sp)+(288);
 var $166=(sp)+(304);
 var $167=(sp)+(320);
 var $nFrameBuffers;
 var $windowWidth=(sp)+(336);
 var $windowHeight=(sp)+(344);
 $147=$this;
 var $168=$147;
 __ZN7gltools15ShaderContainerC1Ev($shaders);
 var $169=$shaders;
 var $170=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=36;break; }
 case 2: 
 $145=$151;
 $146=1160;
 var $172=$145;
 var $173=$146;
 $143=$172;
 $144=$173;
 var $174=$143;
 var $175=$174;
 var $176=(($174)|0);
 $142=$176;
 var $177=$142;
 $141=$177;
 var $178=$141;
 var $179=$178;
 $140=$179;
 var $180=$140;
 var $181=$180;
 $139=$181;
 var $182=$139;
 var $183=(($180)|0);
 var $184=$144;
 var $185=$144;
 $138=$185;
 var $186=$138;
 var $187=(function() { try { __THREW__ = 0; return _strlen($186) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=36;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($174,$184,$187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=36;break; }
 case 4: 
 label=5;break;
 case 5: 
 $137=$152;
 var $189=$137;
 $136=$189;
 var $190=$136;
 var $191=$190;
 var $192=(($190)|0);
 $135=$192;
 var $193=$135;
 $134=$193;
 var $194=$134;
 var $195=$194;
 $133=$195;
 var $196=$133;
 var $197=$196;
 $132=$197;
 var $198=$132;
 var $199=(($196)|0);
 $131=$190;
 var $200=$131;
 var $201=(($200)|0);
 $130=$201;
 var $202=$130;
 var $203=$202;
 $129=$203;
 var $204=$129;
 var $205=(($204)|0);
 var $206=(($205)|0);
 var $207=$206;
 var $208=(($207)|0);
 $__a_i_i_i=$208;
 $__i_i_i_i=0;
 label=6;break;
 case 6: 
 var $210=$__i_i_i_i;
 var $211=($210>>>0)<3;
 if($211){label=7;break;}else{label=8;break;}
 case 7: 
 var $213=$__i_i_i_i;
 var $214=$__a_i_i_i;
 var $215=(($214+($213<<2))|0);
 HEAP32[(($215)>>2)]=0;
 var $216=$__i_i_i_i;
 var $217=((($216)+(1))|0);
 $__i_i_i_i=$217;
 label=6;break;
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($148,$170,$151,$152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=37;break; }
 case 9: 
 var $219=(function() { try { __THREW__ = 0; return __ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($148,35633) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=38;break; }
 case 10: 
 HEAP32[(($153)>>2)]=$219;
 (function() { try { __THREW__ = 0; return __ZNSt3__14listIjNS_9allocatorIjEEE9push_backEOj($169,$153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=38;break; }
 case 11: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($152);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($151);
 var $222=$shaders;
 var $223=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=36;break; }
 case 12: 
 $127=$155;
 $128=2968;
 var $225=$127;
 var $226=$128;
 $125=$225;
 $126=$226;
 var $227=$125;
 var $228=$227;
 var $229=(($227)|0);
 $124=$229;
 var $230=$124;
 $123=$230;
 var $231=$123;
 var $232=$231;
 $122=$232;
 var $233=$122;
 var $234=$233;
 $121=$234;
 var $235=$121;
 var $236=(($233)|0);
 var $237=$126;
 var $238=$126;
 $120=$238;
 var $239=$120;
 var $240=(function() { try { __THREW__ = 0; return _strlen($239) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=36;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($227,$237,$240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=36;break; }
 case 14: 
 label=15;break;
 case 15: 
 $119=$156;
 var $242=$119;
 $118=$242;
 var $243=$118;
 var $244=$243;
 var $245=(($243)|0);
 $117=$245;
 var $246=$117;
 $116=$246;
 var $247=$116;
 var $248=$247;
 $115=$248;
 var $249=$115;
 var $250=$249;
 $114=$250;
 var $251=$114;
 var $252=(($249)|0);
 $113=$243;
 var $253=$113;
 var $254=(($253)|0);
 $112=$254;
 var $255=$112;
 var $256=$255;
 $111=$256;
 var $257=$111;
 var $258=(($257)|0);
 var $259=(($258)|0);
 var $260=$259;
 var $261=(($260)|0);
 $__a_i_i_i5=$261;
 $__i_i_i_i6=0;
 label=16;break;
 case 16: 
 var $263=$__i_i_i_i6;
 var $264=($263>>>0)<3;
 if($264){label=17;break;}else{label=18;break;}
 case 17: 
 var $266=$__i_i_i_i6;
 var $267=$__a_i_i_i5;
 var $268=(($267+($266<<2))|0);
 HEAP32[(($268)>>2)]=0;
 var $269=$__i_i_i_i6;
 var $270=((($269)+(1))|0);
 $__i_i_i_i6=$270;
 label=16;break;
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($154,$223,$155,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=40;break; }
 case 19: 
 var $272=(function() { try { __THREW__ = 0; return __ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($154,35632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=41;break; }
 case 20: 
 HEAP32[(($157)>>2)]=$272;
 (function() { try { __THREW__ = 0; return __ZNSt3__14listIjNS_9allocatorIjEEE9push_backEOj($222,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=41;break; }
 case 21: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($154);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($156);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($155);
 var $275=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=36;break; }
 case 22: 
 $109=$158;
 $110=2424;
 var $277=$109;
 var $278=$110;
 $107=$277;
 $108=$278;
 var $279=$107;
 var $280=$279;
 var $281=(($279)|0);
 $106=$281;
 var $282=$106;
 $105=$282;
 var $283=$105;
 var $284=$283;
 $104=$284;
 var $285=$104;
 var $286=$285;
 $103=$286;
 var $287=$103;
 var $288=(($285)|0);
 var $289=$108;
 var $290=$108;
 $102=$290;
 var $291=$102;
 var $292=(function() { try { __THREW__ = 0; return _strlen($291) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=36;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($279,$289,$292) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=36;break; }
 case 24: 
 label=25;break;
 case 25: 
 $101=$159;
 var $294=$101;
 $100=$294;
 var $295=$100;
 var $296=$295;
 var $297=(($295)|0);
 $99=$297;
 var $298=$99;
 $98=$298;
 var $299=$98;
 var $300=$299;
 $97=$300;
 var $301=$97;
 var $302=$301;
 $96=$302;
 var $303=$96;
 var $304=(($301)|0);
 $95=$295;
 var $305=$95;
 var $306=(($305)|0);
 $94=$306;
 var $307=$94;
 var $308=$307;
 $93=$308;
 var $309=$93;
 var $310=(($309)|0);
 var $311=(($310)|0);
 var $312=$311;
 var $313=(($312)|0);
 $__a_i_i_i11=$313;
 $__i_i_i_i12=0;
 label=26;break;
 case 26: 
 var $315=$__i_i_i_i12;
 var $316=($315>>>0)<3;
 if($316){label=27;break;}else{label=28;break;}
 case 27: 
 var $318=$__i_i_i_i12;
 var $319=$__a_i_i_i11;
 var $320=(($319+($318<<2))|0);
 HEAP32[(($320)>>2)]=0;
 var $321=$__i_i_i_i12;
 var $322=((($321)+(1))|0);
 $__i_i_i_i12=$322;
 label=26;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($geometryShaderFilename,$275,$158,$159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=43;break; }
 case 29: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($159);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($158);
 $92=$geometryShaderFilename;
 var $324=$92;
 $91=$324;
 var $325=$91;
 $90=$325;
 var $326=$90;
 var $327=(($326)|0);
 $89=$327;
 var $328=$89;
 var $329=$328;
 $88=$329;
 var $330=$88;
 var $331=(($330)|0);
 var $332=(($331)|0);
 var $333=$332;
 var $334=(($333)|0);
 var $335=$334;
 var $336=HEAP8[($335)];
 var $337=($336&255);
 var $338=$337&1;
 var $339=($338|0)!=0;
 if($339){label=30;break;}else{label=31;break;}
 case 30: 
 $84=$325;
 var $341=$84;
 var $342=(($341)|0);
 $83=$342;
 var $343=$83;
 var $344=$343;
 $82=$344;
 var $345=$82;
 var $346=(($345)|0);
 var $347=(($346)|0);
 var $348=$347;
 var $349=(($348+4)|0);
 var $350=HEAP32[(($349)>>2)];
 var $365=$350;label=32;break;
 case 31: 
 $87=$325;
 var $352=$87;
 var $353=(($352)|0);
 $86=$353;
 var $354=$86;
 var $355=$354;
 $85=$355;
 var $356=$85;
 var $357=(($356)|0);
 var $358=(($357)|0);
 var $359=$358;
 var $360=(($359)|0);
 var $361=$360;
 var $362=HEAP8[($361)];
 var $363=($362&255);
 var $364=$363>>1;
 var $365=$364;label=32;break;
 case 32: 
 var $365;
 var $366=($365|0)==0;
 if($366){label=45;break;}else{label=33;break;}
 case 33: 
 var $368=$shaders;
 var $369=(function() { try { __THREW__ = 0; return __ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($geometryShaderFilename,36313) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=44;break; }
 case 34: 
 HEAP32[(($160)>>2)]=$369;
 (function() { try { __THREW__ = 0; return __ZNSt3__14listIjNS_9allocatorIjEEE9push_backEOj($368,$160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=44;break; }
 case 35: 
 label=45;break;
 case 36: 
 var $373$0 = ___cxa_find_matching_catch(-1, -1); var $373$1 = tempRet0;
 var $374=$373$0;
 $149=$374;
 var $375=$373$1;
 $150=$375;
 label=137;break;
 case 37: 
 var $377$0 = ___cxa_find_matching_catch(-1, -1); var $377$1 = tempRet0;
 var $378=$377$0;
 $149=$378;
 var $379=$377$1;
 $150=$379;
 label=39;break;
 case 38: 
 var $381$0 = ___cxa_find_matching_catch(-1, -1); var $381$1 = tempRet0;
 var $382=$381$0;
 $149=$382;
 var $383=$381$1;
 $150=$383;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($148);
 label=39;break;
 case 39: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($152);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($151);
 label=137;break;
 case 40: 
 var $386$0 = ___cxa_find_matching_catch(-1, -1); var $386$1 = tempRet0;
 var $387=$386$0;
 $149=$387;
 var $388=$386$1;
 $150=$388;
 label=42;break;
 case 41: 
 var $390$0 = ___cxa_find_matching_catch(-1, -1); var $390$1 = tempRet0;
 var $391=$390$0;
 $149=$391;
 var $392=$390$1;
 $150=$392;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($154);
 label=42;break;
 case 42: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($156);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($155);
 label=137;break;
 case 43: 
 var $395$0 = ___cxa_find_matching_catch(-1, -1); var $395$1 = tempRet0;
 var $396=$395$0;
 $149=$396;
 var $397=$395$1;
 $150=$397;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($159);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($158);
 label=137;break;
 case 44: 
 var $399$0 = ___cxa_find_matching_catch(-1, -1); var $399$1 = tempRet0;
 var $400=$399$0;
 $149=$400;
 var $401=$399$1;
 $150=$401;
 label=136;break;
 case 45: 
 var $403=(function() { try { __THREW__ = 0; return _glCreateProgram() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=44;break; }
 case 46: 
 var $405=(($168+16)|0);
 HEAP32[(($405)>>2)]=$403;
 var $406=(($168+16)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=($407|0)!=0;
 if($408){label=49;break;}else{label=47;break;}
 case 47: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(1912,1416,63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=44;break; }
 case 48: 
 label=49;break;
 case 49: 
 var $412=$shaders;
 $81=$412;
 var $413=$81;
 var $414=$413;
 $80=$414;
 var $415=$80;
 var $416=(($415)|0);
 var $417=(($416+4)|0);
 var $418=HEAP32[(($417)>>2)];
 $78=$it;
 $79=$418;
 var $419=$78;
 var $420=$79;
 $76=$419;
 $77=$420;
 var $421=$76;
 var $422=(($421)|0);
 var $423=$77;
 HEAP32[(($422)>>2)]=$423;
 label=50;break;
 case 50: 
 var $425=$shaders;
 $75=$425;
 var $426=$75;
 var $427=$426;
 $74=$427;
 var $428=$74;
 var $429=(($428)|0);
 $73=$429;
 var $430=$73;
 $72=$430;
 var $431=$72;
 var $432=$431;
 var $433=$432;
 var $434=$433;
 $70=$161;
 $71=$434;
 var $435=$70;
 var $436=$71;
 $68=$435;
 $69=$436;
 var $437=$68;
 var $438=(($437)|0);
 var $439=$69;
 HEAP32[(($438)>>2)]=$439;
 $65=$it;
 $66=$161;
 var $440=$65;
 var $441=$66;
 $63=$440;
 $64=$441;
 var $442=$63;
 var $443=(($442)|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=$64;
 var $446=(($445)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=($444|0)==($447|0);
 var $449=$448^1;
 label=51;break;
 case 51: 
 if($449){label=52;break;}else{label=57;break;}
 case 52: 
 var $452=(($168+16)|0);
 var $453=HEAP32[(($452)>>2)];
 $62=$it;
 var $454=$62;
 var $455=(($454)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($456+8)|0);
 label=53;break;
 case 53: 
 var $459=HEAP32[(($457)>>2)];
 (function() { try { __THREW__ = 0; return _glAttachShader($453,$459) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=44;break; }
 case 54: 
 label=55;break;
 case 55: 
 $61=$it;
 var $462=$61;
 var $463=(($462)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=$464;
 var $466=(($465+4)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=(($462)|0);
 HEAP32[(($468)>>2)]=$467;
 label=56;break;
 case 56: 
 label=50;break;
 case 57: 
 var $471=(($168+16)|0);
 var $472=HEAP32[(($471)>>2)];
 (function() { try { __THREW__ = 0; return _glBindAttribLocation($472,0,1216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=44;break; }
 case 58: 
 var $474=(($168+16)|0);
 var $475=HEAP32[(($474)>>2)];
 (function() { try { __THREW__ = 0; return _glBindAttribLocation($475,1,816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=44;break; }
 case 59: 
 var $477=(($168+16)|0);
 var $478=HEAP32[(($477)>>2)];
 (function() { try { __THREW__ = 0; return _glBindAttribLocation($478,2,552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=44;break; }
 case 60: 
 var $480=(($168+16)|0);
 var $481=HEAP32[(($480)>>2)];
 (function() { try { __THREW__ = 0; return _glLinkProgram($481) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=44;break; }
 case 61: 
 var $483=(($168+16)|0);
 var $484=HEAP32[(($483)>>2)];
 (function() { try { __THREW__ = 0; return _glGetProgramiv($484,35714,$res) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=44;break; }
 case 62: 
 var $486=(($168+16)|0);
 var $487=HEAP32[(($486)>>2)];
 (function() { try { __THREW__ = 0; return _glGetProgramiv($487,35716,$logSize) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=44;break; }
 case 63: 
 var $489=HEAP32[(($logSize)>>2)];
 var $490=($489|0)>0;
 if($490){label=64;break;}else{label=71;break;}
 case 64: 
 var $492=HEAP32[(($logSize)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej($shaderLog,$492) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=44;break; }
 case 65: 
 var $494=(($168+16)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=HEAP32[(($logSize)>>2)];
 $60=$shaderLog;
 var $497=$60;
 var $498=$497;
 var $499=(($498)|0);
 var $500=HEAP32[(($499)>>2)];
 $59=$500;
 var $501=$59;
 (function() { try { __THREW__ = 0; return _glGetProgramInfoLog($495,$496,$written,$501) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=70;break; }
 case 66: 
 $58=$shaderLog;
 var $503=$58;
 var $504=$503;
 var $505=(($504)|0);
 var $506=HEAP32[(($505)>>2)];
 $57=$506;
 var $507=$57;
 var $508=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,$507) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=70;break; }
 case 67: 
 $55=$508;
 $56=8;
 var $510=$55;
 var $511=$56;
 var $512=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$511]($510) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=70;break; }
 case 68: 
 label=69;break;
 case 69: 
 __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
 label=71;break;
 case 70: 
 var $515$0 = ___cxa_find_matching_catch(-1, -1); var $515$1 = tempRet0;
 var $516=$515$0;
 $149=$516;
 var $517=$515$1;
 $150=$517;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
 label=136;break;
 case 71: 
 var $519=HEAP32[(($res)>>2)];
 var $520=($519|0)==0;
 if($520){label=72;break;}else{label=75;break;}
 case 72: 
 var $522=(($168+16)|0);
 var $523=HEAP32[(($522)>>2)];
 (function() { try { __THREW__ = 0; return _glDeleteProgram($523) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=44;break; }
 case 73: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(312,1416,92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=44;break; }
 case 74: 
 label=75;break;
 case 75: 
 var $527=(($168+16)|0);
 var $528=HEAP32[(($527)>>2)];
 (function() { try { __THREW__ = 0; return _glUseProgram($528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=44;break; }
 case 76: 
 var $530=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=44;break; }
 case 77: 
 $53=$162;
 $54=88;
 var $532=$53;
 var $533=$54;
 $51=$532;
 $52=$533;
 var $534=$51;
 var $535=$534;
 var $536=(($534)|0);
 $50=$536;
 var $537=$50;
 $49=$537;
 var $538=$49;
 var $539=$538;
 $48=$539;
 var $540=$48;
 var $541=$540;
 $47=$541;
 var $542=$47;
 var $543=(($540)|0);
 var $544=$52;
 var $545=$52;
 $46=$545;
 var $546=$46;
 var $547=(function() { try { __THREW__ = 0; return _strlen($546) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=44;break; }
 case 78: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($534,$544,$547) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=44;break; }
 case 79: 
 label=80;break;
 case 80: 
 var $549=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($530,$162,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=122;break; }
 case 81: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($162);
 $nParticles=$549;
 var $551=(($168+4)|0);
 (function() { try { __THREW__ = 0; return _glGenBuffers(1,$551) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=44;break; }
 case 82: 
 var $553=(($168+4)|0);
 var $554=HEAP32[(($553)>>2)];
 (function() { try { __THREW__ = 0; return _glBindBuffer(34962,$554) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=44;break; }
 case 83: 
 var $556=$nParticles;
 var $557=($556<<2);
 var $558=($557<<2);
 var $559=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=44;break; }
 case 84: 
 $44=$163;
 $45=4008;
 var $561=$44;
 var $562=$45;
 $42=$561;
 $43=$562;
 var $563=$42;
 var $564=$563;
 var $565=(($563)|0);
 $41=$565;
 var $566=$41;
 $40=$566;
 var $567=$40;
 var $568=$567;
 $39=$568;
 var $569=$39;
 var $570=$569;
 $38=$570;
 var $571=$38;
 var $572=(($569)|0);
 var $573=$43;
 var $574=$43;
 $37=$574;
 var $575=$37;
 var $576=(function() { try { __THREW__ = 0; return _strlen($575) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=44;break; }
 case 85: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($563,$573,$576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=44;break; }
 case 86: 
 label=87;break;
 case 87: 
 var $578=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($559,$163,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=123;break; }
 case 88: 
 (function() { try { __THREW__ = 0; return _glBufferData(34962,$558,$578,35048) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=123;break; }
 case 89: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($163);
 var $581=(($168+8)|0);
 (function() { try { __THREW__ = 0; return _glGenBuffers(1,$581) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=44;break; }
 case 90: 
 var $583=(($168+8)|0);
 var $584=HEAP32[(($583)>>2)];
 (function() { try { __THREW__ = 0; return _glBindBuffer(34962,$584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=44;break; }
 case 91: 
 var $586=$nParticles;
 var $587=($586<<2);
 var $588=($587<<2);
 var $589=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=44;break; }
 case 92: 
 $35=$164;
 $36=3560;
 var $591=$35;
 var $592=$36;
 $33=$591;
 $34=$592;
 var $593=$33;
 var $594=$593;
 var $595=(($593)|0);
 $32=$595;
 var $596=$32;
 $31=$596;
 var $597=$31;
 var $598=$597;
 $30=$598;
 var $599=$30;
 var $600=$599;
 $29=$600;
 var $601=$29;
 var $602=(($599)|0);
 var $603=$34;
 var $604=$34;
 $28=$604;
 var $605=$28;
 var $606=(function() { try { __THREW__ = 0; return _strlen($605) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=44;break; }
 case 93: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($593,$603,$606) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=44;break; }
 case 94: 
 label=95;break;
 case 95: 
 var $608=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($589,$164,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=96;break; } else { label=124;break; }
 case 96: 
 (function() { try { __THREW__ = 0; return _glBufferData(34962,$588,$608,35048) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=124;break; }
 case 97: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($164);
 var $611=(($168+12)|0);
 (function() { try { __THREW__ = 0; return _glGenVertexArrays(1,$611) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=44;break; }
 case 98: 
 var $613=(($168+12)|0);
 var $614=HEAP32[(($613)>>2)];
 (function() { try { __THREW__ = 0; return _glBindVertexArray($614) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=44;break; }
 case 99: 
 (function() { try { __THREW__ = 0; return _glEnableVertexAttribArray(0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=44;break; }
 case 100: 
 (function() { try { __THREW__ = 0; return _glEnableVertexAttribArray(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=44;break; }
 case 101: 
 var $618=(($168+4)|0);
 var $619=HEAP32[(($618)>>2)];
 (function() { try { __THREW__ = 0; return _glBindBuffer(34962,$619) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=44;break; }
 case 102: 
 (function() { try { __THREW__ = 0; return _glVertexAttribPointer(0,4,5126,0,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=44;break; }
 case 103: 
 var $622=(($168+8)|0);
 var $623=HEAP32[(($622)>>2)];
 (function() { try { __THREW__ = 0; return _glBindBuffer(34962,$623) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=44;break; }
 case 104: 
 (function() { try { __THREW__ = 0; return _glVertexAttribPointer(1,4,5126,0,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=44;break; }
 case 105: 
 var $626=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=44;break; }
 case 106: 
 $26=$165;
 $27=3336;
 var $628=$26;
 var $629=$27;
 $24=$628;
 $25=$629;
 var $630=$24;
 var $631=$630;
 var $632=(($630)|0);
 $23=$632;
 var $633=$23;
 $22=$633;
 var $634=$22;
 var $635=$634;
 $21=$635;
 var $636=$21;
 var $637=$636;
 $20=$637;
 var $638=$20;
 var $639=(($636)|0);
 var $640=$25;
 var $641=$25;
 $19=$641;
 var $642=$19;
 var $643=(function() { try { __THREW__ = 0; return _strlen($642) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=44;break; }
 case 107: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($630,$640,$643) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=44;break; }
 case 108: 
 label=109;break;
 case 109: 
 var $645=(function() { try { __THREW__ = 0; return __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($626,$165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=125;break; }
 case 110: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($165);
 if($645){label=111;break;}else{label=128;break;}
 case 111: 
 var $648=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=112;break; } else { label=44;break; }
 case 112: 
 $17=$166;
 $18=3152;
 var $650=$17;
 var $651=$18;
 $15=$650;
 $16=$651;
 var $652=$15;
 var $653=$652;
 var $654=(($652)|0);
 $14=$654;
 var $655=$14;
 $13=$655;
 var $656=$13;
 var $657=$656;
 $12=$657;
 var $658=$12;
 var $659=$658;
 $11=$659;
 var $660=$11;
 var $661=(($658)|0);
 var $662=$16;
 var $663=$16;
 $10=$663;
 var $664=$10;
 var $665=(function() { try { __THREW__ = 0; return _strlen($664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=44;break; }
 case 113: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($652,$662,$665) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { label=44;break; }
 case 114: 
 label=115;break;
 case 115: 
 var $667=(($168+4)|0);
 var $668=HEAP32[(($667)>>2)];
 (function() { try { __THREW__ = 0; return __ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($648,$166,$668) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=126;break; }
 case 116: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($166);
 var $670=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=44;break; }
 case 117: 
 $8=$167;
 $9=3056;
 var $672=$8;
 var $673=$9;
 $6=$672;
 $7=$673;
 var $674=$6;
 var $675=$674;
 var $676=(($674)|0);
 $5=$676;
 var $677=$5;
 $4=$677;
 var $678=$4;
 var $679=$678;
 $3=$679;
 var $680=$3;
 var $681=$680;
 $2=$681;
 var $682=$2;
 var $683=(($680)|0);
 var $684=$7;
 var $685=$7;
 $1=$685;
 var $686=$1;
 var $687=(function() { try { __THREW__ = 0; return _strlen($686) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=44;break; }
 case 118: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($674,$684,$687) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=44;break; }
 case 119: 
 label=120;break;
 case 120: 
 var $689=(($168+8)|0);
 var $690=HEAP32[(($689)>>2)];
 (function() { try { __THREW__ = 0; return __ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($670,$167,$690) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=127;break; }
 case 121: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($167);
 label=128;break;
 case 122: 
 var $693$0 = ___cxa_find_matching_catch(-1, -1); var $693$1 = tempRet0;
 var $694=$693$0;
 $149=$694;
 var $695=$693$1;
 $150=$695;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($162);
 label=136;break;
 case 123: 
 var $697$0 = ___cxa_find_matching_catch(-1, -1); var $697$1 = tempRet0;
 var $698=$697$0;
 $149=$698;
 var $699=$697$1;
 $150=$699;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($163);
 label=136;break;
 case 124: 
 var $701$0 = ___cxa_find_matching_catch(-1, -1); var $701$1 = tempRet0;
 var $702=$701$0;
 $149=$702;
 var $703=$701$1;
 $150=$703;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($164);
 label=136;break;
 case 125: 
 var $705$0 = ___cxa_find_matching_catch(-1, -1); var $705$1 = tempRet0;
 var $706=$705$0;
 $149=$706;
 var $707=$705$1;
 $150=$707;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($165);
 label=136;break;
 case 126: 
 var $709$0 = ___cxa_find_matching_catch(-1, -1); var $709$1 = tempRet0;
 var $710=$709$0;
 $149=$710;
 var $711=$709$1;
 $150=$711;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($166);
 label=136;break;
 case 127: 
 var $713$0 = ___cxa_find_matching_catch(-1, -1); var $713$1 = tempRet0;
 var $714=$713$0;
 $149=$714;
 var $715=$713$1;
 $150=$715;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($167);
 label=136;break;
 case 128: 
 $nFrameBuffers=0;
 var $717=(($168+20)|0);
 var $718=$nFrameBuffers;
 var $719=((($718)+(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($717,$719) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=129;break; } else { label=44;break; }
 case 129: 
 var $721=(($168+32)|0);
 var $722=$nFrameBuffers;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($721,$722) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=44;break; }
 case 130: 
 var $724=(($168+20)|0);
 $67=$724;
 var $725=$67;
 var $726=$725;
 var $727=(($726+4)|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=((($728)-(4))|0);
 label=131;break;
 case 131: 
 HEAP32[(($729)>>2)]=0;
 HEAP32[(($windowWidth)>>2)]=-1;
 HEAP32[(($windowHeight)>>2)]=-1;
 var $731=(function() { try { __THREW__ = 0; return __ZN11Application3getEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=44;break; }
 case 132: 
 (function() { try { __THREW__ = 0; return __ZNK11Application13getWindowSizeERiS0_($731,$windowWidth,$windowHeight) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=44;break; }
 case 133: 
 (function() { try { __THREW__ = 0; return _glEnable(3042) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=44;break; }
 case 134: 
 (function() { try { __THREW__ = 0; return _glBlendFuncSeparate(770,771,1,771) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=135;break; } else { label=44;break; }
 case 135: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($geometryShaderFilename);
 __ZN7gltools15ShaderContainerD2Ev($shaders);
 STACKTOP=sp;return;
 case 136: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($geometryShaderFilename);
 label=137;break;
 case 137: 
 __ZN7gltools15ShaderContainerD2Ev($shaders);
 label=138;break;
 case 138: 
 var $739=$149;
 var $740=$150;
 var $741$0=$739;
 var $741$1=0;
 var $742$0=$741$0;
 var $742$1=$740;
 ___resumeException($742$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN7gltools15ShaderContainerC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN7gltools15ShaderContainerC2Ev($2);
 STACKTOP=sp;return;
}


// WARNING: content after a branch in a label, line: 444
// WARNING: content after a branch in a label, line: 446
// WARNING: content after a branch in a label, line: 447
// WARNING: content after a branch in a label, line: 448
// WARNING: content after a branch in a label, line: 449
// WARNING: content after a branch in a label, line: 450
// WARNING: content after a branch in a label, line: 451
// WARNING: content after a branch in a label, line: 452
// WARNING: content after a branch in a label, line: 453
// WARNING: content after a branch in a label, line: 454
// WARNING: content after a branch in a label, line: 455
// WARNING: content after a branch in a label, line: 456
// WARNING: content after a branch in a label, line: 457
// WARNING: content after a branch in a label, line: 458
// WARNING: content after a branch in a label, line: 459
// WARNING: content after a branch in a label, line: 460
// WARNING: content after a branch in a label, line: 461
// WARNING: content after a branch in a label, line: 462
// WARNING: content after a branch in a label, line: 463
// WARNING: content after a branch in a label, line: 464
// WARNING: content after a branch in a label, line: 465
// WARNING: content after a branch in a label, line: 466
// WARNING: content after a branch in a label, line: 467
// WARNING: content after a branch in a label, line: 468
// WARNING: content after a branch in a label, line: 469
// WARNING: content after a branch in a label, line: 470
// WARNING: content after a branch in a label, line: 471
// WARNING: content after a branch in a label, line: 472
// WARNING: content after a branch in a label, line: 473
// WARNING: content after a branch in a label, line: 474
// WARNING: content after a branch in a label, line: 475
// WARNING: content after a branch in a label, line: 476
// WARNING: content after a branch in a label, line: 477

function __ZNSt3__14listIjNS_9allocatorIjEEE9push_backEOj($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=sp;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=(sp)+(8);
 var $20=(sp)+(16);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $__t_i;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44=(sp)+(24);
 var $45=(sp)+(32);
 var $46;
 var $47;
 var $48=(sp)+(40);
 var $49=(sp)+(48);
 var $__t21_i_i_i=(sp)+(56);
 var $50;
 var $51;
 var $52=(sp)+(64);
 var $53;
 var $54;
 var $55;
 var $56;
 var $57=(sp)+(72);
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $__tmp_i_i_i1;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $__tmp_i_i_i;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $__na;
 var $__hold=(sp)+(80);
 var $113=(sp)+(96);
 var $114;
 var $115;
 $111=$this;
 $112=$__x;
 var $116=$111;
 var $117=$116;
 $110=$117;
 var $118=$110;
 var $119=(($118+8)|0);
 $109=$119;
 var $120=$109;
 var $121=$120;
 $108=$121;
 var $122=$108;
 var $123=$122;
 $__na=$123;
 var $124=$__na;
 $88=$124;
 $89=1;
 var $125=$88;
 var $126=$89;
 $85=$125;
 $86=$126;
 $87=0;
 var $127=$85;
 var $128=$86;
 var $129=((($128)*(12))&-1);
 var $130=__Znwj($129);
 var $131=$130;
 var $132=$__na;
 $82=$113;
 $83=$132;
 $84=1;
 var $133=$82;
 var $134=$84;
 var $135=$83;
 $79=$133;
 $80=$135;
 $81=$134;
 var $136=$79;
 var $137=(($136)|0);
 var $138=$80;
 HEAP32[(($137)>>2)]=$138;
 var $139=(($136+4)|0);
 var $140=$81;
 HEAP32[(($139)>>2)]=$140;
 $58=$__hold;
 $59=$131;
 $60=$113;
 var $141=$58;
 var $142=$59;
 var $143=$60;
 $54=$141;
 $55=$142;
 $56=$143;
 var $144=$54;
 var $145=(($144)|0);
 var $146=$55;
 var $147=$56;
 $53=$147;
 var $148=$53;
 var $149=$57;
 var $150=$148;
 assert(8 % 1 === 0);HEAP32[(($149)>>2)]=HEAP32[(($150)>>2)];HEAP32[((($149)+(4))>>2)]=HEAP32[((($150)+(4))>>2)];
 var $tmp_i_i=$52;
 var $tmp1_i_i=$57;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
 $50=$145;
 $51=$146;
 var $151=$50;
 var $152=$51;
 var $tmp_i_i_i=$__t21_i_i_i;
 var $tmp2_i_i_i=$52;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
 $47=$151;
 HEAP32[(($48)>>2)]=$152;
 var $153=$47;
 var $154=$153;
 $46=$48;
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 $40=$__t21_i_i_i;
 var $157=$40;
 var $158=$49;
 var $159=$157;
 assert(8 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];
 var $tmp_i_i_i_i=$45;
 var $tmp1_i_i_i_i=$49;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
 $43=$154;
 HEAP32[(($44)>>2)]=$156;
 var $160=$43;
 var $161=(($160)|0);
 $42=$44;
 var $162=$42;
 var $163=HEAP32[(($162)>>2)];
 HEAP32[(($161)>>2)]=$163;
 var $164=(($160+4)|0);
 $41=$45;
 var $165=$41;
 var $166=$164;
 var $167=$165;
 assert(8 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($167)+(4))>>2)];
 var $168=$__na;
 $3=$__hold;
 var $169=$3;
 var $170=(($169)|0);
 $2=$170;
 var $171=$2;
 var $172=$171;
 $1=$172;
 var $173=$1;
 var $174=(($173)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+8)|0);
 $4=$176;
 var $177=$4;
 var $178=$177;
 var $179=$178;
 var $180=$112;
 $5=$180;
 var $181=$5;
 $16=$168;
 $17=$179;
 $18=$181;
 var $182=$20;
 var $183=$16;
 var $184=$17;
 var $185=$18;
 $15=$185;
 var $186=$15;
 var $tmp_i=$14;
 var $tmp1_i=$19;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$183;
 $12=$184;
 $13=$186;
 var $187=$11;
 var $188=$12;
 var $189=$13;
 $10=$189;
 var $190=$10;
 $7=$187;
 $8=$188;
 $9=$190;
 var $191=$7;
 var $192=$8;
 var $193=$192;
 var $194=($193|0)==0;
 if($194){var $200=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $196=$193;
 var $197=$9;
 $6=$197;
 var $198=$6;
 var $199=HEAP32[(($198)>>2)];
 HEAP32[(($196)>>2)]=$199;
 var $200=$196;label=3;break;
 case 3: 
 var $200;
 label=4;break;
 case 4: 
 var $202=$116;
 var $203=(($202)|0);
 $22=$203;
 var $204=$22;
 $21=$204;
 var $205=$21;
 var $206=$205;
 var $207=$206;
 var $208=$207;
 $25=$__hold;
 var $209=$25;
 var $210=(($209)|0);
 $24=$210;
 var $211=$24;
 var $212=$211;
 $23=$212;
 var $213=$23;
 var $214=(($213)|0);
 var $215=HEAP32[(($214)>>2)];
 $28=$__hold;
 var $216=$28;
 var $217=(($216)|0);
 $27=$217;
 var $218=$27;
 var $219=$218;
 $26=$219;
 var $220=$26;
 var $221=(($220)|0);
 var $222=HEAP32[(($221)>>2)];
 $29=$208;
 $30=$215;
 $31=$222;
 var $223=$30;
 var $224=$29;
 var $225=$224;
 var $226=(($225)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=$227;
 var $229=(($228+4)|0);
 HEAP32[(($229)>>2)]=$223;
 var $230=$29;
 var $231=$230;
 var $232=(($231)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=$30;
 var $235=$234;
 var $236=(($235)|0);
 HEAP32[(($236)>>2)]=$233;
 var $237=$31;
 var $238=$29;
 var $239=$238;
 var $240=(($239)|0);
 HEAP32[(($240)>>2)]=$237;
 var $241=$29;
 var $242=$31;
 var $243=$242;
 var $244=(($243+4)|0);
 HEAP32[(($244)>>2)]=$241;
 label=5;break;
 case 5: 
 var $246=$116;
 $34=$246;
 var $247=$34;
 var $248=(($247+8)|0);
 $33=$248;
 var $249=$33;
 var $250=$249;
 $32=$250;
 var $251=$32;
 var $252=(($251)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=((($253)+(1))|0);
 HEAP32[(($252)>>2)]=$254;
 $39=$__hold;
 var $255=$39;
 var $256=(($255)|0);
 $38=$256;
 var $257=$38;
 var $258=$257;
 $37=$258;
 var $259=$37;
 var $260=(($259)|0);
 var $261=HEAP32[(($260)>>2)];
 $__t_i=$261;
 var $262=(($255)|0);
 $36=$262;
 var $263=$36;
 var $264=$263;
 $35=$264;
 var $265=$35;
 var $266=(($265)|0);
 HEAP32[(($266)>>2)]=0;
 var $267=$__t_i;
 $78=$__hold;
 var $268=$78;
 $77=$268;
 var $269=$77;
 $75=$269;
 $76=0;
 var $270=$75;
 var $271=(($270)|0);
 $74=$271;
 var $272=$74;
 var $273=$272;
 $73=$273;
 var $274=$73;
 var $275=(($274)|0);
 var $276=HEAP32[(($275)>>2)];
 $__tmp_i_i_i1=$276;
 var $277=$76;
 var $278=(($270)|0);
 $64=$278;
 var $279=$64;
 var $280=$279;
 $63=$280;
 var $281=$63;
 var $282=(($281)|0);
 HEAP32[(($282)>>2)]=$277;
 var $283=$__tmp_i_i_i1;
 var $284=($283|0)!=0;
 if($284){label=6;break;}else{label=7;break;}
 case 6: 
 var $286=(($270)|0);
 $62=$286;
 var $287=$62;
 var $288=$287;
 $61=$288;
 var $289=$61;
 var $290=(($289+4)|0);
 var $291=$__tmp_i_i_i1;
 $71=$290;
 $72=$291;
 var $292=$71;
 var $293=(($292)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=$72;
 var $296=(($292+4)|0);
 var $297=HEAP32[(($296)>>2)];
 $68=$294;
 $69=$295;
 $70=$297;
 var $298=$68;
 var $299=$69;
 var $300=$70;
 $65=$298;
 $66=$299;
 $67=$300;
 var $301=$65;
 var $302=$66;
 var $303=$302;
 __ZdlPv($303);
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $326=(($310)|0);
 $91=$326;
 var $327=$91;
 var $328=$327;
 $90=$328;
 var $329=$90;
 var $330=(($329+4)|0);
 var $331=$__tmp_i_i_i;
 $100=$330;
 $101=$331;
 var $332=$100;
 var $333=(($332)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=$101;
 var $336=(($332+4)|0);
 var $337=HEAP32[(($336)>>2)];
 $97=$334;
 $98=$335;
 $99=$337;
 var $338=$97;
 var $339=$98;
 var $340=$99;
 $94=$338;
 $95=$339;
 $96=$340;
 var $341=$94;
 var $342=$95;
 var $343=$342;
 __ZdlPv($343);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $345=$114;
 var $346=$115;
 var $347$0=$345;
 var $347$1=0;
 var $348$0=$347$0;
 var $348$1=$346;
 ___resumeException($348$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($this,$key,$def){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $__i1_i_i1=sp;
 var $14;
 var $15=(sp)+(8);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=(sp)+(16);
 var $23;
 var $__i1_i_i=(sp)+(24);
 var $24;
 var $25=(sp)+(32);
 var $26;
 var $27;
 var $28=(sp)+(40);
 var $29;
 var $30;
 var $31;
 var $32;
 var $it=(sp)+(48);
 var $33=(sp)+(56);
 $30=$this;
 $31=$key;
 $32=$def;
 var $34=$30;
 var $35=(($34+80)|0);
 var $36=$31;
 $26=$35;
 $27=$36;
 var $37=$26;
 var $38=(($37)|0);
 var $39=$27;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($28,$38,$39);
 var $tmp_i=$25;
 var $tmp1_i=$28;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $24=$it;
 var $40=$24;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$25;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $23=$40;
 var $41=$23;
 var $42=(($41)|0);
 var $43=$42;
 var $44=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];
 var $45=(($34+80)|0);
 $21=$45;
 var $46=$21;
 var $47=(($46)|0);
 $20=$47;
 var $48=$20;
 $18=$22;
 $19=0;
 var $49=$18;
 var $50=$19;
 $16=$49;
 $17=$50;
 var $51=$16;
 var $52=(($51)|0);
 var $53=$17;
 HEAP32[(($52)>>2)]=$53;
 var $tmp_i2=$15;
 var $tmp1_i3=$22;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $14=$33;
 var $54=$14;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$15;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $13=$54;
 var $55=$13;
 var $56=(($55)|0);
 var $57=$56;
 var $58=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];
 $5=$it;
 $6=$33;
 var $59=$5;
 var $60=(($59)|0);
 var $61=$6;
 var $62=(($61)|0);
 $3=$60;
 $4=$62;
 var $63=$3;
 var $64=$4;
 $1=$63;
 $2=$64;
 var $65=$1;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$2;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($67|0)==($70|0);
 var $72=$71^1;
 if($72){label=2;break;}else{label=3;break;}
 case 2: 
 $12=$it;
 var $74=$12;
 var $75=(($74)|0);
 $11=$75;
 var $76=$11;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+8)|0);
 $10=$79;
 var $80=$10;
 $9=$80;
 var $81=$9;
 var $82=$81;
 var $83=$82;
 var $84=$83;
 $8=$84;
 var $85=$8;
 $7=$85;
 var $86=$7;
 var $87=$86;
 var $88=$87;
 var $89=(($88+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$90;
 $29=$91;
 label=4;break;
 case 3: 
 var $93=$32;
 $29=$93;
 label=4;break;
 case 4: 
 var $95=$29;
 STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($this,$key,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$key;
 $3=$val;
 var $4=$1;
 var $5=$3;
 var $6=(($4+20)|0);
 var $7=$2;
 var $8=__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($6,$7);
 HEAP32[(($8)>>2)]=$5;
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $__cs;
 $19=$this;
 $20=$__sz;
 var $21=$19;
 $18=$21;
 var $22=$18;
 var $23=$22;
 var $24=(($23+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$22;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$25;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=(((($31|0))/(4))&-1);
 $__cs=$32;
 var $33=$__cs;
 var $34=$20;
 var $35=($33>>>0)<($34>>>0);
 if($35){label=2;break;}else{label=3;break;}
 case 2: 
 var $37=$20;
 var $38=$__cs;
 var $39=((($37)-($38))|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($21,$39);
 label=9;break;
 case 3: 
 var $41=$__cs;
 var $42=$20;
 var $43=($41>>>0)>($42>>>0);
 if($43){label=4;break;}else{label=8;break;}
 case 4: 
 var $45=$21;
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$20;
 var $49=(($47+($48<<2))|0);
 $16=$21;
 $17=$49;
 var $50=$16;
 var $51=$50;
 var $52=$17;
 $14=$51;
 $15=$52;
 var $53=$14;
 label=5;break;
 case 5: 
 var $55=$15;
 var $56=(($53+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)!=($57|0);
 if($58){label=6;break;}else{label=7;break;}
 case 6: 
 $13=$53;
 var $60=$13;
 var $61=(($60+8)|0);
 $12=$61;
 var $62=$12;
 var $63=$62;
 $11=$63;
 var $64=$11;
 var $65=$64;
 var $66=(($53+4)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=((($67)-(4))|0);
 HEAP32[(($66)>>2)]=$68;
 $10=$68;
 var $69=$10;
 $6=$65;
 $7=$69;
 var $70=$9;
 var $71=$6;
 var $72=$7;
 var $tmp_i_i_i=$5;
 var $tmp1_i_i_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $3=$71;
 $4=$72;
 var $73=$3;
 var $74=$4;
 $1=$73;
 $2=$74;
 var $75=$1;
 var $76=$2;
 label=5;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN19LorenzAttractorDemo12resizeWindowEii($this,$width,$height){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 $4=$this;
 $5=$width;
 $6=$height;
 var $7=$4;
 $i=0;
 label=2;break;
 case 2: 
 var $9=$i;
 var $10=(($7+32)|0);
 $3=$10;
 var $11=$3;
 var $12=$11;
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$11;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=(((($20|0))/(4))&-1);
 var $22=($9>>>0)<($21>>>0);
 if($22){label=3;break;}else{label=5;break;}
 case 3: 
 var $24=(($7+32)|0);
 var $25=$i;
 $1=$24;
 $2=$25;
 var $26=$1;
 var $27=$2;
 var $28=$26;
 var $29=(($28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+($27<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 _glBindTexture(3553,$32);
 var $33=$5;
 var $34=$6;
 _glTexImage2D(3553,0,6408,$33,$34,0,6408,5121,0);
 label=4;break;
 case 4: 
 var $36=$i;
 var $37=((($36)+(1))|0);
 $i=$37;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN19LorenzAttractorDemo6renderEf($this,$simTime){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+816)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $nParticles;
 var $16=sp;
 var $17;
 var $18;
 var $windowWidth=(sp)+(16);
 var $windowHeight=(sp)+(24);
 var $aspectRatio=(sp)+(32);
 var $hTime;
 var $hMVP;
 var $hTask;
 var $eyeDist;
 var $eyeAzimuth;
 var $eyeZ=(sp)+(40);
 var $eye=(sp)+(48);
 var $19=(sp)+(64);
 var $20=(sp)+(72);
 var $identityMatrix=(sp)+(80);
 var $21=(sp)+(144);
 var $M=(sp)+(152);
 var $22=(sp)+(216);
 var $V=(sp)+(224);
 var $23=(sp)+(288);
 var $24=(sp)+(304);
 var $25=(sp)+(312);
 var $26=(sp)+(320);
 var $27=(sp)+(336);
 var $28=(sp)+(344);
 var $29=(sp)+(352);
 var $P=(sp)+(360);
 var $30=(sp)+(424);
 var $31=(sp)+(432);
 var $32=(sp)+(440);
 var $MVP=(sp)+(448);
 var $33=(sp)+(512);
 var $cursorX=(sp)+(576);
 var $cursorY=(sp)+(584);
 var $rayFront=(sp)+(592);
 var $34=(sp)+(608);
 var $35=(sp)+(616);
 var $rayBack=(sp)+(624);
 var $36=(sp)+(640);
 var $37=(sp)+(648);
 var $invMVP=(sp)+(656);
 var $38=(sp)+(720);
 var $39=(sp)+(736);
 var $40=(sp)+(752);
 var $41=(sp)+(768);
 var $rayDir=(sp)+(784);
 var $42=(sp)+(800);
 var $hWindowWidth;
 var $hWindowHeight;
 $14=$this;
 $15=$simTime;
 var $43=$14;
 var $44=__ZN6global3parEv();
 $12=$16;
 $13=88;
 var $45=$12;
 var $46=$13;
 $10=$45;
 $11=$46;
 var $47=$10;
 var $48=$47;
 var $49=(($47)|0);
 $9=$49;
 var $50=$9;
 $8=$50;
 var $51=$8;
 var $52=$51;
 $7=$52;
 var $53=$7;
 var $54=$53;
 $6=$54;
 var $55=$6;
 var $56=(($53)|0);
 var $57=$11;
 var $58=$11;
 $5=$58;
 var $59=$5;
 var $60=_strlen($59);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($47,$57,$60);
 var $61=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($44,$16,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($16);
 $nParticles=$61;
 HEAP32[(($windowWidth)>>2)]=-1;
 HEAP32[(($windowHeight)>>2)]=-1;
 var $63=__ZN11Application3getEv();
 __ZNK11Application13getWindowSizeERiS0_($63,$windowWidth,$windowHeight);
 var $64=HEAP32[(($windowWidth)>>2)];
 var $65=($64|0);
 var $66=HEAP32[(($windowHeight)>>2)];
 var $67=($66|0);
 var $68=($65)/($67);
 HEAPF32[(($aspectRatio)>>2)]=$68;
 var $69=(($43+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=_glGetUniformLocation($70,2992);
 $hTime=$71;
 var $72=$hTime;
 var $73=$15;
 _glUniform1f($72,$73);
 var $74=(($43+16)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=_glGetUniformLocation($75,2904);
 $hMVP=$76;
 var $77=(($43+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=_glGetUniformLocation($78,2840);
 $hTask=$79;
 $eyeDist=100;
 var $80=$15;
 var $81=($80)*((0.4000000059604645));
 $eyeAzimuth=$81;
 HEAPF32[(($eyeZ)>>2)]=25;
 var $82=$eyeDist;
 var $83=$eyeAzimuth;
 $4=$83;
 var $84=$4;
 var $85=Math_cos($84);
 var $86=($82)*($85);
 HEAPF32[(($19)>>2)]=$86;
 var $87=$eyeDist;
 var $88=$eyeAzimuth;
 $3=$88;
 var $89=$3;
 var $90=Math_sin($89);
 var $91=($87)*($90);
 HEAPF32[(($20)>>2)]=$91;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($eye,$19,$20,$eyeZ);
 HEAPF32[(($21)>>2)]=1;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($identityMatrix,$21);
 HEAPF32[(($22)>>2)]=1;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($M,$22);
 HEAPF32[(($24)>>2)]=0;
 HEAPF32[(($25)>>2)]=0;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($23,$24,$25,$eyeZ);
 HEAPF32[(($27)>>2)]=0;
 HEAPF32[(($28)>>2)]=0;
 HEAPF32[(($29)>>2)]=1;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($26,$27,$28,$29);
 __ZN3glm6lookAtIfEENS_6detail7tmat4x4IT_EERKNS1_5tvec3IS3_EES8_S8_($V,$eye,$23,$26);
 HEAPF32[(($30)>>2)]=25;
 HEAPF32[(($31)>>2)]=10;
 HEAPF32[(($32)>>2)]=200;
 __ZN3glm11perspectiveIfEENS_6detail7tmat4x4IT_EERKS3_S6_S6_S6_($P,$30,$aspectRatio,$31,$32);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($33,$P,$V);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($MVP,$33,$M);
 HEAPF32[(($cursorX)>>2)]=0;
 HEAPF32[(($cursorY)>>2)]=0;
 var $92=__ZN11Application3getEv();
 __ZNK11Application14getCursorPos01ERfS0_($92,$cursorX,$cursorY);
 var $93=HEAPF32[(($cursorX)>>2)];
 var $94=($93)*(2);
 var $95=($94)-(1);
 HEAPF32[(($cursorX)>>2)]=$95;
 var $96=HEAPF32[(($cursorY)>>2)];
 var $97=($96)*(2);
 var $98=(1)-($97);
 HEAPF32[(($cursorY)>>2)]=$98;
 HEAPF32[(($34)>>2)]=-1;
 HEAPF32[(($35)>>2)]=1;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($rayFront,$cursorX,$cursorY,$34,$35);
 HEAPF32[(($36)>>2)]=1;
 HEAPF32[(($37)>>2)]=1;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($rayBack,$cursorX,$cursorY,$36,$37);
 __ZN3glm7inverseIfEENS_6detail7tmat4x4IT_EERKS4_($invMVP,$MVP);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($38,$invMVP,$rayFront);
 var $99=__ZN3glm6detail5tvec4IfEaSERKS2_($rayFront,$38);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($39,$invMVP,$rayBack);
 var $100=__ZN3glm6detail5tvec4IfEaSERKS2_($rayBack,$39);
 var $101=(($rayFront+12)|0);
 var $102=$101;
 __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($40,$rayFront,$102);
 var $103=__ZN3glm6detail5tvec4IfEaSERKS2_($rayFront,$40);
 var $104=(($rayBack+12)|0);
 var $105=$104;
 __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($41,$rayBack,$105);
 var $106=__ZN3glm6detail5tvec4IfEaSERKS2_($rayBack,$41);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($42,$rayBack,$rayFront);
 __ZN3glm9normalizeIfEENS_6detail5tvec4IT_EERKS4_($rayDir,$42);
 var $107=__ZN11Application3getEv();
 var $108=(($rayFront)|0);
 var $109=$108;
 var $110=(($rayDir)|0);
 var $111=$110;
 __ZN11Application12setCursorRayEPfS0_($107,$109,$111);
 var $112=(($43+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=_glGetUniformLocation($113,2776);
 $hWindowWidth=$114;
 var $115=$hWindowWidth;
 var $116=HEAP32[(($windowWidth)>>2)];
 var $117=($116|0);
 _glUniform1f($115,$117);
 var $118=(($43+16)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=_glGetUniformLocation($119,2728);
 $hWindowHeight=$120;
 var $121=$hWindowHeight;
 var $122=HEAP32[(($windowHeight)>>2)];
 var $123=($122|0);
 _glUniform1f($121,$123);
 var $124=(($43+20)|0);
 $1=$124;
 $2=0;
 var $125=$1;
 var $126=$2;
 var $127=$125;
 var $128=(($127)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+($126<<2))|0);
 var $131=HEAP32[(($130)>>2)];
 _glBindFramebuffer(36160,$131);
 _glClear(16384);
 var $132=$hTask;
 _glUniform1i($132,0);
 var $133=$hMVP;
 var $134=__ZN3glm6detail7tmat4x4IfEixEj($MVP,0);
 var $135=__ZN3glm6detail5tvec4IfEixEj($134,0);
 _glUniformMatrix4fv($133,1,0,$135);
 var $136=(($43+12)|0);
 var $137=HEAP32[(($136)>>2)];
 _glBindVertexArray($137);
 var $138=$nParticles;
 _glDrawArrays(0,0,$138);
 _glFinish();
 STACKTOP=sp;return;
 case 3: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 $17=$141;
 var $142=$140$1;
 $18=$142;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($16);
 label=4;break;
 case 4: 
 var $144=$17;
 var $145=$18;
 var $146$0=$144;
 var $146$1=0;
 var $147$0=$146$0;
 var $147$1=$145;
 ___resumeException($147$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($this,$s0,$s1,$s2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$s0;
 $3=$s1;
 $4=$s2;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZN3glm6detail5tvec3IfEC2ERKfS4_S4_($5,$6,$7,$8);
 STACKTOP=sp;return;
}


function __ZN3glm6detail7tmat4x4IfEC1ERKf($this,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$s;
 var $3=$1;
 var $4=$2;
 __ZN3glm6detail7tmat4x4IfEC2ERKf($3,$4);
 STACKTOP=sp;return;
}


function __ZN3glm6lookAtIfEENS_6detail7tmat4x4IT_EERKNS1_5tvec3IS3_EES8_S8_($agg_result,$eye,$center,$up){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $f=sp;
 var $4=(sp)+(16);
 var $u=(sp)+(32);
 var $s=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(sp)+(96);
 $1=$eye;
 $2=$center;
 $3=$up;
 var $8=$2;
 var $9=$1;
 __ZN3glm6detailmiIfEENS0_5tvec3IT_EERKS4_S6_($4,$8,$9);
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($f,$4);
 var $10=$3;
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($u,$10);
 __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($5,$f,$u);
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($s,$5);
 __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($6,$s,$f);
 var $11=__ZN3glm6detail5tvec3IfEaSERKS2_($u,$6);
 HEAP32[(($7)>>2)]=1;
 __ZN3glm6detail7tmat4x4IfEC1IiEERKT_($agg_result,$7);
 var $12=(($s)|0);
 var $13=$12;
 var $14=HEAPF32[(($13)>>2)];
 var $15=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,0);
 var $16=__ZN3glm6detail5tvec4IfEixEj($15,0);
 HEAPF32[(($16)>>2)]=$14;
 var $17=(($s+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,1);
 var $21=__ZN3glm6detail5tvec4IfEixEj($20,0);
 HEAPF32[(($21)>>2)]=$19;
 var $22=(($s+8)|0);
 var $23=$22;
 var $24=HEAPF32[(($23)>>2)];
 var $25=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $26=__ZN3glm6detail5tvec4IfEixEj($25,0);
 HEAPF32[(($26)>>2)]=$24;
 var $27=(($u)|0);
 var $28=$27;
 var $29=HEAPF32[(($28)>>2)];
 var $30=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,0);
 var $31=__ZN3glm6detail5tvec4IfEixEj($30,1);
 HEAPF32[(($31)>>2)]=$29;
 var $32=(($u+4)|0);
 var $33=$32;
 var $34=HEAPF32[(($33)>>2)];
 var $35=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,1);
 var $36=__ZN3glm6detail5tvec4IfEixEj($35,1);
 HEAPF32[(($36)>>2)]=$34;
 var $37=(($u+8)|0);
 var $38=$37;
 var $39=HEAPF32[(($38)>>2)];
 var $40=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $41=__ZN3glm6detail5tvec4IfEixEj($40,1);
 HEAPF32[(($41)>>2)]=$39;
 var $42=(($f)|0);
 var $43=$42;
 var $44=HEAPF32[(($43)>>2)];
 var $45=((-.0))-($44);
 var $46=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,0);
 var $47=__ZN3glm6detail5tvec4IfEixEj($46,2);
 HEAPF32[(($47)>>2)]=$45;
 var $48=(($f+4)|0);
 var $49=$48;
 var $50=HEAPF32[(($49)>>2)];
 var $51=((-.0))-($50);
 var $52=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,1);
 var $53=__ZN3glm6detail5tvec4IfEixEj($52,2);
 HEAPF32[(($53)>>2)]=$51;
 var $54=(($f+8)|0);
 var $55=$54;
 var $56=HEAPF32[(($55)>>2)];
 var $57=((-.0))-($56);
 var $58=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $59=__ZN3glm6detail5tvec4IfEixEj($58,2);
 HEAPF32[(($59)>>2)]=$57;
 var $60=$1;
 var $61=__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($s,$60);
 var $62=((-.0))-($61);
 var $63=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,3);
 var $64=__ZN3glm6detail5tvec4IfEixEj($63,0);
 HEAPF32[(($64)>>2)]=$62;
 var $65=$1;
 var $66=__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($u,$65);
 var $67=((-.0))-($66);
 var $68=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,3);
 var $69=__ZN3glm6detail5tvec4IfEixEj($68,1);
 HEAPF32[(($69)>>2)]=$67;
 var $70=$1;
 var $71=__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($f,$70);
 var $72=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,3);
 var $73=__ZN3glm6detail5tvec4IfEixEj($72,2);
 HEAPF32[(($73)>>2)]=$71;
 STACKTOP=sp;return;
}


function __ZN3glm11perspectiveIfEENS_6detail7tmat4x4IT_EERKS3_S6_S6_S6_($agg_result,$fovy,$aspect,$zNear,$zFar){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $range;
 var $5=sp;
 var $6=(sp)+(8);
 var $left;
 var $right;
 var $bottom;
 var $top;
 var $7=(sp)+(16);
 $1=$fovy;
 $2=$aspect;
 $3=$zNear;
 $4=$zFar;
 var $8=$1;
 var $9=HEAPF32[(($8)>>2)];
 var $10=($9)/(2);
 HEAPF32[(($5)>>2)]=$10;
 var $11=__ZN3glm7radiansIfEET_RKS1_($5);
 HEAPF32[(($6)>>2)]=$11;
 var $12=__ZN3glm3tanIfEET_RKS1_($6);
 var $13=$3;
 var $14=HEAPF32[(($13)>>2)];
 var $15=($12)*($14);
 $range=$15;
 var $16=$range;
 var $17=((-.0))-($16);
 var $18=$2;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($17)*($19);
 $left=$20;
 var $21=$range;
 var $22=$2;
 var $23=HEAPF32[(($22)>>2)];
 var $24=($21)*($23);
 $right=$24;
 var $25=$range;
 var $26=((-.0))-($25);
 $bottom=$26;
 var $27=$range;
 $top=$27;
 HEAPF32[(($7)>>2)]=0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($agg_result,$7);
 var $28=$3;
 var $29=HEAPF32[(($28)>>2)];
 var $30=($29)*(2);
 var $31=$right;
 var $32=$left;
 var $33=($31)-($32);
 var $34=($30)/($33);
 var $35=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,0);
 var $36=__ZN3glm6detail5tvec4IfEixEj($35,0);
 HEAPF32[(($36)>>2)]=$34;
 var $37=$3;
 var $38=HEAPF32[(($37)>>2)];
 var $39=($38)*(2);
 var $40=$top;
 var $41=$bottom;
 var $42=($40)-($41);
 var $43=($39)/($42);
 var $44=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,1);
 var $45=__ZN3glm6detail5tvec4IfEixEj($44,1);
 HEAPF32[(($45)>>2)]=$43;
 var $46=$4;
 var $47=HEAPF32[(($46)>>2)];
 var $48=$3;
 var $49=HEAPF32[(($48)>>2)];
 var $50=($47)+($49);
 var $51=((-.0))-($50);
 var $52=$4;
 var $53=HEAPF32[(($52)>>2)];
 var $54=$3;
 var $55=HEAPF32[(($54)>>2)];
 var $56=($53)-($55);
 var $57=($51)/($56);
 var $58=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $59=__ZN3glm6detail5tvec4IfEixEj($58,2);
 HEAPF32[(($59)>>2)]=$57;
 var $60=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $61=__ZN3glm6detail5tvec4IfEixEj($60,3);
 HEAPF32[(($61)>>2)]=-1;
 var $62=$4;
 var $63=HEAPF32[(($62)>>2)];
 var $64=($63)*(2);
 var $65=$3;
 var $66=HEAPF32[(($65)>>2)];
 var $67=($64)*($66);
 var $68=((-.0))-($67);
 var $69=$4;
 var $70=HEAPF32[(($69)>>2)];
 var $71=$3;
 var $72=HEAPF32[(($71)>>2)];
 var $73=($70)-($72);
 var $74=($68)/($73);
 var $75=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,3);
 var $76=__ZN3glm6detail5tvec4IfEixEj($75,2);
 HEAPF32[(($76)>>2)]=$74;
 STACKTOP=sp;return;
}


function __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($agg_result,$m1,$m2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $SrcA0=sp;
 var $SrcA1=(sp)+(16);
 var $SrcA2=(sp)+(32);
 var $SrcA3=(sp)+(48);
 var $SrcB0=(sp)+(64);
 var $SrcB1=(sp)+(80);
 var $SrcB2=(sp)+(96);
 var $SrcB3=(sp)+(112);
 var $3=(sp)+(128);
 var $4=(sp)+(144);
 var $5=(sp)+(160);
 var $6=(sp)+(176);
 var $7=(sp)+(192);
 var $8=(sp)+(208);
 var $9=(sp)+(224);
 var $10=(sp)+(240);
 var $11=(sp)+(256);
 var $12=(sp)+(272);
 var $13=(sp)+(288);
 var $14=(sp)+(304);
 var $15=(sp)+(320);
 var $16=(sp)+(336);
 var $17=(sp)+(352);
 var $18=(sp)+(368);
 var $19=(sp)+(384);
 var $20=(sp)+(400);
 var $21=(sp)+(416);
 var $22=(sp)+(432);
 var $23=(sp)+(448);
 var $24=(sp)+(464);
 var $25=(sp)+(480);
 var $26=(sp)+(496);
 var $27=(sp)+(512);
 var $28=(sp)+(528);
 var $29=(sp)+(544);
 var $30=(sp)+(560);
 $1=$m1;
 $2=$m2;
 var $31=$1;
 var $32=__ZNK3glm6detail7tmat4x4IfEixEj($31,0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA0,$32);
 var $33=$1;
 var $34=__ZNK3glm6detail7tmat4x4IfEixEj($33,1);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA1,$34);
 var $35=$1;
 var $36=__ZNK3glm6detail7tmat4x4IfEixEj($35,2);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA2,$36);
 var $37=$1;
 var $38=__ZNK3glm6detail7tmat4x4IfEixEj($37,3);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA3,$38);
 var $39=$2;
 var $40=__ZNK3glm6detail7tmat4x4IfEixEj($39,0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB0,$40);
 var $41=$2;
 var $42=__ZNK3glm6detail7tmat4x4IfEixEj($41,1);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB1,$42);
 var $43=$2;
 var $44=__ZNK3glm6detail7tmat4x4IfEixEj($43,2);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB2,$44);
 var $45=$2;
 var $46=__ZNK3glm6detail7tmat4x4IfEixEj($45,3);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB3,$46);
 __ZN3glm6detail7tmat4x4IfEC1ENS2_4ctorE($agg_result,0);
 var $47=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,0);
 var $48=__ZNK3glm6detail5tvec4IfEixEj($SrcB0,0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($6,$SrcA0,$48);
 var $49=__ZNK3glm6detail5tvec4IfEixEj($SrcB0,1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($7,$SrcA1,$49);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($5,$6,$7);
 var $50=__ZNK3glm6detail5tvec4IfEixEj($SrcB0,2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($8,$SrcA2,$50);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($4,$5,$8);
 var $51=__ZNK3glm6detail5tvec4IfEixEj($SrcB0,3);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($9,$SrcA3,$51);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($3,$4,$9);
 var $52=__ZN3glm6detail5tvec4IfEaSERKS2_($47,$3);
 var $53=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,1);
 var $54=__ZNK3glm6detail5tvec4IfEixEj($SrcB1,0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($13,$SrcA0,$54);
 var $55=__ZNK3glm6detail5tvec4IfEixEj($SrcB1,1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($14,$SrcA1,$55);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($12,$13,$14);
 var $56=__ZNK3glm6detail5tvec4IfEixEj($SrcB1,2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($15,$SrcA2,$56);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($11,$12,$15);
 var $57=__ZNK3glm6detail5tvec4IfEixEj($SrcB1,3);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($16,$SrcA3,$57);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($10,$11,$16);
 var $58=__ZN3glm6detail5tvec4IfEaSERKS2_($53,$10);
 var $59=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $60=__ZNK3glm6detail5tvec4IfEixEj($SrcB2,0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($20,$SrcA0,$60);
 var $61=__ZNK3glm6detail5tvec4IfEixEj($SrcB2,1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($21,$SrcA1,$61);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($19,$20,$21);
 var $62=__ZNK3glm6detail5tvec4IfEixEj($SrcB2,2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($22,$SrcA2,$62);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($18,$19,$22);
 var $63=__ZNK3glm6detail5tvec4IfEixEj($SrcB2,3);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($23,$SrcA3,$63);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($17,$18,$23);
 var $64=__ZN3glm6detail5tvec4IfEaSERKS2_($59,$17);
 var $65=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,3);
 var $66=__ZNK3glm6detail5tvec4IfEixEj($SrcB3,0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($27,$SrcA0,$66);
 var $67=__ZNK3glm6detail5tvec4IfEixEj($SrcB3,1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($28,$SrcA1,$67);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($26,$27,$28);
 var $68=__ZNK3glm6detail5tvec4IfEixEj($SrcB3,2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($29,$SrcA2,$68);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($25,$26,$29);
 var $69=__ZNK3glm6detail5tvec4IfEixEj($SrcB3,3);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($30,$SrcA3,$69);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($24,$25,$30);
 var $70=__ZN3glm6detail5tvec4IfEaSERKS2_($65,$24);
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($this,$s1,$s2,$s3,$s4){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$s1;
 $3=$s2;
 $4=$s3;
 $5=$s4;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 __ZN3glm6detail5tvec4IfEC2ERKfS4_S4_S4_($6,$7,$8,$9,$10);
 STACKTOP=sp;return;
}


function __ZN3glm7inverseIfEENS_6detail7tmat4x4IT_EERKS4_($agg_result,$m){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+808)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $Coef00=sp;
 var $Coef02=(sp)+(8);
 var $Coef03=(sp)+(16);
 var $Coef04=(sp)+(24);
 var $Coef06=(sp)+(32);
 var $Coef07=(sp)+(40);
 var $Coef08=(sp)+(48);
 var $Coef10=(sp)+(56);
 var $Coef11=(sp)+(64);
 var $Coef12=(sp)+(72);
 var $Coef14=(sp)+(80);
 var $Coef15=(sp)+(88);
 var $Coef16=(sp)+(96);
 var $Coef18=(sp)+(104);
 var $Coef19=(sp)+(112);
 var $Coef20=(sp)+(120);
 var $Coef22=(sp)+(128);
 var $Coef23=(sp)+(136);
 var $SignA=(sp)+(144);
 var $2=(sp)+(160);
 var $3=(sp)+(168);
 var $4=(sp)+(176);
 var $5=(sp)+(184);
 var $SignB=(sp)+(192);
 var $6=(sp)+(208);
 var $7=(sp)+(216);
 var $8=(sp)+(224);
 var $9=(sp)+(232);
 var $Fac0=(sp)+(240);
 var $Fac1=(sp)+(256);
 var $Fac2=(sp)+(272);
 var $Fac3=(sp)+(288);
 var $Fac4=(sp)+(304);
 var $Fac5=(sp)+(320);
 var $Vec0=(sp)+(336);
 var $Vec1=(sp)+(352);
 var $Vec2=(sp)+(368);
 var $Vec3=(sp)+(384);
 var $Inv0=(sp)+(400);
 var $10=(sp)+(416);
 var $11=(sp)+(432);
 var $12=(sp)+(448);
 var $13=(sp)+(464);
 var $14=(sp)+(480);
 var $Inv1=(sp)+(496);
 var $15=(sp)+(512);
 var $16=(sp)+(528);
 var $17=(sp)+(544);
 var $18=(sp)+(560);
 var $19=(sp)+(576);
 var $Inv2=(sp)+(592);
 var $20=(sp)+(608);
 var $21=(sp)+(624);
 var $22=(sp)+(640);
 var $23=(sp)+(656);
 var $24=(sp)+(672);
 var $Inv3=(sp)+(688);
 var $25=(sp)+(704);
 var $26=(sp)+(720);
 var $27=(sp)+(736);
 var $28=(sp)+(752);
 var $29=(sp)+(768);
 var $Row0=(sp)+(784);
 var $Determinant=(sp)+(800);
 $1=$m;
 var $30=$1;
 var $31=__ZNK3glm6detail7tmat4x4IfEixEj($30,2);
 var $32=__ZNK3glm6detail5tvec4IfEixEj($31,2);
 var $33=HEAPF32[(($32)>>2)];
 var $34=$1;
 var $35=__ZNK3glm6detail7tmat4x4IfEixEj($34,3);
 var $36=__ZNK3glm6detail5tvec4IfEixEj($35,3);
 var $37=HEAPF32[(($36)>>2)];
 var $38=($33)*($37);
 var $39=$1;
 var $40=__ZNK3glm6detail7tmat4x4IfEixEj($39,3);
 var $41=__ZNK3glm6detail5tvec4IfEixEj($40,2);
 var $42=HEAPF32[(($41)>>2)];
 var $43=$1;
 var $44=__ZNK3glm6detail7tmat4x4IfEixEj($43,2);
 var $45=__ZNK3glm6detail5tvec4IfEixEj($44,3);
 var $46=HEAPF32[(($45)>>2)];
 var $47=($42)*($46);
 var $48=($38)-($47);
 HEAPF32[(($Coef00)>>2)]=$48;
 var $49=$1;
 var $50=__ZNK3glm6detail7tmat4x4IfEixEj($49,1);
 var $51=__ZNK3glm6detail5tvec4IfEixEj($50,2);
 var $52=HEAPF32[(($51)>>2)];
 var $53=$1;
 var $54=__ZNK3glm6detail7tmat4x4IfEixEj($53,3);
 var $55=__ZNK3glm6detail5tvec4IfEixEj($54,3);
 var $56=HEAPF32[(($55)>>2)];
 var $57=($52)*($56);
 var $58=$1;
 var $59=__ZNK3glm6detail7tmat4x4IfEixEj($58,3);
 var $60=__ZNK3glm6detail5tvec4IfEixEj($59,2);
 var $61=HEAPF32[(($60)>>2)];
 var $62=$1;
 var $63=__ZNK3glm6detail7tmat4x4IfEixEj($62,1);
 var $64=__ZNK3glm6detail5tvec4IfEixEj($63,3);
 var $65=HEAPF32[(($64)>>2)];
 var $66=($61)*($65);
 var $67=($57)-($66);
 HEAPF32[(($Coef02)>>2)]=$67;
 var $68=$1;
 var $69=__ZNK3glm6detail7tmat4x4IfEixEj($68,1);
 var $70=__ZNK3glm6detail5tvec4IfEixEj($69,2);
 var $71=HEAPF32[(($70)>>2)];
 var $72=$1;
 var $73=__ZNK3glm6detail7tmat4x4IfEixEj($72,2);
 var $74=__ZNK3glm6detail5tvec4IfEixEj($73,3);
 var $75=HEAPF32[(($74)>>2)];
 var $76=($71)*($75);
 var $77=$1;
 var $78=__ZNK3glm6detail7tmat4x4IfEixEj($77,2);
 var $79=__ZNK3glm6detail5tvec4IfEixEj($78,2);
 var $80=HEAPF32[(($79)>>2)];
 var $81=$1;
 var $82=__ZNK3glm6detail7tmat4x4IfEixEj($81,1);
 var $83=__ZNK3glm6detail5tvec4IfEixEj($82,3);
 var $84=HEAPF32[(($83)>>2)];
 var $85=($80)*($84);
 var $86=($76)-($85);
 HEAPF32[(($Coef03)>>2)]=$86;
 var $87=$1;
 var $88=__ZNK3glm6detail7tmat4x4IfEixEj($87,2);
 var $89=__ZNK3glm6detail5tvec4IfEixEj($88,1);
 var $90=HEAPF32[(($89)>>2)];
 var $91=$1;
 var $92=__ZNK3glm6detail7tmat4x4IfEixEj($91,3);
 var $93=__ZNK3glm6detail5tvec4IfEixEj($92,3);
 var $94=HEAPF32[(($93)>>2)];
 var $95=($90)*($94);
 var $96=$1;
 var $97=__ZNK3glm6detail7tmat4x4IfEixEj($96,3);
 var $98=__ZNK3glm6detail5tvec4IfEixEj($97,1);
 var $99=HEAPF32[(($98)>>2)];
 var $100=$1;
 var $101=__ZNK3glm6detail7tmat4x4IfEixEj($100,2);
 var $102=__ZNK3glm6detail5tvec4IfEixEj($101,3);
 var $103=HEAPF32[(($102)>>2)];
 var $104=($99)*($103);
 var $105=($95)-($104);
 HEAPF32[(($Coef04)>>2)]=$105;
 var $106=$1;
 var $107=__ZNK3glm6detail7tmat4x4IfEixEj($106,1);
 var $108=__ZNK3glm6detail5tvec4IfEixEj($107,1);
 var $109=HEAPF32[(($108)>>2)];
 var $110=$1;
 var $111=__ZNK3glm6detail7tmat4x4IfEixEj($110,3);
 var $112=__ZNK3glm6detail5tvec4IfEixEj($111,3);
 var $113=HEAPF32[(($112)>>2)];
 var $114=($109)*($113);
 var $115=$1;
 var $116=__ZNK3glm6detail7tmat4x4IfEixEj($115,3);
 var $117=__ZNK3glm6detail5tvec4IfEixEj($116,1);
 var $118=HEAPF32[(($117)>>2)];
 var $119=$1;
 var $120=__ZNK3glm6detail7tmat4x4IfEixEj($119,1);
 var $121=__ZNK3glm6detail5tvec4IfEixEj($120,3);
 var $122=HEAPF32[(($121)>>2)];
 var $123=($118)*($122);
 var $124=($114)-($123);
 HEAPF32[(($Coef06)>>2)]=$124;
 var $125=$1;
 var $126=__ZNK3glm6detail7tmat4x4IfEixEj($125,1);
 var $127=__ZNK3glm6detail5tvec4IfEixEj($126,1);
 var $128=HEAPF32[(($127)>>2)];
 var $129=$1;
 var $130=__ZNK3glm6detail7tmat4x4IfEixEj($129,2);
 var $131=__ZNK3glm6detail5tvec4IfEixEj($130,3);
 var $132=HEAPF32[(($131)>>2)];
 var $133=($128)*($132);
 var $134=$1;
 var $135=__ZNK3glm6detail7tmat4x4IfEixEj($134,2);
 var $136=__ZNK3glm6detail5tvec4IfEixEj($135,1);
 var $137=HEAPF32[(($136)>>2)];
 var $138=$1;
 var $139=__ZNK3glm6detail7tmat4x4IfEixEj($138,1);
 var $140=__ZNK3glm6detail5tvec4IfEixEj($139,3);
 var $141=HEAPF32[(($140)>>2)];
 var $142=($137)*($141);
 var $143=($133)-($142);
 HEAPF32[(($Coef07)>>2)]=$143;
 var $144=$1;
 var $145=__ZNK3glm6detail7tmat4x4IfEixEj($144,2);
 var $146=__ZNK3glm6detail5tvec4IfEixEj($145,1);
 var $147=HEAPF32[(($146)>>2)];
 var $148=$1;
 var $149=__ZNK3glm6detail7tmat4x4IfEixEj($148,3);
 var $150=__ZNK3glm6detail5tvec4IfEixEj($149,2);
 var $151=HEAPF32[(($150)>>2)];
 var $152=($147)*($151);
 var $153=$1;
 var $154=__ZNK3glm6detail7tmat4x4IfEixEj($153,3);
 var $155=__ZNK3glm6detail5tvec4IfEixEj($154,1);
 var $156=HEAPF32[(($155)>>2)];
 var $157=$1;
 var $158=__ZNK3glm6detail7tmat4x4IfEixEj($157,2);
 var $159=__ZNK3glm6detail5tvec4IfEixEj($158,2);
 var $160=HEAPF32[(($159)>>2)];
 var $161=($156)*($160);
 var $162=($152)-($161);
 HEAPF32[(($Coef08)>>2)]=$162;
 var $163=$1;
 var $164=__ZNK3glm6detail7tmat4x4IfEixEj($163,1);
 var $165=__ZNK3glm6detail5tvec4IfEixEj($164,1);
 var $166=HEAPF32[(($165)>>2)];
 var $167=$1;
 var $168=__ZNK3glm6detail7tmat4x4IfEixEj($167,3);
 var $169=__ZNK3glm6detail5tvec4IfEixEj($168,2);
 var $170=HEAPF32[(($169)>>2)];
 var $171=($166)*($170);
 var $172=$1;
 var $173=__ZNK3glm6detail7tmat4x4IfEixEj($172,3);
 var $174=__ZNK3glm6detail5tvec4IfEixEj($173,1);
 var $175=HEAPF32[(($174)>>2)];
 var $176=$1;
 var $177=__ZNK3glm6detail7tmat4x4IfEixEj($176,1);
 var $178=__ZNK3glm6detail5tvec4IfEixEj($177,2);
 var $179=HEAPF32[(($178)>>2)];
 var $180=($175)*($179);
 var $181=($171)-($180);
 HEAPF32[(($Coef10)>>2)]=$181;
 var $182=$1;
 var $183=__ZNK3glm6detail7tmat4x4IfEixEj($182,1);
 var $184=__ZNK3glm6detail5tvec4IfEixEj($183,1);
 var $185=HEAPF32[(($184)>>2)];
 var $186=$1;
 var $187=__ZNK3glm6detail7tmat4x4IfEixEj($186,2);
 var $188=__ZNK3glm6detail5tvec4IfEixEj($187,2);
 var $189=HEAPF32[(($188)>>2)];
 var $190=($185)*($189);
 var $191=$1;
 var $192=__ZNK3glm6detail7tmat4x4IfEixEj($191,2);
 var $193=__ZNK3glm6detail5tvec4IfEixEj($192,1);
 var $194=HEAPF32[(($193)>>2)];
 var $195=$1;
 var $196=__ZNK3glm6detail7tmat4x4IfEixEj($195,1);
 var $197=__ZNK3glm6detail5tvec4IfEixEj($196,2);
 var $198=HEAPF32[(($197)>>2)];
 var $199=($194)*($198);
 var $200=($190)-($199);
 HEAPF32[(($Coef11)>>2)]=$200;
 var $201=$1;
 var $202=__ZNK3glm6detail7tmat4x4IfEixEj($201,2);
 var $203=__ZNK3glm6detail5tvec4IfEixEj($202,0);
 var $204=HEAPF32[(($203)>>2)];
 var $205=$1;
 var $206=__ZNK3glm6detail7tmat4x4IfEixEj($205,3);
 var $207=__ZNK3glm6detail5tvec4IfEixEj($206,3);
 var $208=HEAPF32[(($207)>>2)];
 var $209=($204)*($208);
 var $210=$1;
 var $211=__ZNK3glm6detail7tmat4x4IfEixEj($210,3);
 var $212=__ZNK3glm6detail5tvec4IfEixEj($211,0);
 var $213=HEAPF32[(($212)>>2)];
 var $214=$1;
 var $215=__ZNK3glm6detail7tmat4x4IfEixEj($214,2);
 var $216=__ZNK3glm6detail5tvec4IfEixEj($215,3);
 var $217=HEAPF32[(($216)>>2)];
 var $218=($213)*($217);
 var $219=($209)-($218);
 HEAPF32[(($Coef12)>>2)]=$219;
 var $220=$1;
 var $221=__ZNK3glm6detail7tmat4x4IfEixEj($220,1);
 var $222=__ZNK3glm6detail5tvec4IfEixEj($221,0);
 var $223=HEAPF32[(($222)>>2)];
 var $224=$1;
 var $225=__ZNK3glm6detail7tmat4x4IfEixEj($224,3);
 var $226=__ZNK3glm6detail5tvec4IfEixEj($225,3);
 var $227=HEAPF32[(($226)>>2)];
 var $228=($223)*($227);
 var $229=$1;
 var $230=__ZNK3glm6detail7tmat4x4IfEixEj($229,3);
 var $231=__ZNK3glm6detail5tvec4IfEixEj($230,0);
 var $232=HEAPF32[(($231)>>2)];
 var $233=$1;
 var $234=__ZNK3glm6detail7tmat4x4IfEixEj($233,1);
 var $235=__ZNK3glm6detail5tvec4IfEixEj($234,3);
 var $236=HEAPF32[(($235)>>2)];
 var $237=($232)*($236);
 var $238=($228)-($237);
 HEAPF32[(($Coef14)>>2)]=$238;
 var $239=$1;
 var $240=__ZNK3glm6detail7tmat4x4IfEixEj($239,1);
 var $241=__ZNK3glm6detail5tvec4IfEixEj($240,0);
 var $242=HEAPF32[(($241)>>2)];
 var $243=$1;
 var $244=__ZNK3glm6detail7tmat4x4IfEixEj($243,2);
 var $245=__ZNK3glm6detail5tvec4IfEixEj($244,3);
 var $246=HEAPF32[(($245)>>2)];
 var $247=($242)*($246);
 var $248=$1;
 var $249=__ZNK3glm6detail7tmat4x4IfEixEj($248,2);
 var $250=__ZNK3glm6detail5tvec4IfEixEj($249,0);
 var $251=HEAPF32[(($250)>>2)];
 var $252=$1;
 var $253=__ZNK3glm6detail7tmat4x4IfEixEj($252,1);
 var $254=__ZNK3glm6detail5tvec4IfEixEj($253,3);
 var $255=HEAPF32[(($254)>>2)];
 var $256=($251)*($255);
 var $257=($247)-($256);
 HEAPF32[(($Coef15)>>2)]=$257;
 var $258=$1;
 var $259=__ZNK3glm6detail7tmat4x4IfEixEj($258,2);
 var $260=__ZNK3glm6detail5tvec4IfEixEj($259,0);
 var $261=HEAPF32[(($260)>>2)];
 var $262=$1;
 var $263=__ZNK3glm6detail7tmat4x4IfEixEj($262,3);
 var $264=__ZNK3glm6detail5tvec4IfEixEj($263,2);
 var $265=HEAPF32[(($264)>>2)];
 var $266=($261)*($265);
 var $267=$1;
 var $268=__ZNK3glm6detail7tmat4x4IfEixEj($267,3);
 var $269=__ZNK3glm6detail5tvec4IfEixEj($268,0);
 var $270=HEAPF32[(($269)>>2)];
 var $271=$1;
 var $272=__ZNK3glm6detail7tmat4x4IfEixEj($271,2);
 var $273=__ZNK3glm6detail5tvec4IfEixEj($272,2);
 var $274=HEAPF32[(($273)>>2)];
 var $275=($270)*($274);
 var $276=($266)-($275);
 HEAPF32[(($Coef16)>>2)]=$276;
 var $277=$1;
 var $278=__ZNK3glm6detail7tmat4x4IfEixEj($277,1);
 var $279=__ZNK3glm6detail5tvec4IfEixEj($278,0);
 var $280=HEAPF32[(($279)>>2)];
 var $281=$1;
 var $282=__ZNK3glm6detail7tmat4x4IfEixEj($281,3);
 var $283=__ZNK3glm6detail5tvec4IfEixEj($282,2);
 var $284=HEAPF32[(($283)>>2)];
 var $285=($280)*($284);
 var $286=$1;
 var $287=__ZNK3glm6detail7tmat4x4IfEixEj($286,3);
 var $288=__ZNK3glm6detail5tvec4IfEixEj($287,0);
 var $289=HEAPF32[(($288)>>2)];
 var $290=$1;
 var $291=__ZNK3glm6detail7tmat4x4IfEixEj($290,1);
 var $292=__ZNK3glm6detail5tvec4IfEixEj($291,2);
 var $293=HEAPF32[(($292)>>2)];
 var $294=($289)*($293);
 var $295=($285)-($294);
 HEAPF32[(($Coef18)>>2)]=$295;
 var $296=$1;
 var $297=__ZNK3glm6detail7tmat4x4IfEixEj($296,1);
 var $298=__ZNK3glm6detail5tvec4IfEixEj($297,0);
 var $299=HEAPF32[(($298)>>2)];
 var $300=$1;
 var $301=__ZNK3glm6detail7tmat4x4IfEixEj($300,2);
 var $302=__ZNK3glm6detail5tvec4IfEixEj($301,2);
 var $303=HEAPF32[(($302)>>2)];
 var $304=($299)*($303);
 var $305=$1;
 var $306=__ZNK3glm6detail7tmat4x4IfEixEj($305,2);
 var $307=__ZNK3glm6detail5tvec4IfEixEj($306,0);
 var $308=HEAPF32[(($307)>>2)];
 var $309=$1;
 var $310=__ZNK3glm6detail7tmat4x4IfEixEj($309,1);
 var $311=__ZNK3glm6detail5tvec4IfEixEj($310,2);
 var $312=HEAPF32[(($311)>>2)];
 var $313=($308)*($312);
 var $314=($304)-($313);
 HEAPF32[(($Coef19)>>2)]=$314;
 var $315=$1;
 var $316=__ZNK3glm6detail7tmat4x4IfEixEj($315,2);
 var $317=__ZNK3glm6detail5tvec4IfEixEj($316,0);
 var $318=HEAPF32[(($317)>>2)];
 var $319=$1;
 var $320=__ZNK3glm6detail7tmat4x4IfEixEj($319,3);
 var $321=__ZNK3glm6detail5tvec4IfEixEj($320,1);
 var $322=HEAPF32[(($321)>>2)];
 var $323=($318)*($322);
 var $324=$1;
 var $325=__ZNK3glm6detail7tmat4x4IfEixEj($324,3);
 var $326=__ZNK3glm6detail5tvec4IfEixEj($325,0);
 var $327=HEAPF32[(($326)>>2)];
 var $328=$1;
 var $329=__ZNK3glm6detail7tmat4x4IfEixEj($328,2);
 var $330=__ZNK3glm6detail5tvec4IfEixEj($329,1);
 var $331=HEAPF32[(($330)>>2)];
 var $332=($327)*($331);
 var $333=($323)-($332);
 HEAPF32[(($Coef20)>>2)]=$333;
 var $334=$1;
 var $335=__ZNK3glm6detail7tmat4x4IfEixEj($334,1);
 var $336=__ZNK3glm6detail5tvec4IfEixEj($335,0);
 var $337=HEAPF32[(($336)>>2)];
 var $338=$1;
 var $339=__ZNK3glm6detail7tmat4x4IfEixEj($338,3);
 var $340=__ZNK3glm6detail5tvec4IfEixEj($339,1);
 var $341=HEAPF32[(($340)>>2)];
 var $342=($337)*($341);
 var $343=$1;
 var $344=__ZNK3glm6detail7tmat4x4IfEixEj($343,3);
 var $345=__ZNK3glm6detail5tvec4IfEixEj($344,0);
 var $346=HEAPF32[(($345)>>2)];
 var $347=$1;
 var $348=__ZNK3glm6detail7tmat4x4IfEixEj($347,1);
 var $349=__ZNK3glm6detail5tvec4IfEixEj($348,1);
 var $350=HEAPF32[(($349)>>2)];
 var $351=($346)*($350);
 var $352=($342)-($351);
 HEAPF32[(($Coef22)>>2)]=$352;
 var $353=$1;
 var $354=__ZNK3glm6detail7tmat4x4IfEixEj($353,1);
 var $355=__ZNK3glm6detail5tvec4IfEixEj($354,0);
 var $356=HEAPF32[(($355)>>2)];
 var $357=$1;
 var $358=__ZNK3glm6detail7tmat4x4IfEixEj($357,2);
 var $359=__ZNK3glm6detail5tvec4IfEixEj($358,1);
 var $360=HEAPF32[(($359)>>2)];
 var $361=($356)*($360);
 var $362=$1;
 var $363=__ZNK3glm6detail7tmat4x4IfEixEj($362,2);
 var $364=__ZNK3glm6detail5tvec4IfEixEj($363,0);
 var $365=HEAPF32[(($364)>>2)];
 var $366=$1;
 var $367=__ZNK3glm6detail7tmat4x4IfEixEj($366,1);
 var $368=__ZNK3glm6detail5tvec4IfEixEj($367,1);
 var $369=HEAPF32[(($368)>>2)];
 var $370=($365)*($369);
 var $371=($361)-($370);
 HEAPF32[(($Coef23)>>2)]=$371;
 HEAP32[(($2)>>2)]=1;
 HEAP32[(($3)>>2)]=-1;
 HEAP32[(($4)>>2)]=1;
 HEAP32[(($5)>>2)]=-1;
 __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($SignA,$2,$3,$4,$5);
 HEAP32[(($6)>>2)]=-1;
 HEAP32[(($7)>>2)]=1;
 HEAP32[(($8)>>2)]=-1;
 HEAP32[(($9)>>2)]=1;
 __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($SignB,$6,$7,$8,$9);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac0,$Coef00,$Coef00,$Coef02,$Coef03);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac1,$Coef04,$Coef04,$Coef06,$Coef07);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac2,$Coef08,$Coef08,$Coef10,$Coef11);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac3,$Coef12,$Coef12,$Coef14,$Coef15);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac4,$Coef16,$Coef16,$Coef18,$Coef19);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac5,$Coef20,$Coef20,$Coef22,$Coef23);
 var $372=$1;
 var $373=__ZNK3glm6detail7tmat4x4IfEixEj($372,1);
 var $374=__ZNK3glm6detail5tvec4IfEixEj($373,0);
 var $375=$1;
 var $376=__ZNK3glm6detail7tmat4x4IfEixEj($375,0);
 var $377=__ZNK3glm6detail5tvec4IfEixEj($376,0);
 var $378=$1;
 var $379=__ZNK3glm6detail7tmat4x4IfEixEj($378,0);
 var $380=__ZNK3glm6detail5tvec4IfEixEj($379,0);
 var $381=$1;
 var $382=__ZNK3glm6detail7tmat4x4IfEixEj($381,0);
 var $383=__ZNK3glm6detail5tvec4IfEixEj($382,0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec0,$374,$377,$380,$383);
 var $384=$1;
 var $385=__ZNK3glm6detail7tmat4x4IfEixEj($384,1);
 var $386=__ZNK3glm6detail5tvec4IfEixEj($385,1);
 var $387=$1;
 var $388=__ZNK3glm6detail7tmat4x4IfEixEj($387,0);
 var $389=__ZNK3glm6detail5tvec4IfEixEj($388,1);
 var $390=$1;
 var $391=__ZNK3glm6detail7tmat4x4IfEixEj($390,0);
 var $392=__ZNK3glm6detail5tvec4IfEixEj($391,1);
 var $393=$1;
 var $394=__ZNK3glm6detail7tmat4x4IfEixEj($393,0);
 var $395=__ZNK3glm6detail5tvec4IfEixEj($394,1);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec1,$386,$389,$392,$395);
 var $396=$1;
 var $397=__ZNK3glm6detail7tmat4x4IfEixEj($396,1);
 var $398=__ZNK3glm6detail5tvec4IfEixEj($397,2);
 var $399=$1;
 var $400=__ZNK3glm6detail7tmat4x4IfEixEj($399,0);
 var $401=__ZNK3glm6detail5tvec4IfEixEj($400,2);
 var $402=$1;
 var $403=__ZNK3glm6detail7tmat4x4IfEixEj($402,0);
 var $404=__ZNK3glm6detail5tvec4IfEixEj($403,2);
 var $405=$1;
 var $406=__ZNK3glm6detail7tmat4x4IfEixEj($405,0);
 var $407=__ZNK3glm6detail5tvec4IfEixEj($406,2);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec2,$398,$401,$404,$407);
 var $408=$1;
 var $409=__ZNK3glm6detail7tmat4x4IfEixEj($408,1);
 var $410=__ZNK3glm6detail5tvec4IfEixEj($409,3);
 var $411=$1;
 var $412=__ZNK3glm6detail7tmat4x4IfEixEj($411,0);
 var $413=__ZNK3glm6detail5tvec4IfEixEj($412,3);
 var $414=$1;
 var $415=__ZNK3glm6detail7tmat4x4IfEixEj($414,0);
 var $416=__ZNK3glm6detail5tvec4IfEixEj($415,3);
 var $417=$1;
 var $418=__ZNK3glm6detail7tmat4x4IfEixEj($417,0);
 var $419=__ZNK3glm6detail5tvec4IfEixEj($418,3);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec3,$410,$413,$416,$419);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($12,$Vec1,$Fac0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($13,$Vec2,$Fac1);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($11,$12,$13);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($14,$Vec3,$Fac2);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($10,$11,$14);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv0,$SignA,$10);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($17,$Vec0,$Fac0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($18,$Vec2,$Fac3);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($16,$17,$18);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($19,$Vec3,$Fac4);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($15,$16,$19);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv1,$SignB,$15);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($22,$Vec0,$Fac1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($23,$Vec1,$Fac3);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($21,$22,$23);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($24,$Vec3,$Fac5);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($20,$21,$24);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv2,$SignA,$20);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($27,$Vec0,$Fac2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($28,$Vec1,$Fac4);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($26,$27,$28);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($29,$Vec2,$Fac5);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($25,$26,$29);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv3,$SignB,$25);
 __ZN3glm6detail7tmat4x4IfEC1ERKNS0_5tvec4IfEES6_S6_S6_($agg_result,$Inv0,$Inv1,$Inv2,$Inv3);
 var $420=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,0);
 var $421=__ZN3glm6detail5tvec4IfEixEj($420,0);
 var $422=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,1);
 var $423=__ZN3glm6detail5tvec4IfEixEj($422,0);
 var $424=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,2);
 var $425=__ZN3glm6detail5tvec4IfEixEj($424,0);
 var $426=__ZN3glm6detail7tmat4x4IfEixEj($agg_result,3);
 var $427=__ZN3glm6detail5tvec4IfEixEj($426,0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Row0,$421,$423,$425,$427);
 var $428=$1;
 var $429=__ZNK3glm6detail7tmat4x4IfEixEj($428,0);
 var $430=__ZN3glm3dotIfEET_RKNS_6detail5tvec4IS1_EES6_($429,$Row0);
 HEAPF32[(($Determinant)>>2)]=$430;
 var $431=__ZN3glm6detail7tmat4x4IfEdVIfEERS2_RKT_($agg_result,$Determinant);
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec4IfEaSERKS2_($this,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$v;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=$5;
 var $7=HEAPF32[(($6)>>2)];
 var $8=(($3)|0);
 var $9=$8;
 HEAPF32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=$11;
 var $13=HEAPF32[(($12)>>2)];
 var $14=(($3+4)|0);
 var $15=$14;
 HEAPF32[(($15)>>2)]=$13;
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=(($3+8)|0);
 var $21=$20;
 HEAPF32[(($21)>>2)]=$19;
 var $22=$2;
 var $23=(($22+12)|0);
 var $24=$23;
 var $25=HEAPF32[(($24)>>2)];
 var $26=(($3+12)|0);
 var $27=$26;
 HEAPF32[(($27)>>2)]=$25;
 STACKTOP=sp;return $3;
}


function __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($agg_result,$m,$v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6=(sp)+(24);
 $1=$m;
 $2=$v;
 var $7=$1;
 var $8=__ZNK3glm6detail7tmat4x4IfEixEj($7,0);
 var $9=__ZNK3glm6detail5tvec4IfEixEj($8,0);
 var $10=HEAPF32[(($9)>>2)];
 var $11=$2;
 var $12=(($11)|0);
 var $13=$12;
 var $14=HEAPF32[(($13)>>2)];
 var $15=($10)*($14);
 var $16=$1;
 var $17=__ZNK3glm6detail7tmat4x4IfEixEj($16,1);
 var $18=__ZNK3glm6detail5tvec4IfEixEj($17,0);
 var $19=HEAPF32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=$21;
 var $23=HEAPF32[(($22)>>2)];
 var $24=($19)*($23);
 var $25=($15)+($24);
 var $26=$1;
 var $27=__ZNK3glm6detail7tmat4x4IfEixEj($26,2);
 var $28=__ZNK3glm6detail5tvec4IfEixEj($27,0);
 var $29=HEAPF32[(($28)>>2)];
 var $30=$2;
 var $31=(($30+8)|0);
 var $32=$31;
 var $33=HEAPF32[(($32)>>2)];
 var $34=($29)*($33);
 var $35=($25)+($34);
 var $36=$1;
 var $37=__ZNK3glm6detail7tmat4x4IfEixEj($36,3);
 var $38=__ZNK3glm6detail5tvec4IfEixEj($37,0);
 var $39=HEAPF32[(($38)>>2)];
 var $40=$2;
 var $41=(($40+12)|0);
 var $42=$41;
 var $43=HEAPF32[(($42)>>2)];
 var $44=($39)*($43);
 var $45=($35)+($44);
 HEAPF32[(($3)>>2)]=$45;
 var $46=$1;
 var $47=__ZNK3glm6detail7tmat4x4IfEixEj($46,0);
 var $48=__ZNK3glm6detail5tvec4IfEixEj($47,1);
 var $49=HEAPF32[(($48)>>2)];
 var $50=$2;
 var $51=(($50)|0);
 var $52=$51;
 var $53=HEAPF32[(($52)>>2)];
 var $54=($49)*($53);
 var $55=$1;
 var $56=__ZNK3glm6detail7tmat4x4IfEixEj($55,1);
 var $57=__ZNK3glm6detail5tvec4IfEixEj($56,1);
 var $58=HEAPF32[(($57)>>2)];
 var $59=$2;
 var $60=(($59+4)|0);
 var $61=$60;
 var $62=HEAPF32[(($61)>>2)];
 var $63=($58)*($62);
 var $64=($54)+($63);
 var $65=$1;
 var $66=__ZNK3glm6detail7tmat4x4IfEixEj($65,2);
 var $67=__ZNK3glm6detail5tvec4IfEixEj($66,1);
 var $68=HEAPF32[(($67)>>2)];
 var $69=$2;
 var $70=(($69+8)|0);
 var $71=$70;
 var $72=HEAPF32[(($71)>>2)];
 var $73=($68)*($72);
 var $74=($64)+($73);
 var $75=$1;
 var $76=__ZNK3glm6detail7tmat4x4IfEixEj($75,3);
 var $77=__ZNK3glm6detail5tvec4IfEixEj($76,1);
 var $78=HEAPF32[(($77)>>2)];
 var $79=$2;
 var $80=(($79+12)|0);
 var $81=$80;
 var $82=HEAPF32[(($81)>>2)];
 var $83=($78)*($82);
 var $84=($74)+($83);
 HEAPF32[(($4)>>2)]=$84;
 var $85=$1;
 var $86=__ZNK3glm6detail7tmat4x4IfEixEj($85,0);
 var $87=__ZNK3glm6detail5tvec4IfEixEj($86,2);
 var $88=HEAPF32[(($87)>>2)];
 var $89=$2;
 var $90=(($89)|0);
 var $91=$90;
 var $92=HEAPF32[(($91)>>2)];
 var $93=($88)*($92);
 var $94=$1;
 var $95=__ZNK3glm6detail7tmat4x4IfEixEj($94,1);
 var $96=__ZNK3glm6detail5tvec4IfEixEj($95,2);
 var $97=HEAPF32[(($96)>>2)];
 var $98=$2;
 var $99=(($98+4)|0);
 var $100=$99;
 var $101=HEAPF32[(($100)>>2)];
 var $102=($97)*($101);
 var $103=($93)+($102);
 var $104=$1;
 var $105=__ZNK3glm6detail7tmat4x4IfEixEj($104,2);
 var $106=__ZNK3glm6detail5tvec4IfEixEj($105,2);
 var $107=HEAPF32[(($106)>>2)];
 var $108=$2;
 var $109=(($108+8)|0);
 var $110=$109;
 var $111=HEAPF32[(($110)>>2)];
 var $112=($107)*($111);
 var $113=($103)+($112);
 var $114=$1;
 var $115=__ZNK3glm6detail7tmat4x4IfEixEj($114,3);
 var $116=__ZNK3glm6detail5tvec4IfEixEj($115,2);
 var $117=HEAPF32[(($116)>>2)];
 var $118=$2;
 var $119=(($118+12)|0);
 var $120=$119;
 var $121=HEAPF32[(($120)>>2)];
 var $122=($117)*($121);
 var $123=($113)+($122);
 HEAPF32[(($5)>>2)]=$123;
 var $124=$1;
 var $125=__ZNK3glm6detail7tmat4x4IfEixEj($124,0);
 var $126=__ZNK3glm6detail5tvec4IfEixEj($125,3);
 var $127=HEAPF32[(($126)>>2)];
 var $128=$2;
 var $129=(($128)|0);
 var $130=$129;
 var $131=HEAPF32[(($130)>>2)];
 var $132=($127)*($131);
 var $133=$1;
 var $134=__ZNK3glm6detail7tmat4x4IfEixEj($133,1);
 var $135=__ZNK3glm6detail5tvec4IfEixEj($134,3);
 var $136=HEAPF32[(($135)>>2)];
 var $137=$2;
 var $138=(($137+4)|0);
 var $139=$138;
 var $140=HEAPF32[(($139)>>2)];
 var $141=($136)*($140);
 var $142=($132)+($141);
 var $143=$1;
 var $144=__ZNK3glm6detail7tmat4x4IfEixEj($143,2);
 var $145=__ZNK3glm6detail5tvec4IfEixEj($144,3);
 var $146=HEAPF32[(($145)>>2)];
 var $147=$2;
 var $148=(($147+8)|0);
 var $149=$148;
 var $150=HEAPF32[(($149)>>2)];
 var $151=($146)*($150);
 var $152=($142)+($151);
 var $153=$1;
 var $154=__ZNK3glm6detail7tmat4x4IfEixEj($153,3);
 var $155=__ZNK3glm6detail5tvec4IfEixEj($154,3);
 var $156=HEAPF32[(($155)>>2)];
 var $157=$2;
 var $158=(($157+12)|0);
 var $159=$158;
 var $160=HEAPF32[(($159)>>2)];
 var $161=($156)*($160);
 var $162=($152)+($161);
 HEAPF32[(($6)>>2)]=$162;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg_result,$3,$4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg_result,$v,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6=(sp)+(24);
 $1=$v;
 $2=$s;
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=$2;
 var $12=HEAPF32[(($11)>>2)];
 var $13=($10)/($12);
 HEAPF32[(($3)>>2)]=$13;
 var $14=$1;
 var $15=(($14+4)|0);
 var $16=$15;
 var $17=HEAPF32[(($16)>>2)];
 var $18=$2;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($17)/($19);
 HEAPF32[(($4)>>2)]=$20;
 var $21=$1;
 var $22=(($21+8)|0);
 var $23=$22;
 var $24=HEAPF32[(($23)>>2)];
 var $25=$2;
 var $26=HEAPF32[(($25)>>2)];
 var $27=($24)/($26);
 HEAPF32[(($5)>>2)]=$27;
 var $28=$1;
 var $29=(($28+12)|0);
 var $30=$29;
 var $31=HEAPF32[(($30)>>2)];
 var $32=$2;
 var $33=HEAPF32[(($32)>>2)];
 var $34=($31)/($33);
 HEAPF32[(($6)>>2)]=$34;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg_result,$3,$4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN3glm9normalizeIfEENS_6detail5tvec4IT_EERKS4_($agg_result,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $sqr=sp;
 var $2=(sp)+(8);
 $1=$x;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$4;
 var $6=HEAPF32[(($5)>>2)];
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=($6)*($10);
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=HEAPF32[(($14)>>2)];
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($15)*($19);
 var $21=($11)+($20);
 var $22=$1;
 var $23=(($22+8)|0);
 var $24=$23;
 var $25=HEAPF32[(($24)>>2)];
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=$27;
 var $29=HEAPF32[(($28)>>2)];
 var $30=($25)*($29);
 var $31=($21)+($30);
 var $32=$1;
 var $33=(($32+12)|0);
 var $34=$33;
 var $35=HEAPF32[(($34)>>2)];
 var $36=$1;
 var $37=(($36+12)|0);
 var $38=$37;
 var $39=HEAPF32[(($38)>>2)];
 var $40=($35)*($39);
 var $41=($31)+($40);
 HEAPF32[(($sqr)>>2)]=$41;
 var $42=$1;
 var $43=__ZN3glm11inversesqrtIfEET_RKS1_($sqr);
 HEAPF32[(($2)>>2)]=$43;
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg_result,$42,$2);
 STACKTOP=sp;return;
}


function __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($agg_result,$v1,$v2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6=(sp)+(24);
 $1=$v1;
 $2=$v2;
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=$2;
 var $12=(($11)|0);
 var $13=$12;
 var $14=HEAPF32[(($13)>>2)];
 var $15=($10)-($14);
 HEAPF32[(($3)>>2)]=$15;
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=$21;
 var $23=HEAPF32[(($22)>>2)];
 var $24=($19)-($23);
 HEAPF32[(($4)>>2)]=$24;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=$26;
 var $28=HEAPF32[(($27)>>2)];
 var $29=$2;
 var $30=(($29+8)|0);
 var $31=$30;
 var $32=HEAPF32[(($31)>>2)];
 var $33=($28)-($32);
 HEAPF32[(($5)>>2)]=$33;
 var $34=$1;
 var $35=(($34+12)|0);
 var $36=$35;
 var $37=HEAPF32[(($36)>>2)];
 var $38=$2;
 var $39=(($38+12)|0);
 var $40=$39;
 var $41=HEAPF32[(($40)>>2)];
 var $42=($37)-($41);
 HEAPF32[(($6)>>2)]=$42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg_result,$3,$4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN3glm6detail7tmat4x4IfEixEj($this,$i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$i;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3glm6detail7tmat4x4IfE6lengthEv($3);
 var $6=($4>>>0)<($5>>>0);
 if($6){var $10=0;label=3;break;}else{label=2;break;}
 case 2: 
 ___assert_fail(2680,2520,60,4184);
 throw "Reached an unreachable!";
 label=3;break;
 case 3: 
 var $10;
 var $11=$2;
 var $12=(($3)|0);
 var $13=(($12+($11<<4))|0);
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detail5tvec4IfEixEj($this,$i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$i;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3glm6detail5tvec4IfE6lengthEv($3);
 var $6=($4>>>0)<($5>>>0);
 if($6){var $10=0;label=3;break;}else{label=2;break;}
 case 2: 
 ___assert_fail(2680,2568,48,4184);
 throw "Reached an unreachable!";
 label=3;break;
 case 3: 
 var $10;
 var $11=$2;
 var $12=(($3)|0);
 var $13=$12;
 var $14=(($13+($11<<2))|0);
 STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN19LorenzAttractorDemo6updateEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $bInterop;
 var $47=sp;
 var $48;
 var $49;
 var $50=(sp)+(16);
 var $51=(sp)+(32);
 var $52=(sp)+(48);
 var $53=(sp)+(64);
 $46=$this;
 var $54=$46;
 var $55=__ZN6global3parEv();
 $44=$47;
 $45=3336;
 var $56=$44;
 var $57=$45;
 $42=$56;
 $43=$57;
 var $58=$42;
 var $59=$58;
 var $60=(($58)|0);
 $41=$60;
 var $61=$41;
 $40=$61;
 var $62=$40;
 var $63=$62;
 $39=$63;
 var $64=$39;
 var $65=$64;
 $38=$65;
 var $66=$38;
 var $67=(($64)|0);
 var $68=$43;
 var $69=$43;
 $37=$69;
 var $70=$37;
 var $71=_strlen($70);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($58,$68,$71);
 var $72=(function() { try { __THREW__ = 0; return __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($55,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=18;break; }
 case 2: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($47);
 var $74=($72&1);
 $bInterop=$74;
 var $75=$bInterop;
 var $76=(($75)&1);
 if($76){label=25;break;}else{label=3;break;}
 case 3: 
 var $78=(($54+4)|0);
 var $79=HEAP32[(($78)>>2)];
 _glBindBuffer(34962,$79);
 var $80=__ZN6global3parEv();
 $35=$50;
 $36=88;
 var $81=$35;
 var $82=$36;
 $33=$81;
 $34=$82;
 var $83=$33;
 var $84=$83;
 var $85=(($83)|0);
 $32=$85;
 var $86=$32;
 $31=$86;
 var $87=$31;
 var $88=$87;
 $30=$88;
 var $89=$30;
 var $90=$89;
 $29=$90;
 var $91=$29;
 var $92=(($89)|0);
 var $93=$34;
 var $94=$34;
 $28=$94;
 var $95=$28;
 var $96=_strlen($95);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($83,$93,$96);
 var $97=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($80,$50,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=19;break; }
 case 4: 
 var $99=($97<<2);
 var $100=($99<<2);
 var $101=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=19;break; }
 case 5: 
 $26=$51;
 $27=4008;
 var $103=$26;
 var $104=$27;
 $24=$103;
 $25=$104;
 var $105=$24;
 var $106=$105;
 var $107=(($105)|0);
 $23=$107;
 var $108=$23;
 $22=$108;
 var $109=$22;
 var $110=$109;
 $21=$110;
 var $111=$21;
 var $112=$111;
 $20=$112;
 var $113=$20;
 var $114=(($111)|0);
 var $115=$25;
 var $116=$25;
 $19=$116;
 var $117=$19;
 var $118=(function() { try { __THREW__ = 0; return _strlen($117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($105,$115,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=19;break; }
 case 7: 
 label=8;break;
 case 8: 
 var $120=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($101,$51,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=20;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return _glBufferSubData(34962,0,$100,$120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=20;break; }
 case 10: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($51);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
 var $123=(($54+8)|0);
 var $124=HEAP32[(($123)>>2)];
 _glBindBuffer(34962,$124);
 var $125=__ZN6global3parEv();
 $17=$52;
 $18=88;
 var $126=$17;
 var $127=$18;
 $15=$126;
 $16=$127;
 var $128=$15;
 var $129=$128;
 var $130=(($128)|0);
 $14=$130;
 var $131=$14;
 $13=$131;
 var $132=$13;
 var $133=$132;
 $12=$133;
 var $134=$12;
 var $135=$134;
 $11=$135;
 var $136=$11;
 var $137=(($134)|0);
 var $138=$16;
 var $139=$16;
 $10=$139;
 var $140=$10;
 var $141=_strlen($140);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($128,$138,$141);
 var $142=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($125,$52,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $144=($142<<2);
 var $145=($144<<2);
 var $146=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 $8=$53;
 $9=3560;
 var $148=$8;
 var $149=$9;
 $6=$148;
 $7=$149;
 var $150=$6;
 var $151=$150;
 var $152=(($150)|0);
 $5=$152;
 var $153=$5;
 $4=$153;
 var $154=$4;
 var $155=$154;
 $3=$155;
 var $156=$3;
 var $157=$156;
 $2=$157;
 var $158=$2;
 var $159=(($156)|0);
 var $160=$7;
 var $161=$7;
 $1=$161;
 var $162=$1;
 var $163=(function() { try { __THREW__ = 0; return _strlen($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($150,$160,$163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 label=15;break;
 case 15: 
 var $165=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($146,$53,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=23;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return _glBufferSubData(34962,0,$145,$165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=23;break; }
 case 17: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($53);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($52);
 label=25;break;
 case 18: 
 var $169$0 = ___cxa_find_matching_catch(-1, -1); var $169$1 = tempRet0;
 var $170=$169$0;
 $48=$170;
 var $171=$169$1;
 $49=$171;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($47);
 label=26;break;
 case 19: 
 var $173$0 = ___cxa_find_matching_catch(-1, -1); var $173$1 = tempRet0;
 var $174=$173$0;
 $48=$174;
 var $175=$173$1;
 $49=$175;
 label=21;break;
 case 20: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1); var $177$1 = tempRet0;
 var $178=$177$0;
 $48=$178;
 var $179=$177$1;
 $49=$179;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($51);
 label=21;break;
 case 21: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
 label=26;break;
 case 22: 
 var $182$0 = ___cxa_find_matching_catch(-1, -1); var $182$1 = tempRet0;
 var $183=$182$0;
 $48=$183;
 var $184=$182$1;
 $49=$184;
 label=24;break;
 case 23: 
 var $186$0 = ___cxa_find_matching_catch(-1, -1); var $186$1 = tempRet0;
 var $187=$186$0;
 $48=$187;
 var $188=$186$1;
 $49=$188;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($53);
 label=24;break;
 case 24: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($52);
 label=26;break;
 case 25: 
 STACKTOP=sp;return;
 case 26: 
 var $192=$48;
 var $193=$49;
 var $194$0=$192;
 var $194$1=0;
 var $195$0=$194$0;
 var $195$1=$193;
 ___resumeException($195$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK3glm6detail5tvec4IfE6lengthEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 STACKTOP=sp;return 4;
}


function __ZNK3glm6detail7tmat4x4IfE6lengthEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 STACKTOP=sp;return 4;
}


function __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg_result,$v,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6=(sp)+(24);
 $1=$v;
 $2=$s;
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=$2;
 var $12=HEAPF32[(($11)>>2)];
 var $13=($10)*($12);
 HEAPF32[(($3)>>2)]=$13;
 var $14=$1;
 var $15=(($14+4)|0);
 var $16=$15;
 var $17=HEAPF32[(($16)>>2)];
 var $18=$2;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($17)*($19);
 HEAPF32[(($4)>>2)]=$20;
 var $21=$1;
 var $22=(($21+8)|0);
 var $23=$22;
 var $24=HEAPF32[(($23)>>2)];
 var $25=$2;
 var $26=HEAPF32[(($25)>>2)];
 var $27=($24)*($26);
 HEAPF32[(($5)>>2)]=$27;
 var $28=$1;
 var $29=(($28+12)|0);
 var $30=$29;
 var $31=HEAPF32[(($30)>>2)];
 var $32=$2;
 var $33=HEAPF32[(($32)>>2)];
 var $34=($31)*($33);
 HEAPF32[(($6)>>2)]=$34;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg_result,$3,$4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN3glm11inversesqrtIfEET_RKS1_($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $2=$x;
 var $3=$2;
 var $4=HEAPF32[(($3)>>2)];
 $1=$4;
 var $5=$1;
 var $6=Math_sqrt($5);
 var $7=(1)/($6);
 STACKTOP=sp;return $7;
}


function __ZNK3glm6detail7tmat4x4IfEixEj($this,$i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$i;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3glm6detail7tmat4x4IfE6lengthEv($3);
 var $6=($4>>>0)<($5>>>0);
 if($6){var $10=0;label=3;break;}else{label=2;break;}
 case 2: 
 ___assert_fail(2680,2520,71,4184);
 throw "Reached an unreachable!";
 label=3;break;
 case 3: 
 var $10;
 var $11=$2;
 var $12=(($3)|0);
 var $13=(($12+($11<<4))|0);
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK3glm6detail5tvec4IfEixEj($this,$i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$i;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3glm6detail5tvec4IfE6lengthEv($3);
 var $6=($4>>>0)<($5>>>0);
 if($6){var $10=0;label=3;break;}else{label=2;break;}
 case 2: 
 ___assert_fail(2680,2568,59,4184);
 throw "Reached an unreachable!";
 label=3;break;
 case 3: 
 var $10;
 var $11=$2;
 var $12=(($3)|0);
 var $13=$12;
 var $14=(($13+($11<<2))|0);
 STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($this,$x,$y,$z,$w){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$x;
 $3=$y;
 $4=$z;
 $5=$w;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 __ZN3glm6detail5tvec4IfEC2IiiiiEERKT_RKT0_RKT1_RKT2_($6,$7,$8,$9,$10);
 STACKTOP=sp;return;
}


function __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($agg_result,$v1,$v2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6=(sp)+(24);
 $1=$v1;
 $2=$v2;
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=$2;
 var $12=(($11)|0);
 var $13=$12;
 var $14=HEAPF32[(($13)>>2)];
 var $15=($10)*($14);
 HEAPF32[(($3)>>2)]=$15;
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=$21;
 var $23=HEAPF32[(($22)>>2)];
 var $24=($19)*($23);
 HEAPF32[(($4)>>2)]=$24;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=$26;
 var $28=HEAPF32[(($27)>>2)];
 var $29=$2;
 var $30=(($29+8)|0);
 var $31=$30;
 var $32=HEAPF32[(($31)>>2)];
 var $33=($28)*($32);
 HEAPF32[(($5)>>2)]=$33;
 var $34=$1;
 var $35=(($34+12)|0);
 var $36=$35;
 var $37=HEAPF32[(($36)>>2)];
 var $38=$2;
 var $39=(($38+12)|0);
 var $40=$39;
 var $41=HEAPF32[(($40)>>2)];
 var $42=($37)*($41);
 HEAPF32[(($6)>>2)]=$42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg_result,$3,$4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($agg_result,$v1,$v2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6=(sp)+(24);
 $1=$v1;
 $2=$v2;
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=$2;
 var $12=(($11)|0);
 var $13=$12;
 var $14=HEAPF32[(($13)>>2)];
 var $15=($10)+($14);
 HEAPF32[(($3)>>2)]=$15;
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=$21;
 var $23=HEAPF32[(($22)>>2)];
 var $24=($19)+($23);
 HEAPF32[(($4)>>2)]=$24;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=$26;
 var $28=HEAPF32[(($27)>>2)];
 var $29=$2;
 var $30=(($29+8)|0);
 var $31=$30;
 var $32=HEAPF32[(($31)>>2)];
 var $33=($28)+($32);
 HEAPF32[(($5)>>2)]=$33;
 var $34=$1;
 var $35=(($34+12)|0);
 var $36=$35;
 var $37=HEAPF32[(($36)>>2)];
 var $38=$2;
 var $39=(($38+12)|0);
 var $40=$39;
 var $41=HEAPF32[(($40)>>2)];
 var $42=($37)+($41);
 HEAPF32[(($6)>>2)]=$42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg_result,$3,$4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN3glm6detail7tmat4x4IfEC1ERKNS0_5tvec4IfEES6_S6_S6_($this,$v0,$v1,$v2,$v3){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$v0;
 $3=$v1;
 $4=$v2;
 $5=$v3;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 __ZN3glm6detail7tmat4x4IfEC2ERKNS0_5tvec4IfEES6_S6_S6_($6,$7,$8,$9,$10);
 STACKTOP=sp;return;
}


function __ZN3glm3dotIfEET_RKNS_6detail5tvec4IS1_EES6_($x,$y){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$x;
 $2=$y;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$4;
 var $6=HEAPF32[(($5)>>2)];
 var $7=$2;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=($6)*($10);
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=HEAPF32[(($14)>>2)];
 var $16=$2;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($15)*($19);
 var $21=($11)+($20);
 var $22=$1;
 var $23=(($22+8)|0);
 var $24=$23;
 var $25=HEAPF32[(($24)>>2)];
 var $26=$2;
 var $27=(($26+8)|0);
 var $28=$27;
 var $29=HEAPF32[(($28)>>2)];
 var $30=($25)*($29);
 var $31=($21)+($30);
 var $32=$1;
 var $33=(($32+12)|0);
 var $34=$33;
 var $35=HEAPF32[(($34)>>2)];
 var $36=$2;
 var $37=(($36+12)|0);
 var $38=$37;
 var $39=HEAPF32[(($38)>>2)];
 var $40=($35)*($39);
 var $41=($31)+($40);
 STACKTOP=sp;return $41;
}


function __ZN3glm6detail7tmat4x4IfEdVIfEERS2_RKT_($this,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$s;
 var $3=$1;
 var $4=(($3)|0);
 var $5=(($4)|0);
 var $6=$2;
 var $7=__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($5,$6);
 var $8=(($3)|0);
 var $9=(($8+16)|0);
 var $10=$2;
 var $11=__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($9,$10);
 var $12=(($3)|0);
 var $13=(($12+32)|0);
 var $14=$2;
 var $15=__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($13,$14);
 var $16=(($3)|0);
 var $17=(($16+48)|0);
 var $18=$2;
 var $19=__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($17,$18);
 STACKTOP=sp;return $3;
}


function __ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($this,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$s;
 var $3=$1;
 var $4=$2;
 var $5=HEAPF32[(($4)>>2)];
 var $6=(($3)|0);
 var $7=$6;
 var $8=HEAPF32[(($7)>>2)];
 var $9=($8)/($5);
 HEAPF32[(($7)>>2)]=$9;
 var $10=$2;
 var $11=HEAPF32[(($10)>>2)];
 var $12=(($3+4)|0);
 var $13=$12;
 var $14=HEAPF32[(($13)>>2)];
 var $15=($14)/($11);
 HEAPF32[(($13)>>2)]=$15;
 var $16=$2;
 var $17=HEAPF32[(($16)>>2)];
 var $18=(($3+8)|0);
 var $19=$18;
 var $20=HEAPF32[(($19)>>2)];
 var $21=($20)/($17);
 HEAPF32[(($19)>>2)]=$21;
 var $22=$2;
 var $23=HEAPF32[(($22)>>2)];
 var $24=(($3+12)|0);
 var $25=$24;
 var $26=HEAPF32[(($25)>>2)];
 var $27=($26)/($23);
 HEAPF32[(($25)>>2)]=$27;
 STACKTOP=sp;return $3;
}


function __ZN3glm6detail7tmat4x4IfEC2ERKNS0_5tvec4IfEES6_S6_S6_($this,$v0,$v1,$v2,$v3){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$v0;
 $3=$v1;
 $4=$v2;
 $5=$v3;
 var $6=$1;
 var $7=(($6)|0);
 var $8=(($7)|0);
 var $9=(($8+64)|0);
 var $11=$8;label=2;break;
 case 2: 
 var $11;
 __ZN3glm6detail5tvec4IfEC1Ev($11);
 var $12=(($11+16)|0);
 var $13=($12|0)==($9|0);
 if($13){label=3;break;}else{var $11=$12;label=2;break;}
 case 3: 
 var $15=(($6)|0);
 var $16=(($15)|0);
 var $17=$2;
 var $18=__ZN3glm6detail5tvec4IfEaSERKS2_($16,$17);
 var $19=(($6)|0);
 var $20=(($19+16)|0);
 var $21=$3;
 var $22=__ZN3glm6detail5tvec4IfEaSERKS2_($20,$21);
 var $23=(($6)|0);
 var $24=(($23+32)|0);
 var $25=$4;
 var $26=__ZN3glm6detail5tvec4IfEaSERKS2_($24,$25);
 var $27=(($6)|0);
 var $28=(($27+48)|0);
 var $29=$5;
 var $30=__ZN3glm6detail5tvec4IfEaSERKS2_($28,$29);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detail5tvec4IfEC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN3glm6detail5tvec4IfEC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec4IfEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=$3;
 HEAPF32[(($4)>>2)]=0;
 var $5=(($2+4)|0);
 var $6=$5;
 HEAPF32[(($6)>>2)]=0;
 var $7=(($2+8)|0);
 var $8=$7;
 HEAPF32[(($8)>>2)]=0;
 var $9=(($2+12)|0);
 var $10=$9;
 HEAPF32[(($10)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec4IfEC2IiiiiEERKT_RKT0_RKT1_RKT2_($this,$x,$y,$z,$w){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$x;
 $3=$y;
 $4=$z;
 $5=$w;
 var $6=$1;
 var $7=(($6)|0);
 var $8=$7;
 var $9=$2;
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0);
 HEAPF32[(($8)>>2)]=$11;
 var $12=(($6+4)|0);
 var $13=$12;
 var $14=$3;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0);
 HEAPF32[(($13)>>2)]=$16;
 var $17=(($6+8)|0);
 var $18=$17;
 var $19=$4;
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0);
 HEAPF32[(($18)>>2)]=$21;
 var $22=(($6+12)|0);
 var $23=$22;
 var $24=$5;
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0);
 HEAPF32[(($23)>>2)]=$26;
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec4IfEC1ERKS2_($this,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$v;
 var $3=$1;
 var $4=$2;
 __ZN3glm6detail5tvec4IfEC2ERKS2_($3,$4);
 STACKTOP=sp;return;
}


function __ZN3glm6detail7tmat4x4IfEC1ENS2_4ctorE($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$3;
 __ZN3glm6detail7tmat4x4IfEC2ENS2_4ctorE($4,$5);
 STACKTOP=sp;return;
}


function __ZN3glm6detail7tmat4x4IfEC2ENS2_4ctorE($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=(($6+64)|0);
 var $9=$6;label=2;break;
 case 2: 
 var $9;
 __ZN3glm6detail5tvec4IfEC1Ev($9);
 var $10=(($9+16)|0);
 var $11=($10|0)==($7|0);
 if($11){label=3;break;}else{var $9=$10;label=2;break;}
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detail5tvec4IfEC2ERKS2_($this,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$v;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$4;
 var $6=$2;
 var $7=(($6)|0);
 var $8=$7;
 var $9=HEAPF32[(($8)>>2)];
 HEAPF32[(($5)>>2)]=$9;
 var $10=(($3+4)|0);
 var $11=$10;
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=HEAPF32[(($14)>>2)];
 HEAPF32[(($11)>>2)]=$15;
 var $16=(($3+8)|0);
 var $17=$16;
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=$19;
 var $21=HEAPF32[(($20)>>2)];
 HEAPF32[(($17)>>2)]=$21;
 var $22=(($3+12)|0);
 var $23=$22;
 var $24=$2;
 var $25=(($24+12)|0);
 var $26=$25;
 var $27=HEAPF32[(($26)>>2)];
 HEAPF32[(($23)>>2)]=$27;
 STACKTOP=sp;return;
}


function __ZN3glm3tanIfEET_RKS1_($angle){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $2=$angle;
 var $3=$2;
 var $4=HEAPF32[(($3)>>2)];
 $1=$4;
 var $5=$1;
 var $6=Math_tan($5);
 STACKTOP=sp;return $6;
}


function __ZN3glm7radiansIfEET_RKS1_($degrees){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $pi;
 $1=$degrees;
 $pi=3.1415927410125732;
 var $2=$1;
 var $3=HEAPF32[(($2)>>2)];
 var $4=($3)*((0.01745329238474369));
 STACKTOP=sp;return $4;
}


function __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($agg_result,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $sqr=sp;
 var $2=(sp)+(8);
 $1=$x;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$4;
 var $6=HEAPF32[(($5)>>2)];
 var $7=$1;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=($6)*($10);
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=HEAPF32[(($14)>>2)];
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($15)*($19);
 var $21=($11)+($20);
 var $22=$1;
 var $23=(($22+8)|0);
 var $24=$23;
 var $25=HEAPF32[(($24)>>2)];
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=$27;
 var $29=HEAPF32[(($28)>>2)];
 var $30=($25)*($29);
 var $31=($21)+($30);
 HEAPF32[(($sqr)>>2)]=$31;
 var $32=$1;
 var $33=__ZN3glm11inversesqrtIfEET_RKS1_($sqr);
 HEAPF32[(($2)>>2)]=$33;
 __ZN3glm6detailmlIfEENS0_5tvec3IT_EERKS4_RKS3_($agg_result,$32,$2);
 STACKTOP=sp;return;
}


function __ZN3glm6detailmiIfEENS0_5tvec3IT_EERKS4_S6_($agg_result,$v1,$v2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 $1=$v1;
 $2=$v2;
 var $6=$1;
 var $7=(($6)|0);
 var $8=$7;
 var $9=HEAPF32[(($8)>>2)];
 var $10=$2;
 var $11=(($10)|0);
 var $12=$11;
 var $13=HEAPF32[(($12)>>2)];
 var $14=($9)-($13);
 HEAPF32[(($3)>>2)]=$14;
 var $15=$1;
 var $16=(($15+4)|0);
 var $17=$16;
 var $18=HEAPF32[(($17)>>2)];
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=$20;
 var $22=HEAPF32[(($21)>>2)];
 var $23=($18)-($22);
 HEAPF32[(($4)>>2)]=$23;
 var $24=$1;
 var $25=(($24+8)|0);
 var $26=$25;
 var $27=HEAPF32[(($26)>>2)];
 var $28=$2;
 var $29=(($28+8)|0);
 var $30=$29;
 var $31=HEAPF32[(($30)>>2)];
 var $32=($27)-($31);
 HEAPF32[(($5)>>2)]=$32;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg_result,$3,$4,$5);
 STACKTOP=sp;return;
}


function __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($agg_result,$x,$y){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 $1=$x;
 $2=$y;
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=$7;
 var $9=HEAPF32[(($8)>>2)];
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=$11;
 var $13=HEAPF32[(($12)>>2)];
 var $14=($9)*($13);
 var $15=$2;
 var $16=(($15+4)|0);
 var $17=$16;
 var $18=HEAPF32[(($17)>>2)];
 var $19=$1;
 var $20=(($19+8)|0);
 var $21=$20;
 var $22=HEAPF32[(($21)>>2)];
 var $23=($18)*($22);
 var $24=($14)-($23);
 HEAPF32[(($3)>>2)]=$24;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=$26;
 var $28=HEAPF32[(($27)>>2)];
 var $29=$2;
 var $30=(($29)|0);
 var $31=$30;
 var $32=HEAPF32[(($31)>>2)];
 var $33=($28)*($32);
 var $34=$2;
 var $35=(($34+8)|0);
 var $36=$35;
 var $37=HEAPF32[(($36)>>2)];
 var $38=$1;
 var $39=(($38)|0);
 var $40=$39;
 var $41=HEAPF32[(($40)>>2)];
 var $42=($37)*($41);
 var $43=($33)-($42);
 HEAPF32[(($4)>>2)]=$43;
 var $44=$1;
 var $45=(($44)|0);
 var $46=$45;
 var $47=HEAPF32[(($46)>>2)];
 var $48=$2;
 var $49=(($48+4)|0);
 var $50=$49;
 var $51=HEAPF32[(($50)>>2)];
 var $52=($47)*($51);
 var $53=$2;
 var $54=(($53)|0);
 var $55=$54;
 var $56=HEAPF32[(($55)>>2)];
 var $57=$1;
 var $58=(($57+4)|0);
 var $59=$58;
 var $60=HEAPF32[(($59)>>2)];
 var $61=($56)*($60);
 var $62=($52)-($61);
 HEAPF32[(($5)>>2)]=$62;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg_result,$3,$4,$5);
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec3IfEaSERKS2_($this,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$v;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=$5;
 var $7=HEAPF32[(($6)>>2)];
 var $8=(($3)|0);
 var $9=$8;
 HEAPF32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=$11;
 var $13=HEAPF32[(($12)>>2)];
 var $14=(($3+4)|0);
 var $15=$14;
 HEAPF32[(($15)>>2)]=$13;
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=(($3+8)|0);
 var $21=$20;
 HEAPF32[(($21)>>2)]=$19;
 STACKTOP=sp;return $3;
}


function __ZN3glm6detail7tmat4x4IfEC1IiEERKT_($this,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$s;
 var $3=$1;
 var $4=$2;
 __ZN3glm6detail7tmat4x4IfEC2IiEERKT_($3,$4);
 STACKTOP=sp;return;
}


function __ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($x,$y){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$x;
 $2=$y;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$4;
 var $6=HEAPF32[(($5)>>2)];
 var $7=$2;
 var $8=(($7)|0);
 var $9=$8;
 var $10=HEAPF32[(($9)>>2)];
 var $11=($6)*($10);
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=HEAPF32[(($14)>>2)];
 var $16=$2;
 var $17=(($16+4)|0);
 var $18=$17;
 var $19=HEAPF32[(($18)>>2)];
 var $20=($15)*($19);
 var $21=($11)+($20);
 var $22=$1;
 var $23=(($22+8)|0);
 var $24=$23;
 var $25=HEAPF32[(($24)>>2)];
 var $26=$2;
 var $27=(($26+8)|0);
 var $28=$27;
 var $29=HEAPF32[(($28)>>2)];
 var $30=($25)*($29);
 var $31=($21)+($30);
 STACKTOP=sp;return $31;
}


function __ZN3glm6detail7tmat4x4IfEC2IiEERKT_($this,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $Zero=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(24);
 var $5=(sp)+(32);
 var $6=(sp)+(48);
 var $7=(sp)+(56);
 var $8=(sp)+(72);
 var $9=(sp)+(80);
 var $10=(sp)+(96);
 $1=$this;
 $2=$s;
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12)|0);
 var $14=(($13+64)|0);
 var $16=$13;label=2;break;
 case 2: 
 var $16;
 __ZN3glm6detail5tvec4IfEC1Ev($16);
 var $17=(($16+16)|0);
 var $18=($17|0)==($14|0);
 if($18){label=3;break;}else{var $16=$17;label=2;break;}
 case 3: 
 HEAPF32[(($Zero)>>2)]=0;
 var $20=(($11)|0);
 var $21=(($20)|0);
 var $22=$2;
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0);
 HEAPF32[(($4)>>2)]=$24;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($3,$4,$Zero,$Zero,$Zero);
 var $25=__ZN3glm6detail5tvec4IfEaSERKS2_($21,$3);
 var $26=(($11)|0);
 var $27=(($26+16)|0);
 var $28=$2;
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0);
 HEAPF32[(($6)>>2)]=$30;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($5,$Zero,$6,$Zero,$Zero);
 var $31=__ZN3glm6detail5tvec4IfEaSERKS2_($27,$5);
 var $32=(($11)|0);
 var $33=(($32+32)|0);
 var $34=$2;
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0);
 HEAPF32[(($8)>>2)]=$36;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($7,$Zero,$Zero,$8,$Zero);
 var $37=__ZN3glm6detail5tvec4IfEaSERKS2_($33,$7);
 var $38=(($11)|0);
 var $39=(($38+48)|0);
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0);
 HEAPF32[(($10)>>2)]=$42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($9,$Zero,$Zero,$Zero,$10);
 var $43=__ZN3glm6detail5tvec4IfEaSERKS2_($39,$9);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detailmlIfEENS0_5tvec3IT_EERKS4_RKS3_($agg_result,$v,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 $1=$v;
 $2=$s;
 var $6=$1;
 var $7=(($6)|0);
 var $8=$7;
 var $9=HEAPF32[(($8)>>2)];
 var $10=$2;
 var $11=HEAPF32[(($10)>>2)];
 var $12=($9)*($11);
 HEAPF32[(($3)>>2)]=$12;
 var $13=$1;
 var $14=(($13+4)|0);
 var $15=$14;
 var $16=HEAPF32[(($15)>>2)];
 var $17=$2;
 var $18=HEAPF32[(($17)>>2)];
 var $19=($16)*($18);
 HEAPF32[(($4)>>2)]=$19;
 var $20=$1;
 var $21=(($20+8)|0);
 var $22=$21;
 var $23=HEAPF32[(($22)>>2)];
 var $24=$2;
 var $25=HEAPF32[(($24)>>2)];
 var $26=($23)*($25);
 HEAPF32[(($5)>>2)]=$26;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg_result,$3,$4,$5);
 STACKTOP=sp;return;
}


function __ZN3glm6detail7tmat4x4IfEC2ERKf($this,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $Zero=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(24);
 var $5=(sp)+(40);
 var $6=(sp)+(56);
 $1=$this;
 $2=$s;
 var $7=$1;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=(($9+64)|0);
 var $12=$9;label=2;break;
 case 2: 
 var $12;
 __ZN3glm6detail5tvec4IfEC1Ev($12);
 var $13=(($12+16)|0);
 var $14=($13|0)==($10|0);
 if($14){label=3;break;}else{var $12=$13;label=2;break;}
 case 3: 
 HEAPF32[(($Zero)>>2)]=0;
 var $16=(($7)|0);
 var $17=(($16)|0);
 var $18=$2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($3,$18,$Zero,$Zero,$Zero);
 var $19=__ZN3glm6detail5tvec4IfEaSERKS2_($17,$3);
 var $20=(($7)|0);
 var $21=(($20+16)|0);
 var $22=$2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($4,$Zero,$22,$Zero,$Zero);
 var $23=__ZN3glm6detail5tvec4IfEaSERKS2_($21,$4);
 var $24=(($7)|0);
 var $25=(($24+32)|0);
 var $26=$2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($5,$Zero,$Zero,$26,$Zero);
 var $27=__ZN3glm6detail5tvec4IfEaSERKS2_($25,$5);
 var $28=(($7)|0);
 var $29=(($28+48)|0);
 var $30=$2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($6,$Zero,$Zero,$Zero,$30);
 var $31=__ZN3glm6detail5tvec4IfEaSERKS2_($29,$6);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 var $8;
 var $9;
 var $10=(sp)+(8);
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=(sp)+(16);
 var $__ms_i;
 var $__cap_i;
 var $19=(sp)+(24);
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $__a;
 var $__v=(sp)+(32);
 var $29;
 var $30;
 $27=$this;
 $28=$__n;
 var $31=$27;
 var $32=$31;
 $26=$32;
 var $33=$26;
 var $34=(($33+8)|0);
 $25=$34;
 var $35=$25;
 var $36=$35;
 $24=$36;
 var $37=$24;
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$31;
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$39;
 var $44=$42;
 var $45=((($43)-($44))|0);
 var $46=(((($45|0))/(4))&-1);
 var $47=$28;
 var $48=($46>>>0)>=($47>>>0);
 if($48){label=2;break;}else{label=3;break;}
 case 2: 
 var $50=$28;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($31,$50);
 label=15;break;
 case 3: 
 var $52=$31;
 $23=$52;
 var $53=$23;
 var $54=(($53+8)|0);
 $22=$54;
 var $55=$22;
 var $56=$55;
 $21=$56;
 var $57=$21;
 var $58=$57;
 $__a=$58;
 $20=$31;
 var $59=$20;
 var $60=$59;
 var $61=(($60+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$59;
 var $64=(($63)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$62;
 var $67=$65;
 var $68=((($66)-($67))|0);
 var $69=(((($68|0))/(4))&-1);
 var $70=$28;
 var $71=((($69)+($70))|0);
 $17=$31;
 HEAP32[(($18)>>2)]=$71;
 var $72=$17;
 var $73=__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($72);
 $__ms_i=$73;
 var $74=HEAP32[(($18)>>2)];
 var $75=$__ms_i;
 var $76=($74>>>0)>($75>>>0);
 if($76){label=4;break;}else{label=5;break;}
 case 4: 
 var $78=$72;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($78);
 label=5;break;
 case 5: 
 $15=$72;
 var $80=$15;
 var $81=$80;
 $14=$81;
 var $82=$14;
 $13=$82;
 var $83=$13;
 var $84=(($83+8)|0);
 $12=$84;
 var $85=$12;
 var $86=$85;
 $11=$86;
 var $87=$11;
 var $88=(($87)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($82)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$89;
 var $93=$91;
 var $94=((($92)-($93))|0);
 var $95=(((($94|0))/(4))&-1);
 $__cap_i=$95;
 var $96=$__cap_i;
 var $97=$__ms_i;
 var $98=(((($97>>>0))/(2))&-1);
 var $99=($96>>>0)>=($98>>>0);
 if($99){label=6;break;}else{label=7;break;}
 case 6: 
 var $101=$__ms_i;
 $16=$101;
 label=11;break;
 case 7: 
 var $103=$__cap_i;
 var $104=($103<<1);
 HEAP32[(($19)>>2)]=$104;
 $8=$19;
 $9=$18;
 var $105=$8;
 var $106=$9;
 var $tmp_i_i=$7;
 var $tmp1_i_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $5=$105;
 $6=$106;
 var $107=$5;
 var $108=$6;
 $2=$7;
 $3=$107;
 $4=$108;
 var $109=$2;
 var $110=$3;
 var $111=HEAP32[(($110)>>2)];
 var $112=$4;
 var $113=HEAP32[(($112)>>2)];
 var $114=($111>>>0)<($113>>>0);
 if($114){label=8;break;}else{label=9;break;}
 case 8: 
 var $116=$6;
 var $119=$116;label=10;break;
 case 9: 
 var $118=$5;
 var $119=$118;label=10;break;
 case 10: 
 var $119;
 var $120=HEAP32[(($119)>>2)];
 $16=$120;
 label=11;break;
 case 11: 
 var $121=$16;
 $1=$31;
 var $122=$1;
 var $123=$122;
 var $124=(($123+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$122;
 var $127=(($126)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=$125;
 var $130=$128;
 var $131=((($129)-($130))|0);
 var $132=(((($131|0))/(4))&-1);
 var $133=$__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC1EjjS3_($__v,$121,$132,$133);
 var $134=$28;
 (function() { try { __THREW__ = 0; return __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($__v,$134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=14;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($31,$__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($__v);
 label=15;break;
 case 14: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 $29=$139;
 var $140=$138$1;
 $30=$140;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($__v);
 label=16;break;
 case 15: 
 STACKTOP=sp;return;
 case 16: 
 var $143=$29;
 var $144=$30;
 var $145$0=$143;
 var $145$1=0;
 var $146$0=$145$0;
 var $146$1=$144;
 ___resumeException($146$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10=(sp)+(16);
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $__a;
 $14=$this;
 $15=$__n;
 var $16=$14;
 var $17=$16;
 $13=$17;
 var $18=$13;
 var $19=(($18+8)|0);
 $12=$19;
 var $20=$12;
 var $21=$20;
 $11=$21;
 var $22=$11;
 var $23=$22;
 $__a=$23;
 label=2;break;
 case 2: 
 var $25=$__a;
 var $26=$16;
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 $1=$28;
 var $29=$1;
 $7=$25;
 $8=$29;
 var $30=$10;
 var $31=$7;
 var $32=$8;
 var $tmp_i=$6;
 var $tmp1_i=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $4=$31;
 $5=$32;
 var $33=$4;
 var $34=$5;
 $2=$33;
 $3=$34;
 var $35=$2;
 var $36=$3;
 var $37=$36;
 var $38=($37|0)==0;
 if($38){var $41=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $40=$37;
 HEAP32[(($40)>>2)]=0;
 var $41=$40;label=4;break;
 case 4: 
 var $41;
 var $42=$16;
 var $43=(($42+4)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+4)|0);
 HEAP32[(($43)>>2)]=$45;
 var $46=$15;
 var $47=((($46)-(1))|0);
 $15=$47;
 label=5;break;
 case 5: 
 var $49=$15;
 var $50=($49>>>0)>0;
 if($50){label=2;break;}else{label=6;break;}
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC1EjjS3_($this,$__cap,$__start,$__a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$__cap;
 $3=$__start;
 $4=$__a;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($5,$6,$7,$8);
 STACKTOP=sp;return;
}


function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10=(sp)+(16);
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $__a;
 $14=$this;
 $15=$__n;
 var $16=$14;
 $13=$16;
 var $17=$13;
 var $18=(($17+12)|0);
 $12=$18;
 var $19=$12;
 var $20=$19;
 $11=$20;
 var $21=$11;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 $__a=$23;
 label=2;break;
 case 2: 
 var $25=$__a;
 var $26=(($16+8)|0);
 var $27=HEAP32[(($26)>>2)];
 $1=$27;
 var $28=$1;
 $7=$25;
 $8=$28;
 var $29=$10;
 var $30=$7;
 var $31=$8;
 var $tmp_i=$6;
 var $tmp1_i=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $4=$30;
 $5=$31;
 var $32=$4;
 var $33=$5;
 $2=$32;
 $3=$33;
 var $34=$2;
 var $35=$3;
 var $36=$35;
 var $37=($36|0)==0;
 if($37){var $40=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $39=$36;
 HEAP32[(($39)>>2)]=0;
 var $40=$39;label=4;break;
 case 4: 
 var $40;
 var $41=(($16+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+4)|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=$15;
 var $45=((($44)-(1))|0);
 $15=$45;
 label=5;break;
 case 5: 
 var $47=$15;
 var $48=($47>>>0)>0;
 if($48){label=2;break;}else{label=6;break;}
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $_Np_i;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $__t_i2=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $__t_i1=(sp)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $__t_i=(sp)+(16);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 $30=$this;
 $31=$__v;
 var $32=$30;
 var $33=$32;
 $29=$33;
 var $34=$29;
 var $35=(($34+8)|0);
 $28=$35;
 var $36=$28;
 var $37=$36;
 $27=$37;
 var $38=$27;
 var $39=$38;
 var $40=$32;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$32;
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$31;
 var $47=(($46+4)|0);
 $1=$39;
 $2=$42;
 $3=$45;
 $4=$47;
 var $48=$3;
 var $49=$2;
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=(((($52|0))/(4))&-1);
 $_Np_i=$53;
 var $54=$_Np_i;
 var $55=$4;
 var $56=HEAP32[(($55)>>2)];
 var $57=(((-$54))|0);
 var $58=(($56+($57<<2))|0);
 HEAP32[(($55)>>2)]=$58;
 var $59=$4;
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 var $62=$2;
 var $63=$62;
 var $64=$_Np_i;
 var $65=($64<<2);
 assert($65 % 1 === 0);(_memcpy($61, $63, $65)|0);
 var $66=$32;
 var $67=(($66)|0);
 var $68=$31;
 var $69=(($68+4)|0);
 $8=$67;
 $9=$69;
 var $70=$8;
 $7=$70;
 var $71=$7;
 var $72=HEAP32[(($71)>>2)];
 HEAP32[(($__t_i2)>>2)]=$72;
 var $73=$9;
 $5=$73;
 var $74=$5;
 var $75=HEAP32[(($74)>>2)];
 var $76=$8;
 HEAP32[(($76)>>2)]=$75;
 $6=$__t_i2;
 var $77=$6;
 var $78=HEAP32[(($77)>>2)];
 var $79=$9;
 HEAP32[(($79)>>2)]=$78;
 var $80=$32;
 var $81=(($80+4)|0);
 var $82=$31;
 var $83=(($82+8)|0);
 $13=$81;
 $14=$83;
 var $84=$13;
 $12=$84;
 var $85=$12;
 var $86=HEAP32[(($85)>>2)];
 HEAP32[(($__t_i1)>>2)]=$86;
 var $87=$14;
 $10=$87;
 var $88=$10;
 var $89=HEAP32[(($88)>>2)];
 var $90=$13;
 HEAP32[(($90)>>2)]=$89;
 $11=$__t_i1;
 var $91=$11;
 var $92=HEAP32[(($91)>>2)];
 var $93=$14;
 HEAP32[(($93)>>2)]=$92;
 var $94=$32;
 $17=$94;
 var $95=$17;
 var $96=(($95+8)|0);
 $16=$96;
 var $97=$16;
 var $98=$97;
 $15=$98;
 var $99=$15;
 var $100=(($99)|0);
 var $101=$31;
 $20=$101;
 var $102=$20;
 var $103=(($102+12)|0);
 $19=$103;
 var $104=$19;
 var $105=$104;
 $18=$105;
 var $106=$18;
 var $107=(($106)|0);
 $24=$100;
 $25=$107;
 var $108=$24;
 $23=$108;
 var $109=$23;
 var $110=HEAP32[(($109)>>2)];
 HEAP32[(($__t_i)>>2)]=$110;
 var $111=$25;
 $21=$111;
 var $112=$21;
 var $113=HEAP32[(($112)>>2)];
 var $114=$24;
 HEAP32[(($114)>>2)]=$113;
 $22=$__t_i;
 var $115=$22;
 var $116=HEAP32[(($115)>>2)];
 var $117=$25;
 HEAP32[(($117)>>2)]=$116;
 var $118=$31;
 var $119=(($118+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$31;
 var $122=(($121)|0);
 HEAP32[(($122)>>2)]=$120;
 $26=$32;
 var $123=$26;
 STACKTOP=sp;return;
}


function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($2);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 4465
// WARNING: content after a branch in a label, line: 4467
// WARNING: content after a branch in a label, line: 4468
// WARNING: content after a branch in a label, line: 4469
// WARNING: content after a branch in a label, line: 4556
// WARNING: content after a branch in a label, line: 4558
// WARNING: content after a branch in a label, line: 4559
// WARNING: content after a branch in a label, line: 4560

function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29=(sp)+(24);
 var $30;
 var $31;
 var $32=(sp)+(32);
 var $33;
 var $34;
 $34=$this;
 var $35=$34;
 $33=$35;
 var $36=$33;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 $30=$36;
 $31=$38;
 var $39=$30;
 var $40=$31;
 var $tmp_i_i=$29;
 var $tmp1_i_i=$32;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $27=$39;
 $28=$40;
 var $41=$27;
 label=2;break;
 case 2: 
 var $43=$28;
 var $44=(($41+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)!=($45|0);
 if($46){label=3;break;}else{label=4;break;}
 case 3: 
 $26=$41;
 var $48=$26;
 var $49=(($48+12)|0);
 $25=$49;
 var $50=$25;
 var $51=$50;
 $24=$51;
 var $52=$24;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($41+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=((($56)-(4))|0);
 HEAP32[(($55)>>2)]=$57;
 $23=$57;
 var $58=$23;
 $19=$54;
 $20=$58;
 var $59=$22;
 var $60=$19;
 var $61=$20;
 var $tmp_i_i_i_i=$18;
 var $tmp1_i_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $16=$60;
 $17=$61;
 var $62=$16;
 var $63=$17;
 $14=$62;
 $15=$63;
 var $64=$14;
 var $65=$15;
 label=2;break;
 case 4: 
 var $66=(($35)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)!=0;
 if($68){label=5;break;}else{label=7;break;}
 case 5: 
 $13=$35;
 var $70=$13;
 var $71=(($70+12)|0);
 $12=$71;
 var $72=$12;
 var $73=$72;
 $11=$73;
 var $74=$11;
 var $75=(($74+4)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($35)|0);
 var $78=HEAP32[(($77)>>2)];
 $4=$35;
 var $79=$4;
 $3=$79;
 var $80=$3;
 var $81=(($80+12)|0);
 $2=$81;
 var $82=$2;
 var $83=$82;
 $1=$83;
 var $84=$1;
 var $85=(($84)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($79)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$86;
 var $90=$88;
 var $91=((($89)-($90))|0);
 var $92=(((($91|0))/(4))&-1);
 label=6;break;
 case 6: 
 $8=$76;
 $9=$78;
 $10=$92;
 var $94=$8;
 var $95=$9;
 var $96=$10;
 $5=$94;
 $6=$95;
 $7=$96;
 var $97=$5;
 var $98=$6;
 var $99=$98;
 __ZdlPv($99);
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12=(sp)+(16);
 var $13;
 var $14=(sp)+(24);
 var $15=(sp)+(32);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(40);
 var $21=(sp)+(48);
 $19=$this;
 var $22=$19;
 var $23=$22;
 $18=$23;
 var $24=$18;
 var $25=(($24+8)|0);
 $17=$25;
 var $26=$17;
 var $27=$26;
 $16=$27;
 var $28=$16;
 var $29=$28;
 $13=$29;
 var $30=$15;
 var $31=$13;
 var $tmp_i=$12;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$31;
 var $32=$11;
 $10=$32;
 var $33=$10;
 HEAP32[(($20)>>2)]=1073741823;
 var $34=((2147483647)&-1);
 HEAP32[(($21)>>2)]=$34;
 $7=$20;
 $8=$21;
 var $35=$7;
 var $36=$8;
 var $tmp_i1=$6;
 var $tmp1_i2=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $4=$35;
 $5=$36;
 var $37=$5;
 var $38=$4;
 $1=$6;
 $2=$37;
 $3=$38;
 var $39=$1;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=($41>>>0)<($43>>>0);
 if($44){label=2;break;}else{label=3;break;}
 case 2: 
 var $46=$5;
 var $49=$46;label=4;break;
 case 3: 
 var $48=$4;
 var $49=$48;label=4;break;
 case 4: 
 var $49;
 label=5;break;
 case 5: 
 var $51=HEAP32[(($49)>>2)];
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16=sp;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(8);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 $25=$this;
 $26=$__cap;
 $27=$__start;
 $28=$__a;
 var $29=$25;
 var $30=$29;
 var $31=(($29+12)|0);
 var $32=$28;
 $22=$31;
 $23=0;
 $24=$32;
 var $33=$22;
 var $34=$23;
 var $35=$24;
 $19=$33;
 HEAP32[(($20)>>2)]=$34;
 $21=$35;
 var $36=$19;
 var $37=$36;
 $18=$20;
 var $38=$18;
 var $39=HEAP32[(($38)>>2)];
 var $40=$21;
 $12=$40;
 var $41=$12;
 $15=$37;
 HEAP32[(($16)>>2)]=$39;
 $17=$41;
 var $42=$15;
 var $43=(($42)|0);
 $14=$16;
 var $44=$14;
 var $45=HEAP32[(($44)>>2)];
 HEAP32[(($43)>>2)]=$45;
 var $46=(($42+4)|0);
 var $47=$17;
 $13=$47;
 var $48=$13;
 HEAP32[(($46)>>2)]=$48;
 var $49=$26;
 var $50=($49|0)!=0;
 if($50){label=2;break;}else{label=3;break;}
 case 2: 
 $3=$29;
 var $52=$3;
 var $53=(($52+12)|0);
 $2=$53;
 var $54=$2;
 var $55=$54;
 $1=$55;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$26;
 $7=$58;
 $8=$59;
 var $60=$7;
 var $61=$8;
 $4=$60;
 $5=$61;
 $6=0;
 var $62=$4;
 var $63=$5;
 var $64=($63<<2);
 var $65=__Znwj($64);
 var $66=$65;
 var $69=$66;label=4;break;
 case 3: 
 var $69=0;label=4;break;
 case 4: 
 var $69;
 var $70=(($29)|0);
 HEAP32[(($70)>>2)]=$69;
 var $71=(($29)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$27;
 var $74=(($72+($73<<2))|0);
 var $75=(($29+8)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($29+4)|0);
 HEAP32[(($76)>>2)]=$74;
 var $77=(($29)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$26;
 var $80=(($78+($79<<2))|0);
 $11=$29;
 var $81=$11;
 var $82=(($81+12)|0);
 $10=$82;
 var $83=$10;
 var $84=$83;
 $9=$84;
 var $85=$9;
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=$80;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN3glm6detail5tvec4IfEC2ERKfS4_S4_S4_($this,$s1,$s2,$s3,$s4){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$s1;
 $3=$s2;
 $4=$s3;
 $5=$s4;
 var $6=$1;
 var $7=(($6)|0);
 var $8=$7;
 var $9=$2;
 var $10=HEAPF32[(($9)>>2)];
 HEAPF32[(($8)>>2)]=$10;
 var $11=(($6+4)|0);
 var $12=$11;
 var $13=$3;
 var $14=HEAPF32[(($13)>>2)];
 HEAPF32[(($12)>>2)]=$14;
 var $15=(($6+8)|0);
 var $16=$15;
 var $17=$4;
 var $18=HEAPF32[(($17)>>2)];
 HEAPF32[(($16)>>2)]=$18;
 var $19=(($6+12)|0);
 var $20=$19;
 var $21=$5;
 var $22=HEAPF32[(($21)>>2)];
 HEAPF32[(($20)>>2)]=$22;
 STACKTOP=sp;return;
}


function __ZN3glm6detail5tvec3IfEC2ERKfS4_S4_($this,$s0,$s1,$s2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$s0;
 $3=$s1;
 $4=$s2;
 var $5=$1;
 var $6=(($5)|0);
 var $7=$6;
 var $8=$2;
 var $9=HEAPF32[(($8)>>2)];
 HEAPF32[(($7)>>2)]=$9;
 var $10=(($5+4)|0);
 var $11=$10;
 var $12=$3;
 var $13=HEAPF32[(($12)>>2)];
 HEAPF32[(($11)>>2)]=$13;
 var $14=(($5+8)|0);
 var $15=$14;
 var $16=$4;
 var $17=HEAPF32[(($16)>>2)];
 HEAPF32[(($15)>>2)]=$17;
 STACKTOP=sp;return;
}


function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg_result,$this,$__k){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $__lhs_sz_i_i_i;
 var $__lp_i_i_i;
 var $__rp_i_i_i;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $__hash;
 var $__bc;
 var $__chash;
 var $__nd;
 $96=$this;
 $97=$__k;
 var $98=$96;
 $95=$98;
 var $99=$95;
 var $100=(($99+12)|0);
 $94=$100;
 var $101=$94;
 var $102=$101;
 $93=$102;
 var $103=$93;
 var $104=$103;
 var $105=$97;
 $19=$104;
 $20=$105;
 var $106=$19;
 var $107=$106;
 var $108=$20;
 var $109=__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108);
 $__hash=$109;
 $18=$98;
 var $110=$18;
 var $111=(($110)|0);
 $17=$111;
 var $112=$17;
 var $113=(($112)|0);
 $16=$113;
 var $114=$16;
 var $115=$114;
 $15=$115;
 var $116=$15;
 var $117=(($116+4)|0);
 $14=$117;
 var $118=$14;
 var $119=(($118)|0);
 $13=$119;
 var $120=$13;
 var $121=$120;
 $12=$121;
 var $122=$12;
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 $__bc=$124;
 var $125=$__bc;
 var $126=($125|0)!=0;
 if($126){label=2;break;}else{label=43;break;}
 case 2: 
 var $128=$__hash;
 var $129=$__bc;
 $10=$128;
 $11=$129;
 var $130=$11;
 var $131=$11;
 var $132=((($131)-(1))|0);
 var $133=$130&$132;
 var $134=($133|0)!=0;
 if($134){label=4;break;}else{label=3;break;}
 case 3: 
 var $136=$10;
 var $137=$11;
 var $138=((($137)-(1))|0);
 var $139=$136&$138;
 var $144=$139;label=5;break;
 case 4: 
 var $141=$10;
 var $142=$11;
 var $143=(((($141>>>0))%(($142>>>0)))&-1);
 var $144=$143;label=5;break;
 case 5: 
 var $144;
 $__chash=$144;
 var $145=(($98)|0);
 var $146=$__chash;
 $3=$145;
 $4=$146;
 var $147=$3;
 var $148=$4;
 var $149=(($147)|0);
 $2=$149;
 var $150=$2;
 var $151=$150;
 $1=$151;
 var $152=$1;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+($148<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 $__nd=$156;
 var $157=$__nd;
 var $158=($157|0)!=0;
 if($158){label=6;break;}else{label=42;break;}
 case 6: 
 var $160=$__nd;
 var $161=$160;
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 $__nd=$163;
 label=7;break;
 case 7: 
 var $165=$__nd;
 var $166=($165|0)!=0;
 if($166){label=8;break;}else{var $190=0;label=12;break;}
 case 8: 
 var $168=$__nd;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$__bc;
 $5=$170;
 $6=$171;
 var $172=$6;
 var $173=$6;
 var $174=((($173)-(1))|0);
 var $175=$172&$174;
 var $176=($175|0)!=0;
 if($176){label=10;break;}else{label=9;break;}
 case 9: 
 var $178=$5;
 var $179=$6;
 var $180=((($179)-(1))|0);
 var $181=$178&$180;
 var $186=$181;label=11;break;
 case 10: 
 var $183=$5;
 var $184=$6;
 var $185=(((($183>>>0))%(($184>>>0)))&-1);
 var $186=$185;label=11;break;
 case 11: 
 var $186;
 var $187=$__chash;
 var $188=($186|0)==($187|0);
 var $190=$188;label=12;break;
 case 12: 
 var $190;
 if($190){label=13;break;}else{label=41;break;}
 case 13: 
 $9=$98;
 var $192=$9;
 var $193=(($192+16)|0);
 $8=$193;
 var $194=$8;
 var $195=$194;
 $7=$195;
 var $196=$7;
 var $197=$196;
 var $198=$__nd;
 var $199=(($198+8)|0);
 var $200=$97;
 $81=$197;
 $82=$199;
 $83=$200;
 var $201=$81;
 var $202=$201;
 var $203=$82;
 var $204=$203;
 var $205=(($204)|0);
 var $206=$83;
 $78=$202;
 $79=$205;
 $80=$206;
 var $207=$78;
 var $208=$79;
 var $209=$80;
 $76=$208;
 $77=$209;
 var $210=$76;
 $74=$210;
 var $211=$74;
 $73=$211;
 var $212=$73;
 var $213=(($212)|0);
 $72=$213;
 var $214=$72;
 var $215=$214;
 $71=$215;
 var $216=$71;
 var $217=(($216)|0);
 var $218=(($217)|0);
 var $219=$218;
 var $220=(($219)|0);
 var $221=$220;
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&1;
 var $225=($224|0)!=0;
 if($225){label=14;break;}else{label=15;break;}
 case 14: 
 $67=$211;
 var $227=$67;
 var $228=(($227)|0);
 $66=$228;
 var $229=$66;
 var $230=$229;
 $65=$230;
 var $231=$65;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $251=$236;label=16;break;
 case 15: 
 $70=$211;
 var $238=$70;
 var $239=(($238)|0);
 $69=$239;
 var $240=$69;
 var $241=$240;
 $68=$241;
 var $242=$68;
 var $243=(($242)|0);
 var $244=(($243)|0);
 var $245=$244;
 var $246=(($245)|0);
 var $247=$246;
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249>>1;
 var $251=$250;label=16;break;
 case 16: 
 var $251;
 $__lhs_sz_i_i_i=$251;
 var $252=$__lhs_sz_i_i_i;
 var $253=$77;
 $64=$253;
 var $254=$64;
 $63=$254;
 var $255=$63;
 var $256=(($255)|0);
 $62=$256;
 var $257=$62;
 var $258=$257;
 $61=$258;
 var $259=$61;
 var $260=(($259)|0);
 var $261=(($260)|0);
 var $262=$261;
 var $263=(($262)|0);
 var $264=$263;
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$266&1;
 var $268=($267|0)!=0;
 if($268){label=17;break;}else{label=18;break;}
 case 17: 
 $57=$254;
 var $270=$57;
 var $271=(($270)|0);
 $56=$271;
 var $272=$56;
 var $273=$272;
 $55=$273;
 var $274=$55;
 var $275=(($274)|0);
 var $276=(($275)|0);
 var $277=$276;
 var $278=(($277+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $294=$279;label=19;break;
 case 18: 
 $60=$254;
 var $281=$60;
 var $282=(($281)|0);
 $59=$282;
 var $283=$59;
 var $284=$283;
 $58=$284;
 var $285=$58;
 var $286=(($285)|0);
 var $287=(($286)|0);
 var $288=$287;
 var $289=(($288)|0);
 var $290=$289;
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=$292>>1;
 var $294=$293;label=19;break;
 case 19: 
 var $294;
 var $295=($252|0)!=($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 $75=0;
 label=37;break;
 case 21: 
 var $298=$76;
 $51=$298;
 var $299=$51;
 $50=$299;
 var $300=$50;
 $49=$300;
 var $301=$49;
 var $302=(($301)|0);
 $48=$302;
 var $303=$48;
 var $304=$303;
 $47=$304;
 var $305=$47;
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$307;
 var $309=(($308)|0);
 var $310=$309;
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312&1;
 var $314=($313|0)!=0;
 if($314){label=22;break;}else{label=23;break;}
 case 22: 
 $41=$300;
 var $316=$41;
 var $317=(($316)|0);
 $40=$317;
 var $318=$40;
 var $319=$318;
 $39=$319;
 var $320=$39;
 var $321=(($320)|0);
 var $322=(($321)|0);
 var $323=$322;
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 var $339=$325;label=24;break;
 case 23: 
 $46=$300;
 var $327=$46;
 var $328=(($327)|0);
 $45=$328;
 var $329=$45;
 var $330=$329;
 $44=$330;
 var $331=$44;
 var $332=(($331)|0);
 var $333=(($332)|0);
 var $334=$333;
 var $335=(($334+1)|0);
 var $336=(($335)|0);
 $43=$336;
 var $337=$43;
 $42=$337;
 var $338=$42;
 var $339=$338;label=24;break;
 case 24: 
 var $339;
 $38=$339;
 var $340=$38;
 $__lp_i_i_i=$340;
 var $341=$77;
 $34=$341;
 var $342=$34;
 $33=$342;
 var $343=$33;
 $32=$343;
 var $344=$32;
 var $345=(($344)|0);
 $31=$345;
 var $346=$31;
 var $347=$346;
 $30=$347;
 var $348=$30;
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=$350;
 var $352=(($351)|0);
 var $353=$352;
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355&1;
 var $357=($356|0)!=0;
 if($357){label=25;break;}else{label=26;break;}
 case 25: 
 $24=$343;
 var $359=$24;
 var $360=(($359)|0);
 $23=$360;
 var $361=$23;
 var $362=$361;
 $22=$362;
 var $363=$22;
 var $364=(($363)|0);
 var $365=(($364)|0);
 var $366=$365;
 var $367=(($366+8)|0);
 var $368=HEAP32[(($367)>>2)];
 var $382=$368;label=27;break;
 case 26: 
 $29=$343;
 var $370=$29;
 var $371=(($370)|0);
 $28=$371;
 var $372=$28;
 var $373=$372;
 $27=$373;
 var $374=$27;
 var $375=(($374)|0);
 var $376=(($375)|0);
 var $377=$376;
 var $378=(($377+1)|0);
 var $379=(($378)|0);
 $26=$379;
 var $380=$26;
 $25=$380;
 var $381=$25;
 var $382=$381;label=27;break;
 case 27: 
 var $382;
 $21=$382;
 var $383=$21;
 $__rp_i_i_i=$383;
 var $384=$76;
 $37=$384;
 var $385=$37;
 var $386=(($385)|0);
 $36=$386;
 var $387=$36;
 var $388=$387;
 $35=$388;
 var $389=$35;
 var $390=(($389)|0);
 var $391=(($390)|0);
 var $392=$391;
 var $393=(($392)|0);
 var $394=$393;
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$396&1;
 var $398=($397|0)!=0;
 if($398){label=28;break;}else{label=30;break;}
 case 28: 
 var $400=$__lp_i_i_i;
 var $401=$__rp_i_i_i;
 var $402=$__lhs_sz_i_i_i;
 $52=$400;
 $53=$401;
 $54=$402;
 var $403=$52;
 var $404=$53;
 var $405=$54;
 var $406=(function() { try { __THREW__ = 0; return _memcmp($403,$404,$405) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $407=($406|0)==0;
 $75=$407;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $410=$__lhs_sz_i_i_i;
 var $411=($410|0)!=0;
 if($411){label=32;break;}else{label=35;break;}
 case 32: 
 var $413=$__lp_i_i_i;
 var $414=HEAP8[($413)];
 var $415=(($414<<24)>>24);
 var $416=$__rp_i_i_i;
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24);
 var $419=($415|0)!=($418|0);
 if($419){label=33;break;}else{label=34;break;}
 case 33: 
 $75=0;
 label=37;break;
 case 34: 
 var $422=$__lhs_sz_i_i_i;
 var $423=((($422)-(1))|0);
 $__lhs_sz_i_i_i=$423;
 var $424=$__lp_i_i_i;
 var $425=(($424+1)|0);
 $__lp_i_i_i=$425;
 var $426=$__rp_i_i_i;
 var $427=(($426+1)|0);
 $__rp_i_i_i=$427;
 label=31;break;
 case 35: 
 $75=1;
 label=37;break;
 case 36: 
 var $430$0 = ___cxa_find_matching_catch(-1, -1,0); var $430$1 = tempRet0;
 var $431=$430$0;
 ___clang_call_terminate($431);
 throw "Reached an unreachable!";
 case 37: 
 var $432=$75;
 if($432){label=38;break;}else{label=39;break;}
 case 38: 
 var $434=$__nd;
 $86=$agg_result;
 $87=$434;
 var $435=$86;
 var $436=$87;
 $84=$435;
 $85=$436;
 var $437=$84;
 var $438=(($437)|0);
 var $439=$85;
 HEAP32[(($438)>>2)]=$439;
 label=44;break;
 case 39: 
 label=40;break;
 case 40: 
 var $442=$__nd;
 var $443=$442;
 var $444=(($443)|0);
 var $445=HEAP32[(($444)>>2)];
 $__nd=$445;
 label=7;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 $92=$98;
 var $449=$92;
 $90=$agg_result;
 $91=0;
 var $450=$90;
 var $451=$91;
 $88=$450;
 $89=$451;
 var $452=$88;
 var $453=(($452)|0);
 var $454=$89;
 HEAP32[(($453)>>2)]=$454;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN7gltools15ShaderContainerC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 $18=$this;
 var $19=$18;
 var $20=$19;
 $17=$20;
 var $21=$17;
 var $22=$21;
 $16=$22;
 var $23=$16;
 var $24=(($23)|0);
 $15=$24;
 var $25=$15;
 $14=$25;
 var $26=$14;
 var $27=(($26)|0);
 $13=$26;
 var $28=$13;
 $12=$28;
 var $29=$12;
 var $30=$29;
 var $31=$30;
 var $32=$31;
 HEAP32[(($27)>>2)]=$32;
 var $33=(($26+4)|0);
 $11=$26;
 var $34=$11;
 $10=$34;
 var $35=$10;
 var $36=$35;
 var $37=$36;
 var $38=$37;
 HEAP32[(($33)>>2)]=$38;
 var $39=(($23+8)|0);
 $8=$39;
 $9=0;
 var $40=$8;
 var $41=$9;
 $6=$40;
 HEAP32[(($7)>>2)]=$41;
 var $42=$6;
 var $43=$42;
 $5=$7;
 var $44=$5;
 var $45=HEAP32[(($44)>>2)];
 $3=$43;
 HEAP32[(($4)>>2)]=$45;
 var $46=$3;
 var $47=$46;
 $2=$47;
 var $48=$2;
 var $49=(($46)|0);
 $1=$4;
 var $50=$1;
 var $51=HEAP32[(($50)>>2)];
 HEAP32[(($49)>>2)]=$51;
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $30=$this;
 var $31=$30;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=2;break;}else{label=6;break;}
 case 2: 
 $29=$31;
 var $36=$29;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 $27=$36;
 $28=$38;
 var $39=$27;
 label=3;break;
 case 3: 
 var $41=$28;
 var $42=(($39+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)!=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 $26=$39;
 var $46=$26;
 var $47=(($46+8)|0);
 $25=$47;
 var $48=$25;
 var $49=$48;
 $24=$49;
 var $50=$24;
 var $51=$50;
 var $52=(($39+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(4))|0);
 HEAP32[(($52)>>2)]=$54;
 $23=$54;
 var $55=$23;
 $19=$51;
 $20=$55;
 var $56=$22;
 var $57=$19;
 var $58=$20;
 var $tmp_i_i_i=$18;
 var $tmp1_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $16=$57;
 $17=$58;
 var $59=$16;
 var $60=$17;
 $14=$59;
 $15=$60;
 var $61=$14;
 var $62=$15;
 label=3;break;
 case 5: 
 $7=$31;
 var $63=$7;
 var $64=(($63+8)|0);
 $6=$64;
 var $65=$6;
 var $66=$65;
 $5=$66;
 var $67=$5;
 var $68=$67;
 var $69=(($31)|0);
 var $70=HEAP32[(($69)>>2)];
 $4=$31;
 var $71=$4;
 $3=$71;
 var $72=$3;
 var $73=(($72+8)|0);
 $2=$73;
 var $74=$2;
 var $75=$74;
 $1=$75;
 var $76=$1;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($71)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 var $82=$80;
 var $83=((($81)-($82))|0);
 var $84=(((($83|0))/(4))&-1);
 $11=$68;
 $12=$70;
 $13=$84;
 var $85=$11;
 var $86=$12;
 var $87=$13;
 $8=$85;
 $9=$86;
 $10=$87;
 var $88=$8;
 var $89=$9;
 var $90=$89;
 __ZdlPv($90);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN4DemoD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN4DemoD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN4DemoD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN4DemoD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function ___cxx_global_var_init113(){
 var label=0;


 __ZN2cl7NDRangeC1Ev(17952);
 var $1=_atexit((854),17952,___dso_handle);
 return;
}


function __ZN2cl7NDRangeC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7NDRangeC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl7NDRangeD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7NDRangeD2Ev($2);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 6530
// WARNING: content after a branch in a label, line: 6532

function __ZN27LorenzAttractorOpenCLSolverC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 $14=$this;
 var $17=$14;
 var $18=$17;
 __ZN6SolverC2Ev($18);
 var $19=$17;
 HEAP32[(($19)>>2)]=7696;
 var $20=(($17+4)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl7ContextC1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=9;break; }
 case 2: 
 var $22=(($17+8)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl7ProgramC1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $24=(($17+12)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6KernelC1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $26=(($17+16)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl12CommandQueueC1Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $28=(($17+20)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 var $30=(($17+24)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=14;break; }
 case 7: 
 var $32=(($17+28)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1Ev($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=15;break; }
 case 8: 
 var $34=(($17+32)|0);
 $13=$34;
 var $35=$13;
 $12=$35;
 var $36=$12;
 var $37=$36;
 $11=$37;
 var $38=$11;
 var $39=$38;
 $10=$39;
 var $40=$10;
 var $41=(($38)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($38+4)|0);
 HEAP32[(($42)>>2)]=0;
 var $43=(($38+8)|0);
 $8=$43;
 $9=0;
 var $44=$8;
 var $45=$9;
 $6=$44;
 HEAP32[(($7)>>2)]=$45;
 var $46=$6;
 var $47=$46;
 $5=$7;
 var $48=$5;
 var $49=HEAP32[(($48)>>2)];
 $3=$47;
 HEAP32[(($4)>>2)]=$49;
 var $50=$3;
 var $51=$50;
 $2=$51;
 var $52=$2;
 var $53=(($50)|0);
 $1=$4;
 var $54=$1;
 var $55=HEAP32[(($54)>>2)];
 HEAP32[(($53)>>2)]=$55;
 STACKTOP=sp;return;
 case 9: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 $15=$58;
 var $59=$57$1;
 $16=$59;
 label=21;break;
 case 10: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=$61$0;
 $15=$62;
 var $63=$61$1;
 $16=$63;
 label=20;break;
 case 11: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=$65$0;
 $15=$66;
 var $67=$65$1;
 $16=$67;
 label=19;break;
 case 12: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=$69$0;
 $15=$70;
 var $71=$69$1;
 $16=$71;
 label=18;break;
 case 13: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=$73$0;
 $15=$74;
 var $75=$73$1;
 $16=$75;
 label=17;break;
 case 14: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=$77$0;
 $15=$78;
 var $79=$77$1;
 $16=$79;
 label=16;break;
 case 15: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $82=$81$0;
 $15=$82;
 var $83=$81$1;
 $16=$83;
 __ZN2cl6BufferD1Ev($30);
 label=16;break;
 case 16: 
 __ZN2cl6BufferD1Ev($28);
 label=17;break;
 case 17: 
 __ZN2cl12CommandQueueD1Ev($26);
 label=18;break;
 case 18: 
 __ZN2cl6KernelD1Ev($24);
 label=19;break;
 case 19: 
 __ZN2cl7ProgramD1Ev($22);
 label=20;break;
 case 20: 
 __ZN2cl7ContextD1Ev($20);
 label=21;break;
 case 21: 
 var $90=$17;
 __ZN6SolverD2Ev($90);
 label=22;break;
 case 22: 
 var $92=$15;
 var $93=$16;
 var $94$0=$92;
 var $94$1=0;
 var $95$0=$94$0;
 var $95$1=$93;
 ___resumeException($95$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN6SolverC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=7624;
 STACKTOP=sp;return;
}


function __ZN2cl7ContextC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7ContextC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl7ProgramC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7ProgramC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6KernelC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6KernelC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl12CommandQueueC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl12CommandQueueC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6BufferC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6BufferC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6BufferD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6BufferD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl12CommandQueueD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl12CommandQueueD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6KernelD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6KernelD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl7ProgramD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7ProgramD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl7ContextD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl7ContextD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN6SolverD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 STACKTOP=sp;return;
}


function __ZN27LorenzAttractorOpenCLSolverD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN27LorenzAttractorOpenCLSolverD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZN27LorenzAttractorOpenCLSolverD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=7696;
 var $4=(($2+32)|0);
 __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED1Ev($4);
 var $5=(($2+28)|0);
 __ZN2cl6BufferD1Ev($5);
 var $6=(($2+24)|0);
 __ZN2cl6BufferD1Ev($6);
 var $7=(($2+20)|0);
 __ZN2cl6BufferD1Ev($7);
 var $8=(($2+16)|0);
 __ZN2cl12CommandQueueD1Ev($8);
 var $9=(($2+12)|0);
 __ZN2cl6KernelD1Ev($9);
 var $10=(($2+8)|0);
 __ZN2cl7ProgramD1Ev($10);
 var $11=(($2+4)|0);
 __ZN2cl7ContextD1Ev($11);
 var $12=$2;
 __ZN6SolverD2Ev($12);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZN27LorenzAttractorOpenCLSolver4initEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__a_i_i_i1_i_i_i;
 var $__i_i_i_i2_i_i_i;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $__a_i_i_i_i_i_i;
 var $__i_i_i_i_i_i_i;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39=sp;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $e;
 var $ss=(sp)+(16);
 var $65=(sp)+(160);
 $62=$this;
 var $66=$62;
 (function() { try { __THREW__ = 0; return __ZN27LorenzAttractorOpenCLSolver6__initEv($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 label=31;break;
 case 3: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1,12944); var $69$1 = tempRet0;
 var $70=$69$0;
 $63=$70;
 var $71=$69$1;
 $64=$71;
 label=4;break;
 case 4: 
 var $73=$64;
 var $74=_llvm_eh_typeid_for(12944);
 var $75=($73|0)==($74|0);
 if($75){label=5;break;}else{label=38;break;}
 case 5: 
 var $77=$63;
 var $78=___cxa_begin_catch($77);
 var $79=$78;
 $e=$79;
 $58=$ss;
 $59=24;
 var $80=$58;
 var $81=$80;
 var $82=(($81+64)|0);
 var $83=$82;
 $57=$83;
 var $84=$57;
 var $85=$84;
 $56=$85;
 var $86=$56;
 var $87=$86;
 HEAP32[(($87)>>2)]=5320;
 var $88=$84;
 HEAP32[(($88)>>2)]=4864;
 var $89=$80;
 HEAP32[(($89)>>2)]=6260;
 var $90=$80;
 var $91=(($90+64)|0);
 var $92=$91;
 HEAP32[(($92)>>2)]=6300;
 var $93=$80;
 var $94=(($93+8)|0);
 var $95=$94;
 HEAP32[(($95)>>2)]=6280;
 var $96=$80;
 var $97=(($80+12)|0);
 var $98=$97;
 $51=$96;
 $52=7804;
 $53=$98;
 var $99=$51;
 var $100=$52;
 var $101=$99;
 var $102=(($100+4)|0);
 var $103=$53;
 $48=$101;
 $49=$102;
 $50=$103;
 var $104=$48;
 var $105=$49;
 var $106=HEAP32[(($105)>>2)];
 var $107=$104;
 HEAP32[(($107)>>2)]=$106;
 var $108=(($105+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$104;
 var $111=HEAP32[(($110)>>2)];
 var $112=((($111)-(12))|0);
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=$104;
 var $116=(($115+$114)|0);
 var $117=$116;
 HEAP32[(($117)>>2)]=$109;
 var $118=(($104+4)|0);
 HEAP32[(($118)>>2)]=0;
 var $119=$104;
 var $120=HEAP32[(($119)>>2)];
 var $121=((($120)-(12))|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $124=$104;
 var $125=(($124+$123)|0);
 var $126=$125;
 var $127=$50;
 $46=$126;
 $47=$127;
 var $128=$46;
 var $129=$128;
 var $130=$47;
 var $131=$130;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($129,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 var $132=(($128+72)|0);
 HEAP32[(($132)>>2)]=0;
 var $133=(($128+76)|0);
 HEAP32[(($133)>>2)]=-1;
 var $134=$99;
 var $135=(($134+8)|0);
 var $136=$135;
 var $137=(($100+12)|0);
 $44=$136;
 $45=$137;
 var $138=$44;
 var $139=$45;
 var $140=HEAP32[(($139)>>2)];
 var $141=$138;
 HEAP32[(($141)>>2)]=$140;
 var $142=(($139+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$138;
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)-(12))|0);
 var $147=$146;
 var $148=HEAP32[(($147)>>2)];
 var $149=$138;
 var $150=(($149+$148)|0);
 var $151=$150;
 HEAP32[(($151)>>2)]=$143;
 var $152=HEAP32[(($100)>>2)];
 var $153=$99;
 HEAP32[(($153)>>2)]=$152;
 var $154=(($100+20)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$99;
 var $157=HEAP32[(($156)>>2)];
 var $158=((($157)-(12))|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=$99;
 var $162=(($161+$160)|0);
 var $163=$162;
 HEAP32[(($163)>>2)]=$155;
 var $164=(($100+24)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$99;
 var $167=(($166+8)|0);
 var $168=$167;
 HEAP32[(($168)>>2)]=$165;
 var $169=$80;
 HEAP32[(($169)>>2)]=6260;
 var $170=$80;
 var $171=(($170+64)|0);
 var $172=$171;
 HEAP32[(($172)>>2)]=6300;
 var $173=$80;
 var $174=(($173+8)|0);
 var $175=$174;
 HEAP32[(($175)>>2)]=6280;
 var $176=(($80+12)|0);
 var $177=$59;
 $42=$176;
 $43=$177;
 var $178=$42;
 var $179=$43;
 $37=$178;
 $38=$179;
 var $180=$37;
 var $181=$180;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($181);
 var $182=$180;
 HEAP32[(($182)>>2)]=6440;
 var $183=(($180+32)|0);
 $36=$183;
 var $184=$36;
 $35=$184;
 var $185=$35;
 var $186=$185;
 var $187=(($185)|0);
 $34=$187;
 var $188=$34;
 $33=$188;
 var $189=$33;
 var $190=$189;
 $32=$190;
 var $191=$32;
 var $192=$191;
 $31=$192;
 var $193=$31;
 var $194=(($191)|0);
 $30=$185;
 var $195=$30;
 var $196=(($195)|0);
 $29=$196;
 var $197=$29;
 var $198=$197;
 $28=$198;
 var $199=$28;
 var $200=(($199)|0);
 var $201=(($200)|0);
 var $202=$201;
 var $203=(($202)|0);
 $__a_i_i_i_i_i_i=$203;
 $__i_i_i_i_i_i_i=0;
 label=7;break;
 case 7: 
 var $205=$__i_i_i_i_i_i_i;
 var $206=($205>>>0)<3;
 if($206){label=8;break;}else{label=9;break;}
 case 8: 
 var $208=$__i_i_i_i_i_i_i;
 var $209=$__a_i_i_i_i_i_i;
 var $210=(($209+($208<<2))|0);
 HEAP32[(($210)>>2)]=0;
 var $211=$__i_i_i_i_i_i_i;
 var $212=((($211)+(1))|0);
 $__i_i_i_i_i_i_i=$212;
 label=7;break;
 case 9: 
 var $213=(($180+44)|0);
 HEAP32[(($213)>>2)]=0;
 var $214=(($180+48)|0);
 var $215=$38;
 HEAP32[(($214)>>2)]=$215;
 $27=$39;
 var $216=$27;
 $26=$216;
 var $217=$26;
 var $218=$217;
 var $219=(($217)|0);
 $25=$219;
 var $220=$25;
 $24=$220;
 var $221=$24;
 var $222=$221;
 $23=$222;
 var $223=$23;
 var $224=$223;
 $22=$224;
 var $225=$22;
 var $226=(($223)|0);
 $21=$217;
 var $227=$21;
 var $228=(($227)|0);
 $20=$228;
 var $229=$20;
 var $230=$229;
 $19=$230;
 var $231=$19;
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=$233;
 var $235=(($234)|0);
 $__a_i_i_i1_i_i_i=$235;
 $__i_i_i_i2_i_i_i=0;
 label=10;break;
 case 10: 
 var $237=$__i_i_i_i2_i_i_i;
 var $238=($237>>>0)<3;
 if($238){label=11;break;}else{label=12;break;}
 case 11: 
 var $240=$__i_i_i_i2_i_i_i;
 var $241=$__a_i_i_i1_i_i_i;
 var $242=(($241+($240<<2))|0);
 HEAP32[(($242)>>2)]=0;
 var $243=$__i_i_i_i2_i_i_i;
 var $244=((($243)+(1))|0);
 $__i_i_i_i2_i_i_i=$244;
 label=10;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($180,$39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=13;break; }
 case 13: 
 var $246$0 = ___cxa_find_matching_catch(-1, -1); var $246$1 = tempRet0;
 var $247=$246$0;
 $40=$247;
 var $248=$246$1;
 $41=$248;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($183);
 var $249=$180;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($249);
 var $250=$40;
 var $251=$41;
 var $252$0=$250;
 var $252$1=0;
 var $253$0=$252$0;
 var $253$1=$251;
 var $254=$253$0;
 $60=$254;
 var $255=$253$1;
 $61=$255;
 var $256=$80;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($256,7804);
 label=15;break;
 case 14: 
 var $258$0 = ___cxa_find_matching_catch(-1, -1); var $258$1 = tempRet0;
 var $259=$258$0;
 $60=$259;
 var $260=$258$1;
 $61=$260;
 label=15;break;
 case 15: 
 var $262=$80;
 var $263=(($262+64)|0);
 var $264=$263;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($264);
 var $265=$60;
 var $266=$61;
 var $267$0=$265;
 var $267$1=0;
 var $268$0=$267$0;
 var $268$1=$266;
 var $eh_lpad_body$1=$268$1;var $eh_lpad_body$0=$268$0;label=32;break;
 case 16: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
 label=17;break;
 case 17: 
 var $270=$ss;
 var $271=(($270+8)|0);
 var $272=$271;
 var $273=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($272,360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=33;break; }
 case 18: 
 var $275=$e;
 var $276=$275;
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+8)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=FUNCTION_TABLE[$279]($275);
 var $281=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($273,$280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=33;break; }
 case 19: 
 var $283=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($281,2792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=33;break; }
 case 20: 
 var $285=$e;
 var $286=(function() { try { __THREW__ = 0; return __ZNK2cl5Error3errEv($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=33;break; }
 case 21: 
 var $288=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($283,$286) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=33;break; }
 case 22: 
 $17=$288;
 $18=8;
 var $290=$17;
 var $291=$18;
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($290) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=33;break; }
 case 23: 
 label=24;break;
 case 24: 
 $16=$ss;
 var $294=$16;
 var $295=(($294+12)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($65,$295) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=33;break; }
 case 25: 
 label=26;break;
 case 26: 
 $15=$65;
 var $297=$15;
 $14=$297;
 var $298=$14;
 $13=$298;
 var $299=$13;
 $12=$299;
 var $300=$12;
 var $301=(($300)|0);
 $11=$301;
 var $302=$11;
 var $303=$302;
 $10=$303;
 var $304=$10;
 var $305=(($304)|0);
 var $306=(($305)|0);
 var $307=$306;
 var $308=(($307)|0);
 var $309=$308;
 var $310=HEAP8[($309)];
 var $311=($310&255);
 var $312=$311&1;
 var $313=($312|0)!=0;
 if($313){label=27;break;}else{label=28;break;}
 case 27: 
 $4=$299;
 var $315=$4;
 var $316=(($315)|0);
 $3=$316;
 var $317=$3;
 var $318=$317;
 $2=$318;
 var $319=$2;
 var $320=(($319)|0);
 var $321=(($320)|0);
 var $322=$321;
 var $323=(($322+8)|0);
 var $324=HEAP32[(($323)>>2)];
 var $338=$324;label=29;break;
 case 28: 
 $9=$299;
 var $326=$9;
 var $327=(($326)|0);
 $8=$327;
 var $328=$8;
 var $329=$328;
 $7=$329;
 var $330=$7;
 var $331=(($330)|0);
 var $332=(($331)|0);
 var $333=$332;
 var $334=(($333+1)|0);
 var $335=(($334)|0);
 $6=$335;
 var $336=$6;
 $5=$336;
 var $337=$5;
 var $338=$337;label=29;break;
 case 29: 
 var $338;
 $1=$338;
 var $339=$1;
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i($339,2320,55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=34;break; }
 case 30: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($65);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 ___cxa_end_catch();
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
 case 32: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $344=$eh_lpad_body$0;
 $63=$344;
 var $345=$eh_lpad_body$1;
 $64=$345;
 label=36;break;
 case 33: 
 var $347$0 = ___cxa_find_matching_catch(-1, -1); var $347$1 = tempRet0;
 var $348=$347$0;
 $63=$348;
 var $349=$347$1;
 $64=$349;
 label=35;break;
 case 34: 
 var $351$0 = ___cxa_find_matching_catch(-1, -1); var $351$1 = tempRet0;
 var $352=$351$0;
 $63=$352;
 var $353=$351$1;
 $64=$353;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($65);
 label=35;break;
 case 35: 
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=39;break; }
 case 37: 
 label=38;break;
 case 38: 
 var $358=$63;
 var $359=$64;
 var $360$0=$358;
 var $360$1=0;
 var $361$0=$360$0;
 var $361$1=$359;
 ___resumeException($361$0)
 case 39: 
 var $363$0 = ___cxa_find_matching_catch(-1, -1,0); var $363$1 = tempRet0;
 var $364=$363$0;
 ___clang_call_terminate($364);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

// WARNING: content after a branch in a label, line: 7486
// WARNING: content after a branch in a label, line: 7488

function __ZN27LorenzAttractorOpenCLSolver6__initEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+800)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37=sp;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42=(sp)+(8);
 var $43=(sp)+(16);
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61=(sp)+(24);
 var $62;
 var $63;
 var $64;
 var $65;
 var $66=(sp)+(32);
 var $67=(sp)+(40);
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79;
 var $80;
 var $81;
 var $82;
 var $83;
 var $84;
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91;
 var $92;
 var $93;
 var $94;
 var $95;
 var $96;
 var $97;
 var $98;
 var $99;
 var $100;
 var $101;
 var $102;
 var $103;
 var $104;
 var $105;
 var $106;
 var $107;
 var $108;
 var $109;
 var $110;
 var $111;
 var $112;
 var $113;
 var $114;
 var $115;
 var $116;
 var $117;
 var $118;
 var $119;
 var $120;
 var $121;
 var $122;
 var $123;
 var $124;
 var $125;
 var $126;
 var $127;
 var $128;
 var $129;
 var $130;
 var $131;
 var $132;
 var $133;
 var $134;
 var $135;
 var $136;
 var $137;
 var $138;
 var $139;
 var $140;
 var $141;
 var $142;
 var $143;
 var $144;
 var $145;
 var $146;
 var $147;
 var $148;
 var $149;
 var $150;
 var $151;
 var $152;
 var $153;
 var $154;
 var $155;
 var $156;
 var $157;
 var $158;
 var $159;
 var $160;
 var $161;
 var $162;
 var $163;
 var $164;
 var $__a_i_i_i1_i_i_i;
 var $__i_i_i_i2_i_i_i;
 var $165;
 var $166;
 var $167;
 var $168;
 var $169;
 var $170;
 var $171;
 var $172;
 var $173;
 var $__a_i_i_i_i_i_i;
 var $__i_i_i_i_i_i_i;
 var $174;
 var $175;
 var $176;
 var $177;
 var $178;
 var $179;
 var $180;
 var $181;
 var $182=(sp)+(48);
 var $183;
 var $184;
 var $185;
 var $186;
 var $187;
 var $188;
 var $189;
 var $190;
 var $191;
 var $192;
 var $193;
 var $194;
 var $195;
 var $196;
 var $197;
 var $198;
 var $199;
 var $200;
 var $201;
 var $202;
 var $203;
 var $204;
 var $205;
 var $206;
 var $207;
 var $208;
 var $209;
 var $210;
 var $211;
 var $212;
 var $213;
 var $214;
 var $215;
 var $216;
 var $217;
 var $218;
 var $219;
 var $220;
 var $221;
 var $222;
 var $223;
 var $224;
 var $225;
 var $226;
 var $227;
 var $228;
 var $229;
 var $230;
 var $231;
 var $232;
 var $233;
 var $234;
 var $235;
 var $236;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $237;
 var $238;
 var $239;
 var $240;
 var $241;
 var $242;
 var $243;
 var $244;
 var $245;
 var $246;
 var $247;
 var $248;
 var $249;
 var $250;
 var $251;
 var $252;
 var $253;
 var $254;
 var $255;
 var $256;
 var $257;
 var $258;
 var $259;
 var $260;
 var $261;
 var $262;
 var $263;
 var $264;
 var $265;
 var $266;
 var $267;
 var $268=(sp)+(64);
 var $269;
 var $270;
 var $271=(sp)+(72);
 var $272;
 var $273;
 var $274;
 var $275;
 var $276;
 var $277;
 var $278;
 var $platforms=(sp)+(80);
 var $279;
 var $280;
 var $context_properties=(sp)+(96);
 var $gpuDevice;
 var $281=(sp)+(128);
 var $282=(sp)+(144);
 var $devices=(sp)+(152);
 var $kernelFilename=(sp)+(168);
 var $283=(sp)+(184);
 var $284=(sp)+(200);
 var $file=(sp)+(216);
 var $ss=(sp)+(408);
 var $strSrc=(sp)+(544);
 var $charSrc=(sp)+(560);
 var $sources=(sp)+(568);
 var $285=(sp)+(584);
 var $286=(sp)+(592);
 var $287=(sp)+(600);
 var $288=(sp)+(608);
 var $e;
 var $289=(sp)+(616);
 var $290=(sp)+(632);
 var $291=(sp)+(640);
 var $nParticles;
 var $292=(sp)+(648);
 var $293=(sp)+(664);
 var $294=(sp)+(680);
 var $295=(sp)+(688);
 var $296=(sp)+(704);
 var $297=(sp)+(712);
 var $298=(sp)+(728);
 var $299=(sp)+(736);
 var $300=(sp)+(752);
 var $301=(sp)+(760);
 var $302=(sp)+(776);
 var $303=(sp)+(784);
 $278=$this;
 var $304=$278;
 $277=$platforms;
 var $305=$277;
 $276=$305;
 var $306=$276;
 var $307=$306;
 $275=$307;
 var $308=$275;
 var $309=$308;
 $274=$309;
 var $310=$274;
 var $311=(($308)|0);
 HEAP32[(($311)>>2)]=0;
 var $312=(($308+4)|0);
 HEAP32[(($312)>>2)]=0;
 var $313=(($308+8)|0);
 $272=$313;
 $273=0;
 var $314=$272;
 var $315=$273;
 $270=$314;
 HEAP32[(($271)>>2)]=$315;
 var $316=$270;
 var $317=$316;
 $269=$271;
 var $318=$269;
 var $319=HEAP32[(($318)>>2)];
 $267=$317;
 HEAP32[(($268)>>2)]=$319;
 var $320=$267;
 var $321=$320;
 $266=$321;
 var $322=$266;
 var $323=(($320)|0);
 $265=$268;
 var $324=$265;
 var $325=HEAP32[(($324)>>2)];
 HEAP32[(($323)>>2)]=$325;
 var $326=(function() { try { __THREW__ = 0; return __ZN2cl8Platform3getEPNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE($platforms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 $264=$platforms;
 var $328=$264;
 var $329=$328;
 var $330=(($329)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$328;
 var $333=(($332+4)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=($331|0)==($334|0);
 if($335){label=3;break;}else{label=6;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(1760,2320,65) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 label=6;break;
 case 5: 
 var $339$0 = ___cxa_find_matching_catch(-1, -1); var $339$1 = tempRet0;
 var $340=$339$0;
 $279=$340;
 var $341=$339$1;
 $280=$341;
 label=199;break;
 case 6: 
 var $343=(($context_properties)|0);
 HEAP32[(($343)>>2)]=8200;
 var $344=(($343+4)|0);
 HEAP32[(($344)>>2)]=0;
 var $345=(($344+4)|0);
 HEAP32[(($345)>>2)]=8202;
 var $346=(($345+4)|0);
 HEAP32[(($346)>>2)]=0;
 var $347=(($346+4)|0);
 HEAP32[(($347)>>2)]=4228;
 var $348=(($347+4)|0);
 $262=$platforms;
 $263=0;
 var $349=$262;
 var $350=$263;
 var $351=$349;
 var $352=(($351)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=(($353+($350<<2))|0);
 label=7;break;
 case 7: 
 var $356=$354;
 var $357=(function() { try { __THREW__ = 0; return __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($356) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=5;break; }
 case 8: 
 var $359=HEAP32[(($357)>>2)];
 var $360=$359;
 HEAP32[(($348)>>2)]=$360;
 var $361=(($348+4)|0);
 HEAP32[(($361)>>2)]=0;
 var $362=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 9: 
 $260=$281;
 $261=1376;
 var $364=$260;
 var $365=$261;
 $258=$364;
 $259=$365;
 var $366=$258;
 var $367=$366;
 var $368=(($366)|0);
 $257=$368;
 var $369=$257;
 $256=$369;
 var $370=$256;
 var $371=$370;
 $255=$371;
 var $372=$255;
 var $373=$372;
 $254=$373;
 var $374=$254;
 var $375=(($372)|0);
 var $376=$259;
 var $377=$259;
 $253=$377;
 var $378=$253;
 var $379=(function() { try { __THREW__ = 0; return _strlen($378) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=5;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($366,$376,$379) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=5;break; }
 case 11: 
 label=12;break;
 case 12: 
 var $381=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($362,$281,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=19;break; }
 case 13: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($281);
 $gpuDevice=$381;
 var $383=(($304+4)|0);
 var $384=$gpuDevice;
 var $385=($384|0)==1;
 var $386=($385?4:2);
 var $387$0=$386;
 var $387$1=((((($386|0)<0))|0)?-1:0);
 var $388=(($context_properties)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl7ContextC1EyPiPFvPKcPKvjPvES6_S1_($282,$387$0,$387$1,$388,0,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=5;break; }
 case 14: 
 var $390=(function() { try { __THREW__ = 0; return __ZN2cl7ContextaSERKS0_($383,$282) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 __ZN2cl7ContextD1Ev($282);
 var $392=(($304+4)|0);
 (function() { try { __THREW__ = 0; return __ZNK2cl7Context7getInfoILi4225EEENS_6detail12param_traitsINS2_15cl_context_infoEXT_EE10param_typeEPi($devices,$392,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=5;break; }
 case 16: 
 $252=$devices;
 var $394=$252;
 var $395=$394;
 var $396=(($395)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=$394;
 var $399=(($398+4)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=($397|0)==($400|0);
 if($401){label=17;break;}else{label=22;break;}
 case 17: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(1072,2320,103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 label=22;break;
 case 19: 
 var $405$0 = ___cxa_find_matching_catch(-1, -1); var $405$1 = tempRet0;
 var $406=$405$0;
 $279=$406;
 var $407=$405$1;
 $280=$407;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($281);
 label=199;break;
 case 20: 
 var $409$0 = ___cxa_find_matching_catch(-1, -1); var $409$1 = tempRet0;
 var $410=$409$0;
 $279=$410;
 var $411=$409$1;
 $280=$411;
 __ZN2cl7ContextD1Ev($282);
 label=199;break;
 case 21: 
 var $413$0 = ___cxa_find_matching_catch(-1, -1); var $413$1 = tempRet0;
 var $414=$413$0;
 $279=$414;
 var $415=$413$1;
 $280=$415;
 label=198;break;
 case 22: 
 var $417=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=21;break; }
 case 23: 
 $250=$283;
 $251=704;
 var $419=$250;
 var $420=$251;
 $248=$419;
 $249=$420;
 var $421=$248;
 var $422=$421;
 var $423=(($421)|0);
 $247=$423;
 var $424=$247;
 $246=$424;
 var $425=$246;
 var $426=$425;
 $245=$426;
 var $427=$245;
 var $428=$427;
 $244=$428;
 var $429=$244;
 var $430=(($427)|0);
 var $431=$249;
 var $432=$249;
 $243=$432;
 var $433=$243;
 var $434=(function() { try { __THREW__ = 0; return _strlen($433) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=21;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($421,$431,$434) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=21;break; }
 case 25: 
 label=26;break;
 case 26: 
 $242=$284;
 var $436=$242;
 $241=$436;
 var $437=$241;
 var $438=$437;
 var $439=(($437)|0);
 $240=$439;
 var $440=$240;
 $239=$440;
 var $441=$239;
 var $442=$441;
 $238=$442;
 var $443=$238;
 var $444=$443;
 $237=$444;
 var $445=$237;
 var $446=(($443)|0);
 $236=$437;
 var $447=$236;
 var $448=(($447)|0);
 $235=$448;
 var $449=$235;
 var $450=$449;
 $234=$450;
 var $451=$234;
 var $452=(($451)|0);
 var $453=(($452)|0);
 var $454=$453;
 var $455=(($454)|0);
 $__a_i_i_i=$455;
 $__i_i_i_i=0;
 label=27;break;
 case 27: 
 var $457=$__i_i_i_i;
 var $458=($457>>>0)<3;
 if($458){label=28;break;}else{label=29;break;}
 case 28: 
 var $460=$__i_i_i_i;
 var $461=$__a_i_i_i;
 var $462=(($461+($460<<2))|0);
 HEAP32[(($462)>>2)]=0;
 var $463=$__i_i_i_i;
 var $464=((($463)+(1))|0);
 $__i_i_i_i=$464;
 label=27;break;
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($kernelFilename,$417,$283,$284) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=49;break; }
 case 30: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($284);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($283);
 $229=$file;
 $230=$kernelFilename;
 $231=8;
 var $466=$229;
 var $467=$466;
 var $468=(($467+108)|0);
 var $469=$468;
 $228=$469;
 var $470=$228;
 var $471=$470;
 $227=$471;
 var $472=$227;
 var $473=$472;
 HEAP32[(($473)>>2)]=5320;
 var $474=$470;
 HEAP32[(($474)>>2)]=4864;
 var $475=$466;
 HEAP32[(($475)>>2)]=6660;
 var $476=$466;
 var $477=(($476+108)|0);
 var $478=$477;
 HEAP32[(($478)>>2)]=6680;
 var $479=$466;
 var $480=(($466+8)|0);
 var $481=$480;
 $224=$479;
 $225=7844;
 $226=$481;
 var $482=$224;
 var $483=$225;
 var $484=HEAP32[(($483)>>2)];
 var $485=$482;
 HEAP32[(($485)>>2)]=$484;
 var $486=(($483+4)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=$482;
 var $489=HEAP32[(($488)>>2)];
 var $490=((($489)-(12))|0);
 var $491=$490;
 var $492=HEAP32[(($491)>>2)];
 var $493=$482;
 var $494=(($493+$492)|0);
 var $495=$494;
 HEAP32[(($495)>>2)]=$487;
 var $496=(($482+4)|0);
 HEAP32[(($496)>>2)]=0;
 var $497=$482;
 var $498=HEAP32[(($497)>>2)];
 var $499=((($498)-(12))|0);
 var $500=$499;
 var $501=HEAP32[(($500)>>2)];
 var $502=$482;
 var $503=(($502+$501)|0);
 var $504=$503;
 var $505=$226;
 $222=$504;
 $223=$505;
 var $506=$222;
 var $507=$506;
 var $508=$223;
 var $509=$508;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($507,$509) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=39;break; }
 case 31: 
 var $510=(($506+72)|0);
 HEAP32[(($510)>>2)]=0;
 var $511=(($506+76)|0);
 HEAP32[(($511)>>2)]=-1;
 var $512=$466;
 HEAP32[(($512)>>2)]=6660;
 var $513=$466;
 var $514=(($513+108)|0);
 var $515=$514;
 HEAP32[(($515)>>2)]=6680;
 var $516=(($466+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($516) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $518=(($466+8)|0);
 var $519=$230;
 var $520=$231;
 var $521=$520|8;
 $219=$518;
 $220=$519;
 $221=$521;
 var $522=$219;
 var $523=$220;
 $218=$523;
 var $524=$218;
 $217=$524;
 var $525=$217;
 $216=$525;
 var $526=$216;
 $215=$526;
 var $527=$215;
 var $528=(($527)|0);
 $214=$528;
 var $529=$214;
 var $530=$529;
 $213=$530;
 var $531=$213;
 var $532=(($531)|0);
 var $533=(($532)|0);
 var $534=$533;
 var $535=(($534)|0);
 var $536=$535;
 var $537=HEAP8[($536)];
 var $538=($537&255);
 var $539=$538&1;
 var $540=($539|0)!=0;
 if($540){label=33;break;}else{label=34;break;}
 case 33: 
 $207=$526;
 var $542=$207;
 var $543=(($542)|0);
 $206=$543;
 var $544=$206;
 var $545=$544;
 $205=$545;
 var $546=$205;
 var $547=(($546)|0);
 var $548=(($547)|0);
 var $549=$548;
 var $550=(($549+8)|0);
 var $551=HEAP32[(($550)>>2)];
 var $565=$551;label=35;break;
 case 34: 
 $212=$526;
 var $553=$212;
 var $554=(($553)|0);
 $211=$554;
 var $555=$211;
 var $556=$555;
 $210=$556;
 var $557=$210;
 var $558=(($557)|0);
 var $559=(($558)|0);
 var $560=$559;
 var $561=(($560+1)|0);
 var $562=(($561)|0);
 $209=$562;
 var $563=$209;
 $208=$563;
 var $564=$208;
 var $565=$564;label=35;break;
 case 35: 
 var $565;
 $204=$565;
 var $566=$204;
 var $567=$221;
 var $568=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($522,$566,$567) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $569=($568|0)==0;
 if($569){label=37;break;}else{label=44;break;}
 case 37: 
 var $571=$466;
 var $572=HEAP32[(($571)>>2)];
 var $573=((($572)-(12))|0);
 var $574=$573;
 var $575=HEAP32[(($574)>>2)];
 var $576=$466;
 var $577=(($576+$575)|0);
 var $578=$577;
 $202=$578;
 $203=4;
 var $579=$202;
 var $580=$579;
 var $581=$203;
 $200=$580;
 $201=$581;
 var $582=$200;
 var $583=(($582+16)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=$201;
 var $586=$584|$585;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($582,$586) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 38: 
 label=44;break;
 case 39: 
 var $588$0 = ___cxa_find_matching_catch(-1, -1); var $588$1 = tempRet0;
 var $589=$588$0;
 $232=$589;
 var $590=$588$1;
 $233=$590;
 label=43;break;
 case 40: 
 var $592$0 = ___cxa_find_matching_catch(-1, -1); var $592$1 = tempRet0;
 var $593=$592$0;
 $232=$593;
 var $594=$592$1;
 $233=$594;
 label=42;break;
 case 41: 
 var $596$0 = ___cxa_find_matching_catch(-1, -1); var $596$1 = tempRet0;
 var $597=$596$0;
 $232=$597;
 var $598=$596$1;
 $233=$598;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($516);
 label=42;break;
 case 42: 
 var $600=$466;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($600,7844);
 label=43;break;
 case 43: 
 var $602=$466;
 var $603=(($602+108)|0);
 var $604=$603;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($604);
 var $605=$232;
 var $606=$233;
 var $607$0=$605;
 var $607$1=0;
 var $608$0=$607$0;
 var $608$1=$606;
 var $eh_lpad_body$1=$608$1;var $eh_lpad_body$0=$608$0;label=50;break;
 case 44: 
 label=45;break;
 case 45: 
 $199=$file;
 var $610=$199;
 var $611=(($610+8)|0);
 $198=$611;
 var $612=$198;
 var $613=(($612+64)|0);
 var $614=HEAP32[(($613)>>2)];
 var $615=($614|0)!=0;
 label=46;break;
 case 46: 
 if($615){label=53;break;}else{label=47;break;}
 case 47: 
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i(472,2320,111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=51;break; }
 case 48: 
 label=53;break;
 case 49: 
 var $620$0 = ___cxa_find_matching_catch(-1, -1); var $620$1 = tempRet0;
 var $621=$620$0;
 $279=$621;
 var $622=$620$1;
 $280=$622;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($284);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($283);
 label=198;break;
 case 50: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $625=$eh_lpad_body$0;
 $279=$625;
 var $626=$eh_lpad_body$1;
 $280=$626;
 label=197;break;
 case 51: 
 var $628$0 = ___cxa_find_matching_catch(-1, -1); var $628$1 = tempRet0;
 var $eh_lpad_body6$1=$628$1;var $eh_lpad_body6$0=$628$0;label=52;break;
 case 52: 
 var $eh_lpad_body6$0;
 var $eh_lpad_body6$1;
 var $629=$eh_lpad_body6$0;
 $279=$629;
 var $630=$eh_lpad_body6$1;
 $280=$630;
 label=196;break;
 case 53: 
 $194=$ss;
 $195=16;
 var $632=$194;
 var $633=$632;
 var $634=(($633+56)|0);
 var $635=$634;
 $193=$635;
 var $636=$193;
 var $637=$636;
 $192=$637;
 var $638=$192;
 var $639=$638;
 HEAP32[(($639)>>2)]=5320;
 var $640=$636;
 HEAP32[(($640)>>2)]=4864;
 var $641=$632;
 HEAP32[(($641)>>2)]=6164;
 var $642=$632;
 var $643=(($642+56)|0);
 var $644=$643;
 HEAP32[(($644)>>2)]=6184;
 var $645=$632;
 var $646=(($632+4)|0);
 var $647=$646;
 $189=$645;
 $190=7788;
 $191=$647;
 var $648=$189;
 var $649=$190;
 var $650=HEAP32[(($649)>>2)];
 var $651=$648;
 HEAP32[(($651)>>2)]=$650;
 var $652=(($649+4)|0);
 var $653=HEAP32[(($652)>>2)];
 var $654=$648;
 var $655=HEAP32[(($654)>>2)];
 var $656=((($655)-(12))|0);
 var $657=$656;
 var $658=HEAP32[(($657)>>2)];
 var $659=$648;
 var $660=(($659+$658)|0);
 var $661=$660;
 HEAP32[(($661)>>2)]=$653;
 var $662=$648;
 var $663=HEAP32[(($662)>>2)];
 var $664=((($663)-(12))|0);
 var $665=$664;
 var $666=HEAP32[(($665)>>2)];
 var $667=$648;
 var $668=(($667+$666)|0);
 var $669=$668;
 var $670=$191;
 $187=$669;
 $188=$670;
 var $671=$187;
 var $672=$671;
 var $673=$188;
 var $674=$673;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($672,$674) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=62;break; }
 case 54: 
 var $675=(($671+72)|0);
 HEAP32[(($675)>>2)]=0;
 var $676=(($671+76)|0);
 HEAP32[(($676)>>2)]=-1;
 var $677=$632;
 HEAP32[(($677)>>2)]=6164;
 var $678=$632;
 var $679=(($678+56)|0);
 var $680=$679;
 HEAP32[(($680)>>2)]=6184;
 var $681=(($632+4)|0);
 var $682=$195;
 var $683=$682|16;
 $185=$681;
 $186=$683;
 var $684=$185;
 var $685=$186;
 $180=$684;
 $181=$685;
 var $686=$180;
 var $687=$686;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($687);
 var $688=$686;
 HEAP32[(($688)>>2)]=6440;
 var $689=(($686+32)|0);
 $179=$689;
 var $690=$179;
 $178=$690;
 var $691=$178;
 var $692=$691;
 var $693=(($691)|0);
 $177=$693;
 var $694=$177;
 $176=$694;
 var $695=$176;
 var $696=$695;
 $175=$696;
 var $697=$175;
 var $698=$697;
 $174=$698;
 var $699=$174;
 var $700=(($697)|0);
 $173=$691;
 var $701=$173;
 var $702=(($701)|0);
 $172=$702;
 var $703=$172;
 var $704=$703;
 $171=$704;
 var $705=$171;
 var $706=(($705)|0);
 var $707=(($706)|0);
 var $708=$707;
 var $709=(($708)|0);
 $__a_i_i_i_i_i_i=$709;
 $__i_i_i_i_i_i_i=0;
 label=55;break;
 case 55: 
 var $711=$__i_i_i_i_i_i_i;
 var $712=($711>>>0)<3;
 if($712){label=56;break;}else{label=57;break;}
 case 56: 
 var $714=$__i_i_i_i_i_i_i;
 var $715=$__a_i_i_i_i_i_i;
 var $716=(($715+($714<<2))|0);
 HEAP32[(($716)>>2)]=0;
 var $717=$__i_i_i_i_i_i_i;
 var $718=((($717)+(1))|0);
 $__i_i_i_i_i_i_i=$718;
 label=55;break;
 case 57: 
 var $719=(($686+44)|0);
 HEAP32[(($719)>>2)]=0;
 var $720=(($686+48)|0);
 var $721=$181;
 HEAP32[(($720)>>2)]=$721;
 $170=$182;
 var $722=$170;
 $169=$722;
 var $723=$169;
 var $724=$723;
 var $725=(($723)|0);
 $168=$725;
 var $726=$168;
 $167=$726;
 var $727=$167;
 var $728=$727;
 $166=$728;
 var $729=$166;
 var $730=$729;
 $165=$730;
 var $731=$165;
 var $732=(($729)|0);
 $164=$723;
 var $733=$164;
 var $734=(($733)|0);
 $163=$734;
 var $735=$163;
 var $736=$735;
 $162=$736;
 var $737=$162;
 var $738=(($737)|0);
 var $739=(($738)|0);
 var $740=$739;
 var $741=(($740)|0);
 $__a_i_i_i1_i_i_i=$741;
 $__i_i_i_i2_i_i_i=0;
 label=58;break;
 case 58: 
 var $743=$__i_i_i_i2_i_i_i;
 var $744=($743>>>0)<3;
 if($744){label=59;break;}else{label=60;break;}
 case 59: 
 var $746=$__i_i_i_i2_i_i_i;
 var $747=$__a_i_i_i1_i_i_i;
 var $748=(($747+($746<<2))|0);
 HEAP32[(($748)>>2)]=0;
 var $749=$__i_i_i_i2_i_i_i;
 var $750=((($749)+(1))|0);
 $__i_i_i_i2_i_i_i=$750;
 label=58;break;
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($686,$182) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=61;break; }
 case 61: 
 var $752$0 = ___cxa_find_matching_catch(-1, -1); var $752$1 = tempRet0;
 var $753=$752$0;
 $183=$753;
 var $754=$752$1;
 $184=$754;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($182);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($689);
 var $755=$686;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($755);
 var $756=$183;
 var $757=$184;
 var $758$0=$756;
 var $758$1=0;
 var $759$0=$758$0;
 var $759$1=$757;
 var $760=$759$0;
 $196=$760;
 var $761=$759$1;
 $197=$761;
 var $762=$632;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($762,7788);
 label=63;break;
 case 62: 
 var $764$0 = ___cxa_find_matching_catch(-1, -1); var $764$1 = tempRet0;
 var $765=$764$0;
 $196=$765;
 var $766=$764$1;
 $197=$766;
 label=63;break;
 case 63: 
 var $768=$632;
 var $769=(($768+56)|0);
 var $770=$769;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($770);
 var $771=$196;
 var $772=$197;
 var $773$0=$771;
 var $773$1=0;
 var $774$0=$773$0;
 var $774$1=$772;
 var $eh_lpad_body6$1=$774$1;var $eh_lpad_body6$0=$774$0;label=52;break;
 case 64: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($182);
 label=65;break;
 case 65: 
 var $776=$ss;
 $161=$file;
 var $777=$161;
 var $778=(($777+8)|0);
 label=66;break;
 case 66: 
 var $780=$778;
 var $781=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE($776,$780) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=84;break; }
 case 67: 
 $160=$file;
 var $783=$160;
 var $784=(($783+8)|0);
 var $785=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=84;break; }
 case 68: 
 var $786=($785|0)==0;
 if($786){label=69;break;}else{label=71;break;}
 case 69: 
 var $788=$783;
 var $789=HEAP32[(($788)>>2)];
 var $790=((($789)-(12))|0);
 var $791=$790;
 var $792=HEAP32[(($791)>>2)];
 var $793=$783;
 var $794=(($793+$792)|0);
 var $795=$794;
 $158=$795;
 $159=4;
 var $796=$158;
 var $797=$796;
 var $798=$159;
 $156=$797;
 $157=$798;
 var $799=$156;
 var $800=(($799+16)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=$157;
 var $803=$801|$802;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($799,$803) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=84;break; }
 case 70: 
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 $155=$ss;
 var $805=$155;
 var $806=(($805+4)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($strSrc,$806) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=84;break; }
 case 73: 
 label=74;break;
 case 74: 
 $154=$strSrc;
 var $808=$154;
 $153=$808;
 var $809=$153;
 $152=$809;
 var $810=$152;
 $151=$810;
 var $811=$151;
 var $812=(($811)|0);
 $150=$812;
 var $813=$150;
 var $814=$813;
 $149=$814;
 var $815=$149;
 var $816=(($815)|0);
 var $817=(($816)|0);
 var $818=$817;
 var $819=(($818)|0);
 var $820=$819;
 var $821=HEAP8[($820)];
 var $822=($821&255);
 var $823=$822&1;
 var $824=($823|0)!=0;
 if($824){label=75;break;}else{label=76;break;}
 case 75: 
 $143=$810;
 var $826=$143;
 var $827=(($826)|0);
 $142=$827;
 var $828=$142;
 var $829=$828;
 $141=$829;
 var $830=$141;
 var $831=(($830)|0);
 var $832=(($831)|0);
 var $833=$832;
 var $834=(($833+8)|0);
 var $835=HEAP32[(($834)>>2)];
 var $849=$835;label=77;break;
 case 76: 
 $148=$810;
 var $837=$148;
 var $838=(($837)|0);
 $147=$838;
 var $839=$147;
 var $840=$839;
 $146=$840;
 var $841=$146;
 var $842=(($841)|0);
 var $843=(($842)|0);
 var $844=$843;
 var $845=(($844+1)|0);
 var $846=(($845)|0);
 $145=$846;
 var $847=$145;
 $144=$847;
 var $848=$144;
 var $849=$848;label=77;break;
 case 77: 
 var $849;
 $140=$849;
 var $850=$140;
 HEAP32[(($charSrc)>>2)]=$850;
 HEAP32[(($287)>>2)]=0;
 $138=$charSrc;
 $139=$287;
 var $851=$138;
 $137=$851;
 var $852=$137;
 var $853=$139;
 $128=$853;
 var $854=$128;
 $134=$286;
 $135=$852;
 $136=$854;
 var $855=$134;
 var $856=$135;
 var $857=$136;
 $131=$855;
 $132=$856;
 $133=$857;
 var $858=$131;
 var $859=(($858)|0);
 var $860=$132;
 $130=$860;
 var $861=$130;
 var $862=HEAP32[(($861)>>2)];
 HEAP32[(($859)>>2)]=$862;
 var $863=(($858+4)|0);
 var $864=$133;
 $129=$864;
 var $865=$129;
 var $866=HEAP32[(($865)>>2)];
 HEAP32[(($863)>>2)]=$866;
 label=78;break;
 case 78: 
 $125=$285;
 $126=$286;
 $127=0;
 var $868=$125;
 var $869=$127;
 var $870=$126;
 $122=$868;
 $123=$870;
 $124=$869;
 var $871=$122;
 var $872=(($871)|0);
 var $873=$123;
 var $874=(($873)|0);
 $121=$874;
 var $875=$121;
 var $876=HEAP32[(($875)>>2)];
 HEAP32[(($872)>>2)]=$876;
 var $877=(($871+4)|0);
 var $878=$123;
 var $879=(($878+4)|0);
 $120=$879;
 var $880=$120;
 var $881=HEAP32[(($880)>>2)];
 HEAP32[(($877)>>2)]=$881;
 label=79;break;
 case 79: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC1EjRKS4_($sources,1,$285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=85;break; }
 case 80: 
 var $884=(($304+8)|0);
 var $885=(($304+4)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl7ProgramC1ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($288,$885,$sources,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=86;break; }
 case 81: 
 var $887=(function() { try { __THREW__ = 0; return __ZN2cl7ProgramaSERKS0_($884,$288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=87;break; }
 case 82: 
 __ZN2cl7ProgramD1Ev($288);
 var $889=(($304+8)|0);
 var $890=(function() { try { __THREW__ = 0; return __ZNK2cl7Program5buildERKNSt3__16vectorINS_6DeviceENS1_9allocatorIS3_EEEEPKcPFvP11_cl_programPvESD_($889,$devices,0,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=88;break; }
 case 83: 
 label=103;break;
 case 84: 
 var $893$0 = ___cxa_find_matching_catch(-1, -1); var $893$1 = tempRet0;
 var $894=$893$0;
 $279=$894;
 var $895=$893$1;
 $280=$895;
 label=195;break;
 case 85: 
 var $897$0 = ___cxa_find_matching_catch(-1, -1); var $897$1 = tempRet0;
 var $898=$897$0;
 $279=$898;
 var $899=$897$1;
 $280=$899;
 label=194;break;
 case 86: 
 var $901$0 = ___cxa_find_matching_catch(-1, -1); var $901$1 = tempRet0;
 var $902=$901$0;
 $279=$902;
 var $903=$901$1;
 $280=$903;
 label=193;break;
 case 87: 
 var $905$0 = ___cxa_find_matching_catch(-1, -1); var $905$1 = tempRet0;
 var $906=$905$0;
 $279=$906;
 var $907=$905$1;
 $280=$907;
 __ZN2cl7ProgramD1Ev($288);
 label=193;break;
 case 88: 
 var $909$0 = ___cxa_find_matching_catch(-1, -1,12944); var $909$1 = tempRet0;
 var $910=$909$0;
 $279=$910;
 var $911=$909$1;
 $280=$911;
 label=89;break;
 case 89: 
 var $913=$280;
 var $914=_llvm_eh_typeid_for(12944);
 var $915=($913|0)==($914|0);
 if($915){label=90;break;}else{label=193;break;}
 case 90: 
 var $917=$279;
 var $918=___cxa_begin_catch($917);
 var $919=$918;
 $e=$919;
 var $920=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=99;break; }
 case 91: 
 $118=$920;
 $119=8;
 var $922=$118;
 var $923=$119;
 var $924=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$923]($922) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=99;break; }
 case 92: 
 label=93;break;
 case 93: 
 var $926=(($304+8)|0);
 $116=$devices;
 $117=0;
 var $927=$116;
 var $928=$117;
 var $929=$927;
 var $930=(($929)|0);
 var $931=HEAP32[(($930)>>2)];
 var $932=(($931+($928<<2))|0);
 label=94;break;
 case 94: 
 (function() { try { __THREW__ = 0; return __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($289,$926,$932,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=99;break; }
 case 95: 
 var $935=(function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE(17608,$289) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=96;break; } else { label=100;break; }
 case 96: 
 $114=$935;
 $115=8;
 var $937=$114;
 var $938=$115;
 var $939=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$938]($937) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=100;break; }
 case 97: 
 label=98;break;
 case 98: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($289);
 var $941=___cxa_allocate_exception(12);
 var $942=$941;
 var $943=$e;
 __ZN2cl5ErrorC1ERKS0_($942,$943);
 (function() { try { __THREW__ = 0; return ___cxa_throw($941,12944,(410)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=202;break; } else { label=99;break; }
 case 99: 
 var $945$0 = ___cxa_find_matching_catch(-1, -1); var $945$1 = tempRet0;
 var $946=$945$0;
 $279=$946;
 var $947=$945$1;
 $280=$947;
 label=101;break;
 case 100: 
 var $949$0 = ___cxa_find_matching_catch(-1, -1); var $949$1 = tempRet0;
 var $950=$949$0;
 $279=$950;
 var $951=$949$1;
 $280=$951;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($289);
 label=101;break;
 case 101: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=201;break; }
 case 102: 
 label=193;break;
 case 103: 
 var $955=(($304+12)|0);
 var $956=(($304+8)|0);
 (function() { try { __THREW__ = 0; return __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($290,$956,48,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=86;break; }
 case 104: 
 var $958=(function() { try { __THREW__ = 0; return __ZN2cl6KernelaSERKS0_($955,$290) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=151;break; }
 case 105: 
 __ZN2cl6KernelD1Ev($290);
 var $960=(($304+16)|0);
 var $961=(($304+4)|0);
 $112=$devices;
 $113=0;
 var $962=$112;
 var $963=$113;
 var $964=$962;
 var $965=(($964)|0);
 var $966=HEAP32[(($965)>>2)];
 var $967=(($966+($963<<2))|0);
 label=106;break;
 case 106: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($291,$961,$967,$$etemp$0$0,$$etemp$0$1,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=86;break; }
 case 107: 
 var $970=(function() { try { __THREW__ = 0; return __ZN2cl12CommandQueueaSERKS0_($960,$291) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=152;break; }
 case 108: 
 __ZN2cl12CommandQueueD1Ev($291);
 var $972=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=86;break; }
 case 109: 
 $110=$292;
 $111=3888;
 var $974=$110;
 var $975=$111;
 $108=$974;
 $109=$975;
 var $976=$108;
 var $977=$976;
 var $978=(($976)|0);
 $107=$978;
 var $979=$107;
 $106=$979;
 var $980=$106;
 var $981=$980;
 $105=$981;
 var $982=$105;
 var $983=$982;
 $104=$983;
 var $984=$104;
 var $985=(($982)|0);
 var $986=$109;
 var $987=$109;
 $103=$987;
 var $988=$103;
 var $989=(function() { try { __THREW__ = 0; return _strlen($988) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=86;break; }
 case 110: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($976,$986,$989) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=111;break; } else { label=86;break; }
 case 111: 
 label=112;break;
 case 112: 
 var $991=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($972,$292,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=153;break; }
 case 113: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($292);
 $nParticles=$991;
 var $993=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { label=86;break; }
 case 114: 
 $101=$293;
 $102=3496;
 var $995=$101;
 var $996=$102;
 $99=$995;
 $100=$996;
 var $997=$99;
 var $998=$997;
 var $999=(($997)|0);
 $98=$999;
 var $1000=$98;
 $97=$1000;
 var $1001=$97;
 var $1002=$1001;
 $96=$1002;
 var $1003=$96;
 var $1004=$1003;
 $95=$1004;
 var $1005=$95;
 var $1006=(($1003)|0);
 var $1007=$100;
 var $1008=$100;
 $94=$1008;
 var $1009=$94;
 var $1010=(function() { try { __THREW__ = 0; return _strlen($1009) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=86;break; }
 case 115: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($997,$1007,$1010) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=86;break; }
 case 116: 
 label=117;break;
 case 117: 
 var $1012=(function() { try { __THREW__ = 0; return __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($993,$293) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=154;break; }
 case 118: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
 if($1012){label=119;break;}else{label=161;break;}
 case 119: 
 var $1015=(($304+20)|0);
 var $1016=(($304+4)|0);
 var $1017=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { label=86;break; }
 case 120: 
 $92=$295;
 $93=3312;
 var $1019=$92;
 var $1020=$93;
 $90=$1019;
 $91=$1020;
 var $1021=$90;
 var $1022=$1021;
 var $1023=(($1021)|0);
 $89=$1023;
 var $1024=$89;
 $88=$1024;
 var $1025=$88;
 var $1026=$1025;
 $87=$1026;
 var $1027=$87;
 var $1028=$1027;
 $86=$1028;
 var $1029=$86;
 var $1030=(($1027)|0);
 var $1031=$91;
 var $1032=$91;
 $85=$1032;
 var $1033=$85;
 var $1034=(function() { try { __THREW__ = 0; return _strlen($1033) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=86;break; }
 case 121: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1021,$1031,$1034) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=122;break; } else { label=86;break; }
 case 122: 
 label=123;break;
 case 123: 
 var $1036=(function() { try { __THREW__ = 0; return __ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($1017,$295,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { label=155;break; }
 case 124: 
 var $$etemp$1$0=1;
 var $$etemp$1$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl8BufferGLC1ERKNS_7ContextEyjPi($294,$1016,$$etemp$1$0,$$etemp$1$1,$1036,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=125;break; } else { label=155;break; }
 case 125: 
 var $1039=$294;
 var $1040=(function() { try { __THREW__ = 0; return __ZN2cl6BufferaSERKS0_($1015,$1039) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=156;break; }
 case 126: 
 __ZN2cl8BufferGLD1Ev($294);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($295);
 var $1042=(($304+24)|0);
 var $1043=(($304+4)|0);
 var $1044=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=86;break; }
 case 127: 
 $83=$297;
 $84=3136;
 var $1046=$83;
 var $1047=$84;
 $81=$1046;
 $82=$1047;
 var $1048=$81;
 var $1049=$1048;
 var $1050=(($1048)|0);
 $80=$1050;
 var $1051=$80;
 $79=$1051;
 var $1052=$79;
 var $1053=$1052;
 $78=$1053;
 var $1054=$78;
 var $1055=$1054;
 $77=$1055;
 var $1056=$77;
 var $1057=(($1054)|0);
 var $1058=$82;
 var $1059=$82;
 $76=$1059;
 var $1060=$76;
 var $1061=(function() { try { __THREW__ = 0; return _strlen($1060) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=86;break; }
 case 128: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1048,$1058,$1061) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=129;break; } else { label=86;break; }
 case 129: 
 label=130;break;
 case 130: 
 var $1063=(function() { try { __THREW__ = 0; return __ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($1044,$297,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=131;break; } else { label=158;break; }
 case 131: 
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl8BufferGLC1ERKNS_7ContextEyjPi($296,$1043,$$etemp$2$0,$$etemp$2$1,$1063,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=158;break; }
 case 132: 
 var $1066=$296;
 var $1067=(function() { try { __THREW__ = 0; return __ZN2cl6BufferaSERKS0_($1042,$1066) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=159;break; }
 case 133: 
 __ZN2cl8BufferGLD1Ev($296);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($297);
 var $1069=(($304+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE7reserveEj($1069,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=86;break; }
 case 134: 
 var $1071=(($304+32)|0);
 var $1072=(($304+20)|0);
 var $1073=$1072;
 $74=$1071;
 $75=$1073;
 var $1074=$74;
 var $1075=$1074;
 var $1076=(($1075+4)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=$1074;
 $73=$1078;
 var $1079=$73;
 var $1080=(($1079+8)|0);
 $72=$1080;
 var $1081=$72;
 var $1082=$1081;
 $71=$1082;
 var $1083=$71;
 var $1084=(($1083)|0);
 var $1085=HEAP32[(($1084)>>2)];
 var $1086=($1077|0)!=($1085|0);
 if($1086){label=135;break;}else{label=139;break;}
 case 135: 
 var $1088=$1074;
 $70=$1088;
 var $1089=$70;
 var $1090=(($1089+8)|0);
 $69=$1090;
 var $1091=$69;
 var $1092=$1091;
 $68=$1092;
 var $1093=$68;
 var $1094=$1093;
 var $1095=$1074;
 var $1096=(($1095+4)|0);
 var $1097=HEAP32[(($1096)>>2)];
 $52=$1097;
 var $1098=$52;
 var $1099=$75;
 $63=$1094;
 $64=$1098;
 $65=$1099;
 var $1100=$67;
 var $1101=$63;
 var $1102=$64;
 var $1103=$65;
 $62=$1103;
 var $1104=$62;
 var $tmp_i_i=$61;
 var $tmp1_i_i=$66;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $58=$1101;
 $59=$1102;
 $60=$1104;
 var $1105=$58;
 var $1106=$59;
 var $1107=$60;
 $57=$1107;
 var $1108=$57;
 $54=$1105;
 $55=$1106;
 $56=$1108;
 var $1109=$54;
 var $1110=$55;
 var $1111=$1110;
 var $1112=($1111|0)==0;
 if($1112){var $1117=0;label=138;break;}else{label=136;break;}
 case 136: 
 var $1114=$1111;
 var $1115=$56;
 $53=$1115;
 var $1116=$53;
 (function() { try { __THREW__ = 0; return __ZN2cl6MemoryC1ERKS0_($1114,$1116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=137;break; } else { label=86;break; }
 case 137: 
 var $1117=$1114;label=138;break;
 case 138: 
 var $1117;
 var $1118=$1074;
 var $1119=(($1118+4)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=(($1120+4)|0);
 HEAP32[(($1119)>>2)]=$1121;
 label=141;break;
 case 139: 
 var $1123=$75;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1074,$1123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=140;break; } else { label=86;break; }
 case 140: 
 label=141;break;
 case 141: 
 label=142;break;
 case 142: 
 var $1125=(($304+32)|0);
 var $1126=(($304+24)|0);
 var $1127=$1126;
 $50=$1125;
 $51=$1127;
 var $1128=$50;
 var $1129=$1128;
 var $1130=(($1129+4)|0);
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=$1128;
 $49=$1132;
 var $1133=$49;
 var $1134=(($1133+8)|0);
 $48=$1134;
 var $1135=$48;
 var $1136=$1135;
 $47=$1136;
 var $1137=$47;
 var $1138=(($1137)|0);
 var $1139=HEAP32[(($1138)>>2)];
 var $1140=($1131|0)!=($1139|0);
 if($1140){label=143;break;}else{label=147;break;}
 case 143: 
 var $1142=$1128;
 $46=$1142;
 var $1143=$46;
 var $1144=(($1143+8)|0);
 $45=$1144;
 var $1145=$45;
 var $1146=$1145;
 $44=$1146;
 var $1147=$44;
 var $1148=$1147;
 var $1149=$1128;
 var $1150=(($1149+4)|0);
 var $1151=HEAP32[(($1150)>>2)];
 $28=$1151;
 var $1152=$28;
 var $1153=$51;
 $39=$1148;
 $40=$1152;
 $41=$1153;
 var $1154=$43;
 var $1155=$39;
 var $1156=$40;
 var $1157=$41;
 $38=$1157;
 var $1158=$38;
 var $tmp_i_i27=$37;
 var $tmp1_i_i28=$42;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i27)]=HEAP8[($tmp1_i_i28)];
 $34=$1155;
 $35=$1156;
 $36=$1158;
 var $1159=$34;
 var $1160=$35;
 var $1161=$36;
 $33=$1161;
 var $1162=$33;
 $30=$1159;
 $31=$1160;
 $32=$1162;
 var $1163=$30;
 var $1164=$31;
 var $1165=$1164;
 var $1166=($1165|0)==0;
 if($1166){var $1171=0;label=146;break;}else{label=144;break;}
 case 144: 
 var $1168=$1165;
 var $1169=$32;
 $29=$1169;
 var $1170=$29;
 (function() { try { __THREW__ = 0; return __ZN2cl6MemoryC1ERKS0_($1168,$1170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=86;break; }
 case 145: 
 var $1171=$1168;label=146;break;
 case 146: 
 var $1171;
 var $1172=$1128;
 var $1173=(($1172+4)|0);
 var $1174=HEAP32[(($1173)>>2)];
 var $1175=(($1174+4)|0);
 HEAP32[(($1173)>>2)]=$1175;
 label=149;break;
 case 147: 
 var $1177=$51;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1128,$1177) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=86;break; }
 case 148: 
 label=149;break;
 case 149: 
 label=150;break;
 case 150: 
 label=182;break;
 case 151: 
 var $1180$0 = ___cxa_find_matching_catch(-1, -1); var $1180$1 = tempRet0;
 var $1181=$1180$0;
 $279=$1181;
 var $1182=$1180$1;
 $280=$1182;
 __ZN2cl6KernelD1Ev($290);
 label=193;break;
 case 152: 
 var $1184$0 = ___cxa_find_matching_catch(-1, -1); var $1184$1 = tempRet0;
 var $1185=$1184$0;
 $279=$1185;
 var $1186=$1184$1;
 $280=$1186;
 __ZN2cl12CommandQueueD1Ev($291);
 label=193;break;
 case 153: 
 var $1188$0 = ___cxa_find_matching_catch(-1, -1); var $1188$1 = tempRet0;
 var $1189=$1188$0;
 $279=$1189;
 var $1190=$1188$1;
 $280=$1190;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($292);
 label=193;break;
 case 154: 
 var $1192$0 = ___cxa_find_matching_catch(-1, -1); var $1192$1 = tempRet0;
 var $1193=$1192$0;
 $279=$1193;
 var $1194=$1192$1;
 $280=$1194;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
 label=193;break;
 case 155: 
 var $1196$0 = ___cxa_find_matching_catch(-1, -1); var $1196$1 = tempRet0;
 var $1197=$1196$0;
 $279=$1197;
 var $1198=$1196$1;
 $280=$1198;
 label=157;break;
 case 156: 
 var $1200$0 = ___cxa_find_matching_catch(-1, -1); var $1200$1 = tempRet0;
 var $1201=$1200$0;
 $279=$1201;
 var $1202=$1200$1;
 $280=$1202;
 __ZN2cl8BufferGLD1Ev($294);
 label=157;break;
 case 157: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($295);
 label=193;break;
 case 158: 
 var $1205$0 = ___cxa_find_matching_catch(-1, -1); var $1205$1 = tempRet0;
 var $1206=$1205$0;
 $279=$1206;
 var $1207=$1205$1;
 $280=$1207;
 label=160;break;
 case 159: 
 var $1209$0 = ___cxa_find_matching_catch(-1, -1); var $1209$1 = tempRet0;
 var $1210=$1209$0;
 $279=$1210;
 var $1211=$1209$1;
 $280=$1211;
 __ZN2cl8BufferGLD1Ev($296);
 label=160;break;
 case 160: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($297);
 label=193;break;
 case 161: 
 var $1214=(($304+20)|0);
 var $1215=(($304+4)|0);
 var $1216=$nParticles;
 var $1217=($1216<<2);
 var $1218=($1217<<2);
 var $1219=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=162;break; } else { label=86;break; }
 case 162: 
 $26=$299;
 $27=3048;
 var $1221=$26;
 var $1222=$27;
 $24=$1221;
 $25=$1222;
 var $1223=$24;
 var $1224=$1223;
 var $1225=(($1223)|0);
 $23=$1225;
 var $1226=$23;
 $22=$1226;
 var $1227=$22;
 var $1228=$1227;
 $21=$1228;
 var $1229=$21;
 var $1230=$1229;
 $20=$1230;
 var $1231=$20;
 var $1232=(($1229)|0);
 var $1233=$25;
 var $1234=$25;
 $19=$1234;
 var $1235=$19;
 var $1236=(function() { try { __THREW__ = 0; return _strlen($1235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=86;break; }
 case 163: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1223,$1233,$1236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=164;break; } else { label=86;break; }
 case 164: 
 label=165;break;
 case 165: 
 var $1238=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($1219,$299,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=166;break; } else { label=176;break; }
 case 166: 
 var $$etemp$3$0=33;
 var $$etemp$3$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($298,$1215,$$etemp$3$0,$$etemp$3$1,$1218,$1238,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=167;break; } else { label=176;break; }
 case 167: 
 var $1241=(function() { try { __THREW__ = 0; return __ZN2cl6BufferaSERKS0_($1214,$298) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=168;break; } else { label=177;break; }
 case 168: 
 __ZN2cl6BufferD1Ev($298);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($299);
 var $1243=(($304+24)|0);
 var $1244=(($304+4)|0);
 var $1245=$nParticles;
 var $1246=($1245<<2);
 var $1247=($1246<<2);
 var $1248=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=169;break; } else { label=86;break; }
 case 169: 
 $17=$301;
 $18=3016;
 var $1250=$17;
 var $1251=$18;
 $15=$1250;
 $16=$1251;
 var $1252=$15;
 var $1253=$1252;
 var $1254=(($1252)|0);
 $14=$1254;
 var $1255=$14;
 $13=$1255;
 var $1256=$13;
 var $1257=$1256;
 $12=$1257;
 var $1258=$12;
 var $1259=$1258;
 $11=$1259;
 var $1260=$11;
 var $1261=(($1258)|0);
 var $1262=$16;
 var $1263=$16;
 $10=$1263;
 var $1264=$10;
 var $1265=(function() { try { __THREW__ = 0; return _strlen($1264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=86;break; }
 case 170: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1252,$1262,$1265) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { label=86;break; }
 case 171: 
 label=172;break;
 case 172: 
 var $1267=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($1248,$301,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { label=179;break; }
 case 173: 
 var $$etemp$4$0=33;
 var $$etemp$4$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($300,$1244,$$etemp$4$0,$$etemp$4$1,$1247,$1267,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=174;break; } else { label=179;break; }
 case 174: 
 var $1270=(function() { try { __THREW__ = 0; return __ZN2cl6BufferaSERKS0_($1243,$300) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=175;break; } else { label=180;break; }
 case 175: 
 __ZN2cl6BufferD1Ev($300);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($301);
 label=182;break;
 case 176: 
 var $1273$0 = ___cxa_find_matching_catch(-1, -1); var $1273$1 = tempRet0;
 var $1274=$1273$0;
 $279=$1274;
 var $1275=$1273$1;
 $280=$1275;
 label=178;break;
 case 177: 
 var $1277$0 = ___cxa_find_matching_catch(-1, -1); var $1277$1 = tempRet0;
 var $1278=$1277$0;
 $279=$1278;
 var $1279=$1277$1;
 $280=$1279;
 __ZN2cl6BufferD1Ev($298);
 label=178;break;
 case 178: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($299);
 label=193;break;
 case 179: 
 var $1282$0 = ___cxa_find_matching_catch(-1, -1); var $1282$1 = tempRet0;
 var $1283=$1282$0;
 $279=$1283;
 var $1284=$1282$1;
 $280=$1284;
 label=181;break;
 case 180: 
 var $1286$0 = ___cxa_find_matching_catch(-1, -1); var $1286$1 = tempRet0;
 var $1287=$1286$0;
 $279=$1287;
 var $1288=$1286$1;
 $280=$1288;
 __ZN2cl6BufferD1Ev($300);
 label=181;break;
 case 181: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($301);
 label=193;break;
 case 182: 
 var $1291=(($304+28)|0);
 var $1292=(($304+4)|0);
 var $1293=$nParticles;
 var $1294=($1293<<2);
 var $1295=(function() { try { __THREW__ = 0; return __ZN6global3parEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=86;break; }
 case 183: 
 $8=$303;
 $9=2928;
 var $1297=$8;
 var $1298=$9;
 $6=$1297;
 $7=$1298;
 var $1299=$6;
 var $1300=$1299;
 var $1301=(($1299)|0);
 $5=$1301;
 var $1302=$5;
 $4=$1302;
 var $1303=$4;
 var $1304=$1303;
 $3=$1304;
 var $1305=$3;
 var $1306=$1305;
 $2=$1306;
 var $1307=$2;
 var $1308=(($1305)|0);
 var $1309=$7;
 var $1310=$7;
 $1=$1310;
 var $1311=$1;
 var $1312=(function() { try { __THREW__ = 0; return _strlen($1311) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=184;break; } else { label=86;break; }
 case 184: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1299,$1309,$1312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=185;break; } else { label=86;break; }
 case 185: 
 label=186;break;
 case 186: 
 var $1314=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($1295,$303,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=190;break; }
 case 187: 
 var $$etemp$5$0=33;
 var $$etemp$5$1=0;
 (function() { try { __THREW__ = 0; return __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($302,$1292,$$etemp$5$0,$$etemp$5$1,$1294,$1314,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=188;break; } else { label=190;break; }
 case 188: 
 var $1317=(function() { try { __THREW__ = 0; return __ZN2cl6BufferaSERKS0_($1291,$302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=189;break; } else { label=191;break; }
 case 189: 
 __ZN2cl6BufferD1Ev($302);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($303);
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($sources);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($kernelFilename);
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($devices);
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($platforms);
 STACKTOP=sp;return;
 case 190: 
 var $1320$0 = ___cxa_find_matching_catch(-1, -1); var $1320$1 = tempRet0;
 var $1321=$1320$0;
 $279=$1321;
 var $1322=$1320$1;
 $280=$1322;
 label=192;break;
 case 191: 
 var $1324$0 = ___cxa_find_matching_catch(-1, -1); var $1324$1 = tempRet0;
 var $1325=$1324$0;
 $279=$1325;
 var $1326=$1324$1;
 $280=$1326;
 __ZN2cl6BufferD1Ev($302);
 label=192;break;
 case 192: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($303);
 label=193;break;
 case 193: 
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($sources);
 label=194;break;
 case 194: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
 label=195;break;
 case 195: 
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 label=196;break;
 case 196: 
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
 label=197;break;
 case 197: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($kernelFilename);
 label=198;break;
 case 198: 
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($devices);
 label=199;break;
 case 199: 
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($platforms);
 label=200;break;
 case 200: 
 var $1336=$279;
 var $1337=$280;
 var $1338$0=$1336;
 var $1338$1=0;
 var $1339$0=$1338$0;
 var $1339$1=$1337;
 ___resumeException($1339$0)
 case 201: 
 var $1341$0 = ___cxa_find_matching_catch(-1, -1,0); var $1341$1 = tempRet0;
 var $1342=$1341$0;
 ___clang_call_terminate($1342);
 throw "Reached an unreachable!";
 case 202: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl5Error3errEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZN2cl8Platform3getEPNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE($platforms){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n=sp;
 var $err;
 var $ids;
 $2=$platforms;
 HEAP32[(($n)>>2)]=0;
 var $3=_clGetPlatformIDs(0,0,$n);
 $err=$3;
 var $4=$err;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$err;
 var $8=__ZN2cl6detailL10errHandlerEiPKc($7,1392);
 $1=$8;
 label=6;break;
 case 3: 
 var $10=HEAP32[(($n)>>2)];
 var $11=($10<<2);
 var $12=STACKTOP;STACKTOP = (STACKTOP + $11)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 $ids=$13;
 var $14=HEAP32[(($n)>>2)];
 var $15=$ids;
 var $16=_clGetPlatformIDs($14,$15,0);
 $err=$16;
 var $17=$err;
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$err;
 var $21=__ZN2cl6detailL10errHandlerEiPKc($20,1392);
 $1=$21;
 label=6;break;
 case 5: 
 var $23=$2;
 var $24=$ids;
 var $25=(($24)|0);
 var $26=HEAP32[(($n)>>2)];
 var $27=$ids;
 var $28=(($27+($26<<2))|0);
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE6assignIPP15_cl_platform_idEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($23,$25,$28);
 $1=0;
 label=6;break;
 case 6: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 STACKTOP=sp;return $3;
}


function __ZN2cl7ContextaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP11_cl_contextEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl7ContextC1EyPiPFvPKcPKvjPvES6_S1_($this,$type$0,$type$1,$properties,$notifyFptr,$data,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2=sp;
 var $3;
 var $4;
 var $5;
 var $6;
 $1=$this;
 var $st$0$0=(($2)|0);
 HEAP32[(($st$0$0)>>2)]=$type$0;
 var $st$1$1=(($2+4)|0);
 HEAP32[(($st$1$1)>>2)]=$type$1;
 $3=$properties;
 $4=$notifyFptr;
 $5=$data;
 $6=$err;
 var $7=$1;
 var $ld$2$0=(($2)|0);
 var $8$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($2+4)|0);
 var $8$1=HEAP32[(($ld$3$1)>>2)];
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$6;
 __ZN2cl7ContextC2EyPiPFvPKcPKvjPvES6_S1_($7,$8$0,$8$1,$9,$10,$11,$12);
 STACKTOP=sp;return;
}


function __ZNK2cl7Context7getInfoILi4225EEENS_6detail12param_traitsINS2_15cl_context_infoEXT_EE10param_typeEPi($agg_result,$this,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $7=(sp)+(8);
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $result;
 var $17;
 var $18;
 var $19;
 $14=$this;
 $15=$err;
 var $20=$14;
 $16=0;
 $13=$agg_result;
 var $21=$13;
 $12=$21;
 var $22=$12;
 var $23=$22;
 $11=$23;
 var $24=$11;
 var $25=$24;
 $10=$25;
 var $26=$10;
 var $27=(($24)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($24+4)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=(($24+8)|0);
 $8=$29;
 $9=0;
 var $30=$8;
 var $31=$9;
 $6=$30;
 HEAP32[(($7)>>2)]=$31;
 var $32=$6;
 var $33=$32;
 $5=$7;
 var $34=$5;
 var $35=HEAP32[(($34)>>2)];
 $3=$33;
 HEAP32[(($4)>>2)]=$35;
 var $36=$3;
 var $37=$36;
 $2=$37;
 var $38=$2;
 var $39=(($36)|0);
 $1=$4;
 var $40=$1;
 var $41=HEAP32[(($40)>>2)];
 HEAP32[(($39)>>2)]=$41;
 var $42=(function() { try { __THREW__ = 0; return __ZNK2cl7Context7getInfoINSt3__16vectorINS_6DeviceENS2_9allocatorIS4_EEEEEEijPT_($20,4225,$agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 $result=$42;
 var $44=$15;
 var $45=($44|0)!=0;
 if($45){label=3;break;}else{label=5;break;}
 case 3: 
 var $47=$result;
 var $48=$15;
 HEAP32[(($48)>>2)]=$47;
 label=5;break;
 case 4: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1); var $50$1 = tempRet0;
 var $51=$50$0;
 $17=$51;
 var $52=$50$1;
 $18=$52;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($agg_result);
 label=8;break;
 case 5: 
 $16=1;
 $19=1;
 var $54=$16;
 if($54){label=7;break;}else{label=6;break;}
 case 6: 
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($agg_result);
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $58=$17;
 var $59=$18;
 var $60$0=$58;
 var $60$1=0;
 var $61$0=$60$0;
 var $61$1=$59;
 ___resumeException($61$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC1EjRKS4_($this,$__n,$__x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$__n;
 $3=$__x;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC2EjRKS4_($4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN2cl7ProgramaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP11_cl_programEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl7ProgramC1ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($this,$context,$sources,$err){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$context;
 $3=$sources;
 $4=$err;
 var $5=$1;
 var $6=$4;
 var $7=$2;
 var $8=$3;
 __ZN2cl7ProgramC2ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($5,$7,$8,$6);
 STACKTOP=sp;return;
}


function __ZNK2cl7Program5buildERKNSt3__16vectorINS_6DeviceENS1_9allocatorIS3_EEEEPKcPFvP11_cl_programPvESD_($this,$devices,$options,$notifyFptr,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $3=$this;
 $4=$devices;
 $5=$options;
 $6=$notifyFptr;
 $7=$data;
 var $8=$3;
 var $9=$8;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$4;
 $2=$12;
 var $13=$2;
 var $14=$13;
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$13;
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$16;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=(((($22|0))/(4))&-1);
 var $24=$4;
 $1=$24;
 var $25=$1;
 var $26=$25;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$5;
 var $31=$6;
 var $32=$7;
 var $33=_clBuildProgram($11,$23,$29,$30,$31,$32);
 var $34=__ZN2cl6detailL10errHandlerEiPKc($33,1536);
 STACKTOP=sp;return $34;
}


function __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($agg_result,$this,$device,$err){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $__a_i_i_i;
 var $__i_i_i_i;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $result;
 var $14;
 var $15;
 var $16;
 $10=$this;
 $11=$device;
 $12=$err;
 var $17=$10;
 $13=0;
 $9=$agg_result;
 var $18=$9;
 $8=$18;
 var $19=$8;
 var $20=$19;
 var $21=(($19)|0);
 $7=$21;
 var $22=$7;
 $6=$22;
 var $23=$6;
 var $24=$23;
 $5=$24;
 var $25=$5;
 var $26=$25;
 $4=$26;
 var $27=$4;
 var $28=(($25)|0);
 $3=$19;
 var $29=$3;
 var $30=(($29)|0);
 $2=$30;
 var $31=$2;
 var $32=$31;
 $1=$32;
 var $33=$1;
 var $34=(($33)|0);
 var $35=(($34)|0);
 var $36=$35;
 var $37=(($36)|0);
 $__a_i_i_i=$37;
 $__i_i_i_i=0;
 label=2;break;
 case 2: 
 var $39=$__i_i_i_i;
 var $40=($39>>>0)<3;
 if($40){label=3;break;}else{label=4;break;}
 case 3: 
 var $42=$__i_i_i_i;
 var $43=$__a_i_i_i;
 var $44=(($43+($42<<2))|0);
 HEAP32[(($44)>>2)]=0;
 var $45=$__i_i_i_i;
 var $46=((($45)+(1))|0);
 $__i_i_i_i=$46;
 label=2;break;
 case 4: 
 var $47=$11;
 var $48=(function() { try { __THREW__ = 0; return __ZNK2cl7Program12getBuildInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEiRKNS_6DeviceEjPT_($17,$47,4483,$agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 $result=$48;
 var $50=$12;
 var $51=($50|0)!=0;
 if($51){label=6;break;}else{label=8;break;}
 case 6: 
 var $53=$result;
 var $54=$12;
 HEAP32[(($54)>>2)]=$53;
 label=8;break;
 case 7: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 $14=$57;
 var $58=$56$1;
 $15=$58;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 label=11;break;
 case 8: 
 $13=1;
 $16=1;
 var $60=$13;
 if($60){label=10;break;}else{label=9;break;}
 case 9: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
 case 11: 
 var $64=$14;
 var $65=$15;
 var $66$0=$64;
 var $66$1=0;
 var $67$0=$66$0;
 var $67$1=$65;
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl5ErrorC1ERKS0_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$3;
 __ZN2cl5ErrorC2ERKS0_($4,$5);
 STACKTOP=sp;return;
}


function __ZN2cl5ErrorD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl5ErrorD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6KernelaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP10_cl_kernelEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($this,$program,$name,$err){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$program;
 $3=$name;
 $4=$err;
 var $5=$1;
 var $6=$3;
 var $7=$4;
 var $8=$2;
 __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($5,$8,$6,$7);
 STACKTOP=sp;return;
}


function __ZN2cl12CommandQueueaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP17_cl_command_queueEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$properties$0,$properties$1,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 $1=$this;
 $2=$context;
 $3=$device;
 var $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$properties$0;
 var $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$properties$1;
 $5=$err;
 var $6=$1;
 var $ld$2$0=(($4)|0);
 var $7$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($4+4)|0);
 var $7$1=HEAP32[(($ld$3$1)>>2)];
 var $8=$5;
 var $9=$2;
 var $10=$3;
 __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($6,$9,$10,$7$0,$7$1,$8);
 STACKTOP=sp;return;
}


function __ZN2cl6BufferaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6MemoryaSERKS0_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl8BufferGLC1ERKNS_7ContextEyjPi($this,$context,$flags$0,$flags$1,$bufobj,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5;
 $1=$this;
 $2=$context;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$flags$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$flags$1;
 $4=$bufobj;
 $5=$err;
 var $6=$1;
 var $ld$2$0=(($3)|0);
 var $7$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $7$1=HEAP32[(($ld$3$1)>>2)];
 var $8=$4;
 var $9=$5;
 var $10=$2;
 __ZN2cl8BufferGLC2ERKNS_7ContextEyjPi($6,$10,$7$0,$7$1,$8,$9);
 STACKTOP=sp;return;
}


function __ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($this,$key,$def){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $__i1_i_i1=sp;
 var $14;
 var $15=(sp)+(8);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22=(sp)+(16);
 var $23;
 var $__i1_i_i=(sp)+(24);
 var $24;
 var $25=(sp)+(32);
 var $26;
 var $27;
 var $28=(sp)+(40);
 var $29;
 var $30;
 var $31;
 var $32;
 var $it=(sp)+(48);
 var $33=(sp)+(56);
 $30=$this;
 $31=$key;
 $32=$def;
 var $34=$30;
 var $35=(($34+20)|0);
 var $36=$31;
 $26=$35;
 $27=$36;
 var $37=$26;
 var $38=(($37)|0);
 var $39=$27;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($28,$38,$39);
 var $tmp_i=$25;
 var $tmp1_i=$28;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
 $24=$it;
 var $40=$24;
 var $tmp_i_i=$__i1_i_i;
 var $tmp2_i_i=$25;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
 $23=$40;
 var $41=$23;
 var $42=(($41)|0);
 var $43=$42;
 var $44=$__i1_i_i;
 assert(4 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];
 var $45=(($34+20)|0);
 $21=$45;
 var $46=$21;
 var $47=(($46)|0);
 $20=$47;
 var $48=$20;
 $18=$22;
 $19=0;
 var $49=$18;
 var $50=$19;
 $16=$49;
 $17=$50;
 var $51=$16;
 var $52=(($51)|0);
 var $53=$17;
 HEAP32[(($52)>>2)]=$53;
 var $tmp_i2=$15;
 var $tmp1_i3=$22;
 assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
 $14=$33;
 var $54=$14;
 var $tmp_i_i4=$__i1_i_i1;
 var $tmp2_i_i5=$15;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
 $13=$54;
 var $55=$13;
 var $56=(($55)|0);
 var $57=$56;
 var $58=$__i1_i_i1;
 assert(4 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];
 $5=$it;
 $6=$33;
 var $59=$5;
 var $60=(($59)|0);
 var $61=$6;
 var $62=(($61)|0);
 $3=$60;
 $4=$62;
 var $63=$3;
 var $64=$4;
 $1=$63;
 $2=$64;
 var $65=$1;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$2;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($67|0)==($70|0);
 var $72=$71^1;
 if($72){label=2;break;}else{label=3;break;}
 case 2: 
 $12=$it;
 var $74=$12;
 var $75=(($74)|0);
 $11=$75;
 var $76=$11;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+8)|0);
 $10=$79;
 var $80=$10;
 $9=$80;
 var $81=$9;
 var $82=$81;
 var $83=$82;
 var $84=$83;
 $8=$84;
 var $85=$8;
 $7=$85;
 var $86=$7;
 var $87=$86;
 var $88=$87;
 var $89=(($88+12)|0);
 var $90=HEAP32[(($89)>>2)];
 $29=$90;
 label=4;break;
 case 3: 
 var $92=$32;
 $29=$92;
 label=4;break;
 case 4: 
 var $94=$29;
 STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl8BufferGLD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl8BufferGLD2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE7reserveEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $__a;
 var $__v=sp;
 var $12;
 var $13;
 $10=$this;
 $11=$__n;
 var $14=$10;
 var $15=$11;
 $9=$14;
 var $16=$9;
 var $17=$16;
 $8=$17;
 var $18=$8;
 $7=$18;
 var $19=$7;
 var $20=(($19+8)|0);
 $6=$20;
 var $21=$6;
 var $22=$21;
 $5=$22;
 var $23=$5;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($18)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$25;
 var $29=$27;
 var $30=((($28)-($29))|0);
 var $31=(((($30|0))/(4))&-1);
 var $32=($15>>>0)>($31>>>0);
 if($32){label=2;break;}else{label=5;break;}
 case 2: 
 var $34=$14;
 $4=$34;
 var $35=$4;
 var $36=(($35+8)|0);
 $3=$36;
 var $37=$3;
 var $38=$37;
 $2=$38;
 var $39=$2;
 var $40=$39;
 $__a=$40;
 var $41=$11;
 $1=$14;
 var $42=$1;
 var $43=$42;
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$42;
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$45;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=(((($51|0))/(4))&-1);
 var $53=$__a;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($__v,$41,$52,$53);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($14,$__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
 label=5;break;
 case 4: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 $12=$57;
 var $58=$56$1;
 $13=$58;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
 label=6;break;
 case 5: 
 STACKTOP=sp;return;
 case 6: 
 var $61=$12;
 var $62=$13;
 var $63$0=$61;
 var $63$1=0;
 var $64$0=$63$0;
 var $64$1=$62;
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($this,$context,$flags$0,$flags$1,$size,$host_ptr,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5;
 var $6;
 $1=$this;
 $2=$context;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$flags$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$flags$1;
 $4=$size;
 $5=$host_ptr;
 $6=$err;
 var $7=$1;
 var $ld$2$0=(($3)|0);
 var $8$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $8$1=HEAP32[(($ld$3$1)>>2)];
 var $9=$4;
 var $10=$5;
 var $11=$6;
 var $12=$2;
 __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($7,$12,$8$0,$8$1,$9,$10,$11);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2,7784);
 var $3=$2;
 var $4=(($3+56)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 10343
// WARNING: content after a branch in a label, line: 10345

function __ZN27LorenzAttractorOpenCLSolver4stepEff($this,$time,$deltaTime){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $__a_i_i_i1_i_i_i;
 var $__i_i_i_i2_i_i_i;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $__a_i_i_i_i_i_i;
 var $__i_i_i_i_i_i_i;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39=sp;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $e;
 var $ss=(sp)+(16);
 var $67=(sp)+(160);
 $62=$this;
 $63=$time;
 $64=$deltaTime;
 var $68=$62;
 var $69=$63;
 var $70=$64;
 (function() { try { __THREW__ = 0; return __ZN27LorenzAttractorOpenCLSolver6__stepEff($68,$69,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 label=31;break;
 case 3: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1,12944); var $73$1 = tempRet0;
 var $74=$73$0;
 $65=$74;
 var $75=$73$1;
 $66=$75;
 label=4;break;
 case 4: 
 var $77=$66;
 var $78=_llvm_eh_typeid_for(12944);
 var $79=($77|0)==($78|0);
 if($79){label=5;break;}else{label=38;break;}
 case 5: 
 var $81=$65;
 var $82=___cxa_begin_catch($81);
 var $83=$82;
 $e=$83;
 $58=$ss;
 $59=24;
 var $84=$58;
 var $85=$84;
 var $86=(($85+64)|0);
 var $87=$86;
 $57=$87;
 var $88=$57;
 var $89=$88;
 $56=$89;
 var $90=$56;
 var $91=$90;
 HEAP32[(($91)>>2)]=5320;
 var $92=$88;
 HEAP32[(($92)>>2)]=4864;
 var $93=$84;
 HEAP32[(($93)>>2)]=6260;
 var $94=$84;
 var $95=(($94+64)|0);
 var $96=$95;
 HEAP32[(($96)>>2)]=6300;
 var $97=$84;
 var $98=(($97+8)|0);
 var $99=$98;
 HEAP32[(($99)>>2)]=6280;
 var $100=$84;
 var $101=(($84+12)|0);
 var $102=$101;
 $51=$100;
 $52=7804;
 $53=$102;
 var $103=$51;
 var $104=$52;
 var $105=$103;
 var $106=(($104+4)|0);
 var $107=$53;
 $48=$105;
 $49=$106;
 $50=$107;
 var $108=$48;
 var $109=$49;
 var $110=HEAP32[(($109)>>2)];
 var $111=$108;
 HEAP32[(($111)>>2)]=$110;
 var $112=(($109+4)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$108;
 var $115=HEAP32[(($114)>>2)];
 var $116=((($115)-(12))|0);
 var $117=$116;
 var $118=HEAP32[(($117)>>2)];
 var $119=$108;
 var $120=(($119+$118)|0);
 var $121=$120;
 HEAP32[(($121)>>2)]=$113;
 var $122=(($108+4)|0);
 HEAP32[(($122)>>2)]=0;
 var $123=$108;
 var $124=HEAP32[(($123)>>2)];
 var $125=((($124)-(12))|0);
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=$108;
 var $129=(($128+$127)|0);
 var $130=$129;
 var $131=$50;
 $46=$130;
 $47=$131;
 var $132=$46;
 var $133=$132;
 var $134=$47;
 var $135=$134;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($133,$135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 var $136=(($132+72)|0);
 HEAP32[(($136)>>2)]=0;
 var $137=(($132+76)|0);
 HEAP32[(($137)>>2)]=-1;
 var $138=$103;
 var $139=(($138+8)|0);
 var $140=$139;
 var $141=(($104+12)|0);
 $44=$140;
 $45=$141;
 var $142=$44;
 var $143=$45;
 var $144=HEAP32[(($143)>>2)];
 var $145=$142;
 HEAP32[(($145)>>2)]=$144;
 var $146=(($143+4)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=$142;
 var $149=HEAP32[(($148)>>2)];
 var $150=((($149)-(12))|0);
 var $151=$150;
 var $152=HEAP32[(($151)>>2)];
 var $153=$142;
 var $154=(($153+$152)|0);
 var $155=$154;
 HEAP32[(($155)>>2)]=$147;
 var $156=HEAP32[(($104)>>2)];
 var $157=$103;
 HEAP32[(($157)>>2)]=$156;
 var $158=(($104+20)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$103;
 var $161=HEAP32[(($160)>>2)];
 var $162=((($161)-(12))|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=$103;
 var $166=(($165+$164)|0);
 var $167=$166;
 HEAP32[(($167)>>2)]=$159;
 var $168=(($104+24)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$103;
 var $171=(($170+8)|0);
 var $172=$171;
 HEAP32[(($172)>>2)]=$169;
 var $173=$84;
 HEAP32[(($173)>>2)]=6260;
 var $174=$84;
 var $175=(($174+64)|0);
 var $176=$175;
 HEAP32[(($176)>>2)]=6300;
 var $177=$84;
 var $178=(($177+8)|0);
 var $179=$178;
 HEAP32[(($179)>>2)]=6280;
 var $180=(($84+12)|0);
 var $181=$59;
 $42=$180;
 $43=$181;
 var $182=$42;
 var $183=$43;
 $37=$182;
 $38=$183;
 var $184=$37;
 var $185=$184;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($185);
 var $186=$184;
 HEAP32[(($186)>>2)]=6440;
 var $187=(($184+32)|0);
 $36=$187;
 var $188=$36;
 $35=$188;
 var $189=$35;
 var $190=$189;
 var $191=(($189)|0);
 $34=$191;
 var $192=$34;
 $33=$192;
 var $193=$33;
 var $194=$193;
 $32=$194;
 var $195=$32;
 var $196=$195;
 $31=$196;
 var $197=$31;
 var $198=(($195)|0);
 $30=$189;
 var $199=$30;
 var $200=(($199)|0);
 $29=$200;
 var $201=$29;
 var $202=$201;
 $28=$202;
 var $203=$28;
 var $204=(($203)|0);
 var $205=(($204)|0);
 var $206=$205;
 var $207=(($206)|0);
 $__a_i_i_i_i_i_i=$207;
 $__i_i_i_i_i_i_i=0;
 label=7;break;
 case 7: 
 var $209=$__i_i_i_i_i_i_i;
 var $210=($209>>>0)<3;
 if($210){label=8;break;}else{label=9;break;}
 case 8: 
 var $212=$__i_i_i_i_i_i_i;
 var $213=$__a_i_i_i_i_i_i;
 var $214=(($213+($212<<2))|0);
 HEAP32[(($214)>>2)]=0;
 var $215=$__i_i_i_i_i_i_i;
 var $216=((($215)+(1))|0);
 $__i_i_i_i_i_i_i=$216;
 label=7;break;
 case 9: 
 var $217=(($184+44)|0);
 HEAP32[(($217)>>2)]=0;
 var $218=(($184+48)|0);
 var $219=$38;
 HEAP32[(($218)>>2)]=$219;
 $27=$39;
 var $220=$27;
 $26=$220;
 var $221=$26;
 var $222=$221;
 var $223=(($221)|0);
 $25=$223;
 var $224=$25;
 $24=$224;
 var $225=$24;
 var $226=$225;
 $23=$226;
 var $227=$23;
 var $228=$227;
 $22=$228;
 var $229=$22;
 var $230=(($227)|0);
 $21=$221;
 var $231=$21;
 var $232=(($231)|0);
 $20=$232;
 var $233=$20;
 var $234=$233;
 $19=$234;
 var $235=$19;
 var $236=(($235)|0);
 var $237=(($236)|0);
 var $238=$237;
 var $239=(($238)|0);
 $__a_i_i_i1_i_i_i=$239;
 $__i_i_i_i2_i_i_i=0;
 label=10;break;
 case 10: 
 var $241=$__i_i_i_i2_i_i_i;
 var $242=($241>>>0)<3;
 if($242){label=11;break;}else{label=12;break;}
 case 11: 
 var $244=$__i_i_i_i2_i_i_i;
 var $245=$__a_i_i_i1_i_i_i;
 var $246=(($245+($244<<2))|0);
 HEAP32[(($246)>>2)]=0;
 var $247=$__i_i_i_i2_i_i_i;
 var $248=((($247)+(1))|0);
 $__i_i_i_i2_i_i_i=$248;
 label=10;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($184,$39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=13;break; }
 case 13: 
 var $250$0 = ___cxa_find_matching_catch(-1, -1); var $250$1 = tempRet0;
 var $251=$250$0;
 $40=$251;
 var $252=$250$1;
 $41=$252;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($187);
 var $253=$184;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($253);
 var $254=$40;
 var $255=$41;
 var $256$0=$254;
 var $256$1=0;
 var $257$0=$256$0;
 var $257$1=$255;
 var $258=$257$0;
 $60=$258;
 var $259=$257$1;
 $61=$259;
 var $260=$84;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($260,7804);
 label=15;break;
 case 14: 
 var $262$0 = ___cxa_find_matching_catch(-1, -1); var $262$1 = tempRet0;
 var $263=$262$0;
 $60=$263;
 var $264=$262$1;
 $61=$264;
 label=15;break;
 case 15: 
 var $266=$84;
 var $267=(($266+64)|0);
 var $268=$267;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($268);
 var $269=$60;
 var $270=$61;
 var $271$0=$269;
 var $271$1=0;
 var $272$0=$271$0;
 var $272$1=$270;
 var $eh_lpad_body$1=$272$1;var $eh_lpad_body$0=$272$0;label=32;break;
 case 16: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
 label=17;break;
 case 17: 
 var $274=$ss;
 var $275=(($274+8)|0);
 var $276=$275;
 var $277=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($276,360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=33;break; }
 case 18: 
 var $279=$e;
 var $280=$279;
 var $281=HEAP32[(($280)>>2)];
 var $282=(($281+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=FUNCTION_TABLE[$283]($279);
 var $285=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($277,$284) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=33;break; }
 case 19: 
 var $287=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($285,2792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=33;break; }
 case 20: 
 var $289=$e;
 var $290=(function() { try { __THREW__ = 0; return __ZNK2cl5Error3errEv($289) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=33;break; }
 case 21: 
 var $292=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($287,$290) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=33;break; }
 case 22: 
 $17=$292;
 $18=8;
 var $294=$17;
 var $295=$18;
 var $296=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($294) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=33;break; }
 case 23: 
 label=24;break;
 case 24: 
 $16=$ss;
 var $298=$16;
 var $299=(($298+12)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($67,$299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=33;break; }
 case 25: 
 label=26;break;
 case 26: 
 $15=$67;
 var $301=$15;
 $14=$301;
 var $302=$14;
 $13=$302;
 var $303=$13;
 $12=$303;
 var $304=$12;
 var $305=(($304)|0);
 $11=$305;
 var $306=$11;
 var $307=$306;
 $10=$307;
 var $308=$10;
 var $309=(($308)|0);
 var $310=(($309)|0);
 var $311=$310;
 var $312=(($311)|0);
 var $313=$312;
 var $314=HEAP8[($313)];
 var $315=($314&255);
 var $316=$315&1;
 var $317=($316|0)!=0;
 if($317){label=27;break;}else{label=28;break;}
 case 27: 
 $4=$303;
 var $319=$4;
 var $320=(($319)|0);
 $3=$320;
 var $321=$3;
 var $322=$321;
 $2=$322;
 var $323=$2;
 var $324=(($323)|0);
 var $325=(($324)|0);
 var $326=$325;
 var $327=(($326+8)|0);
 var $328=HEAP32[(($327)>>2)];
 var $342=$328;label=29;break;
 case 28: 
 $9=$303;
 var $330=$9;
 var $331=(($330)|0);
 $8=$331;
 var $332=$8;
 var $333=$332;
 $7=$333;
 var $334=$7;
 var $335=(($334)|0);
 var $336=(($335)|0);
 var $337=$336;
 var $338=(($337+1)|0);
 var $339=(($338)|0);
 $6=$339;
 var $340=$6;
 $5=$340;
 var $341=$5;
 var $342=$341;label=29;break;
 case 29: 
 var $342;
 $1=$342;
 var $343=$1;
 (function() { try { __THREW__ = 0; return __ZN5error8throw_exEPKcS1_i($343,2320,172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=34;break; }
 case 30: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($67);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 ___cxa_end_catch();
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
 case 32: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $348=$eh_lpad_body$0;
 $65=$348;
 var $349=$eh_lpad_body$1;
 $66=$349;
 label=36;break;
 case 33: 
 var $351$0 = ___cxa_find_matching_catch(-1, -1); var $351$1 = tempRet0;
 var $352=$351$0;
 $65=$352;
 var $353=$351$1;
 $66=$353;
 label=35;break;
 case 34: 
 var $355$0 = ___cxa_find_matching_catch(-1, -1); var $355$1 = tempRet0;
 var $356=$355$0;
 $65=$356;
 var $357=$355$1;
 $66=$357;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($67);
 label=35;break;
 case 35: 
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=39;break; }
 case 37: 
 label=38;break;
 case 38: 
 var $362=$65;
 var $363=$66;
 var $364$0=$362;
 var $364$1=0;
 var $365$0=$364$0;
 var $365$1=$363;
 ___resumeException($365$0)
 case 39: 
 var $367$0 = ___cxa_find_matching_catch(-1, -1,0); var $367$1 = tempRet0;
 var $368=$367$0;
 ___clang_call_terminate($368);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZN27LorenzAttractorOpenCLSolver6__stepEff($this,$time,$deltaTime){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $nParticles;
 var $40=sp;
 var $41;
 var $42;
 var $baseColor=(sp)+(16);
 var $par=(sp)+(32);
 var $bInterop;
 var $43=(sp)+(48);
 var $rayOrigin=(sp)+(64);
 var $rayDir=(sp)+(80);
 var $44=(sp)+(96);
 var $45=(sp)+(104);
 var $46=(sp)+(112);
 var $47=(sp)+(120);
 var $48=(sp)+(144);
 var $49=(sp)+(160);
 $37=$this;
 $38=$time;
 $39=$deltaTime;
 var $50=$37;
 var $51=__ZN6global3parEv();
 $35=$40;
 $36=3888;
 var $52=$35;
 var $53=$36;
 $33=$52;
 $34=$53;
 var $54=$33;
 var $55=$54;
 var $56=(($54)|0);
 $32=$56;
 var $57=$32;
 $31=$57;
 var $58=$31;
 var $59=$58;
 $30=$59;
 var $60=$30;
 var $61=$60;
 $29=$61;
 var $62=$29;
 var $63=(($60)|0);
 var $64=$34;
 var $65=$34;
 $28=$65;
 var $66=$28;
 var $67=_strlen($66);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($54,$64,$67);
 var $68=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($51,$40,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($40);
 $nParticles=$68;
 var $70=(($baseColor)|0);
 var $71=$38;
 var $72=($71)*((0.10999999940395355));
 var $73=Math_sin($72);
 var $74=((0.20000000298023224))*($73);
 var $75=((0.5))+($74);
 HEAPF32[(($70)>>2)]=$75;
 var $76=(($70+4)|0);
 var $77=$38;
 var $78=($77)*((0.14000000059604645));
 var $79=Math_sin($78);
 var $80=((0.20000000298023224))*($79);
 var $81=((0.5))+($80);
 HEAPF32[(($76)>>2)]=$81;
 var $82=(($76+4)|0);
 var $83=$38;
 var $84=($83)*((0.1899999976158142));
 var $85=Math_cos($84);
 var $86=((0.20000000298023224))*($85);
 var $87=((0.5))+($86);
 HEAPF32[(($82)>>2)]=$87;
 var $88=(($82+4)|0);
 var $89=$nParticles;
 var $90=(((($89|0))/(1000000))&-1);
 var $91=($90|0);
 var $92=($91)+(1);
 var $93=((0.5))/($92);
 HEAPF32[(($88)>>2)]=$93;
 var $94=(($par)|0);
 var $95=$38;
 var $96=($95)*((0.10000000149011612));
 var $97=Math_sin($96);
 var $98=($97)*(10);
 var $99=$38;
 var $100=($99)*((0.27000001072883606));
 var $101=Math_cos($100);
 var $102=($98)*($101);
 var $103=($102)+(15);
 HEAPF32[(($94)>>2)]=$103;
 var $104=(($94+4)|0);
 var $105=$38;
 var $106=($105)*((0.12999999523162842));
 var $107=Math_sin($106);
 var $108=($107)*(2);
 var $109=$38;
 var $110=($109)*((0.23000000417232513));
 var $111=Math_cos($110);
 var $112=($108)*($111);
 var $113=((2.6666667461395264))+($112);
 HEAPF32[(($104)>>2)]=$113;
 var $114=(($104+4)|0);
 var $115=$38;
 var $116=($115)*((0.17000000178813934));
 var $117=Math_sin($116);
 var $118=($117)*(5);
 var $119=$38;
 var $120=($119)*((0.10999999940395355));
 var $121=Math_cos($120);
 var $122=($118)*($121);
 var $123=($122)+(28);
 HEAPF32[(($114)>>2)]=$123;
 var $124=(($114+4)|0);
 HEAPF32[(($124)>>2)]=0.05000000074505806;
 var $125=__ZN6global3parEv();
 $26=$43;
 $27=3496;
 var $126=$26;
 var $127=$27;
 $24=$126;
 $25=$127;
 var $128=$24;
 var $129=$128;
 var $130=(($128)|0);
 $23=$130;
 var $131=$23;
 $22=$131;
 var $132=$22;
 var $133=$132;
 $21=$133;
 var $134=$21;
 var $135=$134;
 $20=$135;
 var $136=$20;
 var $137=(($134)|0);
 var $138=$25;
 var $139=$25;
 $19=$139;
 var $140=$19;
 var $141=_strlen($140);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($128,$138,$141);
 var $142=(function() { try { __THREW__ = 0; return __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($125,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43);
 var $144=($142&1);
 $bInterop=$144;
 var $145=$bInterop;
 var $146=(($145)&1);
 if($146){label=4;break;}else{label=7;break;}
 case 4: 
 var $148=(($50+16)|0);
 var $149=(($50+32)|0);
 var $150=__ZNK2cl12CommandQueue23enqueueAcquireGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($148,$149,0,0);
 label=7;break;
 case 5: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 $41=$153;
 var $154=$152$1;
 $42=$154;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($40);
 label=26;break;
 case 6: 
 var $156$0 = ___cxa_find_matching_catch(-1, -1); var $156$1 = tempRet0;
 var $157=$156$0;
 $41=$157;
 var $158=$156$1;
 $42=$158;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43);
 label=26;break;
 case 7: 
 var $160=__ZN11Application3getEv();
 var $161=(($rayOrigin)|0);
 var $162=(($rayDir)|0);
 __ZNK11Application12getCursorRayEPfS0_($160,$161,$162);
 var $163=(($50+12)|0);
 var $164=(($50+20)|0);
 __ZN2cl6BufferC1ERKS0_($44,$164);
 var $165=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($163,0,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=13;break; }
 case 8: 
 __ZN2cl6BufferD1Ev($44);
 var $167=(($50+12)|0);
 var $168=(($50+24)|0);
 __ZN2cl6BufferC1ERKS0_($45,$168);
 var $169=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($167,1,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=14;break; }
 case 9: 
 __ZN2cl6BufferD1Ev($45);
 var $171=(($50+12)|0);
 var $172=(($50+28)|0);
 __ZN2cl6BufferC1ERKS0_($46,$172);
 var $173=(function() { try { __THREW__ = 0; return __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($171,2,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=15;break; }
 case 10: 
 __ZN2cl6BufferD1Ev($46);
 var $175=(($50+12)|0);
 var $176=(($baseColor)|0);
 var $177=$176;
 var $178=__ZN2cl6Kernel6setArgEjjPv($175,3,16,$177);
 var $179=(($50+12)|0);
 var $180=(($par)|0);
 var $181=$180;
 var $182=__ZN2cl6Kernel6setArgEjjPv($179,4,16,$181);
 var $183=(($50+12)|0);
 var $184=(($rayOrigin)|0);
 var $185=$184;
 var $186=__ZN2cl6Kernel6setArgEjjPv($183,5,16,$185);
 var $187=(($50+12)|0);
 var $188=(($rayDir)|0);
 var $189=$188;
 var $190=__ZN2cl6Kernel6setArgEjjPv($187,6,16,$189);
 var $191=(($50+12)|0);
 var $192=$38;
 var $193=__ZN2cl6Kernel6setArgIfEEijT_($191,7,$192);
 var $194=(($50+12)|0);
 var $195=$39;
 var $196=__ZN2cl6Kernel6setArgIfEEijT_($194,8,$195);
 var $197=(($50+16)|0);
 var $198=(($50+12)|0);
 var $199=$nParticles;
 __ZN2cl7NDRangeC1Ej($47,$199);
 var $200=(function() { try { __THREW__ = 0; return __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNSt3__16vectorINS_5EventENS7_9allocatorIS9_EEEEPS9_($197,$198,17952,$47,17952,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=16;break; }
 case 11: 
 __ZN2cl7NDRangeD1Ev($47);
 var $202=$bInterop;
 var $203=(($202)&1);
 if($203){label=12;break;}else{label=17;break;}
 case 12: 
 var $205=(($50+16)|0);
 var $206=(($50+32)|0);
 var $207=__ZNK2cl12CommandQueue23enqueueReleaseGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($205,$206,0,0);
 label=17;break;
 case 13: 
 var $209$0 = ___cxa_find_matching_catch(-1, -1); var $209$1 = tempRet0;
 var $210=$209$0;
 $41=$210;
 var $211=$209$1;
 $42=$211;
 __ZN2cl6BufferD1Ev($44);
 label=26;break;
 case 14: 
 var $213$0 = ___cxa_find_matching_catch(-1, -1); var $213$1 = tempRet0;
 var $214=$213$0;
 $41=$214;
 var $215=$213$1;
 $42=$215;
 __ZN2cl6BufferD1Ev($45);
 label=26;break;
 case 15: 
 var $217$0 = ___cxa_find_matching_catch(-1, -1); var $217$1 = tempRet0;
 var $218=$217$0;
 $41=$218;
 var $219=$217$1;
 $42=$219;
 __ZN2cl6BufferD1Ev($46);
 label=26;break;
 case 16: 
 var $221$0 = ___cxa_find_matching_catch(-1, -1); var $221$1 = tempRet0;
 var $222=$221$0;
 $41=$222;
 var $223=$221$1;
 $42=$223;
 __ZN2cl7NDRangeD1Ev($47);
 label=26;break;
 case 17: 
 var $225=(($50+16)|0);
 var $226=__ZNK2cl12CommandQueue6finishEv($225);
 var $227=$bInterop;
 var $228=(($227)&1);
 if($228){label=25;break;}else{label=18;break;}
 case 18: 
 var $230=(($50+16)|0);
 var $231=(($50+20)|0);
 var $232=$nParticles;
 var $233=($232<<2);
 var $234=($233<<2);
 var $235=__ZN6global3parEv();
 $17=$48;
 $18=3048;
 var $236=$17;
 var $237=$18;
 $15=$236;
 $16=$237;
 var $238=$15;
 var $239=$238;
 var $240=(($238)|0);
 $14=$240;
 var $241=$14;
 $13=$241;
 var $242=$13;
 var $243=$242;
 $12=$243;
 var $244=$12;
 var $245=$244;
 $11=$245;
 var $246=$11;
 var $247=(($244)|0);
 var $248=$16;
 var $249=$16;
 $10=$249;
 var $250=$10;
 var $251=_strlen($250);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($238,$248,$251);
 var $252=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($235,$48,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=23;break; }
 case 19: 
 var $254=(function() { try { __THREW__ = 0; return __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_($230,$231,1,0,$234,$252,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=23;break; }
 case 20: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($48);
 var $256=(($50+16)|0);
 var $257=(($50+24)|0);
 var $258=$nParticles;
 var $259=($258<<2);
 var $260=($259<<2);
 var $261=__ZN6global3parEv();
 $8=$49;
 $9=3016;
 var $262=$8;
 var $263=$9;
 $6=$262;
 $7=$263;
 var $264=$6;
 var $265=$264;
 var $266=(($264)|0);
 $5=$266;
 var $267=$5;
 $4=$267;
 var $268=$4;
 var $269=$268;
 $3=$269;
 var $270=$3;
 var $271=$270;
 $2=$271;
 var $272=$2;
 var $273=(($270)|0);
 var $274=$7;
 var $275=$7;
 $1=$275;
 var $276=$1;
 var $277=_strlen($276);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($264,$274,$277);
 var $278=(function() { try { __THREW__ = 0; return __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($261,$49,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=24;break; }
 case 21: 
 var $280=(function() { try { __THREW__ = 0; return __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_($256,$257,1,0,$260,$278,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=24;break; }
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($49);
 label=25;break;
 case 23: 
 var $283$0 = ___cxa_find_matching_catch(-1, -1); var $283$1 = tempRet0;
 var $284=$283$0;
 $41=$284;
 var $285=$283$1;
 $42=$285;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($48);
 label=26;break;
 case 24: 
 var $287$0 = ___cxa_find_matching_catch(-1, -1); var $287$1 = tempRet0;
 var $288=$287$0;
 $41=$288;
 var $289=$287$1;
 $42=$289;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($49);
 label=26;break;
 case 25: 
 STACKTOP=sp;return;
 case 26: 
 var $292=$41;
 var $293=$42;
 var $294$0=$292;
 var $294$1=0;
 var $295$0=$294$0;
 var $295$1=$293;
 ___resumeException($295$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl12CommandQueue23enqueueAcquireGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($this,$mem_objects,$events,$event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 $6=$this;
 $7=$mem_objects;
 $8=$events;
 $9=$event;
 var $10=$6;
 var $11=$10;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$7;
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$7;
 $5=$17;
 var $18=$5;
 var $19=$18;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$18;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$21;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=(((($27|0))/(4))&-1);
 var $31=$28;label=4;break;
 case 3: 
 var $31=0;label=4;break;
 case 4: 
 var $31;
 var $32=$7;
 var $33=($32|0)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=$7;
 $4=$35;
 var $36=$4;
 var $37=$36;
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$39;
 var $43=$40;label=7;break;
 case 6: 
 var $43=0;label=7;break;
 case 7: 
 var $43;
 var $44=$8;
 var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 var $47=$8;
 $1=$47;
 var $48=$1;
 var $49=$48;
 var $50=(($49+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$48;
 var $53=(($52)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$51;
 var $56=$54;
 var $57=((($55)-($56))|0);
 var $58=(((($57|0))/(4))&-1);
 var $61=$58;label=10;break;
 case 9: 
 var $61=0;label=10;break;
 case 10: 
 var $61;
 var $62=$8;
 var $63=($62|0)!=0;
 if($63){label=11;break;}else{label=13;break;}
 case 11: 
 var $65=$8;
 $2=$65;
 var $66=$2;
 var $67=$66;
 var $68=(($67+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$66;
 var $71=(($70)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$69;
 var $74=$72;
 var $75=((($73)-($74))|0);
 var $76=(((($75|0))/(4))&-1);
 var $77=($76>>>0)>0;
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 var $79=$8;
 $3=$79;
 var $80=$3;
 var $81=$80;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$83;
 var $87=$84;label=14;break;
 case 13: 
 var $87=0;label=14;break;
 case 14: 
 var $87;
 var $88=$9;
 var $89=$88;
 var $90=_clEnqueueAcquireGLObjects($13,$31,$43,$61,$87,$89);
 var $91=__ZN2cl6detailL10errHandlerEiPKc($90,1696);
 STACKTOP=sp;return $91;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($this,$index,$value){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$index;
 var $3=$1;
 var $4=$3;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($value);
 var $9=__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value);
 var $10=$9;
 var $11=_clSetKernelArg($6,$7,$8,$10);
 var $12=__ZN2cl6detailL10errHandlerEiPKc($11,2872);
 STACKTOP=sp;return $12;
}


function __ZN2cl6BufferC1ERKS0_($this,$buffer){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$buffer;
 var $3=$1;
 var $4=$2;
 __ZN2cl6BufferC2ERKS0_($3,$4);
 STACKTOP=sp;return;
}


function __ZN2cl6Kernel6setArgEjjPv($this,$index,$size,$argPtr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$index;
 $3=$size;
 $4=$argPtr;
 var $5=$1;
 var $6=$5;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$2;
 var $10=$3;
 var $11=$4;
 var $12=_clSetKernelArg($8,$9,$10,$11);
 var $13=__ZN2cl6detailL10errHandlerEiPKc($12,2872);
 STACKTOP=sp;return $13;
}


function __ZN2cl6Kernel6setArgIfEEijT_($this,$index,$value){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 $1=$this;
 $2=$index;
 HEAPF32[(($3)>>2)]=$value;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=__ZN2cl6detail21KernelArgumentHandlerIfE4sizeERKf($3);
 var $10=__ZN2cl6detail21KernelArgumentHandlerIfE3ptrERf($3);
 var $11=$10;
 var $12=_clSetKernelArg($7,$8,$9,$11);
 var $13=__ZN2cl6detailL10errHandlerEiPKc($12,2872);
 STACKTOP=sp;return $13;
}


function __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNSt3__16vectorINS_5EventENS7_9allocatorIS9_EEEEPS9_($this,$kernel,$offset,$global,$local,$events,$event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 $4=$this;
 $5=$kernel;
 $6=$offset;
 $7=$global;
 $8=$local;
 $9=$events;
 $10=$event;
 var $11=$4;
 var $12=$11;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$5;
 var $16=$15;
 var $17=__ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($16);
 var $18=$7;
 var $19=__ZNK2cl7NDRange10dimensionsEv($18);
 var $20=$6;
 var $21=__ZNK2cl7NDRange10dimensionsEv($20);
 var $22=($21|0)!=0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$6;
 var $25=__ZNK2cl7NDRangecvPKjEv($24);
 var $28=$25;label=4;break;
 case 3: 
 var $28=0;label=4;break;
 case 4: 
 var $28;
 var $29=$7;
 var $30=__ZNK2cl7NDRangecvPKjEv($29);
 var $31=$8;
 var $32=__ZNK2cl7NDRange10dimensionsEv($31);
 var $33=($32|0)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=$8;
 var $36=__ZNK2cl7NDRangecvPKjEv($35);
 var $39=$36;label=7;break;
 case 6: 
 var $39=0;label=7;break;
 case 7: 
 var $39;
 var $40=$9;
 var $41=($40|0)!=0;
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 var $43=$9;
 $3=$43;
 var $44=$3;
 var $45=$44;
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$44;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$47;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=(((($53|0))/(4))&-1);
 var $57=$54;label=10;break;
 case 9: 
 var $57=0;label=10;break;
 case 10: 
 var $57;
 var $58=$9;
 var $59=($58|0)!=0;
 if($59){label=11;break;}else{label=13;break;}
 case 11: 
 var $61=$9;
 $2=$61;
 var $62=$2;
 var $63=$62;
 var $64=(($63+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$62;
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$65;
 var $70=$68;
 var $71=((($69)-($70))|0);
 var $72=(((($71|0))/(4))&-1);
 var $73=($72>>>0)>0;
 if($73){label=12;break;}else{label=13;break;}
 case 12: 
 var $75=$9;
 $1=$75;
 var $76=$1;
 var $77=$76;
 var $78=(($77)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$79;
 var $83=$80;label=14;break;
 case 13: 
 var $83=0;label=14;break;
 case 14: 
 var $83;
 var $84=$10;
 var $85=$84;
 var $86=_clEnqueueNDRangeKernel($14,$17,$19,$28,$30,$39,$57,$83,$85);
 var $87=__ZN2cl6detailL10errHandlerEiPKc($86,1792);
 STACKTOP=sp;return $87;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl7NDRangeC1Ej($this,$size0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$size0;
 var $3=$1;
 var $4=$2;
 __ZN2cl7NDRangeC2Ej($3,$4);
 STACKTOP=sp;return;
}


function __ZNK2cl12CommandQueue23enqueueReleaseGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($this,$mem_objects,$events,$event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 $6=$this;
 $7=$mem_objects;
 $8=$events;
 $9=$event;
 var $10=$6;
 var $11=$10;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$7;
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$7;
 $5=$17;
 var $18=$5;
 var $19=$18;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$18;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$21;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=(((($27|0))/(4))&-1);
 var $31=$28;label=4;break;
 case 3: 
 var $31=0;label=4;break;
 case 4: 
 var $31;
 var $32=$7;
 var $33=($32|0)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=$7;
 $4=$35;
 var $36=$4;
 var $37=$36;
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$39;
 var $43=$40;label=7;break;
 case 6: 
 var $43=0;label=7;break;
 case 7: 
 var $43;
 var $44=$8;
 var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 var $47=$8;
 $1=$47;
 var $48=$1;
 var $49=$48;
 var $50=(($49+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$48;
 var $53=(($52)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$51;
 var $56=$54;
 var $57=((($55)-($56))|0);
 var $58=(((($57|0))/(4))&-1);
 var $61=$58;label=10;break;
 case 9: 
 var $61=0;label=10;break;
 case 10: 
 var $61;
 var $62=$8;
 var $63=($62|0)!=0;
 if($63){label=11;break;}else{label=13;break;}
 case 11: 
 var $65=$8;
 $2=$65;
 var $66=$2;
 var $67=$66;
 var $68=(($67+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$66;
 var $71=(($70)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$69;
 var $74=$72;
 var $75=((($73)-($74))|0);
 var $76=(((($75|0))/(4))&-1);
 var $77=($76>>>0)>0;
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 var $79=$8;
 $3=$79;
 var $80=$3;
 var $81=$80;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$83;
 var $87=$84;label=14;break;
 case 13: 
 var $87=0;label=14;break;
 case 14: 
 var $87;
 var $88=$9;
 var $89=$88;
 var $90=_clEnqueueReleaseGLObjects($13,$31,$43,$61,$87,$89);
 var $91=__ZN2cl6detailL10errHandlerEiPKc($90,1864);
 STACKTOP=sp;return $91;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl12CommandQueue6finishEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_clFinish($5);
 var $7=__ZN2cl6detailL10errHandlerEiPKc($6,1944);
 STACKTOP=sp;return $7;
}

// WARNING: content after a branch in a label, line: 12256
// WARNING: content after a branch in a label, line: 12258
// WARNING: content after a branch in a label, line: 12259
// WARNING: content after a branch in a label, line: 12260

function __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $4=$this;
 $5=$buffer;
 $6=$blocking;
 $7=$offset;
 $8=$size;
 $9=$ptr;
 $10=$events;
 $11=$event;
 var $12=$4;
 var $13=$12;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$5;
 var $17=$16;
 var $18=__ZNK2cl6detail7WrapperIP7_cl_memEclEv($17);
 var $19=$6;
 var $20=$7;
 var $21=$8;
 var $22=$9;
 var $23=$10;
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=$10;
 $3=$26;
 var $27=$3;
 var $28=$27;
 var $29=(($28+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$27;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$30;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=(((($36|0))/(4))&-1);
 var $40=$37;label=4;break;
 case 3: 
 var $40=0;label=4;break;
 case 4: 
 var $40;
 var $41=$10;
 var $42=($41|0)!=0;
 if($42){label=5;break;}else{label=7;break;}
 case 5: 
 var $44=$10;
 $2=$44;
 var $45=$2;
 var $46=$45;
 var $47=(($46+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$45;
 var $50=(($49)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$48;
 var $53=$51;
 var $54=((($52)-($53))|0);
 var $55=(((($54|0))/(4))&-1);
 var $56=($55>>>0)>0;
 if($56){label=6;break;}else{label=7;break;}
 case 6: 
 var $58=$10;
 $1=$58;
 var $59=$1;
 var $60=$59;
 var $61=(($60)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$62;
 var $66=$63;label=8;break;
 case 7: 
 var $66=0;label=8;break;
 case 8: 
 var $66;
 var $67=$11;
 var $68=$67;
 var $69=_clEnqueueReadBuffer($15,$18,$19,$20,$21,$22,$40,$66,$68);
 var $70=__ZN2cl6detailL10errHandlerEiPKc($69,2064);
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detailL10errHandlerEiPKc($err,$errStr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$err;
 $2=$errStr;
 var $5=$1;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=8;break;}
 case 2: 
 var $8=___cxa_allocate_exception(12);
 var $9=$8;
 var $10=$1;
 var $11=$2;
 (function() { try { __THREW__ = 0; return __ZN2cl5ErrorC1EiPKc($9,$10,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($8,12944,(410)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=5;break; }
 case 4: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=$14$0;
 $3=$15;
 var $16=$14$1;
 $4=$16;
 ___cxa_free_exception($8);
 label=6;break;
 case 5: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 $3=$19;
 var $20=$18$1;
 $4=$20;
 label=6;break;
 case 6: 
 var $22=$4;
 var $23=($22|0)<0;
 if($23){label=7;break;}else{label=9;break;}
 case 7: 
 var $25=$3;
 ___cxa_call_unexpected($25);
 throw "Reached an unreachable!";
 case 8: 
 var $27=$1;
 STACKTOP=sp;return $27;
 case 9: 
 var $29=$3;
 var $30=$4;
 var $31$0=$29;
 var $31$1=0;
 var $32$0=$31$0;
 var $32$1=$30;
 ___resumeException($32$0)
 case 10: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail21KernelArgumentHandlerIfE4sizeERKf($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 $2=$0;
 STACKTOP=sp;return 4;
}


function __ZN2cl6detail21KernelArgumentHandlerIfE3ptrERf($value){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$value;
 var $2=$1;
 STACKTOP=sp;return $2;
}


function __ZN2cl5ErrorC1EiPKc($this,$err,$errStr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$err;
 $3=$errStr;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZN2cl5ErrorC2EiPKc($4,$5,$6);
 STACKTOP=sp;return;
}


function __ZN2cl5ErrorC2EiPKc($this,$err,$errStr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $2=$this;
 $3=$err;
 $4=$errStr;
 var $5=$2;
 var $6=$5;
 $1=$6;
 var $7=$1;
 var $8=$7;
 HEAP32[(($8)>>2)]=((__ZTVSt9exception+8)|0);
 var $9=$5;
 HEAP32[(($9)>>2)]=7544;
 var $10=(($5+4)|0);
 var $11=$3;
 HEAP32[(($10)>>2)]=$11;
 var $12=(($5+8)|0);
 var $13=$4;
 HEAP32[(($12)>>2)]=$13;
 STACKTOP=sp;return;
}


function __ZN2cl5ErrorD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl5ErrorD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZNK2cl5Error4whatEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=2808;
 label=4;break;
 case 3: 
 var $9=(($3+8)|0);
 var $10=HEAP32[(($9)>>2)];
 $1=$10;
 label=4;break;
 case 4: 
 var $12=$1;
 STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 $2=$0;
 STACKTOP=sp;return 4;
}


function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$value;
 var $2=$1;
 STACKTOP=sp;return $2;
}


function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14=(sp)+(8);
 var $15=(sp)+(16);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24=(sp)+(24);
 var $25;
 var $26;
 var $27=(sp)+(32);
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35=(sp)+(40);
 var $__ms_i;
 var $__cap_i;
 var $36=(sp)+(48);
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $__a;
 var $__v=(sp)+(56);
 var $43;
 var $44;
 $41=$this;
 $42=$__x;
 var $45=$41;
 var $46=$45;
 $40=$46;
 var $47=$40;
 var $48=(($47+8)|0);
 $39=$48;
 var $49=$39;
 var $50=$49;
 $38=$50;
 var $51=$38;
 var $52=$51;
 $__a=$52;
 $37=$45;
 var $53=$37;
 var $54=$53;
 var $55=(($54+4)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$53;
 var $58=(($57)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$56;
 var $61=$59;
 var $62=((($60)-($61))|0);
 var $63=(((($62|0))/(4))&-1);
 var $64=((($63)+(1))|0);
 $34=$45;
 HEAP32[(($35)>>2)]=$64;
 var $65=$34;
 var $66=__ZNKSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE8max_sizeEv($65);
 $__ms_i=$66;
 var $67=HEAP32[(($35)>>2)];
 var $68=$__ms_i;
 var $69=($67>>>0)>($68>>>0);
 if($69){label=2;break;}else{label=3;break;}
 case 2: 
 var $71=$65;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($71);
 label=3;break;
 case 3: 
 $32=$65;
 var $73=$32;
 var $74=$73;
 $31=$74;
 var $75=$31;
 $30=$75;
 var $76=$30;
 var $77=(($76+8)|0);
 $29=$77;
 var $78=$29;
 var $79=$78;
 $28=$79;
 var $80=$28;
 var $81=(($80)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($75)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$82;
 var $86=$84;
 var $87=((($85)-($86))|0);
 var $88=(((($87|0))/(4))&-1);
 $__cap_i=$88;
 var $89=$__cap_i;
 var $90=$__ms_i;
 var $91=(((($90>>>0))/(2))&-1);
 var $92=($89>>>0)>=($91>>>0);
 if($92){label=4;break;}else{label=5;break;}
 case 4: 
 var $94=$__ms_i;
 $33=$94;
 label=9;break;
 case 5: 
 var $96=$__cap_i;
 var $97=($96<<1);
 HEAP32[(($36)>>2)]=$97;
 $25=$36;
 $26=$35;
 var $98=$25;
 var $99=$26;
 var $tmp_i_i=$24;
 var $tmp1_i_i=$27;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $22=$98;
 $23=$99;
 var $100=$22;
 var $101=$23;
 $19=$24;
 $20=$100;
 $21=$101;
 var $102=$19;
 var $103=$20;
 var $104=HEAP32[(($103)>>2)];
 var $105=$21;
 var $106=HEAP32[(($105)>>2)];
 var $107=($104>>>0)<($106>>>0);
 if($107){label=6;break;}else{label=7;break;}
 case 6: 
 var $109=$23;
 var $112=$109;label=8;break;
 case 7: 
 var $111=$22;
 var $112=$111;label=8;break;
 case 8: 
 var $112;
 var $113=HEAP32[(($112)>>2)];
 $33=$113;
 label=9;break;
 case 9: 
 var $114=$33;
 $18=$45;
 var $115=$18;
 var $116=$115;
 var $117=(($116+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$115;
 var $120=(($119)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$118;
 var $123=$121;
 var $124=((($122)-($123))|0);
 var $125=(((($124|0))/(4))&-1);
 var $126=$__a;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($__v,$114,$125,$126);
 var $127=$__a;
 var $128=(($__v+8)|0);
 var $129=HEAP32[(($128)>>2)];
 $17=$129;
 var $130=$17;
 var $131=$42;
 $16=$131;
 var $132=$16;
 $11=$127;
 $12=$130;
 $13=$132;
 var $133=$15;
 var $134=$11;
 var $135=$12;
 var $136=$13;
 $10=$136;
 var $137=$10;
 var $tmp_i=$9;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $6=$134;
 $7=$135;
 $8=$137;
 var $138=$6;
 var $139=$7;
 var $140=$8;
 $5=$140;
 var $141=$5;
 $2=$138;
 $3=$139;
 $4=$141;
 var $142=$2;
 var $143=$3;
 var $144=$143;
 var $145=($144|0)==0;
 if($145){var $150=0;label=12;break;}else{label=10;break;}
 case 10: 
 var $147=$144;
 var $148=$4;
 $1=$148;
 var $149=$1;
 (function() { try { __THREW__ = 0; return __ZN2cl6MemoryC1ERKS0_($147,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $150=$147;label=12;break;
 case 12: 
 var $150;
 label=13;break;
 case 13: 
 var $152=(($__v+8)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+4)|0);
 HEAP32[(($152)>>2)]=$154;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($45,$__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP=sp;return;
 case 15: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1); var $157$1 = tempRet0;
 var $158=$157$0;
 $43=$158;
 var $159=$157$1;
 $44=$159;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
 label=16;break;
 case 16: 
 var $161=$43;
 var $162=$44;
 var $163$0=$161;
 var $163$1=0;
 var $164$0=$163$0;
 var $164$1=$162;
 ___resumeException($164$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$__cap;
 $3=$__start;
 $4=$__a;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC2EjjS5_($5,$6,$7,$8);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11=sp;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16=(sp)+(8);
 var $17=(sp)+(16);
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $__t_i2=(sp)+(24);
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $__t_i1=(sp)+(32);
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $__t_i=(sp)+(40);
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 $48=$this;
 $49=$__v;
 var $50=$48;
 var $51=$50;
 $47=$51;
 var $52=$47;
 var $53=(($52+8)|0);
 $46=$53;
 var $54=$46;
 var $55=$54;
 $45=$55;
 var $56=$45;
 var $57=$56;
 var $58=$50;
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$50;
 var $62=(($61+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$49;
 var $65=(($64+4)|0);
 $19=$57;
 $20=$60;
 $21=$63;
 $22=$65;
 label=2;break;
 case 2: 
 var $67=$21;
 var $68=$20;
 var $69=($67|0)!=($68|0);
 if($69){label=3;break;}else{label=6;break;}
 case 3: 
 var $71=$19;
 var $72=$22;
 var $73=HEAP32[(($72)>>2)];
 var $74=((($73)-(4))|0);
 $18=$74;
 var $75=$18;
 var $76=$21;
 var $77=((($76)-(4))|0);
 $21=$77;
 $2=$77;
 var $78=$2;
 $1=$78;
 var $79=$1;
 $13=$71;
 $14=$75;
 $15=$79;
 var $80=$17;
 var $81=$13;
 var $82=$14;
 var $83=$15;
 $12=$83;
 var $84=$12;
 var $tmp_i_i=$11;
 var $tmp1_i_i=$16;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $8=$81;
 $9=$82;
 $10=$84;
 var $85=$8;
 var $86=$9;
 var $87=$10;
 $7=$87;
 var $88=$7;
 $4=$85;
 $5=$86;
 $6=$88;
 var $89=$4;
 var $90=$5;
 var $91=$90;
 var $92=($91|0)==0;
 if($92){var $97=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $94=$91;
 var $95=$6;
 $3=$95;
 var $96=$3;
 __ZN2cl6MemoryC1ERKS0_($94,$96);
 var $97=$94;label=5;break;
 case 5: 
 var $97;
 var $98=$22;
 var $99=HEAP32[(($98)>>2)];
 var $100=((($99)-(4))|0);
 HEAP32[(($98)>>2)]=$100;
 label=2;break;
 case 6: 
 var $101=$50;
 var $102=(($101)|0);
 var $103=$49;
 var $104=(($103+4)|0);
 $26=$102;
 $27=$104;
 var $105=$26;
 $25=$105;
 var $106=$25;
 var $107=HEAP32[(($106)>>2)];
 HEAP32[(($__t_i2)>>2)]=$107;
 var $108=$27;
 $23=$108;
 var $109=$23;
 var $110=HEAP32[(($109)>>2)];
 var $111=$26;
 HEAP32[(($111)>>2)]=$110;
 $24=$__t_i2;
 var $112=$24;
 var $113=HEAP32[(($112)>>2)];
 var $114=$27;
 HEAP32[(($114)>>2)]=$113;
 var $115=$50;
 var $116=(($115+4)|0);
 var $117=$49;
 var $118=(($117+8)|0);
 $31=$116;
 $32=$118;
 var $119=$31;
 $30=$119;
 var $120=$30;
 var $121=HEAP32[(($120)>>2)];
 HEAP32[(($__t_i1)>>2)]=$121;
 var $122=$32;
 $28=$122;
 var $123=$28;
 var $124=HEAP32[(($123)>>2)];
 var $125=$31;
 HEAP32[(($125)>>2)]=$124;
 $29=$__t_i1;
 var $126=$29;
 var $127=HEAP32[(($126)>>2)];
 var $128=$32;
 HEAP32[(($128)>>2)]=$127;
 var $129=$50;
 $35=$129;
 var $130=$35;
 var $131=(($130+8)|0);
 $34=$131;
 var $132=$34;
 var $133=$132;
 $33=$133;
 var $134=$33;
 var $135=(($134)|0);
 var $136=$49;
 $38=$136;
 var $137=$38;
 var $138=(($137+12)|0);
 $37=$138;
 var $139=$37;
 var $140=$139;
 $36=$140;
 var $141=$36;
 var $142=(($141)|0);
 $42=$135;
 $43=$142;
 var $143=$42;
 $41=$143;
 var $144=$41;
 var $145=HEAP32[(($144)>>2)];
 HEAP32[(($__t_i)>>2)]=$145;
 var $146=$43;
 $39=$146;
 var $147=$39;
 var $148=HEAP32[(($147)>>2)];
 var $149=$42;
 HEAP32[(($149)>>2)]=$148;
 $40=$__t_i;
 var $150=$40;
 var $151=HEAP32[(($150)>>2)];
 var $152=$43;
 HEAP32[(($152)>>2)]=$151;
 var $153=$49;
 var $154=(($153+4)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$49;
 var $157=(($156)|0);
 HEAP32[(($157)>>2)]=$155;
 $44=$50;
 var $158=$44;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED2Ev($2);
 STACKTOP=sp;return;
}


function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29=(sp)+(24);
 var $30;
 var $31;
 var $32=(sp)+(32);
 var $33;
 var $34;
 $34=$this;
 var $35=$34;
 $33=$35;
 var $36=$33;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 $30=$36;
 $31=$38;
 var $39=$30;
 var $40=$31;
 var $tmp_i_i=$29;
 var $tmp1_i_i=$32;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $27=$39;
 $28=$40;
 var $41=$27;
 label=2;break;
 case 2: 
 var $43=$28;
 var $44=(($41+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)!=($45|0);
 if($46){label=3;break;}else{label=4;break;}
 case 3: 
 $26=$41;
 var $48=$26;
 var $49=(($48+12)|0);
 $25=$49;
 var $50=$25;
 var $51=$50;
 $24=$51;
 var $52=$24;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($41+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=((($56)-(4))|0);
 HEAP32[(($55)>>2)]=$57;
 $23=$57;
 var $58=$23;
 $19=$54;
 $20=$58;
 var $59=$22;
 var $60=$19;
 var $61=$20;
 var $tmp_i_i_i_i=$18;
 var $tmp1_i_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $16=$60;
 $17=$61;
 var $62=$16;
 var $63=$17;
 $14=$62;
 $15=$63;
 var $64=$14;
 var $65=$15;
 __ZN2cl6MemoryD1Ev($65);
 label=2;break;
 case 4: 
 var $66=(($35)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)!=0;
 if($68){label=5;break;}else{label=7;break;}
 case 5: 
 $13=$35;
 var $70=$13;
 var $71=(($70+12)|0);
 $12=$71;
 var $72=$12;
 var $73=$72;
 $11=$73;
 var $74=$11;
 var $75=(($74+4)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($35)|0);
 var $78=HEAP32[(($77)>>2)];
 $10=$35;
 var $79=$10;
 $9=$79;
 var $80=$9;
 var $81=(($80+12)|0);
 $8=$81;
 var $82=$8;
 var $83=$82;
 $7=$83;
 var $84=$7;
 var $85=(($84)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($79)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$86;
 var $90=$88;
 var $91=((($89)-($90))|0);
 var $92=(((($91|0))/(4))&-1);
 label=6;break;
 case 6: 
 $4=$76;
 $5=$78;
 $6=$92;
 var $94=$4;
 var $95=$5;
 var $96=$6;
 $1=$94;
 $2=$95;
 $3=$96;
 var $97=$1;
 var $98=$2;
 var $99=$98;
 __ZdlPv($99);
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6MemoryD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6MemoryD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6MemoryD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP7_cl_memED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP7_cl_memED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($memory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$memory;
 var $2=$1;
 var $3=_clReleaseMemObject($2);
 STACKTOP=sp;return $3;
}

// WARNING: content after a branch in a label, line: 12404
// WARNING: content after a branch in a label, line: 12406
// WARNING: content after a branch in a label, line: 12407
// WARNING: content after a branch in a label, line: 12408
// WARNING: content after a branch in a label, line: 13235
// WARNING: content after a branch in a label, line: 13237
// WARNING: content after a branch in a label, line: 13238
// WARNING: content after a branch in a label, line: 13239

function __ZNKSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12=(sp)+(16);
 var $13;
 var $14=(sp)+(24);
 var $15=(sp)+(32);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(40);
 var $21=(sp)+(48);
 $19=$this;
 var $22=$19;
 var $23=$22;
 $18=$23;
 var $24=$18;
 var $25=(($24+8)|0);
 $17=$25;
 var $26=$17;
 var $27=$26;
 $16=$27;
 var $28=$16;
 var $29=$28;
 $13=$29;
 var $30=$15;
 var $31=$13;
 var $tmp_i=$12;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$31;
 var $32=$11;
 $10=$32;
 var $33=$10;
 HEAP32[(($20)>>2)]=1073741823;
 var $34=((2147483647)&-1);
 HEAP32[(($21)>>2)]=$34;
 $7=$20;
 $8=$21;
 var $35=$7;
 var $36=$8;
 var $tmp_i1=$6;
 var $tmp1_i2=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $4=$35;
 $5=$36;
 var $37=$5;
 var $38=$4;
 $1=$6;
 $2=$37;
 $3=$38;
 var $39=$1;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=($41>>>0)<($43>>>0);
 if($44){label=2;break;}else{label=3;break;}
 case 2: 
 var $46=$5;
 var $49=$46;label=4;break;
 case 3: 
 var $48=$4;
 var $49=$48;label=4;break;
 case 4: 
 var $49;
 label=5;break;
 case 5: 
 var $51=HEAP32[(($49)>>2)];
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16=sp;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(8);
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 $25=$this;
 $26=$__cap;
 $27=$__start;
 $28=$__a;
 var $29=$25;
 var $30=$29;
 var $31=(($29+12)|0);
 var $32=$28;
 $22=$31;
 $23=0;
 $24=$32;
 var $33=$22;
 var $34=$23;
 var $35=$24;
 $19=$33;
 HEAP32[(($20)>>2)]=$34;
 $21=$35;
 var $36=$19;
 var $37=$36;
 $18=$20;
 var $38=$18;
 var $39=HEAP32[(($38)>>2)];
 var $40=$21;
 $12=$40;
 var $41=$12;
 $15=$37;
 HEAP32[(($16)>>2)]=$39;
 $17=$41;
 var $42=$15;
 var $43=(($42)|0);
 $14=$16;
 var $44=$14;
 var $45=HEAP32[(($44)>>2)];
 HEAP32[(($43)>>2)]=$45;
 var $46=(($42+4)|0);
 var $47=$17;
 $13=$47;
 var $48=$13;
 HEAP32[(($46)>>2)]=$48;
 var $49=$26;
 var $50=($49|0)!=0;
 if($50){label=2;break;}else{label=3;break;}
 case 2: 
 $3=$29;
 var $52=$3;
 var $53=(($52+12)|0);
 $2=$53;
 var $54=$2;
 var $55=$54;
 $1=$55;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$26;
 $7=$58;
 $8=$59;
 var $60=$7;
 var $61=$8;
 $4=$60;
 $5=$61;
 $6=0;
 var $62=$4;
 var $63=$5;
 var $64=($63<<2);
 var $65=__Znwj($64);
 var $66=$65;
 var $69=$66;label=4;break;
 case 3: 
 var $69=0;label=4;break;
 case 4: 
 var $69;
 var $70=(($29)|0);
 HEAP32[(($70)>>2)]=$69;
 var $71=(($29)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$27;
 var $74=(($72+($73<<2))|0);
 var $75=(($29+8)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($29+4)|0);
 HEAP32[(($76)>>2)]=$74;
 var $77=(($29)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$26;
 var $80=(($78+($79<<2))|0);
 $11=$29;
 var $81=$11;
 var $82=(($81+12)|0);
 $10=$82;
 var $83=$10;
 var $84=$83;
 $9=$84;
 var $85=$9;
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=$80;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6MemoryC1ERKS0_($this,$memory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$memory;
 var $3=$1;
 var $4=$2;
 __ZN2cl6MemoryC2ERKS0_($3,$4);
 STACKTOP=sp;return;
}


function __ZN2cl6MemoryC2ERKS0_($this,$memory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$memory;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=$5;
 __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($4,$6);
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($3)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($3)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($3);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($memory){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$memory;
 var $2=$1;
 var $3=_clRetainMemObject($2);
 STACKTOP=sp;return $3;
}


function __ZNK2cl7Program12getBuildInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEiRKNS_6DeviceEjPT_($this,$device,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$this;
 $2=$device;
 $3=$name;
 $4=$param;
 var $6=$1;
 var $7=$6;
 var $8=(($7)|0);
 var $9=$2;
 var $10=$9;
 var $11=__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($10);
 HEAP32[(($5)>>2)]=$11;
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEiT_RKT0_RKT1_jPT2_(284,$8,$5,$12,$13);
 var $15=__ZN2cl6detailL10errHandlerEiPKc($14,2648);
 STACKTOP=sp;return $15;
}


function __ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $f0=sp;
 var $6=(sp)+(16);
 $1=$f;
 $2=$arg0;
 $3=$arg1;
 $4=$name;
 $5=$param;
 var $7=(($f0)|0);
 var $8=$1;
 HEAP32[(($7)>>2)]=$8;
 var $9=(($f0+4)|0);
 var $10=$2;
 HEAP32[(($9)>>2)]=$10;
 var $11=(($f0+8)|0);
 var $12=$3;
 HEAP32[(($11)>>2)]=$12;
 var $13=$6;
 var $14=$f0;
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 var $15=$4;
 var $16=$5;
 var $17=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEE3getESB_jPSI_($6,$15,$16);
 STACKTOP=sp;return $17;
}


function __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEE3getESB_jPSI_($f,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($f)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $required=sp;
 var $err;
 var $value;
 $4=$name;
 $5=$param;
 var $6=$4;
 var $7=__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$6,0,0,$required);
 $err=$7;
 var $8=$err;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$err;
 $3=$11;
 label=6;break;
 case 3: 
 var $13=HEAP32[(($required)>>2)];
 var $14=STACKTOP;STACKTOP = (STACKTOP + $13)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 $value=$14;
 var $15=$4;
 var $16=HEAP32[(($required)>>2)];
 var $17=$value;
 var $18=__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$15,$16,$17,0);
 $err=$18;
 var $19=$err;
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$err;
 $3=$22;
 label=6;break;
 case 5: 
 var $24=$5;
 var $25=$value;
 $1=$24;
 $2=$25;
 var $26=$1;
 var $27=$2;
 var $28=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($26,$27);
 $3=0;
 label=6;break;
 case 6: 
 var $30=$3;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$param;
 $3=$size;
 $4=$value;
 $5=$size_ret;
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($6+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($10)>>2)];
 var $12=(($6+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($13)>>2)];
 var $15=$2;
 var $16=$3;
 var $17=$4;
 var $18=$5;
 var $19=FUNCTION_TABLE[$8]($11,$14,$15,$16,$17,$18);
 STACKTOP=sp;return $19;
}


function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC2EjRKS4_($this,$__n,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10=sp;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15=(sp)+(8);
 var $16=(sp)+(16);
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $__a_i;
 var $23;
 var $24;
 var $25;
 var $26=(sp)+(24);
 var $27;
 var $28;
 var $29=(sp)+(32);
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 $34=$this;
 $35=$__n;
 $36=$__x;
 var $39=$34;
 var $40=$39;
 $33=$40;
 var $41=$33;
 var $42=$41;
 $32=$42;
 var $43=$32;
 var $44=(($41)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=(($41+4)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=(($41+8)|0);
 $30=$46;
 $31=0;
 var $47=$30;
 var $48=$31;
 $28=$47;
 HEAP32[(($29)>>2)]=$48;
 var $49=$28;
 var $50=$49;
 $27=$29;
 var $51=$27;
 var $52=HEAP32[(($51)>>2)];
 $25=$50;
 HEAP32[(($26)>>2)]=$52;
 var $53=$25;
 var $54=$53;
 $24=$54;
 var $55=$24;
 var $56=(($53)|0);
 $23=$26;
 var $57=$23;
 var $58=HEAP32[(($57)>>2)];
 HEAP32[(($56)>>2)]=$58;
 var $59=$35;
 var $60=($59>>>0)>0;
 if($60){label=2;break;}else{label=10;break;}
 case 2: 
 var $62=$35;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8allocateEj($39,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=9;break; }
 case 3: 
 var $64=$35;
 var $65=$36;
 $20=$39;
 $21=$64;
 $22=$65;
 var $66=$20;
 var $67=$66;
 $19=$67;
 var $68=$19;
 var $69=(($68+8)|0);
 $18=$69;
 var $70=$18;
 var $71=$70;
 $17=$71;
 var $72=$17;
 var $73=$72;
 $__a_i=$73;
 label=4;break;
 case 4: 
 var $75=$__a_i;
 var $76=$66;
 var $77=(($76+4)|0);
 var $78=HEAP32[(($77)>>2)];
 $1=$78;
 var $79=$1;
 var $80=$22;
 $12=$75;
 $13=$79;
 $14=$80;
 var $81=$16;
 var $82=$12;
 var $83=$13;
 var $84=$14;
 $11=$84;
 var $85=$11;
 var $tmp_i_i=$10;
 var $tmp1_i_i=$15;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $7=$82;
 $8=$83;
 $9=$85;
 var $86=$7;
 var $87=$8;
 var $88=$9;
 $6=$88;
 var $89=$6;
 $3=$86;
 $4=$87;
 $5=$89;
 var $90=$3;
 var $91=$4;
 var $92=$91;
 var $93=($92|0)==0;
 if($93){var $100=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $95=$92;
 var $96=$5;
 $2=$96;
 var $97=$2;
 var $98=$95;
 var $99=$97;
 assert(8 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];
 var $100=$95;label=6;break;
 case 6: 
 var $100;
 var $101=$66;
 var $102=(($101+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+8)|0);
 HEAP32[(($102)>>2)]=$104;
 var $105=$21;
 var $106=((($105)-(1))|0);
 $21=$106;
 var $107=$21;
 var $108=($107>>>0)>0;
 if($108){label=4;break;}else{label=7;break;}
 case 7: 
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 var $112=$111$0;
 $37=$112;
 var $113=$111$1;
 $38=$113;
 var $114=$39;
 __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($114);
 label=11;break;
 case 10: 
 STACKTOP=sp;return;
 case 11: 
 var $117=$37;
 var $118=$38;
 var $119$0=$117;
 var $119$1=0;
 var $120$0=$119$0;
 var $120$1=$118;
 ___resumeException($120$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8allocateEj($this,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $12=$this;
 $13=$__n;
 var $14=$12;
 var $15=$13;
 var $16=__ZNKSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8max_sizeEv($14);
 var $17=($15>>>0)>($16>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$14;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19);
 label=3;break;
 case 3: 
 var $21=$14;
 $11=$21;
 var $22=$11;
 var $23=(($22+8)|0);
 $10=$23;
 var $24=$10;
 var $25=$24;
 $9=$25;
 var $26=$9;
 var $27=$26;
 var $28=$13;
 $4=$27;
 $5=$28;
 var $29=$4;
 var $30=$5;
 $1=$29;
 $2=$30;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=($32<<3);
 var $34=__Znwj($33);
 var $35=$34;
 var $36=$14;
 var $37=(($36+4)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$14;
 var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$35;
 var $40=$14;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$13;
 var $44=(($42+($43<<3))|0);
 var $45=$14;
 $8=$45;
 var $46=$8;
 var $47=(($46+8)|0);
 $7=$47;
 var $48=$7;
 var $49=$48;
 $6=$49;
 var $50=$6;
 var $51=(($50)|0);
 HEAP32[(($51)>>2)]=$44;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $30=$this;
 var $31=$30;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=2;break;}else{label=6;break;}
 case 2: 
 $29=$31;
 var $36=$29;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 $27=$36;
 $28=$38;
 var $39=$27;
 label=3;break;
 case 3: 
 var $41=$28;
 var $42=(($39+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)!=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 $26=$39;
 var $46=$26;
 var $47=(($46+8)|0);
 $25=$47;
 var $48=$25;
 var $49=$48;
 $24=$49;
 var $50=$24;
 var $51=$50;
 var $52=(($39+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(8))|0);
 HEAP32[(($52)>>2)]=$54;
 $23=$54;
 var $55=$23;
 $19=$51;
 $20=$55;
 var $56=$22;
 var $57=$19;
 var $58=$20;
 var $tmp_i_i_i=$18;
 var $tmp1_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $16=$57;
 $17=$58;
 var $59=$16;
 var $60=$17;
 $14=$59;
 $15=$60;
 var $61=$14;
 var $62=$15;
 label=3;break;
 case 5: 
 $7=$31;
 var $63=$7;
 var $64=(($63+8)|0);
 $6=$64;
 var $65=$6;
 var $66=$65;
 $5=$66;
 var $67=$5;
 var $68=$67;
 var $69=(($31)|0);
 var $70=HEAP32[(($69)>>2)];
 $4=$31;
 var $71=$4;
 $3=$71;
 var $72=$3;
 var $73=(($72+8)|0);
 $2=$73;
 var $74=$2;
 var $75=$74;
 $1=$75;
 var $76=$1;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($71)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 var $82=$80;
 var $83=((($81)-($82))|0);
 var $84=(((($83|0))/(8))&-1);
 $11=$68;
 $12=$70;
 $13=$84;
 var $85=$11;
 var $86=$12;
 var $87=$13;
 $8=$85;
 $9=$86;
 $10=$87;
 var $88=$8;
 var $89=$9;
 var $90=$89;
 __ZdlPv($90);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12=(sp)+(16);
 var $13;
 var $14=(sp)+(24);
 var $15=(sp)+(32);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(40);
 var $21=(sp)+(48);
 $19=$this;
 var $22=$19;
 var $23=$22;
 $18=$23;
 var $24=$18;
 var $25=(($24+8)|0);
 $17=$25;
 var $26=$17;
 var $27=$26;
 $16=$27;
 var $28=$16;
 var $29=$28;
 $13=$29;
 var $30=$15;
 var $31=$13;
 var $tmp_i=$12;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$31;
 var $32=$11;
 $10=$32;
 var $33=$10;
 HEAP32[(($20)>>2)]=536870911;
 var $34=((2147483647)&-1);
 HEAP32[(($21)>>2)]=$34;
 $7=$20;
 $8=$21;
 var $35=$7;
 var $36=$8;
 var $tmp_i1=$6;
 var $tmp1_i2=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $4=$35;
 $5=$36;
 var $37=$5;
 var $38=$4;
 $1=$6;
 $2=$37;
 $3=$38;
 var $39=$1;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=($41>>>0)<($43>>>0);
 if($44){label=2;break;}else{label=3;break;}
 case 2: 
 var $46=$5;
 var $49=$46;label=4;break;
 case 3: 
 var $48=$4;
 var $49=$48;label=4;break;
 case 4: 
 var $49;
 label=5;break;
 case 5: 
 var $51=HEAP32[(($49)>>2)];
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 STACKTOP=sp;return;
}


function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($10);
 STACKTOP=sp;return;
}


function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 HEAP32[(($6)>>2)]=$5;
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)-(12))|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$3;
 var $15=(($14+$13)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=$8;
 var $17=(($3+4)|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $18=$3;
 var $19=(($4+4)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($18,$19);
 STACKTOP=sp;return;
}

// WARNING: content after a branch in a label, line: 14261
// WARNING: content after a branch in a label, line: 14263
// WARNING: content after a branch in a label, line: 14264
// WARNING: content after a branch in a label, line: 14265

function __ZNK2cl7Context7getInfoINSt3__16vectorINS_6DeviceENS2_9allocatorIS4_EEEEEEijPT_($this,$name,$param){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$name;
 $3=$param;
 var $4=$1;
 var $5=$4;
 var $6=(($5)|0);
 var $7=$2;
 var $8=$3;
 var $9=__ZN2cl6detail7getInfoIPFiP11_cl_contextjjPvPjES3_NSt3__16vectorINS_6DeviceENS8_9allocatorISA_EEEEEEiT_RKT0_jPT1_(582,$6,$7,$8);
 var $10=__ZN2cl6detailL10errHandlerEiPKc($9,2136);
 STACKTOP=sp;return $10;
}


function __ZN2cl6detail7getInfoIPFiP11_cl_contextjjPvPjES3_NSt3__16vectorINS_6DeviceENS8_9allocatorISA_EEEEEEiT_RKT0_jPT1_($f,$arg0,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $f0=sp;
 var $5=(sp)+(8);
 $1=$f;
 $2=$arg0;
 $3=$name;
 $4=$param;
 var $6=(($f0)|0);
 var $7=$1;
 HEAP32[(($6)>>2)]=$7;
 var $8=(($f0+4)|0);
 var $9=$2;
 HEAP32[(($8)>>2)]=$9;
 var $10=$5;
 var $11=$f0;
 assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
 var $12=$3;
 var $13=$4;
 var $14=__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES4_EENSt3__16vectorINS_6DeviceENSA_9allocatorISC_EEEEE3getES9_jPSF_($5,$12,$13);
 STACKTOP=sp;return $14;
}


function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES4_EENSt3__16vectorINS_6DeviceENSA_9allocatorISC_EEEEE3getES9_jPSF_($f,$name,$param){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($f)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $required=sp;
 var $err;
 var $value;
 $2=$name;
 $3=$param;
 var $4=$2;
 var $5=__ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($f,$4,0,0,$required);
 $err=$5;
 var $6=$err;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$err;
 $1=$9;
 label=6;break;
 case 3: 
 var $11=HEAP32[(($required)>>2)];
 var $12=STACKTOP;STACKTOP = (STACKTOP + $11)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 $value=$13;
 var $14=$2;
 var $15=HEAP32[(($required)>>2)];
 var $16=$value;
 var $17=$16;
 var $18=__ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($f,$14,$15,$17,0);
 $err=$18;
 var $19=$err;
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$err;
 $1=$22;
 label=6;break;
 case 5: 
 var $24=$3;
 var $25=$value;
 var $26=(($25)|0);
 var $27=HEAP32[(($required)>>2)];
 var $28=(((($27>>>0))/(4))&-1);
 var $29=$value;
 var $30=(($29+($28<<2))|0);
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($24,$26,$30);
 $1=0;
 label=6;break;
 case 6: 
 var $32=$1;
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$param;
 $3=$size;
 $4=$value;
 $5=$size_ret;
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($6+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 var $16=FUNCTION_TABLE[$8]($11,$12,$13,$14,$15);
 STACKTOP=sp;return $16;
}


function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29=(sp)+(24);
 var $30;
 var $31;
 var $32=(sp)+(32);
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39=(sp)+(40);
 var $40;
 var $41;
 var $42=(sp)+(48);
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50=(sp)+(56);
 var $__ms_i;
 var $__cap_i;
 var $51=(sp)+(64);
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60=(sp)+(72);
 var $61;
 var $62;
 var $63=(sp)+(80);
 var $64;
 var $65;
 var $66;
 var $__new_size;
 var $__mid=(sp)+(88);
 var $__growing;
 var $__m;
 $64=$this;
 $65=$__first;
 $66=$__last;
 var $67=$64;
 var $68=$65;
 var $69=$66;
 $61=$68;
 $62=$69;
 var $70=$61;
 var $71=$62;
 var $tmp_i=$60;
 var $tmp1_i=$63;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $58=$70;
 $59=$71;
 var $72=$59;
 var $73=$58;
 var $74=$72;
 var $75=$73;
 var $76=((($74)-($75))|0);
 var $77=(((($76|0))/(4))&-1);
 $__new_size=$77;
 var $78=$__new_size;
 $57=$67;
 var $79=$57;
 var $80=$79;
 $56=$80;
 var $81=$56;
 $55=$81;
 var $82=$55;
 var $83=(($82+8)|0);
 $54=$83;
 var $84=$54;
 var $85=$84;
 $53=$85;
 var $86=$53;
 var $87=(($86)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($81)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$88;
 var $92=$90;
 var $93=((($91)-($92))|0);
 var $94=(((($93|0))/(4))&-1);
 var $95=($78>>>0)<=($94>>>0);
 if($95){label=2;break;}else{label=14;break;}
 case 2: 
 var $97=$66;
 HEAP32[(($__mid)>>2)]=$97;
 $__growing=0;
 var $98=$__new_size;
 $52=$67;
 var $99=$52;
 var $100=$99;
 var $101=(($100+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$99;
 var $104=(($103)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$102;
 var $107=$105;
 var $108=((($106)-($107))|0);
 var $109=(((($108|0))/(4))&-1);
 var $110=($98>>>0)>($109>>>0);
 if($110){label=3;break;}else{label=4;break;}
 case 3: 
 $__growing=1;
 var $112=$65;
 HEAP32[(($__mid)>>2)]=$112;
 $33=$67;
 var $113=$33;
 var $114=$113;
 var $115=(($114+4)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$113;
 var $118=(($117)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$116;
 var $121=$119;
 var $122=((($120)-($121))|0);
 var $123=(((($122|0))/(4))&-1);
 $30=$__mid;
 $31=$123;
 var $124=$30;
 var $125=$31;
 var $tmp_i1=$29;
 var $tmp1_i2=$32;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $27=$124;
 $28=$125;
 var $126=$28;
 var $127=$27;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+($126<<2))|0);
 HEAP32[(($127)>>2)]=$129;
 label=4;break;
 case 4: 
 var $131=$65;
 var $132=HEAP32[(($__mid)>>2)];
 var $133=$67;
 var $134=(($133)|0);
 var $135=HEAP32[(($134)>>2)];
 $24=$131;
 $25=$132;
 $26=$135;
 var $136=$24;
 $23=$136;
 var $137=$23;
 var $138=$25;
 $19=$138;
 var $139=$19;
 var $140=$26;
 $18=$140;
 var $141=$18;
 $20=$137;
 $21=$139;
 $22=$141;
 label=5;break;
 case 5: 
 var $143=$20;
 var $144=$21;
 var $145=($143|0)!=($144|0);
 if($145){label=6;break;}else{label=7;break;}
 case 6: 
 var $147=$22;
 var $148=$20;
 var $149=__ZN2cl6DeviceaSERKS0_($147,$148);
 var $150=$20;
 var $151=(($150+4)|0);
 $20=$151;
 var $152=$22;
 var $153=(($152+4)|0);
 $22=$153;
 label=5;break;
 case 7: 
 var $154=$22;
 $__m=$154;
 var $155=$__growing;
 var $156=(($155)&1);
 if($156){label=8;break;}else{label=9;break;}
 case 8: 
 var $158=HEAP32[(($__mid)>>2)];
 var $159=$66;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($67,$158,$159);
 label=13;break;
 case 9: 
 var $161=$__m;
 $16=$67;
 $17=$161;
 var $162=$16;
 var $163=$162;
 var $164=$17;
 $14=$163;
 $15=$164;
 var $165=$14;
 label=10;break;
 case 10: 
 var $167=$15;
 var $168=(($165+4)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($167|0)!=($169|0);
 if($170){label=11;break;}else{label=12;break;}
 case 11: 
 $13=$165;
 var $172=$13;
 var $173=(($172+8)|0);
 $12=$173;
 var $174=$12;
 var $175=$174;
 $11=$175;
 var $176=$11;
 var $177=$176;
 var $178=(($165+4)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=((($179)-(4))|0);
 HEAP32[(($178)>>2)]=$180;
 $10=$180;
 var $181=$10;
 $6=$177;
 $7=$181;
 var $182=$9;
 var $183=$6;
 var $184=$7;
 var $tmp_i_i_i=$5;
 var $tmp1_i_i_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $3=$183;
 $4=$184;
 var $185=$3;
 var $186=$4;
 $1=$185;
 $2=$186;
 var $187=$1;
 var $188=$2;
 __ZN2cl6DeviceD1Ev($188);
 label=10;break;
 case 12: 
 label=13;break;
 case 13: 
 label=23;break;
 case 14: 
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE10deallocateEv($67);
 var $191=$__new_size;
 $49=$67;
 HEAP32[(($50)>>2)]=$191;
 var $192=$49;
 var $193=__ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($192);
 $__ms_i=$193;
 var $194=HEAP32[(($50)>>2)];
 var $195=$__ms_i;
 var $196=($194>>>0)>($195>>>0);
 if($196){label=15;break;}else{label=16;break;}
 case 15: 
 var $198=$192;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($198);
 label=16;break;
 case 16: 
 $47=$192;
 var $200=$47;
 var $201=$200;
 $46=$201;
 var $202=$46;
 $45=$202;
 var $203=$45;
 var $204=(($203+8)|0);
 $44=$204;
 var $205=$44;
 var $206=$205;
 $43=$206;
 var $207=$43;
 var $208=(($207)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($202)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=$209;
 var $213=$211;
 var $214=((($212)-($213))|0);
 var $215=(((($214|0))/(4))&-1);
 $__cap_i=$215;
 var $216=$__cap_i;
 var $217=$__ms_i;
 var $218=(((($217>>>0))/(2))&-1);
 var $219=($216>>>0)>=($218>>>0);
 if($219){label=17;break;}else{label=18;break;}
 case 17: 
 var $221=$__ms_i;
 $48=$221;
 label=22;break;
 case 18: 
 var $223=$__cap_i;
 var $224=($223<<1);
 HEAP32[(($51)>>2)]=$224;
 $40=$51;
 $41=$50;
 var $225=$40;
 var $226=$41;
 var $tmp_i_i=$39;
 var $tmp1_i_i=$42;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $37=$225;
 $38=$226;
 var $227=$37;
 var $228=$38;
 $34=$39;
 $35=$227;
 $36=$228;
 var $229=$34;
 var $230=$35;
 var $231=HEAP32[(($230)>>2)];
 var $232=$36;
 var $233=HEAP32[(($232)>>2)];
 var $234=($231>>>0)<($233>>>0);
 if($234){label=19;break;}else{label=20;break;}
 case 19: 
 var $236=$38;
 var $239=$236;label=21;break;
 case 20: 
 var $238=$37;
 var $239=$238;label=21;break;
 case 21: 
 var $239;
 var $240=HEAP32[(($239)>>2)];
 $48=$240;
 label=22;break;
 case 22: 
 var $241=$48;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8allocateEj($67,$241);
 var $242=$65;
 var $243=$66;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($67,$242,$243);
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10=sp;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15=(sp)+(8);
 var $16=(sp)+(16);
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $__a;
 $20=$this;
 $21=$__first;
 $22=$__last;
 var $23=$20;
 var $24=$23;
 $19=$24;
 var $25=$19;
 var $26=(($25+8)|0);
 $18=$26;
 var $27=$18;
 var $28=$27;
 $17=$28;
 var $29=$17;
 var $30=$29;
 $__a=$30;
 label=2;break;
 case 2: 
 var $32=$21;
 var $33=$22;
 var $34=($32|0)!=($33|0);
 if($34){label=3;break;}else{label=7;break;}
 case 3: 
 var $36=$__a;
 var $37=$23;
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 $1=$39;
 var $40=$1;
 var $41=$21;
 $12=$36;
 $13=$40;
 $14=$41;
 var $42=$16;
 var $43=$12;
 var $44=$13;
 var $45=$14;
 $11=$45;
 var $46=$11;
 var $tmp_i=$10;
 var $tmp1_i=$15;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $7=$43;
 $8=$44;
 $9=$46;
 var $47=$7;
 var $48=$8;
 var $49=$9;
 $6=$49;
 var $50=$6;
 $3=$47;
 $4=$48;
 $5=$50;
 var $51=$3;
 var $52=$4;
 var $53=$52;
 var $54=($53|0)==0;
 if($54){var $59=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $56=$53;
 var $57=$5;
 $2=$57;
 var $58=$2;
 __ZN2cl6DeviceC1ERKS0_($56,$58);
 var $59=$56;label=5;break;
 case 5: 
 var $59;
 var $60=$23;
 var $61=(($60+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+4)|0);
 HEAP32[(($61)>>2)]=$63;
 label=6;break;
 case 6: 
 var $65=$21;
 var $66=(($65+4)|0);
 $21=$66;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE10deallocateEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23=sp;
 var $24;
 var $25;
 var $26=(sp)+(8);
 var $27=(sp)+(16);
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 $36=$this;
 var $37=$36;
 var $38=$37;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)!=0;
 if($41){label=2;break;}else{label=6;break;}
 case 2: 
 $35=$37;
 var $43=$35;
 var $44=$43;
 $34=$44;
 var $45=$34;
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 $32=$45;
 $33=$47;
 var $48=$32;
 label=3;break;
 case 3: 
 var $50=$33;
 var $51=(($48+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)!=($52|0);
 if($53){label=4;break;}else{label=5;break;}
 case 4: 
 $31=$48;
 var $55=$31;
 var $56=(($55+8)|0);
 $30=$56;
 var $57=$30;
 var $58=$57;
 $29=$58;
 var $59=$29;
 var $60=$59;
 var $61=(($48+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=((($62)-(4))|0);
 HEAP32[(($61)>>2)]=$63;
 $28=$63;
 var $64=$28;
 $24=$60;
 $25=$64;
 var $65=$27;
 var $66=$24;
 var $67=$25;
 var $tmp_i_i_i_i=$23;
 var $tmp1_i_i_i_i=$26;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $21=$66;
 $22=$67;
 var $68=$21;
 var $69=$22;
 $19=$68;
 $20=$69;
 var $70=$19;
 var $71=$20;
 __ZN2cl6DeviceD1Ev($71);
 label=3;break;
 case 5: 
 $18=$43;
 var $72=$18;
 var $73=$37;
 $17=$73;
 var $74=$17;
 var $75=(($74+8)|0);
 $16=$75;
 var $76=$16;
 var $77=$76;
 $15=$77;
 var $78=$15;
 var $79=$78;
 var $80=$37;
 var $81=(($80)|0);
 var $82=HEAP32[(($81)>>2)];
 $5=$37;
 var $83=$5;
 var $84=$83;
 $4=$84;
 var $85=$4;
 $3=$85;
 var $86=$3;
 var $87=(($86+8)|0);
 $2=$87;
 var $88=$2;
 var $89=$88;
 $1=$89;
 var $90=$1;
 var $91=(($90)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($85)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$92;
 var $96=$94;
 var $97=((($95)-($96))|0);
 var $98=(((($97|0))/(4))&-1);
 $9=$79;
 $10=$82;
 $11=$98;
 var $99=$9;
 var $100=$10;
 var $101=$11;
 $6=$99;
 $7=$100;
 $8=$101;
 var $102=$6;
 var $103=$7;
 var $104=$103;
 __ZdlPv($104);
 var $105=$37;
 $14=$105;
 var $106=$14;
 var $107=(($106+8)|0);
 $13=$107;
 var $108=$13;
 var $109=$108;
 $12=$109;
 var $110=$12;
 var $111=(($110)|0);
 HEAP32[(($111)>>2)]=0;
 var $112=$37;
 var $113=(($112+4)|0);
 HEAP32[(($113)>>2)]=0;
 var $114=$37;
 var $115=(($114)|0);
 HEAP32[(($115)>>2)]=0;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8allocateEj($this,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $12=$this;
 $13=$__n;
 var $14=$12;
 var $15=$13;
 var $16=__ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($14);
 var $17=($15>>>0)>($16>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$14;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19);
 label=3;break;
 case 3: 
 var $21=$14;
 $11=$21;
 var $22=$11;
 var $23=(($22+8)|0);
 $10=$23;
 var $24=$10;
 var $25=$24;
 $9=$25;
 var $26=$9;
 var $27=$26;
 var $28=$13;
 $4=$27;
 $5=$28;
 var $29=$4;
 var $30=$5;
 $1=$29;
 $2=$30;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=($32<<2);
 var $34=__Znwj($33);
 var $35=$34;
 var $36=$14;
 var $37=(($36+4)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$14;
 var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$35;
 var $40=$14;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$13;
 var $44=(($42+($43<<2))|0);
 var $45=$14;
 $8=$45;
 var $46=$8;
 var $47=(($46+8)|0);
 $7=$47;
 var $48=$7;
 var $49=$48;
 $6=$49;
 var $50=$6;
 var $51=(($50)|0);
 HEAP32[(($51)>>2)]=$44;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12=(sp)+(16);
 var $13;
 var $14=(sp)+(24);
 var $15=(sp)+(32);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(40);
 var $21=(sp)+(48);
 $19=$this;
 var $22=$19;
 var $23=$22;
 $18=$23;
 var $24=$18;
 var $25=(($24+8)|0);
 $17=$25;
 var $26=$17;
 var $27=$26;
 $16=$27;
 var $28=$16;
 var $29=$28;
 $13=$29;
 var $30=$15;
 var $31=$13;
 var $tmp_i=$12;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$31;
 var $32=$11;
 $10=$32;
 var $33=$10;
 HEAP32[(($20)>>2)]=1073741823;
 var $34=((2147483647)&-1);
 HEAP32[(($21)>>2)]=$34;
 $7=$20;
 $8=$21;
 var $35=$7;
 var $36=$8;
 var $tmp_i1=$6;
 var $tmp1_i2=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $4=$35;
 $5=$36;
 var $37=$5;
 var $38=$4;
 $1=$6;
 $2=$37;
 $3=$38;
 var $39=$1;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=($41>>>0)<($43>>>0);
 if($44){label=2;break;}else{label=3;break;}
 case 2: 
 var $46=$5;
 var $49=$46;label=4;break;
 case 3: 
 var $48=$4;
 var $49=$48;label=4;break;
 case 4: 
 var $49;
 label=5;break;
 case 5: 
 var $51=HEAP32[(($49)>>2)];
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6DeviceD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6DeviceD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6DeviceD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 $2=$0;
 STACKTOP=sp;return -33;
}


function __ZN2cl6DeviceC1ERKS0_($this,$device){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$device;
 var $3=$1;
 var $4=$2;
 __ZN2cl6DeviceC2ERKS0_($3,$4);
 STACKTOP=sp;return;
}


function __ZN2cl6DeviceC2ERKS0_($this,$device){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$device;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=$5;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4_($4,$6);
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($3)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($3)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($3);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 $2=$0;
 STACKTOP=sp;return -33;
}


function __ZN2cl6DeviceaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP7_cl_memEclEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZN2cl7NDRangeC2Ej($this,$size0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 $1=$this;
 HEAP32[(($2)>>2)]=$size0;
 var $5=$1;
 var $6=(($5)|0);
 __ZN2cl6size_tILi3EEC1Ev($6);
 var $7=(($5+20)|0);
 HEAP32[(($7)>>2)]=1;
 var $8=(($5)|0);
 var $9=$8;
 (function() { try { __THREW__ = 0; return __ZN2cl6vectorIjLj3EE9push_backERKj($9,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 STACKTOP=sp;return;
 case 3: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=$12$0;
 $3=$13;
 var $14=$12$1;
 $4=$14;
 __ZN2cl6size_tILi3EED1Ev($6);
 label=4;break;
 case 4: 
 var $16=$3;
 var $17=$4;
 var $18$0=$16;
 var $18$1=0;
 var $19$0=$18$0;
 var $19$1=$17;
 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6size_tILi3EEC1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6size_tILi3EEC2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6vectorIjLj3EE9push_backERKj($this,$x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$x;
 var $3=$1;
 var $4=__ZNK2cl6vectorIjLj3EE4sizeEv($3);
 var $5=($4>>>0)<3;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($3+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)+(1))|0);
 HEAP32[(($7)>>2)]=$9;
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($3+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($3)|0);
 var $15=(($14+($13<<2))|0);
 HEAP32[(($15)>>2)]=$11;
 var $16=(($3+16)|0);
 HEAP8[($16)]=0;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6size_tILi3EED1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl6size_tILi3EED2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl6size_tILi3EED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6vectorIjLj3EED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6vectorIjLj3EED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 STACKTOP=sp;return;
}


function __ZNK2cl6vectorIjLj3EE4sizeEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 STACKTOP=sp;return $5;
}


function __ZN2cl6size_tILi3EEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6vectorIjLj3EEC2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6vectorIjLj3EEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($2+16)|0);
 HEAP8[($4)]=1;
 STACKTOP=sp;return;
}


function __ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZNK2cl7NDRange10dimensionsEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZNK2cl7NDRangecvPKjEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=$3;
 var $5=__ZNK2cl6vectorIjLj3EEcvPKjEv($4);
 STACKTOP=sp;return $5;
}


function __ZNK2cl6vectorIjLj3EEcvPKjEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 STACKTOP=sp;return $4;
}


function __ZN2cl6BufferC2ERKS0_($this,$buffer){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$buffer;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=$5;
 __ZN2cl6MemoryC2ERKS0_($4,$6);
 STACKTOP=sp;return;
}


function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113__vector_baseIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $30=$this;
 var $31=$30;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=2;break;}else{label=6;break;}
 case 2: 
 $29=$31;
 var $36=$29;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 $27=$36;
 $28=$38;
 var $39=$27;
 label=3;break;
 case 3: 
 var $41=$28;
 var $42=(($39+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)!=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 $26=$39;
 var $46=$26;
 var $47=(($46+8)|0);
 $25=$47;
 var $48=$25;
 var $49=$48;
 $24=$49;
 var $50=$24;
 var $51=$50;
 var $52=(($39+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(4))|0);
 HEAP32[(($52)>>2)]=$54;
 $23=$54;
 var $55=$23;
 $19=$51;
 $20=$55;
 var $56=$22;
 var $57=$19;
 var $58=$20;
 var $tmp_i_i_i=$18;
 var $tmp1_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $16=$57;
 $17=$58;
 var $59=$16;
 var $60=$17;
 $14=$59;
 $15=$60;
 var $61=$14;
 var $62=$15;
 __ZN2cl8PlatformD1Ev($62);
 label=3;break;
 case 5: 
 $13=$31;
 var $63=$13;
 var $64=(($63+8)|0);
 $12=$64;
 var $65=$12;
 var $66=$65;
 $11=$66;
 var $67=$11;
 var $68=$67;
 var $69=(($31)|0);
 var $70=HEAP32[(($69)>>2)];
 $4=$31;
 var $71=$4;
 $3=$71;
 var $72=$3;
 var $73=(($72+8)|0);
 $2=$73;
 var $74=$2;
 var $75=$74;
 $1=$75;
 var $76=$1;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($71)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 var $82=$80;
 var $83=((($81)-($82))|0);
 var $84=(((($83|0))/(4))&-1);
 $8=$68;
 $9=$70;
 $10=$84;
 var $85=$8;
 var $86=$9;
 var $87=$10;
 $5=$85;
 $6=$86;
 $7=$87;
 var $88=$5;
 var $89=$6;
 var $90=$89;
 __ZdlPv($90);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl8PlatformD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN2cl8PlatformD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN2cl8PlatformD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 $2=$0;
 STACKTOP=sp;return -32;
}


function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113__vector_baseIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $30=$this;
 var $31=$30;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=2;break;}else{label=6;break;}
 case 2: 
 $29=$31;
 var $36=$29;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 $27=$36;
 $28=$38;
 var $39=$27;
 label=3;break;
 case 3: 
 var $41=$28;
 var $42=(($39+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)!=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 $26=$39;
 var $46=$26;
 var $47=(($46+8)|0);
 $25=$47;
 var $48=$25;
 var $49=$48;
 $24=$49;
 var $50=$24;
 var $51=$50;
 var $52=(($39+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(4))|0);
 HEAP32[(($52)>>2)]=$54;
 $23=$54;
 var $55=$23;
 $19=$51;
 $20=$55;
 var $56=$22;
 var $57=$19;
 var $58=$20;
 var $tmp_i_i_i=$18;
 var $tmp1_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $16=$57;
 $17=$58;
 var $59=$16;
 var $60=$17;
 $14=$59;
 $15=$60;
 var $61=$14;
 var $62=$15;
 __ZN2cl6DeviceD1Ev($62);
 label=3;break;
 case 5: 
 $13=$31;
 var $63=$13;
 var $64=(($63+8)|0);
 $12=$64;
 var $65=$12;
 var $66=$65;
 $11=$66;
 var $67=$11;
 var $68=$67;
 var $69=(($31)|0);
 var $70=HEAP32[(($69)>>2)];
 $4=$31;
 var $71=$4;
 $3=$71;
 var $72=$3;
 var $73=(($72+8)|0);
 $2=$73;
 var $74=$2;
 var $75=$74;
 $1=$75;
 var $76=$1;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($71)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 var $82=$80;
 var $83=((($81)-($82))|0);
 var $84=(((($83|0))/(4))&-1);
 $8=$68;
 $9=$70;
 $10=$84;
 var $85=$8;
 var $86=$9;
 var $87=$10;
 $5=$85;
 $6=$86;
 $7=$87;
 var $88=$5;
 var $89=$6;
 var $90=$89;
 __ZdlPv($90);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($this,$context,$flags$0,$flags$1,$size,$host_ptr,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5;
 var $6;
 var $error=(sp)+(8);
 var $7;
 var $8;
 $1=$this;
 $2=$context;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$flags$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$flags$1;
 $4=$size;
 $5=$host_ptr;
 $6=$err;
 var $9=$1;
 var $10=$9;
 __ZN2cl6MemoryC2Ev($10);
 var $11=$2;
 var $12=$11;
 var $13=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $ld$2$0=(($3)|0);
 var $15$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $15$1=HEAP32[(($ld$3$1)>>2)];
 var $16=$4;
 var $17=$5;
 var $18=(function() { try { __THREW__ = 0; return _clCreateBuffer($13,$15$0,$15$1,$16,$17,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $20=$9;
 var $21=(($20)|0);
 HEAP32[(($21)>>2)]=$18;
 var $22=HEAP32[(($error)>>2)];
 var $23=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc($22,1624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $25=$6;
 var $26=($25|0)!=0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=HEAP32[(($error)>>2)];
 var $29=$6;
 HEAP32[(($29)>>2)]=$28;
 label=7;break;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 $7=$32;
 var $33=$31$1;
 $8=$33;
 var $34=$9;
 __ZN2cl6MemoryD2Ev($34);
 label=8;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $37=$7;
 var $38=$8;
 var $39$0=$37;
 var $39$1=0;
 var $40$0=$39$0;
 var $40$1=$38;
 ___resumeException($40$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6MemoryC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($3);
 STACKTOP=sp;return;
}


function __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN2cl8BufferGLD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6BufferD2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6BufferD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6MemoryD2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl8BufferGLC2ERKNS_7ContextEyjPi($this,$context,$flags$0,$flags$1,$bufobj,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $5;
 var $error=(sp)+(8);
 var $6;
 var $7;
 $1=$this;
 $2=$context;
 var $st$0$0=(($3)|0);
 HEAP32[(($st$0$0)>>2)]=$flags$0;
 var $st$1$1=(($3+4)|0);
 HEAP32[(($st$1$1)>>2)]=$flags$1;
 $4=$bufobj;
 $5=$err;
 var $8=$1;
 var $9=$8;
 __ZN2cl6BufferC2Ev($9);
 var $10=$2;
 var $11=$10;
 var $12=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $ld$2$0=(($3)|0);
 var $14$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $14$1=HEAP32[(($ld$3$1)>>2)];
 var $15=$4;
 var $16=(function() { try { __THREW__ = 0; return _clCreateFromGLBuffer($12,$14$0,$14$1,$15,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $18=$8;
 var $19=(($18)|0);
 HEAP32[(($19)>>2)]=$16;
 var $20=HEAP32[(($error)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc($20,1600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $23=$5;
 var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=HEAP32[(($error)>>2)];
 var $27=$5;
 HEAP32[(($27)>>2)]=$26;
 label=7;break;
 case 6: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 $6=$30;
 var $31=$29$1;
 $7=$31;
 var $32=$8;
 __ZN2cl6BufferD2Ev($32);
 label=8;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $35=$6;
 var $36=$7;
 var $37$0=$35;
 var $37$1=0;
 var $38$0=$37$0;
 var $38$1=$36;
 ___resumeException($38$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6BufferC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6MemoryC2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6MemoryaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP7_cl_memEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP7_cl_memEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$properties$0,$properties$1,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $error=(sp)+(8);
 var $6;
 var $7;
 $1=$this;
 $2=$context;
 $3=$device;
 var $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$properties$0;
 var $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$properties$1;
 $5=$err;
 var $8=$1;
 var $9=$8;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($9);
 var $10=$2;
 var $11=$10;
 var $12=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=7;break; }
 case 2: 
 var $14=$3;
 var $15=$14;
 var $16=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $ld$2$0=(($4)|0);
 var $18$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($4+4)|0);
 var $18$1=HEAP32[(($ld$3$1)>>2)];
 var $19=(function() { try { __THREW__ = 0; return _clCreateCommandQueue($12,$16,$18$0,$18$1,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $21=$8;
 var $22=(($21)|0);
 HEAP32[(($22)>>2)]=$19;
 var $23=HEAP32[(($error)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc($23,1568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $26=$5;
 var $27=($26|0)!=0;
 if($27){label=6;break;}else{label=8;break;}
 case 6: 
 var $29=HEAP32[(($error)>>2)];
 var $30=$5;
 HEAP32[(($30)>>2)]=$29;
 label=8;break;
 case 7: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=$32$0;
 $6=$33;
 var $34=$32$1;
 $7=$34;
 var $35=$8;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($35);
 label=9;break;
 case 8: 
 STACKTOP=sp;return;
 case 9: 
 var $38=$6;
 var $39=$7;
 var $40$0=$38;
 var $40$1=0;
 var $41$0=$40$0;
 var $41$1=$39;
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($queue){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$queue;
 var $2=$1;
 var $3=_clReleaseCommandQueue($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl6detail7WrapperIP17_cl_command_queueEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP17_cl_command_queueE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP17_cl_command_queueE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE6retainES3_($queue){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$queue;
 var $2=$1;
 var $3=_clRetainCommandQueue($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($this,$program,$name,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $error=sp;
 var $5;
 var $6;
 $1=$this;
 $2=$program;
 $3=$name;
 $4=$err;
 var $7=$1;
 var $8=$7;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($8);
 var $9=$2;
 var $10=$9;
 var $11=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_programEclEv($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $13=$3;
 var $14=(function() { try { __THREW__ = 0; return _clCreateKernel($11,$13,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $16=$7;
 var $17=(($16)|0);
 HEAP32[(($17)>>2)]=$14;
 var $18=HEAP32[(($error)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc($18,1552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $21=$4;
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=HEAP32[(($error)>>2)];
 var $25=$4;
 HEAP32[(($25)>>2)]=$24;
 label=7;break;
 case 6: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=$27$0;
 $5=$28;
 var $29=$27$1;
 $6=$29;
 var $30=$7;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($30);
 label=8;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 var $33=$5;
 var $34=$6;
 var $35$0=$33;
 var $35$1=0;
 var $36$0=$35$0;
 var $36$1=$34;
 ___resumeException($36$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZNK2cl6detail7WrapperIP11_cl_programEclEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}


function __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($kernel){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$kernel;
 var $2=$1;
 var $3=_clReleaseKernel($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl6detail7WrapperIP10_cl_kernelEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP10_cl_kernelE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP10_cl_kernelE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE6retainES3_($kernel){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$kernel;
 var $2=$1;
 var $3=_clRetainKernel($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl5ErrorD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;

 STACKTOP=sp;return;
}


function __ZN2cl5ErrorC2ERKS0_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 var $6=$3;
 var $7=$6;
 __ZNSt9exceptionC2ERKS_($5,$7);
 var $8=$4;
 HEAP32[(($8)>>2)]=7544;
 var $9=(($4+4)|0);
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=$9;
 var $13=$11;
 assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
 STACKTOP=sp;return;
}


function __ZNSt9exceptionC2ERKS_($this,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 HEAP32[(($5)>>2)]=((__ZTVSt9exception+8)|0);
 STACKTOP=sp;return;
}


function __ZN2cl7ProgramC2ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($this,$context,$sources,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $error=sp;
 var $n;
 var $lengths;
 var $strings;
 var $i;
 var $10;
 var $11;
 $6=$this;
 $7=$context;
 $8=$sources;
 $9=$err;
 var $12=$6;
 var $13=$12;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($13);
 var $14=$8;
 $5=$14;
 var $15=$5;
 var $16=$15;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$15;
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$18;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=(((($24|0))/(8))&-1);
 $n=$25;
 var $26=$n;
 var $27=($26<<2);
 var $28=STACKTOP;STACKTOP = (STACKTOP + $27)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $29=$28;
 $lengths=$29;
 var $30=$n;
 var $31=($30<<2);
 var $32=STACKTOP;STACKTOP = (STACKTOP + $31)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $33=$32;
 $strings=$33;
 $i=0;
 label=2;break;
 case 2: 
 var $35=$i;
 var $36=$n;
 var $37=($35>>>0)<($36>>>0);
 if($37){label=3;break;}else{label=8;break;}
 case 3: 
 var $39=$8;
 var $40=$i;
 $3=$39;
 $4=$40;
 var $41=$3;
 var $42=$4;
 var $43=$41;
 var $44=(($43)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+($42<<3))|0);
 label=4;break;
 case 4: 
 var $48=(($46)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$i;
 var $51=$strings;
 var $52=(($51+($50<<2))|0);
 HEAP32[(($52)>>2)]=$49;
 var $53=$8;
 var $54=$i;
 $1=$53;
 $2=$54;
 var $55=$1;
 var $56=$2;
 var $57=$55;
 var $58=(($57)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+($56<<3))|0);
 label=5;break;
 case 5: 
 var $62=(($60+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$i;
 var $65=$lengths;
 var $66=(($65+($64<<2))|0);
 HEAP32[(($66)>>2)]=$63;
 label=6;break;
 case 6: 
 var $68=$i;
 var $69=((($68)+(1))|0);
 $i=$69;
 label=2;break;
 case 7: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 var $72=$71$0;
 $10=$72;
 var $73=$71$1;
 $11=$73;
 var $74=$12;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($74);
 label=14;break;
 case 8: 
 var $76=$7;
 var $77=$76;
 var $78=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=7;break; }
 case 9: 
 var $80=$n;
 var $81=$strings;
 var $82=$lengths;
 var $83=(function() { try { __THREW__ = 0; return _clCreateProgramWithSource($78,$80,$81,$82,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=7;break; }
 case 10: 
 var $85=$12;
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=$83;
 var $87=HEAP32[(($error)>>2)];
 var $88=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc($87,1472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=7;break; }
 case 11: 
 var $90=$9;
 var $91=($90|0)!=0;
 if($91){label=12;break;}else{label=13;break;}
 case 12: 
 var $93=HEAP32[(($error)>>2)];
 var $94=$9;
 HEAP32[(($94)>>2)]=$93;
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
 case 14: 
 var $97=$10;
 var $98=$11;
 var $99$0=$97;
 var $99$1=0;
 var $100$0=$99$0;
 var $100$1=$98;
 ___resumeException($100$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP11_cl_programED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($program){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$program;
 var $2=$1;
 var $3=_clReleaseProgram($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl6detail7WrapperIP11_cl_programEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP11_cl_programE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP11_cl_programE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP11_cl_programE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE6retainES3_($program){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$program;
 var $2=$1;
 var $3=_clRetainProgram($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl7ContextC2EyPiPFvPKcPKvjPvES6_S1_($this,$type$0,$type$1,$properties,$notifyFptr,$data,$err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 var $5;
 var $6;
 var $error=(sp)+(8);
 var $7;
 var $8;
 $1=$this;
 var $st$0$0=(($2)|0);
 HEAP32[(($st$0$0)>>2)]=$type$0;
 var $st$1$1=(($2+4)|0);
 HEAP32[(($st$1$1)>>2)]=$type$1;
 $3=$properties;
 $4=$notifyFptr;
 $5=$data;
 $6=$err;
 var $9=$1;
 var $10=$9;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($10);
 var $11=$3;
 var $ld$2$0=(($2)|0);
 var $12$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($2+4)|0);
 var $12$1=HEAP32[(($ld$3$1)>>2)];
 var $13=$4;
 var $14=$5;
 var $15=(function() { try { __THREW__ = 0; return _clCreateContextFromType($11,$12$0,$12$1,$13,$14,$error) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $17=$9;
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=$15;
 var $19=HEAP32[(($error)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZN2cl6detailL10errHandlerEiPKc($19,1448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $22=$6;
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=6;break;}
 case 4: 
 var $25=HEAP32[(($error)>>2)];
 var $26=$6;
 HEAP32[(($26)>>2)]=$25;
 label=6;break;
 case 5: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 $7=$29;
 var $30=$28$1;
 $8=$30;
 var $31=$9;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($31);
 label=7;break;
 case 6: 
 STACKTOP=sp;return;
 case 7: 
 var $34=$7;
 var $35=$8;
 var $36$0=$34;
 var $36$1=0;
 var $37$0=$36$0;
 var $37$1=$35;
 ___resumeException($37$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($context){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$context;
 var $2=$1;
 var $3=_clReleaseContext($2);
 STACKTOP=sp;return $3;
}


function __ZN2cl6detail7WrapperIP11_cl_contextEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP11_cl_contextE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP11_cl_contextE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE6retainES3_($context){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$context;
 var $2=$1;
 var $3=_clRetainContext($2);
 STACKTOP=sp;return $3;
}

// WARNING: content after a branch in a label, line: 16861
// WARNING: content after a branch in a label, line: 16863
// WARNING: content after a branch in a label, line: 16864
// WARNING: content after a branch in a label, line: 16865

function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE6assignIPP15_cl_platform_idEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($this,$__first,$__last){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $7;
 var $8=(sp)+(8);
 var $9=(sp)+(16);
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23=(sp)+(24);
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32=(sp)+(32);
 var $33;
 var $34;
 var $35=(sp)+(40);
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42=(sp)+(48);
 var $43;
 var $44;
 var $45=(sp)+(56);
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53=(sp)+(64);
 var $__ms_i;
 var $__cap_i;
 var $54=(sp)+(72);
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63=(sp)+(80);
 var $64;
 var $65;
 var $66=(sp)+(88);
 var $67;
 var $68;
 var $69;
 var $__new_size;
 var $__mid=(sp)+(96);
 var $__growing;
 var $__m;
 $67=$this;
 $68=$__first;
 $69=$__last;
 var $70=$67;
 var $71=$68;
 var $72=$69;
 $64=$71;
 $65=$72;
 var $73=$64;
 var $74=$65;
 var $tmp_i=$63;
 var $tmp1_i=$66;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $61=$73;
 $62=$74;
 var $75=$62;
 var $76=$61;
 var $77=$75;
 var $78=$76;
 var $79=((($77)-($78))|0);
 var $80=(((($79|0))/(4))&-1);
 $__new_size=$80;
 var $81=$__new_size;
 $60=$70;
 var $82=$60;
 var $83=$82;
 $59=$83;
 var $84=$59;
 $58=$84;
 var $85=$58;
 var $86=(($85+8)|0);
 $57=$86;
 var $87=$57;
 var $88=$87;
 $56=$88;
 var $89=$56;
 var $90=(($89)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(($84)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$91;
 var $95=$93;
 var $96=((($94)-($95))|0);
 var $97=(((($96|0))/(4))&-1);
 var $98=($81>>>0)<=($97>>>0);
 if($98){label=2;break;}else{label=16;break;}
 case 2: 
 var $100=$69;
 HEAP32[(($__mid)>>2)]=$100;
 $__growing=0;
 var $101=$__new_size;
 $55=$70;
 var $102=$55;
 var $103=$102;
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$102;
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$105;
 var $110=$108;
 var $111=((($109)-($110))|0);
 var $112=(((($111|0))/(4))&-1);
 var $113=($101>>>0)>($112>>>0);
 if($113){label=3;break;}else{label=4;break;}
 case 3: 
 $__growing=1;
 var $115=$68;
 HEAP32[(($__mid)>>2)]=$115;
 $36=$70;
 var $116=$36;
 var $117=$116;
 var $118=(($117+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$116;
 var $121=(($120)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$119;
 var $124=$122;
 var $125=((($123)-($124))|0);
 var $126=(((($125|0))/(4))&-1);
 $33=$__mid;
 $34=$126;
 var $127=$33;
 var $128=$34;
 var $tmp_i1=$32;
 var $tmp1_i2=$35;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $30=$127;
 $31=$128;
 var $129=$31;
 var $130=$30;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+($129<<2))|0);
 HEAP32[(($130)>>2)]=$132;
 label=4;break;
 case 4: 
 var $134=$68;
 var $135=HEAP32[(($__mid)>>2)];
 var $136=$70;
 var $137=(($136)|0);
 var $138=HEAP32[(($137)>>2)];
 $27=$134;
 $28=$135;
 $29=$138;
 var $139=$27;
 $26=$139;
 var $140=$26;
 var $141=$28;
 $19=$141;
 var $142=$19;
 var $143=$29;
 $18=$143;
 var $144=$18;
 $20=$140;
 $21=$142;
 $22=$144;
 label=5;break;
 case 5: 
 var $146=$20;
 var $147=$21;
 var $148=($146|0)!=($147|0);
 if($148){label=6;break;}else{label=9;break;}
 case 6: 
 var $150=$22;
 var $151=$20;
 var $152=HEAP32[(($151)>>2)];
 __ZN2cl8PlatformC1EP15_cl_platform_id($23,$152);
 var $153=(function() { try { __THREW__ = 0; return __ZN2cl8PlatformaSERKS0_($150,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 __ZN2cl8PlatformD1Ev($23);
 var $155=$20;
 var $156=(($155+4)|0);
 $20=$156;
 var $157=$22;
 var $158=(($157+4)|0);
 $22=$158;
 label=5;break;
 case 8: 
 var $160$0 = ___cxa_find_matching_catch(-1, -1); var $160$1 = tempRet0;
 var $161=$160$0;
 $24=$161;
 var $162=$160$1;
 $25=$162;
 __ZN2cl8PlatformD1Ev($23);
 var $163=$24;
 var $164=$25;
 var $165$0=$163;
 var $165$1=0;
 var $166$0=$165$0;
 var $166$1=$164;
 ___resumeException($166$0)
 case 9: 
 var $167=$22;
 $__m=$167;
 var $168=$__growing;
 var $169=(($168)&1);
 if($169){label=10;break;}else{label=11;break;}
 case 10: 
 var $171=HEAP32[(($__mid)>>2)];
 var $172=$69;
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($70,$171,$172);
 label=15;break;
 case 11: 
 var $174=$__m;
 $16=$70;
 $17=$174;
 var $175=$16;
 var $176=$175;
 var $177=$17;
 $14=$176;
 $15=$177;
 var $178=$14;
 label=12;break;
 case 12: 
 var $180=$15;
 var $181=(($178+4)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)!=($182|0);
 if($183){label=13;break;}else{label=14;break;}
 case 13: 
 $13=$178;
 var $185=$13;
 var $186=(($185+8)|0);
 $12=$186;
 var $187=$12;
 var $188=$187;
 $11=$188;
 var $189=$11;
 var $190=$189;
 var $191=(($178+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=((($192)-(4))|0);
 HEAP32[(($191)>>2)]=$193;
 $10=$193;
 var $194=$10;
 $6=$190;
 $7=$194;
 var $195=$9;
 var $196=$6;
 var $197=$7;
 var $tmp_i_i_i=$5;
 var $tmp1_i_i_i=$8;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $3=$196;
 $4=$197;
 var $198=$3;
 var $199=$4;
 $1=$198;
 $2=$199;
 var $200=$1;
 var $201=$2;
 __ZN2cl8PlatformD1Ev($201);
 label=12;break;
 case 14: 
 label=15;break;
 case 15: 
 label=25;break;
 case 16: 
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE10deallocateEv($70);
 var $204=$__new_size;
 $52=$70;
 HEAP32[(($53)>>2)]=$204;
 var $205=$52;
 var $206=__ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($205);
 $__ms_i=$206;
 var $207=HEAP32[(($53)>>2)];
 var $208=$__ms_i;
 var $209=($207>>>0)>($208>>>0);
 if($209){label=17;break;}else{label=18;break;}
 case 17: 
 var $211=$205;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($211);
 label=18;break;
 case 18: 
 $50=$205;
 var $213=$50;
 var $214=$213;
 $49=$214;
 var $215=$49;
 $48=$215;
 var $216=$48;
 var $217=(($216+8)|0);
 $47=$217;
 var $218=$47;
 var $219=$218;
 $46=$219;
 var $220=$46;
 var $221=(($220)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($215)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$222;
 var $226=$224;
 var $227=((($225)-($226))|0);
 var $228=(((($227|0))/(4))&-1);
 $__cap_i=$228;
 var $229=$__cap_i;
 var $230=$__ms_i;
 var $231=(((($230>>>0))/(2))&-1);
 var $232=($229>>>0)>=($231>>>0);
 if($232){label=19;break;}else{label=20;break;}
 case 19: 
 var $234=$__ms_i;
 $51=$234;
 label=24;break;
 case 20: 
 var $236=$__cap_i;
 var $237=($236<<1);
 HEAP32[(($54)>>2)]=$237;
 $43=$54;
 $44=$53;
 var $238=$43;
 var $239=$44;
 var $tmp_i_i=$42;
 var $tmp1_i_i=$45;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $40=$238;
 $41=$239;
 var $240=$40;
 var $241=$41;
 $37=$42;
 $38=$240;
 $39=$241;
 var $242=$37;
 var $243=$38;
 var $244=HEAP32[(($243)>>2)];
 var $245=$39;
 var $246=HEAP32[(($245)>>2)];
 var $247=($244>>>0)<($246>>>0);
 if($247){label=21;break;}else{label=22;break;}
 case 21: 
 var $249=$41;
 var $252=$249;label=23;break;
 case 22: 
 var $251=$40;
 var $252=$251;label=23;break;
 case 23: 
 var $252;
 var $253=HEAP32[(($252)>>2)];
 $51=$253;
 label=24;break;
 case 24: 
 var $254=$51;
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8allocateEj($70,$254);
 var $255=$68;
 var $256=$69;
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($70,$255,$256);
 label=25;break;
 case 25: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10=sp;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15=(sp)+(8);
 var $16=(sp)+(16);
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $__a;
 $20=$this;
 $21=$__first;
 $22=$__last;
 var $23=$20;
 var $24=$23;
 $19=$24;
 var $25=$19;
 var $26=(($25+8)|0);
 $18=$26;
 var $27=$18;
 var $28=$27;
 $17=$28;
 var $29=$17;
 var $30=$29;
 $__a=$30;
 label=2;break;
 case 2: 
 var $32=$21;
 var $33=$22;
 var $34=($32|0)!=($33|0);
 if($34){label=3;break;}else{label=7;break;}
 case 3: 
 var $36=$__a;
 var $37=$23;
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 $1=$39;
 var $40=$1;
 var $41=$21;
 $12=$36;
 $13=$40;
 $14=$41;
 var $42=$16;
 var $43=$12;
 var $44=$13;
 var $45=$14;
 $11=$45;
 var $46=$11;
 var $tmp_i=$10;
 var $tmp1_i=$15;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $7=$43;
 $8=$44;
 $9=$46;
 var $47=$7;
 var $48=$8;
 var $49=$9;
 $6=$49;
 var $50=$6;
 $3=$47;
 $4=$48;
 $5=$50;
 var $51=$3;
 var $52=$4;
 var $53=$52;
 var $54=($53|0)==0;
 if($54){var $60=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $56=$53;
 var $57=$5;
 $2=$57;
 var $58=$2;
 var $59=HEAP32[(($58)>>2)];
 __ZN2cl8PlatformC1EP15_cl_platform_id($56,$59);
 var $60=$56;label=5;break;
 case 5: 
 var $60;
 var $61=$23;
 var $62=(($61+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+4)|0);
 HEAP32[(($62)>>2)]=$64;
 label=6;break;
 case 6: 
 var $66=$21;
 var $67=(($66+4)|0);
 $21=$67;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE10deallocateEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23=sp;
 var $24;
 var $25;
 var $26=(sp)+(8);
 var $27=(sp)+(16);
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 $36=$this;
 var $37=$36;
 var $38=$37;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)!=0;
 if($41){label=2;break;}else{label=6;break;}
 case 2: 
 $35=$37;
 var $43=$35;
 var $44=$43;
 $34=$44;
 var $45=$34;
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 $32=$45;
 $33=$47;
 var $48=$32;
 label=3;break;
 case 3: 
 var $50=$33;
 var $51=(($48+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)!=($52|0);
 if($53){label=4;break;}else{label=5;break;}
 case 4: 
 $31=$48;
 var $55=$31;
 var $56=(($55+8)|0);
 $30=$56;
 var $57=$30;
 var $58=$57;
 $29=$58;
 var $59=$29;
 var $60=$59;
 var $61=(($48+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=((($62)-(4))|0);
 HEAP32[(($61)>>2)]=$63;
 $28=$63;
 var $64=$28;
 $24=$60;
 $25=$64;
 var $65=$27;
 var $66=$24;
 var $67=$25;
 var $tmp_i_i_i_i=$23;
 var $tmp1_i_i_i_i=$26;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
 $21=$66;
 $22=$67;
 var $68=$21;
 var $69=$22;
 $19=$68;
 $20=$69;
 var $70=$19;
 var $71=$20;
 __ZN2cl8PlatformD1Ev($71);
 label=3;break;
 case 5: 
 $18=$43;
 var $72=$18;
 var $73=$37;
 $17=$73;
 var $74=$17;
 var $75=(($74+8)|0);
 $16=$75;
 var $76=$16;
 var $77=$76;
 $15=$77;
 var $78=$15;
 var $79=$78;
 var $80=$37;
 var $81=(($80)|0);
 var $82=HEAP32[(($81)>>2)];
 $5=$37;
 var $83=$5;
 var $84=$83;
 $4=$84;
 var $85=$4;
 $3=$85;
 var $86=$3;
 var $87=(($86+8)|0);
 $2=$87;
 var $88=$2;
 var $89=$88;
 $1=$89;
 var $90=$1;
 var $91=(($90)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($85)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$92;
 var $96=$94;
 var $97=((($95)-($96))|0);
 var $98=(((($97|0))/(4))&-1);
 $9=$79;
 $10=$82;
 $11=$98;
 var $99=$9;
 var $100=$10;
 var $101=$11;
 $6=$99;
 $7=$100;
 $8=$101;
 var $102=$6;
 var $103=$7;
 var $104=$103;
 __ZdlPv($104);
 var $105=$37;
 $14=$105;
 var $106=$14;
 var $107=(($106+8)|0);
 $13=$107;
 var $108=$13;
 var $109=$108;
 $12=$109;
 var $110=$12;
 var $111=(($110)|0);
 HEAP32[(($111)>>2)]=0;
 var $112=$37;
 var $113=(($112+4)|0);
 HEAP32[(($113)>>2)]=0;
 var $114=$37;
 var $115=(($114)|0);
 HEAP32[(($115)>>2)]=0;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8allocateEj($this,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $12=$this;
 $13=$__n;
 var $14=$12;
 var $15=$13;
 var $16=__ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($14);
 var $17=($15>>>0)>($16>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$14;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19);
 label=3;break;
 case 3: 
 var $21=$14;
 $11=$21;
 var $22=$11;
 var $23=(($22+8)|0);
 $10=$23;
 var $24=$10;
 var $25=$24;
 $9=$25;
 var $26=$9;
 var $27=$26;
 var $28=$13;
 $4=$27;
 $5=$28;
 var $29=$4;
 var $30=$5;
 $1=$29;
 $2=$30;
 $3=0;
 var $31=$1;
 var $32=$2;
 var $33=($32<<2);
 var $34=__Znwj($33);
 var $35=$34;
 var $36=$14;
 var $37=(($36+4)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$14;
 var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$35;
 var $40=$14;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$13;
 var $44=(($42+($43<<2))|0);
 var $45=$14;
 $8=$45;
 var $46=$8;
 var $47=(($46+8)|0);
 $7=$47;
 var $48=$7;
 var $49=$48;
 $6=$49;
 var $50=$6;
 var $51=(($50)|0);
 HEAP32[(($51)>>2)]=$44;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7;
 var $8;
 var $9=(sp)+(8);
 var $10;
 var $11;
 var $12=(sp)+(16);
 var $13;
 var $14=(sp)+(24);
 var $15=(sp)+(32);
 var $16;
 var $17;
 var $18;
 var $19;
 var $20=(sp)+(40);
 var $21=(sp)+(48);
 $19=$this;
 var $22=$19;
 var $23=$22;
 $18=$23;
 var $24=$18;
 var $25=(($24+8)|0);
 $17=$25;
 var $26=$17;
 var $27=$26;
 $16=$27;
 var $28=$16;
 var $29=$28;
 $13=$29;
 var $30=$15;
 var $31=$13;
 var $tmp_i=$12;
 var $tmp1_i=$14;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $11=$31;
 var $32=$11;
 $10=$32;
 var $33=$10;
 HEAP32[(($20)>>2)]=1073741823;
 var $34=((2147483647)&-1);
 HEAP32[(($21)>>2)]=$34;
 $7=$20;
 $8=$21;
 var $35=$7;
 var $36=$8;
 var $tmp_i1=$6;
 var $tmp1_i2=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
 $4=$35;
 $5=$36;
 var $37=$5;
 var $38=$4;
 $1=$6;
 $2=$37;
 $3=$38;
 var $39=$1;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=($41>>>0)<($43>>>0);
 if($44){label=2;break;}else{label=3;break;}
 case 2: 
 var $46=$5;
 var $49=$46;label=4;break;
 case 3: 
 var $48=$4;
 var $49=$48;label=4;break;
 case 4: 
 var $49;
 label=5;break;
 case 5: 
 var $51=HEAP32[(($49)>>2)];
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl8PlatformC1EP15_cl_platform_id($this,$platform){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$platform;
 var $3=$1;
 var $4=$2;
 __ZN2cl8PlatformC2EP15_cl_platform_id($3,$4);
 STACKTOP=sp;return;
}


function __ZN2cl8PlatformC2EP15_cl_platform_id($this,$platform){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$platform;
 var $3=$1;
 var $4=$3;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($4);
 var $5=$2;
 var $6=$3;
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=$5;
 STACKTOP=sp;return;
}


function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 STACKTOP=sp;return;
}


function __ZN2cl8PlatformaSERKS0_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=$8;
 var $10=__ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($7,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($this,$rhs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$this;
 $2=$rhs;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($3);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($3)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=__ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($3);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $3;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($4);
 STACKTOP=sp;return $5;
}


function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $2;
 $2=$0;
 STACKTOP=sp;return -32;
}


function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP=sp;return;
}


function __ZNSt3__113__vector_baseIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18=sp;
 var $19;
 var $20;
 var $21=(sp)+(8);
 var $22=(sp)+(16);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 $30=$this;
 var $31=$30;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 if($34){label=2;break;}else{label=6;break;}
 case 2: 
 $29=$31;
 var $36=$29;
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 $27=$36;
 $28=$38;
 var $39=$27;
 label=3;break;
 case 3: 
 var $41=$28;
 var $42=(($39+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)!=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 $26=$39;
 var $46=$26;
 var $47=(($46+8)|0);
 $25=$47;
 var $48=$25;
 var $49=$48;
 $24=$49;
 var $50=$24;
 var $51=$50;
 var $52=(($39+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(4))|0);
 HEAP32[(($52)>>2)]=$54;
 $23=$54;
 var $55=$23;
 $19=$51;
 $20=$55;
 var $56=$22;
 var $57=$19;
 var $58=$20;
 var $tmp_i_i_i=$18;
 var $tmp1_i_i_i=$21;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
 $16=$57;
 $17=$58;
 var $59=$16;
 var $60=$17;
 $14=$59;
 $15=$60;
 var $61=$14;
 var $62=$15;
 __ZN2cl6MemoryD1Ev($62);
 label=3;break;
 case 5: 
 $13=$31;
 var $63=$13;
 var $64=(($63+8)|0);
 $12=$64;
 var $65=$12;
 var $66=$65;
 $11=$66;
 var $67=$11;
 var $68=$67;
 var $69=(($31)|0);
 var $70=HEAP32[(($69)>>2)];
 $4=$31;
 var $71=$4;
 $3=$71;
 var $72=$3;
 var $73=(($72+8)|0);
 $2=$73;
 var $74=$2;
 var $75=$74;
 $1=$75;
 var $76=$1;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($71)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$78;
 var $82=$80;
 var $83=((($81)-($82))|0);
 var $84=(((($83|0))/(4))&-1);
 $8=$68;
 $9=$70;
 $10=$84;
 var $85=$8;
 var $86=$9;
 var $87=$10;
 $5=$85;
 $6=$86;
 $7=$87;
 var $88=$5;
 var $89=$6;
 var $90=$89;
 __ZdlPv($90);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN2cl7ContextD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl7ProgramD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6KernelD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl12CommandQueueD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl12CommandQueueC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl6KernelC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl7ProgramC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl7ContextC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($3);
 STACKTOP=sp;return;
}


function __ZN6SolverD1Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN6SolverD2Ev($2);
 STACKTOP=sp;return;
}


function __ZN6SolverD0Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 __ZN6SolverD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 STACKTOP=sp;return;
}


function __ZN2cl7NDRangeD2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZN2cl6size_tILi3EED1Ev($3);
 STACKTOP=sp;return;
}


function __ZN2cl7NDRangeC2Ev($this){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZN2cl6size_tILi3EEC1Ev($3);
 var $4=(($2+20)|0);
 HEAP32[(($4)>>2)]=0;
 STACKTOP=sp;return;
}


function __GLOBAL__I_a114(){
 var label=0;


 ___cxx_global_var_init113();
 return;
}



function _main($argc,$argv){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32;
 var $33;
 var $34;
 var $35;
 var $36;
 var $37;
 var $38;
 var $39;
 var $40;
 var $41;
 var $42;
 var $43;
 var $44;
 var $45;
 var $46;
 var $47;
 var $48;
 var $49;
 var $50;
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $56;
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63;
 var $64;
 var $65;
 var $66;
 var $67;
 var $68;
 var $69;
 var $70;
 var $71;
 var $72;
 var $73;
 var $74;
 var $75;
 var $76;
 var $77;
 var $78;
 var $79=sp;
 var $80=(sp)+(16);
 var $81;
 var $82;
 var $use_gpu;
 var $use_interop;
 var $use_filter;
 var $i;
 var $83=(sp)+(32);
 var $84=(sp)+(48);
 var $85=(sp)+(64);
 var $86=(sp)+(80);
 var $87=(sp)+(96);
 var $app;
 var $e;
 $76=0;
 $77=$argc;
 $78=$argv;
 var $88=__ZN6global3parEv();
 $74=$79;
 $75=3608;
 var $89=$74;
 var $90=$75;
 $72=$89;
 $73=$90;
 var $91=$72;
 var $92=$91;
 var $93=(($91)|0);
 $71=$93;
 var $94=$71;
 $70=$94;
 var $95=$70;
 var $96=$95;
 $69=$96;
 var $97=$69;
 var $98=$97;
 $68=$98;
 var $99=$68;
 var $100=(($97)|0);
 var $101=$73;
 var $102=$73;
 $67=$102;
 var $103=$67;
 var $104=_strlen($103);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($91,$101,$104);
 $65=$80;
 $66=3752;
 var $105=$65;
 var $106=$66;
 $63=$105;
 $64=$106;
 var $107=$63;
 var $108=$107;
 var $109=(($107)|0);
 $62=$109;
 var $110=$62;
 $61=$110;
 var $111=$61;
 var $112=$111;
 $60=$112;
 var $113=$60;
 var $114=$113;
 $59=$114;
 var $115=$59;
 var $116=(($113)|0);
 var $117=$64;
 var $118=$64;
 $58=$118;
 var $119=$58;
 var $120=(function() { try { __THREW__ = 0; return _strlen($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($107,$117,$120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 label=4;break;
 case 4: 
 (function() { try { __THREW__ = 0; return __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($88,$79,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($80);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($79);
 $use_gpu=1;
 $use_interop=0;
 $use_filter=0;
 $i=0;
 label=6;break;
 case 6: 
 var $124=$i;
 var $125=$77;
 var $126=($124|0)<($125|0);
 if($126){label=7;break;}else{var $131=0;label=8;break;}
 case 7: 
 var $128=$78;
 var $129=($128|0)!=0;
 var $131=$129;label=8;break;
 case 8: 
 var $131;
 if($131){label=9;break;}else{label=24;break;}
 case 9: 
 var $133=$i;
 var $134=$78;
 var $135=(($134+($133<<2))|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($136|0)!=0;
 if($137){label=14;break;}else{label=10;break;}
 case 10: 
 label=23;break;
 case 11: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 $81=$141;
 var $142=$140$1;
 $82=$142;
 label=13;break;
 case 12: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 $81=$145;
 var $146=$144$1;
 $82=$146;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($80);
 label=13;break;
 case 13: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($79);
 label=65;break;
 case 14: 
 var $149=$i;
 var $150=$78;
 var $151=(($150+($149<<2))|0);
 var $152=HEAP32[(($151)>>2)];
 $56=$152;
 $57=2640;
 var $153=$56;
 var $154=$57;
 var $155=_strstr($153,$154);
 var $156=($155|0)!=0;
 if($156){label=15;break;}else{label=16;break;}
 case 15: 
 $use_gpu=0;
 label=22;break;
 case 16: 
 var $159=$i;
 var $160=$78;
 var $161=(($160+($159<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 $54=$162;
 $55=2256;
 var $163=$54;
 var $164=$55;
 var $165=_strstr($163,$164);
 var $166=($165|0)!=0;
 if($166){label=17;break;}else{label=18;break;}
 case 17: 
 $use_gpu=1;
 label=21;break;
 case 18: 
 var $169=$i;
 var $170=$78;
 var $171=(($170+($169<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 $52=$172;
 $53=1592;
 var $173=$52;
 var $174=$53;
 var $175=_strstr($173,$174);
 var $176=($175|0)!=0;
 if($176){label=19;break;}else{label=20;break;}
 case 19: 
 $use_interop=1;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $182=$i;
 var $183=((($182)+(1))|0);
 $i=$183;
 label=6;break;
 case 24: 
 var $185=$use_gpu;
 var $186=($185|0)==1;
 if($186){label=25;break;}else{label=26;break;}
 case 25: 
 var $190=1024;label=27;break;
 case 26: 
 var $190=656;label=27;break;
 case 27: 
 var $190;
 var $191=(($190)|0);
 var $192=_printf(1280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$191,tempVarArgs)); STACKTOP=tempVarArgs;
 var $193=__ZN6global3parEv();
 $50=$83;
 $51=416;
 var $194=$50;
 var $195=$51;
 $48=$194;
 $49=$195;
 var $196=$48;
 var $197=$196;
 var $198=(($196)|0);
 $47=$198;
 var $199=$47;
 $46=$199;
 var $200=$46;
 var $201=$200;
 $45=$201;
 var $202=$45;
 var $203=$202;
 $44=$203;
 var $204=$44;
 var $205=(($202)|0);
 var $206=$49;
 var $207=$49;
 $43=$207;
 var $208=$43;
 var $209=_strlen($208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($196,$206,$209);
 var $210=$use_gpu;
 (function() { try { __THREW__ = 0; return __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($193,$83,$210) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($83);
 var $212=$use_interop;
 var $213=($212|0)==1;
 if($213){label=29;break;}else{label=33;break;}
 case 29: 
 var $215=__ZN6global3parEv();
 $41=$84;
 $42=208;
 var $216=$41;
 var $217=$42;
 $39=$216;
 $40=$217;
 var $218=$39;
 var $219=$218;
 var $220=(($218)|0);
 $38=$220;
 var $221=$38;
 $37=$221;
 var $222=$37;
 var $223=$222;
 $36=$223;
 var $224=$36;
 var $225=$224;
 $35=$225;
 var $226=$35;
 var $227=(($224)|0);
 var $228=$40;
 var $229=$40;
 $34=$229;
 var $230=$34;
 var $231=_strlen($230);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($218,$228,$231);
 (function() { try { __THREW__ = 0; return __ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($215,$84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($84);
 label=36;break;
 case 31: 
 var $234$0 = ___cxa_find_matching_catch(-1, -1); var $234$1 = tempRet0;
 var $235=$234$0;
 $81=$235;
 var $236=$234$1;
 $82=$236;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($83);
 label=65;break;
 case 32: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1); var $238$1 = tempRet0;
 var $239=$238$0;
 $81=$239;
 var $240=$238$1;
 $82=$240;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($84);
 label=65;break;
 case 33: 
 var $242=__ZN6global3parEv();
 $32=$85;
 $33=208;
 var $243=$32;
 var $244=$33;
 $30=$243;
 $31=$244;
 var $245=$30;
 var $246=$245;
 var $247=(($245)|0);
 $29=$247;
 var $248=$29;
 $28=$248;
 var $249=$28;
 var $250=$249;
 $27=$250;
 var $251=$27;
 var $252=$251;
 $26=$252;
 var $253=$26;
 var $254=(($251)|0);
 var $255=$31;
 var $256=$31;
 $25=$256;
 var $257=$25;
 var $258=_strlen($257);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($245,$255,$258);
 (function() { try { __THREW__ = 0; return __ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($242,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=35;break; }
 case 34: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($85);
 label=36;break;
 case 35: 
 var $261$0 = ___cxa_find_matching_catch(-1, -1); var $261$1 = tempRet0;
 var $262=$261$0;
 $81=$262;
 var $263=$261$1;
 $82=$263;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($85);
 label=65;break;
 case 36: 
 var $265=$use_filter;
 var $266=($265|0)==1;
 if($266){label=37;break;}else{label=40;break;}
 case 37: 
 var $268=__ZN6global3parEv();
 $23=$86;
 $24=4080;
 var $269=$23;
 var $270=$24;
 $21=$269;
 $22=$270;
 var $271=$21;
 var $272=$271;
 var $273=(($271)|0);
 $20=$273;
 var $274=$20;
 $19=$274;
 var $275=$19;
 var $276=$275;
 $18=$276;
 var $277=$18;
 var $278=$277;
 $17=$278;
 var $279=$17;
 var $280=(($277)|0);
 var $281=$22;
 var $282=$22;
 $16=$282;
 var $283=$16;
 var $284=_strlen($283);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($271,$281,$284);
 (function() { try { __THREW__ = 0; return __ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($268,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
 label=43;break;
 case 39: 
 var $287$0 = ___cxa_find_matching_catch(-1, -1); var $287$1 = tempRet0;
 var $288=$287$0;
 $81=$288;
 var $289=$287$1;
 $82=$289;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
 label=65;break;
 case 40: 
 var $291=__ZN6global3parEv();
 $14=$87;
 $15=4080;
 var $292=$14;
 var $293=$15;
 $12=$292;
 $13=$293;
 var $294=$12;
 var $295=$294;
 var $296=(($294)|0);
 $11=$296;
 var $297=$11;
 $10=$297;
 var $298=$10;
 var $299=$298;
 $9=$299;
 var $300=$9;
 var $301=$300;
 $8=$301;
 var $302=$8;
 var $303=(($300)|0);
 var $304=$13;
 var $305=$13;
 $7=$305;
 var $306=$7;
 var $307=_strlen($306);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($294,$304,$307);
 (function() { try { __THREW__ = 0; return __ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($291,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($87);
 label=43;break;
 case 42: 
 var $310$0 = ___cxa_find_matching_catch(-1, -1); var $310$1 = tempRet0;
 var $311=$310$0;
 $81=$311;
 var $312=$310$1;
 $82=$312;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($87);
 label=65;break;
 case 43: 
 var $314=__ZN11Application3getEv();
 $app=$314;
 var $315=$app;
 var $316=($315|0)==0;
 if($316){label=44;break;}else{label=45;break;}
 case 44: 
 var $318=__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,3760);
 $5=$318;
 $6=8;
 var $319=$5;
 var $320=$6;
 var $321=FUNCTION_TABLE[$320]($319);
 _exit(1);
 throw "Reached an unreachable!";
 case 45: 
 var $323=$app;
 (function() { try { __THREW__ = 0; return __ZN11Application3runEv($323) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=47;break; }
 case 46: 
 label=64;break;
 case 47: 
 var $326$0 = ___cxa_find_matching_catch(-1, -1,__ZTISt9exception,0); var $326$1 = tempRet0;
 var $327=$326$0;
 $81=$327;
 var $328=$326$1;
 $82=$328;
 label=48;break;
 case 48: 
 var $330=$82;
 var $331=_llvm_eh_typeid_for(__ZTISt9exception);
 var $332=($330|0)==($331|0);
 if($332){label=49;break;}else{label=55;break;}
 case 49: 
 var $334=$81;
 var $335=___cxa_begin_catch($334);
 var $336=$335;
 $e=$336;
 var $337=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,3256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=62;break; }
 case 50: 
 var $339=$e;
 var $340=$339;
 var $341=HEAP32[(($340)>>2)];
 var $342=(($341+8)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=FUNCTION_TABLE[$343]($339);
 var $345=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($337,$344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=62;break; }
 case 51: 
 $3=$345;
 $4=8;
 var $347=$3;
 var $348=$4;
 var $349=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$348]($347) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=62;break; }
 case 52: 
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return _exit(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=62;break; }
 case 54: 
 throw "Reached an unreachable!";
 case 55: 
 var $353=$81;
 var $354=___cxa_begin_catch($353);
 var $355=(function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(17608,3448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=60;break; }
 case 56: 
 $1=$355;
 $2=8;
 var $357=$1;
 var $358=$2;
 var $359=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$358]($357) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=60;break; }
 case 57: 
 label=58;break;
 case 58: 
 (function() { try { __THREW__ = 0; return _exit(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=60;break; }
 case 59: 
 throw "Reached an unreachable!";
 case 60: 
 var $363$0 = ___cxa_find_matching_catch(-1, -1); var $363$1 = tempRet0;
 var $364=$363$0;
 $81=$364;
 var $365=$363$1;
 $82=$365;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=66;break; }
 case 61: 
 label=65;break;
 case 62: 
 var $368$0 = ___cxa_find_matching_catch(-1, -1); var $368$1 = tempRet0;
 var $369=$368$0;
 $81=$369;
 var $370=$368$1;
 $82=$370;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=66;break; }
 case 63: 
 label=65;break;
 case 64: 
 STACKTOP=sp;return 0;
 case 65: 
 var $374=$81;
 var $375=$82;
 var $376$0=$374;
 var $376$1=0;
 var $377$0=$376$0;
 var $377$1=$375;
 ___resumeException($377$0)
 case 66: 
 var $379$0 = ___cxa_find_matching_catch(-1, -1,0); var $379$1 = tempRet0;
 var $380=$379$0;
 ___clang_call_terminate($380);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}
Module["_main"] = _main;

function __ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$key;
 var $3=$1;
 var $4=$2;
 __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($3,$4,1);
 STACKTOP=sp;return;
}


function __ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$this;
 $2=$key;
 var $3=$1;
 var $4=$2;
 __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($3,$4,0);
 STACKTOP=sp;return;
}


function ___cxx_global_var_init136(){
 var label=0;


 __ZN2cl7NDRangeC1Ev(17928);
 var $1=_atexit((854),17928,___dso_handle);
 return;
}


function __ZN6Solver3getEv(){
 var label=0;


 var $1=HEAP32[((17976)>>2)];
 return $1;
}


function __ZN6Solver6createENS_4TypeE($type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$type;
 var $4=__ZN4Demo3getEv();
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZN5error8throw_exEPKcS1_i(3216,3680,33);
 label=3;break;
 case 3: 
 var $8=$1;
 if(($8|0)==0){ label=4;break;}else{label=7;break;}
 case 4: 
 var $10=__Znwj(44);
 var $11=$10;
 (function() { try { __THREW__ = 0; return __ZN27LorenzAttractorOpenCLSolverC2Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $13=$11;
 HEAP32[((17976)>>2)]=$13;
 label=8;break;
 case 6: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=$15$0;
 $2=$16;
 var $17=$15$1;
 $3=$17;
 __ZdlPv($10);
 label=11;break;
 case 7: 
 label=8;break;
 case 8: 
 var $20=HEAP32[((17976)>>2)];
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=10;break;}
 case 9: 
 __ZN5error8throw_exEPKcS1_i(2616,3680,45);
 label=10;break;
 case 10: 
 var $24=HEAP32[((17976)>>2)];
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+8)|0);
 var $28=HEAP32[(($27)>>2)];
 FUNCTION_TABLE[$28]($24);
 STACKTOP=sp;return;
 case 11: 
 var $30=$2;
 var $31=$3;
 var $32$0=$30;
 var $32$1=0;
 var $33$0=$32$0;
 var $33$1=$31;
 ___resumeException($33$0)
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a141(){
 var label=0;


 ___cxx_global_var_init136();
 return;
}


function __ZNSt3__18ios_base4InitC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(24);
 var $5=HEAP32[((_stdin)>>2)];
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(16704,$5,16832);
 HEAP32[((17696)>>2)]=6852;
 HEAP32[((17704)>>2)]=6872;
 HEAP32[((17700)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17704,16704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17704);
 ___resumeException($7$0)
 case 3: 
 HEAP32[((17776)>>2)]=0;
 HEAP32[((17780)>>2)]=-1;
 var $8=HEAP32[((_stdout)>>2)];
 var $9=$4;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP32[((16608)>>2)]=6584;
 __ZNSt3__16localeC2Ev(16612);
 HEAP32[((16616)>>2)]=0; HEAP32[((16620)>>2)]=0; HEAP32[((16624)>>2)]=0; HEAP32[((16628)>>2)]=0; HEAP32[((16632)>>2)]=0; HEAP32[((16636)>>2)]=0;
 HEAP32[((16608)>>2)]=7072;
 HEAP32[((16640)>>2)]=$8;
 __ZNSt3__16localeC2ERKS0_($4,16612);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($4,17032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((16608)>>2)]=6584;
 __ZNSt3__16localeD2Ev(16612);
 ___resumeException($12$0)
 case 5: 
 var $13=$10;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((16644)>>2)]=$13;
 HEAP32[((16648)>>2)]=16840;
 var $14=$10;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=FUNCTION_TABLE[$17]($13);
 var $19=($18&1);
 HEAP8[(16652)]=$19;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[((17432)>>2)]=6756;
 HEAP32[((17436)>>2)]=6776;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17436,16608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17436);
 ___resumeException($21$0)
 case 7: 
 HEAP32[((17508)>>2)]=0;
 HEAP32[((17512)>>2)]=-1;
 var $22=HEAP32[((_stderr)>>2)];
 var $23=$3;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 HEAP32[((16656)>>2)]=6584;
 __ZNSt3__16localeC2Ev(16660);
 HEAP32[((16664)>>2)]=0; HEAP32[((16668)>>2)]=0; HEAP32[((16672)>>2)]=0; HEAP32[((16676)>>2)]=0; HEAP32[((16680)>>2)]=0; HEAP32[((16684)>>2)]=0;
 HEAP32[((16656)>>2)]=7072;
 HEAP32[((16688)>>2)]=$22;
 __ZNSt3__16localeC2ERKS0_($3,16660);
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,17032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((16656)>>2)]=6584;
 __ZNSt3__16localeD2Ev(16660);
 ___resumeException($26$0)
 case 9: 
 var $27=$24;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((16692)>>2)]=$27;
 HEAP32[((16696)>>2)]=16848;
 var $28=$24;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+28)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($27);
 var $33=($32&1);
 HEAP8[(16700)]=$33;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 HEAP32[((17608)>>2)]=6756;
 HEAP32[((17612)>>2)]=6776;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17612,16656) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17612);
 ___resumeException($35$0)
 case 11: 
 HEAP32[((17684)>>2)]=0;
 HEAP32[((17688)>>2)]=-1;
 var $36=HEAP32[((17608)>>2)];
 var $37=((($36)-(12))|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $_sum6=((($39)+(24))|0);
 var $40=((17608+$_sum6)|0);
 var $41=$40;
 var $42=HEAP32[(($41)>>2)];
 HEAP32[((17520)>>2)]=6756;
 HEAP32[((17524)>>2)]=6776;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17524,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17524);
 ___resumeException($44$0)
 case 13: 
 HEAP32[((17596)>>2)]=0;
 HEAP32[((17600)>>2)]=-1;
 var $45=HEAP32[((17696)>>2)];
 var $46=((($45)-(12))|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $_sum9=((($48)+(72))|0);
 var $49=((17696+$_sum9)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=17432;
 var $51=HEAP32[((17608)>>2)];
 var $52=((($51)-(12))|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $_sum10=((($54)+(4))|0);
 var $55=((17608+$_sum10)|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$57|8192;
 HEAP32[(($56)>>2)]=$58;
 var $59=HEAP32[((17608)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum11=((($62)+(72))|0);
 var $63=((17608+$_sum11)|0);
 var $64=$63;
 HEAP32[(($64)>>2)]=17432;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(16552,$5,16856);
 HEAP32[((17344)>>2)]=6804;
 HEAP32[((17352)>>2)]=6824;
 HEAP32[((17348)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17352,16552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17352);
 ___resumeException($66$0)
 case 15: 
 HEAP32[((17424)>>2)]=0;
 HEAP32[((17428)>>2)]=-1;
 var $67=$2;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 HEAP32[((16456)>>2)]=6512;
 __ZNSt3__16localeC2Ev(16460);
 HEAP32[((16464)>>2)]=0; HEAP32[((16468)>>2)]=0; HEAP32[((16472)>>2)]=0; HEAP32[((16476)>>2)]=0; HEAP32[((16480)>>2)]=0; HEAP32[((16484)>>2)]=0;
 HEAP32[((16456)>>2)]=7000;
 HEAP32[((16488)>>2)]=$8;
 __ZNSt3__16localeC2ERKS0_($2,16460);
 var $68=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,17024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((16456)>>2)]=6512;
 __ZNSt3__16localeD2Ev(16460);
 ___resumeException($70$0)
 case 17: 
 var $71=$68;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((16492)>>2)]=$71;
 HEAP32[((16496)>>2)]=16864;
 var $72=$68;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($71);
 var $77=($76&1);
 HEAP8[(16500)]=$77;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 HEAP32[((17064)>>2)]=6708;
 HEAP32[((17068)>>2)]=6728;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17068,16456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17068);
 ___resumeException($79$0)
 case 19: 
 HEAP32[((17140)>>2)]=0;
 HEAP32[((17144)>>2)]=-1;
 var $80=$1;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 HEAP32[((16504)>>2)]=6512;
 __ZNSt3__16localeC2Ev(16508);
 HEAP32[((16512)>>2)]=0; HEAP32[((16516)>>2)]=0; HEAP32[((16520)>>2)]=0; HEAP32[((16524)>>2)]=0; HEAP32[((16528)>>2)]=0; HEAP32[((16532)>>2)]=0;
 HEAP32[((16504)>>2)]=7000;
 HEAP32[((16536)>>2)]=$22;
 __ZNSt3__16localeC2ERKS0_($1,16508);
 var $81=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,17024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((16504)>>2)]=6512;
 __ZNSt3__16localeD2Ev(16508);
 ___resumeException($83$0)
 case 21: 
 var $84=$81;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((16540)>>2)]=$84;
 HEAP32[((16544)>>2)]=16872;
 var $85=$81;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+28)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($84);
 var $90=($89&1);
 HEAP8[(16548)]=$90;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 HEAP32[((17240)>>2)]=6708;
 HEAP32[((17244)>>2)]=6728;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17244,16504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17244);
 ___resumeException($92$0)
 case 23: 
 HEAP32[((17316)>>2)]=0;
 HEAP32[((17320)>>2)]=-1;
 var $93=HEAP32[((17240)>>2)];
 var $94=((($93)-(12))|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $_sum18=((($96)+(24))|0);
 var $97=((17240+$_sum18)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 HEAP32[((17152)>>2)]=6708;
 HEAP32[((17156)>>2)]=6728;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(17156,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(17156);
 ___resumeException($101$0)
 case 25: 
 HEAP32[((17228)>>2)]=0;
 HEAP32[((17232)>>2)]=-1;
 var $102=HEAP32[((17344)>>2)];
 var $103=((($102)-(12))|0);
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $_sum21=((($105)+(72))|0);
 var $106=((17344+$_sum21)|0);
 var $107=$106;
 HEAP32[(($107)>>2)]=17064;
 var $108=HEAP32[((17240)>>2)];
 var $109=((($108)-(12))|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $_sum22=((($111)+(4))|0);
 var $112=((17240+$_sum22)|0);
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=$114|8192;
 HEAP32[(($113)>>2)]=$115;
 var $116=HEAP32[((17240)>>2)];
 var $117=((($116)-(12))|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $_sum23=((($119)+(72))|0);
 var $120=((17240+$_sum23)|0);
 var $121=$120;
 HEAP32[(($121)>>2)]=17064;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(17432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(17520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(17064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(17152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6512;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6512;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17024);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$this;
 var $6=($__n|0)>0;
 if($6){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $8=$__s;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,$__n,$10);
 var $_0=$11;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $12=HEAP32[(($5)>>2)];
 var $13=(($12+52)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=HEAP32[(($_012)>>2)];
 var $16=FUNCTION_TABLE[$14]($this,$15);
 var $17=($16|0)==-1;
 if($17){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=((($__i_03)+(1))|0);
 var $20=(($_012+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_012=$20;var $__i_03=$19;label=4;break;}else{var $_0=$19;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=$__1buf;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+4)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$pbase_0;
 var $35=HEAP32[(($20)>>2)];
 var $36=_fwrite($34,1,1,$35);
 var $37=($36|0)==1;
 if($37){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $39=($28|0)==1;
 var $40=($28>>>0)<2;
 if($40){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $42=HEAP32[(($__extbe)>>2)];
 var $43=$42;
 var $44=((($43)-($19))|0);
 var $45=HEAP32[(($20)>>2)];
 var $46=_fwrite($14,1,$44,$45);
 var $47=($46|0)==($44|0);
 if($47){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $49=HEAP32[(($__e)>>2)];
 var $_pbase_0=($39?$49:$pbase_0);
 if($39){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $50=($1?0:$__c);
 var $_0=$50;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=6512;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=7400;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,17024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=6512;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6512;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6512;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17024);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(168);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_01=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 HEAP32[(($__ci)>>2)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+4)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_01=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($13)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($21>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($32)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=22;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=10;break;}
 case 9: 
 var $28=(($this+40)|0);
 var $29=(($this+36)|0);
 var $30=(($__extbuf)|0);
 var $31=(($__1buf+4)|0);
 var $32=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $34=(($__extbuf)|0);
 var $35=HEAP8[($34)];
 var $36=(($35<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$36;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $38=HEAP32[(($28)>>2)];
 var $39=$38;
 var $ld$0$0=(($39)|0);
 var $40$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($39+4)|0);
 var $40$1=HEAP32[(($ld$1$1)>>2)];
 var $41=HEAP32[(($29)>>2)];
 var $42=(($__extbuf+$__nread_0)|0);
 var $43=$41;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=FUNCTION_TABLE[$46]($41,$38,$30,$42,$__enxt,$__1buf,$31,$__inxt);
 if(($47|0)==1){ label=12;break;}else if(($47|0)==3){ label=14;break;}else if(($47|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $49=HEAP32[(($28)>>2)];
 var $50=$49;
 var $st$2$0=(($50)|0);
 HEAP32[(($st$2$0)>>2)]=$40$0;
 var $st$3$1=(($50+4)|0);
 HEAP32[(($st$3$1)>>2)]=$40$1;
 var $51=($__nread_0|0)==8;
 if($51){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $53=HEAP32[(($32)>>2)];
 var $54=_fgetc($53);
 var $55=($54|0)==-1;
 if($55){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $57=HEAP8[($30)];
 var $58=(($57<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$58;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $60=(($54)&255);
 HEAP8[($42)]=$60;
 var $61=((($__nread_0)+(1))|0);
 var $__nread_0=$61;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $62=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $64=($__i2_0|0)>0;
 if($64){label=19;break;}else{label=21;break;}
 case 19: 
 var $66=((($__i2_0)-(1))|0);
 var $67=(($__extbuf+$66)|0);
 var $68=HEAP8[($67)];
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($62)>>2)];
 var $71=_ungetc($69,$70);
 var $72=($71|0)==-1;
 if($72){var $_0=-1;label=22;break;}else{var $__i2_0=$66;label=18;break;}
 case 20: 
 var $74=HEAP32[(($__1buf)>>2)];
 var $75=(($this+48)|0);
 HEAP32[(($75)>>2)]=$74;
 var $_0=$74;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17032);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$this;
 var $6=($__n|0)>0;
 if($6){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__s,1,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $11=HEAP32[(($5)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP8[($_012)];
 var $15=($14&255);
 var $16=FUNCTION_TABLE[$13]($this,$15);
 var $17=($16|0)==-1;
 if($17){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=((($__i_03)+(1))|0);
 var $20=(($_012+1)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_012=$20;var $__i_03=$19;label=4;break;}else{var $_0=$19;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($__1buf,1,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+1)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=HEAP32[(($20)>>2)];
 var $35=_fwrite($pbase_0,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($28|0)==1;
 var $39=($28>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($19))|0);
 var $44=HEAP32[(($20)>>2)];
 var $45=_fwrite($14,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $49=($1?0:$__c);
 var $_0=$49;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=6584;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=7472;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,17032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=6584;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17032);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(168);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_01=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 var $16=(($15)&255);
 HEAP8[($__ci)]=$16;
 var $17=(($this+36)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($this+40)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($__ci+1)|0);
 var $22=(($__extbuf)|0);
 var $23=(($__extbuf+8)|0);
 var $24=$18;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($18,$20,$__ci,$21,$__inxt,$22,$23,$__enxt);
 if(($28|0)==2|($28|0)==1){ var $_01=-1;label=11;break;}else if(($28|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $30=HEAP32[(($13)>>2)];
 var $31=(($30)&255);
 HEAP8[($22)]=$31;
 var $32=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$32;
 label=7;break;
 case 7: 
 var $33=(($this+32)|0);
 label=8;break;
 case 8: 
 var $34=HEAP32[(($__enxt)>>2)];
 var $35=($34>>>0)>($22>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=((($34)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$37;
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=HEAP32[(($33)>>2)];
 var $41=_ungetc($39,$40);
 var $42=($41|0)==-1;
 if($42){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=23;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=10;break;}
 case 9: 
 var $28=(($this+40)|0);
 var $29=(($this+36)|0);
 var $30=(($__extbuf)|0);
 var $31=(($__1buf+1)|0);
 var $32=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $34=(($__extbuf)|0);
 var $35=HEAP8[($34)];
 HEAP8[($__1buf)]=$35;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($28)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($29)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$30,$41,$__enxt,$__1buf,$31,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($28)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($32)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($30)];
 HEAP8[($__1buf)]=$56;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $58=(($53)&255);
 HEAP8[($41)]=$58;
 var $59=((($__nread_0)+(1))|0);
 var $__nread_0=$59;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $60=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $62=($__i2_0|0)>0;
 if($62){label=19;break;}else{label=21;break;}
 case 19: 
 var $64=((($__i2_0)-(1))|0);
 var $65=(($__extbuf+$64)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=HEAP32[(($60)>>2)];
 var $69=_ungetc($67,$68);
 var $70=($69|0)==-1;
 if($70){var $_0=-1;label=23;break;}else{var $__i2_0=$64;label=18;break;}
 case 20: 
 var $72=HEAP8[($__1buf)];
 var $73=($72&255);
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $76=$72;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $76=$_pre;label=22;break;
 case 22: 
 var $76;
 var $77=($76&255);
 var $_0=$77;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a257(){
 var label=0;


 __ZNSt3__18ios_base4InitC2Ev(0);
 var $1=_atexit((452),17784,___dso_handle);
 return;
}


function __ZNSt3__114__shared_countD2Ev($this){
 var label=0;


 return;
}


function __ZNSt3__114__shared_count12__add_sharedEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+1,tempValue);
 return;
}


function __ZNSt3__114__shared_count16__release_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_0=0;label=3;break;}
 case 2: 
 var $5=$this;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($this);
 var $_0=1;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorC2EPKc($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4672;
 var $2=_strlen($msg);
 var $3=((($2)+(13))|0);
 var $4=(function() { try { __THREW__ = 0; return __Znaj($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=(($this+4)|0);
 var $7=((($2)+(1))|0);
 var $8=$4;
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$2;
 HEAP32[(($8)>>2)]=$2;
 var $11=(($4+12)|0);
 HEAP32[(($6)>>2)]=$11;
 var $12=(($4+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($11, $msg, $7)|0);
 return;
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=(($this)|0);

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4672;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4672;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt11logic_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=4608;
 var $3=(($this+4)|0);
 var $4=$msg;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($msg+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $14=$10;label=4;break;
 case 3: 
 var $12=$msg;
 var $13=(($12+1)|0);
 var $14=$13;label=4;break;
 case 4: 
 var $14;
 var $15=_strlen($14);
 var $16=((($15)+(13))|0);
 var $17=(function() { try { __THREW__ = 0; return __Znaj($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $19=((($15)+(1))|0);
 var $20=$17;
 var $21=(($17+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=$15;
 HEAP32[(($20)>>2)]=$15;
 var $23=(($17+12)|0);
 HEAP32[(($3)>>2)]=$23;
 var $24=(($17+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 assert($19 % 1 === 0);(_memcpy($23, $14, $19)|0);
 return;
 case 6: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;

 ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorC2EPKc($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4608;
 var $2=_strlen($msg);
 var $3=((($2)+(13))|0);
 var $4=(function() { try { __THREW__ = 0; return __Znaj($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=(($this+4)|0);
 var $7=((($2)+(1))|0);
 var $8=$4;
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$2;
 HEAP32[(($8)>>2)]=$2;
 var $11=(($4+12)|0);
 HEAP32[(($6)>>2)]=$11;
 var $12=(($4+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($11, $msg, $7)|0);
 return;
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=(($this)|0);

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4608;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4608;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt13runtime_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt12length_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4672;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt14overflow_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4608;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;


 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}


function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__112__do_message7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strerror($ev);
 var $2=_strlen($1);
 var $3=($2>>>0)>4294967279;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $6=($2>>>0)<11;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$2<<1;
 var $9=(($8)&255);
 var $10=$agg_result;
 var $11=$agg_result;
 HEAP8[($11)]=$9;
 var $12=(($10+1)|0);
 var $__p_0_i=$12;label=6;break;
 case 5: 
 var $13=((($2)+(16))|0);
 var $14=$13&-16;
 var $15=__Znwj($14);
 var $16=(($agg_result+8)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=$14|1;
 var $18=(($agg_result)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($agg_result+4)|0);
 HEAP32[(($19)>>2)]=$2;
 var $__p_0_i=$15;label=6;break;
 case 6: 
 var $__p_0_i;
 assert($2 % 1 === 0);(_memcpy($__p_0_i, $1, $2)|0);
 var $20=(($__p_0_i+$2)|0);
 HEAP8[($20)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$what_arg;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($ec)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=19;break;}else{label=2;break;}
 case 2: 
 var $7=HEAP8[($1)];
 var $8=($7&255);
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 var $12=(($what_arg+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $16=$13;label=5;break;
 case 4: 
 var $15=$8>>>1;
 var $16=$15;label=5;break;
 case 5: 
 var $16;
 var $17=($16|0)==0;
 if($17){var $21=$4;label=7;break;}else{label=6;break;}
 case 6: 
 var $19=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,2456,2);
 var $_pre=HEAP32[(($3)>>2)];
 var $21=$_pre;label=7;break;
 case 7: 
 var $21;
 var $22=(($ec+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+24)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($2,$23,$21);
 var $28=$2;
 var $29=HEAP8[($28)];
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($2+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $38=$34;label=10;break;
 case 9: 
 var $36=$2;
 var $37=(($36+1)|0);
 var $38=$37;label=10;break;
 case 10: 
 var $38;
 var $39=($29&255);
 var $40=$39&1;
 var $41=($40|0)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($2+4)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=13;break;
 case 12: 
 var $46=$39>>>1;
 var $47=$46;label=13;break;
 case 13: 
 var $47;
 var $48=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$38,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=16;break; }
 case 14: 
 var $49=HEAP8[($28)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=19;break;}else{label=15;break;}
 case 15: 
 var $53=(($2+8)|0);
 var $54=HEAP32[(($53)>>2)];
 __ZdlPv($54);
 label=19;break;
 case 16: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP8[($28)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=18;break;}else{label=17;break;}
 case 17: 
 var $61=(($2+8)|0);
 var $62=HEAP32[(($61)>>2)];
 __ZdlPv($62);
 label=18;break;
 case 18: 
 ___resumeException($56$0)
 case 19: 
 var $63=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=_strlen($what_arg);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$2;
 var $12=$2;
 HEAP8[($12)]=$10;
 var $13=(($11+1)|0);
 var $__p_0_i=$13;label=6;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=__Znwj($15);
 var $17=(($2+8)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$15|1;
 var $19=(($2)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($2+4)|0);
 HEAP32[(($20)>>2)]=$3;
 var $__p_0_i=$16;label=6;break;
 case 6: 
 var $__p_0_i;
 assert($3 % 1 === 0);(_memcpy($__p_0_i, $what_arg, $3)|0);
 var $21=(($__p_0_i+$3)|0);
 HEAP8[($21)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$ec,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 var $23=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($23,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 var $25=$1;
 var $26=HEAP8[($25)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($1+8)|0);
 var $31=HEAP32[(($30)>>2)];
 __ZdlPv($31);
 label=10;break;
 case 10: 
 var $32=$2;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 __ZdlPv($38);
 label=12;break;
 case 12: 
 var $39=(($this)|0);
 HEAP32[(($39)>>2)]=6968;
 var $40=(($this+8)|0);
 var $41=$ec;
 var $42=$40;
 var $ld$0$0=(($41)|0);
 var $43$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($41+4)|0);
 var $43$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($42)|0);
 HEAP32[(($st$2$0)>>2)]=$43$0;
 var $st$3$1=(($42+4)|0);
 HEAP32[(($st$3$1)>>2)]=$43$1;
 STACKTOP=sp;return;
 case 13: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1); var $45$1 = tempRet0;
 var $46=$45$0;
 var $47=$45$1;
 var $_0=$47;var $_01=$46;label=16;break;
 case 14: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $52=$1;
 var $53=HEAP8[($52)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){var $_0=$51;var $_01=$50;label=16;break;}else{label=15;break;}
 case 15: 
 var $57=(($1+8)|0);
 var $58=HEAP32[(($57)>>2)];
 __ZdlPv($58);
 var $_0=$51;var $_01=$50;label=16;break;
 case 16: 
 var $_01;
 var $_0;
 var $59=$2;
 var $60=HEAP8[($59)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=(($2+8)|0);
 var $65=HEAP32[(($64)>>2)];
 __ZdlPv($65);
 label=18;break;
 case 18: 
 var $66$0=$_01;
 var $66$1=0;
 var $67$0=$66$0;
 var $67$1=$_0;
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__112system_errorD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 return;
}


function __ZNSt3__112__next_primeEj($n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n>>>0)<212;
 if($1){var $_0_ph_i=13536;var $__len_0_ph_i=48;label=2;break;}else{label=7;break;}
 case 2: 
 var $__len_0_ph_i;
 var $_0_ph_i;
 var $__len_0_i=$__len_0_ph_i;label=3;break;
 case 3: 
 var $__len_0_i;
 var $3=($__len_0_i|0)==0;
 if($3){label=6;break;}else{label=4;break;}
 case 4: 
 var $5=(((($__len_0_i|0))/(2))&-1);
 var $6=(($_0_ph_i+($5<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7>>>0)<($n>>>0);
 if($8){label=5;break;}else{var $__len_0_i=$5;label=3;break;}
 case 5: 
 var $_sum_i=((($5)+(1))|0);
 var $10=(($_0_ph_i+($_sum_i<<2))|0);
 var $_neg4_i=((($__len_0_i)-(1))|0);
 var $11=((($_neg4_i)-($5))|0);
 var $_0_ph_i=$10;var $__len_0_ph_i=$11;label=2;break;
 case 6: 
 var $12=HEAP32[(($_0_ph_i)>>2)];
 var $_0=$12;label=120;break;
 case 7: 
 var $14=($n>>>0)>4294967291;
 if($14){label=8;break;}else{label=11;break;}
 case 8: 
 var $16=___cxa_allocate_exception(8);
 var $17=$16;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($17,976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $18=$16;
 HEAP32[(($18)>>2)]=4576;
 ___cxa_throw($16,11352,(104));
 throw "Reached an unreachable!";
 case 10: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 ___cxa_free_exception($16);
 ___resumeException($20$0)
 case 11: 
 var $21=(((($n>>>0))/(210))&-1);
 var $22=((($21)*(210))&-1);
 var $23=((($n)-($22))|0);
 var $_0_ph_i3=13344;var $__len_0_ph_i2=48;label=12;break;
 case 12: 
 var $__len_0_ph_i2;
 var $_0_ph_i3;
 var $__len_0_i5=$__len_0_ph_i2;label=13;break;
 case 13: 
 var $__len_0_i5;
 var $25=($__len_0_i5|0)==0;
 if($25){label=16;break;}else{label=14;break;}
 case 14: 
 var $27=(((($__len_0_i5|0))/(2))&-1);
 var $28=(($_0_ph_i3+($27<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29>>>0)<($23>>>0);
 if($30){label=15;break;}else{var $__len_0_i5=$27;label=13;break;}
 case 15: 
 var $_sum_i6=((($27)+(1))|0);
 var $32=(($_0_ph_i3+($_sum_i6<<2))|0);
 var $_neg4_i7=((($__len_0_i5)-(1))|0);
 var $33=((($_neg4_i7)-($27))|0);
 var $_0_ph_i3=$32;var $__len_0_ph_i2=$33;label=12;break;
 case 16: 
 var $34=$_0_ph_i3;
 var $35=((($34)-(13344))|0);
 var $36=$35>>2;
 var $37=((13344+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=((($38)+($22))|0);
 var $k0_0=$21;var $in_0=$36;var $storemerge=$39;label=17;break;
 case 17: 
 var $storemerge;
 var $in_0;
 var $k0_0;
 var $j_013=5;label=19;break;
 case 18: 
 var $42=($51>>>0)<47;
 if($42){var $j_013=$51;label=19;break;}else{label=21;break;}
 case 19: 
 var $j_013;
 var $44=((13536+($j_013<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(((($storemerge>>>0))/(($45>>>0)))&-1);
 var $47=($46>>>0)<($45>>>0);
 if($47){var $_0=$storemerge;label=120;break;}else{label=20;break;}
 case 20: 
 var $49=(Math_imul($46,$45)|0);
 var $50=($storemerge|0)==($49|0);
 var $51=((($j_013)+(1))|0);
 if($50){label=119;break;}else{label=18;break;}
 case 21: 
 var $52=($storemerge>>>0)<44521;
 if($52){var $_0=$storemerge;label=120;break;}else{label=22;break;}
 case 22: 
 var $53=(((($storemerge>>>0))/(211))&-1);
 var $i_016=211;var $58=$53;label=24;break;
 case 23: 
 var $55=(((($storemerge>>>0))/(($390>>>0)))&-1);
 var $56=($55>>>0)<($390>>>0);
 if($56){var $_0=$storemerge;label=120;break;}else{var $i_016=$390;var $58=$55;label=24;break;}
 case 24: 
 var $58;
 var $i_016;
 var $59=(Math_imul($58,$i_016)|0);
 var $60=($storemerge|0)==($59|0);
 if($60){label=119;break;}else{label=25;break;}
 case 25: 
 var $62=((($i_016)+(10))|0);
 var $63=(((($storemerge>>>0))/(($62>>>0)))&-1);
 var $64=($63>>>0)<($62>>>0);
 if($64){var $_0=$storemerge;label=120;break;}else{label=26;break;}
 case 26: 
 var $66=(Math_imul($63,$62)|0);
 var $67=($storemerge|0)==($66|0);
 if($67){label=119;break;}else{label=27;break;}
 case 27: 
 var $69=((($i_016)+(12))|0);
 var $70=(((($storemerge>>>0))/(($69>>>0)))&-1);
 var $71=($70>>>0)<($69>>>0);
 if($71){var $_0=$storemerge;label=120;break;}else{label=28;break;}
 case 28: 
 var $73=(Math_imul($70,$69)|0);
 var $74=($storemerge|0)==($73|0);
 if($74){label=119;break;}else{label=29;break;}
 case 29: 
 var $76=((($i_016)+(16))|0);
 var $77=(((($storemerge>>>0))/(($76>>>0)))&-1);
 var $78=($77>>>0)<($76>>>0);
 if($78){var $_0=$storemerge;label=120;break;}else{label=30;break;}
 case 30: 
 var $80=(Math_imul($77,$76)|0);
 var $81=($storemerge|0)==($80|0);
 if($81){label=119;break;}else{label=31;break;}
 case 31: 
 var $83=((($i_016)+(18))|0);
 var $84=(((($storemerge>>>0))/(($83>>>0)))&-1);
 var $85=($84>>>0)<($83>>>0);
 if($85){var $_0=$storemerge;label=120;break;}else{label=32;break;}
 case 32: 
 var $87=(Math_imul($84,$83)|0);
 var $88=($storemerge|0)==($87|0);
 if($88){label=119;break;}else{label=33;break;}
 case 33: 
 var $90=((($i_016)+(22))|0);
 var $91=(((($storemerge>>>0))/(($90>>>0)))&-1);
 var $92=($91>>>0)<($90>>>0);
 if($92){var $_0=$storemerge;label=120;break;}else{label=34;break;}
 case 34: 
 var $94=(Math_imul($91,$90)|0);
 var $95=($storemerge|0)==($94|0);
 if($95){label=119;break;}else{label=35;break;}
 case 35: 
 var $97=((($i_016)+(28))|0);
 var $98=(((($storemerge>>>0))/(($97>>>0)))&-1);
 var $99=($98>>>0)<($97>>>0);
 if($99){var $_0=$storemerge;label=120;break;}else{label=36;break;}
 case 36: 
 var $101=(Math_imul($98,$97)|0);
 var $102=($storemerge|0)==($101|0);
 if($102){label=119;break;}else{label=37;break;}
 case 37: 
 var $104=((($i_016)+(30))|0);
 var $105=(((($storemerge>>>0))/(($104>>>0)))&-1);
 var $106=($105>>>0)<($104>>>0);
 if($106){var $_0=$storemerge;label=120;break;}else{label=38;break;}
 case 38: 
 var $108=(Math_imul($105,$104)|0);
 var $109=($storemerge|0)==($108|0);
 if($109){label=119;break;}else{label=39;break;}
 case 39: 
 var $111=((($i_016)+(36))|0);
 var $112=(((($storemerge>>>0))/(($111>>>0)))&-1);
 var $113=($112>>>0)<($111>>>0);
 if($113){var $_0=$storemerge;label=120;break;}else{label=40;break;}
 case 40: 
 var $115=(Math_imul($112,$111)|0);
 var $116=($storemerge|0)==($115|0);
 if($116){label=119;break;}else{label=41;break;}
 case 41: 
 var $118=((($i_016)+(40))|0);
 var $119=(((($storemerge>>>0))/(($118>>>0)))&-1);
 var $120=($119>>>0)<($118>>>0);
 if($120){var $_0=$storemerge;label=120;break;}else{label=42;break;}
 case 42: 
 var $122=(Math_imul($119,$118)|0);
 var $123=($storemerge|0)==($122|0);
 if($123){label=119;break;}else{label=43;break;}
 case 43: 
 var $125=((($i_016)+(42))|0);
 var $126=(((($storemerge>>>0))/(($125>>>0)))&-1);
 var $127=($126>>>0)<($125>>>0);
 if($127){var $_0=$storemerge;label=120;break;}else{label=44;break;}
 case 44: 
 var $129=(Math_imul($126,$125)|0);
 var $130=($storemerge|0)==($129|0);
 if($130){label=119;break;}else{label=45;break;}
 case 45: 
 var $132=((($i_016)+(46))|0);
 var $133=(((($storemerge>>>0))/(($132>>>0)))&-1);
 var $134=($133>>>0)<($132>>>0);
 if($134){var $_0=$storemerge;label=120;break;}else{label=46;break;}
 case 46: 
 var $136=(Math_imul($133,$132)|0);
 var $137=($storemerge|0)==($136|0);
 if($137){label=119;break;}else{label=47;break;}
 case 47: 
 var $139=((($i_016)+(52))|0);
 var $140=(((($storemerge>>>0))/(($139>>>0)))&-1);
 var $141=($140>>>0)<($139>>>0);
 if($141){var $_0=$storemerge;label=120;break;}else{label=48;break;}
 case 48: 
 var $143=(Math_imul($140,$139)|0);
 var $144=($storemerge|0)==($143|0);
 if($144){label=119;break;}else{label=49;break;}
 case 49: 
 var $146=((($i_016)+(58))|0);
 var $147=(((($storemerge>>>0))/(($146>>>0)))&-1);
 var $148=($147>>>0)<($146>>>0);
 if($148){var $_0=$storemerge;label=120;break;}else{label=50;break;}
 case 50: 
 var $150=(Math_imul($147,$146)|0);
 var $151=($storemerge|0)==($150|0);
 if($151){label=119;break;}else{label=51;break;}
 case 51: 
 var $153=((($i_016)+(60))|0);
 var $154=(((($storemerge>>>0))/(($153>>>0)))&-1);
 var $155=($154>>>0)<($153>>>0);
 if($155){var $_0=$storemerge;label=120;break;}else{label=52;break;}
 case 52: 
 var $157=(Math_imul($154,$153)|0);
 var $158=($storemerge|0)==($157|0);
 if($158){label=119;break;}else{label=53;break;}
 case 53: 
 var $160=((($i_016)+(66))|0);
 var $161=(((($storemerge>>>0))/(($160>>>0)))&-1);
 var $162=($161>>>0)<($160>>>0);
 if($162){var $_0=$storemerge;label=120;break;}else{label=54;break;}
 case 54: 
 var $164=(Math_imul($161,$160)|0);
 var $165=($storemerge|0)==($164|0);
 if($165){label=119;break;}else{label=55;break;}
 case 55: 
 var $167=((($i_016)+(70))|0);
 var $168=(((($storemerge>>>0))/(($167>>>0)))&-1);
 var $169=($168>>>0)<($167>>>0);
 if($169){var $_0=$storemerge;label=120;break;}else{label=56;break;}
 case 56: 
 var $171=(Math_imul($168,$167)|0);
 var $172=($storemerge|0)==($171|0);
 if($172){label=119;break;}else{label=57;break;}
 case 57: 
 var $174=((($i_016)+(72))|0);
 var $175=(((($storemerge>>>0))/(($174>>>0)))&-1);
 var $176=($175>>>0)<($174>>>0);
 if($176){var $_0=$storemerge;label=120;break;}else{label=58;break;}
 case 58: 
 var $178=(Math_imul($175,$174)|0);
 var $179=($storemerge|0)==($178|0);
 if($179){label=119;break;}else{label=59;break;}
 case 59: 
 var $181=((($i_016)+(78))|0);
 var $182=(((($storemerge>>>0))/(($181>>>0)))&-1);
 var $183=($182>>>0)<($181>>>0);
 if($183){var $_0=$storemerge;label=120;break;}else{label=60;break;}
 case 60: 
 var $185=(Math_imul($182,$181)|0);
 var $186=($storemerge|0)==($185|0);
 if($186){label=119;break;}else{label=61;break;}
 case 61: 
 var $188=((($i_016)+(82))|0);
 var $189=(((($storemerge>>>0))/(($188>>>0)))&-1);
 var $190=($189>>>0)<($188>>>0);
 if($190){var $_0=$storemerge;label=120;break;}else{label=62;break;}
 case 62: 
 var $192=(Math_imul($189,$188)|0);
 var $193=($storemerge|0)==($192|0);
 if($193){label=119;break;}else{label=63;break;}
 case 63: 
 var $195=((($i_016)+(88))|0);
 var $196=(((($storemerge>>>0))/(($195>>>0)))&-1);
 var $197=($196>>>0)<($195>>>0);
 if($197){var $_0=$storemerge;label=120;break;}else{label=64;break;}
 case 64: 
 var $199=(Math_imul($196,$195)|0);
 var $200=($storemerge|0)==($199|0);
 if($200){label=119;break;}else{label=65;break;}
 case 65: 
 var $202=((($i_016)+(96))|0);
 var $203=(((($storemerge>>>0))/(($202>>>0)))&-1);
 var $204=($203>>>0)<($202>>>0);
 if($204){var $_0=$storemerge;label=120;break;}else{label=66;break;}
 case 66: 
 var $206=(Math_imul($203,$202)|0);
 var $207=($storemerge|0)==($206|0);
 if($207){label=119;break;}else{label=67;break;}
 case 67: 
 var $209=((($i_016)+(100))|0);
 var $210=(((($storemerge>>>0))/(($209>>>0)))&-1);
 var $211=($210>>>0)<($209>>>0);
 if($211){var $_0=$storemerge;label=120;break;}else{label=68;break;}
 case 68: 
 var $213=(Math_imul($210,$209)|0);
 var $214=($storemerge|0)==($213|0);
 if($214){label=119;break;}else{label=69;break;}
 case 69: 
 var $216=((($i_016)+(102))|0);
 var $217=(((($storemerge>>>0))/(($216>>>0)))&-1);
 var $218=($217>>>0)<($216>>>0);
 if($218){var $_0=$storemerge;label=120;break;}else{label=70;break;}
 case 70: 
 var $220=(Math_imul($217,$216)|0);
 var $221=($storemerge|0)==($220|0);
 if($221){label=119;break;}else{label=71;break;}
 case 71: 
 var $223=((($i_016)+(106))|0);
 var $224=(((($storemerge>>>0))/(($223>>>0)))&-1);
 var $225=($224>>>0)<($223>>>0);
 if($225){var $_0=$storemerge;label=120;break;}else{label=72;break;}
 case 72: 
 var $227=(Math_imul($224,$223)|0);
 var $228=($storemerge|0)==($227|0);
 if($228){label=119;break;}else{label=73;break;}
 case 73: 
 var $230=((($i_016)+(108))|0);
 var $231=(((($storemerge>>>0))/(($230>>>0)))&-1);
 var $232=($231>>>0)<($230>>>0);
 if($232){var $_0=$storemerge;label=120;break;}else{label=74;break;}
 case 74: 
 var $234=(Math_imul($231,$230)|0);
 var $235=($storemerge|0)==($234|0);
 if($235){label=119;break;}else{label=75;break;}
 case 75: 
 var $237=((($i_016)+(112))|0);
 var $238=(((($storemerge>>>0))/(($237>>>0)))&-1);
 var $239=($238>>>0)<($237>>>0);
 if($239){var $_0=$storemerge;label=120;break;}else{label=76;break;}
 case 76: 
 var $241=(Math_imul($238,$237)|0);
 var $242=($storemerge|0)==($241|0);
 if($242){label=119;break;}else{label=77;break;}
 case 77: 
 var $244=((($i_016)+(120))|0);
 var $245=(((($storemerge>>>0))/(($244>>>0)))&-1);
 var $246=($245>>>0)<($244>>>0);
 if($246){var $_0=$storemerge;label=120;break;}else{label=78;break;}
 case 78: 
 var $248=(Math_imul($245,$244)|0);
 var $249=($storemerge|0)==($248|0);
 if($249){label=119;break;}else{label=79;break;}
 case 79: 
 var $251=((($i_016)+(126))|0);
 var $252=(((($storemerge>>>0))/(($251>>>0)))&-1);
 var $253=($252>>>0)<($251>>>0);
 if($253){var $_0=$storemerge;label=120;break;}else{label=80;break;}
 case 80: 
 var $255=(Math_imul($252,$251)|0);
 var $256=($storemerge|0)==($255|0);
 if($256){label=119;break;}else{label=81;break;}
 case 81: 
 var $258=((($i_016)+(130))|0);
 var $259=(((($storemerge>>>0))/(($258>>>0)))&-1);
 var $260=($259>>>0)<($258>>>0);
 if($260){var $_0=$storemerge;label=120;break;}else{label=82;break;}
 case 82: 
 var $262=(Math_imul($259,$258)|0);
 var $263=($storemerge|0)==($262|0);
 if($263){label=119;break;}else{label=83;break;}
 case 83: 
 var $265=((($i_016)+(136))|0);
 var $266=(((($storemerge>>>0))/(($265>>>0)))&-1);
 var $267=($266>>>0)<($265>>>0);
 if($267){var $_0=$storemerge;label=120;break;}else{label=84;break;}
 case 84: 
 var $269=(Math_imul($266,$265)|0);
 var $270=($storemerge|0)==($269|0);
 if($270){label=119;break;}else{label=85;break;}
 case 85: 
 var $272=((($i_016)+(138))|0);
 var $273=(((($storemerge>>>0))/(($272>>>0)))&-1);
 var $274=($273>>>0)<($272>>>0);
 if($274){var $_0=$storemerge;label=120;break;}else{label=86;break;}
 case 86: 
 var $276=(Math_imul($273,$272)|0);
 var $277=($storemerge|0)==($276|0);
 if($277){label=119;break;}else{label=87;break;}
 case 87: 
 var $279=((($i_016)+(142))|0);
 var $280=(((($storemerge>>>0))/(($279>>>0)))&-1);
 var $281=($280>>>0)<($279>>>0);
 if($281){var $_0=$storemerge;label=120;break;}else{label=88;break;}
 case 88: 
 var $283=(Math_imul($280,$279)|0);
 var $284=($storemerge|0)==($283|0);
 if($284){label=119;break;}else{label=89;break;}
 case 89: 
 var $286=((($i_016)+(148))|0);
 var $287=(((($storemerge>>>0))/(($286>>>0)))&-1);
 var $288=($287>>>0)<($286>>>0);
 if($288){var $_0=$storemerge;label=120;break;}else{label=90;break;}
 case 90: 
 var $290=(Math_imul($287,$286)|0);
 var $291=($storemerge|0)==($290|0);
 if($291){label=119;break;}else{label=91;break;}
 case 91: 
 var $293=((($i_016)+(150))|0);
 var $294=(((($storemerge>>>0))/(($293>>>0)))&-1);
 var $295=($294>>>0)<($293>>>0);
 if($295){var $_0=$storemerge;label=120;break;}else{label=92;break;}
 case 92: 
 var $297=(Math_imul($294,$293)|0);
 var $298=($storemerge|0)==($297|0);
 if($298){label=119;break;}else{label=93;break;}
 case 93: 
 var $300=((($i_016)+(156))|0);
 var $301=(((($storemerge>>>0))/(($300>>>0)))&-1);
 var $302=($301>>>0)<($300>>>0);
 if($302){var $_0=$storemerge;label=120;break;}else{label=94;break;}
 case 94: 
 var $304=(Math_imul($301,$300)|0);
 var $305=($storemerge|0)==($304|0);
 if($305){label=119;break;}else{label=95;break;}
 case 95: 
 var $307=((($i_016)+(162))|0);
 var $308=(((($storemerge>>>0))/(($307>>>0)))&-1);
 var $309=($308>>>0)<($307>>>0);
 if($309){var $_0=$storemerge;label=120;break;}else{label=96;break;}
 case 96: 
 var $311=(Math_imul($308,$307)|0);
 var $312=($storemerge|0)==($311|0);
 if($312){label=119;break;}else{label=97;break;}
 case 97: 
 var $314=((($i_016)+(166))|0);
 var $315=(((($storemerge>>>0))/(($314>>>0)))&-1);
 var $316=($315>>>0)<($314>>>0);
 if($316){var $_0=$storemerge;label=120;break;}else{label=98;break;}
 case 98: 
 var $318=(Math_imul($315,$314)|0);
 var $319=($storemerge|0)==($318|0);
 if($319){label=119;break;}else{label=99;break;}
 case 99: 
 var $321=((($i_016)+(168))|0);
 var $322=(((($storemerge>>>0))/(($321>>>0)))&-1);
 var $323=($322>>>0)<($321>>>0);
 if($323){var $_0=$storemerge;label=120;break;}else{label=100;break;}
 case 100: 
 var $325=(Math_imul($322,$321)|0);
 var $326=($storemerge|0)==($325|0);
 if($326){label=119;break;}else{label=101;break;}
 case 101: 
 var $328=((($i_016)+(172))|0);
 var $329=(((($storemerge>>>0))/(($328>>>0)))&-1);
 var $330=($329>>>0)<($328>>>0);
 if($330){var $_0=$storemerge;label=120;break;}else{label=102;break;}
 case 102: 
 var $332=(Math_imul($329,$328)|0);
 var $333=($storemerge|0)==($332|0);
 if($333){label=119;break;}else{label=103;break;}
 case 103: 
 var $335=((($i_016)+(178))|0);
 var $336=(((($storemerge>>>0))/(($335>>>0)))&-1);
 var $337=($336>>>0)<($335>>>0);
 if($337){var $_0=$storemerge;label=120;break;}else{label=104;break;}
 case 104: 
 var $339=(Math_imul($336,$335)|0);
 var $340=($storemerge|0)==($339|0);
 if($340){label=119;break;}else{label=105;break;}
 case 105: 
 var $342=((($i_016)+(180))|0);
 var $343=(((($storemerge>>>0))/(($342>>>0)))&-1);
 var $344=($343>>>0)<($342>>>0);
 if($344){var $_0=$storemerge;label=120;break;}else{label=106;break;}
 case 106: 
 var $346=(Math_imul($343,$342)|0);
 var $347=($storemerge|0)==($346|0);
 if($347){label=119;break;}else{label=107;break;}
 case 107: 
 var $349=((($i_016)+(186))|0);
 var $350=(((($storemerge>>>0))/(($349>>>0)))&-1);
 var $351=($350>>>0)<($349>>>0);
 if($351){var $_0=$storemerge;label=120;break;}else{label=108;break;}
 case 108: 
 var $353=(Math_imul($350,$349)|0);
 var $354=($storemerge|0)==($353|0);
 if($354){label=119;break;}else{label=109;break;}
 case 109: 
 var $356=((($i_016)+(190))|0);
 var $357=(((($storemerge>>>0))/(($356>>>0)))&-1);
 var $358=($357>>>0)<($356>>>0);
 if($358){var $_0=$storemerge;label=120;break;}else{label=110;break;}
 case 110: 
 var $360=(Math_imul($357,$356)|0);
 var $361=($storemerge|0)==($360|0);
 if($361){label=119;break;}else{label=111;break;}
 case 111: 
 var $363=((($i_016)+(192))|0);
 var $364=(((($storemerge>>>0))/(($363>>>0)))&-1);
 var $365=($364>>>0)<($363>>>0);
 if($365){var $_0=$storemerge;label=120;break;}else{label=112;break;}
 case 112: 
 var $367=(Math_imul($364,$363)|0);
 var $368=($storemerge|0)==($367|0);
 if($368){label=119;break;}else{label=113;break;}
 case 113: 
 var $370=((($i_016)+(196))|0);
 var $371=(((($storemerge>>>0))/(($370>>>0)))&-1);
 var $372=($371>>>0)<($370>>>0);
 if($372){var $_0=$storemerge;label=120;break;}else{label=114;break;}
 case 114: 
 var $374=(Math_imul($371,$370)|0);
 var $375=($storemerge|0)==($374|0);
 if($375){label=119;break;}else{label=115;break;}
 case 115: 
 var $377=((($i_016)+(198))|0);
 var $378=(((($storemerge>>>0))/(($377>>>0)))&-1);
 var $379=($378>>>0)<($377>>>0);
 if($379){var $_0=$storemerge;label=120;break;}else{label=116;break;}
 case 116: 
 var $381=(Math_imul($378,$377)|0);
 var $382=($storemerge|0)==($381|0);
 if($382){label=119;break;}else{label=117;break;}
 case 117: 
 var $384=((($i_016)+(208))|0);
 var $385=(((($storemerge>>>0))/(($384>>>0)))&-1);
 var $386=($385>>>0)<($384>>>0);
 if($386){var $_0=$storemerge;label=120;break;}else{label=118;break;}
 case 118: 
 var $388=(Math_imul($385,$384)|0);
 var $389=($storemerge|0)==($388|0);
 var $390=((($i_016)+(210))|0);
 if($389){label=119;break;}else{label=23;break;}
 case 119: 
 var $391=((($in_0)+(1))|0);
 var $392=($391|0)==48;
 var $_=($392?0:$391);
 var $393=($392&1);
 var $_k0_0=((($393)+($k0_0))|0);
 var $394=((($_k0_0)*(210))&-1);
 var $395=((13344+($_<<2))|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=((($396)+($394))|0);
 var $k0_0=$_k0_0;var $in_0=$_;var $storemerge=$397;label=17;break;
 case 120: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(16784,16760);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=14;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(16760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(16760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($flag)>>2)]=-1;
 var $15=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(16760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $17=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(16784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 9: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 var $21=___cxa_begin_catch($20);
 var $22=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(16760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=0;
 var $24=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(16760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $26=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(16784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 13: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 14: 
 var $31;
 label=15;break;
 case 15: 
 return;
 case 16: 
 ___resumeException($29$0)
 case 17: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 var $36=$35$0;
 ___clang_call_terminate($36);
 throw "Reached an unreachable!";
 case 18: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=$1;
 HEAP32[(($3)>>2)]=4640;
 ___cxa_throw($1,11384,(90));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=9;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)>4294967279;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 5: 
 var $15=($11>>>0)<11;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=$11<<1;
 var $18=(($17)&255);
 var $19=$this;
 var $20=$this;
 HEAP8[($20)]=$18;
 var $21=(($19+1)|0);
 var $__p_0_i_i=$21;label=8;break;
 case 7: 
 var $22=((($11)+(16))|0);
 var $23=$22&-16;
 var $24=__Znwj($23);
 var $25=(($this+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$23|1;
 var $27=(($this)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$11;
 var $__p_0_i_i=$24;label=8;break;
 case 8: 
 var $__p_0_i_i;
 assert($11 % 1 === 0);(_memcpy($__p_0_i_i, $9, $11)|0);
 var $29=(($__p_0_i_i+$11)|0);
 HEAP8[($29)]=0;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 var $9=$this;
 HEAP8[($9)]=$7;
 var $10=(($8+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__sz;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $19=(($__p_0+$__sz)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 var $9=$this;
 HEAP8[($9)]=$7;
 var $10=(($8+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__n)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__n;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $19=(($__p_0+$__n)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 __ZdlPv($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==($__str|0);
 if($1){label=21;break;}else{label=2;break;}
 case 2: 
 var $3=$__str;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $13=$9;label=5;break;
 case 4: 
 var $11=$__str;
 var $12=(($11+1)|0);
 var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14=($4&255);
 var $15=$14&1;
 var $16=($15|0)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=(($__str+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $22=$19;label=8;break;
 case 7: 
 var $21=$14>>>1;
 var $22=$21;label=8;break;
 case 8: 
 var $22;
 var $23=$this;
 var $24=$this;
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){var $34=10;var $33=$25;label=10;break;}else{label=9;break;}
 case 9: 
 var $29=(($this)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$30&-2;
 var $phitmp_i=((($31)-(1))|0);
 var $32=(($30)&255);
 var $34=$phitmp_i;var $33=$32;label=10;break;
 case 10: 
 var $33;
 var $34;
 var $35=($34>>>0)<($22>>>0);
 if($35){label=17;break;}else{label=11;break;}
 case 11: 
 var $37=$33&1;
 var $38=(($37<<24)>>24)==0;
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $44=$41;label=14;break;
 case 13: 
 var $43=(($23+1)|0);
 var $44=$43;label=14;break;
 case 14: 
 var $44;
 _memmove($44,$13,$22,1,0);
 var $45=(($44+$22)|0);
 HEAP8[($45)]=0;
 var $46=HEAP8[($24)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=16;break;}else{label=15;break;}
 case 15: 
 var $50=(($this+4)|0);
 HEAP32[(($50)>>2)]=$22;
 label=21;break;
 case 16: 
 var $52=$22<<1;
 var $53=(($52)&255);
 HEAP8[($24)]=$53;
 label=21;break;
 case 17: 
 var $55=($33&255);
 var $56=$55&1;
 var $57=($56|0)==0;
 if($57){label=19;break;}else{label=18;break;}
 case 18: 
 var $59=(($this+4)|0);
 var $60=HEAP32[(($59)>>2)];
 var $63=$60;label=20;break;
 case 19: 
 var $62=$55>>>1;
 var $63=$62;label=20;break;
 case 20: 
 var $63;
 var $64=((($22)-($34))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$34,$64,$63,0,$63,$22,$13);
 label=21;break;
 case 21: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){var $13=10;var $12=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9&-2;
 var $phitmp_i=((($10)-(1))|0);
 var $11=(($9)&255);
 var $13=$phitmp_i;var $12=$11;label=3;break;
 case 3: 
 var $12;
 var $13;
 var $14=($13>>>0)<($1>>>0);
 if($14){label=10;break;}else{label=4;break;}
 case 4: 
 var $16=$12&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=(($2+1)|0);
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 _memmove($23,$__s,$1,1,0);
 var $24=(($23+$1)|0);
 HEAP8[($24)]=0;
 var $25=HEAP8[($3)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($3)]=$32;
 label=14;break;
 case 10: 
 var $34=($12&255);
 var $35=$34&1;
 var $36=($35|0)==0;
 if($36){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $42=$39;label=13;break;
 case 12: 
 var $41=$34>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=((($1)-($13))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$43,$42,0,$42,$1,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12>>>0)<($__n>>>0);
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=((($__n)-($12))|0);
 var $16=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$15,$__c);
 label=9;break;
 case 6: 
 var $18=$3&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($this+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+$__n)|0);
 HEAP8[($23)]=0;
 var $24=(($this+4)|0);
 HEAP32[(($24)>>2)]=$__n;
 label=9;break;
 case 8: 
 var $26=(($1+1+$__n)|0);
 HEAP8[($26)]=0;
 var $27=$__n<<1;
 var $28=(($27)&255);
 HEAP8[($2)]=$28;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==0;
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=10;var $13=$5;label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=$15>>>1;
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 var $24=((($14)-($23))|0);
 var $25=($24>>>0)<($__n>>>0);
 if($25){label=8;break;}else{var $30=$13;label=9;break;}
 case 8: 
 var $27=((($__n)-($14))|0);
 var $28=((($27)+($23))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$14,$28,$23,$23,0,0);
 var $_pre=HEAP8[($4)];
 var $30=$_pre;label=9;break;
 case 9: 
 var $30;
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=(($this+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=12;break;
 case 11: 
 var $37=(($3+1)|0);
 var $38=$37;label=12;break;
 case 12: 
 var $38;
 var $39=(($38+$23)|0);
 _memset($39, $__c, $__n)|0;
 var $40=((($23)+($__n))|0);
 var $41=HEAP8[($4)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($43){label=14;break;}else{label=13;break;}
 case 13: 
 var $45=(($this+4)|0);
 HEAP32[(($45)>>2)]=$40;
 label=15;break;
 case 14: 
 var $47=$40<<1;
 var $48=(($47)&255);
 HEAP8[($4)]=$48;
 label=15;break;
 case 15: 
 var $49=(($38+$40)|0);
 HEAP8[($49)]=0;
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){var $15=10;var $14=$6;label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $phitmp=((($12)-(1))|0);
 var $13=(($11)&255);
 var $15=$phitmp;var $14=$13;label=5;break;
 case 5: 
 var $14;
 var $15;
 var $16=($14&255);
 var $17=$16&1;
 var $18=($17|0)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($this+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $24=$21;label=8;break;
 case 7: 
 var $23=$16>>>1;
 var $24=$23;label=8;break;
 case 8: 
 var $24;
 var $25=($24>>>0)>($__res_arg>>>0);
 var $26=($25?$24:$__res_arg);
 var $27=($26>>>0)<11;
 if($27){var $31=11;label=10;break;}else{label=9;break;}
 case 9: 
 var $29=((($26)+(16))|0);
 var $30=$29&-16;
 var $31=$30;label=10;break;
 case 10: 
 var $31;
 var $32=((($31)-(1))|0);
 var $33=($32|0)==($15|0);
 if($33){label=29;break;}else{label=11;break;}
 case 11: 
 var $35=($32|0)==10;
 if($35){label=12;break;}else{label=13;break;}
 case 12: 
 var $37=(($4+1)|0);
 var $38=(($this+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $__new_data_1=$37;var $__p_0=$39;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $41=($32>>>0)>($15>>>0);
 if($41){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=__Znwj($31);
 var $__new_data_0=$43;label=17;break;
 case 15: 
 var $45=(function() { try { __THREW__ = 0; return __Znwj($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$45;label=17;break; } else { label=16;break; }
 case 16: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $49=___cxa_begin_catch($48);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0;
 var $50=$14&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=(($this+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $57=$54;label=20;break;
 case 19: 
 var $56=(($4+1)|0);
 var $57=$56;label=20;break;
 case 20: 
 var $57;
 var $extract_t=(($50<<24)>>24)!=0;
 var $__new_data_1=$__new_data_0;var $__p_0=$57;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $59=($14&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=23;break;}else{label=22;break;}
 case 22: 
 var $63=(($this+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=24;break;
 case 23: 
 var $66=$59>>>1;
 var $67=$66;label=24;break;
 case 24: 
 var $67;
 var $68=((($67)+(1))|0);
 assert($68 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $68)|0);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 __ZdlPv($__p_0);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $72=$31|1;
 var $73=(($this)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($this+4)|0);
 HEAP32[(($74)>>2)]=$24;
 var $75=(($this+8)|0);
 HEAP32[(($75)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $77=$24<<1;
 var $78=(($77)&255);
 HEAP8[($5)]=$78;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($3&255);
 var $8=$7>>>1;
 var $__sz_0=$8;var $__cap_0=10;label=4;break;
 case 3: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $13=((($12)-(1))|0);
 var $14=(($this+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $__sz_0=$15;var $__cap_0=$13;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $17=($__sz_0|0)==($__cap_0|0);
 if($17){label=5;break;}else{var $__is_short_0_off0_in_in=$3;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $19=HEAP8[($2)];
 var $__is_short_0_off0_in_in=$19;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $22=(($1+1)|0);
 var $23=$__sz_0<<1;
 var $24=((($23)+(2))|0);
 var $25=(($24)&255);
 HEAP8[($2)]=$25;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$22;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($__sz_0)+(1))|0);
 var $30=(($this+4)|0);
 HEAP32[(($30)>>2)]=$29;
 var $_pn=$28;var $__p_0_sum_pre_phi=$29;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[($__p_0)]=$__c;
 var $32=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[($32)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($11&255);
 var $14=$13&1;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=6;break;
 case 5: 
 var $20=$13>>>1;
 var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22=((($12)-($21))|0);
 var $23=($22>>>0)<($__n>>>0);
 if($23){label=15;break;}else{label=7;break;}
 case 7: 
 var $25=($__n|0)==0;
 if($25){label=16;break;}else{label=8;break;}
 case 8: 
 var $27=$11&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($this+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $34=$31;label=11;break;
 case 10: 
 var $33=(($1+1)|0);
 var $34=$33;label=11;break;
 case 11: 
 var $34;
 var $35=(($34+$21)|0);
 assert($__n % 1 === 0);(_memcpy($35, $__s, $__n)|0);
 var $36=((($21)+($__n))|0);
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($this+4)|0);
 HEAP32[(($41)>>2)]=$36;
 label=14;break;
 case 13: 
 var $43=$36<<1;
 var $44=(($43)&255);
 HEAP8[($2)]=$44;
 label=14;break;
 case 14: 
 var $45=(($34+$36)|0);
 HEAP8[($45)]=0;
 label=16;break;
 case 15: 
 var $47=((($__n)-($12))|0);
 var $48=((($47)+($21))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$48,$21,$21,0,$__n,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $_sink=-17;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<11;
 if($21){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(16))|0);
 var $24=$23&-16;
 var $_sink=$24;label=9;break;
 case 9: 
 var $_sink;
 var $25=__Znwj($_sink);
 var $26=($__n_copy|0)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($25, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $29=($__n_add|0)==0;
 if($29){label=13;break;}else{label=12;break;}
 case 12: 
 var $31=(($25+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($31, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $33=((($__old_sz)-($__n_del))|0);
 var $34=($33|0)==($__n_copy|0);
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 var $36=((($33)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $37=(($25+$_sum)|0);
 var $_sum3=((($__n_del)+($__n_copy))|0);
 var $38=(($15+$_sum3)|0);
 assert($36 % 1 === 0);(_memcpy($37, $38, $36)|0);
 label=15;break;
 case 15: 
 var $40=($__old_cap|0)==10;
 if($40){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($15);
 label=17;break;
 case 17: 
 var $43=(($this+8)|0);
 HEAP32[(($43)>>2)]=$25;
 var $44=$_sink|1;
 var $45=(($this)|0);
 HEAP32[(($45)>>2)]=$44;
 var $46=((($33)+($__n_add))|0);
 var $47=(($this+4)|0);
 HEAP32[(($47)>>2)]=$46;
 var $48=(($25+$46)|0);
 HEAP8[($48)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $_sink=-17;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<11;
 if($21){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(16))|0);
 var $24=$23&-16;
 var $_sink=$24;label=9;break;
 case 9: 
 var $_sink;
 var $25=__Znwj($_sink);
 var $26=($__n_copy|0)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($25, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $29=((($__old_sz)-($__n_del))|0);
 var $30=($29|0)==($__n_copy|0);
 if($30){label=13;break;}else{label=12;break;}
 case 12: 
 var $32=((($29)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $33=(($25+$_sum)|0);
 var $_sum3=((($__n_del)+($__n_copy))|0);
 var $34=(($15+$_sum3)|0);
 assert($32 % 1 === 0);(_memcpy($33, $34, $32)|0);
 label=13;break;
 case 13: 
 var $36=($__old_cap|0)==10;
 if($36){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($15);
 label=15;break;
 case 15: 
 var $39=(($this+8)|0);
 HEAP32[(($39)>>2)]=$25;
 var $40=$_sink|1;
 var $41=(($this)|0);
 HEAP32[(($41)>>2)]=$40;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__sz)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemcpy($__p_0,$__s,$__sz);
 var $21=(($__p_0+($__sz<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__n)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemset($__p_0,$__c,$__n);
 var $21=(($__p_0+($__n<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZdlPv($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;


 var $1=_wcslen($__s);
 var $2=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$1);
 return $2;
}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 var $14=$10&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=7;break;
 case 6: 
 var $20=(($this+4)|0);
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=_wmemmove($21,$__s,$__n);
 var $23=(($21+($__n<<2))|0);
 HEAP32[(($23)>>2)]=0;
 var $24=HEAP8[($1)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[($1)]=$31;
 label=14;break;
 case 10: 
 var $33=($10&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($this+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=13;break;
 case 12: 
 var $40=$33>>>1;
 var $41=$40;label=13;break;
 case 13: 
 var $41;
 var $42=((($__n)-($11))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$11,$42,$41,0,$41,$__n,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=1;var $13=$5;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=8;break;
 case 7: 
 var $22=$15>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=($23>>>0)>($__res_arg>>>0);
 var $25=($24?$23:$__res_arg);
 var $26=($25>>>0)<2;
 if($26){var $30=2;label=10;break;}else{label=9;break;}
 case 9: 
 var $28=((($25)+(4))|0);
 var $29=$28&-4;
 var $30=$29;label=10;break;
 case 10: 
 var $30;
 var $31=((($30)-(1))|0);
 var $32=($31|0)==($14|0);
 if($32){label=29;break;}else{label=11;break;}
 case 11: 
 var $34=($31|0)==1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=(($this+4)|0);
 var $37=$36;
 var $38=(($this+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $__new_data_1_in=$37;var $__p_0=$39;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $41=($31>>>0)>($14>>>0);
 var $42=$30<<2;
 if($41){label=14;break;}else{label=15;break;}
 case 14: 
 var $44=__Znwj($42);
 var $__new_data_0_in=$44;label=17;break;
 case 15: 
 var $46=(function() { try { __THREW__ = 0; return __Znwj($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0_in=$46;label=17;break; } else { label=16;break; }
 case 16: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $50=___cxa_begin_catch($49);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0_in;
 var $51=$13&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=19;break;}else{label=18;break;}
 case 18: 
 var $54=(($this+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $58=$55;label=20;break;
 case 19: 
 var $57=(($this+4)|0);
 var $58=$57;label=20;break;
 case 20: 
 var $58;
 var $extract_t=(($51<<24)>>24)!=0;
 var $__new_data_1_in=$__new_data_0_in;var $__p_0=$58;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1_in;
 var $__new_data_1=$__new_data_1_in;
 var $60=($13&255);
 var $61=$60&1;
 var $62=($61|0)==0;
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $64=(($this+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $68=$65;label=24;break;
 case 23: 
 var $67=$60>>>1;
 var $68=$67;label=24;break;
 case 24: 
 var $68;
 var $69=((($68)+(1))|0);
 var $70=_wmemcpy($__new_data_1,$__p_0,$69);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 var $72=$__p_0;
 __ZdlPv($72);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $75=$30|1;
 var $76=(($this)|0);
 HEAP32[(($76)>>2)]=$75;
 var $77=(($this+4)|0);
 HEAP32[(($77)>>2)]=$23;
 var $78=(($this+8)|0);
 HEAP32[(($78)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $80=$23<<1;
 var $81=(($80)&255);
 HEAP8[($4)]=$81;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{var $__is_short_0_off0_in_in=$2;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[($1)];
 var $__is_short_0_off0_in_in=$18;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=(($this+4)|0);
 var $22=$__sz_0<<1;
 var $23=((($22)+(2))|0);
 var $24=(($23)&255);
 HEAP8[($1)]=$24;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$21;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $26=(($this+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($__sz_0)+(1))|0);
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$28;
 var $_pn=$27;var $__p_0_sum_pre_phi=$28;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $31=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($31)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741806)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $_sink=1073741807;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $19=($18?$17:$16);
 var $20=($19>>>0)<2;
 if($20){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($19)+(4))|0);
 var $23=$22&-4;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=$_sink<<2;
 var $25=__Znwj($24);
 var $26=$25;
 var $27=($__n_copy|0)==0;
 if($27){label=11;break;}else{label=10;break;}
 case 10: 
 var $29=_wmemcpy($26,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $31=($__n_add|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=(($26+($__n_copy<<2))|0);
 var $34=_wmemcpy($33,$__p_new_stuff,$__n_add);
 label=13;break;
 case 13: 
 var $36=((($__old_sz)-($__n_del))|0);
 var $37=($36|0)==($__n_copy|0);
 if($37){label=15;break;}else{label=14;break;}
 case 14: 
 var $39=((($36)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $40=(($26+($_sum<<2))|0);
 var $_sum3=((($__n_del)+($__n_copy))|0);
 var $41=(($14+($_sum3<<2))|0);
 var $42=_wmemcpy($40,$41,$39);
 label=15;break;
 case 15: 
 var $44=($__old_cap|0)==1;
 if($44){label=17;break;}else{label=16;break;}
 case 16: 
 var $46=$14;
 __ZdlPv($46);
 label=17;break;
 case 17: 
 var $48=(($this+8)|0);
 HEAP32[(($48)>>2)]=$26;
 var $49=$_sink|1;
 var $50=(($this)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=((($36)+($__n_add))|0);
 var $52=(($this+4)|0);
 HEAP32[(($52)>>2)]=$51;
 var $53=(($26+($51<<2))|0);
 HEAP32[(($53)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $_sink=1073741807;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $19=($18?$17:$16);
 var $20=($19>>>0)<2;
 if($20){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($19)+(4))|0);
 var $23=$22&-4;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=$_sink<<2;
 var $25=__Znwj($24);
 var $26=$25;
 var $27=($__n_copy|0)==0;
 if($27){label=11;break;}else{label=10;break;}
 case 10: 
 var $29=_wmemcpy($26,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $31=((($__old_sz)-($__n_del))|0);
 var $32=($31|0)==($__n_copy|0);
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $34=((($31)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $35=(($26+($_sum<<2))|0);
 var $_sum3=((($__n_del)+($__n_copy))|0);
 var $36=(($14+($_sum3<<2))|0);
 var $37=_wmemcpy($35,$36,$34);
 label=13;break;
 case 13: 
 var $39=($__old_cap|0)==1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $41=$14;
 __ZdlPv($41);
 label=15;break;
 case 15: 
 var $43=(($this+8)|0);
 HEAP32[(($43)>>2)]=$26;
 var $44=$_sink|1;
 var $45=(($this)|0);
 HEAP32[(($45)>>2)]=$44;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+16)|0);
 HEAP32[(($6)>>2)]=$state;
 label=4;break;
 case 3: 
 var $8=$state|1;
 var $9=(($this+16)|0);
 HEAP32[(($9)>>2)]=$8;
 label=4;break;
 case 4: 
 var $11=($4&1);
 var $12=$11|$state;
 var $13=(($this+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12&$14;
 var $16=($15|0)==0;
 if($16){label=11;break;}else{label=5;break;}
 case 5: 
 var $18=___cxa_allocate_exception(16);
 var $19=HEAP8[(18080)];
 var $20=(($19<<24)>>24)==0;
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=___cxa_guard_acquire(18080);
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((15800)>>2)]=6208;
 var $25=_atexit((214),15800,___dso_handle);

 label=8;break;
 case 8: 
 var $26=$1;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $tmpcast_i=$1;
 var $27=$18;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 var $$etemp$6=15800;
 var $$etemp$4$0=$$etemp$6;
 var $$etemp$4$1=0;
 var $$etemp$2$0=_bitshift64Shl($$etemp$4$0,$$etemp$4$1,$$etemp$5$0);var $$etemp$2$1=tempRet0;
 var $$etemp$1$0=$$etemp$2$0|$$etemp$3$0;
 var $$etemp$1$1=$$etemp$2$1|$$etemp$3$1;
 var $st$7$0=(($1)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$1$0;
 var $st$8$1=(($1+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$1$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($27,$tmpcast_i,2600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $29=$18;
 HEAP32[(($29)>>2)]=5344;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 ___cxa_throw($18,11928,(78));
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___cxa_free_exception($18);
 ___resumeException($31$0)
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5320;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_01_i=$3;label=2;break;}
 case 2: 
 var $i_01_i;
 var $5=((($i_01_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_01_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=$13;
 __ZNSt3__16localeD2Ev($14);
 var $15=HEAP32[(($_pre)>>2)];
 var $16=$15;
 _free($16);
 var $17=HEAP32[(($_pre1)>>2)];
 var $18=$17;
 _free($18);
 var $19=(($this+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 _free($21);
 var $22=(($this+60)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 _free($24);
 return;
 case 5: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 var $27=$26$0;
 ___clang_call_terminate($27);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZNKSt3__18ios_base6getlocEv($agg_result,$this){
 var label=0;


 var $1=(($this+28)|0);
 var $2=$1;
 __ZNSt3__16localeC2ERKS0_($agg_result,$2);
 return;
}


function __ZNSt3__18ios_base4initEPv($this,$sb){
 var label=0;


 var $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$sb;
 var $not_=($sb|0)==0;
 var $2=($not_&1);
 var $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=4098;
 var $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=6;
 var $8=(($this+32)|0);
 var $9=(($this+28)|0);
 var $10=$9;
 var $11=$8;
 _memset($11, 0, 40)|0;
 __ZNSt3__16localeC2Ev($10);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6584;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_01)]=$storemerge;
 var $21=((($__i_02)+(1))|0);
 var $22=(($_01+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_01=$22;var $__i_02=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_02)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_02)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_02+1)|0);
 var $22=((($__i_01)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_01=$22;var $_02=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6512;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6512;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_01)>>2)]=$storemerge;
 var $19=((($__i_02)+(1))|0);
 var $20=(($_01+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01=$20;var $__i_02=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_02)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_02)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_02+4)|0);
 var $21=((($__i_01)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_01=$21;var $_02=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;


 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum1_i=((($5)+(72))|0);
 var $19=(($6+$_sum1_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($12)]=1;
 var $26=HEAP32[(($1)>>2)];
 var $27=((($26)-(12))|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum1=((($29)+(24))|0);
 var $30=(($6+$_sum1)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 var $34=$32;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $39=($38|0)==-1;
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 var $41=HEAP32[(($1)>>2)];
 var $42=((($41)-(12))|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($6+$44)|0);
 var $46=$45;
 var $_sum2=((($44)+(16))|0);
 var $47=(($6+$_sum2)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 var $_0=$53;label=10;break;
 case 9: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$56;label=10;break;
 case 10: 
 var $_0;
 var $58=___cxa_begin_catch($_0);
 var $59=HEAP32[(($1)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum5=((($62)+(16))|0);
 var $63=(($6+$_sum5)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65|1;
 HEAP32[(($64)>>2)]=$66;
 var $_sum6=((($62)+(20))|0);
 var $67=(($6+$_sum6)|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&1;
 var $71=($70|0)==0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($75$0)
 case 18: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 var $79=$78$0;
 ___clang_call_terminate($79);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2|1;
 HEAP32[(($1)>>2)]=$3;
 var $4=(($this+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 ___cxa_rethrow();
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum1_i=((($5)+(72))|0);
 var $19=(($6+$_sum1_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($12)]=1;
 var $26=HEAP32[(($1)>>2)];
 var $27=((($26)-(12))|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum1=((($29)+(24))|0);
 var $30=(($6+$_sum1)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 var $34=$32;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $39=($38|0)==-1;
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 var $41=HEAP32[(($1)>>2)];
 var $42=((($41)-(12))|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($6+$44)|0);
 var $46=$45;
 var $_sum2=((($44)+(16))|0);
 var $47=(($6+$_sum2)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 var $_0=$53;label=10;break;
 case 9: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$56;label=10;break;
 case 10: 
 var $_0;
 var $58=___cxa_begin_catch($_0);
 var $59=HEAP32[(($1)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum5=((($62)+(16))|0);
 var $63=(($6+$_sum5)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65|1;
 HEAP32[(($64)>>2)]=$66;
 var $_sum6=((($62)+(20))|0);
 var $67=(($6+$_sum6)|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&1;
 var $71=($70|0)==0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($75$0)
 case 18: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 var $79=$78$0;
 ___clang_call_terminate($79);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;


 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP8[($1)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$__os;
 var $3=$__os;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$__os;
 var $_sum_i=((($7)+(16))|0);
 var $9=(($8+$_sum_i)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum1_i=((($7)+(72))|0);
 var $14=(($8+$_sum1_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16);
 label=4;break;
 case 4: 
 HEAP8[($1)]=1;
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this){
 var label=0;


 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $__s=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(($__s)|0);
 HEAP8[($5)]=0;
 var $6=(($__s+4)|0);
 HEAP32[(($6)>>2)]=$this;
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)-(12))|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$this;
 var $_sum_i_i=((($11)+(16))|0);
 var $13=(($12+$_sum_i_i)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=17;break;}
 case 2: 
 var $_sum1_i_i=((($11)+(72))|0);
 var $18=(($12+$_sum1_i_i)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=3;break;}
 case 3: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=13;break; }
 case 4: 
 HEAP8[($5)]=1;
 var $25=HEAP32[(($7)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum5=((($28)+(28))|0);
 var $29=(($12+$_sum5)|0);
 var $30=$29;
 __ZNSt3__16localeC2ERKS0_($3,$30);
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,16984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=16;break; }
 case 5: 
 var $32=$31;
 __ZNSt3__16localeD2Ev($3);
 var $33=HEAP32[(($7)>>2)];
 var $34=((($33)-(12))|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($12+$36)|0);
 var $_sum2=((($36)+(24))|0);
 var $38=(($12+$_sum2)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=$37;
 var $_sum3=((($36)+(76))|0);
 var $43=(($12+$_sum3)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==-1;
 var $extract_t9=(($45)&255);
 if($46){label=6;break;}else{var $_off0=$extract_t9;label=10;break;}
 case 6: 
 var $_sum8=((($36)+(28))|0);
 var $48=(($12+$_sum8)|0);
 var $49=$48;
 __ZNSt3__16localeC2ERKS0_($2,$49);
 var $50=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,17336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $51=$50;
 var $52=$50;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($51,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1,0); var $58$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 var $eh_lpad_body$1=$58$1;var $eh_lpad_body$0=$58$0;label=15;break;
 case 9: 
 __ZNSt3__16localeD2Ev($2);
 var $59=(($56<<24)>>24);
 HEAP32[(($44)>>2)]=$59;
 var $_off0=$56;label=10;break;
 case 10: 
 var $_off0;
 var $60=$31;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($1)|0);
 HEAP32[(($64)>>2)]=$41;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($4,$32,$1,$42,$_off0,$__n) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 var $65=(($4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)==0;
 if($67){label=12;break;}else{label=17;break;}
 case 12: 
 var $69=HEAP32[(($7)>>2)];
 var $70=((($69)-(12))|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($12+$72)|0);
 var $74=$73;
 var $_sum=((($72)+(16))|0);
 var $75=(($12+$_sum)|0);
 var $76=$75;
 var $77=HEAP32[(($76)>>2)];
 var $78=$77|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($74,$78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=14;break; }
 case 13: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1,0); var $80$1 = tempRet0;
 var $81=$80$0;
 var $_1=$81;label=19;break;
 case 14: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $eh_lpad_body$1=$83$1;var $eh_lpad_body$0=$83$0;label=15;break;
 case 15: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $84=$eh_lpad_body$0;
 var $_0=$84;label=18;break;
 case 16: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1,0); var $86$1 = tempRet0;
 var $87=$86$0;
 __ZNSt3__16localeD2Ev($3);
 var $_0=$87;label=18;break;
 case 17: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=23;break;
 case 18: 
 var $_0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_1=$_0;label=19;break;
 case 19: 
 var $_1;
 var $90=___cxa_begin_catch($_1);
 var $91=HEAP32[(($7)>>2)];
 var $92=((($91)-(12))|0);
 var $93=$92;
 var $94=HEAP32[(($93)>>2)];
 var $_sum6=((($94)+(16))|0);
 var $95=(($12+$_sum6)|0);
 var $96=$95;
 var $97=HEAP32[(($96)>>2)];
 var $98=$97|1;
 HEAP32[(($96)>>2)]=$98;
 var $_sum7=((($94)+(20))|0);
 var $99=(($12+$_sum7)|0);
 var $100=$99;
 var $101=HEAP32[(($100)>>2)];
 var $102=$101&1;
 var $103=($102|0)==0;
 if($103){label=22;break;}else{label=20;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=24;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 ___cxa_end_catch();
 label=23;break;
 case 23: 
 STACKTOP=sp;return $this;
 case 24: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=26;break; }
 case 25: 
 ___resumeException($107$0)
 case 26: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1,0); var $110$1 = tempRet0;
 var $111=$110$0;
 ___clang_call_terminate($111);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE($this,$__sb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=(($__s)|0);
 HEAP8[($1)]=0;
 var $2=(($__s+4)|0);
 HEAP32[(($2)>>2)]=$this;
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$this;
 var $_sum_i_i=((($7)+(16))|0);
 var $9=(($8+$_sum_i_i)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=35;break;}
 case 2: 
 var $_sum1_i_i=((($7)+(72))|0);
 var $14=(($8+$_sum1_i_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=19;break; }
 case 4: 
 HEAP8[($1)]=1;
 var $21=($__sb|0)==0;
 var $22=HEAP32[(($3)>>2)];
 var $23=((($22)-(12))|0);
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 if($21){label=34;break;}else{label=5;break;}
 case 5: 
 var $_sum6=((($25)+(24))|0);
 var $26=(($8+$_sum6)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $__i_sroa_0_016=$__sb;var $__o_sroa_0_017=$29;var $__c_018=0;label=6;break;
 case 6: 
 var $__c_018;
 var $__o_sroa_0_017;
 var $__i_sroa_0_016;
 var $31=(($__i_sroa_0_016+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($__i_sroa_0_016+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=$__i_sroa_0_016;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($__i_sroa_0_016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$41;label=9;break; } else { label=21;break; }
 case 8: 
 var $43=HEAP8[($32)];
 var $44=($43&255);
 var $_05=$44;label=9;break;
 case 9: 
 var $_05;
 var $45=($_05|0)==-1;
 var $___i_sroa_0_0=($45?0:$__i_sroa_0_016);
 var $46=($___i_sroa_0_0|0)==0;
 if($46){label=31;break;}else{label=10;break;}
 case 10: 
 var $48=(($___i_sroa_0_0+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($___i_sroa_0_0+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=$___i_sroa_0_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($___i_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=21;break; }
 case 12: 
 var $extract_t=(($58)&255);
 var $_03_off0=$extract_t;label=14;break;
 case 13: 
 var $60=HEAP8[($49)];
 var $_03_off0=$60;label=14;break;
 case 14: 
 var $_03_off0;
 var $61=($__o_sroa_0_017|0)==0;
 if($61){label=31;break;}else{label=15;break;}
 case 15: 
 var $63=(($__o_sroa_0_017+24)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($__o_sroa_0_017+28)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=16;break;}else{label=17;break;}
 case 16: 
 var $69=$__o_sroa_0_017;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+52)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($_03_off0&255);
 var $74=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($__o_sroa_0_017,$73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$74;label=18;break; } else { label=21;break; }
 case 17: 
 var $76=(($64+1)|0);
 HEAP32[(($63)>>2)]=$76;
 HEAP8[($64)]=$_03_off0;
 var $77=($_03_off0&255);
 var $_02=$77;label=18;break;
 case 18: 
 var $_02;
 var $78=($_02|0)==-1;
 var $___o_sroa_0_0=($78?0:$__o_sroa_0_017);
 var $79=($___o_sroa_0_0|0)==0;
 if($79){label=31;break;}else{label=27;break;}
 case 19: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1,0); var $81$1 = tempRet0;
 var $82=$81$0;
 var $_1=$82;label=37;break;
 case 20: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1,0); var $84$1 = tempRet0;
 var $85=$84$0;
 var $_0=$85;label=36;break;
 case 21: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=23;break;
 case 22: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=23;break;
 case 23: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $87=$lpad_phi$0;
 var $88=___cxa_begin_catch($87);
 var $89=HEAP32[(($3)>>2)];
 var $90=((($89)-(12))|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $_sum11=((($92)+(16))|0);
 var $93=(($8+$_sum11)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|4;
 HEAP32[(($94)>>2)]=$96;
 var $_sum12=((($92)+(20))|0);
 var $97=(($8+$_sum12)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=$99&4;
 var $101=($100|0)==0;
 if($101){label=26;break;}else{label=24;break;}
 case 24: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=33;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=20;break; }
 case 27: 
 var $104=HEAP32[(($48)>>2)];
 var $105=HEAP32[(($50)>>2)];
 var $106=($104|0)==($105|0);
 if($106){label=28;break;}else{label=29;break;}
 case 28: 
 var $108=$___i_sroa_0_0;
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+40)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$111]($___i_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=21;break; }
 case 29: 
 var $114=(($104+1)|0);
 HEAP32[(($48)>>2)]=$114;
 label=30;break;
 case 30: 
 var $115=((($__c_018)+(1))|0);
 var $__i_sroa_0_016=$___i_sroa_0_0;var $__o_sroa_0_017=$___o_sroa_0_0;var $__c_018=$115;label=6;break;
 case 31: 
 var $116=($__c_018|0)==0;
 if($116){label=32;break;}else{label=35;break;}
 case 32: 
 var $118=HEAP32[(($3)>>2)];
 var $119=((($118)-(12))|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($8+$121)|0);
 var $123=$122;
 var $_sum7=((($121)+(16))|0);
 var $124=(($8+$_sum7)|0);
 var $125=$124;
 var $126=HEAP32[(($125)>>2)];
 var $127=$126|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($123,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=22;break; }
 case 33: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1,0); var $129$1 = tempRet0;
 var $130=$129$0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$130;label=36;break; } else { label=44;break; }
 case 34: 
 var $132=(($8+$25)|0);
 var $133=$132;
 var $_sum=((($25)+(16))|0);
 var $134=(($8+$_sum)|0);
 var $135=$134;
 var $136=HEAP32[(($135)>>2)];
 var $137=$136|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($133,$137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=20;break; }
 case 35: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=41;break;
 case 36: 
 var $_0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_1=$_0;label=37;break;
 case 37: 
 var $_1;
 var $140=___cxa_begin_catch($_1);
 var $141=HEAP32[(($3)>>2)];
 var $142=((($141)-(12))|0);
 var $143=$142;
 var $144=HEAP32[(($143)>>2)];
 var $_sum13=((($144)+(16))|0);
 var $145=(($8+$_sum13)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $148=$147|1;
 HEAP32[(($146)>>2)]=$148;
 var $_sum14=((($144)+(20))|0);
 var $149=(($8+$_sum14)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=$151&1;
 var $153=($152|0)==0;
 if($153){label=40;break;}else{label=38;break;}
 case 38: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=42;break; }
 case 39: 
 throw "Reached an unreachable!";
 case 40: 
 ___cxa_end_catch();
 label=41;break;
 case 41: 
 STACKTOP=sp;return $this;
 case 42: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1); var $157$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=44;break; }
 case 43: 
 ___resumeException($157$0)
 case 44: 
 var $160$0 = ___cxa_find_matching_catch(-1, -1,0); var $160$1 = tempRet0;
 var $161=$160$0;
 ___clang_call_terminate($161);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=(($__s)|0);
 HEAP8[($1)]=0;
 var $2=(($__s+4)|0);
 HEAP32[(($2)>>2)]=$this;
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$this;
 var $_sum_i_i=((($7)+(16))|0);
 var $9=(($8+$_sum_i_i)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=18;break;}
 case 2: 
 var $_sum1_i_i=((($7)+(72))|0);
 var $14=(($8+$_sum1_i_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 HEAP8[($1)]=1;
 var $21=HEAP32[(($3)>>2)];
 var $22=((($21)-(12))|0);
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $_sum=((($24)+(24))|0);
 var $25=(($8+$_sum)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$27;
 var $29=($27|0)==0;
 if($29){var $__o_sroa_0_0=$28;label=9;break;}else{label=5;break;}
 case 5: 
 var $31=(($27+24)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($27+28)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=($33|0)==($36|0);
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 var $39=$27;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+52)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($__c&255);
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($28,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_01=$44;label=8;break; } else { label=12;break; }
 case 7: 
 var $46=(($33+1)|0);
 HEAP32[(($32)>>2)]=$46;
 HEAP8[($33)]=$__c;
 var $47=($__c&255);
 var $_01=$47;label=8;break;
 case 8: 
 var $_01;
 var $48=($_01|0)==-1;
 var $_=($48?0:$28);
 var $__o_sroa_0_0=$_;label=9;break;
 case 9: 
 var $__o_sroa_0_0;
 var $49=($__o_sroa_0_0|0)==0;
 if($49){label=10;break;}else{label=18;break;}
 case 10: 
 var $51=HEAP32[(($3)>>2)];
 var $52=((($51)-(12))|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($8+$54)|0);
 var $56=$55;
 var $_sum2=((($54)+(16))|0);
 var $57=(($8+$_sum2)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $60=$59|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($56,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=12;break; }
 case 11: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1,0); var $62$1 = tempRet0;
 var $63=$62$0;
 var $_0=$63;label=13;break;
 case 12: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 var $66=$65$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$66;label=13;break;
 case 13: 
 var $_0;
 var $68=___cxa_begin_catch($_0);
 var $69=HEAP32[(($3)>>2)];
 var $70=((($69)-(12))|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum4=((($72)+(16))|0);
 var $73=(($8+$_sum4)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=$75|1;
 HEAP32[(($74)>>2)]=$76;
 var $_sum5=((($72)+(20))|0);
 var $77=(($8+$_sum5)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=$79&1;
 var $81=($80|0)==0;
 if($81){label=16;break;}else{label=14;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 ___cxa_end_catch();
 label=17;break;
 case 17: 
 STACKTOP=sp;return $this;
 case 18: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=17;break;
 case 19: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 20: 
 ___resumeException($85$0)
 case 21: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 var $89=$88$0;
 ___clang_call_terminate($89);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+12)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+12)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=((($this)-(92)+84)|0);
 var $2=(($1+12)|0);
 var $3=$2;
 __ZNSt3__18ios_baseD2Ev($3);
 var $4=$1;
 __ZdlPv($4);
 return;
}


function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(12))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt){
 var label=0;


 return;
}


function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=((($this)-(92)+84)|0);
 var $2=(($1+12)|0);
 var $3=$2;
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}


function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(12))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;


 return 3184;
}


function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($this)|0);
 __ZNKSt3__112__do_message7messageEi($agg_result,$3,$ev);
 label=4;break;
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,3640,35);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 return;
}


function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 return;
}


function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;


 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_024)];
 var $5=HEAP8[($_015)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+1)|0);
 var $11=(($_015+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
 label=3;break;
 case 3: 
 var $8=($3>>>0)<11;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 var $13=$agg_result;
 HEAP8[($13)]=$11;
 var $14=(($12+1)|0);
 var $__p_0_ph_i=$14;label=6;break;
 case 5: 
 var $15=((($3)+(16))|0);
 var $16=$15&-16;
 var $17=__Znwj($16);
 var $18=(($agg_result+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$16|1;
 var $20=(($agg_result)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($agg_result+4)|0);
 HEAP32[(($21)>>2)]=$3;
 var $__p_0_ph_i=$17;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $22=($__lo|0)==($__hi|0);
 if($22){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $23=(((-$1))|0);
 var $scevgep_i=(($__hi+$23)|0);
 var $__p_04_i=$__p_0_ph_i;var $_05_i=$__lo;label=8;break;
 case 8: 
 var $_05_i;
 var $__p_04_i;
 var $25=HEAP8[($_05_i)];
 HEAP8[($__p_04_i)]=$25;
 var $26=(($_05_i+1)|0);
 var $27=(($__p_04_i+1)|0);
 var $28=($26|0)==($__hi|0);
 if($28){label=9;break;}else{var $__p_04_i=$27;var $_05_i=$26;label=8;break;}
 case 9: 
 var $scevgep6_i=$scevgep_i;
 var $scevgep7_i=(($__p_0_ph_i+$scevgep6_i)|0);
 var $__p_0_lcssa_i=$scevgep7_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP8[($__p_0_lcssa_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP8[($__p_01)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_01+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_01=$10;var $__h_02=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_024)>>2)];
 var $5=HEAP32[(($_015)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+4)|0);
 var $11=(($_015+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($7);
 label=3;break;
 case 3: 
 var $9=($4>>>0)<2;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$3>>>1;
 var $12=(($11)&255);
 var $13=$agg_result;
 HEAP8[($13)]=$12;
 var $14=(($agg_result+4)|0);
 var $__p_0_ph_i=$14;label=6;break;
 case 5: 
 var $15=((($4)+(4))|0);
 var $16=$15&-4;
 var $17=$16<<2;
 var $18=__Znwj($17);
 var $19=$18;
 var $20=(($agg_result+8)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=$16|1;
 var $22=(($agg_result)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($agg_result+4)|0);
 HEAP32[(($23)>>2)]=$4;
 var $__p_0_ph_i=$19;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $24=($__lo|0)==($__hi|0);
 if($24){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($__hi)-(4))|0);
 var $scevgep6_i=$scevgep_i;
 var $25=(((-$1))|0);
 var $uglygep_i=(($scevgep6_i+$25)|0);
 var $uglygep7_i=$uglygep_i;
 var $26=$uglygep7_i>>>2;
 var $__p_04_i=$__p_0_ph_i;var $_05_i=$__lo;label=8;break;
 case 8: 
 var $_05_i;
 var $__p_04_i;
 var $28=HEAP32[(($_05_i)>>2)];
 HEAP32[(($__p_04_i)>>2)]=$28;
 var $29=(($_05_i+4)|0);
 var $30=(($__p_04_i+4)|0);
 var $31=($29|0)==($__hi|0);
 if($31){label=9;break;}else{var $__p_04_i=$30;var $_05_i=$29;label=8;break;}
 case 9: 
 var $32=((($26)+(1))|0);
 var $scevgep8_i=(($__p_0_ph_i+($32<<2))|0);
 var $__p_0_lcssa_i=$scevgep8_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP32[(($__p_01)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_01+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_01=$9;var $__h_02=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i4=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((17336)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i)|0);
 HEAP32[(($37)>>2)]=17336;
 var $38=(($__p_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(28);
 var $39=(($__p_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$33,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $40=HEAP32[((17340)>>2)];
 var $41=((($40)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $56=$52;
 var $57=HEAP32[(($31)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $60=(($5)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$__p_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $63=HEAP32[((16952)>>2)];
 var $64=($63|0)==-1;
 if($64){label=15;break;}else{label=14;break;}
 case 14: 
 var $66=(($__p_i_i_i4)|0);
 HEAP32[(($66)>>2)]=16952;
 var $67=(($__p_i_i_i4+4)|0);
 HEAP32[(($67)>>2)]=(28);
 var $68=(($__p_i_i_i4+8)|0);
 HEAP32[(($68)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$62,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $69=HEAP32[((16956)>>2)];
 var $70=((($69)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $71=(($61+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($61+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$72;
 var $76=$74;
 var $77=((($75)-($76))|0);
 var $78=$77>>2;
 var $79=($78>>>0)>($70>>>0);
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 var $80=(($74+($70<<2))|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==0;
 if($82){label=17;break;}else{label=19;break;}
 case 17: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 __ZNSt8bad_castC2Ev($84);
 (function() { try { __THREW__ = 0; return ___cxa_throw($83,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $85=$81;
 var $86=HEAP32[(($60)>>2)];
 var $87=(($86)|0);
 var $88=__ZNSt3__114__shared_count16__release_sharedEv($87);
 var $89=(($__names)|0);
 var $90=$81;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+24)|0);
 var $93=HEAP32[(($92)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($89,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_02=$89;label=25;break; }
 case 20: 
 var $94=(($__names+12)|0);
 var $95=HEAP32[(($90)>>2)];
 var $96=(($95+28)|0);
 var $97=HEAP32[(($96)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($94,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_02=$94;label=25;break; }
 case 21: 
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($6)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=(($__names+24)|0);
 var $102=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$89,$101,$56,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $103=($102|0)==($89|0);
 var $104=($103&1);
 HEAP8[($__v)]=$104;
 var $105=(($__b)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($agg_result)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($108);
 var $109=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($109);
 label=28;break;
 case 23: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 var $112=$111$0;
 var $113=$111$1;
 var $114=HEAP32[(($31)>>2)];
 var $115=(($114)|0);
 var $116=__ZNSt3__114__shared_count16__release_sharedEv($115);
 var $_0=$112;var $_01=$113;label=29;break;
 case 24: 
 var $118$0 = ___cxa_find_matching_catch(-1, -1); var $118$1 = tempRet0;
 var $119=$118$0;
 var $120=$118$1;
 var $121=HEAP32[(($60)>>2)];
 var $122=(($121)|0);
 var $123=__ZNSt3__114__shared_count16__release_sharedEv($122);
 var $_0=$119;var $_01=$120;label=29;break;
 case 25: 
 var $_02;
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $128=($89|0)==($_02|0);
 if($128){var $_0=$126;var $_01=$127;label=29;break;}else{var $129=$_02;label=26;break;}
 case 26: 
 var $129;
 var $130=((($129)-(12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($130);
 var $131=($130|0)==($89|0);
 if($131){var $_0=$126;var $_01=$127;label=29;break;}else{var $129=$130;label=26;break;}
 case 27: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($134);
 var $135=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($135);
 var $136=$132$1;
 var $_0=$133;var $_01=$136;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_01;
 var $_0;
 var $138$0=$_0;
 var $138$1=0;
 var $139$0=$138$0;
 var $139$1=$_01;
 ___resumeException($139$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $266$1=$11$1;var $266$0=$11$0;label=104;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit43$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit43$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit43$1;var $lpad_phi$0=$lpad_nonloopexit43$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($__stat_hold_sroa_0_1|0)==0;
 if($12){var $266$1=$lpad_phi$1;var $266$0=$lpad_phi$0;label=104;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $266$1=$lpad_phi$1;var $266$0=$lpad_phi$0;label=104;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $14=($__kb|0)==($__ke|0);
 if($14){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_053=$4;var $__n_does_match_054=0;var $__st_055=$__status_0;var $__ky_056=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $15=(($__b)|0);
 var $16=(($__e)|0);
 var $17=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_056;
 var $__st_055;
 var $__n_does_match_054;
 var $__n_might_match_053;
 var $18=$__ky_056;
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=14;break;}else{label=13;break;}
 case 13: 
 var $24=(($__ky_056+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $28=$25;label=15;break;
 case 14: 
 var $27=$20>>>1;
 var $28=$27;label=15;break;
 case 15: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_055)]=1;
 var $__n_does_match_1=$__n_does_match_054;var $__n_might_match_1=$__n_might_match_053;label=18;break;
 case 17: 
 HEAP8[($__st_055)]=2;
 var $32=((($__n_might_match_053)-(1))|0);
 var $33=((($__n_does_match_054)+(1))|0);
 var $__n_does_match_1=$33;var $__n_might_match_1=$32;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $35=(($__ky_056+12)|0);
 var $36=(($__st_055+1)|0);
 var $37=($35|0)==($__ke|0);
 if($37){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_053=$__n_might_match_1;var $__n_does_match_054=$__n_does_match_1;var $__st_055=$36;var $__ky_056=$35;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){var $55=0;label=25;break;}else{label=20;break;}
 case 20: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=21;break;}else{var $55=$39;label=25;break;}
 case 21: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=6;break; }
 case 22: 
 var $53=($52|0)==-1;
 if($53){label=24;break;}else{label=23;break;}
 case 23: 
 var $_pre=HEAP32[(($15)>>2)];
 var $55=$_pre;label=25;break;
 case 24: 
 HEAP32[(($15)>>2)]=0;
 var $55=0;label=25;break;
 case 25: 
 var $55;
 var $56=($55|0)==0;
 var $57=HEAP32[(($16)>>2)];
 var $58=($57|0)==0;
 if($58){var $75=$55;var $74=0;label=31;break;}else{label=26;break;}
 case 26: 
 var $60=(($57+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($57+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61|0)==($63|0);
 if($64){label=27;break;}else{var $73=$57;label=30;break;}
 case 27: 
 var $66=$57;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=6;break; }
 case 28: 
 var $71=($70|0)==-1;
 if($71){label=29;break;}else{var $73=$57;label=30;break;}
 case 29: 
 HEAP32[(($16)>>2)]=0;
 var $73=0;label=30;break;
 case 30: 
 var $73;
 var $_pr=HEAP32[(($15)>>2)];
 var $75=$_pr;var $74=$73;label=31;break;
 case 31: 
 var $74;
 var $75;
 var $76=($74|0)==0;
 var $77=$56^$76;
 var $78=($__n_might_match_2|0)!=0;
 var $_=$77&$78;
 if($_){label=32;break;}else{label=81;break;}
 case 32: 
 var $80=(($75+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($75+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=33;break;}else{label=35;break;}
 case 33: 
 var $86=$75;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=6;break; }
 case 34: 
 var $extract_t=(($90)&255);
 var $_04_off0=$extract_t;label=36;break;
 case 35: 
 var $92=HEAP8[($81)];
 var $_04_off0=$92;label=36;break;
 case 36: 
 var $_04_off0;
 if($__case_sensitive){var $__c_0=$_04_off0;label=38;break;}else{label=37;break;}
 case 37: 
 var $94=HEAP32[(($17)>>2)];
 var $95=(($94+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,$_04_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$97;label=38;break; } else { label=6;break; }
 case 38: 
 var $__c_0;
 if($14){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa69=$__n_might_match_2;label=80;break;}else{label=39;break;}
 case 39: 
 var $98=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_323_us=$__n_might_match_2;var $__n_does_match_324_us=$__n_does_match_2;var $__st_125_us=$__status_0;var $__consume_0_off027_us=0;var $__ky1_028_us=$__kb;label=40;break;}else{var $__n_might_match_323=$__n_might_match_2;var $__n_does_match_324=$__n_does_match_2;var $__st_125=$__status_0;var $__consume_0_off027=0;var $__ky1_028=$__kb;label=53;break;}
 case 40: 
 var $__ky1_028_us;
 var $__consume_0_off027_us;
 var $__st_125_us;
 var $__n_does_match_324_us;
 var $__n_might_match_323_us;
 var $99=HEAP8[($__st_125_us)];
 var $100=(($99<<24)>>24)==1;
 if($100){label=41;break;}else{var $__consume_1_off0_us=$__consume_0_off027_us;var $__n_does_match_4_us=$__n_does_match_324_us;var $__n_might_match_4_us=$__n_might_match_323_us;label=51;break;}
 case 41: 
 var $102=$__ky1_028_us;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=43;break;}else{label=42;break;}
 case 42: 
 var $107=(($__ky1_028_us+8)|0);
 var $108=HEAP32[(($107)>>2)];
 var $112=$108;label=44;break;
 case 43: 
 var $110=$__ky1_028_us;
 var $111=(($110+1)|0);
 var $112=$111;label=44;break;
 case 44: 
 var $112;
 var $113=(($112+$__indx_0)|0);
 var $114=HEAP8[($113)];
 var $115=(($__c_0<<24)>>24)==(($114<<24)>>24);
 if($115){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP8[($__st_125_us)]=0;
 var $117=((($__n_might_match_323_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off027_us;var $__n_does_match_4_us=$__n_does_match_324_us;var $__n_might_match_4_us=$117;label=51;break;
 case 46: 
 var $119=HEAP8[($102)];
 var $120=($119&255);
 var $121=$120&1;
 var $122=($121|0)==0;
 if($122){label=48;break;}else{label=47;break;}
 case 47: 
 var $124=(($__ky1_028_us+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $128=$125;label=49;break;
 case 48: 
 var $127=$120>>>1;
 var $128=$127;label=49;break;
 case 49: 
 var $128;
 var $129=($128|0)==($98|0);
 if($129){label=50;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_324_us;var $__n_might_match_4_us=$__n_might_match_323_us;label=51;break;}
 case 50: 
 HEAP8[($__st_125_us)]=2;
 var $131=((($__n_might_match_323_us)-(1))|0);
 var $132=((($__n_does_match_324_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$132;var $__n_might_match_4_us=$131;label=51;break;
 case 51: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $134=(($__ky1_028_us+12)|0);
 var $135=($134|0)==($__ke|0);
 if($135){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{label=52;break;}
 case 52: 
 var $136=(($__st_125_us+1)|0);
 var $__n_might_match_323_us=$__n_might_match_4_us;var $__n_does_match_324_us=$__n_does_match_4_us;var $__st_125_us=$136;var $__consume_0_off027_us=$__consume_1_off0_us;var $__ky1_028_us=$134;label=40;break;
 case 53: 
 var $__ky1_028;
 var $__consume_0_off027;
 var $__st_125;
 var $__n_does_match_324;
 var $__n_might_match_323;
 var $137=HEAP8[($__st_125)];
 var $138=(($137<<24)>>24)==1;
 if($138){label=54;break;}else{var $__consume_1_off0=$__consume_0_off027;var $__n_does_match_4=$__n_does_match_324;var $__n_might_match_4=$__n_might_match_323;label=65;break;}
 case 54: 
 var $140=$__ky1_028;
 var $141=HEAP8[($140)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=56;break;}else{label=55;break;}
 case 55: 
 var $145=(($__ky1_028+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $151=$146;label=57;break;
 case 56: 
 var $148=$__ky1_028;
 var $149=(($148+1)|0);
 var $151=$149;label=57;break;
 case 57: 
 var $151;
 var $152=(($151+$__indx_0)|0);
 var $153=HEAP8[($152)];
 var $154=HEAP32[(($17)>>2)];
 var $155=(($154+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($__ct,$153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=5;break; }
 case 58: 
 var $158=(($__c_0<<24)>>24)==(($157<<24)>>24);
 if($158){label=59;break;}else{label=64;break;}
 case 59: 
 var $160=HEAP8[($140)];
 var $161=($160&255);
 var $162=$161&1;
 var $163=($162|0)==0;
 if($163){label=61;break;}else{label=60;break;}
 case 60: 
 var $165=(($__ky1_028+4)|0);
 var $166=HEAP32[(($165)>>2)];
 var $169=$166;label=62;break;
 case 61: 
 var $168=$161>>>1;
 var $169=$168;label=62;break;
 case 62: 
 var $169;
 var $170=($169|0)==($98|0);
 if($170){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_324;var $__n_might_match_4=$__n_might_match_323;label=65;break;}
 case 63: 
 HEAP8[($__st_125)]=2;
 var $172=((($__n_might_match_323)-(1))|0);
 var $173=((($__n_does_match_324)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$173;var $__n_might_match_4=$172;label=65;break;
 case 64: 
 HEAP8[($__st_125)]=0;
 var $175=((($__n_might_match_323)-(1))|0);
 var $__consume_1_off0=$__consume_0_off027;var $__n_does_match_4=$__n_does_match_324;var $__n_might_match_4=$175;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $177=(($__ky1_028+12)|0);
 var $178=($177|0)==($__ke|0);
 if($178){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{label=66;break;}
 case 66: 
 var $179=(($__st_125+1)|0);
 var $__n_might_match_323=$__n_might_match_4;var $__n_does_match_324=$__n_does_match_4;var $__st_125=$179;var $__consume_0_off027=$__consume_1_off0;var $__ky1_028=$177;label=53;break;
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa69=$__n_might_match_3_lcssa;label=80;break;}
 case 68: 
 var $181=HEAP32[(($15)>>2)];
 var $182=(($181+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($181+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=69;break;}else{label=70;break;}
 case 69: 
 var $188=$181;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+40)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=6;break; }
 case 70: 
 var $194=(($183+1)|0);
 HEAP32[(($182)>>2)]=$194;
 label=71;break;
 case 71: 
 var $195=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($195>>>0)<2;
 var $brmerge=$_not|$14;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa69=$__n_might_match_3_lcssa;label=80;break;}else{label=72;break;}
 case 72: 
 var $196=((($__indx_0)+(1))|0);
 var $__n_does_match_537=$__n_does_match_3_lcssa;var $__st_238=$__status_0;var $__ky2_039=$__kb;label=73;break;
 case 73: 
 var $__ky2_039;
 var $__st_238;
 var $__n_does_match_537;
 var $198=HEAP8[($__st_238)];
 var $199=(($198<<24)>>24)==2;
 if($199){label=74;break;}else{var $__n_does_match_6=$__n_does_match_537;label=79;break;}
 case 74: 
 var $201=$__ky2_039;
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 if($205){label=76;break;}else{label=75;break;}
 case 75: 
 var $207=(($__ky2_039+4)|0);
 var $208=HEAP32[(($207)>>2)];
 var $211=$208;label=77;break;
 case 76: 
 var $210=$203>>>1;
 var $211=$210;label=77;break;
 case 77: 
 var $211;
 var $212=($211|0)==($196|0);
 if($212){var $__n_does_match_6=$__n_does_match_537;label=79;break;}else{label=78;break;}
 case 78: 
 HEAP8[($__st_238)]=0;
 var $214=((($__n_does_match_537)-(1))|0);
 var $__n_does_match_6=$214;label=79;break;
 case 79: 
 var $__n_does_match_6;
 var $216=(($__ky2_039+12)|0);
 var $217=(($__st_238+1)|0);
 var $218=($216|0)==($__ke|0);
 if($218){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa69=$__n_might_match_3_lcssa;label=80;break;}else{var $__n_does_match_537=$__n_does_match_6;var $__st_238=$217;var $__ky2_039=$216;label=73;break;}
 case 80: 
 var $__n_might_match_3_lcssa69;
 var $__n_does_match_7;
 var $219=((($__indx_0)+(1))|0);
 var $__indx_0=$219;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa69;label=19;break;
 case 81: 
 var $221=($75|0)==0;
 if($221){var $236=0;label=87;break;}else{label=82;break;}
 case 82: 
 var $223=(($75+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($75+16)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($224|0)==($226|0);
 if($227){label=83;break;}else{var $236=$75;label=87;break;}
 case 83: 
 var $229=$75;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+36)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$232]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=7;break; }
 case 84: 
 var $234=($233|0)==-1;
 if($234){label=86;break;}else{label=85;break;}
 case 85: 
 var $_pre68=HEAP32[(($15)>>2)];
 var $236=$_pre68;label=87;break;
 case 86: 
 HEAP32[(($15)>>2)]=0;
 var $236=0;label=87;break;
 case 87: 
 var $236;
 var $237=($236|0)==0;
 if($76){label=93;break;}else{label=88;break;}
 case 88: 
 var $239=(($74+12)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($74+16)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($240|0)==($242|0);
 if($243){label=90;break;}else{label=89;break;}
 case 89: 
 if($237){label=96;break;}else{label=95;break;}
 case 90: 
 var $245=$74;
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+36)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=7;break; }
 case 91: 
 var $250=($249|0)==-1;
 if($250){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($16)>>2)]=0;
 label=93;break;
 case 93: 
 if($237){label=95;break;}else{label=96;break;}
 case 94: 
 var $252=($74|0)==0;
 var $tmp8=$237^$252;
 if($tmp8){label=96;break;}else{label=95;break;}
 case 95: 
 var $254=HEAP32[(($__err)>>2)];
 var $255=$254|2;
 HEAP32[(($__err)>>2)]=$255;
 label=96;break;
 case 96: 
 if($14){label=100;break;}else{var $_0717=$__kb;var $__st_318=$__status_0;label=97;break;}
 case 97: 
 var $__st_318;
 var $_0717;
 var $256=HEAP8[($__st_318)];
 var $257=(($256<<24)>>24)==2;
 if($257){var $_0716=$_0717;label=101;break;}else{label=98;break;}
 case 98: 
 var $259=(($_0717+12)|0);
 var $260=($259|0)==($__ke|0);
 if($260){label=100;break;}else{label=99;break;}
 case 99: 
 var $261=(($__st_318+1)|0);
 var $_0717=$259;var $__st_318=$261;label=97;break;
 case 100: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|4;
 HEAP32[(($__err)>>2)]=$263;
 var $_0716=$__ke;label=101;break;
 case 101: 
 var $_0716;
 var $264=($__stat_hold_sroa_0_1|0)==0;
 if($264){label=103;break;}else{label=102;break;}
 case 102: 
 _free($__stat_hold_sroa_0_1);
 label=103;break;
 case 103: 
 STACKTOP=sp;return $_0716;
 case 104: 
 var $266$0;
 var $266$1;
 ___resumeException($266$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre11=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre11;var $_pre_phi13=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi13=$_pre12;label=9;break;
 case 9: 
 var $_pre_phi13;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp8=((($89)-(1))|0);
 var $90=$phitmp8;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi13)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp6=$170^$185;
 if($tmp6){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre11=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre11;var $_pre_phi13=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi13=$_pre12;label=9;break;
 case 9: 
 var $_pre_phi13;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp8=((($89)-(1))|0);
 var $90=$phitmp8;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi13)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0=$152$r;var $152$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$152$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$152$1;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp6=$170^$185;
 if($tmp6){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre11=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre11;var $_pre_phi13=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi13=$_pre12;label=9;break;
 case 9: 
 var $_pre_phi13;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp8=((($89)-(1))|0);
 var $90=$phitmp8;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi13)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp6=$170^$185;
 if($tmp6){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre11=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre11;var $_pre_phi13=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi13=$_pre12;label=9;break;
 case 9: 
 var $_pre_phi13;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp8=((($89)-(1))|0);
 var $90=$phitmp8;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi13)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp6=$170^$185;
 if($tmp6){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre11=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre11;var $_pre_phi13=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi13=$_pre12;label=9;break;
 case 9: 
 var $_pre_phi13;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp8=((($89)-(1))|0);
 var $90=$phitmp8;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi13)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp6=$170^$185;
 if($tmp6){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre11=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre11;var $_pre_phi13=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi13=$_pre12;label=9;break;
 case 9: 
 var $_pre_phi13;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp8=((($89)-(1))|0);
 var $90=$phitmp8;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi13)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0=$152$r;var $152$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$152$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$152$1;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp6=$170^$185;
 if($tmp6){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre12=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre12;var $_pre_phi14=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre13=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi14=$_pre13;label=5;break;
 case 5: 
 var $_pre_phi14;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp8=((($83)-(1))|0);
 var $84=$phitmp8;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi14)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp6=$168^$183;
 if($tmp6){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre12=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre12;var $_pre_phi14=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre13=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi14=$_pre13;label=5;break;
 case 5: 
 var $_pre_phi14;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp8=((($83)-(1))|0);
 var $84=$phitmp8;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi14)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp6=$168^$183;
 if($tmp6){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre12=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre12;var $_pre_phi14=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre13=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi14=$_pre13;label=5;break;
 case 5: 
 var $_pre_phi14;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp8=((($83)-(1))|0);
 var $84=$phitmp8;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi14)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp6=$168^$183;
 if($tmp6){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $__grouping15=$__grouping;
 var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping15)>>2)]=0; HEAP32[((($__grouping15)+(4))>>2)]=0; HEAP32[((($__grouping15)+(8))>>2)]=0;
 var $1=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17336)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17336;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=39;break; }
 case 4: 
 var $12=HEAP32[((17340)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=6;break;}else{label=8;break;}
 case 6: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=39;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $28=$24;
 var $29=(($__atoms)|0);
 var $30=$24;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+32)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($28,13304,13330,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=39;break; }
 case 9: 
 var $35=HEAP32[(($3)>>2)];
 var $36=(($35)|0);
 var $37=__ZNSt3__114__shared_count16__release_sharedEv($36);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $38=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=41;break; }
 case 10: 
 var $39=HEAP8[($1)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__buf+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $_pre16=(($38+1)|0);
 var $47=$44;var $_pre_phi=$_pre16;var $_pre_phi18=$43;label=13;break;
 case 12: 
 var $46=(($38+1)|0);
 var $_pre17=(($__buf+8)|0);
 var $47=$46;var $_pre_phi=$46;var $_pre_phi18=$_pre17;label=13;break;
 case 13: 
 var $_pre_phi18;
 var $_pre_phi;
 var $47;
 HEAP32[(($__a_end)>>2)]=$47;
 var $48=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$48;
 HEAP32[(($__dc)>>2)]=0;
 var $49=(($__b)|0);
 var $50=(($__e)|0);
 var $51=(($__buf)|0);
 var $52=(($__buf+4)|0);
 var $_pre=HEAP32[(($49)>>2)];
 var $__a_0=$47;var $53=$_pre;label=14;break;
 case 14: 
 var $53;
 var $__a_0;
 var $54=($53|0)==0;
 if($54){var $69=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $56=(($53+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($53+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=16;break;}else{var $69=$53;label=19;break;}
 case 16: 
 var $62=$53;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 17: 
 var $67=($66|0)==-1;
 if($67){label=18;break;}else{var $69=$53;label=19;break;}
 case 18: 
 HEAP32[(($49)>>2)]=0;
 var $69=0;label=19;break;
 case 19: 
 var $69;
 var $70=($69|0)==0;
 var $71=HEAP32[(($50)>>2)];
 var $72=($71|0)==0;
 if($72){label=25;break;}else{label=20;break;}
 case 20: 
 var $74=(($71+12)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($71+16)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($75|0)==($77|0);
 if($78){label=22;break;}else{label=21;break;}
 case 21: 
 if($70){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 22: 
 var $80=$71;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+36)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=40;break; }
 case 23: 
 var $85=($84|0)==-1;
 if($85){label=24;break;}else{label=26;break;}
 case 24: 
 HEAP32[(($50)>>2)]=0;
 label=25;break;
 case 25: 
 if($70){var $__a_2=$__a_0;label=51;break;}else{label=27;break;}
 case 26: 
 var $87=($71|0)==0;
 var $88=$70^$87;
 if($88){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 27: 
 var $89=HEAP32[(($__a_end)>>2)];
 var $90=$89;
 var $91=$__a_0;
 var $92=((($90)-($91))|0);
 var $93=HEAP8[($1)];
 var $94=($93&255);
 var $95=$94&1;
 var $96=($95|0)==0;
 var $97=HEAP32[(($52)>>2)];
 var $98=$94>>>1;
 var $99=($96?$98:$97);
 var $100=($92|0)==($99|0);
 if($100){label=28;break;}else{var $__a_1=$__a_0;label=43;break;}
 case 28: 
 if($96){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=HEAP32[(($52)>>2)];
 var $108=$103;var $107=$103;label=31;break;
 case 30: 
 var $105=$94>>>1;
 var $106=$94>>>1;
 var $108=$106;var $107=$105;label=31;break;
 case 31: 
 var $107;
 var $108;
 var $109=$108<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$109,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $110=HEAP8[($1)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){var $116=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $114=HEAP32[(($51)>>2)];
 var $115=$114&-2;
 var $phitmp10=((($115)-(1))|0);
 var $116=$phitmp10;label=34;break;
 case 34: 
 var $116;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$116,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=40;break; }
 case 35: 
 var $117=HEAP8[($1)];
 var $118=$117&1;
 var $119=(($118<<24)>>24)==0;
 if($119){var $122=$_pre_phi;label=37;break;}else{label=36;break;}
 case 36: 
 var $121=HEAP32[(($_pre_phi18)>>2)];
 var $122=$121;label=37;break;
 case 37: 
 var $122;
 var $123=(($122+$107)|0);
 HEAP32[(($__a_end)>>2)]=$123;
 var $__a_1=$122;label=43;break;
 case 38: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $_02=$127;var $_03=$126;label=74;break;
 case 39: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $132=HEAP32[(($3)>>2)];
 var $133=(($132)|0);
 var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
 var $_02=$131;var $_03=$130;label=74;break;
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=42;break;
 case 42: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $135=$eh_lpad_body$0;
 var $136=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_02=$136;var $_03=$135;label=74;break;
 case 43: 
 var $__a_1;
 var $137=(($69+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($69+16)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($138|0)==($140|0);
 if($141){label=44;break;}else{label=46;break;}
 case 44: 
 var $143=$69;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+36)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=40;break; }
 case 45: 
 var $extract_t=(($147)&255);
 var $_0_off0=$extract_t;label=47;break;
 case 46: 
 var $149=HEAP8[($138)];
 var $_0_off0=$149;label=47;break;
 case 47: 
 var $_0_off0;
 var $151=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$48,$__g_end,$29);
 var $152=($151|0)==0;
 if($152){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $154=HEAP32[(($137)>>2)];
 var $155=HEAP32[(($139)>>2)];
 var $156=($154|0)==($155|0);
 if($156){label=49;break;}else{label=50;break;}
 case 49: 
 var $158=$69;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+40)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $53=$69;label=14;break; } else { label=40;break; }
 case 50: 
 var $164=(($154+1)|0);
 HEAP32[(($137)>>2)]=$164;
 var $__a_0=$__a_1;var $53=$69;label=14;break;
 case 51: 
 var $__a_2;
 var $166=(($__a_2+3)|0);
 HEAP8[($166)]=0;
 var $167=HEAP8[(18072)];
 var $168=(($167<<24)>>24)==0;
 if($168){label=52;break;}else{label=56;break;}
 case 52: 
 var $170=___cxa_guard_acquire(18072);
 var $171=($170|0)==0;
 if($171){label=56;break;}else{label=53;break;}
 case 53: 
 var $173=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((15792)>>2)]=$173;

 label=56;break;
 case 55: 
 var $176$0 = ___cxa_find_matching_catch(-1, -1); var $176$1 = tempRet0;

 var $eh_lpad_body$1=$176$1;var $eh_lpad_body$0=$176$0;label=42;break;
 case 56: 
 var $178=HEAP32[((15792)>>2)];
 var $179=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$178,2384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=41;break; }
 case 57: 
 var $181=($179|0)==1;
 if($181){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $184=HEAP32[(($49)>>2)];
 var $185=($184|0)==0;
 if($185){var $200=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $187=(($184+12)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($184+16)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($188|0)==($190|0);
 if($191){label=61;break;}else{var $200=$184;label=64;break;}
 case 61: 
 var $193=$184;
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+36)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$196]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=41;break; }
 case 62: 
 var $198=($197|0)==-1;
 if($198){label=63;break;}else{var $200=$184;label=64;break;}
 case 63: 
 HEAP32[(($49)>>2)]=0;
 var $200=0;label=64;break;
 case 64: 
 var $200;
 var $201=($200|0)==0;
 var $202=HEAP32[(($50)>>2)];
 var $203=($202|0)==0;
 if($203){label=70;break;}else{label=65;break;}
 case 65: 
 var $205=(($202+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($202+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=67;break;}else{label=66;break;}
 case 66: 
 if($201){label=73;break;}else{label=72;break;}
 case 67: 
 var $211=$202;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=41;break; }
 case 68: 
 var $216=($215|0)==-1;
 if($216){label=69;break;}else{label=71;break;}
 case 69: 
 HEAP32[(($50)>>2)]=0;
 label=70;break;
 case 70: 
 if($201){label=72;break;}else{label=73;break;}
 case 71: 
 var $218=($202|0)==0;
 var $tmp8=$201^$218;
 if($tmp8){label=73;break;}else{label=72;break;}
 case 72: 
 var $220=HEAP32[(($__err)>>2)];
 var $221=$220|2;
 HEAP32[(($__err)>>2)]=$221;
 label=73;break;
 case 73: 
 var $223=(($agg_result)|0);
 HEAP32[(($223)>>2)]=$200;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 74: 
 var $_03;
 var $_02;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $225$0=$_03;
 var $225$1=0;
 var $226$0=$225$0;
 var $226$1=$_02;
 ___resumeException($226$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_01=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_01=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_01=0;label=23;break;
 case 11: 
 var $37=(($__atoms+26)|0);
 var $_02=$__atoms;label=13;break;
 case 12: 
 var $39=($43|0)==($37|0);
 if($39){var $_0_lcssa=$37;label=14;break;}else{var $_02=$43;label=13;break;}
 case 13: 
 var $_02;
 var $41=HEAP8[($_02)];
 var $42=(($41<<24)>>24)==(($__ct<<24)>>24);
 var $43=(($_02+1)|0);
 if($42){var $_0_lcssa=$_02;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $44=$_0_lcssa;
 var $45=$__atoms;
 var $46=((($44)-($45))|0);
 var $47=($46|0)>23;
 if($47){var $_01=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $50=($46|0)<($__base|0);
 if($50){label=22;break;}else{var $_01=-1;label=23;break;}
 case 17: 
 var $52=($46|0)<22;
 if($52){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_01=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $55=$1;
 var $56=$__a;
 var $57=((($55)-($56))|0);
 var $58=($57|0)<3;
 if($58){label=20;break;}else{var $_01=-1;label=23;break;}
 case 20: 
 var $60=((($1)-(1))|0);
 var $61=HEAP8[($60)];
 var $62=(($61<<24)>>24)==48;
 if($62){label=21;break;}else{var $_01=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $64=((13304+$46)|0);
 var $65=HEAP8[($64)];
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($__a_end)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $_01=0;label=23;break;
 case 22: 
 var $69=((13304+$46)|0);
 var $70=HEAP8[($69)];
 var $71=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$71;
 HEAP8[($1)]=$70;
 var $72=HEAP32[(($__dc)>>2)];
 var $73=((($72)+(1))|0);
 HEAP32[(($__dc)>>2)]=$73;
 var $_01=0;label=23;break;
 case 23: 
 var $_01;
 return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i4=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((17328)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i)|0);
 HEAP32[(($37)>>2)]=17328;
 var $38=(($__p_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(28);
 var $39=(($__p_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$33,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $40=HEAP32[((17332)>>2)];
 var $41=((($40)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $56=$52;
 var $57=HEAP32[(($31)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $60=(($5)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$__p_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $63=HEAP32[((16944)>>2)];
 var $64=($63|0)==-1;
 if($64){label=15;break;}else{label=14;break;}
 case 14: 
 var $66=(($__p_i_i_i4)|0);
 HEAP32[(($66)>>2)]=16944;
 var $67=(($__p_i_i_i4+4)|0);
 HEAP32[(($67)>>2)]=(28);
 var $68=(($__p_i_i_i4+8)|0);
 HEAP32[(($68)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$62,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $69=HEAP32[((16948)>>2)];
 var $70=((($69)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $71=(($61+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($61+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$72;
 var $76=$74;
 var $77=((($75)-($76))|0);
 var $78=$77>>2;
 var $79=($78>>>0)>($70>>>0);
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 var $80=(($74+($70<<2))|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==0;
 if($82){label=17;break;}else{label=19;break;}
 case 17: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 __ZNSt8bad_castC2Ev($84);
 (function() { try { __THREW__ = 0; return ___cxa_throw($83,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $85=$81;
 var $86=HEAP32[(($60)>>2)];
 var $87=(($86)|0);
 var $88=__ZNSt3__114__shared_count16__release_sharedEv($87);
 var $89=(($__names)|0);
 var $90=$81;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+24)|0);
 var $93=HEAP32[(($92)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($89,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_02=$89;label=25;break; }
 case 20: 
 var $94=(($__names+12)|0);
 var $95=HEAP32[(($90)>>2)];
 var $96=(($95+28)|0);
 var $97=HEAP32[(($96)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($94,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_02=$94;label=25;break; }
 case 21: 
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($6)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=(($__names+24)|0);
 var $102=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$89,$101,$56,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $103=($102|0)==($89|0);
 var $104=($103&1);
 HEAP8[($__v)]=$104;
 var $105=(($__b)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($agg_result)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($108);
 var $109=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($109);
 label=28;break;
 case 23: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 var $112=$111$0;
 var $113=$111$1;
 var $114=HEAP32[(($31)>>2)];
 var $115=(($114)|0);
 var $116=__ZNSt3__114__shared_count16__release_sharedEv($115);
 var $_0=$112;var $_01=$113;label=29;break;
 case 24: 
 var $118$0 = ___cxa_find_matching_catch(-1, -1); var $118$1 = tempRet0;
 var $119=$118$0;
 var $120=$118$1;
 var $121=HEAP32[(($60)>>2)];
 var $122=(($121)|0);
 var $123=__ZNSt3__114__shared_count16__release_sharedEv($122);
 var $_0=$119;var $_01=$120;label=29;break;
 case 25: 
 var $_02;
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $128=($89|0)==($_02|0);
 if($128){var $_0=$126;var $_01=$127;label=29;break;}else{var $129=$_02;label=26;break;}
 case 26: 
 var $129;
 var $130=((($129)-(12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($130);
 var $131=($130|0)==($89|0);
 if($131){var $_0=$126;var $_01=$127;label=29;break;}else{var $129=$130;label=26;break;}
 case 27: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($134);
 var $135=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($135);
 var $136=$132$1;
 var $_0=$133;var $_01=$136;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_01;
 var $_0;
 var $138$0=$_0;
 var $138$1=0;
 var $139$0=$138$0;
 var $139$1=$_01;
 ___resumeException($139$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $271$1=$11$1;var $271$0=$11$0;label=106;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit41$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit41$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit41$1;var $lpad_phi$0=$lpad_nonloopexit41$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($__stat_hold_sroa_0_1|0)==0;
 if($12){var $271$1=$lpad_phi$1;var $271$0=$lpad_phi$0;label=106;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $271$1=$lpad_phi$1;var $271$0=$lpad_phi$0;label=106;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $14=($__kb|0)==($__ke|0);
 if($14){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_051=$4;var $__n_does_match_052=0;var $__st_053=$__status_0;var $__ky_054=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $15=(($__b)|0);
 var $16=(($__e)|0);
 var $17=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_054;
 var $__st_053;
 var $__n_does_match_052;
 var $__n_might_match_051;
 var $18=$__ky_054;
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=14;break;}else{label=13;break;}
 case 13: 
 var $24=(($__ky_054+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $28=$25;label=15;break;
 case 14: 
 var $27=$20>>>1;
 var $28=$27;label=15;break;
 case 15: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_053)]=1;
 var $__n_does_match_1=$__n_does_match_052;var $__n_might_match_1=$__n_might_match_051;label=18;break;
 case 17: 
 HEAP8[($__st_053)]=2;
 var $32=((($__n_might_match_051)-(1))|0);
 var $33=((($__n_does_match_052)+(1))|0);
 var $__n_does_match_1=$33;var $__n_might_match_1=$32;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $35=(($__ky_054+12)|0);
 var $36=(($__st_053+1)|0);
 var $37=($35|0)==($__ke|0);
 if($37){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_051=$__n_might_match_1;var $__n_does_match_052=$__n_does_match_1;var $__st_053=$36;var $__ky_054=$35;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){var $57=0;label=26;break;}else{label=20;break;}
 case 20: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=21;break;}else{label=22;break;}
 case 21: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_06=$52;label=23;break; } else { label=6;break; }
 case 22: 
 var $54=HEAP32[(($43)>>2)];
 var $_06=$54;label=23;break;
 case 23: 
 var $_06;
 var $55=($_06|0)==-1;
 if($55){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre=HEAP32[(($15)>>2)];
 var $57=$_pre;label=26;break;
 case 25: 
 HEAP32[(($15)>>2)]=0;
 var $57=0;label=26;break;
 case 26: 
 var $57;
 var $58=($57|0)==0;
 var $59=HEAP32[(($16)>>2)];
 var $60=($59|0)==0;
 if($60){var $79=$57;var $78=0;label=33;break;}else{label=27;break;}
 case 27: 
 var $62=(($59+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($59+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=28;break;}else{label=29;break;}
 case 28: 
 var $68=$59;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+36)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$72;label=30;break; } else { label=6;break; }
 case 29: 
 var $74=HEAP32[(($63)>>2)];
 var $_05=$74;label=30;break;
 case 30: 
 var $_05;
 var $75=($_05|0)==-1;
 if($75){label=31;break;}else{var $77=$59;label=32;break;}
 case 31: 
 HEAP32[(($16)>>2)]=0;
 var $77=0;label=32;break;
 case 32: 
 var $77;
 var $_pr=HEAP32[(($15)>>2)];
 var $79=$_pr;var $78=$77;label=33;break;
 case 33: 
 var $78;
 var $79;
 var $80=($78|0)==0;
 var $81=$58^$80;
 var $82=($__n_might_match_2|0)!=0;
 var $_=$81&$82;
 if($_){label=34;break;}else{label=82;break;}
 case 34: 
 var $84=(($79+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($79+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=35;break;}else{label=36;break;}
 case 35: 
 var $90=$79;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$94;label=37;break; } else { label=6;break; }
 case 36: 
 var $96=HEAP32[(($85)>>2)];
 var $_04=$96;label=37;break;
 case 37: 
 var $_04;
 if($__case_sensitive){var $__c_0=$_04;label=39;break;}else{label=38;break;}
 case 38: 
 var $98=HEAP32[(($17)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($__ct,$_04) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$101;label=39;break; } else { label=6;break; }
 case 39: 
 var $__c_0;
 if($14){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa66=$__n_might_match_2;label=81;break;}else{label=40;break;}
 case 40: 
 var $102=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_321_us=$__n_might_match_2;var $__n_does_match_322_us=$__n_does_match_2;var $__st_123_us=$__status_0;var $__consume_0_off025_us=0;var $__ky1_026_us=$__kb;label=41;break;}else{var $__n_might_match_321=$__n_might_match_2;var $__n_does_match_322=$__n_does_match_2;var $__st_123=$__status_0;var $__consume_0_off025=0;var $__ky1_026=$__kb;label=54;break;}
 case 41: 
 var $__ky1_026_us;
 var $__consume_0_off025_us;
 var $__st_123_us;
 var $__n_does_match_322_us;
 var $__n_might_match_321_us;
 var $103=HEAP8[($__st_123_us)];
 var $104=(($103<<24)>>24)==1;
 if($104){label=42;break;}else{var $__consume_1_off0_us=$__consume_0_off025_us;var $__n_does_match_4_us=$__n_does_match_322_us;var $__n_might_match_4_us=$__n_might_match_321_us;label=52;break;}
 case 42: 
 var $106=$__ky1_026_us;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=44;break;}else{label=43;break;}
 case 43: 
 var $111=(($__ky1_026_us+8)|0);
 var $112=HEAP32[(($111)>>2)];
 var $115=$112;label=45;break;
 case 44: 
 var $114=(($__ky1_026_us+4)|0);
 var $115=$114;label=45;break;
 case 45: 
 var $115;
 var $116=(($115+($__indx_0<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($__c_0|0)==($117|0);
 if($118){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP8[($__st_123_us)]=0;
 var $120=((($__n_might_match_321_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off025_us;var $__n_does_match_4_us=$__n_does_match_322_us;var $__n_might_match_4_us=$120;label=52;break;
 case 47: 
 var $122=HEAP8[($106)];
 var $123=($122&255);
 var $124=$123&1;
 var $125=($124|0)==0;
 if($125){label=49;break;}else{label=48;break;}
 case 48: 
 var $127=(($__ky1_026_us+4)|0);
 var $128=HEAP32[(($127)>>2)];
 var $131=$128;label=50;break;
 case 49: 
 var $130=$123>>>1;
 var $131=$130;label=50;break;
 case 50: 
 var $131;
 var $132=($131|0)==($102|0);
 if($132){label=51;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_322_us;var $__n_might_match_4_us=$__n_might_match_321_us;label=52;break;}
 case 51: 
 HEAP8[($__st_123_us)]=2;
 var $134=((($__n_might_match_321_us)-(1))|0);
 var $135=((($__n_does_match_322_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$135;var $__n_might_match_4_us=$134;label=52;break;
 case 52: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $137=(($__ky1_026_us+12)|0);
 var $138=($137|0)==($__ke|0);
 if($138){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=68;break;}else{label=53;break;}
 case 53: 
 var $139=(($__st_123_us+1)|0);
 var $__n_might_match_321_us=$__n_might_match_4_us;var $__n_does_match_322_us=$__n_does_match_4_us;var $__st_123_us=$139;var $__consume_0_off025_us=$__consume_1_off0_us;var $__ky1_026_us=$137;label=41;break;
 case 54: 
 var $__ky1_026;
 var $__consume_0_off025;
 var $__st_123;
 var $__n_does_match_322;
 var $__n_might_match_321;
 var $140=HEAP8[($__st_123)];
 var $141=(($140<<24)>>24)==1;
 if($141){label=55;break;}else{var $__consume_1_off0=$__consume_0_off025;var $__n_does_match_4=$__n_does_match_322;var $__n_might_match_4=$__n_might_match_321;label=66;break;}
 case 55: 
 var $143=$__ky1_026;
 var $144=HEAP8[($143)];
 var $145=$144&1;
 var $146=(($145<<24)>>24)==0;
 if($146){label=57;break;}else{label=56;break;}
 case 56: 
 var $148=(($__ky1_026+8)|0);
 var $149=HEAP32[(($148)>>2)];
 var $153=$149;label=58;break;
 case 57: 
 var $151=(($__ky1_026+4)|0);
 var $153=$151;label=58;break;
 case 58: 
 var $153;
 var $154=(($153+($__indx_0<<2))|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=HEAP32[(($17)>>2)];
 var $157=(($156+28)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($__ct,$155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=5;break; }
 case 59: 
 var $160=($__c_0|0)==($159|0);
 if($160){label=60;break;}else{label=65;break;}
 case 60: 
 var $162=HEAP8[($143)];
 var $163=($162&255);
 var $164=$163&1;
 var $165=($164|0)==0;
 if($165){label=62;break;}else{label=61;break;}
 case 61: 
 var $167=(($__ky1_026+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $171=$168;label=63;break;
 case 62: 
 var $170=$163>>>1;
 var $171=$170;label=63;break;
 case 63: 
 var $171;
 var $172=($171|0)==($102|0);
 if($172){label=64;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_322;var $__n_might_match_4=$__n_might_match_321;label=66;break;}
 case 64: 
 HEAP8[($__st_123)]=2;
 var $174=((($__n_might_match_321)-(1))|0);
 var $175=((($__n_does_match_322)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$175;var $__n_might_match_4=$174;label=66;break;
 case 65: 
 HEAP8[($__st_123)]=0;
 var $177=((($__n_might_match_321)-(1))|0);
 var $__consume_1_off0=$__consume_0_off025;var $__n_does_match_4=$__n_does_match_322;var $__n_might_match_4=$177;label=66;break;
 case 66: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $179=(($__ky1_026+12)|0);
 var $180=($179|0)==($__ke|0);
 if($180){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=68;break;}else{label=67;break;}
 case 67: 
 var $181=(($__st_123+1)|0);
 var $__n_might_match_321=$__n_might_match_4;var $__n_does_match_322=$__n_does_match_4;var $__st_123=$181;var $__consume_0_off025=$__consume_1_off0;var $__ky1_026=$179;label=54;break;
 case 68: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=69;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa66=$__n_might_match_3_lcssa;label=81;break;}
 case 69: 
 var $183=HEAP32[(($15)>>2)];
 var $184=(($183+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($183+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=70;break;}else{label=71;break;}
 case 70: 
 var $190=$183;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+40)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=6;break; }
 case 71: 
 var $196=(($185+4)|0);
 HEAP32[(($184)>>2)]=$196;
 label=72;break;
 case 72: 
 var $197=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($197>>>0)<2;
 var $brmerge=$_not|$14;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa66=$__n_might_match_3_lcssa;label=81;break;}else{label=73;break;}
 case 73: 
 var $198=((($__indx_0)+(1))|0);
 var $__n_does_match_535=$__n_does_match_3_lcssa;var $__st_236=$__status_0;var $__ky2_037=$__kb;label=74;break;
 case 74: 
 var $__ky2_037;
 var $__st_236;
 var $__n_does_match_535;
 var $200=HEAP8[($__st_236)];
 var $201=(($200<<24)>>24)==2;
 if($201){label=75;break;}else{var $__n_does_match_6=$__n_does_match_535;label=80;break;}
 case 75: 
 var $203=$__ky2_037;
 var $204=HEAP8[($203)];
 var $205=($204&255);
 var $206=$205&1;
 var $207=($206|0)==0;
 if($207){label=77;break;}else{label=76;break;}
 case 76: 
 var $209=(($__ky2_037+4)|0);
 var $210=HEAP32[(($209)>>2)];
 var $213=$210;label=78;break;
 case 77: 
 var $212=$205>>>1;
 var $213=$212;label=78;break;
 case 78: 
 var $213;
 var $214=($213|0)==($198|0);
 if($214){var $__n_does_match_6=$__n_does_match_535;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP8[($__st_236)]=0;
 var $216=((($__n_does_match_535)-(1))|0);
 var $__n_does_match_6=$216;label=80;break;
 case 80: 
 var $__n_does_match_6;
 var $218=(($__ky2_037+12)|0);
 var $219=(($__st_236+1)|0);
 var $220=($218|0)==($__ke|0);
 if($220){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa66=$__n_might_match_3_lcssa;label=81;break;}else{var $__n_does_match_535=$__n_does_match_6;var $__st_236=$219;var $__ky2_037=$218;label=74;break;}
 case 81: 
 var $__n_might_match_3_lcssa66;
 var $__n_does_match_7;
 var $221=((($__indx_0)+(1))|0);
 var $__indx_0=$221;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa66;label=19;break;
 case 82: 
 var $223=($79|0)==0;
 if($223){var $240=1;label=89;break;}else{label=83;break;}
 case 83: 
 var $225=(($79+12)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($79+16)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($226|0)==($228|0);
 if($229){label=84;break;}else{label=85;break;}
 case 84: 
 var $231=$79;
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$234]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$235;label=86;break; } else { label=7;break; }
 case 85: 
 var $237=HEAP32[(($226)>>2)];
 var $_02=$237;label=86;break;
 case 86: 
 var $_02;
 var $238=($_02|0)==-1;
 if($238){label=88;break;}else{label=87;break;}
 case 87: 
 var $_pre65=HEAP32[(($15)>>2)];
 var $phitmp=($_pre65|0)==0;
 var $240=$phitmp;label=89;break;
 case 88: 
 HEAP32[(($15)>>2)]=0;
 var $240=1;label=89;break;
 case 89: 
 var $240;
 if($80){label=95;break;}else{label=90;break;}
 case 90: 
 var $242=(($78+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($78+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=91;break;}else{label=92;break;}
 case 91: 
 var $248=$78;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$252;label=93;break; } else { label=7;break; }
 case 92: 
 var $254=HEAP32[(($243)>>2)];
 var $_0=$254;label=93;break;
 case 93: 
 var $_0;
 var $255=($_0|0)==-1;
 if($255){label=94;break;}else{label=96;break;}
 case 94: 
 HEAP32[(($16)>>2)]=0;
 label=95;break;
 case 95: 
 if($240){label=97;break;}else{label=98;break;}
 case 96: 
 var $257=($78|0)==0;
 var $tmp8=$240^$257;
 if($tmp8){label=98;break;}else{label=97;break;}
 case 97: 
 var $259=HEAP32[(($__err)>>2)];
 var $260=$259|2;
 HEAP32[(($__err)>>2)]=$260;
 label=98;break;
 case 98: 
 if($14){label=102;break;}else{var $_0715=$__kb;var $__st_316=$__status_0;label=99;break;}
 case 99: 
 var $__st_316;
 var $_0715;
 var $261=HEAP8[($__st_316)];
 var $262=(($261<<24)>>24)==2;
 if($262){var $_0714=$_0715;label=103;break;}else{label=100;break;}
 case 100: 
 var $264=(($_0715+12)|0);
 var $265=($264|0)==($__ke|0);
 if($265){label=102;break;}else{label=101;break;}
 case 101: 
 var $266=(($__st_316+1)|0);
 var $_0715=$264;var $__st_316=$266;label=99;break;
 case 102: 
 var $267=HEAP32[(($__err)>>2)];
 var $268=$267|4;
 HEAP32[(($__err)>>2)]=$268;
 var $_0714=$__ke;label=103;break;
 case 103: 
 var $_0714;
 var $269=($__stat_hold_sroa_0_1|0)==0;
 if($269){label=105;break;}else{label=104;break;}
 case 104: 
 _free($__stat_hold_sroa_0_1);
 label=105;break;
 case 105: 
 STACKTOP=sp;return $_0714;
 case 106: 
 var $271$0;
 var $271$1;
 ___resumeException($271$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre10=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre10;var $_pre_phi12=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre11=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi12=$_pre11;label=9;break;
 case 9: 
 var $_pre_phi12;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_03=$40;label=14;break;
 case 14: 
 var $_03;
 var $41=($_03|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_02=$60;label=20;break;
 case 20: 
 var $_02;
 var $61=($_02|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp7=((($93)-(1))|0);
 var $94=$phitmp7;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi12)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_05=$172;label=56;break;
 case 56: 
 var $_05;
 var $173=($_05|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_04=$190;label=62;break;
 case 62: 
 var $_04;
 var $191=($_04|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp6=$176^$193;
 if($tmp6){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre10=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre10;var $_pre_phi12=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre11=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi12=$_pre11;label=9;break;
 case 9: 
 var $_pre_phi12;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_03=$40;label=14;break;
 case 14: 
 var $_03;
 var $41=($_03|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_02=$60;label=20;break;
 case 20: 
 var $_02;
 var $61=($_02|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp7=((($93)-(1))|0);
 var $94=$phitmp7;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi12)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$156$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_05=$172;label=56;break;
 case 56: 
 var $_05;
 var $173=($_05|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_04=$190;label=62;break;
 case 62: 
 var $_04;
 var $191=($_04|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp6=$176^$193;
 if($tmp6){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre10=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre10;var $_pre_phi12=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre11=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi12=$_pre11;label=9;break;
 case 9: 
 var $_pre_phi12;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_03=$40;label=14;break;
 case 14: 
 var $_03;
 var $41=($_03|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_02=$60;label=20;break;
 case 20: 
 var $_02;
 var $61=($_02|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp7=((($93)-(1))|0);
 var $94=$phitmp7;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi12)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_05=$172;label=56;break;
 case 56: 
 var $_05;
 var $173=($_05|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_04=$190;label=62;break;
 case 62: 
 var $_04;
 var $191=($_04|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp6=$176^$193;
 if($tmp6){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre10=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre10;var $_pre_phi12=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre11=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi12=$_pre11;label=9;break;
 case 9: 
 var $_pre_phi12;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_03=$40;label=14;break;
 case 14: 
 var $_03;
 var $41=($_03|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_02=$60;label=20;break;
 case 20: 
 var $_02;
 var $61=($_02|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp7=((($93)-(1))|0);
 var $94=$phitmp7;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi12)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_05=$172;label=56;break;
 case 56: 
 var $_05;
 var $173=($_05|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_04=$190;label=62;break;
 case 62: 
 var $_04;
 var $191=($_04|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp6=$176^$193;
 if($tmp6){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre10=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre10;var $_pre_phi12=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre11=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi12=$_pre11;label=9;break;
 case 9: 
 var $_pre_phi12;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_03=$40;label=14;break;
 case 14: 
 var $_03;
 var $41=($_03|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_02=$60;label=20;break;
 case 20: 
 var $_02;
 var $61=($_02|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp7=((($93)-(1))|0);
 var $94=$phitmp7;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi12)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_05=$172;label=56;break;
 case 56: 
 var $_05;
 var $173=($_05|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_04=$190;label=62;break;
 case 62: 
 var $_04;
 var $191=($_04|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp6=$176^$193;
 if($tmp6){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre10=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre10;var $_pre_phi12=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre11=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi12=$_pre11;label=9;break;
 case 9: 
 var $_pre_phi12;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_03=$40;label=14;break;
 case 14: 
 var $_03;
 var $41=($_03|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_02=$60;label=20;break;
 case 20: 
 var $_02;
 var $61=($_02|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=($74?$76:$75);
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp7=((($93)-(1))|0);
 var $94=$phitmp7;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi12)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$156$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_05=$172;label=56;break;
 case 56: 
 var $_05;
 var $173=($_05|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_04=$190;label=62;break;
 case 62: 
 var $_04;
 var $191=($_04|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp6=$176^$193;
 if($tmp6){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}



function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre11=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre11;var $_pre_phi13=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi13=$_pre12;label=5;break;
 case 5: 
 var $_pre_phi13;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_03=$34;label=10;break;
 case 10: 
 var $_03;
 var $35=($_03|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_02=$54;label=16;break;
 case 16: 
 var $_02;
 var $55=($_02|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=($68?$70:$69);
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp7=((($87)-(1))|0);
 var $88=$phitmp7;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi13)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_05=$170;label=53;break;
 case 53: 
 var $_05;
 var $171=($_05|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_04=$188;label=59;break;
 case 59: 
 var $_04;
 var $189=($_04|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp6=$174^$191;
 if($tmp6){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre11=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre11;var $_pre_phi13=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi13=$_pre12;label=5;break;
 case 5: 
 var $_pre_phi13;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_03=$34;label=10;break;
 case 10: 
 var $_03;
 var $35=($_03|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_02=$54;label=16;break;
 case 16: 
 var $_02;
 var $55=($_02|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=($68?$70:$69);
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp7=((($87)-(1))|0);
 var $88=$phitmp7;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi13)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_05=$170;label=53;break;
 case 53: 
 var $_05;
 var $171=($_05|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_04=$188;label=59;break;
 case 59: 
 var $_04;
 var $189=($_04|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp6=$174^$191;
 if($tmp6){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre11=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre11;var $_pre_phi13=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre12=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi13=$_pre12;label=5;break;
 case 5: 
 var $_pre_phi13;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_03=$34;label=10;break;
 case 10: 
 var $_03;
 var $35=($_03|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_02=$54;label=16;break;
 case 16: 
 var $_02;
 var $55=($_02|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=($68?$70:$69);
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp7=((($87)-(1))|0);
 var $88=$phitmp7;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi13)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_05=$170;label=53;break;
 case 53: 
 var $_05;
 var $171=($_05|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_04=$188;label=59;break;
 case 59: 
 var $_04;
 var $189=($_04|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp6=$174^$191;
 if($tmp6){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $__grouping14=$__grouping;
 var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping14)>>2)]=0; HEAP32[((($__grouping14)+(4))>>2)]=0; HEAP32[((($__grouping14)+(8))>>2)]=0;
 var $1=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17328)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17328;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $12=HEAP32[((17332)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=6;break;}else{label=8;break;}
 case 6: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $28=$24;
 var $29=(($__atoms)|0);
 var $30=$24;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($28,13304,13330,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 var $35=HEAP32[(($3)>>2)];
 var $36=(($35)|0);
 var $37=__ZNSt3__114__shared_count16__release_sharedEv($36);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $38=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=42;break; }
 case 10: 
 var $39=HEAP8[($1)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__buf+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $_pre15=(($38+1)|0);
 var $47=$44;var $_pre_phi=$_pre15;var $_pre_phi17=$43;label=13;break;
 case 12: 
 var $46=(($38+1)|0);
 var $_pre16=(($__buf+8)|0);
 var $47=$46;var $_pre_phi=$46;var $_pre_phi17=$_pre16;label=13;break;
 case 13: 
 var $_pre_phi17;
 var $_pre_phi;
 var $47;
 HEAP32[(($__a_end)>>2)]=$47;
 var $48=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$48;
 HEAP32[(($__dc)>>2)]=0;
 var $49=(($__b)|0);
 var $50=(($__e)|0);
 var $51=(($__buf)|0);
 var $52=(($__buf+4)|0);
 var $_pre=HEAP32[(($49)>>2)];
 var $__a_0=$47;var $53=$_pre;label=14;break;
 case 14: 
 var $53;
 var $__a_0;
 var $54=($53|0)==0;
 if($54){var $71=0;label=20;break;}else{label=15;break;}
 case 15: 
 var $56=(($53+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($53+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=16;break;}else{label=17;break;}
 case 16: 
 var $62=$53;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$66;label=18;break; } else { label=41;break; }
 case 17: 
 var $68=HEAP32[(($57)>>2)];
 var $_05=$68;label=18;break;
 case 18: 
 var $_05;
 var $69=($_05|0)==-1;
 if($69){label=19;break;}else{var $71=$53;label=20;break;}
 case 19: 
 HEAP32[(($49)>>2)]=0;
 var $71=0;label=20;break;
 case 20: 
 var $71;
 var $72=($71|0)==0;
 var $73=HEAP32[(($50)>>2)];
 var $74=($73|0)==0;
 if($74){label=26;break;}else{label=21;break;}
 case 21: 
 var $76=(($73+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($73+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=22;break;}else{label=23;break;}
 case 22: 
 var $82=$73;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+36)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04=$86;label=24;break; } else { label=41;break; }
 case 23: 
 var $88=HEAP32[(($77)>>2)];
 var $_04=$88;label=24;break;
 case 24: 
 var $_04;
 var $89=($_04|0)==-1;
 if($89){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($50)>>2)]=0;
 label=26;break;
 case 26: 
 if($72){var $__a_2=$__a_0;label=51;break;}else{label=28;break;}
 case 27: 
 var $91=($73|0)==0;
 var $92=$72^$91;
 if($92){label=28;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 28: 
 var $93=HEAP32[(($__a_end)>>2)];
 var $94=$93;
 var $95=$__a_0;
 var $96=((($94)-($95))|0);
 var $97=HEAP8[($1)];
 var $98=($97&255);
 var $99=$98&1;
 var $100=($99|0)==0;
 var $101=HEAP32[(($52)>>2)];
 var $102=$98>>>1;
 var $103=($100?$102:$101);
 var $104=($96|0)==($103|0);
 if($104){label=29;break;}else{var $__a_1=$__a_0;label=44;break;}
 case 29: 
 if($100){label=31;break;}else{label=30;break;}
 case 30: 
 var $107=HEAP32[(($52)>>2)];
 var $112=$107;var $111=$107;label=32;break;
 case 31: 
 var $109=$98>>>1;
 var $110=$98>>>1;
 var $112=$110;var $111=$109;label=32;break;
 case 32: 
 var $111;
 var $112;
 var $113=$112<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$113,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=41;break; }
 case 33: 
 var $114=HEAP8[($1)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){var $120=10;label=35;break;}else{label=34;break;}
 case 34: 
 var $118=HEAP32[(($51)>>2)];
 var $119=$118&-2;
 var $phitmp9=((($119)-(1))|0);
 var $120=$phitmp9;label=35;break;
 case 35: 
 var $120;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $121=HEAP8[($1)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){var $126=$_pre_phi;label=38;break;}else{label=37;break;}
 case 37: 
 var $125=HEAP32[(($_pre_phi17)>>2)];
 var $126=$125;label=38;break;
 case 38: 
 var $126;
 var $127=(($126+$111)|0);
 HEAP32[(($__a_end)>>2)]=$127;
 var $__a_1=$126;label=44;break;
 case 39: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_02=$131;var $_03=$130;label=75;break;
 case 40: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1); var $133$1 = tempRet0;
 var $134=$133$0;
 var $135=$133$1;
 var $136=HEAP32[(($3)>>2)];
 var $137=(($136)|0);
 var $138=__ZNSt3__114__shared_count16__release_sharedEv($137);
 var $_02=$135;var $_03=$134;label=75;break;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=43;break;
 case 43: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $139=$eh_lpad_body$0;
 var $140=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_02=$140;var $_03=$139;label=75;break;
 case 44: 
 var $__a_1;
 var $141=(($71+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($71+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=45;break;}else{label=46;break;}
 case 45: 
 var $147=$71;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+36)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$151;label=47;break; } else { label=41;break; }
 case 46: 
 var $153=HEAP32[(($142)>>2)];
 var $_0=$153;label=47;break;
 case 47: 
 var $_0;
 var $155=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$48,$__g_end,$29);
 var $156=($155|0)==0;
 if($156){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $158=HEAP32[(($141)>>2)];
 var $159=HEAP32[(($143)>>2)];
 var $160=($158|0)==($159|0);
 if($160){label=49;break;}else{label=50;break;}
 case 49: 
 var $162=$71;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+40)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $53=$71;label=14;break; } else { label=41;break; }
 case 50: 
 var $168=(($158+4)|0);
 HEAP32[(($141)>>2)]=$168;
 var $__a_0=$__a_1;var $53=$71;label=14;break;
 case 51: 
 var $__a_2;
 var $170=(($__a_2+3)|0);
 HEAP8[($170)]=0;
 var $171=HEAP8[(18072)];
 var $172=(($171<<24)>>24)==0;
 if($172){label=52;break;}else{label=56;break;}
 case 52: 
 var $174=___cxa_guard_acquire(18072);
 var $175=($174|0)==0;
 if($175){label=56;break;}else{label=53;break;}
 case 53: 
 var $177=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((15792)>>2)]=$177;

 label=56;break;
 case 55: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1); var $180$1 = tempRet0;

 var $eh_lpad_body$1=$180$1;var $eh_lpad_body$0=$180$0;label=43;break;
 case 56: 
 var $182=HEAP32[((15792)>>2)];
 var $183=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$182,2384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=42;break; }
 case 57: 
 var $185=($183|0)==1;
 if($185){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $188=HEAP32[(($49)>>2)];
 var $189=($188|0)==0;
 if($189){var $206=0;label=65;break;}else{label=60;break;}
 case 60: 
 var $191=(($188+12)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($188+16)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($192|0)==($194|0);
 if($195){label=61;break;}else{label=62;break;}
 case 61: 
 var $197=$188;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+36)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$200]($188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_07=$201;label=63;break; } else { label=42;break; }
 case 62: 
 var $203=HEAP32[(($192)>>2)];
 var $_07=$203;label=63;break;
 case 63: 
 var $_07;
 var $204=($_07|0)==-1;
 if($204){label=64;break;}else{var $206=$188;label=65;break;}
 case 64: 
 HEAP32[(($49)>>2)]=0;
 var $206=0;label=65;break;
 case 65: 
 var $206;
 var $207=($206|0)==0;
 var $208=HEAP32[(($50)>>2)];
 var $209=($208|0)==0;
 if($209){label=71;break;}else{label=66;break;}
 case 66: 
 var $211=(($208+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($208+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=67;break;}else{label=68;break;}
 case 67: 
 var $217=$208;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_06=$221;label=69;break; } else { label=42;break; }
 case 68: 
 var $223=HEAP32[(($212)>>2)];
 var $_06=$223;label=69;break;
 case 69: 
 var $_06;
 var $224=($_06|0)==-1;
 if($224){label=70;break;}else{label=72;break;}
 case 70: 
 HEAP32[(($50)>>2)]=0;
 label=71;break;
 case 71: 
 if($207){label=73;break;}else{label=74;break;}
 case 72: 
 var $226=($208|0)==0;
 var $tmp8=$207^$226;
 if($tmp8){label=74;break;}else{label=73;break;}
 case 73: 
 var $228=HEAP32[(($__err)>>2)];
 var $229=$228|2;
 HEAP32[(($__err)>>2)]=$229;
 label=74;break;
 case 74: 
 var $231=(($agg_result)|0);
 HEAP32[(($231)>>2)]=$206;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 75: 
 var $_03;
 var $_02;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $233$0=$_03;
 var $233$1=0;
 var $234$0=$233$0;
 var $234$1=$_02;
 ___resumeException($234$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_01=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_01=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_01=0;label=23;break;
 case 11: 
 var $37=(($__atoms+104)|0);
 var $_02=$__atoms;label=13;break;
 case 12: 
 var $39=($43|0)==($37|0);
 if($39){var $_0_lcssa=$37;label=14;break;}else{var $_02=$43;label=13;break;}
 case 13: 
 var $_02;
 var $41=HEAP32[(($_02)>>2)];
 var $42=($41|0)==($__ct|0);
 var $43=(($_02+4)|0);
 if($42){var $_0_lcssa=$_02;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $44=$_0_lcssa;
 var $45=$__atoms;
 var $46=((($44)-($45))|0);
 var $47=$46>>2;
 var $48=($46|0)>92;
 if($48){var $_01=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_01=-1;label=23;break;}
 case 17: 
 var $53=($46|0)<88;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_01=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_01=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_01=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((13304+$47)|0);
 var $66=HEAP8[($65)];
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=(($67+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($67)]=$66;
 var $_01=0;label=23;break;
 case 22: 
 var $70=((13304+$47)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_01=0;label=23;break;
 case 23: 
 var $_01;
 return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i2=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17336)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17336;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$3,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $10=HEAP32[((17340)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$22;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,13304,13330,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $32=HEAP32[(($1)>>2)];
 var $33=$__p_i_i_i2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $34=HEAP32[((16952)>>2)];
 var $35=($34|0)==-1;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($__p_i_i_i2)|0);
 HEAP32[(($37)>>2)]=16952;
 var $38=(($__p_i_i_i2+4)|0);
 HEAP32[(($38)>>2)]=(28);
 var $39=(($__p_i_i_i2+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$33,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $40=HEAP32[((16956)>>2)];
 var $41=((($40)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=12;break;}else{label=14;break;}
 case 12: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $56=$52;
 var $57=$52;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$61;
 var $62=$52;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($agg_result,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $66=HEAP32[(($1)>>2)];
 var $67=(($66)|0);
 var $68=__ZNSt3__114__shared_count16__release_sharedEv($67);
 STACKTOP=sp;return;
 case 17: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71)|0);
 var $73=__ZNSt3__114__shared_count16__release_sharedEv($72);
 ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i2=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17336)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17336;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$3,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $10=HEAP32[((17340)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$22;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,13304,13336,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $32=HEAP32[(($1)>>2)];
 var $33=$__p_i_i_i2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $34=HEAP32[((16952)>>2)];
 var $35=($34|0)==-1;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($__p_i_i_i2)|0);
 HEAP32[(($37)>>2)]=16952;
 var $38=(($__p_i_i_i2+4)|0);
 HEAP32[(($38)>>2)]=(28);
 var $39=(($__p_i_i_i2+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$33,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $40=HEAP32[((16956)>>2)];
 var $41=((($40)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=12;break;}else{label=14;break;}
 case 12: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $56=$52;
 var $57=$52;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$61;
 var $62=HEAP32[(($57)>>2)];
 var $63=(($62+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$65;
 var $66=$52;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($agg_result,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 STACKTOP=sp;return;
 case 18: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $75=HEAP32[(($1)>>2)];
 var $76=(($75)|0);
 var $77=__ZNSt3__114__shared_count16__release_sharedEv($76);
 ___resumeException($74$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_01=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_01=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_01=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_01=0;label=36;break;
 case 9: 
 var $31=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_01=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_01=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_01=0;label=36;break;
 case 17: 
 var $58=(($__atoms+32)|0);
 var $_02=$__atoms;label=19;break;
 case 18: 
 var $60=($64|0)==($58|0);
 if($60){var $_0_lcssa=$58;label=20;break;}else{var $_02=$64;label=19;break;}
 case 19: 
 var $_02;
 var $62=HEAP8[($_02)];
 var $63=(($62<<24)>>24)==(($__ct<<24)>>24);
 var $64=(($_02+1)|0);
 if($63){var $_0_lcssa=$_02;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $65=$_0_lcssa;
 var $66=$__atoms;
 var $67=((($65)-($66))|0);
 var $68=($67|0)>31;
 if($68){var $_01=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $70=((13304+$67)|0);
 var $71=HEAP8[($70)];
 if(($67|0)==25|($67|0)==24){ label=22;break;}else if(($67|0)==22|($67|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $73=HEAP32[(($__a_end)>>2)];
 var $74=($73|0)==($__a|0);
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=((($73)-(1))|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$78&95;
 var $80=HEAP8[($__exp)];
 var $81=($80&255);
 var $82=$81&127;
 var $83=($79|0)==($82|0);
 if($83){label=24;break;}else{var $_01=-1;label=36;break;}
 case 24: 
 var $85=(($73+1)|0);
 HEAP32[(($__a_end)>>2)]=$85;
 HEAP8[($73)]=$71;
 var $_01=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $86=HEAP32[(($__a_end)>>2)];
 var $87=(($86+1)|0);
 HEAP32[(($__a_end)>>2)]=$87;
 HEAP8[($86)]=$71;
 var $_01=0;label=36;break;
 case 26: 
 var $89=($71&255);
 var $90=$89&95;
 var $91=HEAP8[($__exp)];
 var $92=(($91<<24)>>24);
 var $93=($90|0)==($92|0);
 if($93){label=27;break;}else{label=34;break;}
 case 27: 
 var $95=$91|-128;
 HEAP8[($__exp)]=$95;
 var $96=HEAP8[($__in_units)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $100=$__grouping;
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=30;break;}else{label=29;break;}
 case 29: 
 var $106=(($__grouping+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $110=$107;label=31;break;
 case 30: 
 var $109=$102>>>1;
 var $110=$109;label=31;break;
 case 31: 
 var $110;
 var $111=($110|0)==0;
 if($111){label=34;break;}else{label=32;break;}
 case 32: 
 var $113=HEAP32[(($__g_end)>>2)];
 var $114=$113;
 var $115=$__g;
 var $116=((($114)-($115))|0);
 var $117=($116|0)<160;
 if($117){label=33;break;}else{label=34;break;}
 case 33: 
 var $119=HEAP32[(($__dc)>>2)];
 var $120=(($113+4)|0);
 HEAP32[(($__g_end)>>2)]=$120;
 HEAP32[(($113)>>2)]=$119;
 label=34;break;
 case 34: 
 var $122=HEAP32[(($__a_end)>>2)];
 var $123=(($122+1)|0);
 HEAP32[(($__a_end)>>2)]=$123;
 HEAP8[($122)]=$71;
 var $124=($67|0)>21;
 if($124){var $_01=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $126=HEAP32[(($__dc)>>2)];
 var $127=((($126)+(1))|0);
 HEAP32[(($__dc)>>2)]=$127;
 var $_01=0;label=36;break;
 case 36: 
 var $_01;
 return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i2=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17328)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17328;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$3,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $10=HEAP32[((17332)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$22;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,13304,13330,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $32=HEAP32[(($1)>>2)];
 var $33=$__p_i_i_i2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $34=HEAP32[((16944)>>2)];
 var $35=($34|0)==-1;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($__p_i_i_i2)|0);
 HEAP32[(($37)>>2)]=16944;
 var $38=(($__p_i_i_i2+4)|0);
 HEAP32[(($38)>>2)]=(28);
 var $39=(($__p_i_i_i2+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$33,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $40=HEAP32[((16948)>>2)];
 var $41=((($40)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=12;break;}else{label=14;break;}
 case 12: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $56=$52;
 var $57=$52;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$61;
 var $62=$52;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($agg_result,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $66=HEAP32[(($1)>>2)];
 var $67=(($66)|0);
 var $68=__ZNSt3__114__shared_count16__release_sharedEv($67);
 STACKTOP=sp;return;
 case 17: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71)|0);
 var $73=__ZNSt3__114__shared_count16__release_sharedEv($72);
 ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i2=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17328)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17328;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$3,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $10=HEAP32[((17332)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$22;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,13304,13336,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $32=HEAP32[(($1)>>2)];
 var $33=$__p_i_i_i2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $34=HEAP32[((16944)>>2)];
 var $35=($34|0)==-1;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($__p_i_i_i2)|0);
 HEAP32[(($37)>>2)]=16944;
 var $38=(($__p_i_i_i2+4)|0);
 HEAP32[(($38)>>2)]=(28);
 var $39=(($__p_i_i_i2+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$33,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $40=HEAP32[((16948)>>2)];
 var $41=((($40)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=12;break;}else{label=14;break;}
 case 12: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $56=$52;
 var $57=$52;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$61;
 var $62=HEAP32[(($57)>>2)];
 var $63=(($62+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$65;
 var $66=$52;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($agg_result,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 STACKTOP=sp;return;
 case 18: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $75=HEAP32[(($1)>>2)];
 var $76=(($75)|0);
 var $77=__ZNSt3__114__shared_count16__release_sharedEv($76);
 ___resumeException($74$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_01=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_01=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_01=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_01=0;label=36;break;
 case 9: 
 var $31=($__ct|0)==($__thousands_sep|0);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_01=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_01=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_01=0;label=36;break;
 case 17: 
 var $58=(($__atoms+128)|0);
 var $_02=$__atoms;label=19;break;
 case 18: 
 var $60=($64|0)==($58|0);
 if($60){var $_0_lcssa=$58;label=20;break;}else{var $_02=$64;label=19;break;}
 case 19: 
 var $_02;
 var $62=HEAP32[(($_02)>>2)];
 var $63=($62|0)==($__ct|0);
 var $64=(($_02+4)|0);
 if($63){var $_0_lcssa=$_02;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $65=$_0_lcssa;
 var $66=$__atoms;
 var $67=((($65)-($66))|0);
 var $68=$67>>2;
 var $69=($67|0)>124;
 if($69){var $_01=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $71=((13304+$68)|0);
 var $72=HEAP8[($71)];
 if(($68|0)==25|($68|0)==24){ label=22;break;}else if(($68|0)==22|($68|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $74=HEAP32[(($__a_end)>>2)];
 var $75=($74|0)==($__a|0);
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=((($74)-(1))|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79&95;
 var $81=HEAP8[($__exp)];
 var $82=($81&255);
 var $83=$82&127;
 var $84=($80|0)==($83|0);
 if($84){label=24;break;}else{var $_01=-1;label=36;break;}
 case 24: 
 var $86=(($74+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($74)]=$72;
 var $_01=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $89=($72&255);
 var $90=$89&95;
 var $91=HEAP8[($__exp)];
 var $92=(($91<<24)>>24);
 var $93=($90|0)==($92|0);
 if($93){label=27;break;}else{label=34;break;}
 case 27: 
 var $95=$91|-128;
 HEAP8[($__exp)]=$95;
 var $96=HEAP8[($__in_units)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $100=$__grouping;
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=30;break;}else{label=29;break;}
 case 29: 
 var $106=(($__grouping+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $110=$107;label=31;break;
 case 30: 
 var $109=$102>>>1;
 var $110=$109;label=31;break;
 case 31: 
 var $110;
 var $111=($110|0)==0;
 if($111){label=34;break;}else{label=32;break;}
 case 32: 
 var $113=HEAP32[(($__g_end)>>2)];
 var $114=$113;
 var $115=$__g;
 var $116=((($114)-($115))|0);
 var $117=($116|0)<160;
 if($117){label=33;break;}else{label=34;break;}
 case 33: 
 var $119=HEAP32[(($__dc)>>2)];
 var $120=(($113+4)|0);
 HEAP32[(($__g_end)>>2)]=$120;
 HEAP32[(($113)>>2)]=$119;
 label=34;break;
 case 34: 
 var $122=HEAP32[(($__a_end)>>2)];
 var $123=(($122+1)|0);
 HEAP32[(($__a_end)>>2)]=$123;
 HEAP8[($122)]=$72;
 var $124=($67|0)>84;
 if($124){var $_01=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $126=HEAP32[(($__dc)>>2)];
 var $127=((($126)+(1))|0);
 HEAP32[(($__dc)>>2)]=$127;
 var $_01=0;label=36;break;
 case 36: 
 var $_01;
 return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=29;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=HEAP32[((16952)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($__p_i_i_i)|0);
 HEAP32[(($23)>>2)]=16952;
 var $24=(($__p_i_i_i+4)|0);
 HEAP32[(($24)>>2)]=(28);
 var $25=(($__p_i_i_i+8)|0);
 HEAP32[(($25)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$19,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; }
 case 5: 
 var $26=HEAP32[((16956)>>2)];
 var $27=((($26)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $28=(($18+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($18+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=9;break;}
 case 7: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=26;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $42=$38;
 var $43=HEAP32[(($17)>>2)];
 var $44=(($43)|0);
 var $45=__ZNSt3__114__shared_count16__release_sharedEv($44);
 var $46=$38;
 var $47=HEAP32[(($46)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=(($47+24)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($__nm,$42);
 label=12;break;
 case 11: 
 var $52=(($47+28)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($__nm,$42);
 label=12;break;
 case 12: 
 var $55=$__nm;
 var $56=$__nm;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=14;break;}else{label=13;break;}
 case 13: 
 var $61=(($__nm+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $_pre4=(($55+1)|0);
 var $__i_sroa_0_0_ph=$62;var $_pre_phi=$_pre4;var $_pre_phi6=$61;label=15;break;
 case 14: 
 var $64=(($55+1)|0);
 var $_pre5=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$64;var $_pre_phi=$64;var $_pre_phi6=$_pre5;label=15;break;
 case 15: 
 var $_pre_phi6;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $65=(($__s)|0);
 var $66=(($__nm+4)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $67=$57;label=16;break;
 case 16: 
 var $67;
 var $__i_sroa_0_0;
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){var $72=$_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($_pre_phi6)>>2)];
 var $72=$71;label=18;break;
 case 18: 
 var $72;
 var $73=($67&255);
 var $74=$73&1;
 var $75=($74|0)==0;
 var $76=HEAP32[(($66)>>2)];
 var $77=$73>>>1;
 var $78=($75?$77:$76);
 var $79=(($72+$78)|0);
 var $80=($__i_sroa_0_0|0)==($79|0);
 if($80){label=28;break;}else{label=19;break;}
 case 19: 
 var $82=HEAP8[($__i_sroa_0_0)];
 var $83=HEAP32[(($65)>>2)];
 var $84=($83|0)==0;
 if($84){label=25;break;}else{label=20;break;}
 case 20: 
 var $86=(($83+24)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($83+28)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($87|0)==($89|0);
 if($90){label=21;break;}else{label=22;break;}
 case 21: 
 var $92=$83;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+52)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($82&255);
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($83,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=27;break; }
 case 22: 
 var $98=(($87+1)|0);
 HEAP32[(($86)>>2)]=$98;
 HEAP8[($87)]=$82;
 label=25;break;
 case 23: 
 var $99=($97|0)==-1;
 if($99){label=24;break;}else{label=25;break;}
 case 24: 
 HEAP32[(($65)>>2)]=0;
 label=25;break;
 case 25: 
 var $101=(($__i_sroa_0_0+1)|0);
 var $_pre=HEAP8[($56)];
 var $__i_sroa_0_0=$101;var $67=$_pre;label=16;break;
 case 26: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 var $104=$103$0;
 var $105=$103$1;
 var $106=HEAP32[(($17)>>2)];
 var $107=(($106)|0);
 var $108=__ZNSt3__114__shared_count16__release_sharedEv($107);
 var $_01=$105;var $_02=$104;label=30;break;
 case 27: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1); var $110$1 = tempRet0;
 var $111=$110$0;
 var $112=$110$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 var $_01=$112;var $_02=$111;label=30;break;
 case 28: 
 var $114=HEAP32[(($65)>>2)];
 var $115=(($agg_result)|0);
 HEAP32[(($115)>>2)]=$114;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 label=29;break;
 case 29: 
 STACKTOP=sp;return;
 case 30: 
 var $_02;
 var $_01;
 var $118$0=$_02;
 var $118$1=0;
 var $119$0=$118$0;
 var $119$1=$_01;
 ___resumeException($119$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4488)];HEAP8[((($3)+(1))|0)]=HEAP8[(4489)];HEAP8[((($3)+(2))|0)]=HEAP8[(4490)];HEAP8[((($3)+(3))|0)]=HEAP8[(4491)];HEAP8[((($3)+(4))|0)]=HEAP8[(4492)];HEAP8[((($3)+(5))|0)]=HEAP8[(4493)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18072)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18072);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15792)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i7=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17336)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17336;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$3,304);
 label=3;break;
 case 3: 
 var $10=HEAP32[((17340)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,11336,(432));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i7;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((16952)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i7)|0);
 HEAP32[(($32)>>2)]=16952;
 var $33=(($__p_i_i_i7+4)|0);
 HEAP32[(($33)>>2)]=(28);
 var $34=(($__p_i_i_i7+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$28,304);
 label=8;break;
 case 8: 
 var $35=HEAP32[((16956)>>2)];
 var $36=((($35)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,11336,(432));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=$__grouping;
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=13;break;}else{label=12;break;}
 case 12: 
 var $63=(($__grouping+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=14;break;
 case 13: 
 var $66=$59>>>1;
 var $67=$66;label=14;break;
 case 14: 
 var $67;
 var $68=($67|0)==0;
 if($68){label=15;break;}else{label=20;break;}
 case 15: 
 var $70=$22;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+32)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $75=$__ne;
 var $76=$__nb;
 var $77=((($75)-($76))|0);
 var $78=(($__ob+$77)|0);
 HEAP32[(($__oe)>>2)]=$78;
 label=43;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $81=HEAP8[($__nb)];
 if((($81<<24)>>24)==45|(($81<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $83=$22;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+28)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]($26,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $88=(($__nb+1)|0);
 var $89=HEAP32[(($__oe)>>2)];
 var $90=(($89+1)|0);
 HEAP32[(($__oe)>>2)]=$90;
 HEAP8[($89)]=$87;
 var $__nf_0=$88;label=23;break;
 case 23: 
 var $__nf_0;
 var $92=$__ne;
 var $93=$__nf_0;
 var $94=((($92)-($93))|0);
 var $95=($94|0)>1;
 if($95){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $97=HEAP8[($__nf_0)];
 var $98=(($97<<24)>>24)==48;
 if($98){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $100=(($__nf_0+1)|0);
 var $101=HEAP8[($100)];
 if((($101<<24)>>24)==120|(($101<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $103=$22;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+28)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $108=HEAP32[(($__oe)>>2)];
 var $109=(($108+1)|0);
 HEAP32[(($__oe)>>2)]=$109;
 HEAP8[($108)]=$107;
 var $110=HEAP8[($100)];
 var $111=HEAP32[(($103)>>2)];
 var $112=(($111+28)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($26,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $115=(($__nf_0+2)|0);
 var $116=HEAP32[(($__oe)>>2)];
 var $117=(($116+1)|0);
 HEAP32[(($__oe)>>2)]=$117;
 HEAP8[($116)]=$114;
 var $__nf_1=$115;label=29;break;
 case 29: 
 var $__nf_1;
 var $119=($__nf_1|0)==($__ne|0);
 if($119){label=32;break;}else{label=30;break;}
 case 30: 
 var $120=((($__ne)-(1))|0);
 var $121=($__nf_1>>>0)<($120>>>0);
 if($121){var $_018=$__nf_1;var $122=$120;label=31;break;}else{label=32;break;}
 case 31: 
 var $122;
 var $_018;
 var $123=HEAP8[($_018)];
 var $124=HEAP8[($122)];
 HEAP8[($_018)]=$124;
 HEAP8[($122)]=$123;
 var $125=(($_018+1)|0);
 var $126=((($122)-(1))|0);
 var $127=($125>>>0)<($126>>>0);
 if($127){var $_018=$125;var $122=$126;label=31;break;}else{label=32;break;}
 case 32: 
 var $128=$47;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+16)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $133=($__nf_1>>>0)<($__ne>>>0);
 if($133){label=34;break;}else{label=40;break;}
 case 34: 
 var $134=(($56+1)|0);
 var $135=$22;
 var $136=(($__grouping+4)|0);
 var $137=(($__grouping+8)|0);
 var $__dc_013=0;var $__dg_014=0;var $__p_015=$__nf_1;label=35;break;
 case 35: 
 var $__p_015;
 var $__dg_014;
 var $__dc_013;
 var $138=HEAP8[($57)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 var $141=HEAP32[(($137)>>2)];
 var $_=($140?$134:$141);
 var $142=(($_+$__dg_014)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24)==0;
 if($144){var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=38;break;}else{label=36;break;}
 case 36: 
 var $145=HEAP32[(($137)>>2)];
 var $_20=($140?$134:$145);
 var $146=(($_20+$__dg_014)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $149=($__dc_013|0)==($148|0);
 if($149){label=37;break;}else{var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=38;break;}
 case 37: 
 var $150=HEAP32[(($__oe)>>2)];
 var $151=(($150+1)|0);
 HEAP32[(($__oe)>>2)]=$151;
 HEAP8[($150)]=$132;
 var $152=HEAP8[($57)];
 var $153=($152&255);
 var $154=$153&1;
 var $155=($154|0)==0;
 var $156=HEAP32[(($136)>>2)];
 var $157=$153>>>1;
 var $158=($155?$157:$156);
 var $159=((($158)-(1))|0);
 var $160=($__dg_014>>>0)<($159>>>0);
 var $161=($160&1);
 var $___dg_0=((($161)+($__dg_014))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $163=HEAP8[($__p_015)];
 var $164=HEAP32[(($135)>>2)];
 var $165=(($164+28)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($26,$163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $168=HEAP32[(($__oe)>>2)];
 var $169=(($168+1)|0);
 HEAP32[(($__oe)>>2)]=$169;
 HEAP8[($168)]=$167;
 var $170=((($__dc_1)+(1))|0);
 var $171=(($__p_015+1)|0);
 var $172=($171>>>0)<($__ne>>>0);
 if($172){var $__dc_013=$170;var $__dg_014=$__dg_1;var $__p_015=$171;label=35;break;}else{label=40;break;}
 case 40: 
 var $173=$__nf_1;
 var $174=$__nb;
 var $175=((($173)-($174))|0);
 var $176=(($__ob+$175)|0);
 var $177=HEAP32[(($__oe)>>2)];
 var $178=($176|0)==($177|0);
 if($178){label=43;break;}else{label=41;break;}
 case 41: 
 var $179=((($177)-(1))|0);
 var $180=($176>>>0)<($179>>>0);
 if($180){var $_0512=$176;var $181=$179;label=42;break;}else{label=43;break;}
 case 42: 
 var $181;
 var $_0512;
 var $182=HEAP8[($_0512)];
 var $183=HEAP8[($181)];
 HEAP8[($_0512)]=$183;
 HEAP8[($181)]=$182;
 var $184=(($_0512+1)|0);
 var $185=((($181)-(1))|0);
 var $186=($184>>>0)<($185>>>0);
 if($186){var $_0512=$184;var $181=$185;label=42;break;}else{label=43;break;}
 case 43: 
 var $187=($__np|0)==($__ne|0);
 if($187){label=44;break;}else{label=45;break;}
 case 44: 
 var $189=HEAP32[(($__oe)>>2)];
 var $storemerge=$189;label=46;break;
 case 45: 
 var $191=$__np;
 var $192=$__nb;
 var $193=((($191)-($192))|0);
 var $194=(($__ob+$193)|0);
 var $storemerge=$194;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18072)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18072);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15792)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4488)];HEAP8[((($3)+(1))|0)]=HEAP8[(4489)];HEAP8[((($3)+(2))|0)]=HEAP8[(4490)];HEAP8[((($3)+(3))|0)]=HEAP8[(4491)];HEAP8[((($3)+(4))|0)]=HEAP8[(4492)];HEAP8[((($3)+(5))|0)]=HEAP8[(4493)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18072)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18072);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15792)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18072)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18072);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15792)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i8=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i8=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i8;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18072)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18072);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15792)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15792)>>2)];
 if($specify_precision_0_off0_ph_i8){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre15=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $102=$_pre15;label=47;break;
 case 29: 
 var $64=HEAP8[(18072)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i8){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18072);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15792)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15792)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1213=$83;var $_114=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18072);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15792)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15792)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $103=(($102+$__nc_2)|0);
 var $104=HEAP32[(($6)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i7=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($102)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($102+1)|0);
 var $_0_i7=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($102+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($102+2)|0);
 var $_0_i7=$117;label=54;break;
 case 53: 
 var $_0_i7=$102;label=54;break;
 case 54: 
 var $_0_i7;
 var $119=(($__o)|0);
 var $120=($102|0)==($43|0);
 if($120){var $__ob_0=$119;var $__obh_sroa_0_1=0;var $130=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<1;
 var $123=_malloc($122);
 var $124=($123|0)==0;
 if($124){label=56;break;}else{var $__ob_0=$123;var $__obh_sroa_0_1=$123;var $130=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre16=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $130=$_pre16;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_01=$129;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $130;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($130,$_0_i7,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $133=(($1)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134)|0);
 var $136=__ZNSt3__114__shared_count16__release_sharedEv($135);
 var $137=(($__s)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($3)|0);
 HEAP32[(($139)>>2)]=$138;
 var $140=HEAP32[(($__op)>>2)];
 var $141=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$140,$141,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $143=(($2)|0);
 var $144=HEAP32[(($143)>>2)];
 HEAP32[(($137)>>2)]=$144;
 var $145=(($agg_result)|0);
 HEAP32[(($145)>>2)]=$144;
 var $146=($__obh_sroa_0_1|0)==0;
 if($146){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $148=($__nbh_sroa_0_1|0)==0;
 if($148){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=(($1)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $_0=$152;var $_01=$153;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_01;
 var $_0;
 var $159=($__obh_sroa_0_2|0)==0;
 if($159){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $161=($__nbh_sroa_0_1|0)==0;
 if($161){var $_1213=$_01;var $_114=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1213=$_01;var $_114=$_0;label=72;break;
 case 72: 
 var $_114;
 var $_1213;
 var $163$0=$_114;
 var $163$1=0;
 var $164$0=$163$0;
 var $164$1=$_1213;
 ___resumeException($164$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 

 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){label=9;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($13$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i7=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17336)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17336;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$3,304);
 label=3;break;
 case 3: 
 var $10=HEAP32[((17340)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,11336,(432));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i7;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((16952)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i7)|0);
 HEAP32[(($32)>>2)]=16952;
 var $33=(($__p_i_i_i7+4)|0);
 HEAP32[(($33)>>2)]=(28);
 var $34=(($__p_i_i_i7+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$28,304);
 label=8;break;
 case 8: 
 var $35=HEAP32[((16956)>>2)];
 var $36=((($35)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,11336,(432));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+28)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+1)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP8[($64)]=$62;
 var $__nf_0=$63;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit21$1;var $eh_lpad_body$0=$lpad_loopexit21$0;label=19;break;
 case 16: 
 var $lpad_loopexit33$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit33$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit33$1;var $eh_lpad_body$0=$lpad_loopexit33$0;label=19;break;
 case 17: 
 var $lpad_loopexit41$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit41$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit41$1;var $eh_lpad_body$0=$lpad_loopexit41$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit42$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit42$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit42$1;var $eh_lpad_body$0=$lpad_nonloopexit42$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $67=$__ne;
 var $68=$__nf_0;
 var $69=((($67)-($68))|0);
 var $70=($69|0)>1;
 if($70){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=($__nf_0>>>0)<($__ne>>>0);
 if($71){var $__ns_137=$__nf_0;label=36;break;}else{var $__ns_2=$__nf_0;var $__nf_1=$__nf_0;label=43;break;}
 case 22: 
 var $73=HEAP8[($__nf_0)];
 var $74=(($73<<24)>>24)==48;
 if($74){label=23;break;}else{label=21;break;}
 case 23: 
 var $76=(($__nf_0+1)|0);
 var $77=HEAP8[($76)];
 if((($77<<24)>>24)==120|(($77<<24)>>24)==88){ label=24;break;}else{label=21;break;}
 case 24: 
 var $79=$22;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+28)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $84=HEAP32[(($__oe)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($__oe)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=(($__nf_0+2)|0);
 var $87=HEAP8[($76)];
 var $88=HEAP32[(($79)>>2)];
 var $89=(($88+28)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=18;break; }
 case 26: 
 var $92=HEAP32[(($__oe)>>2)];
 var $93=(($92+1)|0);
 HEAP32[(($__oe)>>2)]=$93;
 HEAP8[($92)]=$91;
 var $94=($86>>>0)<($__ne>>>0);
 if($94){var $__ns_046=$86;label=28;break;}else{var $__ns_2=$86;var $__nf_1=$86;label=43;break;}
 case 27: 
 var $96=($114>>>0)<($__ne>>>0);
 if($96){var $__ns_046=$114;label=28;break;}else{var $__ns_2=$114;var $__nf_1=$86;label=43;break;}
 case 28: 
 var $__ns_046;
 var $97=HEAP8[($__ns_046)];
 var $98=HEAP8[(18072)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=33;break;}
 case 29: 
 var $101=___cxa_guard_acquire(18072);
 var $102=($101|0)==0;
 if($102){label=33;break;}else{label=30;break;}
 case 30: 
 var $104=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 HEAP32[((15792)>>2)]=$104;

 label=33;break;
 case 32: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;

 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;label=19;break;
 case 33: 
 var $109=HEAP32[((15792)>>2)];
 var $110=(($97<<24)>>24);
 var $111=(function() { try { __THREW__ = 0; return _isxdigit($110,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=17;break; }
 case 34: 
 var $113=($111|0)==0;
 var $114=(($__ns_046+1)|0);
 if($113){var $__ns_2=$__ns_046;var $__nf_1=$86;label=43;break;}else{label=27;break;}
 case 35: 
 var $116=($134>>>0)<($__ne>>>0);
 if($116){var $__ns_137=$134;label=36;break;}else{var $__ns_2=$134;var $__nf_1=$__nf_0;label=43;break;}
 case 36: 
 var $__ns_137;
 var $117=HEAP8[($__ns_137)];
 var $118=HEAP8[(18072)];
 var $119=(($118<<24)>>24)==0;
 if($119){label=37;break;}else{label=41;break;}
 case 37: 
 var $121=___cxa_guard_acquire(18072);
 var $122=($121|0)==0;
 if($122){label=41;break;}else{label=38;break;}
 case 38: 
 var $124=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=40;break; }
 case 39: 
 HEAP32[((15792)>>2)]=$124;

 label=41;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;

 var $eh_lpad_body$1=$127$1;var $eh_lpad_body$0=$127$0;label=19;break;
 case 41: 
 var $129=HEAP32[((15792)>>2)];
 var $130=(($117<<24)>>24);
 var $131=(function() { try { __THREW__ = 0; return _isdigit($130,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=16;break; }
 case 42: 
 var $133=($131|0)==0;
 var $134=(($__ns_137+1)|0);
 if($133){var $__ns_2=$__ns_137;var $__nf_1=$__nf_0;label=43;break;}else{label=35;break;}
 case 43: 
 var $__nf_1;
 var $__ns_2;
 var $135=$__grouping;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=($137&255);
 var $139=$138&1;
 var $140=($139|0)==0;
 if($140){label=45;break;}else{label=44;break;}
 case 44: 
 var $142=(($__grouping+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $146=$143;label=46;break;
 case 45: 
 var $145=$138>>>1;
 var $146=$145;label=46;break;
 case 46: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=47;break;}else{label=51;break;}
 case 47: 
 var $149=HEAP32[(($__oe)>>2)];
 var $150=$22;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+32)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($26,$__nf_1,$__ns_2,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=18;break; }
 case 48: 
 var $155=$__ns_2;
 var $156=$__nf_1;
 var $157=((($155)-($156))|0);
 var $158=HEAP32[(($__oe)>>2)];
 var $159=(($158+$157)|0);
 HEAP32[(($__oe)>>2)]=$159;
 label=49;break;
 case 49: 
 var $160=($__ns_2>>>0)<($__ne>>>0);
 if($160){label=50;break;}else{var $__nf_3=$__ns_2;label=70;break;}
 case 50: 
 var $161=$22;
 var $__nf_218=$__ns_2;label=65;break;
 case 51: 
 var $163=($__nf_1|0)==($__ns_2|0);
 if($163){label=54;break;}else{label=52;break;}
 case 52: 
 var $164=((($__ns_2)-(1))|0);
 var $165=($__nf_1>>>0)<($164>>>0);
 if($165){var $_0529=$__nf_1;var $166=$164;label=53;break;}else{label=54;break;}
 case 53: 
 var $166;
 var $_0529;
 var $167=HEAP8[($_0529)];
 var $168=HEAP8[($166)];
 HEAP8[($_0529)]=$168;
 HEAP8[($166)]=$167;
 var $169=(($_0529+1)|0);
 var $170=((($166)-(1))|0);
 var $171=($169>>>0)<($170>>>0);
 if($171){var $_0529=$169;var $166=$170;label=53;break;}else{label=54;break;}
 case 54: 
 var $172=$47;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=18;break; }
 case 55: 
 var $177=($__nf_1>>>0)<($__ns_2>>>0);
 if($177){label=56;break;}else{label=62;break;}
 case 56: 
 var $178=(($135+1)|0);
 var $179=(($__grouping+4)|0);
 var $180=(($__grouping+8)|0);
 var $181=$22;
 var $__dc_024=0;var $__dg_025=0;var $__p_026=$__nf_1;label=57;break;
 case 57: 
 var $__p_026;
 var $__dg_025;
 var $__dc_024;
 var $182=HEAP8[($136)];
 var $183=$182&1;
 var $184=(($183<<24)>>24)==0;
 var $185=HEAP32[(($180)>>2)];
 var $_=($184?$178:$185);
 var $186=(($_+$__dg_025)|0);
 var $187=HEAP8[($186)];
 var $188=(($187<<24)>>24)>0;
 if($188){label=58;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=60;break;}
 case 58: 
 var $189=HEAP32[(($180)>>2)];
 var $_62=($184?$178:$189);
 var $190=(($_62+$__dg_025)|0);
 var $191=HEAP8[($190)];
 var $192=(($191<<24)>>24);
 var $193=($__dc_024|0)==($192|0);
 if($193){label=59;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=60;break;}
 case 59: 
 var $194=HEAP32[(($__oe)>>2)];
 var $195=(($194+1)|0);
 HEAP32[(($__oe)>>2)]=$195;
 HEAP8[($194)]=$176;
 var $196=HEAP8[($136)];
 var $197=($196&255);
 var $198=$197&1;
 var $199=($198|0)==0;
 var $200=HEAP32[(($179)>>2)];
 var $201=$197>>>1;
 var $202=($199?$201:$200);
 var $203=((($202)-(1))|0);
 var $204=($__dg_025>>>0)<($203>>>0);
 var $205=($204&1);
 var $___dg_0=((($205)+($__dg_025))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=60;break;
 case 60: 
 var $__dc_1;
 var $__dg_1;
 var $207=HEAP8[($__p_026)];
 var $208=HEAP32[(($181)>>2)];
 var $209=(($208+28)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$210]($26,$207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=15;break; }
 case 61: 
 var $212=HEAP32[(($__oe)>>2)];
 var $213=(($212+1)|0);
 HEAP32[(($__oe)>>2)]=$213;
 HEAP8[($212)]=$211;
 var $214=((($__dc_1)+(1))|0);
 var $215=(($__p_026+1)|0);
 var $216=($215>>>0)<($__ns_2>>>0);
 if($216){var $__dc_024=$214;var $__dg_025=$__dg_1;var $__p_026=$215;label=57;break;}else{label=62;break;}
 case 62: 
 var $217=$__nf_1;
 var $218=$__nb;
 var $219=((($217)-($218))|0);
 var $220=(($__ob+$219)|0);
 var $221=HEAP32[(($__oe)>>2)];
 var $222=($220|0)==($221|0);
 if($222){label=49;break;}else{label=63;break;}
 case 63: 
 var $223=((($221)-(1))|0);
 var $224=($220>>>0)<($223>>>0);
 if($224){var $_019=$220;var $225=$223;label=64;break;}else{label=49;break;}
 case 64: 
 var $225;
 var $_019;
 var $226=HEAP8[($_019)];
 var $227=HEAP8[($225)];
 HEAP8[($_019)]=$227;
 HEAP8[($225)]=$226;
 var $228=(($_019+1)|0);
 var $229=((($225)-(1))|0);
 var $230=($228>>>0)<($229>>>0);
 if($230){var $_019=$228;var $225=$229;label=64;break;}else{label=49;break;}
 case 65: 
 var $__nf_218;
 var $232=HEAP8[($__nf_218)];
 var $233=(($232<<24)>>24)==46;
 if($233){label=66;break;}else{label=68;break;}
 case 66: 
 var $235=$47;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+12)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$238]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=18;break; }
 case 67: 
 var $240=HEAP32[(($__oe)>>2)];
 var $241=(($240+1)|0);
 HEAP32[(($__oe)>>2)]=$241;
 HEAP8[($240)]=$239;
 var $242=(($__nf_218+1)|0);
 var $__nf_3=$242;label=70;break;
 case 68: 
 var $244=HEAP32[(($161)>>2)];
 var $245=(($244+28)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$246]($26,$232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=14;break; }
 case 69: 
 var $248=HEAP32[(($__oe)>>2)];
 var $249=(($248+1)|0);
 HEAP32[(($__oe)>>2)]=$249;
 HEAP8[($248)]=$247;
 var $250=(($__nf_218+1)|0);
 var $251=($250>>>0)<($__ne>>>0);
 if($251){var $__nf_218=$250;label=65;break;}else{var $__nf_3=$250;label=70;break;}
 case 70: 
 var $__nf_3;
 var $252=HEAP32[(($__oe)>>2)];
 var $253=$22;
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+32)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$256]($26,$__nf_3,$__ne,$252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=18;break; }
 case 71: 
 var $258=$__nf_3;
 var $259=((($67)-($258))|0);
 var $260=HEAP32[(($__oe)>>2)];
 var $261=(($260+$259)|0);
 HEAP32[(($__oe)>>2)]=$261;
 var $262=($__np|0)==($__ne|0);
 if($262){var $storemerge=$261;label=73;break;}else{label=72;break;}
 case 72: 
 var $264=$__np;
 var $265=$__nb;
 var $266=((($264)-($265))|0);
 var $267=(($__ob+$266)|0);
 var $storemerge=$267;label=73;break;
 case 73: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep12=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep12)]=65;
 var $specify_precision_0_off0_ph_i13=0;label=19;break;
 case 15: 
 HEAP8[($scevgep12)]=97;
 var $specify_precision_0_off0_ph_i13=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i13;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18072)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18072);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15792)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15792)>>2)];
 if($specify_precision_0_off0_ph_i13){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre10=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $100=$_pre10;label=47;break;
 case 29: 
 var $64=HEAP8[(18072)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i13){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18072);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15792)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15792)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_128=$83;var $_19=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18072);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15792)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15792)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $101=(($100+$__nc_2)|0);
 var $102=HEAP32[(($6)>>2)];
 var $103=$102&176;
 if(($103|0)==16){ label=48;break;}else if(($103|0)==32){ var $_0_i7=$101;label=54;break;}else{label=53;break;}
 case 48: 
 var $105=HEAP8[($100)];
 if((($105<<24)>>24)==45|(($105<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $107=(($100+1)|0);
 var $_0_i7=$107;label=54;break;
 case 50: 
 var $109=($__nc_2|0)>1;
 var $110=(($105<<24)>>24)==48;
 var $or_cond_i=$109&$110;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $112=(($100+1)|0);
 var $113=HEAP8[($112)];
 if((($113<<24)>>24)==120|(($113<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $115=(($100+2)|0);
 var $_0_i7=$115;label=54;break;
 case 53: 
 var $_0_i7=$100;label=54;break;
 case 54: 
 var $_0_i7;
 var $117=(($__o)|0);
 var $118=($100|0)==($43|0);
 if($118){var $__ob_0=$117;var $__obh_sroa_0_1=0;var $128=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $120=$__nc_2<<1;
 var $121=_malloc($120);
 var $122=($121|0)==0;
 if($122){label=56;break;}else{var $__ob_0=$121;var $__obh_sroa_0_1=$121;var $128=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre11=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $128=$_pre11;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $_0=$126;var $_01=$127;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $128;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($128,$_0_i7,$101,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $131=(($1)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132)|0);
 var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
 var $135=(($__s)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($3)|0);
 HEAP32[(($137)>>2)]=$136;
 var $138=HEAP32[(($__op)>>2)];
 var $139=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$138,$139,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $141=(($2)|0);
 var $142=HEAP32[(($141)>>2)];
 HEAP32[(($135)>>2)]=$142;
 var $143=(($agg_result)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=($__obh_sroa_0_1|0)==0;
 if($144){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $146=($__nbh_sroa_0_1|0)==0;
 if($146){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 var $151=$149$1;
 var $152=(($1)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153)|0);
 var $155=__ZNSt3__114__shared_count16__release_sharedEv($154);
 var $_0=$150;var $_01=$151;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_01;
 var $_0;
 var $157=($__obh_sroa_0_2|0)==0;
 if($157){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $159=($__nbh_sroa_0_1|0)==0;
 if($159){var $_128=$_01;var $_19=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_128=$_01;var $_19=$_0;label=72;break;
 case 72: 
 var $_19;
 var $_128;
 var $161$0=$_19;
 var $161$1=0;
 var $162$0=$161$0;
 var $162$1=$_128;
 ___resumeException($162$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(88);
 var $2=(sp)+(96);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4496)];HEAP8[((($3)+(1))|0)]=HEAP8[(4497)];HEAP8[((($3)+(2))|0)]=HEAP8[(4498)];HEAP8[((($3)+(3))|0)]=HEAP8[(4499)];HEAP8[((($3)+(4))|0)]=HEAP8[(4500)];HEAP8[((($3)+(5))|0)]=HEAP8[(4501)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$11;

 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((15792)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $34=(($1)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $37=HEAP32[((17336)>>2)];
 var $38=($37|0)==-1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $40=(($__p_i_i_i)|0);
 HEAP32[(($40)>>2)]=17336;
 var $41=(($__p_i_i_i+4)|0);
 HEAP32[(($41)>>2)]=(28);
 var $42=(($__p_i_i_i+8)|0);
 HEAP32[(($42)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$36,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $43=HEAP32[((17340)>>2)];
 var $44=((($43)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $45=(($35+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($35+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$46;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($44>>>0);
 if($53){label=16;break;}else{label=17;break;}
 case 16: 
 var $54=(($48+($44<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=17;break;}else{label=19;break;}
 case 17: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 __ZNSt8bad_castC2Ev($58);
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $59=$55;
 var $60=HEAP32[(($34)>>2)];
 var $61=(($60)|0);
 var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
 var $63=(($__o)|0);
 var $64=$55;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+32)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($59,$4,$17,$63);
 var $69=(($__o+$16)|0);
 var $70=($_0_i|0)==($17|0);
 if($70){var $__op_0=$69;label=22;break;}else{label=21;break;}
 case 20: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($34)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
 case 21: 
 var $77=$__nar;
 var $78=$_0_i;
 var $79=((($78)-($77))|0);
 var $80=(($__o+$79)|0);
 var $__op_0=$80;label=22;break;
 case 22: 
 var $__op_0;
 var $82=(($__s)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($2)|0);
 HEAP32[(($84)>>2)]=$83;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$63,$__op_0,$69,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=32;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=HEAP32[((16944)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($__p_i_i_i)|0);
 HEAP32[(($23)>>2)]=16944;
 var $24=(($__p_i_i_i+4)|0);
 HEAP32[(($24)>>2)]=(28);
 var $25=(($__p_i_i_i+8)|0);
 HEAP32[(($25)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$19,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=29;break; }
 case 5: 
 var $26=HEAP32[((16948)>>2)];
 var $27=((($26)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $28=(($18+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($18+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=9;break;}
 case 7: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=29;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $42=$38;
 var $43=HEAP32[(($17)>>2)];
 var $44=(($43)|0);
 var $45=__ZNSt3__114__shared_count16__release_sharedEv($44);
 var $46=$38;
 var $47=HEAP32[(($46)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=(($47+24)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($__nm,$42);
 label=12;break;
 case 11: 
 var $52=(($47+28)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($__nm,$42);
 label=12;break;
 case 12: 
 var $55=$__nm;
 var $56=HEAP8[($55)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=14;break;}else{label=13;break;}
 case 13: 
 var $60=(($__nm+8)|0);
 var $61=HEAP32[(($60)>>2)];
 var $_pre4=(($__nm+4)|0);
 var $__i_sroa_0_0_ph=$61;var $_pre_phi=$_pre4;var $_pre_phi6=$60;label=15;break;
 case 14: 
 var $63=(($__nm+4)|0);
 var $_pre5=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$63;var $_pre_phi=$63;var $_pre_phi6=$_pre5;label=15;break;
 case 15: 
 var $_pre_phi6;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $64=(($__s)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $65=$56;label=16;break;
 case 16: 
 var $65;
 var $__i_sroa_0_0;
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){var $70=$_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $69=HEAP32[(($_pre_phi6)>>2)];
 var $70=$69;label=18;break;
 case 18: 
 var $70;
 var $71=($65&255);
 var $72=$71&1;
 var $73=($72|0)==0;
 if($73){label=20;break;}else{label=19;break;}
 case 19: 
 var $75=HEAP32[(($_pre_phi)>>2)];
 var $78=$75;label=21;break;
 case 20: 
 var $77=$71>>>1;
 var $78=$77;label=21;break;
 case 21: 
 var $78;
 var $79=(($70+($78<<2))|0);
 var $80=($__i_sroa_0_0|0)==($79|0);
 if($80){label=31;break;}else{label=22;break;}
 case 22: 
 var $82=HEAP32[(($__i_sroa_0_0)>>2)];
 var $83=HEAP32[(($64)>>2)];
 var $84=($83|0)==0;
 if($84){label=28;break;}else{label=23;break;}
 case 23: 
 var $86=(($83+24)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($83+28)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($87|0)==($89|0);
 if($90){label=24;break;}else{label=25;break;}
 case 24: 
 var $92=$83;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+52)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($83,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$96;label=26;break; } else { label=30;break; }
 case 25: 
 var $98=(($87+4)|0);
 HEAP32[(($86)>>2)]=$98;
 HEAP32[(($87)>>2)]=$82;
 var $_0=$82;label=26;break;
 case 26: 
 var $_0;
 var $99=($_0|0)==-1;
 if($99){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($64)>>2)]=0;
 label=28;break;
 case 28: 
 var $101=(($__i_sroa_0_0+4)|0);
 var $_pre=HEAP8[($55)];
 var $__i_sroa_0_0=$101;var $65=$_pre;label=16;break;
 case 29: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 var $104=$103$0;
 var $105=$103$1;
 var $106=HEAP32[(($17)>>2)];
 var $107=(($106)|0);
 var $108=__ZNSt3__114__shared_count16__release_sharedEv($107);
 var $_01=$105;var $_02=$104;label=33;break;
 case 30: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1); var $110$1 = tempRet0;
 var $111=$110$0;
 var $112=$110$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 var $_01=$112;var $_02=$111;label=33;break;
 case 31: 
 var $114=HEAP32[(($64)>>2)];
 var $115=(($agg_result)|0);
 HEAP32[(($115)>>2)]=$114;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 label=32;break;
 case 32: 
 STACKTOP=sp;return;
 case 33: 
 var $_02;
 var $_01;
 var $118$0=$_02;
 var $118$1=0;
 var $119$0=$118$0;
 var $119$1=$_01;
 ___resumeException($119$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4488)];HEAP8[((($3)+(1))|0)]=HEAP8[(4489)];HEAP8[((($3)+(2))|0)]=HEAP8[(4490)];HEAP8[((($3)+(3))|0)]=HEAP8[(4491)];HEAP8[((($3)+(4))|0)]=HEAP8[(4492)];HEAP8[((($3)+(5))|0)]=HEAP8[(4493)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18072)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18072);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15792)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i7=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17328)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17328;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$3,304);
 label=3;break;
 case 3: 
 var $10=HEAP32[((17332)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,11336,(432));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i7;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((16944)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i7)|0);
 HEAP32[(($32)>>2)]=16944;
 var $33=(($__p_i_i_i7+4)|0);
 HEAP32[(($33)>>2)]=(28);
 var $34=(($__p_i_i_i7+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$28,304);
 label=8;break;
 case 8: 
 var $35=HEAP32[((16948)>>2)];
 var $36=((($35)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,11336,(432));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=$__grouping;
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=13;break;}else{label=12;break;}
 case 12: 
 var $63=(($__grouping+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=14;break;
 case 13: 
 var $66=$59>>>1;
 var $67=$66;label=14;break;
 case 14: 
 var $67;
 var $68=($67|0)==0;
 if($68){label=15;break;}else{label=20;break;}
 case 15: 
 var $70=$22;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+48)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $75=$__ne;
 var $76=$__nb;
 var $77=((($75)-($76))|0);
 var $78=(($__ob+($77<<2))|0);
 HEAP32[(($__oe)>>2)]=$78;
 label=43;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $81=HEAP8[($__nb)];
 if((($81<<24)>>24)==45|(($81<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $83=$22;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+44)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]($26,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $88=(($__nb+1)|0);
 var $89=HEAP32[(($__oe)>>2)];
 var $90=(($89+4)|0);
 HEAP32[(($__oe)>>2)]=$90;
 HEAP32[(($89)>>2)]=$87;
 var $__nf_0=$88;label=23;break;
 case 23: 
 var $__nf_0;
 var $92=$__ne;
 var $93=$__nf_0;
 var $94=((($92)-($93))|0);
 var $95=($94|0)>1;
 if($95){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $97=HEAP8[($__nf_0)];
 var $98=(($97<<24)>>24)==48;
 if($98){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $100=(($__nf_0+1)|0);
 var $101=HEAP8[($100)];
 if((($101<<24)>>24)==120|(($101<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $103=$22;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+44)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $108=HEAP32[(($__oe)>>2)];
 var $109=(($108+4)|0);
 HEAP32[(($__oe)>>2)]=$109;
 HEAP32[(($108)>>2)]=$107;
 var $110=HEAP8[($100)];
 var $111=HEAP32[(($103)>>2)];
 var $112=(($111+44)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($26,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $115=(($__nf_0+2)|0);
 var $116=HEAP32[(($__oe)>>2)];
 var $117=(($116+4)|0);
 HEAP32[(($__oe)>>2)]=$117;
 HEAP32[(($116)>>2)]=$114;
 var $__nf_1=$115;label=29;break;
 case 29: 
 var $__nf_1;
 var $119=($__nf_1|0)==($__ne|0);
 if($119){label=32;break;}else{label=30;break;}
 case 30: 
 var $120=((($__ne)-(1))|0);
 var $121=($__nf_1>>>0)<($120>>>0);
 if($121){var $_018=$__nf_1;var $122=$120;label=31;break;}else{label=32;break;}
 case 31: 
 var $122;
 var $_018;
 var $123=HEAP8[($_018)];
 var $124=HEAP8[($122)];
 HEAP8[($_018)]=$124;
 HEAP8[($122)]=$123;
 var $125=(($_018+1)|0);
 var $126=((($122)-(1))|0);
 var $127=($125>>>0)<($126>>>0);
 if($127){var $_018=$125;var $122=$126;label=31;break;}else{label=32;break;}
 case 32: 
 var $128=$47;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+16)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $133=($__nf_1>>>0)<($__ne>>>0);
 if($133){label=34;break;}else{label=40;break;}
 case 34: 
 var $134=(($56+1)|0);
 var $135=$22;
 var $136=(($__grouping+4)|0);
 var $137=(($__grouping+8)|0);
 var $__dc_013=0;var $__dg_014=0;var $__p_015=$__nf_1;label=35;break;
 case 35: 
 var $__p_015;
 var $__dg_014;
 var $__dc_013;
 var $138=HEAP8[($57)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 var $141=HEAP32[(($137)>>2)];
 var $_=($140?$134:$141);
 var $142=(($_+$__dg_014)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24)==0;
 if($144){var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=38;break;}else{label=36;break;}
 case 36: 
 var $145=HEAP32[(($137)>>2)];
 var $_20=($140?$134:$145);
 var $146=(($_20+$__dg_014)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $149=($__dc_013|0)==($148|0);
 if($149){label=37;break;}else{var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=38;break;}
 case 37: 
 var $150=HEAP32[(($__oe)>>2)];
 var $151=(($150+4)|0);
 HEAP32[(($__oe)>>2)]=$151;
 HEAP32[(($150)>>2)]=$132;
 var $152=HEAP8[($57)];
 var $153=($152&255);
 var $154=$153&1;
 var $155=($154|0)==0;
 var $156=HEAP32[(($136)>>2)];
 var $157=$153>>>1;
 var $158=($155?$157:$156);
 var $159=((($158)-(1))|0);
 var $160=($__dg_014>>>0)<($159>>>0);
 var $161=($160&1);
 var $___dg_0=((($161)+($__dg_014))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $163=HEAP8[($__p_015)];
 var $164=HEAP32[(($135)>>2)];
 var $165=(($164+44)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($26,$163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $168=HEAP32[(($__oe)>>2)];
 var $169=(($168+4)|0);
 HEAP32[(($__oe)>>2)]=$169;
 HEAP32[(($168)>>2)]=$167;
 var $170=((($__dc_1)+(1))|0);
 var $171=(($__p_015+1)|0);
 var $172=($171>>>0)<($__ne>>>0);
 if($172){var $__dc_013=$170;var $__dg_014=$__dg_1;var $__p_015=$171;label=35;break;}else{label=40;break;}
 case 40: 
 var $173=$__nf_1;
 var $174=$__nb;
 var $175=((($173)-($174))|0);
 var $176=(($__ob+($175<<2))|0);
 var $177=HEAP32[(($__oe)>>2)];
 var $178=($176|0)==($177|0);
 if($178){label=43;break;}else{label=41;break;}
 case 41: 
 var $179=((($177)-(4))|0);
 var $180=($176>>>0)<($179>>>0);
 if($180){var $_0512=$176;var $181=$179;label=42;break;}else{label=43;break;}
 case 42: 
 var $181;
 var $_0512;
 var $182=HEAP32[(($_0512)>>2)];
 var $183=HEAP32[(($181)>>2)];
 HEAP32[(($_0512)>>2)]=$183;
 HEAP32[(($181)>>2)]=$182;
 var $184=(($_0512+4)|0);
 var $185=((($181)-(4))|0);
 var $186=($184>>>0)<($185>>>0);
 if($186){var $_0512=$184;var $181=$185;label=42;break;}else{label=43;break;}
 case 43: 
 var $187=($__np|0)==($__ne|0);
 if($187){label=44;break;}else{label=45;break;}
 case 44: 
 var $189=HEAP32[(($__oe)>>2)];
 var $storemerge=$189;label=46;break;
 case 45: 
 var $191=$__np;
 var $192=$__nb;
 var $193=((($191)-($192))|0);
 var $194=(($__ob+($193<<2))|0);
 var $storemerge=$194;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=(($__iob+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)>($10|0);
 var $14=((($12)-($10))|0);
 var $__ns_0=($13?$14:0);
 var $15=$__op;
 var $16=((($15)-($8))|0);
 var $17=$16>>2;
 var $18=($16|0)>0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$2;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+48)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($2,$__ob,$17);
 var $25=($24|0)==($17|0);
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $27=(($agg_result)|0);
 HEAP32[(($27)>>2)]=0;
 label=19;break;
 case 6: 
 var $29=($__ns_0|0)>0;
 if($29){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $31=$__sp;
 var $32=HEAP8[($31)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=(($__sp+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $40=$37;label=10;break;
 case 9: 
 var $39=(($__sp+4)|0);
 var $40=$39;label=10;break;
 case 10: 
 var $40;
 var $41=$2;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+48)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($2,$40,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $46=($45|0)==($__ns_0|0);
 if($46){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $47=(($agg_result)|0);
 HEAP32[(($47)>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 ___resumeException($49$0)
 case 14: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $52=((($7)-($15))|0);
 var $53=$52>>2;
 var $54=($52|0)>0;
 if($54){label=16;break;}else{label=18;break;}
 case 16: 
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+48)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($2,$__op,$53);
 var $61=($60|0)==($53|0);
 if($61){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($11)>>2)]=0;
 var $65=(($agg_result)|0);
 HEAP32[(($65)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $2=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18072)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18072);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15792)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4488)];HEAP8[((($3)+(1))|0)]=HEAP8[(4489)];HEAP8[((($3)+(2))|0)]=HEAP8[(4490)];HEAP8[((($3)+(3))|0)]=HEAP8[(4491)];HEAP8[((($3)+(4))|0)]=HEAP8[(4492)];HEAP8[((($3)+(5))|0)]=HEAP8[(4493)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18072)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18072);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((15792)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18072)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18072);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((15792)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((15792)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i8=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i8=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i8=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i8;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18072)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18072);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15792)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15792)>>2)];
 if($specify_precision_0_off0_ph_i8){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre15=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $102=$_pre15;label=47;break;
 case 29: 
 var $64=HEAP8[(18072)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i8){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18072);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15792)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15792)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1213=$83;var $_114=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18072);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15792)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15792)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $103=(($102+$__nc_2)|0);
 var $104=HEAP32[(($6)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i7=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($102)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($102+1)|0);
 var $_0_i7=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($102+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($102+2)|0);
 var $_0_i7=$117;label=54;break;
 case 53: 
 var $_0_i7=$102;label=54;break;
 case 54: 
 var $_0_i7;
 var $119=(($__o)|0);
 var $120=($102|0)==($43|0);
 if($120){var $__ob_0=$119;var $__obh_sroa_0_1=0;var $131=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<3;
 var $123=_malloc($122);
 var $124=$123;
 var $125=($123|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $131=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre16=HEAP32[(($__nb)>>2)];
 var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $131=$_pre16;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $_0=$129;var $_01=$130;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $131;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($131,$_0_i7,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $134=(($1)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $138=(($__s)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($3)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=HEAP32[(($__op)>>2)];
 var $142=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$141,$142,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $144=(($2)|0);
 var $145=HEAP32[(($144)>>2)];
 HEAP32[(($138)>>2)]=$145;
 var $146=(($agg_result)|0);
 HEAP32[(($146)>>2)]=$145;
 var $147=($__obh_sroa_0_1|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 var $149=$__obh_sroa_0_1;
 _free($149);
 label=64;break;
 case 64: 
 var $150=($__nbh_sroa_0_1|0)==0;
 if($150){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $154=$153$0;
 var $155=$153$1;
 var $156=(($1)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157)|0);
 var $159=__ZNSt3__114__shared_count16__release_sharedEv($158);
 var $_0=$154;var $_01=$155;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_01;
 var $_0;
 var $161=($__obh_sroa_0_2|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 var $163=$__obh_sroa_0_2;
 _free($163);
 label=70;break;
 case 70: 
 var $164=($__nbh_sroa_0_1|0)==0;
 if($164){var $_1213=$_01;var $_114=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1213=$_01;var $_114=$_0;label=72;break;
 case 72: 
 var $_114;
 var $_1213;
 var $166$0=$_114;
 var $166$1=0;
 var $167$0=$166$0;
 var $167$1=$_1213;
 ___resumeException($167$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i7=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((17328)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i)|0);
 HEAP32[(($7)>>2)]=17328;
 var $8=(($__p_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(28);
 var $9=(($__p_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$3,304);
 label=3;break;
 case 3: 
 var $10=HEAP32[((17332)>>2)];
 var $11=((($10)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,11336,(432));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i7;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((16944)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i7)|0);
 HEAP32[(($32)>>2)]=16944;
 var $33=(($__p_i_i_i7+4)|0);
 HEAP32[(($33)>>2)]=(28);
 var $34=(($__p_i_i_i7+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$28,304);
 label=8;break;
 case 8: 
 var $35=HEAP32[((16948)>>2)];
 var $36=((($35)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,11336,(432));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+4)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP32[(($64)>>2)]=$62;
 var $__nf_0=$63;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit21$1;var $eh_lpad_body$0=$lpad_loopexit21$0;label=19;break;
 case 16: 
 var $lpad_loopexit33$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit33$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit33$1;var $eh_lpad_body$0=$lpad_loopexit33$0;label=19;break;
 case 17: 
 var $lpad_loopexit41$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit41$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit41$1;var $eh_lpad_body$0=$lpad_loopexit41$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit42$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit42$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit42$1;var $eh_lpad_body$0=$lpad_nonloopexit42$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $67=$__ne;
 var $68=$__nf_0;
 var $69=((($67)-($68))|0);
 var $70=($69|0)>1;
 if($70){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=($__nf_0>>>0)<($__ne>>>0);
 if($71){var $__ns_137=$__nf_0;label=36;break;}else{var $__ns_2=$__nf_0;var $__nf_1=$__nf_0;label=43;break;}
 case 22: 
 var $73=HEAP8[($__nf_0)];
 var $74=(($73<<24)>>24)==48;
 if($74){label=23;break;}else{label=21;break;}
 case 23: 
 var $76=(($__nf_0+1)|0);
 var $77=HEAP8[($76)];
 if((($77<<24)>>24)==120|(($77<<24)>>24)==88){ label=24;break;}else{label=21;break;}
 case 24: 
 var $79=$22;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+44)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $84=HEAP32[(($__oe)>>2)];
 var $85=(($84+4)|0);
 HEAP32[(($__oe)>>2)]=$85;
 HEAP32[(($84)>>2)]=$83;
 var $86=(($__nf_0+2)|0);
 var $87=HEAP8[($76)];
 var $88=HEAP32[(($79)>>2)];
 var $89=(($88+44)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=18;break; }
 case 26: 
 var $92=HEAP32[(($__oe)>>2)];
 var $93=(($92+4)|0);
 HEAP32[(($__oe)>>2)]=$93;
 HEAP32[(($92)>>2)]=$91;
 var $94=($86>>>0)<($__ne>>>0);
 if($94){var $__ns_046=$86;label=28;break;}else{var $__ns_2=$86;var $__nf_1=$86;label=43;break;}
 case 27: 
 var $96=($114>>>0)<($__ne>>>0);
 if($96){var $__ns_046=$114;label=28;break;}else{var $__ns_2=$114;var $__nf_1=$86;label=43;break;}
 case 28: 
 var $__ns_046;
 var $97=HEAP8[($__ns_046)];
 var $98=HEAP8[(18072)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=33;break;}
 case 29: 
 var $101=___cxa_guard_acquire(18072);
 var $102=($101|0)==0;
 if($102){label=33;break;}else{label=30;break;}
 case 30: 
 var $104=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 HEAP32[((15792)>>2)]=$104;

 label=33;break;
 case 32: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;

 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;label=19;break;
 case 33: 
 var $109=HEAP32[((15792)>>2)];
 var $110=(($97<<24)>>24);
 var $111=(function() { try { __THREW__ = 0; return _isxdigit($110,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=17;break; }
 case 34: 
 var $113=($111|0)==0;
 var $114=(($__ns_046+1)|0);
 if($113){var $__ns_2=$__ns_046;var $__nf_1=$86;label=43;break;}else{label=27;break;}
 case 35: 
 var $116=($134>>>0)<($__ne>>>0);
 if($116){var $__ns_137=$134;label=36;break;}else{var $__ns_2=$134;var $__nf_1=$__nf_0;label=43;break;}
 case 36: 
 var $__ns_137;
 var $117=HEAP8[($__ns_137)];
 var $118=HEAP8[(18072)];
 var $119=(($118<<24)>>24)==0;
 if($119){label=37;break;}else{label=41;break;}
 case 37: 
 var $121=___cxa_guard_acquire(18072);
 var $122=($121|0)==0;
 if($122){label=41;break;}else{label=38;break;}
 case 38: 
 var $124=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=40;break; }
 case 39: 
 HEAP32[((15792)>>2)]=$124;

 label=41;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;

 var $eh_lpad_body$1=$127$1;var $eh_lpad_body$0=$127$0;label=19;break;
 case 41: 
 var $129=HEAP32[((15792)>>2)];
 var $130=(($117<<24)>>24);
 var $131=(function() { try { __THREW__ = 0; return _isdigit($130,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=16;break; }
 case 42: 
 var $133=($131|0)==0;
 var $134=(($__ns_137+1)|0);
 if($133){var $__ns_2=$__ns_137;var $__nf_1=$__nf_0;label=43;break;}else{label=35;break;}
 case 43: 
 var $__nf_1;
 var $__ns_2;
 var $135=$__grouping;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=($137&255);
 var $139=$138&1;
 var $140=($139|0)==0;
 if($140){label=45;break;}else{label=44;break;}
 case 44: 
 var $142=(($__grouping+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $146=$143;label=46;break;
 case 45: 
 var $145=$138>>>1;
 var $146=$145;label=46;break;
 case 46: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=47;break;}else{label=51;break;}
 case 47: 
 var $149=HEAP32[(($__oe)>>2)];
 var $150=$22;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+48)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($26,$__nf_1,$__ns_2,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=18;break; }
 case 48: 
 var $155=$__ns_2;
 var $156=$__nf_1;
 var $157=((($155)-($156))|0);
 var $158=HEAP32[(($__oe)>>2)];
 var $159=(($158+($157<<2))|0);
 HEAP32[(($__oe)>>2)]=$159;
 label=49;break;
 case 49: 
 var $160=($__ns_2>>>0)<($__ne>>>0);
 if($160){label=50;break;}else{var $__nf_3=$__ns_2;label=70;break;}
 case 50: 
 var $161=$22;
 var $__nf_218=$__ns_2;label=65;break;
 case 51: 
 var $163=($__nf_1|0)==($__ns_2|0);
 if($163){label=54;break;}else{label=52;break;}
 case 52: 
 var $164=((($__ns_2)-(1))|0);
 var $165=($__nf_1>>>0)<($164>>>0);
 if($165){var $_0529=$__nf_1;var $166=$164;label=53;break;}else{label=54;break;}
 case 53: 
 var $166;
 var $_0529;
 var $167=HEAP8[($_0529)];
 var $168=HEAP8[($166)];
 HEAP8[($_0529)]=$168;
 HEAP8[($166)]=$167;
 var $169=(($_0529+1)|0);
 var $170=((($166)-(1))|0);
 var $171=($169>>>0)<($170>>>0);
 if($171){var $_0529=$169;var $166=$170;label=53;break;}else{label=54;break;}
 case 54: 
 var $172=$47;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=18;break; }
 case 55: 
 var $177=($__nf_1>>>0)<($__ns_2>>>0);
 if($177){label=56;break;}else{label=62;break;}
 case 56: 
 var $178=(($135+1)|0);
 var $179=(($__grouping+4)|0);
 var $180=(($__grouping+8)|0);
 var $181=$22;
 var $__dc_024=0;var $__dg_025=0;var $__p_026=$__nf_1;label=57;break;
 case 57: 
 var $__p_026;
 var $__dg_025;
 var $__dc_024;
 var $182=HEAP8[($136)];
 var $183=$182&1;
 var $184=(($183<<24)>>24)==0;
 var $185=HEAP32[(($180)>>2)];
 var $_=($184?$178:$185);
 var $186=(($_+$__dg_025)|0);
 var $187=HEAP8[($186)];
 var $188=(($187<<24)>>24)>0;
 if($188){label=58;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=60;break;}
 case 58: 
 var $189=HEAP32[(($180)>>2)];
 var $_62=($184?$178:$189);
 var $190=(($_62+$__dg_025)|0);
 var $191=HEAP8[($190)];
 var $192=(($191<<24)>>24);
 var $193=($__dc_024|0)==($192|0);
 if($193){label=59;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=60;break;}
 case 59: 
 var $194=HEAP32[(($__oe)>>2)];
 var $195=(($194+4)|0);
 HEAP32[(($__oe)>>2)]=$195;
 HEAP32[(($194)>>2)]=$176;
 var $196=HEAP8[($136)];
 var $197=($196&255);
 var $198=$197&1;
 var $199=($198|0)==0;
 var $200=HEAP32[(($179)>>2)];
 var $201=$197>>>1;
 var $202=($199?$201:$200);
 var $203=((($202)-(1))|0);
 var $204=($__dg_025>>>0)<($203>>>0);
 var $205=($204&1);
 var $___dg_0=((($205)+($__dg_025))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=60;break;
 case 60: 
 var $__dc_1;
 var $__dg_1;
 var $207=HEAP8[($__p_026)];
 var $208=HEAP32[(($181)>>2)];
 var $209=(($208+44)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$210]($26,$207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=15;break; }
 case 61: 
 var $212=HEAP32[(($__oe)>>2)];
 var $213=(($212+4)|0);
 HEAP32[(($__oe)>>2)]=$213;
 HEAP32[(($212)>>2)]=$211;
 var $214=((($__dc_1)+(1))|0);
 var $215=(($__p_026+1)|0);
 var $216=($215>>>0)<($__ns_2>>>0);
 if($216){var $__dc_024=$214;var $__dg_025=$__dg_1;var $__p_026=$215;label=57;break;}else{label=62;break;}
 case 62: 
 var $217=$__nf_1;
 var $218=$__nb;
 var $219=((($217)-($218))|0);
 var $220=(($__ob+($219<<2))|0);
 var $221=HEAP32[(($__oe)>>2)];
 var $222=($220|0)==($221|0);
 if($222){label=49;break;}else{label=63;break;}
 case 63: 
 var $223=((($221)-(4))|0);
 var $224=($220>>>0)<($223>>>0);
 if($224){var $_019=$220;var $225=$223;label=64;break;}else{label=49;break;}
 case 64: 
 var $225;
 var $_019;
 var $226=HEAP32[(($_019)>>2)];
 var $227=HEAP32[(($225)>>2)];
 HEAP32[(($_019)>>2)]=$227;
 HEAP32[(($225)>>2)]=$226;
 var $228=(($_019+4)|0);
 var $229=((($225)-(4))|0);
 var $230=($228>>>0)<($229>>>0);
 if($230){var $_019=$228;var $225=$229;label=64;break;}else{label=49;break;}
 case 65: 
 var $__nf_218;
 var $232=HEAP8[($__nf_218)];
 var $233=(($232<<24)>>24)==46;
 if($233){label=66;break;}else{label=68;break;}
 case 66: 
 var $235=$47;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+12)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$238]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=18;break; }
 case 67: 
 var $240=HEAP32[(($__oe)>>2)];
 var $241=(($240+4)|0);
 HEAP32[(($__oe)>>2)]=$241;
 HEAP32[(($240)>>2)]=$239;
 var $242=(($__nf_218+1)|0);
 var $__nf_3=$242;label=70;break;
 case 68: 
 var $244=HEAP32[(($161)>>2)];
 var $245=(($244+44)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$246]($26,$232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=14;break; }
 case 69: 
 var $248=HEAP32[(($__oe)>>2)];
 var $249=(($248+4)|0);
 HEAP32[(($__oe)>>2)]=$249;
 HEAP32[(($248)>>2)]=$247;
 var $250=(($__nf_218+1)|0);
 var $251=($250>>>0)<($__ne>>>0);
 if($251){var $__nf_218=$250;label=65;break;}else{var $__nf_3=$250;label=70;break;}
 case 70: 
 var $__nf_3;
 var $252=HEAP32[(($__oe)>>2)];
 var $253=$22;
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+48)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$256]($26,$__nf_3,$__ne,$252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=18;break; }
 case 71: 
 var $258=$__nf_3;
 var $259=((($67)-($258))|0);
 var $260=HEAP32[(($__oe)>>2)];
 var $261=(($260+($259<<2))|0);
 HEAP32[(($__oe)>>2)]=$261;
 var $262=($__np|0)==($__ne|0);
 if($262){var $storemerge=$261;label=73;break;}else{label=72;break;}
 case 72: 
 var $264=$__np;
 var $265=$__nb;
 var $266=((($264)-($265))|0);
 var $267=(($__ob+($266<<2))|0);
 var $storemerge=$267;label=73;break;
 case 73: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep12=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep12)]=65;
 var $specify_precision_0_off0_ph_i13=0;label=19;break;
 case 15: 
 HEAP8[($scevgep12)]=97;
 var $specify_precision_0_off0_ph_i13=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i13=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i13;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18072)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18072);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((15792)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((15792)>>2)];
 if($specify_precision_0_off0_ph_i13){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre10=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $100=$_pre10;label=47;break;
 case 29: 
 var $64=HEAP8[(18072)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i13){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18072);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((15792)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((15792)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_128=$83;var $_19=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18072);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((15792)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((15792)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $101=(($100+$__nc_2)|0);
 var $102=HEAP32[(($6)>>2)];
 var $103=$102&176;
 if(($103|0)==16){ label=48;break;}else if(($103|0)==32){ var $_0_i7=$101;label=54;break;}else{label=53;break;}
 case 48: 
 var $105=HEAP8[($100)];
 if((($105<<24)>>24)==45|(($105<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $107=(($100+1)|0);
 var $_0_i7=$107;label=54;break;
 case 50: 
 var $109=($__nc_2|0)>1;
 var $110=(($105<<24)>>24)==48;
 var $or_cond_i=$109&$110;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $112=(($100+1)|0);
 var $113=HEAP8[($112)];
 if((($113<<24)>>24)==120|(($113<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $115=(($100+2)|0);
 var $_0_i7=$115;label=54;break;
 case 53: 
 var $_0_i7=$100;label=54;break;
 case 54: 
 var $_0_i7;
 var $117=(($__o)|0);
 var $118=($100|0)==($43|0);
 if($118){var $__ob_0=$117;var $__obh_sroa_0_1=0;var $129=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $120=$__nc_2<<3;
 var $121=_malloc($120);
 var $122=$121;
 var $123=($121|0)==0;
 if($123){label=56;break;}else{var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $129=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre11=HEAP32[(($__nb)>>2)];
 var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $129=$_pre11;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0=$127;var $_01=$128;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $129;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($129,$_0_i7,$101,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $132=(($1)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133)|0);
 var $135=__ZNSt3__114__shared_count16__release_sharedEv($134);
 var $136=(($__s)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($3)|0);
 HEAP32[(($138)>>2)]=$137;
 var $139=HEAP32[(($__op)>>2)];
 var $140=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$139,$140,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $142=(($2)|0);
 var $143=HEAP32[(($142)>>2)];
 HEAP32[(($136)>>2)]=$143;
 var $144=(($agg_result)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=($__obh_sroa_0_1|0)==0;
 if($145){label=64;break;}else{label=63;break;}
 case 63: 
 var $147=$__obh_sroa_0_1;
 _free($147);
 label=64;break;
 case 64: 
 var $148=($__nbh_sroa_0_1|0)==0;
 if($148){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=(($1)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $_0=$152;var $_01=$153;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_01;
 var $_0;
 var $159=($__obh_sroa_0_2|0)==0;
 if($159){label=70;break;}else{label=69;break;}
 case 69: 
 var $161=$__obh_sroa_0_2;
 _free($161);
 label=70;break;
 case 70: 
 var $162=($__nbh_sroa_0_1|0)==0;
 if($162){var $_128=$_01;var $_19=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_128=$_01;var $_19=$_0;label=72;break;
 case 72: 
 var $_19;
 var $_128;
 var $164$0=$_19;
 var $164$1=0;
 var $165$0=$164$0;
 var $165$1=$_128;
 ___resumeException($165$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(200);
 var $2=(sp)+(208);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(4496)];HEAP8[((($3)+(1))|0)]=HEAP8[(4497)];HEAP8[((($3)+(2))|0)]=HEAP8[(4498)];HEAP8[((($3)+(3))|0)]=HEAP8[(4499)];HEAP8[((($3)+(4))|0)]=HEAP8[(4500)];HEAP8[((($3)+(5))|0)]=HEAP8[(4501)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$11;

 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((15792)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $34=(($1)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $37=HEAP32[((17328)>>2)];
 var $38=($37|0)==-1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $40=(($__p_i_i_i)|0);
 HEAP32[(($40)>>2)]=17328;
 var $41=(($__p_i_i_i+4)|0);
 HEAP32[(($41)>>2)]=(28);
 var $42=(($__p_i_i_i+8)|0);
 HEAP32[(($42)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$36,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $43=HEAP32[((17332)>>2)];
 var $44=((($43)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $45=(($35+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($35+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$46;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($44>>>0);
 if($53){label=16;break;}else{label=17;break;}
 case 16: 
 var $54=(($48+($44<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=17;break;}else{label=19;break;}
 case 17: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 __ZNSt8bad_castC2Ev($58);
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $59=$55;
 var $60=HEAP32[(($34)>>2)];
 var $61=(($60)|0);
 var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
 var $63=(($__o)|0);
 var $64=$55;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+48)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($59,$4,$17,$63);
 var $69=(($__o+($16<<2))|0);
 var $70=($_0_i|0)==($17|0);
 if($70){var $__op_0=$69;label=22;break;}else{label=21;break;}
 case 20: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($34)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
 case 21: 
 var $77=$__nar;
 var $78=$_0_i;
 var $79=((($78)-($77))|0);
 var $80=(($__o+($79<<2))|0);
 var $__op_0=$80;label=22;break;
 case 22: 
 var $__op_0;
 var $82=(($__s)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($2)|0);
 HEAP32[(($84)>>2)]=$83;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$63,$__op_0,$69,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((17336)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i)|0);
 HEAP32[(($11)>>2)]=17336;
 var $12=(($__p_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(28);
 var $13=(($__p_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$7,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $14=HEAP32[((17340)>>2)];
 var $15=((($14)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $16=(($6+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$17;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=$22>>2;
 var $24=($23>>>0)>($15>>>0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=(($19+($15<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 __ZNSt8bad_castC2Ev($29);
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $30=$26;
 var $31=HEAP32[(($5)>>2)];
 var $32=(($31)|0);
 var $33=__ZNSt3__114__shared_count16__release_sharedEv($32);
 HEAP32[(($__err)>>2)]=0;
 var $34=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($34){label=67;break;}else{label=8;break;}
 case 8: 
 var $35=(($__e)|0);
 var $36=$26;
 var $37=(($26+8)|0);
 var $38=$37;
 var $39=$26;
 var $40=$this;
 var $41=(($3)|0);
 var $42=(($4)|0);
 var $43=(($2)|0);
 var $_09_ph34=$__fmtb;var $_pre35=0;label=9;break;
 case 9: 
 var $_pre35;
 var $_09_ph34;
 var $45=$_pre35;label=10;break;
 case 10: 
 var $45;
 var $46=($45|0)==0;
 if($46){label=11;break;}else{label=67;break;}
 case 11: 
 var $48=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $49=($48|0)==0;
 if($49){var $63=0;label=15;break;}else{label=12;break;}
 case 12: 
 var $51=(($48+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($48+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($52|0)==($54|0);
 if($55){label=13;break;}else{var $63=$48;label=15;break;}
 case 13: 
 var $56=$48;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($48);
 var $61=($60|0)==-1;
 if($61){label=14;break;}else{var $63=$48;label=15;break;}
 case 14: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $63=0;label=15;break;
 case 15: 
 var $63;
 var $64=($63|0)==0;
 var $65=HEAP32[(($35)>>2)];
 var $66=($65|0)==0;
 if($66){label=20;break;}else{label=16;break;}
 case 16: 
 var $68=(($65+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($65+16)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($69|0)==($71|0);
 if($72){label=17;break;}else{label=19;break;}
 case 17: 
 var $73=$65;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+36)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=FUNCTION_TABLE[$76]($65);
 var $78=($77|0)==-1;
 if($78){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($35)>>2)]=0;
 label=20;break;
 case 19: 
 if($64){var $87=$65;label=23;break;}else{label=21;break;}
 case 20: 
 if($64){label=21;break;}else{var $87=0;label=23;break;}
 case 21: 
 HEAP32[(($__err)>>2)]=4;
 var $240=$63;label=68;break;
 case 22: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1); var $82$1 = tempRet0;
 var $83=HEAP32[(($5)>>2)];
 var $84=(($83)|0);
 var $85=__ZNSt3__114__shared_count16__release_sharedEv($84);
 ___resumeException($82$0)
 case 23: 
 var $87;
 var $88=HEAP8[($_09_ph34)];
 var $89=HEAP32[(($36)>>2)];
 var $90=(($89+36)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=FUNCTION_TABLE[$91]($30,$88,0);
 var $93=(($92<<24)>>24)==37;
 if($93){label=24;break;}else{label=33;break;}
 case 24: 
 var $95=(($_09_ph34+1)|0);
 var $96=($95|0)==($__fmte|0);
 if($96){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $240=$63;label=68;break;
 case 26: 
 var $99=HEAP8[($95)];
 var $100=HEAP32[(($36)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($30,$99,0);
 if((($103<<24)>>24)==69|(($103<<24)>>24)==48){ label=27;break;}else{var $__opt_0=0;var $__cmd_0=$103;var $_1=$95;label=30;break;}
 case 27: 
 var $105=(($_09_ph34+2)|0);
 var $106=($105|0)==($__fmte|0);
 if($106){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($__err)>>2)]=4;
 var $240=$63;label=68;break;
 case 29: 
 var $109=HEAP8[($105)];
 var $110=HEAP32[(($36)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($30,$109,0);
 var $__opt_0=$103;var $__cmd_0=$113;var $_1=$105;label=30;break;
 case 30: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $115=HEAP32[(($40)>>2)];
 var $116=(($115+36)|0);
 var $117=HEAP32[(($116)>>2)];
 HEAP32[(($41)>>2)]=$63;
 HEAP32[(($42)>>2)]=$87;
 FUNCTION_TABLE[$117]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $118=HEAP32[(($43)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$118;
 var $119=(($_1+1)|0);
 var $_09_ph_be=$119;label=31;break;
 case 31: 
 var $_09_ph_be;
 var $120=($_09_ph_be|0)==($__fmte|0);
 if($120){label=67;break;}else{label=32;break;}
 case 32: 
 var $_pre35_pre=HEAP32[(($__err)>>2)];
 var $_09_ph34=$_09_ph_be;var $_pre35=$_pre35_pre;label=9;break;
 case 33: 
 var $122=HEAP8[($_09_ph34)];
 var $isascii17=(($122<<24)>>24)>-1;
 if($isascii17){label=34;break;}else{label=58;break;}
 case 34: 
 var $123=(($122<<24)>>24);
 var $124=HEAP32[(($38)>>2)];
 var $125=(($124+($123<<1))|0);
 var $126=HEAP16[(($125)>>1)];
 var $127=$126&8192;
 var $128=(($127<<16)>>16)==0;
 if($128){label=58;break;}else{var $_09_pn=$_09_ph34;label=35;break;}
 case 35: 
 var $_09_pn;
 var $_2=(($_09_pn+1)|0);
 var $129=($_2|0)==($__fmte|0);
 if($129){var $_2_lcssa=$__fmte;label=38;break;}else{label=36;break;}
 case 36: 
 var $131=HEAP8[($_2)];
 var $isascii23=(($131<<24)>>24)>-1;
 if($isascii23){label=37;break;}else{var $_2_lcssa=$_2;label=38;break;}
 case 37: 
 var $132=(($131<<24)>>24);
 var $133=(($124+($132<<1))|0);
 var $134=HEAP16[(($133)>>1)];
 var $135=$134&8192;
 var $136=(($135<<16)>>16)==0;
 if($136){var $_2_lcssa=$_2;label=38;break;}else{var $_09_pn=$_2;label=35;break;}
 case 38: 
 var $_2_lcssa;
 var $138=$63;var $137=$87;label=39;break;
 case 39: 
 var $137;
 var $138;
 var $139=($138|0)==0;
 if($139){var $153=0;label=43;break;}else{label=40;break;}
 case 40: 
 var $141=(($138+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($138+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=41;break;}else{var $153=$138;label=43;break;}
 case 41: 
 var $146=$138;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+36)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=FUNCTION_TABLE[$149]($138);
 var $151=($150|0)==-1;
 if($151){label=42;break;}else{var $153=$138;label=43;break;}
 case 42: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $153=0;label=43;break;
 case 43: 
 var $153;
 var $154=($153|0)==0;
 var $155=($137|0)==0;
 if($155){label=48;break;}else{label=44;break;}
 case 44: 
 var $157=(($137+12)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($137+16)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($158|0)==($160|0);
 if($161){label=46;break;}else{label=45;break;}
 case 45: 
 if($154){var $172=$137;label=50;break;}else{var $_09_ph_be=$_2_lcssa;label=31;break;}
 case 46: 
 var $162=$137;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=FUNCTION_TABLE[$165]($137);
 var $167=($166|0)==-1;
 if($167){label=47;break;}else{label=49;break;}
 case 47: 
 HEAP32[(($35)>>2)]=0;
 label=48;break;
 case 48: 
 if($154){var $_09_ph_be=$_2_lcssa;label=31;break;}else{var $172=0;label=50;break;}
 case 49: 
 var $169=($137|0)==0;
 var $170=$154^$169;
 if($170){var $172=$137;label=50;break;}else{var $_09_ph_be=$_2_lcssa;label=31;break;}
 case 50: 
 var $172;
 var $173=(($153+12)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($153+16)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($174|0)==($176|0);
 if($177){label=51;break;}else{label=52;break;}
 case 51: 
 var $179=$153;
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+36)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=FUNCTION_TABLE[$182]($153);
 var $extract_t20=(($183)&255);
 var $_011_off0=$extract_t20;label=53;break;
 case 52: 
 var $185=HEAP8[($174)];
 var $_011_off0=$185;label=53;break;
 case 53: 
 var $_011_off0;
 var $isascii22=(($_011_off0<<24)>>24)>-1;
 if($isascii22){label=54;break;}else{var $_09_ph_be=$_2_lcssa;label=31;break;}
 case 54: 
 var $186=(($_011_off0<<24)>>24);
 var $187=HEAP32[(($38)>>2)];
 var $188=(($187+($186<<1))|0);
 var $189=HEAP16[(($188)>>1)];
 var $190=$189&8192;
 var $191=(($190<<16)>>16)==0;
 if($191){var $_09_ph_be=$_2_lcssa;label=31;break;}else{label=55;break;}
 case 55: 
 var $193=HEAP32[(($173)>>2)];
 var $194=HEAP32[(($175)>>2)];
 var $195=($193|0)==($194|0);
 if($195){label=56;break;}else{label=57;break;}
 case 56: 
 var $197=$153;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+40)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=FUNCTION_TABLE[$200]($153);
 var $138=$153;var $137=$172;label=39;break;
 case 57: 
 var $203=(($193+1)|0);
 HEAP32[(($173)>>2)]=$203;
 var $138=$153;var $137=$172;label=39;break;
 case 58: 
 var $204=(($63+12)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($63+16)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=($205|0)==($207|0);
 if($208){label=59;break;}else{label=60;break;}
 case 59: 
 var $210=$63;
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+36)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=FUNCTION_TABLE[$213]($63);
 var $extract_t=(($214)&255);
 var $_08_off0=$extract_t;label=61;break;
 case 60: 
 var $216=HEAP8[($205)];
 var $_08_off0=$216;label=61;break;
 case 61: 
 var $_08_off0;
 var $217=HEAP32[(($39)>>2)];
 var $218=(($217+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=FUNCTION_TABLE[$219]($30,$_08_off0);
 var $221=HEAP8[($_09_ph34)];
 var $222=HEAP32[(($39)>>2)];
 var $223=(($222+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=FUNCTION_TABLE[$224]($30,$221);
 var $226=(($220<<24)>>24)==(($225<<24)>>24);
 if($226){label=62;break;}else{label=66;break;}
 case 62: 
 var $228=HEAP32[(($204)>>2)];
 var $229=HEAP32[(($206)>>2)];
 var $230=($228|0)==($229|0);
 if($230){label=63;break;}else{label=64;break;}
 case 63: 
 var $232=$63;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+40)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=FUNCTION_TABLE[$235]($63);
 label=65;break;
 case 64: 
 var $238=(($228+1)|0);
 HEAP32[(($204)>>2)]=$238;
 label=65;break;
 case 65: 
 var $239=(($_09_ph34+1)|0);
 var $_09_ph_be=$239;label=31;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $45=4;label=10;break;
 case 67: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $240=$_pre;label=68;break;
 case 68: 
 var $240;
 var $241=(($__b)|0);
 var $242=($240|0)==0;
 if($242){label=72;break;}else{label=69;break;}
 case 69: 
 var $244=(($240+12)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($240+16)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($245|0)==($247|0);
 if($248){label=70;break;}else{label=72;break;}
 case 70: 
 var $249=$240;
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+36)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=FUNCTION_TABLE[$252]($240);
 var $254=($253|0)==-1;
 if($254){label=71;break;}else{label=72;break;}
 case 71: 
 HEAP32[(($241)>>2)]=0;
 label=72;break;
 case 72: 
 var $256=HEAP32[(($241)>>2)];
 var $257=($256|0)==0;
 var $258=(($__e)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==0;
 if($260){label=77;break;}else{label=73;break;}
 case 73: 
 var $262=(($259+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($259+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=74;break;}else{label=76;break;}
 case 74: 
 var $267=$259;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=FUNCTION_TABLE[$270]($259);
 var $272=($271|0)==-1;
 if($272){label=75;break;}else{label=76;break;}
 case 75: 
 HEAP32[(($258)>>2)]=0;
 label=77;break;
 case 76: 
 if($257){label=79;break;}else{label=78;break;}
 case 77: 
 if($257){label=78;break;}else{label=79;break;}
 case 78: 
 var $275=HEAP32[(($__err)>>2)];
 var $276=$275|2;
 HEAP32[(($__err)>>2)]=$276;
 label=79;break;
 case 79: 
 var $278=(($agg_result)|0);
 HEAP32[(($278)>>2)]=$256;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,4480,4488);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=$8;
 var $17=HEAP8[($16)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=3;break;}else{label=2;break;}
 case 2: 
 var $21=(($8+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $27=$22;var $26=$22;label=4;break;
 case 3: 
 var $24=(($15+1)|0);
 var $25=(($15+1)|0);
 var $27=$25;var $26=$24;label=4;break;
 case 4: 
 var $26;
 var $27;
 var $28=($17&255);
 var $29=$28&1;
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($8+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $36=$33;label=7;break;
 case 6: 
 var $35=$28>>>1;
 var $36=$35;label=7;break;
 case 7: 
 var $36;
 var $37=(($27+$36)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$26,$37);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17336)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17336;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $12=HEAP32[((17340)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=HEAP32[(($3)>>2)];
 var $30=(($29)|0);
 var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
 var $32=(($__e)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $35=(($this+8)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $38=HEAP32[(($37)>>2)];
 var $39=FUNCTION_TABLE[$38]($35);
 var $40=(($1)|0);
 HEAP32[(($40)>>2)]=$33;
 var $41=(($39+168)|0);
 var $42=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$39,$41,$28,$__err,0);
 var $43=$42;
 var $44=$39;
 var $45=((($43)-($44))|0);
 var $46=($45|0)<168;
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 var $48=(($__tm+24)|0);
 var $49=(((($45|0))/(12))&-1);
 var $50=(((($49|0))%(7))&-1);
 HEAP32[(($48)>>2)]=$50;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $51=(($__b)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($agg_result)|0);
 HEAP32[(($53)>>2)]=$52;
 STACKTOP=sp;return;
 case 10: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17336)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17336;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $12=HEAP32[((17340)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=HEAP32[(($3)>>2)];
 var $30=(($29)|0);
 var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
 var $32=(($__e)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $35=(($this+8)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($35);
 var $41=(($1)|0);
 HEAP32[(($41)>>2)]=$33;
 var $42=(($40+288)|0);
 var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$40,$42,$28,$__err,0);
 var $44=$43;
 var $45=$40;
 var $46=((($44)-($45))|0);
 var $47=($46|0)<288;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=(($__tm+16)|0);
 var $50=(((($46|0))/(12))&-1);
 var $51=(((($50|0))%(12))&-1);
 HEAP32[(($49)>>2)]=$51;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $52=(($__b)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$53;
 STACKTOP=sp;return;
 case 10: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17336)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17336;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $12=HEAP32[((17340)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=HEAP32[(($3)>>2)];
 var $30=(($29)|0);
 var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
 var $32=(($__tm+20)|0);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($1)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$28,4);
 var $38=HEAP32[(($__err)>>2)];
 var $39=$38&4;
 var $40=($39|0)==0;
 if($40){label=8;break;}else{label=12;break;}
 case 8: 
 var $42=($37|0)<69;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 var $44=((($37)+(2000))|0);
 var $__t_0_i=$44;label=11;break;
 case 10: 
 var $_off_i=((($37)-(69))|0);
 var $46=($_off_i>>>0)<31;
 var $47=((($37)+(1900))|0);
 var $__i=($46?$47:$37);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $49=((($__t_0_i)-(1900))|0);
 HEAP32[(($32)>>2)]=$49;
 label=12;break;
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $50=(($__b)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($agg_result)|0);
 HEAP32[(($52)>>2)]=$51;
 STACKTOP=sp;return;
 case 13: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=HEAP32[(($3)>>2)];
 var $56=(($55)|0);
 var $57=__ZNSt3__114__shared_count16__release_sharedEv($56);
 ___resumeException($54$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $44=HEAP32[((17336)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $47=(($__p_i_i_i)|0);
 HEAP32[(($47)>>2)]=17336;
 var $48=(($__p_i_i_i+4)|0);
 HEAP32[(($48)>>2)]=(28);
 var $49=(($__p_i_i_i+8)|0);
 HEAP32[(($49)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$43,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $50=HEAP32[((17340)>>2)];
 var $51=((($50)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $52=(($42+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($42+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$53;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=$58>>2;
 var $60=($59>>>0)>($51>>>0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=(($55+($51<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 __ZNSt8bad_castC2Ev($65);
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $66=$62;
 var $67=HEAP32[(($41)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 var $70=(($__fmt<<24)>>24);
 switch(($70|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($41)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
 case 9: 
 var $77=(($__e)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$13;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $80=(($this+8)|0);
 var $81=$80;
 var $82=HEAP32[(($81)>>2)];
 var $83=HEAP32[(($82)>>2)];
 var $84=FUNCTION_TABLE[$83]($80);
 var $85=(($13)|0);
 HEAP32[(($85)>>2)]=$78;
 var $86=(($84+168)|0);
 var $87=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$84,$86,$66,$__err,0);
 var $88=$87;
 var $89=$84;
 var $90=((($88)-($89))|0);
 var $91=($90|0)<168;
 if($91){label=10;break;}else{label=70;break;}
 case 10: 
 var $93=(($__tm+24)|0);
 var $94=(((($90|0))/(12))&-1);
 var $95=(((($94|0))%(7))&-1);
 HEAP32[(($93)>>2)]=$95;
 label=70;break;
 case 11: 
 var $97=(($__e)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$12;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $100=(($this+8)|0);
 var $101=$100;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($100);
 var $106=(($12)|0);
 HEAP32[(($106)>>2)]=$98;
 var $107=(($105+288)|0);
 var $108=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$105,$107,$66,$__err,0);
 var $109=$108;
 var $110=$105;
 var $111=((($109)-($110))|0);
 var $112=($111|0)<288;
 if($112){label=12;break;}else{label=70;break;}
 case 12: 
 var $114=(($__tm+16)|0);
 var $115=(((($111|0))/(12))&-1);
 var $116=(((($115|0))%(12))&-1);
 HEAP32[(($114)>>2)]=$116;
 label=70;break;
 case 13: 
 var $118=(($this+8)|0);
 var $119=$118;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+12)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=FUNCTION_TABLE[$122]($118);
 var $124=(($__b)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($16)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=(($__e)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($17)|0);
 HEAP32[(($129)>>2)]=$128;
 var $130=$123;
 var $131=$123;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=15;break;}else{label=14;break;}
 case 14: 
 var $136=(($123+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $142=$137;var $141=$137;label=16;break;
 case 15: 
 var $139=(($130+1)|0);
 var $140=(($130+1)|0);
 var $142=$140;var $141=$139;label=16;break;
 case 16: 
 var $141;
 var $142;
 var $143=($132&255);
 var $144=$143&1;
 var $145=($144|0)==0;
 if($145){label=18;break;}else{label=17;break;}
 case 17: 
 var $147=(($123+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $151=$148;label=19;break;
 case 18: 
 var $150=$143>>>1;
 var $151=$150;label=19;break;
 case 19: 
 var $151;
 var $152=(($142+$151)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$141,$152);
 var $153=(($15)|0);
 var $154=HEAP32[(($153)>>2)];
 HEAP32[(($124)>>2)]=$154;
 label=70;break;
 case 20: 
 var $156=(($__tm+12)|0);
 var $157=(($__e)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$11;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $160=(($11)|0);
 HEAP32[(($160)>>2)]=$158;
 var $161=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$66,2);
 var $162=HEAP32[(($__err)>>2)];
 var $163=$162&4;
 var $164=($163|0)==0;
 if($164){label=21;break;}else{label=23;break;}
 case 21: 
 var $_off_i=((($161)-(1))|0);
 var $166=($_off_i>>>0)<31;
 if($166){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($156)>>2)]=$161;
 label=70;break;
 case 23: 
 var $169=$162|4;
 HEAP32[(($__err)>>2)]=$169;
 label=70;break;
 case 24: 
 var $171=(($__b)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($19)|0);
 HEAP32[(($173)>>2)]=$172;
 var $174=(($__e)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($20)|0);
 HEAP32[(($176)>>2)]=$175;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$19,$20,$__iob,$__err,$__tm,4472,4480);
 var $177=(($18)|0);
 var $178=HEAP32[(($177)>>2)];
 HEAP32[(($171)>>2)]=$178;
 label=70;break;
 case 25: 
 var $180=(($__b)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($22)|0);
 HEAP32[(($182)>>2)]=$181;
 var $183=(($__e)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($23)|0);
 HEAP32[(($185)>>2)]=$184;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$22,$23,$__iob,$__err,$__tm,4464,4472);
 var $186=(($21)|0);
 var $187=HEAP32[(($186)>>2)];
 HEAP32[(($180)>>2)]=$187;
 label=70;break;
 case 26: 
 var $189=(($__e)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$10;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $192=(($10)|0);
 HEAP32[(($192)>>2)]=$190;
 var $193=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$66,2);
 var $194=HEAP32[(($__err)>>2)];
 var $195=$194&4;
 var $196=($195|0)==0;
 var $197=($193|0)<24;
 var $or_cond_i=$196&$197;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $199=(($__tm+8)|0);
 HEAP32[(($199)>>2)]=$193;
 label=70;break;
 case 28: 
 var $201=$194|4;
 HEAP32[(($__err)>>2)]=$201;
 label=70;break;
 case 29: 
 var $203=(($__tm+8)|0);
 var $204=(($__e)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$9;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $207=(($9)|0);
 HEAP32[(($207)>>2)]=$205;
 var $208=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$66,2);
 var $209=HEAP32[(($__err)>>2)];
 var $210=$209&4;
 var $211=($210|0)==0;
 if($211){label=30;break;}else{label=32;break;}
 case 30: 
 var $_off_i11=((($208)-(1))|0);
 var $213=($_off_i11>>>0)<12;
 if($213){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($203)>>2)]=$208;
 label=70;break;
 case 32: 
 var $216=$209|4;
 HEAP32[(($__err)>>2)]=$216;
 label=70;break;
 case 33: 
 var $218=(($__e)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$8;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $221=(($8)|0);
 HEAP32[(($221)>>2)]=$219;
 var $222=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$66,3);
 var $223=HEAP32[(($__err)>>2)];
 var $224=$223&4;
 var $225=($224|0)==0;
 var $226=($222|0)<366;
 var $or_cond_i14=$225&$226;
 if($or_cond_i14){label=34;break;}else{label=35;break;}
 case 34: 
 var $228=(($__tm+28)|0);
 HEAP32[(($228)>>2)]=$222;
 label=70;break;
 case 35: 
 var $230=$223|4;
 HEAP32[(($__err)>>2)]=$230;
 label=70;break;
 case 36: 
 var $232=(($__e)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=$7;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $235=(($7)|0);
 HEAP32[(($235)>>2)]=$233;
 var $236=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$66,2);
 var $237=HEAP32[(($__err)>>2)];
 var $238=$237&4;
 var $239=($238|0)==0;
 var $240=($236|0)<13;
 var $or_cond_i17=$239&$240;
 if($or_cond_i17){label=37;break;}else{label=38;break;}
 case 37: 
 var $242=(($__tm+16)|0);
 var $243=((($236)-(1))|0);
 HEAP32[(($242)>>2)]=$243;
 label=70;break;
 case 38: 
 var $245=$237|4;
 HEAP32[(($__err)>>2)]=$245;
 label=70;break;
 case 39: 
 var $247=(($__e)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=$6;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $250=(($6)|0);
 HEAP32[(($250)>>2)]=$248;
 var $251=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$66,2);
 var $252=HEAP32[(($__err)>>2)];
 var $253=$252&4;
 var $254=($253|0)==0;
 var $255=($251|0)<60;
 var $or_cond_i20=$254&$255;
 if($or_cond_i20){label=40;break;}else{label=41;break;}
 case 40: 
 var $257=(($__tm+4)|0);
 HEAP32[(($257)>>2)]=$251;
 label=70;break;
 case 41: 
 var $259=$252|4;
 HEAP32[(($__err)>>2)]=$259;
 label=70;break;
 case 42: 
 var $261=(($__e)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($24)|0);
 HEAP32[(($263)>>2)]=$262;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$24,$__err,$66);
 label=70;break;
 case 43: 
 var $265=(($__tm+8)|0);
 var $266=(($__e)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($25)|0);
 HEAP32[(($268)>>2)]=$267;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$265,$__b,$25,$__err,$66);
 label=70;break;
 case 44: 
 var $270=(($__b)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($27)|0);
 HEAP32[(($272)>>2)]=$271;
 var $273=(($__e)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($28)|0);
 HEAP32[(($275)>>2)]=$274;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($26,$this,$27,$28,$__iob,$__err,$__tm,4448,4459);
 var $276=(($26)|0);
 var $277=HEAP32[(($276)>>2)];
 HEAP32[(($270)>>2)]=$277;
 label=70;break;
 case 45: 
 var $279=(($__b)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($30)|0);
 HEAP32[(($281)>>2)]=$280;
 var $282=(($__e)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($31)|0);
 HEAP32[(($284)>>2)]=$283;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($29,$this,$30,$31,$__iob,$__err,$__tm,4440,4445);
 var $285=(($29)|0);
 var $286=HEAP32[(($285)>>2)];
 HEAP32[(($279)>>2)]=$286;
 label=70;break;
 case 46: 
 var $288=(($__e)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=$5;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $291=(($5)|0);
 HEAP32[(($291)>>2)]=$289;
 var $292=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$66,2);
 var $293=HEAP32[(($__err)>>2)];
 var $294=$293&4;
 var $295=($294|0)==0;
 var $296=($292|0)<61;
 var $or_cond_i23=$295&$296;
 if($or_cond_i23){label=47;break;}else{label=48;break;}
 case 47: 
 var $298=(($__tm)|0);
 HEAP32[(($298)>>2)]=$292;
 label=70;break;
 case 48: 
 var $300=$293|4;
 HEAP32[(($__err)>>2)]=$300;
 label=70;break;
 case 49: 
 var $302=(($__b)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=(($33)|0);
 HEAP32[(($304)>>2)]=$303;
 var $305=(($__e)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=(($34)|0);
 HEAP32[(($307)>>2)]=$306;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($32,$this,$33,$34,$__iob,$__err,$__tm,4432,4440);
 var $308=(($32)|0);
 var $309=HEAP32[(($308)>>2)];
 HEAP32[(($302)>>2)]=$309;
 label=70;break;
 case 50: 
 var $311=(($__e)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=$4;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $314=(($4)|0);
 HEAP32[(($314)>>2)]=$312;
 var $315=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$66,1);
 var $316=HEAP32[(($__err)>>2)];
 var $317=$316&4;
 var $318=($317|0)==0;
 var $319=($315|0)<7;
 var $or_cond_i26=$318&$319;
 if($or_cond_i26){label=51;break;}else{label=52;break;}
 case 51: 
 var $321=(($__tm+24)|0);
 HEAP32[(($321)>>2)]=$315;
 label=70;break;
 case 52: 
 var $323=$316|4;
 HEAP32[(($__err)>>2)]=$323;
 label=70;break;
 case 53: 
 var $325=$this;
 var $326=HEAP32[(($325)>>2)];
 var $327=(($326+20)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($__b)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($35)|0);
 HEAP32[(($331)>>2)]=$330;
 var $332=(($__e)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($36)|0);
 HEAP32[(($334)>>2)]=$333;
 FUNCTION_TABLE[$328]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $336=(($this+8)|0);
 var $337=$336;
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338+24)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=FUNCTION_TABLE[$340]($336);
 var $342=(($__b)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($38)|0);
 HEAP32[(($344)>>2)]=$343;
 var $345=(($__e)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($39)|0);
 HEAP32[(($347)>>2)]=$346;
 var $348=$341;
 var $349=$341;
 var $350=HEAP8[($349)];
 var $351=$350&1;
 var $352=(($351<<24)>>24)==0;
 if($352){label=56;break;}else{label=55;break;}
 case 55: 
 var $354=(($341+8)|0);
 var $355=HEAP32[(($354)>>2)];
 var $360=$355;var $359=$355;label=57;break;
 case 56: 
 var $357=(($348+1)|0);
 var $358=(($348+1)|0);
 var $360=$358;var $359=$357;label=57;break;
 case 57: 
 var $359;
 var $360;
 var $361=($350&255);
 var $362=$361&1;
 var $363=($362|0)==0;
 if($363){label=59;break;}else{label=58;break;}
 case 58: 
 var $365=(($341+4)|0);
 var $366=HEAP32[(($365)>>2)];
 var $369=$366;label=60;break;
 case 59: 
 var $368=$361>>>1;
 var $369=$368;label=60;break;
 case 60: 
 var $369;
 var $370=(($360+$369)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$359,$370);
 var $371=(($37)|0);
 var $372=HEAP32[(($371)>>2)];
 HEAP32[(($342)>>2)]=$372;
 label=70;break;
 case 61: 
 var $374=(($__tm+20)|0);
 var $375=(($__e)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=$3;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $378=(($3)|0);
 HEAP32[(($378)>>2)]=$376;
 var $379=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$66,4);
 var $380=HEAP32[(($__err)>>2)];
 var $381=$380&4;
 var $382=($381|0)==0;
 if($382){label=62;break;}else{label=70;break;}
 case 62: 
 var $384=($379|0)<69;
 if($384){label=63;break;}else{label=64;break;}
 case 63: 
 var $386=((($379)+(2000))|0);
 var $__t_0_i=$386;label=65;break;
 case 64: 
 var $_off_i29=((($379)-(69))|0);
 var $388=($_off_i29>>>0)<31;
 var $389=((($379)+(1900))|0);
 var $__i=($388?$389:$379);
 var $__t_0_i=$__i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $391=((($__t_0_i)-(1900))|0);
 HEAP32[(($374)>>2)]=$391;
 label=70;break;
 case 66: 
 var $393=(($__e)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$2;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $396=(($2)|0);
 HEAP32[(($396)>>2)]=$394;
 var $397=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$66,4);
 var $398=HEAP32[(($__err)>>2)];
 var $399=$398&4;
 var $400=($399|0)==0;
 if($400){label=67;break;}else{label=70;break;}
 case 67: 
 var $402=(($__tm+20)|0);
 var $403=((($397)-(1900))|0);
 HEAP32[(($402)>>2)]=$403;
 label=70;break;
 case 68: 
 var $405=(($__e)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=(($40)|0);
 HEAP32[(($407)>>2)]=$406;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$40,$__err,$66);
 label=70;break;
 case 69: 
 var $409=HEAP32[(($__err)>>2)];
 var $410=$409|4;
 HEAP32[(($__err)>>2)]=$410;
 label=70;break;
 case 70: 
 var $411=(($__b)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($agg_result)|0);
 HEAP32[(($413)>>2)]=$412;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=(($__ct+8)|0);
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $19=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{var $19=$4;label=7;break;}
 case 4: 
 var $12=$4;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($4);
 var $17=($16|0)==-1;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre=HEAP32[(($1)>>2)];
 var $19=$_pre;label=7;break;
 case 6: 
 HEAP32[(($1)>>2)]=0;
 var $19=0;label=7;break;
 case 7: 
 var $19;
 var $20=($19|0)==0;
 var $21=HEAP32[(($2)>>2)];
 var $22=($21|0)==0;
 if($22){label=12;break;}else{label=8;break;}
 case 8: 
 var $24=(($21+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($21+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($25|0)==($27|0);
 if($28){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=$21;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($21);
 var $34=($33|0)==-1;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($2)>>2)]=0;
 label=12;break;
 case 11: 
 if($20){var $38=$21;var $37=0;label=13;break;}else{var $75=$21;var $74=0;label=21;break;}
 case 12: 
 if($20){var $75=0;var $74=1;label=21;break;}else{var $38=0;var $37=1;label=13;break;}
 case 13: 
 var $37;
 var $38;
 var $39=HEAP32[(($1)>>2)];
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($39+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=$39;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($39);
 var $extract_t=(($50)&255);
 var $_04_off0=$extract_t;label=16;break;
 case 15: 
 var $52=HEAP8[($41)];
 var $_04_off0=$52;label=16;break;
 case 16: 
 var $_04_off0;
 var $isascii9=(($_04_off0<<24)>>24)>-1;
 if($isascii9){label=17;break;}else{var $75=$38;var $74=$37;label=21;break;}
 case 17: 
 var $53=(($_04_off0<<24)>>24);
 var $54=HEAP32[(($3)>>2)];
 var $55=(($54+($53<<1))|0);
 var $56=HEAP16[(($55)>>1)];
 var $57=$56&8192;
 var $58=(($57<<16)>>16)==0;
 if($58){var $75=$38;var $74=$37;label=21;break;}else{label=18;break;}
 case 18: 
 var $60=HEAP32[(($1)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($60+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){label=19;break;}else{label=20;break;}
 case 19: 
 var $67=$60;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+40)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=FUNCTION_TABLE[$70]($60);
 label=2;break;
 case 20: 
 var $73=(($62+1)|0);
 HEAP32[(($61)>>2)]=$73;
 label=2;break;
 case 21: 
 var $74;
 var $75;
 var $76=HEAP32[(($1)>>2)];
 var $77=($76|0)==0;
 if($77){var $91=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $79=(($76+12)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($76+16)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($80|0)==($82|0);
 if($83){label=23;break;}else{var $91=$76;label=26;break;}
 case 23: 
 var $84=$76;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+36)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($76);
 var $89=($88|0)==-1;
 if($89){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre11=HEAP32[(($1)>>2)];
 var $91=$_pre11;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $91=0;label=26;break;
 case 26: 
 var $91;
 var $92=($91|0)==0;
 if($74){label=31;break;}else{label=27;break;}
 case 27: 
 var $94=(($75+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($75+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=28;break;}else{label=32;break;}
 case 28: 
 var $99=$75;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($75);
 var $104=($103|0)==-1;
 if($104){label=30;break;}else{label=29;break;}
 case 29: 
 if($92){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($2)>>2)]=0;
 label=31;break;
 case 31: 
 if($92){label=33;break;}else{label=34;break;}
 case 32: 
 var $106=($75|0)==0;
 var $tmp7=$92^$106;
 if($tmp7){label=34;break;}else{label=33;break;}
 case 33: 
 var $108=HEAP32[(($__err)>>2)];
 var $109=$108|2;
 HEAP32[(($__err)>>2)]=$109;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10&1;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$10>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($7+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $40=$20;var $39=0;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $40=0;var $39=1;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 label=34;break;
 case 13: 
 var $39;
 var $40;
 var $41=HEAP32[(($1)>>2)];
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($41+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$41;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=FUNCTION_TABLE[$51]($41);
 var $extract_t=(($52)&255);
 var $_03_off0=$extract_t;label=16;break;
 case 15: 
 var $54=HEAP8[($43)];
 var $_03_off0=$54;label=16;break;
 case 16: 
 var $_03_off0;
 var $55=$__ct;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=FUNCTION_TABLE[$58]($__ct,$_03_off0,0);
 var $60=(($59<<24)>>24)==37;
 if($60){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($__err)>>2)];
 var $63=$62|4;
 HEAP32[(($__err)>>2)]=$63;
 label=34;break;
 case 18: 
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($65+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=$65;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+40)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($65);
 label=21;break;
 case 20: 
 var $78=(($67+1)|0);
 HEAP32[(($66)>>2)]=$78;
 label=21;break;
 case 21: 
 var $79=HEAP32[(($1)>>2)];
 var $80=($79|0)==0;
 if($80){var $94=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=23;break;}else{var $94=$79;label=26;break;}
 case 23: 
 var $87=$79;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=FUNCTION_TABLE[$90]($79);
 var $92=($91|0)==-1;
 if($92){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre8=HEAP32[(($1)>>2)];
 var $94=$_pre8;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $94=0;label=26;break;
 case 26: 
 var $94;
 var $95=($94|0)==0;
 if($39){label=31;break;}else{label=27;break;}
 case 27: 
 var $97=(($40+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($40+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=28;break;}else{label=32;break;}
 case 28: 
 var $102=$40;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+36)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($40);
 var $107=($106|0)==-1;
 if($107){label=30;break;}else{label=29;break;}
 case 29: 
 if($95){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 label=31;break;
 case 31: 
 if($95){label=33;break;}else{label=34;break;}
 case 32: 
 var $109=($40|0)==0;
 var $tmp7=$95^$109;
 if($tmp7){label=34;break;}else{label=33;break;}
 case 33: 
 var $111=HEAP32[(($__err)>>2)];
 var $112=$111|2;
 HEAP32[(($__err)>>2)]=$112;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $39=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $39=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 var $_04=0;label=53;break;
 case 13: 
 var $39;
 var $40=HEAP32[(($1)>>2)];
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($42|0)==($44|0);
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=$40;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+36)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=FUNCTION_TABLE[$50]($40);
 var $extract_t=(($51)&255);
 var $_09_off0=$extract_t;label=16;break;
 case 15: 
 var $53=HEAP8[($42)];
 var $_09_off0=$53;label=16;break;
 case 16: 
 var $_09_off0;
 var $isascii13=(($_09_off0<<24)>>24)>-1;
 if($isascii13){label=17;break;}else{label=18;break;}
 case 17: 
 var $54=(($_09_off0<<24)>>24);
 var $55=(($__ct+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+($54<<1))|0);
 var $58=HEAP16[(($57)>>1)];
 var $59=$58&2048;
 var $60=(($59<<16)>>16)==0;
 if($60){label=18;break;}else{label=19;break;}
 case 18: 
 var $61=HEAP32[(($__err)>>2)];
 var $62=$61|4;
 HEAP32[(($__err)>>2)]=$62;
 var $_04=0;label=53;break;
 case 19: 
 var $64=$__ct;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+36)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($__ct,$_09_off0,0);
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=20;break;}else{label=21;break;}
 case 20: 
 var $77=$70;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+40)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($70);
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;label=22;break;
 case 21: 
 var $83=(($72+1)|0);
 HEAP32[(($71)>>2)]=$83;
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;label=22;break;
 case 22: 
 var $84;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $100=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=24;break;}else{var $100=$85;label=27;break;}
 case 24: 
 var $93=$85;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($85);
 var $98=($97|0)==-1;
 if($98){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre24=HEAP32[(($1)>>2)];
 var $100=$_pre24;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $100=0;label=27;break;
 case 27: 
 var $100;
 var $101=($100|0)==0;
 var $102=($84|0)==0;
 if($102){var $118=$100;var $117=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $104=(($84+12)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($84+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=29;break;}else{var $116=$84;label=31;break;}
 case 29: 
 var $109=$84;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($84);
 var $114=($113|0)==-1;
 if($114){label=30;break;}else{var $116=$84;label=31;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 var $116=0;label=31;break;
 case 31: 
 var $116;
 var $_pr=HEAP32[(($1)>>2)];
 var $118=$_pr;var $117=$116;label=32;break;
 case 32: 
 var $117;
 var $118;
 var $119=($117|0)==0;
 var $120=$101^$119;
 var $121=($_0|0)>0;
 var $_=$120&$121;
 if($_){label=33;break;}else{label=41;break;}
 case 33: 
 var $123=(($118+12)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($118+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($124|0)==($126|0);
 if($127){label=34;break;}else{label=35;break;}
 case 34: 
 var $129=$118;
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+36)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=FUNCTION_TABLE[$132]($118);
 var $extract_t16=(($133)&255);
 var $_05_off0=$extract_t16;label=36;break;
 case 35: 
 var $135=HEAP8[($124)];
 var $_05_off0=$135;label=36;break;
 case 36: 
 var $_05_off0;
 var $isascii18=(($_05_off0<<24)>>24)>-1;
 if($isascii18){label=37;break;}else{var $_04=$__r_0;label=53;break;}
 case 37: 
 var $136=(($_05_off0<<24)>>24);
 var $137=HEAP32[(($55)>>2)];
 var $138=(($137+($136<<1))|0);
 var $139=HEAP16[(($138)>>1)];
 var $140=$139&2048;
 var $141=(($140<<16)>>16)==0;
 if($141){var $_04=$__r_0;label=53;break;}else{label=38;break;}
 case 38: 
 var $143=((($__r_0)*(10))&-1);
 var $144=HEAP32[(($64)>>2)];
 var $145=(($144+36)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=FUNCTION_TABLE[$146]($__ct,$_05_off0,0);
 var $148=(($147<<24)>>24);
 var $149=((($148)+($143))|0);
 var $150=HEAP32[(($1)>>2)];
 var $151=(($150+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($150+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=39;break;}else{label=40;break;}
 case 39: 
 var $157=$150;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+40)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($150);
 var $__r_0_in=$149;var $_0_in=$_0;var $84=$117;label=22;break;
 case 40: 
 var $163=(($152+1)|0);
 HEAP32[(($151)>>2)]=$163;
 var $__r_0_in=$149;var $_0_in=$_0;var $84=$117;label=22;break;
 case 41: 
 var $165=($118|0)==0;
 if($165){var $179=0;label=46;break;}else{label=42;break;}
 case 42: 
 var $167=(($118+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($118+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=43;break;}else{var $179=$118;label=46;break;}
 case 43: 
 var $172=$118;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=FUNCTION_TABLE[$175]($118);
 var $177=($176|0)==-1;
 if($177){label=45;break;}else{label=44;break;}
 case 44: 
 var $_pre25=HEAP32[(($1)>>2)];
 var $179=$_pre25;label=46;break;
 case 45: 
 HEAP32[(($1)>>2)]=0;
 var $179=0;label=46;break;
 case 46: 
 var $179;
 var $180=($179|0)==0;
 if($119){label=51;break;}else{label=47;break;}
 case 47: 
 var $182=(($117+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($117+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=48;break;}else{label=50;break;}
 case 48: 
 var $187=$117;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+36)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=FUNCTION_TABLE[$190]($117);
 var $192=($191|0)==-1;
 if($192){label=49;break;}else{label=50;break;}
 case 49: 
 HEAP32[(($19)>>2)]=0;
 label=51;break;
 case 50: 
 if($180){var $_04=$__r_0;label=53;break;}else{label=52;break;}
 case 51: 
 if($180){label=52;break;}else{var $_04=$__r_0;label=53;break;}
 case 52: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 var $_04=$__r_0;label=53;break;
 case 53: 
 var $_04;
 STACKTOP=sp;return $_04;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((17328)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i)|0);
 HEAP32[(($11)>>2)]=17328;
 var $12=(($__p_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(28);
 var $13=(($__p_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$7,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $14=HEAP32[((17332)>>2)];
 var $15=((($14)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $16=(($6+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$17;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=$22>>2;
 var $24=($23>>>0)>($15>>>0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=(($19+($15<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 __ZNSt8bad_castC2Ev($29);
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $30=$26;
 var $31=HEAP32[(($5)>>2)];
 var $32=(($31)|0);
 var $33=__ZNSt3__114__shared_count16__release_sharedEv($32);
 HEAP32[(($__err)>>2)]=0;
 var $34=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($34){label=71;break;}else{label=8;break;}
 case 8: 
 var $35=(($__e)|0);
 var $36=$26;
 var $37=$26;
 var $38=$26;
 var $39=$this;
 var $40=(($3)|0);
 var $41=(($4)|0);
 var $42=(($2)|0);
 var $_06_ph26=$__fmtb;var $_pre27=0;label=9;break;
 case 9: 
 var $_pre27;
 var $_06_ph26;
 var $44=$_pre27;label=10;break;
 case 10: 
 var $44;
 var $45=($44|0)==0;
 if($45){label=11;break;}else{label=71;break;}
 case 11: 
 var $47=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $48=($47|0)==0;
 if($48){var $65=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $50=(($47+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($47+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$47;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($47);
 var $_012=$60;label=15;break;
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_012=$62;label=15;break;
 case 15: 
 var $_012;
 var $63=($_012|0)==-1;
 if($63){label=16;break;}else{var $65=$47;label=17;break;}
 case 16: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $65=0;label=17;break;
 case 17: 
 var $65;
 var $66=($65|0)==0;
 var $67=HEAP32[(($35)>>2)];
 var $68=($67|0)==0;
 if($68){label=23;break;}else{label=18;break;}
 case 18: 
 var $70=(($67+12)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($67+16)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($71|0)==($73|0);
 if($74){label=19;break;}else{label=20;break;}
 case 19: 
 var $76=$67;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+36)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=FUNCTION_TABLE[$79]($67);
 var $_011=$80;label=21;break;
 case 20: 
 var $82=HEAP32[(($71)>>2)];
 var $_011=$82;label=21;break;
 case 21: 
 var $_011;
 var $83=($_011|0)==-1;
 if($83){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($35)>>2)]=0;
 label=23;break;
 case 23: 
 if($66){label=25;break;}else{var $93=0;label=27;break;}
 case 24: 
 var $85=($67|0)==0;
 var $tmp13=$66^$85;
 if($tmp13){var $93=$67;label=27;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $248=$65;label=72;break;
 case 26: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=HEAP32[(($5)>>2)];
 var $90=(($89)|0);
 var $91=__ZNSt3__114__shared_count16__release_sharedEv($90);
 ___resumeException($88$0)
 case 27: 
 var $93;
 var $94=HEAP32[(($_06_ph26)>>2)];
 var $95=HEAP32[(($36)>>2)];
 var $96=(($95+52)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($30,$94,0);
 var $99=(($98<<24)>>24)==37;
 if($99){label=28;break;}else{label=37;break;}
 case 28: 
 var $101=(($_06_ph26+4)|0);
 var $102=($101|0)==($__fmte|0);
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($__err)>>2)]=4;
 var $248=$65;label=72;break;
 case 30: 
 var $105=HEAP32[(($101)>>2)];
 var $106=HEAP32[(($36)>>2)];
 var $107=(($106+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($30,$105,0);
 if((($109<<24)>>24)==69|(($109<<24)>>24)==48){ label=31;break;}else{var $__opt_0=0;var $__cmd_0=$109;var $_1=$101;label=34;break;}
 case 31: 
 var $111=(($_06_ph26+8)|0);
 var $112=($111|0)==($__fmte|0);
 if($112){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($__err)>>2)]=4;
 var $248=$65;label=72;break;
 case 33: 
 var $115=HEAP32[(($111)>>2)];
 var $116=HEAP32[(($36)>>2)];
 var $117=(($116+52)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=FUNCTION_TABLE[$118]($30,$115,0);
 var $__opt_0=$109;var $__cmd_0=$119;var $_1=$111;label=34;break;
 case 34: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $121=HEAP32[(($39)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 HEAP32[(($40)>>2)]=$65;
 HEAP32[(($41)>>2)]=$93;
 FUNCTION_TABLE[$123]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $124=HEAP32[(($42)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$124;
 var $125=(($_1+4)|0);
 var $_06_ph_be=$125;label=35;break;
 case 35: 
 var $_06_ph_be;
 var $126=($_06_ph_be|0)==($__fmte|0);
 if($126){label=71;break;}else{label=36;break;}
 case 36: 
 var $_pre27_pre=HEAP32[(($__err)>>2)];
 var $_06_ph26=$_06_ph_be;var $_pre27=$_pre27_pre;label=9;break;
 case 37: 
 var $128=HEAP32[(($_06_ph26)>>2)];
 var $129=HEAP32[(($37)>>2)];
 var $130=(($129+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=FUNCTION_TABLE[$131]($30,8192,$128);
 if($132){var $_06_pn=$_06_ph26;label=38;break;}else{label=62;break;}
 case 38: 
 var $_06_pn;
 var $_2=(($_06_pn+4)|0);
 var $133=($_2|0)==($__fmte|0);
 if($133){var $_2_lcssa=$__fmte;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_2)>>2)];
 var $136=HEAP32[(($37)>>2)];
 var $137=(($136+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=FUNCTION_TABLE[$138]($30,8192,$135);
 if($139){var $_06_pn=$_2;label=38;break;}else{var $_2_lcssa=$_2;label=40;break;}
 case 40: 
 var $_2_lcssa;
 var $141=$65;var $140=$93;label=41;break;
 case 41: 
 var $140;
 var $141;
 var $142=($141|0)==0;
 if($142){var $159=0;label=47;break;}else{label=42;break;}
 case 42: 
 var $144=(($141+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($141+16)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($145|0)==($147|0);
 if($148){label=43;break;}else{label=44;break;}
 case 43: 
 var $150=$141;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+36)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=FUNCTION_TABLE[$153]($141);
 var $_010=$154;label=45;break;
 case 44: 
 var $156=HEAP32[(($145)>>2)];
 var $_010=$156;label=45;break;
 case 45: 
 var $_010;
 var $157=($_010|0)==-1;
 if($157){label=46;break;}else{var $159=$141;label=47;break;}
 case 46: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $159=0;label=47;break;
 case 47: 
 var $159;
 var $160=($159|0)==0;
 var $161=($140|0)==0;
 if($161){label=53;break;}else{label=48;break;}
 case 48: 
 var $163=(($140+12)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(($140+16)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($164|0)==($166|0);
 if($167){label=49;break;}else{label=50;break;}
 case 49: 
 var $169=$140;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+36)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=FUNCTION_TABLE[$172]($140);
 var $_09=$173;label=51;break;
 case 50: 
 var $175=HEAP32[(($164)>>2)];
 var $_09=$175;label=51;break;
 case 51: 
 var $_09;
 var $176=($_09|0)==-1;
 if($176){label=52;break;}else{label=54;break;}
 case 52: 
 HEAP32[(($35)>>2)]=0;
 label=53;break;
 case 53: 
 if($160){var $_06_ph_be=$_2_lcssa;label=35;break;}else{var $181=0;label=55;break;}
 case 54: 
 var $178=($140|0)==0;
 var $179=$160^$178;
 if($179){var $181=$140;label=55;break;}else{var $_06_ph_be=$_2_lcssa;label=35;break;}
 case 55: 
 var $181;
 var $182=(($159+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($159+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=56;break;}else{label=57;break;}
 case 56: 
 var $188=$159;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=FUNCTION_TABLE[$191]($159);
 var $_08=$192;label=58;break;
 case 57: 
 var $194=HEAP32[(($183)>>2)];
 var $_08=$194;label=58;break;
 case 58: 
 var $_08;
 var $195=HEAP32[(($37)>>2)];
 var $196=(($195+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=FUNCTION_TABLE[$197]($30,8192,$_08);
 if($198){label=59;break;}else{var $_06_ph_be=$_2_lcssa;label=35;break;}
 case 59: 
 var $200=HEAP32[(($182)>>2)];
 var $201=HEAP32[(($184)>>2)];
 var $202=($200|0)==($201|0);
 if($202){label=60;break;}else{label=61;break;}
 case 60: 
 var $204=$159;
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+40)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=FUNCTION_TABLE[$207]($159);
 var $141=$159;var $140=$181;label=41;break;
 case 61: 
 var $210=(($200+4)|0);
 HEAP32[(($182)>>2)]=$210;
 var $141=$159;var $140=$181;label=41;break;
 case 62: 
 var $212=(($65+12)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($65+16)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=($213|0)==($215|0);
 if($216){label=63;break;}else{label=64;break;}
 case 63: 
 var $218=$65;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+36)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($65);
 var $_05=$222;label=65;break;
 case 64: 
 var $224=HEAP32[(($213)>>2)];
 var $_05=$224;label=65;break;
 case 65: 
 var $_05;
 var $225=HEAP32[(($38)>>2)];
 var $226=(($225+28)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=FUNCTION_TABLE[$227]($30,$_05);
 var $229=HEAP32[(($_06_ph26)>>2)];
 var $230=HEAP32[(($38)>>2)];
 var $231=(($230+28)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=FUNCTION_TABLE[$232]($30,$229);
 var $234=($228|0)==($233|0);
 if($234){label=66;break;}else{label=70;break;}
 case 66: 
 var $236=HEAP32[(($212)>>2)];
 var $237=HEAP32[(($214)>>2)];
 var $238=($236|0)==($237|0);
 if($238){label=67;break;}else{label=68;break;}
 case 67: 
 var $240=$65;
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241+40)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=FUNCTION_TABLE[$243]($65);
 label=69;break;
 case 68: 
 var $246=(($236+4)|0);
 HEAP32[(($212)>>2)]=$246;
 label=69;break;
 case 69: 
 var $247=(($_06_ph26+4)|0);
 var $_06_ph_be=$247;label=35;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $44=4;label=10;break;
 case 71: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $248=$_pre;label=72;break;
 case 72: 
 var $248;
 var $249=(($__b)|0);
 var $250=($248|0)==0;
 if($250){label=78;break;}else{label=73;break;}
 case 73: 
 var $252=(($248+12)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($248+16)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=($253|0)==($255|0);
 if($256){label=74;break;}else{label=75;break;}
 case 74: 
 var $258=$248;
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+36)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=FUNCTION_TABLE[$261]($248);
 var $_03=$262;label=76;break;
 case 75: 
 var $264=HEAP32[(($253)>>2)];
 var $_03=$264;label=76;break;
 case 76: 
 var $_03;
 var $265=($_03|0)==-1;
 if($265){label=77;break;}else{label=78;break;}
 case 77: 
 HEAP32[(($249)>>2)]=0;
 label=78;break;
 case 78: 
 var $267=HEAP32[(($249)>>2)];
 var $268=($267|0)==0;
 var $269=(($__e)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($270|0)==0;
 if($271){label=84;break;}else{label=79;break;}
 case 79: 
 var $273=(($270+12)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($270+16)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($274|0)==($276|0);
 if($277){label=80;break;}else{label=81;break;}
 case 80: 
 var $279=$270;
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+36)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=FUNCTION_TABLE[$282]($270);
 var $_0=$283;label=82;break;
 case 81: 
 var $285=HEAP32[(($274)>>2)];
 var $_0=$285;label=82;break;
 case 82: 
 var $_0;
 var $286=($_0|0)==-1;
 if($286){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($269)>>2)]=0;
 label=84;break;
 case 84: 
 if($268){label=86;break;}else{label=87;break;}
 case 85: 
 var $288=($270|0)==0;
 var $tmp=$268^$288;
 if($tmp){label=87;break;}else{label=86;break;}
 case 86: 
 var $290=HEAP32[(($__err)>>2)];
 var $291=$290|2;
 HEAP32[(($__err)>>2)]=$291;
 label=87;break;
 case 87: 
 var $293=(($agg_result)|0);
 HEAP32[(($293)>>2)]=$267;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,4400,4432);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $26=$21;var $25=$21;label=4;break;
 case 3: 
 var $23=(($8+4)|0);
 var $24=(($8+4)|0);
 var $26=$24;var $25=$23;label=4;break;
 case 4: 
 var $25;
 var $26;
 var $27=($16&255);
 var $28=$27&1;
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=5;break;}
 case 5: 
 var $31=(($8+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $35=$32;label=7;break;
 case 6: 
 var $34=$27>>>1;
 var $35=$34;label=7;break;
 case 7: 
 var $35;
 var $36=(($26+($35<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$25,$36);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17328)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17328;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $12=HEAP32[((17332)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=HEAP32[(($3)>>2)];
 var $30=(($29)|0);
 var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
 var $32=(($__e)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $35=(($this+8)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $38=HEAP32[(($37)>>2)];
 var $39=FUNCTION_TABLE[$38]($35);
 var $40=(($1)|0);
 HEAP32[(($40)>>2)]=$33;
 var $41=(($39+168)|0);
 var $42=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$39,$41,$28,$__err,0);
 var $43=$42;
 var $44=$39;
 var $45=((($43)-($44))|0);
 var $46=($45|0)<168;
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 var $48=(($__tm+24)|0);
 var $49=(((($45|0))/(12))&-1);
 var $50=(((($49|0))%(7))&-1);
 HEAP32[(($48)>>2)]=$50;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $51=(($__b)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($agg_result)|0);
 HEAP32[(($53)>>2)]=$52;
 STACKTOP=sp;return;
 case 10: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17328)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17328;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $12=HEAP32[((17332)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=HEAP32[(($3)>>2)];
 var $30=(($29)|0);
 var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
 var $32=(($__e)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $35=(($this+8)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($35);
 var $41=(($1)|0);
 HEAP32[(($41)>>2)]=$33;
 var $42=(($40+288)|0);
 var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$40,$42,$28,$__err,0);
 var $44=$43;
 var $45=$40;
 var $46=((($44)-($45))|0);
 var $47=($46|0)<288;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=(($__tm+16)|0);
 var $50=(((($46|0))/(12))&-1);
 var $51=(((($50|0))%(12))&-1);
 HEAP32[(($49)>>2)]=$51;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $52=(($__b)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$53;
 STACKTOP=sp;return;
 case 10: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((17328)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i)|0);
 HEAP32[(($9)>>2)]=17328;
 var $10=(($__p_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(28);
 var $11=(($__p_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$5,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $12=HEAP32[((17332)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=HEAP32[(($3)>>2)];
 var $30=(($29)|0);
 var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
 var $32=(($__tm+20)|0);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($1)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$28,4);
 var $38=HEAP32[(($__err)>>2)];
 var $39=$38&4;
 var $40=($39|0)==0;
 if($40){label=8;break;}else{label=12;break;}
 case 8: 
 var $42=($37|0)<69;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 var $44=((($37)+(2000))|0);
 var $__t_0_i=$44;label=11;break;
 case 10: 
 var $_off_i=((($37)-(69))|0);
 var $46=($_off_i>>>0)<31;
 var $47=((($37)+(1900))|0);
 var $__i=($46?$47:$37);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $49=((($__t_0_i)-(1900))|0);
 HEAP32[(($32)>>2)]=$49;
 label=12;break;
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $50=(($__b)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($agg_result)|0);
 HEAP32[(($52)>>2)]=$51;
 STACKTOP=sp;return;
 case 13: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=HEAP32[(($3)>>2)];
 var $56=(($55)|0);
 var $57=__ZNSt3__114__shared_count16__release_sharedEv($56);
 ___resumeException($54$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $44=HEAP32[((17328)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $47=(($__p_i_i_i)|0);
 HEAP32[(($47)>>2)]=17328;
 var $48=(($__p_i_i_i+4)|0);
 HEAP32[(($48)>>2)]=(28);
 var $49=(($__p_i_i_i+8)|0);
 HEAP32[(($49)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$43,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $50=HEAP32[((17332)>>2)];
 var $51=((($50)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $52=(($42+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($42+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$53;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=$58>>2;
 var $60=($59>>>0)>($51>>>0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=(($55+($51<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 __ZNSt8bad_castC2Ev($65);
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $66=$62;
 var $67=HEAP32[(($41)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 var $70=(($__fmt<<24)>>24);
 switch(($70|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($41)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
 case 9: 
 var $77=(($__e)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$13;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $80=(($this+8)|0);
 var $81=$80;
 var $82=HEAP32[(($81)>>2)];
 var $83=HEAP32[(($82)>>2)];
 var $84=FUNCTION_TABLE[$83]($80);
 var $85=(($13)|0);
 HEAP32[(($85)>>2)]=$78;
 var $86=(($84+168)|0);
 var $87=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$84,$86,$66,$__err,0);
 var $88=$87;
 var $89=$84;
 var $90=((($88)-($89))|0);
 var $91=($90|0)<168;
 if($91){label=10;break;}else{label=70;break;}
 case 10: 
 var $93=(($__tm+24)|0);
 var $94=(((($90|0))/(12))&-1);
 var $95=(((($94|0))%(7))&-1);
 HEAP32[(($93)>>2)]=$95;
 label=70;break;
 case 11: 
 var $97=(($__e)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$12;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $100=(($this+8)|0);
 var $101=$100;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($100);
 var $106=(($12)|0);
 HEAP32[(($106)>>2)]=$98;
 var $107=(($105+288)|0);
 var $108=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$105,$107,$66,$__err,0);
 var $109=$108;
 var $110=$105;
 var $111=((($109)-($110))|0);
 var $112=($111|0)<288;
 if($112){label=12;break;}else{label=70;break;}
 case 12: 
 var $114=(($__tm+16)|0);
 var $115=(((($111|0))/(12))&-1);
 var $116=(((($115|0))%(12))&-1);
 HEAP32[(($114)>>2)]=$116;
 label=70;break;
 case 13: 
 var $118=(($this+8)|0);
 var $119=$118;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+12)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=FUNCTION_TABLE[$122]($118);
 var $124=(($__b)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($16)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=(($__e)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($17)|0);
 HEAP32[(($129)>>2)]=$128;
 var $130=$123;
 var $131=HEAP8[($130)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=15;break;}else{label=14;break;}
 case 14: 
 var $135=(($123+8)|0);
 var $136=HEAP32[(($135)>>2)];
 var $141=$136;var $140=$136;label=16;break;
 case 15: 
 var $138=(($123+4)|0);
 var $139=(($123+4)|0);
 var $141=$139;var $140=$138;label=16;break;
 case 16: 
 var $140;
 var $141;
 var $142=($131&255);
 var $143=$142&1;
 var $144=($143|0)==0;
 if($144){label=18;break;}else{label=17;break;}
 case 17: 
 var $146=(($123+4)|0);
 var $147=HEAP32[(($146)>>2)];
 var $150=$147;label=19;break;
 case 18: 
 var $149=$142>>>1;
 var $150=$149;label=19;break;
 case 19: 
 var $150;
 var $151=(($141+($150<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$140,$151);
 var $152=(($15)|0);
 var $153=HEAP32[(($152)>>2)];
 HEAP32[(($124)>>2)]=$153;
 label=70;break;
 case 20: 
 var $155=(($__tm+12)|0);
 var $156=(($__e)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$11;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $159=(($11)|0);
 HEAP32[(($159)>>2)]=$157;
 var $160=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$66,2);
 var $161=HEAP32[(($__err)>>2)];
 var $162=$161&4;
 var $163=($162|0)==0;
 if($163){label=21;break;}else{label=23;break;}
 case 21: 
 var $_off_i=((($160)-(1))|0);
 var $165=($_off_i>>>0)<31;
 if($165){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($155)>>2)]=$160;
 label=70;break;
 case 23: 
 var $168=$161|4;
 HEAP32[(($__err)>>2)]=$168;
 label=70;break;
 case 24: 
 var $170=(($__b)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($19)|0);
 HEAP32[(($172)>>2)]=$171;
 var $173=(($__e)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($20)|0);
 HEAP32[(($175)>>2)]=$174;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$19,$20,$__iob,$__err,$__tm,4368,4400);
 var $176=(($18)|0);
 var $177=HEAP32[(($176)>>2)];
 HEAP32[(($170)>>2)]=$177;
 label=70;break;
 case 25: 
 var $179=(($__b)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($22)|0);
 HEAP32[(($181)>>2)]=$180;
 var $182=(($__e)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($23)|0);
 HEAP32[(($184)>>2)]=$183;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$22,$23,$__iob,$__err,$__tm,4232,4264);
 var $185=(($21)|0);
 var $186=HEAP32[(($185)>>2)];
 HEAP32[(($179)>>2)]=$186;
 label=70;break;
 case 26: 
 var $188=(($__e)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$10;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $191=(($10)|0);
 HEAP32[(($191)>>2)]=$189;
 var $192=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$66,2);
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193&4;
 var $195=($194|0)==0;
 var $196=($192|0)<24;
 var $or_cond_i=$195&$196;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $198=(($__tm+8)|0);
 HEAP32[(($198)>>2)]=$192;
 label=70;break;
 case 28: 
 var $200=$193|4;
 HEAP32[(($__err)>>2)]=$200;
 label=70;break;
 case 29: 
 var $202=(($__tm+8)|0);
 var $203=(($__e)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$9;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $206=(($9)|0);
 HEAP32[(($206)>>2)]=$204;
 var $207=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$66,2);
 var $208=HEAP32[(($__err)>>2)];
 var $209=$208&4;
 var $210=($209|0)==0;
 if($210){label=30;break;}else{label=32;break;}
 case 30: 
 var $_off_i11=((($207)-(1))|0);
 var $212=($_off_i11>>>0)<12;
 if($212){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($202)>>2)]=$207;
 label=70;break;
 case 32: 
 var $215=$208|4;
 HEAP32[(($__err)>>2)]=$215;
 label=70;break;
 case 33: 
 var $217=(($__e)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$8;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $220=(($8)|0);
 HEAP32[(($220)>>2)]=$218;
 var $221=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$66,3);
 var $222=HEAP32[(($__err)>>2)];
 var $223=$222&4;
 var $224=($223|0)==0;
 var $225=($221|0)<366;
 var $or_cond_i14=$224&$225;
 if($or_cond_i14){label=34;break;}else{label=35;break;}
 case 34: 
 var $227=(($__tm+28)|0);
 HEAP32[(($227)>>2)]=$221;
 label=70;break;
 case 35: 
 var $229=$222|4;
 HEAP32[(($__err)>>2)]=$229;
 label=70;break;
 case 36: 
 var $231=(($__e)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=$7;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $234=(($7)|0);
 HEAP32[(($234)>>2)]=$232;
 var $235=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$66,2);
 var $236=HEAP32[(($__err)>>2)];
 var $237=$236&4;
 var $238=($237|0)==0;
 var $239=($235|0)<13;
 var $or_cond_i17=$238&$239;
 if($or_cond_i17){label=37;break;}else{label=38;break;}
 case 37: 
 var $241=(($__tm+16)|0);
 var $242=((($235)-(1))|0);
 HEAP32[(($241)>>2)]=$242;
 label=70;break;
 case 38: 
 var $244=$236|4;
 HEAP32[(($__err)>>2)]=$244;
 label=70;break;
 case 39: 
 var $246=(($__e)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=$6;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $249=(($6)|0);
 HEAP32[(($249)>>2)]=$247;
 var $250=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$66,2);
 var $251=HEAP32[(($__err)>>2)];
 var $252=$251&4;
 var $253=($252|0)==0;
 var $254=($250|0)<60;
 var $or_cond_i20=$253&$254;
 if($or_cond_i20){label=40;break;}else{label=41;break;}
 case 40: 
 var $256=(($__tm+4)|0);
 HEAP32[(($256)>>2)]=$250;
 label=70;break;
 case 41: 
 var $258=$251|4;
 HEAP32[(($__err)>>2)]=$258;
 label=70;break;
 case 42: 
 var $260=(($__e)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($24)|0);
 HEAP32[(($262)>>2)]=$261;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$24,$__err,$66);
 label=70;break;
 case 43: 
 var $264=(($__tm+8)|0);
 var $265=(($__e)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(($25)|0);
 HEAP32[(($267)>>2)]=$266;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$264,$__b,$25,$__err,$66);
 label=70;break;
 case 44: 
 var $269=(($__b)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($27)|0);
 HEAP32[(($271)>>2)]=$270;
 var $272=(($__e)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($28)|0);
 HEAP32[(($274)>>2)]=$273;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($26,$this,$27,$28,$__iob,$__err,$__tm,4320,4364);
 var $275=(($26)|0);
 var $276=HEAP32[(($275)>>2)];
 HEAP32[(($269)>>2)]=$276;
 label=70;break;
 case 45: 
 var $278=(($__b)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($30)|0);
 HEAP32[(($280)>>2)]=$279;
 var $281=(($__e)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=(($31)|0);
 HEAP32[(($283)>>2)]=$282;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($29,$this,$30,$31,$__iob,$__err,$__tm,4296,4316);
 var $284=(($29)|0);
 var $285=HEAP32[(($284)>>2)];
 HEAP32[(($278)>>2)]=$285;
 label=70;break;
 case 46: 
 var $287=(($__e)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$5;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $290=(($5)|0);
 HEAP32[(($290)>>2)]=$288;
 var $291=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$66,2);
 var $292=HEAP32[(($__err)>>2)];
 var $293=$292&4;
 var $294=($293|0)==0;
 var $295=($291|0)<61;
 var $or_cond_i23=$294&$295;
 if($or_cond_i23){label=47;break;}else{label=48;break;}
 case 47: 
 var $297=(($__tm)|0);
 HEAP32[(($297)>>2)]=$291;
 label=70;break;
 case 48: 
 var $299=$292|4;
 HEAP32[(($__err)>>2)]=$299;
 label=70;break;
 case 49: 
 var $301=(($__b)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($33)|0);
 HEAP32[(($303)>>2)]=$302;
 var $304=(($__e)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($34)|0);
 HEAP32[(($306)>>2)]=$305;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($32,$this,$33,$34,$__iob,$__err,$__tm,4264,4296);
 var $307=(($32)|0);
 var $308=HEAP32[(($307)>>2)];
 HEAP32[(($301)>>2)]=$308;
 label=70;break;
 case 50: 
 var $310=(($__e)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=$4;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $313=(($4)|0);
 HEAP32[(($313)>>2)]=$311;
 var $314=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$66,1);
 var $315=HEAP32[(($__err)>>2)];
 var $316=$315&4;
 var $317=($316|0)==0;
 var $318=($314|0)<7;
 var $or_cond_i26=$317&$318;
 if($or_cond_i26){label=51;break;}else{label=52;break;}
 case 51: 
 var $320=(($__tm+24)|0);
 HEAP32[(($320)>>2)]=$314;
 label=70;break;
 case 52: 
 var $322=$315|4;
 HEAP32[(($__err)>>2)]=$322;
 label=70;break;
 case 53: 
 var $324=$this;
 var $325=HEAP32[(($324)>>2)];
 var $326=(($325+20)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($__b)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($35)|0);
 HEAP32[(($330)>>2)]=$329;
 var $331=(($__e)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=(($36)|0);
 HEAP32[(($333)>>2)]=$332;
 FUNCTION_TABLE[$327]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $335=(($this+8)|0);
 var $336=$335;
 var $337=HEAP32[(($336)>>2)];
 var $338=(($337+24)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=FUNCTION_TABLE[$339]($335);
 var $341=(($__b)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($38)|0);
 HEAP32[(($343)>>2)]=$342;
 var $344=(($__e)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=(($39)|0);
 HEAP32[(($346)>>2)]=$345;
 var $347=$340;
 var $348=HEAP8[($347)];
 var $349=$348&1;
 var $350=(($349<<24)>>24)==0;
 if($350){label=56;break;}else{label=55;break;}
 case 55: 
 var $352=(($340+8)|0);
 var $353=HEAP32[(($352)>>2)];
 var $358=$353;var $357=$353;label=57;break;
 case 56: 
 var $355=(($340+4)|0);
 var $356=(($340+4)|0);
 var $358=$356;var $357=$355;label=57;break;
 case 57: 
 var $357;
 var $358;
 var $359=($348&255);
 var $360=$359&1;
 var $361=($360|0)==0;
 if($361){label=59;break;}else{label=58;break;}
 case 58: 
 var $363=(($340+4)|0);
 var $364=HEAP32[(($363)>>2)];
 var $367=$364;label=60;break;
 case 59: 
 var $366=$359>>>1;
 var $367=$366;label=60;break;
 case 60: 
 var $367;
 var $368=(($358+($367<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$357,$368);
 var $369=(($37)|0);
 var $370=HEAP32[(($369)>>2)];
 HEAP32[(($341)>>2)]=$370;
 label=70;break;
 case 61: 
 var $372=(($__tm+20)|0);
 var $373=(($__e)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=$3;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $376=(($3)|0);
 HEAP32[(($376)>>2)]=$374;
 var $377=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$66,4);
 var $378=HEAP32[(($__err)>>2)];
 var $379=$378&4;
 var $380=($379|0)==0;
 if($380){label=62;break;}else{label=70;break;}
 case 62: 
 var $382=($377|0)<69;
 if($382){label=63;break;}else{label=64;break;}
 case 63: 
 var $384=((($377)+(2000))|0);
 var $__t_0_i=$384;label=65;break;
 case 64: 
 var $_off_i29=((($377)-(69))|0);
 var $386=($_off_i29>>>0)<31;
 var $387=((($377)+(1900))|0);
 var $__i=($386?$387:$377);
 var $__t_0_i=$__i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $389=((($__t_0_i)-(1900))|0);
 HEAP32[(($372)>>2)]=$389;
 label=70;break;
 case 66: 
 var $391=(($__e)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$2;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $394=(($2)|0);
 HEAP32[(($394)>>2)]=$392;
 var $395=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$66,4);
 var $396=HEAP32[(($__err)>>2)];
 var $397=$396&4;
 var $398=($397|0)==0;
 if($398){label=67;break;}else{label=70;break;}
 case 67: 
 var $400=(($__tm+20)|0);
 var $401=((($395)-(1900))|0);
 HEAP32[(($400)>>2)]=$401;
 label=70;break;
 case 68: 
 var $403=(($__e)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=(($40)|0);
 HEAP32[(($405)>>2)]=$404;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$40,$__err,$66);
 label=70;break;
 case 69: 
 var $407=HEAP32[(($__err)>>2)];
 var $408=$407|4;
 HEAP32[(($__err)>>2)]=$408;
 label=70;break;
 case 70: 
 var $409=(($__b)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($agg_result)|0);
 HEAP32[(($411)>>2)]=$410;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=$__ct;
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $22=1;label=9;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$4;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($4);
 var $_05=$17;label=6;break;
 case 5: 
 var $19=HEAP32[(($8)>>2)];
 var $_05=$19;label=6;break;
 case 6: 
 var $_05;
 var $20=($_05|0)==-1;
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $22=$phitmp;label=9;break;
 case 8: 
 HEAP32[(($1)>>2)]=0;
 var $22=1;label=9;break;
 case 9: 
 var $22;
 var $23=HEAP32[(($2)>>2)];
 var $24=($23|0)==0;
 if($24){label=15;break;}else{label=10;break;}
 case 10: 
 var $26=(($23+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($23+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($27|0)==($29|0);
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 var $32=$23;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($23);
 var $_04=$36;label=13;break;
 case 12: 
 var $38=HEAP32[(($27)>>2)];
 var $_04=$38;label=13;break;
 case 13: 
 var $_04;
 var $39=($_04|0)==-1;
 if($39){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($2)>>2)]=0;
 label=15;break;
 case 15: 
 if($22){var $80=0;var $79=1;label=24;break;}else{var $45=0;var $44=1;label=17;break;}
 case 16: 
 var $41=($23|0)==0;
 var $42=$22^$41;
 if($42){var $45=$23;var $44=$41;label=17;break;}else{var $80=$23;var $79=$41;label=24;break;}
 case 17: 
 var $44;
 var $45;
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($46+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=$46;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($46);
 var $_03=$57;label=20;break;
 case 19: 
 var $59=HEAP32[(($48)>>2)];
 var $_03=$59;label=20;break;
 case 20: 
 var $_03;
 var $60=HEAP32[(($3)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__ct,8192,$_03);
 if($63){label=21;break;}else{var $80=$45;var $79=$44;label=24;break;}
 case 21: 
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($65+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=$65;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+40)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($65);
 label=2;break;
 case 23: 
 var $78=(($67+4)|0);
 HEAP32[(($66)>>2)]=$78;
 label=2;break;
 case 24: 
 var $79;
 var $80;
 var $81=HEAP32[(($1)>>2)];
 var $82=($81|0)==0;
 if($82){var $99=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $84=(($81+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($81+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=26;break;}else{label=27;break;}
 case 26: 
 var $90=$81;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($81);
 var $_01=$94;label=28;break;
 case 27: 
 var $96=HEAP32[(($85)>>2)];
 var $_01=$96;label=28;break;
 case 28: 
 var $_01;
 var $97=($_01|0)==-1;
 if($97){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre8=HEAP32[(($1)>>2)];
 var $phitmp9=($_pre8|0)==0;
 var $99=$phitmp9;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $99=1;label=31;break;
 case 31: 
 var $99;
 if($79){label=37;break;}else{label=32;break;}
 case 32: 
 var $101=(($80+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($80+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=33;break;}else{label=34;break;}
 case 33: 
 var $107=$80;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+36)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=FUNCTION_TABLE[$110]($80);
 var $_0=$111;label=35;break;
 case 34: 
 var $113=HEAP32[(($102)>>2)];
 var $_0=$113;label=35;break;
 case 35: 
 var $_0;
 var $114=($_0|0)==-1;
 if($114){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($2)>>2)]=0;
 label=37;break;
 case 37: 
 if($99){label=39;break;}else{label=40;break;}
 case 38: 
 var $116=($80|0)==0;
 var $tmp6=$99^$116;
 if($tmp6){label=40;break;}else{label=39;break;}
 case 39: 
 var $118=HEAP32[(($__err)>>2)];
 var $119=$118|2;
 HEAP32[(($__err)>>2)]=$119;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10&1;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$10>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($7+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_05=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_05=$17;label=5;break;
 case 5: 
 var $_05;
 var $18=($_05|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_04=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_04=$37;label=12;break;
 case 12: 
 var $_04;
 var $38=($_04|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $46=0;var $45=1;label=17;break;}
 case 15: 
 var $40=($22|0)==0;
 var $tmp=$20^$40;
 if($tmp){var $46=$22;var $45=$40;label=17;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__err)>>2)];
 var $43=$42|6;
 HEAP32[(($__err)>>2)]=$43;
 label=41;break;
 case 17: 
 var $45;
 var $46;
 var $47=HEAP32[(($1)>>2)];
 var $48=(($47+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($47+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$47;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($47);
 var $_03=$58;label=20;break;
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_03=$60;label=20;break;
 case 20: 
 var $_03;
 var $61=$__ct;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+52)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($__ct,$_03,0);
 var $66=(($65<<24)>>24)==37;
 if($66){label=22;break;}else{label=21;break;}
 case 21: 
 var $68=HEAP32[(($__err)>>2)];
 var $69=$68|4;
 HEAP32[(($__err)>>2)]=$69;
 label=41;break;
 case 22: 
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($71+16)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($73|0)==($75|0);
 if($76){label=23;break;}else{label=24;break;}
 case 23: 
 var $78=$71;
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+40)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=FUNCTION_TABLE[$81]($71);
 label=25;break;
 case 24: 
 var $84=(($73+4)|0);
 HEAP32[(($72)>>2)]=$84;
 label=25;break;
 case 25: 
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $103=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 var $94=$85;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($85);
 var $_01=$98;label=29;break;
 case 28: 
 var $100=HEAP32[(($89)>>2)];
 var $_01=$100;label=29;break;
 case 29: 
 var $_01;
 var $101=($_01|0)==-1;
 if($101){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre7=HEAP32[(($1)>>2)];
 var $phitmp8=($_pre7|0)==0;
 var $103=$phitmp8;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $103=1;label=32;break;
 case 32: 
 var $103;
 if($45){label=38;break;}else{label=33;break;}
 case 33: 
 var $105=(($46+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($46+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=34;break;}else{label=35;break;}
 case 34: 
 var $111=$46;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=FUNCTION_TABLE[$114]($46);
 var $_0=$115;label=36;break;
 case 35: 
 var $117=HEAP32[(($106)>>2)];
 var $_0=$117;label=36;break;
 case 36: 
 var $_0;
 var $118=($_0|0)==-1;
 if($118){label=37;break;}else{label=39;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 label=38;break;
 case 38: 
 if($103){label=40;break;}else{label=41;break;}
 case 39: 
 var $120=($46|0)==0;
 var $tmp6=$103^$120;
 if($tmp6){label=41;break;}else{label=40;break;}
 case 40: 
 var $122=HEAP32[(($__err)>>2)];
 var $123=$122|2;
 HEAP32[(($__err)>>2)]=$123;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_011=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_011=$17;label=5;break;
 case 5: 
 var $_011;
 var $18=($_011|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_010=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_010=$37;label=12;break;
 case 12: 
 var $_010;
 var $38=($_010|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $45=0;label=17;break;}
 case 15: 
 var $40=($22|0)==0;
 var $tmp=$20^$40;
 if($tmp){var $45=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__err)>>2)];
 var $43=$42|6;
 HEAP32[(($__err)>>2)]=$43;
 var $_04=0;label=63;break;
 case 17: 
 var $45;
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($46+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=$46;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($46);
 var $_09=$57;label=20;break;
 case 19: 
 var $59=HEAP32[(($48)>>2)];
 var $_09=$59;label=20;break;
 case 20: 
 var $_09;
 var $60=$__ct;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=FUNCTION_TABLE[$63]($__ct,2048,$_09);
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $66=HEAP32[(($__err)>>2)];
 var $67=$66|4;
 HEAP32[(($__err)>>2)]=$67;
 var $_04=0;label=63;break;
 case 22: 
 var $69=$__ct;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+52)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($__ct,$_09,0);
 var $74=(($73<<24)>>24);
 var $75=HEAP32[(($1)>>2)];
 var $76=(($75+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($75+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=23;break;}else{label=24;break;}
 case 23: 
 var $82=$75;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+40)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=FUNCTION_TABLE[$85]($75);
 var $__r_0_in=$74;var $_0_in=$__n;var $89=$45;label=25;break;
 case 24: 
 var $88=(($77+4)|0);
 HEAP32[(($76)>>2)]=$88;
 var $__r_0_in=$74;var $_0_in=$__n;var $89=$45;label=25;break;
 case 25: 
 var $89;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $90=HEAP32[(($1)>>2)];
 var $91=($90|0)==0;
 if($91){var $108=0;label=32;break;}else{label=26;break;}
 case 26: 
 var $93=(($90+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($90+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=27;break;}else{label=28;break;}
 case 27: 
 var $99=$90;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($90);
 var $_07=$103;label=29;break;
 case 28: 
 var $105=HEAP32[(($94)>>2)];
 var $_07=$105;label=29;break;
 case 29: 
 var $_07;
 var $106=($_07|0)==-1;
 if($106){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre18=HEAP32[(($1)>>2)];
 var $108=$_pre18;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $108=0;label=32;break;
 case 32: 
 var $108;
 var $109=($108|0)==0;
 var $110=($89|0)==0;
 if($110){var $129=$108;var $128=0;label=39;break;}else{label=33;break;}
 case 33: 
 var $112=(($89+12)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($89+16)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($113|0)==($115|0);
 if($116){label=34;break;}else{label=35;break;}
 case 34: 
 var $118=$89;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+36)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=FUNCTION_TABLE[$121]($89);
 var $_06=$122;label=36;break;
 case 35: 
 var $124=HEAP32[(($113)>>2)];
 var $_06=$124;label=36;break;
 case 36: 
 var $_06;
 var $125=($_06|0)==-1;
 if($125){label=37;break;}else{var $127=$89;label=38;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 var $127=0;label=38;break;
 case 38: 
 var $127;
 var $_pr=HEAP32[(($1)>>2)];
 var $129=$_pr;var $128=$127;label=39;break;
 case 39: 
 var $128;
 var $129;
 var $130=($128|0)==0;
 var $131=$109^$130;
 var $132=($_0|0)>0;
 var $_=$131&$132;
 if($_){label=40;break;}else{label=47;break;}
 case 40: 
 var $134=(($129+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($129+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=41;break;}else{label=42;break;}
 case 41: 
 var $140=$129;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=FUNCTION_TABLE[$143]($129);
 var $_05=$144;label=43;break;
 case 42: 
 var $146=HEAP32[(($135)>>2)];
 var $_05=$146;label=43;break;
 case 43: 
 var $_05;
 var $147=HEAP32[(($60)>>2)];
 var $148=(($147+12)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=FUNCTION_TABLE[$149]($__ct,2048,$_05);
 if($150){label=44;break;}else{var $_04=$__r_0;label=63;break;}
 case 44: 
 var $152=((($__r_0)*(10))&-1);
 var $153=HEAP32[(($69)>>2)];
 var $154=(($153+52)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=FUNCTION_TABLE[$155]($__ct,$_05,0);
 var $157=(($156<<24)>>24);
 var $158=((($157)+($152))|0);
 var $159=HEAP32[(($1)>>2)];
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=45;break;}else{label=46;break;}
 case 45: 
 var $166=$159;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+40)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($159);
 var $__r_0_in=$158;var $_0_in=$_0;var $89=$128;label=25;break;
 case 46: 
 var $172=(($161+4)|0);
 HEAP32[(($160)>>2)]=$172;
 var $__r_0_in=$158;var $_0_in=$_0;var $89=$128;label=25;break;
 case 47: 
 var $174=($129|0)==0;
 if($174){var $191=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $176=(($129+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($129+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=49;break;}else{label=50;break;}
 case 49: 
 var $182=$129;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=FUNCTION_TABLE[$185]($129);
 var $_02=$186;label=51;break;
 case 50: 
 var $188=HEAP32[(($177)>>2)];
 var $_02=$188;label=51;break;
 case 51: 
 var $_02;
 var $189=($_02|0)==-1;
 if($189){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre19=HEAP32[(($1)>>2)];
 var $phitmp20=($_pre19|0)==0;
 var $191=$phitmp20;label=54;break;
 case 53: 
 HEAP32[(($1)>>2)]=0;
 var $191=1;label=54;break;
 case 54: 
 var $191;
 if($130){label=60;break;}else{label=55;break;}
 case 55: 
 var $193=(($128+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($128+16)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($194|0)==($196|0);
 if($197){label=56;break;}else{label=57;break;}
 case 56: 
 var $199=$128;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+36)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=FUNCTION_TABLE[$202]($128);
 var $_01=$203;label=58;break;
 case 57: 
 var $205=HEAP32[(($194)>>2)];
 var $_01=$205;label=58;break;
 case 58: 
 var $_01;
 var $206=($_01|0)==-1;
 if($206){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($21)>>2)]=0;
 label=60;break;
 case 60: 
 if($191){label=62;break;}else{var $_04=$__r_0;label=63;break;}
 case 61: 
 var $208=($128|0)==0;
 var $tmp13=$191^$208;
 if($tmp13){var $_04=$__r_0;label=63;break;}else{label=62;break;}
 case 62: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 var $_04=$__r_0;label=63;break;
 case 63: 
 var $_04;
 STACKTOP=sp;return $_04;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(18072)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(18072);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$10;

 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;

 var $eh_lpad_body_i$1=$13$1;var $eh_lpad_body_i$0=$13$0;label=9;break;
 case 6: 
 var $15=HEAP32[((15792)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $eh_lpad_body_i$1=$20$1;var $eh_lpad_body_i$0=$20$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $21=$eh_lpad_body_i$0;
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
 case 10: 
 var $22=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($22);
 __ZdlPv($1);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(18072)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(18072);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i$1=$12$1;var $eh_lpad_body_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((15792)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i$1=$19$1;var $eh_lpad_body_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $20=$eh_lpad_body_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $4=(($fmt_i)|0);
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $14=(($__s)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)==0;
 if($16){var $_sroa_0_0_lcssa=$15;label=10;break;}else{var $_sroa_0_06=$15;var $_057=$3;label=4;break;}
 case 4: 
 var $_057;
 var $_sroa_0_06;
 var $17=HEAP8[($_057)];
 var $18=($_sroa_0_06|0)==0;
 if($18){var $_sroa_0_1=0;label=9;break;}else{label=5;break;}
 case 5: 
 var $20=(($_sroa_0_06+24)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($_sroa_0_06+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($21|0)==($23|0);
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$_sroa_0_06;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+52)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($17&255);
 var $31=FUNCTION_TABLE[$29]($_sroa_0_06,$30);
 var $_0=$31;label=8;break;
 case 7: 
 var $33=(($21+1)|0);
 HEAP32[(($20)>>2)]=$33;
 HEAP8[($21)]=$17;
 var $34=($17&255);
 var $_0=$34;label=8;break;
 case 8: 
 var $_0;
 var $35=($_0|0)==-1;
 var $__sroa_0_0=($35?0:$_sroa_0_06);
 var $_sroa_0_1=$__sroa_0_0;label=9;break;
 case 9: 
 var $_sroa_0_1;
 var $36=(($_057+1)|0);
 var $37=($36|0)==($13|0);
 if($37){var $_sroa_0_0_lcssa=$_sroa_0_1;label=10;break;}else{var $_sroa_0_06=$_sroa_0_1;var $_057=$36;label=4;break;}
 case 10: 
 var $_sroa_0_0_lcssa;
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(18072)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(18072);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$10;

 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;

 var $eh_lpad_body_i$1=$13$1;var $eh_lpad_body_i$0=$13$0;label=9;break;
 case 6: 
 var $15=HEAP32[((15792)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $eh_lpad_body_i$1=$20$1;var $eh_lpad_body_i$0=$20$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $21=$eh_lpad_body_i$0;
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
 case 10: 
 var $22=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($22);
 __ZdlPv($1);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(18072)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(18072);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i$1=$12$1;var $eh_lpad_body_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((15792)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i$1=$19$1;var $eh_lpad_body_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $20=$eh_lpad_body_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(400);
 var $3=(($__nar)|0);
 var $4=(($__nar+400)|0);
 HEAP32[(($__ne)>>2)]=$4;
 var $5=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($5,$3,$__ne,$__tm,$__fmt,$__mod);
 var $6=HEAP32[(($__ne)>>2)];
 var $7=(($__s)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($3|0)==($6|0);
 if($9){var $_sroa_0_0_lcssa=$8;label=8;break;}else{var $_sroa_0_06=$8;var $_057=$3;label=2;break;}
 case 2: 
 var $_057;
 var $_sroa_0_06;
 var $10=HEAP32[(($_057)>>2)];
 var $11=($_sroa_0_06|0)==0;
 if($11){var $_sroa_0_1=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $13=(($_sroa_0_06+24)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($_sroa_0_06+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($14|0)==($16|0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$_sroa_0_06;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+52)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$22]($_sroa_0_06,$10);
 var $_0=$23;label=6;break;
 case 5: 
 var $25=(($14+4)|0);
 HEAP32[(($13)>>2)]=$25;
 HEAP32[(($14)>>2)]=$10;
 var $_0=$10;label=6;break;
 case 6: 
 var $_0;
 var $26=($_0|0)==-1;
 var $__sroa_0_0=($26?0:$_sroa_0_06);
 var $_sroa_0_1=$__sroa_0_0;label=7;break;
 case 7: 
 var $_sroa_0_1;
 var $27=(($_057+4)|0);
 var $28=($27|0)==($6|0);
 if($28){var $_sroa_0_0_lcssa=$_sroa_0_1;label=8;break;}else{var $_sroa_0_06=$_sroa_0_1;var $_057=$27;label=2;break;}
 case 8: 
 var $_sroa_0_0_lcssa;
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $mb=(sp)+(112);
 var $tmpcast=$mb;
 var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__nar)|0);
 var $2=(($fmt_i)|0);
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP8[($2)]=37;
 var $3=(($fmt_i+1)|0);
 HEAP8[($3)]=$__fmt;
 var $4=(($fmt_i+2)|0);
 HEAP8[($4)]=$__mod;
 var $5=(($fmt_i+3)|0);
 HEAP8[($5)]=0;
 var $6=(($__mod<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($3)]=$__mod;
 HEAP8[($4)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_strftime($1,100,$2,$__tm,$9);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $st$3$0=(($mb)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($mb+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 HEAP32[(($__nb)>>2)]=$1;
 var $11=HEAP32[(($__we)>>2)];
 var $12=$11;
 var $13=$__wb;
 var $14=((($12)-($13))|0);
 var $15=$14>>2;
 var $16=HEAP32[(($8)>>2)];
 var $17=_uselocale($16);
 var $18=(function() { try { __THREW__ = 0; return _mbsrtowcs($__wb,$__nb,$15,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $20=($17|0)==0;
 if($20){label=11;break;}else{label=5;break;}
 case 5: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 7: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=($17|0)==0;
 if($28){label=10;break;}else{label=8;break;}
 case 8: 
 var $30=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1,0); var $32$1 = tempRet0;
 var $33=$32$0;
 ___clang_call_terminate($33);
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($27$0)
 case 11: 
 var $34=($18|0)==-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 __ZNSt3__121__throw_runtime_errorEPKc(1672);
 throw "Reached an unreachable!";
 case 13: 
 var $37=(($__wb+($18<<2))|0);
 HEAP32[(($__we)>>2)]=$37;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $__atoms=(sp)+(160);
 var $__nbuf=(sp)+(176);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=512;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $10=HEAP32[((17336)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i)|0);
 HEAP32[(($13)>>2)]=17336;
 var $14=(($__p_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(28);
 var $15=(($__p_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$9,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $16=HEAP32[((17340)>>2)];
 var $17=((($16)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $32=$28;
 HEAP8[($__neg)]=0;
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($1)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$37,$__err,$__neg,$32,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($38){label=10;break;}else{label=34;break;}
 case 10: 
 var $41=(($__atoms)|0);
 var $42=$28;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+32)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($32,4216,4226,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $47=(($__nbuf)|0);
 var $48=HEAP32[(($__wn)>>2)];
 var $49=HEAP32[(($3)>>2)];
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=($52|0)>98;
 if($53){label=12;break;}else{var $__nc_0=$47;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $54=((($52)+(2))|0);
 var $55=_malloc($54);
 var $56=($55|0)==0;
 if($56){label=13;break;}else{var $__nc_0=$55;var $__h_sroa_0_1=$55;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1); var $58$1 = tempRet0;
 var $59=$58$0;
 var $60=$58$1;
 HEAP32[(($3)>>2)]=0;
 var $165=$2;var $_1413=$59;var $_115=$60;label=53;break;
 case 15: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1); var $62$1 = tempRet0;
 var $63=$62$0;
 var $64=$62$1;
 var $_02=$64;var $_03=$63;label=52;break;
 case 16: 
 var $__h_sroa_0_0;
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $eh_lpad_body$1=$66$1;var $eh_lpad_body$0=$66$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $67=$eh_lpad_body$0;
 var $68=$eh_lpad_body$1;
 var $69=($__h_sroa_0_0_lpad_body|0)==0;
 if($69){var $_02=$68;var $_03=$67;label=52;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $_02=$68;var $_03=$67;label=52;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $72=HEAP8[($__neg)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $76=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$76;label=21;break;
 case 21: 
 var $__nc_1;
 var $78=($49>>>0)<($48>>>0);
 if($78){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $79=(($__atoms+10)|0);
 var $80=$__atoms;
 var $__nc_29=$__nc_1;var $__w_010=$49;label=23;break;
 case 23: 
 var $__w_010;
 var $__nc_29;
 var $82=HEAP8[($__w_010)];
 var $_08=$41;label=25;break;
 case 24: 
 var $84=($88|0)==($79|0);
 if($84){var $_0_lcssa=$79;label=26;break;}else{var $_08=$88;label=25;break;}
 case 25: 
 var $_08;
 var $86=HEAP8[($_08)];
 var $87=(($86<<24)>>24)==(($82<<24)>>24);
 var $88=(($_08+1)|0);
 if($87){var $_0_lcssa=$_08;label=26;break;}else{label=24;break;}
 case 26: 
 var $_0_lcssa;
 var $89=$_0_lcssa;
 var $90=((($89)-($80))|0);
 var $91=((4216+$90)|0);
 var $92=HEAP8[($91)];
 HEAP8[($__nc_29)]=$92;
 var $93=(($__w_010+1)|0);
 var $94=(($__nc_29+1)|0);
 var $95=HEAP32[(($__wn)>>2)];
 var $96=($93>>>0)<($95>>>0);
 if($96){var $__nc_29=$94;var $__w_010=$93;label=23;break;}else{var $__nc_2_lcssa=$94;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $97=_sscanf($47,3200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $98=($97|0)==1;
 if($98){label=32;break;}else{label=28;break;}
 case 28: 
 var $100=___cxa_allocate_exception(8);
 var $101=$100;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($101,3080) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($100,11368,(50)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $104$0 = ___cxa_find_matching_catch(-1, -1); var $104$1 = tempRet0;
 ___cxa_free_exception($100);
 var $eh_lpad_body$1=$104$1;var $eh_lpad_body$0=$104$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $106=($__h_sroa_0_1|0)==0;
 if($106){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $108=(($__b)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($109|0)==0;
 if($110){var $125=0;label=39;break;}else{label=35;break;}
 case 35: 
 var $112=(($109+12)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($109+16)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($113|0)==($115|0);
 if($116){label=36;break;}else{var $125=$109;label=39;break;}
 case 36: 
 var $118=$109;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+36)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=15;break; }
 case 37: 
 var $123=($122|0)==-1;
 if($123){label=38;break;}else{var $125=$109;label=39;break;}
 case 38: 
 HEAP32[(($108)>>2)]=0;
 var $125=0;label=39;break;
 case 39: 
 var $125;
 var $126=($125|0)==0;
 var $127=HEAP32[(($33)>>2)];
 var $128=($127|0)==0;
 if($128){label=45;break;}else{label=40;break;}
 case 40: 
 var $130=(($127+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($127+16)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($131|0)==($133|0);
 if($134){label=42;break;}else{label=41;break;}
 case 41: 
 if($126){label=48;break;}else{label=47;break;}
 case 42: 
 var $136=$127;
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+36)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$139]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=15;break; }
 case 43: 
 var $141=($140|0)==-1;
 if($141){label=44;break;}else{label=46;break;}
 case 44: 
 HEAP32[(($33)>>2)]=0;
 label=45;break;
 case 45: 
 if($126){label=47;break;}else{label=48;break;}
 case 46: 
 var $143=($127|0)==0;
 var $tmp=$126^$143;
 if($tmp){label=48;break;}else{label=47;break;}
 case 47: 
 var $145=HEAP32[(($__err)>>2)];
 var $146=$145|2;
 HEAP32[(($__err)>>2)]=$146;
 label=48;break;
 case 48: 
 var $148=(($agg_result)|0);
 HEAP32[(($148)>>2)]=$125;
 var $149=HEAP32[(($7)>>2)];
 var $150=(($149)|0);
 var $151=__ZNSt3__114__shared_count16__release_sharedEv($150);
 var $152=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $153=($152|0)==0;
 if($153){label=51;break;}else{label=49;break;}
 case 49: 
 var $155=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1,0); var $157$1 = tempRet0;
 var $158=$157$0;
 ___clang_call_terminate($158);
 throw "Reached an unreachable!";
 case 51: 
 STACKTOP=sp;return;
 case 52: 
 var $_03;
 var $_02;
 var $160=HEAP32[(($7)>>2)];
 var $161=(($160)|0);
 var $162=__ZNSt3__114__shared_count16__release_sharedEv($161);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $163=($_pre|0)==0;
 if($163){var $_1414=$_03;var $_116=$_02;label=55;break;}else{var $165=$_pre;var $_1413=$_03;var $_115=$_02;label=53;break;}
 case 53: 
 var $_115;
 var $_1413;
 var $165;
 var $166=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1414=$_1413;var $_116=$_115;label=55;break; } else { label=54;break; }
 case 54: 
 var $168$0 = ___cxa_find_matching_catch(-1, -1,0); var $168$1 = tempRet0;
 var $169=$168$0;
 ___clang_call_terminate($169);
 throw "Reached an unreachable!";
 case 55: 
 var $_116;
 var $_1414;
 var $170$0=$_1414;
 var $170$1=0;
 var $171$0=$170$0;
 var $171$1=$_116;
 ___resumeException($171$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__do_nothingEPv($0){
 var label=0;


 return;
}



function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $__dp=(sp)+(408);
 var $__ts=(sp)+(416);
 var $__grp=(sp)+(424);
 var $0=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $tmpcast=$__pat;
 var $2=$__sym;
 var $3=$__psn;
 var $4=$__nsn;
 var $5=$__spaces;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=25;break; }
 case 2: 
 var $7=(($__gbuf+400)|0);
 var $8=(($__wb)|0);
 var $9=HEAP32[(($8)>>2)];
 HEAP32[(($__wn)>>2)]=$9;
 var $10=(($__b)|0);
 var $11=(($__e)|0);
 var $12=$__pat;
 var $13=(($__ct+8)|0);
 var $14=$__psn;
 var $15=$__nsn;
 var $16=(($15+1)|0);
 var $17=(($__nsn+4)|0);
 var $18=(($__nsn+8)|0);
 var $19=(($14+1)|0);
 var $20=(($__psn+4)|0);
 var $21=(($__psn+8)|0);
 var $22=$__flags&512;
 var $23=($22|0)!=0;
 var $24=$__sym;
 var $25=(($24+1)|0);
 var $26=(($__sym+4)|0);
 var $27=(($__sym+8)|0);
 var $28=$__spaces;
 var $29=(($28+1)|0);
 var $30=(($__spaces+4)|0);
 var $31=(($__spaces+8)|0);
 var $32=(($12+3)|0);
 var $33=(($__grp+4)|0);
 var $34=(($__wb+4)|0);
 var $38=$__we;var $free129266=512;var $37=$1;var $36=$1;var $35=$7;var $__trailing_sign_0269=0;var $__p_0271=0;label=3;break;
 case 3: 
 var $__p_0271;
 var $__trailing_sign_0269;
 var $35;
 var $36;
 var $37;
 var $free129266;
 var $38;
 var $39=HEAP32[(($10)>>2)];
 var $40=($39|0)==0;
 if($40){var $55=0;label=9;break;}else{label=4;break;}
 case 4: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=5;break;}else{var $55=$39;label=9;break;}
 case 5: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 6: 
 var $53=($52|0)==-1;
 if($53){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre354=HEAP32[(($10)>>2)];
 var $55=$_pre354;label=9;break;
 case 8: 
 HEAP32[(($10)>>2)]=0;
 var $55=0;label=9;break;
 case 9: 
 var $55;
 var $56=($55|0)==0;
 var $57=HEAP32[(($11)>>2)];
 var $58=($57|0)==0;
 if($58){label=15;break;}else{label=10;break;}
 case 10: 
 var $60=(($57+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($57+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61|0)==($63|0);
 if($64){label=12;break;}else{label=11;break;}
 case 11: 
 if($56){var $74=$57;label=17;break;}else{var $free129_lcssa=$free129266;var $_lcssa207=$37;var $_lcssa224=$36;var $__trailing_sign_0_lcssa=$__trailing_sign_0269;label=274;break;}
 case 12: 
 var $66=$57;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 13: 
 var $71=($70|0)==-1;
 if($71){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($11)>>2)]=0;
 label=15;break;
 case 15: 
 if($56){var $free129_lcssa=$free129266;var $_lcssa207=$37;var $_lcssa224=$36;var $__trailing_sign_0_lcssa=$__trailing_sign_0269;label=274;break;}else{var $74=0;label=17;break;}
 case 16: 
 if($56){var $74=$57;label=17;break;}else{var $free129_lcssa=$free129266;var $_lcssa207=$37;var $_lcssa224=$36;var $__trailing_sign_0_lcssa=$__trailing_sign_0269;label=274;break;}
 case 17: 
 var $74;
 var $75=(($12+$__p_0271)|0);
 var $76=HEAP8[($75)];
 var $77=(($76<<24)>>24);
 switch(($77|0)){case 2:{ label=111;break;}case 4:{ var $__ng_0=0;var $562=$35;var $561=$36;var $560=$37;var $free132=$free129266;var $559=$38;label=155;break;}case 1:{ label=29;break;}case 0:{ label=43;break;}case 3:{ label=70;break;}default:{var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}}break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $78=$_lcssa207;var $free139=$free129_lcssa;label=26;break;
 case 19: 
 var $free139_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit146$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit146$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit146$1;var $lpad_phi$0=$lpad_loopexit146$0;var $78=$_ph_ph;var $free139=$free139_ph_ph;label=26;break;
 case 20: 
 var $lpad_loopexit168$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit168$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit168$1;var $lpad_phi$0=$lpad_loopexit168$0;var $78=$735;var $free139=$free131;label=26;break;
 case 21: 
 var $lpad_loopexit173$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit173$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit173$1;var $lpad_phi$0=$lpad_loopexit173$0;var $78=$37;var $free139=$free129266;label=26;break;
 case 22: 
 var $lpad_loopexit180$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit180$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit180$1;var $lpad_phi$0=$lpad_loopexit180$0;var $78=$37;var $free139=$free129266;label=26;break;
 case 23: 
 var $lpad_loopexit184$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit184$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit184$1;var $lpad_phi$0=$lpad_loopexit184$0;var $78=$37;var $free139=$free129266;label=26;break;
 case 24: 
 var $free139_ph_ph144_ph_ph_ph_ph_ph;
 var $_ph_ph145_ph_ph_ph_ph_ph;
 var $lpad_loopexit187$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit187$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit187$1;var $lpad_phi$0=$lpad_loopexit187$0;var $78=$_ph_ph145_ph_ph_ph_ph_ph;var $free139=$free139_ph_ph144_ph_ph_ph_ph_ph;label=26;break;
 case 25: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $78=$1;var $free139=512;label=26;break;
 case 26: 
 var $free139;
 var $78;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $79=($78|0)==0;
 if($79){label=312;break;}else{label=27;break;}
 case 27: 
 var $81=$78;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free139]($81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=28;break; }
 case 28: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 29: 
 var $cond=($__p_0271|0)==3;
 if($cond){var $free129_lcssa=$free129266;var $_lcssa207=$37;var $_lcssa224=$36;var $__trailing_sign_0_lcssa=$__trailing_sign_0269;label=274;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($10)>>2)];
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($87+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=31;break;}else{label=33;break;}
 case 31: 
 var $94=$87;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 32: 
 var $extract_t100=(($98)&255);
 var $_046_off0=$extract_t100;label=34;break;
 case 33: 
 var $100=HEAP8[($89)];
 var $_046_off0=$100;label=34;break;
 case 34: 
 var $_046_off0;
 var $101=(($_046_off0<<24)>>24);
 var $102=(function() { try { __THREW__ = 0; return _isascii($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 35: 
 var $103=($102|0)==0;
 if($103){label=42;break;}else{label=36;break;}
 case 36: 
 var $104=HEAP32[(($13)>>2)];
 var $105=(($104+($101<<1))|0);
 var $106=HEAP16[(($105)>>1)];
 var $107=$106&8192;
 var $108=(($107<<16)>>16)==0;
 if($108){label=42;break;}else{label=37;break;}
 case 37: 
 var $110=HEAP32[(($10)>>2)];
 var $111=(($110+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($110+16)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($112|0)==($114|0);
 if($115){label=38;break;}else{label=40;break;}
 case 38: 
 var $117=$110;
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+40)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 39: 
 var $extract_t102=(($121)&255);
 var $_045_off0=$extract_t102;label=41;break;
 case 40: 
 var $123=(($112+1)|0);
 HEAP32[(($111)>>2)]=$123;
 var $124=HEAP8[($112)];
 var $_045_off0=$124;label=41;break;
 case 41: 
 var $_045_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_045_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 42: 
 var $125=HEAP32[(($__err)>>2)];
 var $126=$125|4;
 HEAP32[(($__err)>>2)]=$126;
 var $_031=0;var $1047=$37;var $free135=$free129266;label=308;break;
 case 43: 
 var $128=($__p_0271|0)==3;
 if($128){var $free129_lcssa=$free129266;var $_lcssa207=$37;var $_lcssa224=$36;var $__trailing_sign_0_lcssa=$__trailing_sign_0269;label=274;break;}else{var $129=$74;label=44;break;}
 case 44: 
 var $129;
 var $130=HEAP32[(($10)>>2)];
 var $131=($130|0)==0;
 if($131){var $146=0;label=50;break;}else{label=45;break;}
 case 45: 
 var $133=(($130+12)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($130+16)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($134|0)==($136|0);
 if($137){label=46;break;}else{var $146=$130;label=50;break;}
 case 46: 
 var $139=$130;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+36)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=23;break; }
 case 47: 
 var $144=($143|0)==-1;
 if($144){label=49;break;}else{label=48;break;}
 case 48: 
 var $_pre355=HEAP32[(($10)>>2)];
 var $146=$_pre355;label=50;break;
 case 49: 
 HEAP32[(($10)>>2)]=0;
 var $146=0;label=50;break;
 case 50: 
 var $146;
 var $147=($146|0)==0;
 var $148=($129|0)==0;
 if($148){label=56;break;}else{label=51;break;}
 case 51: 
 var $150=(($129+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($129+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($151|0)==($153|0);
 if($154){label=53;break;}else{label=52;break;}
 case 52: 
 if($147){var $163=$129;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}
 case 53: 
 var $156=$129;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=23;break; }
 case 54: 
 var $161=($160|0)==-1;
 if($161){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($11)>>2)]=0;
 label=56;break;
 case 56: 
 if($147){var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}else{var $163=0;label=58;break;}
 case 57: 
 if($147){var $163=$129;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}
 case 58: 
 var $163;
 var $164=HEAP32[(($10)>>2)];
 var $165=(($164+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($164+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{label=61;break;}
 case 59: 
 var $171=$164;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+36)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=23;break; }
 case 60: 
 var $extract_t96=(($175)&255);
 var $_042_off0=$extract_t96;label=62;break;
 case 61: 
 var $177=HEAP8[($166)];
 var $_042_off0=$177;label=62;break;
 case 62: 
 var $_042_off0;
 var $178=(($_042_off0<<24)>>24);
 var $179=(function() { try { __THREW__ = 0; return _isascii($178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=23;break; }
 case 63: 
 var $180=($179|0)==0;
 if($180){var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}else{label=64;break;}
 case 64: 
 var $181=HEAP32[(($13)>>2)];
 var $182=(($181+($178<<1))|0);
 var $183=HEAP16[(($182)>>1)];
 var $184=$183&8192;
 var $185=(($184<<16)>>16)==0;
 if($185){var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}else{label=65;break;}
 case 65: 
 var $187=HEAP32[(($10)>>2)];
 var $188=(($187+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($187+16)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($189|0)==($191|0);
 if($192){label=66;break;}else{label=68;break;}
 case 66: 
 var $194=$187;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+40)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=23;break; }
 case 67: 
 var $extract_t98=(($198)&255);
 var $_041_off0=$extract_t98;label=69;break;
 case 68: 
 var $200=(($189+1)|0);
 HEAP32[(($188)>>2)]=$200;
 var $201=HEAP8[($189)];
 var $_041_off0=$201;label=69;break;
 case 69: 
 var $_041_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_041_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $129=$163;label=44;break; } else { label=23;break; }
 case 70: 
 var $202=HEAP8[($3)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 var $206=HEAP32[(($20)>>2)];
 var $207=$203>>>1;
 var $208=($205?$207:$206);
 var $209=HEAP8[($4)];
 var $210=($209&255);
 var $211=$210&1;
 var $212=($211|0)==0;
 var $213=HEAP32[(($17)>>2)];
 var $214=$210>>>1;
 var $215=($212?$214:$213);
 var $216=(((-$215))|0);
 var $217=($208|0)==($216|0);
 if($217){var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}else{label=71;break;}
 case 71: 
 var $218=($208|0)==0;
 var $219=($215|0)==0;
 var $or_cond380=$218|$219;
 var $220=HEAP32[(($10)>>2)];
 var $221=(($220+12)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($220+16)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=($222|0)==($224|0);
 if($or_cond380){label=72;break;}else{label=92;break;}
 case 72: 
 if($218){label=83;break;}else{label=73;break;}
 case 73: 
 if($225){label=74;break;}else{label=76;break;}
 case 74: 
 var $228=$220;
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+36)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 75: 
 var $extract_t93=(($232)&255);
 var $_pre345=HEAP8[($3)];
 var $_038_off0=$extract_t93;var $235=$_pre345;label=77;break;
 case 76: 
 var $234=HEAP8[($222)];
 var $_038_off0=$234;var $235=$202;label=77;break;
 case 77: 
 var $235;
 var $_038_off0;
 var $236=$235&1;
 var $237=(($236<<24)>>24)==0;
 var $238=HEAP32[(($21)>>2)];
 var $_=($237?$19:$238);
 var $239=HEAP8[($_)];
 var $240=(($_038_off0<<24)>>24)==(($239<<24)>>24);
 if($240){label=78;break;}else{label=82;break;}
 case 78: 
 var $242=HEAP32[(($10)>>2)];
 var $243=(($242+12)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($242+16)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($244|0)==($246|0);
 if($247){label=79;break;}else{label=80;break;}
 case 79: 
 var $249=$242;
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+40)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$252]($242) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 80: 
 var $255=(($244+1)|0);
 HEAP32[(($243)>>2)]=$255;
 label=81;break;
 case 81: 
 var $256=HEAP8[($3)];
 var $257=($256&255);
 var $258=$257&1;
 var $259=($258|0)==0;
 var $260=HEAP32[(($20)>>2)];
 var $261=$257>>>1;
 var $262=($259?$261:$260);
 var $263=($262>>>0)>1;
 var $__psn___trailing_sign_0=($263?$__psn:$__trailing_sign_0269);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;
 case 82: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;
 case 83: 
 if($225){label=84;break;}else{label=86;break;}
 case 84: 
 var $267=$220;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$270]($220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 85: 
 var $extract_t91=(($271)&255);
 var $_pre=HEAP8[($4)];
 var $_034_off0=$extract_t91;var $274=$_pre;label=87;break;
 case 86: 
 var $273=HEAP8[($222)];
 var $_034_off0=$273;var $274=$209;label=87;break;
 case 87: 
 var $274;
 var $_034_off0;
 var $275=$274&1;
 var $276=(($275<<24)>>24)==0;
 var $277=HEAP32[(($18)>>2)];
 var $_368=($276?$16:$277);
 var $278=HEAP8[($_368)];
 var $279=(($_034_off0<<24)>>24)==(($278<<24)>>24);
 if($279){label=88;break;}else{var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}
 case 88: 
 var $281=HEAP32[(($10)>>2)];
 var $282=(($281+12)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($281+16)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($283|0)==($285|0);
 if($286){label=89;break;}else{label=90;break;}
 case 89: 
 var $288=$281;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+40)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 90: 
 var $294=(($283+1)|0);
 HEAP32[(($282)>>2)]=$294;
 label=91;break;
 case 91: 
 HEAP8[($__neg)]=1;
 var $295=HEAP8[($4)];
 var $296=($295&255);
 var $297=$296&1;
 var $298=($297|0)==0;
 var $299=HEAP32[(($17)>>2)];
 var $300=$296>>>1;
 var $301=($298?$300:$299);
 var $302=($301>>>0)>1;
 var $__nsn___trailing_sign_0=($302?$__nsn:$__trailing_sign_0269);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;
 case 92: 
 if($225){label=93;break;}else{label=95;break;}
 case 93: 
 var $305=$220;
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+36)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$308]($220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 94: 
 var $extract_t87=(($309)&255);
 var $_pre346=HEAP8[($3)];
 var $_pre496=HEAP32[(($10)>>2)];
 var $_phi_trans_insert=(($_pre496+12)|0);
 var $_pre497=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert498=(($_pre496+16)|0);
 var $_pre499=HEAP32[(($_phi_trans_insert498)>>2)];
 var $_029_off0=$extract_t87;var $315=$_pre346;var $314=$_pre496;var $313=$_pre497;var $312=$_pre499;label=96;break;
 case 95: 
 var $311=HEAP8[($222)];
 var $_029_off0=$311;var $315=$202;var $314=$220;var $313=$222;var $312=$224;label=96;break;
 case 96: 
 var $312;
 var $313;
 var $314;
 var $315;
 var $_029_off0;
 var $316=$315&1;
 var $317=(($316<<24)>>24)==0;
 var $318=HEAP32[(($21)>>2)];
 var $_369=($317?$19:$318);
 var $319=HEAP8[($_369)];
 var $320=(($_029_off0<<24)>>24)==(($319<<24)>>24);
 var $321=(($314+12)|0);
 var $322=($313|0)==($312|0);
 if($320){label=97;break;}else{label=101;break;}
 case 97: 
 if($322){label=98;break;}else{label=99;break;}
 case 98: 
 var $325=$314;
 var $326=HEAP32[(($325)>>2)];
 var $327=(($326+40)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$328]($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 99: 
 var $331=(($313+1)|0);
 HEAP32[(($321)>>2)]=$331;
 label=100;break;
 case 100: 
 var $332=HEAP8[($3)];
 var $333=($332&255);
 var $334=$333&1;
 var $335=($334|0)==0;
 var $336=HEAP32[(($20)>>2)];
 var $337=$333>>>1;
 var $338=($335?$337:$336);
 var $339=($338>>>0)>1;
 var $__psn___trailing_sign_0104=($339?$__psn:$__trailing_sign_0269);
 var $__trailing_sign_1=$__psn___trailing_sign_0104;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;
 case 101: 
 if($322){label=102;break;}else{label=104;break;}
 case 102: 
 var $342=$314;
 var $343=HEAP32[(($342)>>2)];
 var $344=(($343+36)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$345]($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 103: 
 var $extract_t89=(($346)&255);
 var $_025_off0=$extract_t89;label=105;break;
 case 104: 
 var $348=HEAP8[($313)];
 var $_025_off0=$348;label=105;break;
 case 105: 
 var $_025_off0;
 var $349=HEAP8[($4)];
 var $350=$349&1;
 var $351=(($350<<24)>>24)==0;
 var $352=HEAP32[(($18)>>2)];
 var $_370=($351?$16:$352);
 var $353=HEAP8[($_370)];
 var $354=(($_025_off0<<24)>>24)==(($353<<24)>>24);
 if($354){label=106;break;}else{label=110;break;}
 case 106: 
 var $356=HEAP32[(($10)>>2)];
 var $357=(($356+12)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(($356+16)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=($358|0)==($360|0);
 if($361){label=107;break;}else{label=108;break;}
 case 107: 
 var $363=$356;
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364+40)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$366]($356) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$37;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free129266;label=24;break; }
 case 108: 
 var $369=(($358+1)|0);
 HEAP32[(($357)>>2)]=$369;
 label=109;break;
 case 109: 
 HEAP8[($__neg)]=1;
 var $370=HEAP8[($4)];
 var $371=($370&255);
 var $372=$371&1;
 var $373=($372|0)==0;
 var $374=HEAP32[(($17)>>2)];
 var $375=$371>>>1;
 var $376=($373?$375:$374);
 var $377=($376>>>0)>1;
 var $__nsn___trailing_sign_0105=($377?$__nsn:$__trailing_sign_0269);
 var $__trailing_sign_1=$__nsn___trailing_sign_0105;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;
 case 110: 
 var $379=HEAP32[(($__err)>>2)];
 var $380=$379|4;
 HEAP32[(($__err)>>2)]=$380;
 var $_031=0;var $1047=$37;var $free135=$free129266;label=308;break;
 case 111: 
 var $382=($__trailing_sign_0269|0)!=0;
 var $383=($__p_0271>>>0)<2;
 var $or_cond=$382|$383;
 if($or_cond){label=115;break;}else{label=112;break;}
 case 112: 
 var $385=($__p_0271|0)==2;
 if($385){label=113;break;}else{var $390=0;label=114;break;}
 case 113: 
 var $387=HEAP8[($32)];
 var $388=(($387<<24)>>24)!=0;
 var $390=$388;label=114;break;
 case 114: 
 var $390;
 var $brmerge=$23|$390;
 if($brmerge){label=115;break;}else{var $__trailing_sign_1=0;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}
 case 115: 
 var $391=HEAP8[($2)];
 var $392=$391&1;
 var $393=(($392<<24)>>24)==0;
 var $394=HEAP32[(($27)>>2)];
 var $_371=($393?$25:$394);
 var $395=($__p_0271|0)==0;
 if($395){var $__sym_curr_char_sroa_0_0_ph=$_371;var $_ph=$391;var $455=$394;label=128;break;}else{label=116;break;}
 case 116: 
 var $397=((($__p_0271)-(1))|0);
 var $398=(($12+$397)|0);
 var $399=HEAP8[($398)];
 var $switch=($399&255)<2;
 if($switch){label=117;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_371;var $_ph=$391;var $455=$394;label=128;break;}
 case 117: 
 var $400=($391&255);
 var $401=$400&1;
 var $402=($401|0)==0;
 var $403=HEAP32[(($26)>>2)];
 var $404=$400>>>1;
 var $405=($402?$404:$403);
 var $406=($405|0)==0;
 if($406){var $__sym_space_end_sroa_0_0_lcssa=$_371;var $429=$391;var $428=$394;label=123;break;}else{var $__sym_space_end_sroa_0_0395=$_371;label=118;break;}
 case 118: 
 var $__sym_space_end_sroa_0_0395;
 var $407=HEAP8[($__sym_space_end_sroa_0_0395)];
 var $408=(($407<<24)>>24);
 var $409=(function() { try { __THREW__ = 0; return _isascii($408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=21;break; }
 case 119: 
 var $410=($409|0)==0;
 if($410){label=122;break;}else{label=120;break;}
 case 120: 
 var $411=HEAP32[(($13)>>2)];
 var $412=(($411+($408<<1))|0);
 var $413=HEAP16[(($412)>>1)];
 var $414=$413&8192;
 var $415=(($414<<16)>>16)==0;
 if($415){label=122;break;}else{label=121;break;}
 case 121: 
 var $416=(($__sym_space_end_sroa_0_0395+1)|0);
 var $_pre356=HEAP8[($2)];
 var $417=$_pre356&1;
 var $418=(($417<<24)>>24)==0;
 var $419=HEAP32[(($27)>>2)];
 var $_372=($418?$25:$419);
 var $420=($_pre356&255);
 var $421=$420&1;
 var $422=($421|0)==0;
 var $423=HEAP32[(($26)>>2)];
 var $424=$420>>>1;
 var $425=($422?$424:$423);
 var $426=(($_372+$425)|0);
 var $427=($416|0)==($426|0);
 if($427){var $__sym_space_end_sroa_0_0_lcssa=$416;var $429=$_pre356;var $428=$419;label=123;break;}else{var $__sym_space_end_sroa_0_0395=$416;label=118;break;}
 case 122: 
 var $_pre500=HEAP8[($2)];
 var $_pre501=HEAP32[(($27)>>2)];
 var $__sym_space_end_sroa_0_0_lcssa=$__sym_space_end_sroa_0_0395;var $429=$_pre500;var $428=$_pre501;label=123;break;
 case 123: 
 var $428;
 var $429;
 var $__sym_space_end_sroa_0_0_lcssa;
 var $430=$429&1;
 var $431=(($430<<24)>>24)==0;
 var $_373=($431?$25:$428);
 var $432=$__sym_space_end_sroa_0_0_lcssa;
 var $433=$_373;
 var $434=((($432)-($433))|0);
 var $435=HEAP8[($5)];
 var $436=($435&255);
 var $437=$436&1;
 var $438=($437|0)==0;
 var $439=HEAP32[(($30)>>2)];
 var $440=$436>>>1;
 var $441=($438?$440:$439);
 var $442=($434>>>0)>($441>>>0);
 if($442){var $__sym_curr_char_sroa_0_0_ph=$_373;var $_ph=$429;var $455=$428;label=128;break;}else{label=124;break;}
 case 124: 
 var $443=$435&1;
 var $444=(($443<<24)>>24)==0;
 var $445=HEAP32[(($31)>>2)];
 var $_374=($444?$29:$445);
 var $446=(($_374+$441)|0);
 var $447=($__sym_space_end_sroa_0_0_lcssa|0)==($_373|0);
 if($447){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$429;var $455=$428;label=128;break;}else{label=125;break;}
 case 125: 
 var $_sum=((($441)-($434))|0);
 var $448=(($_374+$_sum)|0);
 var $_sroa_057_0177=$448;var $_sroa_056_0178=$_373;label=126;break;
 case 126: 
 var $_sroa_056_0178;
 var $_sroa_057_0177;
 var $449=HEAP8[($_sroa_057_0177)];
 var $450=HEAP8[($_sroa_056_0178)];
 var $451=(($449<<24)>>24)==(($450<<24)>>24);
 if($451){label=127;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_373;var $_ph=$429;var $455=$428;label=128;break;}
 case 127: 
 var $452=(($_sroa_057_0177+1)|0);
 var $453=(($_sroa_056_0178+1)|0);
 var $454=($452|0)==($446|0);
 if($454){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$429;var $455=$428;label=128;break;}else{var $_sroa_057_0177=$452;var $_sroa_056_0178=$453;label=126;break;}
 case 128: 
 var $455;
 var $_ph;
 var $__sym_curr_char_sroa_0_0_ph;
 var $456=$_ph&1;
 var $457=(($456<<24)>>24)==0;
 var $_378398=($457?$25:$455);
 var $458=($_ph&255);
 var $459=$458&1;
 var $460=($459|0)==0;
 var $461=HEAP32[(($26)>>2)];
 var $462=$458>>>1;
 var $463=($460?$462:$461);
 var $464=(($_378398+$463)|0);
 var $465=($__sym_curr_char_sroa_0_0_ph|0)==($464|0);
 if($465){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0_ph;label=152;break;}else{var $466=$74;var $__sym_curr_char_sroa_0_0399=$__sym_curr_char_sroa_0_0_ph;label=129;break;}
 case 129: 
 var $__sym_curr_char_sroa_0_0399;
 var $466;
 var $467=HEAP32[(($10)>>2)];
 var $468=($467|0)==0;
 if($468){var $483=0;label=135;break;}else{label=130;break;}
 case 130: 
 var $470=(($467+12)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=(($467+16)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($471|0)==($473|0);
 if($474){label=131;break;}else{var $483=$467;label=135;break;}
 case 131: 
 var $476=$467;
 var $477=HEAP32[(($476)>>2)];
 var $478=(($477+36)|0);
 var $479=HEAP32[(($478)>>2)];
 var $480=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$479]($467) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=22;break; }
 case 132: 
 var $481=($480|0)==-1;
 if($481){label=134;break;}else{label=133;break;}
 case 133: 
 var $_pre357=HEAP32[(($10)>>2)];
 var $483=$_pre357;label=135;break;
 case 134: 
 HEAP32[(($10)>>2)]=0;
 var $483=0;label=135;break;
 case 135: 
 var $483;
 var $484=($483|0)==0;
 var $485=($466|0)==0;
 if($485){label=141;break;}else{label=136;break;}
 case 136: 
 var $487=(($466+12)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=(($466+16)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=($488|0)==($490|0);
 if($491){label=138;break;}else{label=137;break;}
 case 137: 
 if($484){var $500=$466;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0399;label=152;break;}
 case 138: 
 var $493=$466;
 var $494=HEAP32[(($493)>>2)];
 var $495=(($494+36)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$496]($466) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=22;break; }
 case 139: 
 var $498=($497|0)==-1;
 if($498){label=140;break;}else{label=142;break;}
 case 140: 
 HEAP32[(($11)>>2)]=0;
 label=141;break;
 case 141: 
 if($484){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0399;label=152;break;}else{var $500=0;label=143;break;}
 case 142: 
 if($484){var $500=$466;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0399;label=152;break;}
 case 143: 
 var $500;
 var $501=HEAP32[(($10)>>2)];
 var $502=(($501+12)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=(($501+16)|0);
 var $505=HEAP32[(($504)>>2)];
 var $506=($503|0)==($505|0);
 if($506){label=144;break;}else{label=146;break;}
 case 144: 
 var $508=$501;
 var $509=HEAP32[(($508)>>2)];
 var $510=(($509+36)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$511]($501) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=22;break; }
 case 145: 
 var $extract_t85=(($512)&255);
 var $_018_off0=$extract_t85;label=147;break;
 case 146: 
 var $514=HEAP8[($503)];
 var $_018_off0=$514;label=147;break;
 case 147: 
 var $_018_off0;
 var $515=HEAP8[($__sym_curr_char_sroa_0_0399)];
 var $516=(($_018_off0<<24)>>24)==(($515<<24)>>24);
 if($516){label=148;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0399;label=152;break;}
 case 148: 
 var $518=HEAP32[(($10)>>2)];
 var $519=(($518+12)|0);
 var $520=HEAP32[(($519)>>2)];
 var $521=(($518+16)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=($520|0)==($522|0);
 if($523){label=149;break;}else{label=150;break;}
 case 149: 
 var $525=$518;
 var $526=HEAP32[(($525)>>2)];
 var $527=(($526+40)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$528]($518) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=22;break; }
 case 150: 
 var $531=(($520+1)|0);
 HEAP32[(($519)>>2)]=$531;
 label=151;break;
 case 151: 
 var $532=(($__sym_curr_char_sroa_0_0399+1)|0);
 var $_pre347=HEAP8[($2)];
 var $533=$_pre347&1;
 var $534=(($533<<24)>>24)==0;
 var $535=HEAP32[(($27)>>2)];
 var $_378=($534?$25:$535);
 var $536=($_pre347&255);
 var $537=$536&1;
 var $538=($537|0)==0;
 var $539=HEAP32[(($26)>>2)];
 var $540=$536>>>1;
 var $541=($538?$540:$539);
 var $542=(($_378+$541)|0);
 var $543=($532|0)==($542|0);
 if($543){var $__sym_curr_char_sroa_0_0_lcssa=$532;label=152;break;}else{var $466=$500;var $__sym_curr_char_sroa_0_0399=$532;label=129;break;}
 case 152: 
 var $__sym_curr_char_sroa_0_0_lcssa;
 if($23){label=153;break;}else{var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}
 case 153: 
 var $544=HEAP8[($2)];
 var $545=$544&1;
 var $546=(($545<<24)>>24)==0;
 var $547=HEAP32[(($27)>>2)];
 var $_379=($546?$25:$547);
 var $548=($544&255);
 var $549=$548&1;
 var $550=($549|0)==0;
 var $551=HEAP32[(($26)>>2)];
 var $552=$548>>>1;
 var $553=($550?$552:$551);
 var $554=(($_379+$553)|0);
 var $555=($__sym_curr_char_sroa_0_0_lcssa|0)==($554|0);
 if($555){var $__trailing_sign_1=$__trailing_sign_0269;var $943=$35;var $942=$36;var $941=$37;var $free130=$free129266;var $940=$38;label=273;break;}else{label=154;break;}
 case 154: 
 var $557=HEAP32[(($__err)>>2)];
 var $558=$557|4;
 HEAP32[(($__err)>>2)]=$558;
 var $_031=0;var $1047=$37;var $free135=$free129266;label=308;break;
 case 155: 
 var $559;
 var $free132;
 var $560;
 var $561;
 var $562;
 var $__ng_0;
 var $563=HEAP32[(($10)>>2)];
 var $564=($563|0)==0;
 if($564){var $579=0;label=161;break;}else{label=156;break;}
 case 156: 
 var $566=(($563+12)|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=(($563+16)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=($567|0)==($569|0);
 if($570){label=157;break;}else{var $579=$563;label=161;break;}
 case 157: 
 var $572=$563;
 var $573=HEAP32[(($572)>>2)];
 var $574=(($573+36)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$575]($563) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=158;break; } else { var $_ph_ph=$560;var $free139_ph_ph=$free132;label=19;break; }
 case 158: 
 var $577=($576|0)==-1;
 if($577){label=160;break;}else{label=159;break;}
 case 159: 
 var $_pre358=HEAP32[(($10)>>2)];
 var $579=$_pre358;label=161;break;
 case 160: 
 HEAP32[(($10)>>2)]=0;
 var $579=0;label=161;break;
 case 161: 
 var $579;
 var $580=($579|0)==0;
 var $581=HEAP32[(($11)>>2)];
 var $582=($581|0)==0;
 if($582){label=167;break;}else{label=162;break;}
 case 162: 
 var $584=(($581+12)|0);
 var $585=HEAP32[(($584)>>2)];
 var $586=(($581+16)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=($585|0)==($587|0);
 if($588){label=164;break;}else{label=163;break;}
 case 163: 
 if($580){label=169;break;}else{label=199;break;}
 case 164: 
 var $590=$581;
 var $591=HEAP32[(($590)>>2)];
 var $592=(($591+36)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$593]($581) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { var $_ph_ph=$560;var $free139_ph_ph=$free132;label=19;break; }
 case 165: 
 var $595=($594|0)==-1;
 if($595){label=166;break;}else{label=168;break;}
 case 166: 
 HEAP32[(($11)>>2)]=0;
 label=167;break;
 case 167: 
 if($580){label=199;break;}else{label=169;break;}
 case 168: 
 if($580){label=169;break;}else{label=199;break;}
 case 169: 
 var $597=HEAP32[(($10)>>2)];
 var $598=(($597+12)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=(($597+16)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=($599|0)==($601|0);
 if($602){label=170;break;}else{label=172;break;}
 case 170: 
 var $604=$597;
 var $605=HEAP32[(($604)>>2)];
 var $606=(($605+36)|0);
 var $607=HEAP32[(($606)>>2)];
 var $608=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$607]($597) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { var $_ph_ph=$560;var $free139_ph_ph=$free132;label=19;break; }
 case 171: 
 var $extract_t82=(($608)&255);
 var $_022_off0=$extract_t82;label=173;break;
 case 172: 
 var $610=HEAP8[($599)];
 var $_022_off0=$610;label=173;break;
 case 173: 
 var $_022_off0;
 var $611=(($_022_off0<<24)>>24);
 var $612=(function() { try { __THREW__ = 0; return _isascii($611) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=174;break; } else { var $_ph_ph=$560;var $free139_ph_ph=$free132;label=19;break; }
 case 174: 
 var $613=($612|0)==0;
 if($613){label=187;break;}else{label=175;break;}
 case 175: 
 var $614=HEAP32[(($13)>>2)];
 var $615=(($614+($611<<1))|0);
 var $616=HEAP16[(($615)>>1)];
 var $617=$616&2048;
 var $618=(($617<<16)>>16)==0;
 if($618){label=187;break;}else{label=176;break;}
 case 176: 
 var $620=HEAP32[(($__wn)>>2)];
 var $621=($620|0)==($559|0);
 if($621){label=177;break;}else{var $648=$559;var $647=$620;label=186;break;}
 case 177: 
 var $623=HEAP32[(($34)>>2)];
 var $624=($623|0)!=((512)|0);
 var $625=HEAP32[(($8)>>2)];
 var $626=$559;
 var $627=$625;
 var $628=((($626)-($627))|0);
 var $629=($628>>>0)<2147483647;
 var $630=$628<<1;
 var $__i=($629?$630:-1);
 var $631=($624?$625:0);
 var $632=_realloc($631,$__i);
 var $633=($632|0)==0;
 if($633){label=178;break;}else{label=179;break;}
 case 178: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { var $_ph_ph=$560;var $free139_ph_ph=$free132;label=19;break; }
 case 179: 
 if($624){label=180;break;}else{label=181;break;}
 case 180: 
 HEAP32[(($8)>>2)]=$632;
 var $642=$632;label=185;break;
 case 181: 
 var $_pr_i=HEAP32[(($8)>>2)];
 HEAP32[(($8)>>2)]=$632;
 var $636=($_pr_i|0)==0;
 if($636){var $642=$632;label=185;break;}else{label=182;break;}
 case 182: 
 var $638=HEAP32[(($34)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$638]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=184;break; }
 case 183: 
 var $_pre_i=HEAP32[(($8)>>2)];
 var $642=$_pre_i;label=185;break;
 case 184: 
 var $640$0 = ___cxa_find_matching_catch(-1, -1,0); var $640$1 = tempRet0;
 var $641=$640$0;
 ___clang_call_terminate($641);
 throw "Reached an unreachable!";
 case 185: 
 var $642;
 HEAP32[(($34)>>2)]=260;
 var $643=(($642+$628)|0);
 HEAP32[(($__wn)>>2)]=$643;
 var $644=HEAP32[(($8)>>2)];
 var $645=(($644+$__i)|0);
 var $648=$645;var $647=$643;label=186;break;
 case 186: 
 var $647;
 var $648;
 var $649=(($647+1)|0);
 HEAP32[(($__wn)>>2)]=$649;
 HEAP8[($647)]=$_022_off0;
 var $650=((($__ng_0)+(1))|0);
 var $__ng_1=$650;var $692=$562;var $691=$561;var $690=$560;var $free133=$free132;var $689=$648;label=196;break;
 case 187: 
 var $651=HEAP8[($0)];
 var $652=($651&255);
 var $653=$652&1;
 var $654=($653|0)==0;
 var $655=HEAP32[(($33)>>2)];
 var $656=$652>>>1;
 var $657=($654?$656:$655);
 var $658=($657|0)==0;
 var $659=($__ng_0|0)==0;
 var $or_cond107=$658|$659;
 if($or_cond107){label=199;break;}else{label=188;break;}
 case 188: 
 var $661=HEAP8[($__ts)];
 var $662=(($_022_off0<<24)>>24)==(($661<<24)>>24);
 if($662){label=189;break;}else{label=199;break;}
 case 189: 
 var $664=($561|0)==($562|0);
 if($664){label=190;break;}else{var $686=$562;var $685=$561;var $684=$560;var $free134=$free132;label=195;break;}
 case 190: 
 var $666=($free132|0)==((512)|0);
 var $667=$561;
 var $668=$560;
 var $669=((($667)-($668))|0);
 var $670=($669>>>0)<2147483647;
 var $671=$669<<1;
 var $__i109=($670?$671:-1);
 var $672=$669>>2;
 if($666){var $675=0;label=192;break;}else{label=191;break;}
 case 191: 
 var $phitmp_i=$560;
 var $675=$phitmp_i;label=192;break;
 case 192: 
 var $675;
 var $676=_realloc($675,$__i109);
 var $677=$676;
 var $678=($676|0)==0;
 if($678){label=193;break;}else{label=194;break;}
 case 193: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { var $_ph_ph=$560;var $free139_ph_ph=$free132;label=19;break; }
 case 194: 
 var $680=$__i109>>>2;
 var $681=(($677+($672<<2))|0);
 var $682=(($677+($680<<2))|0);
 var $686=$682;var $685=$681;var $684=$677;var $free134=260;label=195;break;
 case 195: 
 var $free134;
 var $684;
 var $685;
 var $686;
 var $687=(($685+4)|0);
 HEAP32[(($685)>>2)]=$__ng_0;
 var $__ng_1=0;var $692=$686;var $691=$687;var $690=$684;var $free133=$free134;var $689=$559;label=196;break;
 case 196: 
 var $689;
 var $free133;
 var $690;
 var $691;
 var $692;
 var $__ng_1;
 var $693=HEAP32[(($10)>>2)];
 var $694=(($693+12)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=(($693+16)|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=($695|0)==($697|0);
 if($698){label=197;break;}else{label=198;break;}
 case 197: 
 var $700=$693;
 var $701=HEAP32[(($700)>>2)];
 var $702=(($701+40)|0);
 var $703=HEAP32[(($702)>>2)];
 var $704=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$703]($693) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $562=$692;var $561=$691;var $560=$690;var $free132=$free133;var $559=$689;label=155;break; } else { var $_ph_ph=$690;var $free139_ph_ph=$free133;label=19;break; }
 case 198: 
 var $706=(($695+1)|0);
 HEAP32[(($694)>>2)]=$706;
 var $__ng_0=$__ng_1;var $562=$692;var $561=$691;var $560=$690;var $free132=$free133;var $559=$689;label=155;break;
 case 199: 
 var $708=($560|0)==($561|0);
 var $709=($__ng_0|0)==0;
 var $or_cond108=$708|$709;
 if($or_cond108){var $737=$562;var $736=$561;var $735=$560;var $free131=$free132;label=207;break;}else{label=200;break;}
 case 200: 
 var $711=($561|0)==($562|0);
 if($711){label=201;break;}else{var $733=$562;var $732=$561;var $731=$560;var $free=$free132;label=206;break;}
 case 201: 
 var $713=($free132|0)==((512)|0);
 var $714=$561;
 var $715=$560;
 var $716=((($714)-($715))|0);
 var $717=($716>>>0)<2147483647;
 var $718=$716<<1;
 var $__i114=($717?$718:-1);
 var $719=$716>>2;
 if($713){var $722=0;label=203;break;}else{label=202;break;}
 case 202: 
 var $phitmp_i115=$560;
 var $722=$phitmp_i115;label=203;break;
 case 203: 
 var $722;
 var $723=_realloc($722,$__i114);
 var $724=$723;
 var $725=($723|0)==0;
 if($725){label=204;break;}else{label=205;break;}
 case 204: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$560;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free132;label=24;break; }
 case 205: 
 var $727=$__i114>>>2;
 var $728=(($724+($719<<2))|0);
 var $729=(($724+($727<<2))|0);
 var $733=$729;var $732=$728;var $731=$724;var $free=260;label=206;break;
 case 206: 
 var $free;
 var $731;
 var $732;
 var $733;
 var $734=(($732+4)|0);
 HEAP32[(($732)>>2)]=$__ng_0;
 var $737=$733;var $736=$734;var $735=$731;var $free131=$free;label=207;break;
 case 207: 
 var $free131;
 var $735;
 var $736;
 var $737;
 var $738=HEAP32[(($__fd)>>2)];
 var $739=($738|0)>0;
 if($739){label=208;break;}else{var $933=$559;label=271;break;}
 case 208: 
 var $741=HEAP32[(($10)>>2)];
 var $742=($741|0)==0;
 if($742){var $757=0;label=214;break;}else{label=209;break;}
 case 209: 
 var $744=(($741+12)|0);
 var $745=HEAP32[(($744)>>2)];
 var $746=(($741+16)|0);
 var $747=HEAP32[(($746)>>2)];
 var $748=($745|0)==($747|0);
 if($748){label=210;break;}else{var $757=$741;label=214;break;}
 case 210: 
 var $750=$741;
 var $751=HEAP32[(($750)>>2)];
 var $752=(($751+36)|0);
 var $753=HEAP32[(($752)>>2)];
 var $754=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$753]($741) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$735;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free131;label=24;break; }
 case 211: 
 var $755=($754|0)==-1;
 if($755){label=213;break;}else{label=212;break;}
 case 212: 
 var $_pre359=HEAP32[(($10)>>2)];
 var $757=$_pre359;label=214;break;
 case 213: 
 HEAP32[(($10)>>2)]=0;
 var $757=0;label=214;break;
 case 214: 
 var $757;
 var $758=($757|0)==0;
 var $759=HEAP32[(($11)>>2)];
 var $760=($759|0)==0;
 if($760){label=220;break;}else{label=215;break;}
 case 215: 
 var $762=(($759+12)|0);
 var $763=HEAP32[(($762)>>2)];
 var $764=(($759+16)|0);
 var $765=HEAP32[(($764)>>2)];
 var $766=($763|0)==($765|0);
 if($766){label=217;break;}else{label=216;break;}
 case 216: 
 if($758){var $775=$759;label=222;break;}else{label=227;break;}
 case 217: 
 var $768=$759;
 var $769=HEAP32[(($768)>>2)];
 var $770=(($769+36)|0);
 var $771=HEAP32[(($770)>>2)];
 var $772=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$771]($759) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$735;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free131;label=24;break; }
 case 218: 
 var $773=($772|0)==-1;
 if($773){label=219;break;}else{label=221;break;}
 case 219: 
 HEAP32[(($11)>>2)]=0;
 label=220;break;
 case 220: 
 if($758){label=227;break;}else{var $775=0;label=222;break;}
 case 221: 
 if($758){var $775=$759;label=222;break;}else{label=227;break;}
 case 222: 
 var $775;
 var $776=HEAP32[(($10)>>2)];
 var $777=(($776+12)|0);
 var $778=HEAP32[(($777)>>2)];
 var $779=(($776+16)|0);
 var $780=HEAP32[(($779)>>2)];
 var $781=($778|0)==($780|0);
 if($781){label=223;break;}else{label=225;break;}
 case 223: 
 var $783=$776;
 var $784=HEAP32[(($783)>>2)];
 var $785=(($784+36)|0);
 var $786=HEAP32[(($785)>>2)];
 var $787=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$786]($776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$735;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free131;label=24;break; }
 case 224: 
 var $extract_t75=(($787)&255);
 var $_030_off0=$extract_t75;label=226;break;
 case 225: 
 var $789=HEAP8[($778)];
 var $_030_off0=$789;label=226;break;
 case 226: 
 var $_030_off0;
 var $790=HEAP8[($__dp)];
 var $791=(($_030_off0<<24)>>24)==(($790<<24)>>24);
 if($791){label=228;break;}else{label=227;break;}
 case 227: 
 var $793=HEAP32[(($__err)>>2)];
 var $794=$793|4;
 HEAP32[(($__err)>>2)]=$794;
 var $_031=0;var $1047=$735;var $free135=$free131;label=308;break;
 case 228: 
 var $796=HEAP32[(($10)>>2)];
 var $797=(($796+12)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=(($796+16)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=($798|0)==($800|0);
 if($801){label=229;break;}else{label=230;break;}
 case 229: 
 var $803=$796;
 var $804=HEAP32[(($803)>>2)];
 var $805=(($804+40)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$806]($796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $811=$559;var $810=$775;label=231;break; } else { var $_ph_ph145_ph_ph_ph_ph_ph=$735;var $free139_ph_ph144_ph_ph_ph_ph_ph=$free131;label=24;break; }
 case 230: 
 var $809=(($798+1)|0);
 HEAP32[(($797)>>2)]=$809;
 var $811=$559;var $810=$775;label=231;break;
 case 231: 
 var $810;
 var $811;
 var $812=HEAP32[(($10)>>2)];
 var $813=($812|0)==0;
 if($813){var $828=0;label=237;break;}else{label=232;break;}
 case 232: 
 var $815=(($812+12)|0);
 var $816=HEAP32[(($815)>>2)];
 var $817=(($812+16)|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=($816|0)==($818|0);
 if($819){label=233;break;}else{var $828=$812;label=237;break;}
 case 233: 
 var $821=$812;
 var $822=HEAP32[(($821)>>2)];
 var $823=(($822+36)|0);
 var $824=HEAP32[(($823)>>2)];
 var $825=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$824]($812) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=20;break; }
 case 234: 
 var $826=($825|0)==-1;
 if($826){label=236;break;}else{label=235;break;}
 case 235: 
 var $_pre360=HEAP32[(($10)>>2)];
 var $828=$_pre360;label=237;break;
 case 236: 
 HEAP32[(($10)>>2)]=0;
 var $828=0;label=237;break;
 case 237: 
 var $828;
 var $829=($828|0)==0;
 var $830=($810|0)==0;
 if($830){label=243;break;}else{label=238;break;}
 case 238: 
 var $832=(($810+12)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=(($810+16)|0);
 var $835=HEAP32[(($834)>>2)];
 var $836=($833|0)==($835|0);
 if($836){label=240;break;}else{label=239;break;}
 case 239: 
 if($829){var $845=$810;label=245;break;}else{label=252;break;}
 case 240: 
 var $838=$810;
 var $839=HEAP32[(($838)>>2)];
 var $840=(($839+36)|0);
 var $841=HEAP32[(($840)>>2)];
 var $842=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$841]($810) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=20;break; }
 case 241: 
 var $843=($842|0)==-1;
 if($843){label=242;break;}else{label=244;break;}
 case 242: 
 HEAP32[(($11)>>2)]=0;
 label=243;break;
 case 243: 
 if($829){label=252;break;}else{var $845=0;label=245;break;}
 case 244: 
 if($829){var $845=$810;label=245;break;}else{label=252;break;}
 case 245: 
 var $845;
 var $846=HEAP32[(($10)>>2)];
 var $847=(($846+12)|0);
 var $848=HEAP32[(($847)>>2)];
 var $849=(($846+16)|0);
 var $850=HEAP32[(($849)>>2)];
 var $851=($848|0)==($850|0);
 if($851){label=246;break;}else{label=248;break;}
 case 246: 
 var $853=$846;
 var $854=HEAP32[(($853)>>2)];
 var $855=(($854+36)|0);
 var $856=HEAP32[(($855)>>2)];
 var $857=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$856]($846) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=20;break; }
 case 247: 
 var $extract_t78=(($857)&255);
 var $_039_off0=$extract_t78;label=249;break;
 case 248: 
 var $859=HEAP8[($848)];
 var $_039_off0=$859;label=249;break;
 case 249: 
 var $_039_off0;
 var $860=(($_039_off0<<24)>>24);
 var $861=(function() { try { __THREW__ = 0; return _isascii($860) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=20;break; }
 case 250: 
 var $862=($861|0)==0;
 if($862){label=252;break;}else{label=251;break;}
 case 251: 
 var $863=HEAP32[(($13)>>2)];
 var $864=(($863+($860<<1))|0);
 var $865=HEAP16[(($864)>>1)];
 var $866=$865&2048;
 var $867=(($866<<16)>>16)==0;
 if($867){label=252;break;}else{label=253;break;}
 case 252: 
 var $868=HEAP32[(($__err)>>2)];
 var $869=$868|4;
 HEAP32[(($__err)>>2)]=$869;
 var $_031=0;var $1047=$735;var $free135=$free131;label=308;break;
 case 253: 
 var $871=HEAP32[(($__wn)>>2)];
 var $872=($871|0)==($811|0);
 if($872){label=254;break;}else{var $899=$811;var $898=$871;label=263;break;}
 case 254: 
 var $874=HEAP32[(($34)>>2)];
 var $875=($874|0)!=((512)|0);
 var $876=HEAP32[(($8)>>2)];
 var $877=$811;
 var $878=$876;
 var $879=((($877)-($878))|0);
 var $880=($879>>>0)<2147483647;
 var $881=$879<<1;
 var $__i122=($880?$881:-1);
 var $882=($875?$876:0);
 var $883=_realloc($882,$__i122);
 var $884=($883|0)==0;
 if($884){label=255;break;}else{label=256;break;}
 case 255: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=20;break; }
 case 256: 
 if($875){label=257;break;}else{label=258;break;}
 case 257: 
 HEAP32[(($8)>>2)]=$883;
 var $893=$883;label=262;break;
 case 258: 
 var $_pr_i124=HEAP32[(($8)>>2)];
 HEAP32[(($8)>>2)]=$883;
 var $887=($_pr_i124|0)==0;
 if($887){var $893=$883;label=262;break;}else{label=259;break;}
 case 259: 
 var $889=HEAP32[(($34)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$889]($_pr_i124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=261;break; }
 case 260: 
 var $_pre_i125=HEAP32[(($8)>>2)];
 var $893=$_pre_i125;label=262;break;
 case 261: 
 var $891$0 = ___cxa_find_matching_catch(-1, -1,0); var $891$1 = tempRet0;
 var $892=$891$0;
 ___clang_call_terminate($892);
 throw "Reached an unreachable!";
 case 262: 
 var $893;
 HEAP32[(($34)>>2)]=260;
 var $894=(($893+$879)|0);
 HEAP32[(($__wn)>>2)]=$894;
 var $895=HEAP32[(($8)>>2)];
 var $896=(($895+$__i122)|0);
 var $899=$896;var $898=$894;label=263;break;
 case 263: 
 var $898;
 var $899;
 var $900=HEAP32[(($10)>>2)];
 var $901=(($900+12)|0);
 var $902=HEAP32[(($901)>>2)];
 var $903=(($900+16)|0);
 var $904=HEAP32[(($903)>>2)];
 var $905=($902|0)==($904|0);
 if($905){label=264;break;}else{label=266;break;}
 case 264: 
 var $907=$900;
 var $908=HEAP32[(($907)>>2)];
 var $909=(($908+36)|0);
 var $910=HEAP32[(($909)>>2)];
 var $911=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$910]($900) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=265;break; } else { label=20;break; }
 case 265: 
 var $extract_t80=(($911)&255);
 var $_pre348=HEAP32[(($__wn)>>2)];
 var $_040_off0=$extract_t80;var $914=$_pre348;label=267;break;
 case 266: 
 var $913=HEAP8[($902)];
 var $_040_off0=$913;var $914=$898;label=267;break;
 case 267: 
 var $914;
 var $_040_off0;
 var $915=(($914+1)|0);
 HEAP32[(($__wn)>>2)]=$915;
 HEAP8[($914)]=$_040_off0;
 var $916=HEAP32[(($__fd)>>2)];
 var $917=((($916)-(1))|0);
 HEAP32[(($__fd)>>2)]=$917;
 var $918=HEAP32[(($10)>>2)];
 var $919=(($918+12)|0);
 var $920=HEAP32[(($919)>>2)];
 var $921=(($918+16)|0);
 var $922=HEAP32[(($921)>>2)];
 var $923=($920|0)==($922|0);
 if($923){label=268;break;}else{label=270;break;}
 case 268: 
 var $925=$918;
 var $926=HEAP32[(($925)>>2)];
 var $927=(($926+40)|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$928]($918) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=269;break; } else { label=20;break; }
 case 269: 
 var $930=($917|0)>0;
 if($930){var $811=$899;var $810=$845;label=231;break;}else{var $933=$899;label=271;break;}
 case 270: 
 var $932=(($920+1)|0);
 HEAP32[(($919)>>2)]=$932;
 label=269;break;
 case 271: 
 var $933;
 var $934=HEAP32[(($__wn)>>2)];
 var $935=HEAP32[(($8)>>2)];
 var $936=($934|0)==($935|0);
 if($936){label=272;break;}else{var $__trailing_sign_1=$__trailing_sign_0269;var $943=$737;var $942=$736;var $941=$735;var $free130=$free131;var $940=$933;label=273;break;}
 case 272: 
 var $938=HEAP32[(($__err)>>2)];
 var $939=$938|4;
 HEAP32[(($__err)>>2)]=$939;
 var $_031=0;var $1047=$735;var $free135=$free131;label=308;break;
 case 273: 
 var $940;
 var $free130;
 var $941;
 var $942;
 var $943;
 var $__trailing_sign_1;
 var $944=((($__p_0271)+(1))|0);
 var $945=($944>>>0)<4;
 if($945){var $38=$940;var $free129266=$free130;var $37=$941;var $36=$942;var $35=$943;var $__trailing_sign_0269=$__trailing_sign_1;var $__p_0271=$944;label=3;break;}else{var $free129_lcssa=$free130;var $_lcssa207=$941;var $_lcssa224=$942;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=274;break;}
 case 274: 
 var $__trailing_sign_0_lcssa;
 var $_lcssa224;
 var $_lcssa207;
 var $free129_lcssa;
 var $946=($__trailing_sign_0_lcssa|0)==0;
 if($946){label=305;break;}else{label=275;break;}
 case 275: 
 var $947=$__trailing_sign_0_lcssa;
 var $948=$__trailing_sign_0_lcssa;
 var $949=(($947+1)|0);
 var $950=(($__trailing_sign_0_lcssa+8)|0);
 var $951=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;label=276;break;
 case 276: 
 var $__i_0;
 var $952=HEAP8[($948)];
 var $953=($952&255);
 var $954=$953&1;
 var $955=($954|0)==0;
 if($955){label=278;break;}else{label=277;break;}
 case 277: 
 var $957=HEAP32[(($951)>>2)];
 var $960=$957;label=279;break;
 case 278: 
 var $959=$953>>>1;
 var $960=$959;label=279;break;
 case 279: 
 var $960;
 var $961=($__i_0>>>0)<($960>>>0);
 if($961){label=280;break;}else{label=305;break;}
 case 280: 
 var $963=HEAP32[(($10)>>2)];
 var $964=($963|0)==0;
 if($964){var $979=0;label=286;break;}else{label=281;break;}
 case 281: 
 var $966=(($963+12)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=(($963+16)|0);
 var $969=HEAP32[(($968)>>2)];
 var $970=($967|0)==($969|0);
 if($970){label=282;break;}else{var $979=$963;label=286;break;}
 case 282: 
 var $972=$963;
 var $973=HEAP32[(($972)>>2)];
 var $974=(($973+36)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$975]($963) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=283;break; } else { label=18;break; }
 case 283: 
 var $977=($976|0)==-1;
 if($977){label=285;break;}else{label=284;break;}
 case 284: 
 var $_pre361=HEAP32[(($10)>>2)];
 var $979=$_pre361;label=286;break;
 case 285: 
 HEAP32[(($10)>>2)]=0;
 var $979=0;label=286;break;
 case 286: 
 var $979;
 var $980=($979|0)==0;
 var $981=HEAP32[(($11)>>2)];
 var $982=($981|0)==0;
 if($982){label=292;break;}else{label=287;break;}
 case 287: 
 var $984=(($981+12)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=(($981+16)|0);
 var $987=HEAP32[(($986)>>2)];
 var $988=($985|0)==($987|0);
 if($988){label=289;break;}else{label=288;break;}
 case 288: 
 if($980){label=294;break;}else{label=301;break;}
 case 289: 
 var $990=$981;
 var $991=HEAP32[(($990)>>2)];
 var $992=(($991+36)|0);
 var $993=HEAP32[(($992)>>2)];
 var $994=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$993]($981) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=290;break; } else { label=18;break; }
 case 290: 
 var $995=($994|0)==-1;
 if($995){label=291;break;}else{label=293;break;}
 case 291: 
 HEAP32[(($11)>>2)]=0;
 label=292;break;
 case 292: 
 if($980){label=301;break;}else{label=294;break;}
 case 293: 
 if($980){label=294;break;}else{label=301;break;}
 case 294: 
 var $997=HEAP32[(($10)>>2)];
 var $998=(($997+12)|0);
 var $999=HEAP32[(($998)>>2)];
 var $1000=(($997+16)|0);
 var $1001=HEAP32[(($1000)>>2)];
 var $1002=($999|0)==($1001|0);
 if($1002){label=295;break;}else{label=297;break;}
 case 295: 
 var $1004=$997;
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=(($1005+36)|0);
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1007]($997) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=18;break; }
 case 296: 
 var $extract_t=(($1008)&255);
 var $_052_off0=$extract_t;label=298;break;
 case 297: 
 var $1010=HEAP8[($999)];
 var $_052_off0=$1010;label=298;break;
 case 298: 
 var $_052_off0;
 var $1011=HEAP8[($948)];
 var $1012=$1011&1;
 var $1013=(($1012<<24)>>24)==0;
 if($1013){var $1016=$949;label=300;break;}else{label=299;break;}
 case 299: 
 var $1015=HEAP32[(($950)>>2)];
 var $1016=$1015;label=300;break;
 case 300: 
 var $1016;
 var $1017=(($1016+$__i_0)|0);
 var $1018=HEAP8[($1017)];
 var $1019=(($_052_off0<<24)>>24)==(($1018<<24)>>24);
 if($1019){label=302;break;}else{label=301;break;}
 case 301: 
 var $1021=HEAP32[(($__err)>>2)];
 var $1022=$1021|4;
 HEAP32[(($__err)>>2)]=$1022;
 var $_031=0;var $1047=$_lcssa207;var $free135=$free129_lcssa;label=308;break;
 case 302: 
 var $1024=((($__i_0)+(1))|0);
 var $1025=HEAP32[(($10)>>2)];
 var $1026=(($1025+12)|0);
 var $1027=HEAP32[(($1026)>>2)];
 var $1028=(($1025+16)|0);
 var $1029=HEAP32[(($1028)>>2)];
 var $1030=($1027|0)==($1029|0);
 if($1030){label=303;break;}else{label=304;break;}
 case 303: 
 var $1032=$1025;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=(($1033+40)|0);
 var $1035=HEAP32[(($1034)>>2)];
 var $1036=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1035]($1025) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1024;label=276;break; } else { label=18;break; }
 case 304: 
 var $1038=(($1027+1)|0);
 HEAP32[(($1026)>>2)]=$1038;
 var $__i_0=$1024;label=276;break;
 case 305: 
 var $1039=($_lcssa207|0)==($_lcssa224|0);
 if($1039){var $_031=1;var $1047=$_lcssa224;var $free135=$free129_lcssa;label=308;break;}else{label=306;break;}
 case 306: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa207,$_lcssa224,$__et);
 var $1041=HEAP32[(($__et)>>2)];
 var $1042=($1041|0)==0;
 if($1042){var $_031=1;var $1047=$_lcssa207;var $free135=$free129_lcssa;label=308;break;}else{label=307;break;}
 case 307: 
 var $1044=HEAP32[(($__err)>>2)];
 var $1045=$1044|4;
 HEAP32[(($__err)>>2)]=$1045;
 var $_031=0;var $1047=$_lcssa207;var $free135=$free129_lcssa;label=308;break;
 case 308: 
 var $free135;
 var $1047;
 var $_031;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1048=($1047|0)==0;
 if($1048){label=311;break;}else{label=309;break;}
 case 309: 
 var $1050=$1047;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free135]($1050) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=311;break; } else { label=310;break; }
 case 310: 
 var $1052$0 = ___cxa_find_matching_catch(-1, -1,0); var $1052$1 = tempRet0;
 var $1053=$1052$0;
 ___clang_call_terminate($1053);
 throw "Reached an unreachable!";
 case 311: 
 STACKTOP=sp;return $_031;
 case 312: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($2,$msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($1,11368,(50));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=512;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $10=HEAP32[((17336)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i)|0);
 HEAP32[(($13)>>2)]=17336;
 var $14=(($__p_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(28);
 var $15=(($__p_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$9,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $16=HEAP32[((17340)>>2)];
 var $17=((($16)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $32=$28;
 HEAP8[($__neg)]=0;
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($1)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$37,$__err,$__neg,$32,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 if($38){label=10;break;}else{label=22;break;}
 case 10: 
 var $41=$__v;
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=12;break;}else{label=11;break;}
 case 11: 
 var $46=(($__v+8)|0);
 var $47=HEAP32[(($46)>>2)];
 HEAP8[($47)]=0;
 var $48=(($__v+4)|0);
 HEAP32[(($48)>>2)]=0;
 label=13;break;
 case 12: 
 var $50=$__v;
 var $51=(($50+1)|0);
 HEAP8[($51)]=0;
 HEAP8[($41)]=0;
 label=13;break;
 case 13: 
 var $52=HEAP8[($__neg)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 var $_pre9=$28;
 if($54){label=17;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($_pre9)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($32,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=40;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 16: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 HEAP32[(($3)>>2)]=0;
 var $136=$2;var $_0312=$62;var $_0214=$61;label=41;break;
 case 17: 
 var $63=HEAP32[(($_pre9)>>2)];
 var $64=(($63+28)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($32,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $67=HEAP32[(($3)>>2)];
 var $68=HEAP32[(($__wn)>>2)];
 var $69=((($68)-(1))|0);
 var $70=($67>>>0)<($69>>>0);
 if($70){var $__w_05=$67;label=20;break;}else{var $__w_0_lcssa=$67;label=21;break;}
 case 19: 
 var $72=($75>>>0)<($69>>>0);
 if($72){var $__w_05=$75;label=20;break;}else{var $__w_0_lcssa=$75;label=21;break;}
 case 20: 
 var $__w_05;
 var $73=HEAP8[($__w_05)];
 var $74=(($73<<24)>>24)==(($66<<24)>>24);
 var $75=(($__w_05+1)|0);
 if($74){label=19;break;}else{var $__w_0_lcssa=$__w_05;label=21;break;}
 case 21: 
 var $__w_0_lcssa;
 var $76=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0_lcssa,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=40;break; }
 case 22: 
 var $78=(($__b)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){var $95=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=24;break;}else{var $95=$79;label=27;break;}
 case 24: 
 var $88=$79;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+36)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=40;break; }
 case 25: 
 var $93=($92|0)==-1;
 if($93){label=26;break;}else{var $95=$79;label=27;break;}
 case 26: 
 HEAP32[(($78)>>2)]=0;
 var $95=0;label=27;break;
 case 27: 
 var $95;
 var $96=($95|0)==0;
 var $97=($34|0)==0;
 if($97){label=33;break;}else{label=28;break;}
 case 28: 
 var $99=(($34+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($34+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 if($96){label=36;break;}else{label=35;break;}
 case 30: 
 var $105=$34;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 var $110=($109|0)==-1;
 if($110){label=32;break;}else{label=34;break;}
 case 32: 
 HEAP32[(($33)>>2)]=0;
 label=33;break;
 case 33: 
 if($96){label=35;break;}else{label=36;break;}
 case 34: 
 var $112=($34|0)==0;
 var $tmp=$96^$112;
 if($tmp){label=36;break;}else{label=35;break;}
 case 35: 
 var $114=HEAP32[(($__err)>>2)];
 var $115=$114|2;
 HEAP32[(($__err)>>2)]=$115;
 label=36;break;
 case 36: 
 var $116=(($agg_result)|0);
 HEAP32[(($116)>>2)]=$95;
 var $117=HEAP32[(($7)>>2)];
 var $118=(($117)|0);
 var $119=__ZNSt3__114__shared_count16__release_sharedEv($118);
 var $120=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $121=($120|0)==0;
 if($121){label=39;break;}else{label=37;break;}
 case 37: 
 var $123=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=38;break; }
 case 38: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1,0); var $125$1 = tempRet0;
 var $126=$125$0;
 ___clang_call_terminate($126);
 throw "Reached an unreachable!";
 case 39: 
 STACKTOP=sp;return;
 case 40: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $131=HEAP32[(($7)>>2)];
 var $132=(($131)|0);
 var $133=__ZNSt3__114__shared_count16__release_sharedEv($132);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $134=($_pre|0)==0;
 if($134){var $_0313=$130;var $_0215=$129;label=43;break;}else{var $136=$_pre;var $_0312=$130;var $_0214=$129;label=41;break;}
 case 41: 
 var $_0214;
 var $_0312;
 var $136;
 var $137=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]($136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0313=$_0312;var $_0215=$_0214;label=43;break; } else { label=42;break; }
 case 42: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1,0); var $139$1 = tempRet0;
 var $140=$139$0;
 ___clang_call_terminate($140);
 throw "Reached an unreachable!";
 case 43: 
 var $_0215;
 var $_0313;
 var $141$0=$_0215;
 var $141$1=0;
 var $142$0=$141$0;
 var $142$1=$_0313;
 ___resumeException($142$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=$__first;
 var $4=HEAP8[($2)];
 var $5=($4&255);
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $13=$10;label=4;break;
 case 3: 
 var $12=$5>>>1;
 var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14=$4&1;
 var $15=(($14<<24)>>24)==0;
 if($15){var $22=10;var $21=$4;label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&-2;
 var $phitmp=((($19)-(1))|0);
 var $20=(($18)&255);
 var $22=$phitmp;var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22;
 var $23=$__last;
 var $24=((($23)-($3))|0);
 var $25=($__last|0)==($__first|0);
 if($25){label=17;break;}else{label=7;break;}
 case 7: 
 var $27=((($22)-($13))|0);
 var $28=($27>>>0)<($24>>>0);
 if($28){label=8;break;}else{var $33=$21;label=9;break;}
 case 8: 
 var $30=((($13)+($24))|0);
 var $31=((($30)-($22))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$22,$31,$13,$13,0,0);
 var $_pre=HEAP8[($2)];
 var $33=$_pre;label=9;break;
 case 9: 
 var $33;
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=12;break;
 case 11: 
 var $40=(($1+1)|0);
 var $41=$40;label=12;break;
 case 12: 
 var $41;
 var $42=(($41+$13)|0);
 var $43=((($13)-($3))|0);
 var $scevgep=(($__last+$43)|0);
 var $scevgep4=$scevgep;
 var $_02=$__first;var $__p_03=$42;label=13;break;
 case 13: 
 var $__p_03;
 var $_02;
 var $45=HEAP8[($_02)];
 HEAP8[($__p_03)]=$45;
 var $46=(($__p_03+1)|0);
 var $47=(($_02+1)|0);
 var $48=($47|0)==($__last|0);
 if($48){label=14;break;}else{var $_02=$47;var $__p_03=$46;label=13;break;}
 case 14: 
 var $scevgep5=(($41+$scevgep4)|0);
 HEAP8[($scevgep5)]=0;
 var $50=((($13)+($24))|0);
 var $51=HEAP8[($2)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=16;break;}else{label=15;break;}
 case 15: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=17;break;
 case 16: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[($2)]=$58;
 label=17;break;
 case 17: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i33=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$4;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$6;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=$8;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=$11;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=$13;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast32=$1;
 var $20=(($__loc)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $23=HEAP32[((17808)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $26=(($__p_i_i_i)|0);
 HEAP32[(($26)>>2)]=17808;
 var $27=(($__p_i_i_i+4)|0);
 HEAP32[(($27)>>2)]=(28);
 var $28=(($__p_i_i_i+8)|0);
 HEAP32[(($28)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17808,$22,304);
 label=4;break;
 case 4: 
 var $29=HEAP32[((17812)>>2)];
 var $30=((($29)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $31=(($21+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($21+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=5;break;}else{label=6;break;}
 case 5: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,11336,(432));
 throw "Reached an unreachable!";
 case 7: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+44)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($tmpcast32,$45);
 var $50=$__pat;
 var $51=HEAP32[(($1)>>2)];
 tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $52=$41;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+32)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($2,$45);
 var $56=$__nsn;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=9;break;}else{label=8;break;}
 case 8: 
 var $61=(($__nsn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP8[($62)]=0;
 var $63=(($__nsn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=10;break;
 case 9: 
 var $65=$__nsn;
 var $66=(($65+1)|0);
 HEAP8[($66)]=0;
 HEAP8[($56)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 var $69=$68$0;
 ___clang_call_terminate($69);
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $70=HEAP32[(($52)>>2)];
 var $71=(($70+28)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($4,$45);
 var $73=$__psn;
 var $74=HEAP8[($73)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=14;break;}else{label=13;break;}
 case 13: 
 var $78=(($__psn+8)|0);
 var $79=HEAP32[(($78)>>2)];
 HEAP8[($79)]=0;
 var $80=(($__psn+4)|0);
 HEAP32[(($80)>>2)]=0;
 label=15;break;
 case 14: 
 var $82=$__psn;
 var $83=(($82+1)|0);
 HEAP8[($83)]=0;
 HEAP8[($73)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $86=$85$0;
 ___clang_call_terminate($86);
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $87=$41;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=FUNCTION_TABLE[$90]($45);
 HEAP8[($__dp)]=$91;
 var $92=HEAP32[(($87)>>2)];
 var $93=(($92+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($45);
 HEAP8[($__ts)]=$95;
 var $96=HEAP32[(($52)>>2)];
 var $97=(($96+20)|0);
 var $98=HEAP32[(($97)>>2)];
 FUNCTION_TABLE[$98]($6,$45);
 var $99=$__grp;
 var $100=HEAP8[($99)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=19;break;}else{label=18;break;}
 case 18: 
 var $104=(($__grp+8)|0);
 var $105=HEAP32[(($104)>>2)];
 HEAP8[($105)]=0;
 var $106=(($__grp+4)|0);
 HEAP32[(($106)>>2)]=0;
 label=20;break;
 case 19: 
 var $108=$__grp;
 var $109=(($108+1)|0);
 HEAP8[($109)]=0;
 HEAP8[($99)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1,0); var $111$1 = tempRet0;
 var $112=$111$0;
 ___clang_call_terminate($112);
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $113=HEAP32[(($52)>>2)];
 var $114=(($113+24)|0);
 var $115=HEAP32[(($114)>>2)];
 FUNCTION_TABLE[$115]($8,$45);
 var $116=$__sym;
 var $117=HEAP8[($116)];
 var $118=$117&1;
 var $119=(($118<<24)>>24)==0;
 if($119){label=24;break;}else{label=23;break;}
 case 23: 
 var $121=(($__sym+8)|0);
 var $122=HEAP32[(($121)>>2)];
 HEAP8[($122)]=0;
 var $123=(($__sym+4)|0);
 HEAP32[(($123)>>2)]=0;
 label=25;break;
 case 24: 
 var $125=$__sym;
 var $126=(($125+1)|0);
 HEAP8[($126)]=0;
 HEAP8[($116)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1,0); var $128$1 = tempRet0;
 var $129=$128$0;
 ___clang_call_terminate($129);
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 var $130=$41;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+36)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=FUNCTION_TABLE[$133]($45);
 var $storemerge=$134;label=54;break;
 case 28: 
 var $tmpcast=$10;
 var $136=(($__loc)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$__p_i_i_i33;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $139=HEAP32[((17816)>>2)];
 var $140=($139|0)==-1;
 if($140){label=30;break;}else{label=29;break;}
 case 29: 
 var $142=(($__p_i_i_i33)|0);
 HEAP32[(($142)>>2)]=17816;
 var $143=(($__p_i_i_i33+4)|0);
 HEAP32[(($143)>>2)]=(28);
 var $144=(($__p_i_i_i33+8)|0);
 HEAP32[(($144)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17816,$138,304);
 label=30;break;
 case 30: 
 var $145=HEAP32[((17820)>>2)];
 var $146=((($145)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $147=(($137+12)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($137+8)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=$148;
 var $152=$150;
 var $153=((($151)-($152))|0);
 var $154=$153>>2;
 var $155=($154>>>0)>($146>>>0);
 if($155){label=31;break;}else{label=32;break;}
 case 31: 
 var $156=(($150+($146<<2))|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($157|0)==0;
 if($158){label=32;break;}else{label=33;break;}
 case 32: 
 var $159=___cxa_allocate_exception(4);
 var $160=$159;
 __ZNSt8bad_castC2Ev($160);
 ___cxa_throw($159,11336,(432));
 throw "Reached an unreachable!";
 case 33: 
 var $161=$157;
 var $162=$157;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+44)|0);
 var $165=HEAP32[(($164)>>2)];
 FUNCTION_TABLE[$165]($tmpcast,$161);
 var $166=$__pat;
 var $167=HEAP32[(($10)>>2)];
 tempBigInt=$167;HEAP8[($166)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(3))|0)]=tempBigInt&0xff;
 var $168=$157;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+32)|0);
 var $171=HEAP32[(($170)>>2)];
 FUNCTION_TABLE[$171]($11,$161);
 var $172=$__nsn;
 var $173=HEAP8[($172)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){label=35;break;}else{label=34;break;}
 case 34: 
 var $177=(($__nsn+8)|0);
 var $178=HEAP32[(($177)>>2)];
 HEAP8[($178)]=0;
 var $179=(($__nsn+4)|0);
 HEAP32[(($179)>>2)]=0;
 label=36;break;
 case 35: 
 var $181=$__nsn;
 var $182=(($181+1)|0);
 HEAP8[($182)]=0;
 HEAP8[($172)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $184$0 = ___cxa_find_matching_catch(-1, -1,0); var $184$1 = tempRet0;
 var $185=$184$0;
 ___clang_call_terminate($185);
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($172)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($172)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $186=HEAP32[(($168)>>2)];
 var $187=(($186+28)|0);
 var $188=HEAP32[(($187)>>2)];
 FUNCTION_TABLE[$188]($13,$161);
 var $189=$__psn;
 var $190=HEAP8[($189)];
 var $191=$190&1;
 var $192=(($191<<24)>>24)==0;
 if($192){label=40;break;}else{label=39;break;}
 case 39: 
 var $194=(($__psn+8)|0);
 var $195=HEAP32[(($194)>>2)];
 HEAP8[($195)]=0;
 var $196=(($__psn+4)|0);
 HEAP32[(($196)>>2)]=0;
 label=41;break;
 case 40: 
 var $198=$__psn;
 var $199=(($198+1)|0);
 HEAP8[($199)]=0;
 HEAP8[($189)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $201$0 = ___cxa_find_matching_catch(-1, -1,0); var $201$1 = tempRet0;
 var $202=$201$0;
 ___clang_call_terminate($202);
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($189)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($189)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($189)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
 var $203=$157;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($161);
 HEAP8[($__dp)]=$207;
 var $208=HEAP32[(($203)>>2)];
 var $209=(($208+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=FUNCTION_TABLE[$210]($161);
 HEAP8[($__ts)]=$211;
 var $212=HEAP32[(($168)>>2)];
 var $213=(($212+20)|0);
 var $214=HEAP32[(($213)>>2)];
 FUNCTION_TABLE[$214]($15,$161);
 var $215=$__grp;
 var $216=HEAP8[($215)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=45;break;}else{label=44;break;}
 case 44: 
 var $220=(($__grp+8)|0);
 var $221=HEAP32[(($220)>>2)];
 HEAP8[($221)]=0;
 var $222=(($__grp+4)|0);
 HEAP32[(($222)>>2)]=0;
 label=46;break;
 case 45: 
 var $224=$__grp;
 var $225=(($224+1)|0);
 HEAP8[($225)]=0;
 HEAP8[($215)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $227$0 = ___cxa_find_matching_catch(-1, -1,0); var $227$1 = tempRet0;
 var $228=$227$0;
 ___clang_call_terminate($228);
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($215)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 var $229=HEAP32[(($168)>>2)];
 var $230=(($229+24)|0);
 var $231=HEAP32[(($230)>>2)];
 FUNCTION_TABLE[$231]($17,$161);
 var $232=$__sym;
 var $233=HEAP8[($232)];
 var $234=$233&1;
 var $235=(($234<<24)>>24)==0;
 if($235){label=50;break;}else{label=49;break;}
 case 49: 
 var $237=(($__sym+8)|0);
 var $238=HEAP32[(($237)>>2)];
 HEAP8[($238)]=0;
 var $239=(($__sym+4)|0);
 HEAP32[(($239)>>2)]=0;
 label=51;break;
 case 50: 
 var $241=$__sym;
 var $242=(($241+1)|0);
 HEAP8[($242)]=0;
 HEAP8[($232)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $244$0 = ___cxa_find_matching_catch(-1, -1,0); var $244$1 = tempRet0;
 var $245=$244$0;
 ___clang_call_terminate($245);
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($232)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($232)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($232)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $246=$157;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($161);
 var $storemerge=$250;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=$__grouping;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__grouping+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12|0)==0;
 if($13){label=24;break;}else{label=5;break;}
 case 5: 
 var $15=($__g|0)==($__g_end|0);
 if($15){var $24=$3;label=9;break;}else{label=6;break;}
 case 6: 
 var $16=((($__g_end)-(4))|0);
 var $17=($16>>>0)>($__g>>>0);
 if($17){var $_017=$__g;var $18=$16;label=7;break;}else{var $24=$3;label=9;break;}
 case 7: 
 var $18;
 var $_017;
 var $19=HEAP32[(($_017)>>2)];
 var $20=HEAP32[(($18)>>2)];
 HEAP32[(($_017)>>2)]=$20;
 HEAP32[(($18)>>2)]=$19;
 var $21=(($_017+4)|0);
 var $22=((($18)-(4))|0);
 var $23=($21>>>0)<($22>>>0);
 if($23){var $_017=$21;var $18=$22;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre_pre=HEAP8[($2)];
 var $24=$_pre_pre;label=9;break;
 case 9: 
 var $24;
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=(($__grouping+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $32=$29;label=12;break;
 case 11: 
 var $31=(($1+1)|0);
 var $32=$31;label=12;break;
 case 12: 
 var $32;
 var $33=($24&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=15;break;
 case 14: 
 var $40=$33>>>1;
 var $41=$40;label=15;break;
 case 15: 
 var $41;
 var $42=((($__g_end)-(4))|0);
 var $43=($42>>>0)>($__g>>>0);
 var $44=HEAP8[($32)];
 var $45=(($44<<24)>>24);
 var $_not10=(($44<<24)>>24)<1;
 var $46=(($44<<24)>>24)==127;
 var $or_cond11=$_not10|$46;
 if($43){label=16;break;}else{var $_lcssa7=$45;var $or_cond_lcssa=$or_cond11;label=21;break;}
 case 16: 
 var $47=(($32+$41)|0);
 var $48=$47;
 var $__ig_012=$32;var $__r_013=$__g;var $50=$45;var $or_cond14=$or_cond11;label=17;break;
 case 17: 
 var $or_cond14;
 var $50;
 var $__r_013;
 var $__ig_012;
 if($or_cond14){label=20;break;}else{label=18;break;}
 case 18: 
 var $52=HEAP32[(($__r_013)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 20: 
 var $56=$__ig_012;
 var $57=((($48)-($56))|0);
 var $58=($57|0)>1;
 var $59=(($__ig_012+1)|0);
 var $___ig_0=($58?$59:$__ig_012);
 var $60=(($__r_013+4)|0);
 var $61=($60>>>0)<($42>>>0);
 var $62=HEAP8[($___ig_0)];
 var $63=(($62<<24)>>24);
 var $_not=(($62<<24)>>24)<1;
 var $64=(($62<<24)>>24)==127;
 var $or_cond=$_not|$64;
 if($61){var $__ig_012=$___ig_0;var $__r_013=$60;var $50=$63;var $or_cond14=$or_cond;label=17;break;}else{var $_lcssa7=$63;var $or_cond_lcssa=$or_cond;label=21;break;}
 case 21: 
 var $or_cond_lcssa;
 var $_lcssa7;
 if($or_cond_lcssa){label=24;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[(($42)>>2)];
 var $67=($_lcssa7>>>0)<($66>>>0);
 var $68=($66|0)==0;
 var $or_cond5=$67|$68;
 if($or_cond5){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $__atoms=(sp)+(456);
 var $__nbuf=(sp)+(496);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=512;
 var $5=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $10=HEAP32[((17328)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i)|0);
 HEAP32[(($13)>>2)]=17328;
 var $14=(($__p_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(28);
 var $15=(($__p_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$9,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $16=HEAP32[((17332)>>2)];
 var $17=((($16)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $32=$28;
 HEAP8[($__neg)]=0;
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($1)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$37,$__err,$__neg,$32,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($38){label=10;break;}else{label=34;break;}
 case 10: 
 var $41=(($__atoms)|0);
 var $42=$28;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+48)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($32,4200,4210,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $47=(($__nbuf)|0);
 var $48=HEAP32[(($__wn)>>2)];
 var $49=HEAP32[(($3)>>2)];
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=($52|0)>392;
 if($53){label=12;break;}else{var $__nc_0=$47;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $54=$52>>2;
 var $55=((($54)+(2))|0);
 var $56=_malloc($55);
 var $57=($56|0)==0;
 if($57){label=13;break;}else{var $__nc_0=$56;var $__h_sroa_0_1=$56;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=$59$1;
 HEAP32[(($3)>>2)]=0;
 var $172=$2;var $_1412=$60;var $_114=$61;label=54;break;
 case 15: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 var $65=$63$1;
 var $_02=$65;var $_03=$64;label=53;break;
 case 16: 
 var $__h_sroa_0_0;
 var $67$0 = ___cxa_find_matching_catch(-1, -1); var $67$1 = tempRet0;
 var $eh_lpad_body$1=$67$1;var $eh_lpad_body$0=$67$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $68=$eh_lpad_body$0;
 var $69=$eh_lpad_body$1;
 var $70=($__h_sroa_0_0_lpad_body|0)==0;
 if($70){var $_02=$69;var $_03=$68;label=53;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $_02=$69;var $_03=$68;label=53;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $73=HEAP8[($__neg)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $77=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$77;label=21;break;
 case 21: 
 var $__nc_1;
 var $79=($49>>>0)<($48>>>0);
 if($79){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $80=(($__atoms+40)|0);
 var $81=$__atoms;
 var $__nc_29=$__nc_1;var $__w_010=$49;label=23;break;
 case 23: 
 var $__w_010;
 var $__nc_29;
 var $83=HEAP32[(($__w_010)>>2)];
 var $_08=$41;label=25;break;
 case 24: 
 var $85=($89|0)==($80|0);
 if($85){var $_0_lcssa=$80;label=26;break;}else{var $_08=$89;label=25;break;}
 case 25: 
 var $_08;
 var $87=HEAP32[(($_08)>>2)];
 var $88=($87|0)==($83|0);
 var $89=(($_08+4)|0);
 if($88){var $_0_lcssa=$_08;label=26;break;}else{label=24;break;}
 case 26: 
 var $_0_lcssa;
 var $90=$_0_lcssa;
 var $91=((($90)-($81))|0);
 var $92=$91>>2;
 var $93=((4200+$92)|0);
 var $94=HEAP8[($93)];
 HEAP8[($__nc_29)]=$94;
 var $95=(($__w_010+4)|0);
 var $96=(($__nc_29+1)|0);
 var $97=HEAP32[(($__wn)>>2)];
 var $98=($95>>>0)<($97>>>0);
 if($98){var $__nc_29=$96;var $__w_010=$95;label=23;break;}else{var $__nc_2_lcssa=$96;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $99=_sscanf($47,3200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $100=($99|0)==1;
 if($100){label=32;break;}else{label=28;break;}
 case 28: 
 var $102=___cxa_allocate_exception(8);
 var $103=$102;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($103,3080) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($102,11368,(50)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $106$0 = ___cxa_find_matching_catch(-1, -1); var $106$1 = tempRet0;
 ___cxa_free_exception($102);
 var $eh_lpad_body$1=$106$1;var $eh_lpad_body$0=$106$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $108=($__h_sroa_0_1|0)==0;
 if($108){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $110=(($__b)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){var $129=0;label=40;break;}else{label=35;break;}
 case 35: 
 var $114=(($111+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($111+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=36;break;}else{label=37;break;}
 case 36: 
 var $120=$111;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05=$124;label=38;break; } else { label=15;break; }
 case 37: 
 var $126=HEAP32[(($115)>>2)];
 var $_05=$126;label=38;break;
 case 38: 
 var $_05;
 var $127=($_05|0)==-1;
 if($127){label=39;break;}else{var $129=$111;label=40;break;}
 case 39: 
 HEAP32[(($110)>>2)]=0;
 var $129=0;label=40;break;
 case 40: 
 var $129;
 var $130=($129|0)==0;
 var $131=HEAP32[(($33)>>2)];
 var $132=($131|0)==0;
 if($132){label=46;break;}else{label=41;break;}
 case 41: 
 var $134=(($131+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($131+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=42;break;}else{label=43;break;}
 case 42: 
 var $140=$131;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_01=$144;label=44;break; } else { label=15;break; }
 case 43: 
 var $146=HEAP32[(($135)>>2)];
 var $_01=$146;label=44;break;
 case 44: 
 var $_01;
 var $147=($_01|0)==-1;
 if($147){label=45;break;}else{label=47;break;}
 case 45: 
 HEAP32[(($33)>>2)]=0;
 label=46;break;
 case 46: 
 if($130){label=48;break;}else{label=49;break;}
 case 47: 
 var $149=($131|0)==0;
 var $tmp=$130^$149;
 if($tmp){label=49;break;}else{label=48;break;}
 case 48: 
 var $151=HEAP32[(($__err)>>2)];
 var $152=$151|2;
 HEAP32[(($__err)>>2)]=$152;
 label=49;break;
 case 49: 
 var $154=(($agg_result)|0);
 HEAP32[(($154)>>2)]=$129;
 var $155=HEAP32[(($7)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $158=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $159=($158|0)==0;
 if($159){label=52;break;}else{label=50;break;}
 case 50: 
 var $161=HEAP32[(($4)>>2)];
 var $162=$158;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=51;break; }
 case 51: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1,0); var $164$1 = tempRet0;
 var $165=$164$0;
 ___clang_call_terminate($165);
 throw "Reached an unreachable!";
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 var $_03;
 var $_02;
 var $167=HEAP32[(($7)>>2)];
 var $168=(($167)|0);
 var $169=__ZNSt3__114__shared_count16__release_sharedEv($168);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $170=($_pre|0)==0;
 if($170){var $_1413=$_03;var $_115=$_02;label=56;break;}else{var $172=$_pre;var $_1412=$_03;var $_114=$_02;label=54;break;}
 case 54: 
 var $_114;
 var $_1412;
 var $172;
 var $173=HEAP32[(($4)>>2)];
 var $174=$172;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1413=$_1412;var $_115=$_114;label=56;break; } else { label=55;break; }
 case 55: 
 var $176$0 = ___cxa_find_matching_catch(-1, -1,0); var $176$1 = tempRet0;
 var $177=$176$0;
 ___clang_call_terminate($177);
 throw "Reached an unreachable!";
 case 56: 
 var $_115;
 var $_1413;
 var $178$0=$_1413;
 var $178$1=0;
 var $179$0=$178$0;
 var $179$1=$_115;
 ___resumeException($179$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $__gbuf=(sp)+(8);
 var $__pat=(sp)+(408);
 var $__dp=(sp)+(416);
 var $__ts=(sp)+(424);
 var $__grp=(sp)+(432);
 var $1=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=$__we;
 var $2=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $tmpcast=$__pat;
 var $3=$__sym;
 var $4=$__psn;
 var $5=$__nsn;
 var $6=$__spaces;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=26;break; }
 case 2: 
 var $8=(($__gbuf+400)|0);
 var $9=(($__wb)|0);
 var $10=HEAP32[(($9)>>2)];
 HEAP32[(($__wn)>>2)]=$10;
 var $11=(($__b)|0);
 var $12=(($__e)|0);
 var $13=$__pat;
 var $14=$__ct;
 var $15=(($__nsn+4)|0);
 var $16=(($__nsn+8)|0);
 var $17=(($__psn+4)|0);
 var $18=(($__psn+8)|0);
 var $19=$__flags&512;
 var $20=($19|0)!=0;
 var $21=(($__sym+4)|0);
 var $22=(($__sym+8)|0);
 var $23=(($__spaces+4)|0);
 var $24=(($__spaces+8)|0);
 var $25=(($13+3)|0);
 var $26=(($__grp+4)|0);
 var $free85200=512;var $29=$2;var $28=$2;var $27=$8;var $__trailing_sign_0203=0;var $__p_0205=0;label=3;break;
 case 3: 
 var $__p_0205;
 var $__trailing_sign_0203;
 var $27;
 var $28;
 var $29;
 var $free85200;
 var $30=HEAP32[(($11)>>2)];
 var $31=($30|0)==0;
 if($31){var $48=1;label=10;break;}else{label=4;break;}
 case 4: 
 var $33=(($30+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($30+16)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($34|0)==($36|0);
 if($37){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=$30;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_043=$43;label=7;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 6: 
 var $45=HEAP32[(($34)>>2)];
 var $_043=$45;label=7;break;
 case 7: 
 var $_043;
 var $46=($_043|0)==-1;
 if($46){label=9;break;}else{label=8;break;}
 case 8: 
 var $_pre266=HEAP32[(($11)>>2)];
 var $phitmp=($_pre266|0)==0;
 var $48=$phitmp;label=10;break;
 case 9: 
 HEAP32[(($11)>>2)]=0;
 var $48=1;label=10;break;
 case 10: 
 var $48;
 var $49=HEAP32[(($12)>>2)];
 var $50=($49|0)==0;
 if($50){label=16;break;}else{label=11;break;}
 case 11: 
 var $52=(($49+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($49+16)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($53|0)==($55|0);
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 var $58=$49;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_042=$62;label=14;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 13: 
 var $64=HEAP32[(($53)>>2)];
 var $_042=$64;label=14;break;
 case 14: 
 var $_042;
 var $65=($_042|0)==-1;
 if($65){label=15;break;}else{label=17;break;}
 case 15: 
 HEAP32[(($12)>>2)]=0;
 label=16;break;
 case 16: 
 if($48){var $free85_lcssa=$free85200;var $_lcssa=$29;var $_lcssa164=$28;var $__trailing_sign_0_lcssa=$__trailing_sign_0203;label=256;break;}else{var $70=0;label=18;break;}
 case 17: 
 var $67=($49|0)==0;
 var $68=$48^$67;
 if($68){var $70=$49;label=18;break;}else{var $free85_lcssa=$free85200;var $_lcssa=$29;var $_lcssa164=$28;var $__trailing_sign_0_lcssa=$__trailing_sign_0203;label=256;break;}
 case 18: 
 var $70;
 var $71=(($13+$__p_0205)|0);
 var $72=HEAP8[($71)];
 var $73=(($72<<24)>>24);
 switch(($73|0)){case 2:{ label=107;break;}case 4:{ var $__ng_0=0;var $571=$27;var $570=$28;var $569=$29;var $free88=$free85200;label=151;break;}case 1:{ label=30;break;}case 0:{ label=41;break;}case 3:{ label=66;break;}default:{var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}}break;
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $74=$_lcssa;var $free95=$free85_lcssa;label=27;break;
 case 20: 
 var $free95_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit102$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit102$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit102$1;var $lpad_phi$0=$lpad_loopexit102$0;var $74=$_ph_ph;var $free95=$free95_ph_ph;label=27;break;
 case 21: 
 var $lpad_loopexit116$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit116$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit116$1;var $lpad_phi$0=$lpad_loopexit116$0;var $74=$726;var $free95=$free87;label=27;break;
 case 22: 
 var $lpad_loopexit118$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit118$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit118$1;var $lpad_phi$0=$lpad_loopexit118$0;var $74=$29;var $free95=$free85200;label=27;break;
 case 23: 
 var $lpad_loopexit125$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit125$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit125$1;var $lpad_phi$0=$lpad_loopexit125$0;var $74=$29;var $free95=$free85200;label=27;break;
 case 24: 
 var $lpad_loopexit129$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit129$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit129$1;var $lpad_phi$0=$lpad_loopexit129$0;var $74=$29;var $free95=$free85200;label=27;break;
 case 25: 
 var $free95_ph_ph100_ph_ph_ph_ph_ph;
 var $_ph_ph101_ph_ph_ph_ph_ph;
 var $lpad_loopexit132$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit132$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit132$1;var $lpad_phi$0=$lpad_loopexit132$0;var $74=$_ph_ph101_ph_ph_ph_ph_ph;var $free95=$free95_ph_ph100_ph_ph_ph_ph_ph;label=27;break;
 case 26: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $74=$2;var $free95=512;label=27;break;
 case 27: 
 var $free95;
 var $74;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $75=($74|0)==0;
 if($75){label=294;break;}else{label=28;break;}
 case 28: 
 var $77=$74;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free95]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=29;break; }
 case 29: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 var $80=$79$0;
 ___clang_call_terminate($80);
 throw "Reached an unreachable!";
 case 30: 
 var $cond=($__p_0205|0)==3;
 if($cond){var $free85_lcssa=$free85200;var $_lcssa=$29;var $_lcssa164=$28;var $__trailing_sign_0_lcssa=$__trailing_sign_0203;label=256;break;}else{label=31;break;}
 case 31: 
 var $83=HEAP32[(($11)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($83+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=32;break;}else{label=33;break;}
 case 32: 
 var $90=$83;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_041=$94;label=34;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 33: 
 var $96=HEAP32[(($85)>>2)];
 var $_041=$96;label=34;break;
 case 34: 
 var $_041;
 var $97=HEAP32[(($14)>>2)];
 var $98=(($97+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($__ct,8192,$_041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 35: 
 if($100){label=36;break;}else{label=40;break;}
 case 36: 
 var $102=HEAP32[(($11)>>2)];
 var $103=(($102+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($102+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=37;break;}else{label=38;break;}
 case 37: 
 var $109=$102;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+40)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_040=$113;label=39;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 38: 
 var $115=(($104+4)|0);
 HEAP32[(($103)>>2)]=$115;
 var $116=HEAP32[(($104)>>2)];
 var $_040=$116;label=39;break;
 case 39: 
 var $_040;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 40: 
 var $118=HEAP32[(($__err)>>2)];
 var $119=$118|4;
 HEAP32[(($__err)>>2)]=$119;
 var $_026=0;var $1021=$29;var $free91=$free85200;label=290;break;
 case 41: 
 var $121=($__p_0205|0)==3;
 if($121){var $free85_lcssa=$free85200;var $_lcssa=$29;var $_lcssa164=$28;var $__trailing_sign_0_lcssa=$__trailing_sign_0203;label=256;break;}else{var $122=$70;label=42;break;}
 case 42: 
 var $122;
 var $123=HEAP32[(($11)>>2)];
 var $124=($123|0)==0;
 if($124){var $141=1;label=49;break;}else{label=43;break;}
 case 43: 
 var $126=(($123+12)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($123+16)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=($127|0)==($129|0);
 if($130){label=44;break;}else{label=45;break;}
 case 44: 
 var $132=$123;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_039=$136;label=46;break; } else { label=24;break; }
 case 45: 
 var $138=HEAP32[(($127)>>2)];
 var $_039=$138;label=46;break;
 case 46: 
 var $_039;
 var $139=($_039|0)==-1;
 if($139){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre267=HEAP32[(($11)>>2)];
 var $phitmp284=($_pre267|0)==0;
 var $141=$phitmp284;label=49;break;
 case 48: 
 HEAP32[(($11)>>2)]=0;
 var $141=1;label=49;break;
 case 49: 
 var $141;
 var $142=($122|0)==0;
 if($142){label=55;break;}else{label=50;break;}
 case 50: 
 var $144=(($122+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($122+16)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($145|0)==($147|0);
 if($148){label=51;break;}else{label=52;break;}
 case 51: 
 var $150=$122;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+36)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_038=$154;label=53;break; } else { label=24;break; }
 case 52: 
 var $156=HEAP32[(($145)>>2)];
 var $_038=$156;label=53;break;
 case 53: 
 var $_038;
 var $157=($_038|0)==-1;
 if($157){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($12)>>2)]=0;
 label=55;break;
 case 55: 
 if($141){var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}else{var $162=0;label=57;break;}
 case 56: 
 var $159=($122|0)==0;
 var $160=$141^$159;
 if($160){var $162=$122;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}
 case 57: 
 var $162;
 var $163=HEAP32[(($11)>>2)];
 var $164=(($163+12)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($163+16)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($165|0)==($167|0);
 if($168){label=58;break;}else{label=59;break;}
 case 58: 
 var $170=$163;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_037=$174;label=60;break; } else { label=24;break; }
 case 59: 
 var $176=HEAP32[(($165)>>2)];
 var $_037=$176;label=60;break;
 case 60: 
 var $_037;
 var $177=HEAP32[(($14)>>2)];
 var $178=(($177+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($__ct,8192,$_037) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=24;break; }
 case 61: 
 if($180){label=62;break;}else{var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}
 case 62: 
 var $182=HEAP32[(($11)>>2)];
 var $183=(($182+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($182+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=63;break;}else{label=64;break;}
 case 63: 
 var $189=$182;
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+40)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$192]($182) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_036=$193;label=65;break; } else { label=24;break; }
 case 64: 
 var $195=(($184+4)|0);
 HEAP32[(($183)>>2)]=$195;
 var $196=HEAP32[(($184)>>2)];
 var $_036=$196;label=65;break;
 case 65: 
 var $_036;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_036) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $122=$162;label=42;break; } else { label=24;break; }
 case 66: 
 var $197=HEAP8[($4)];
 var $198=($197&255);
 var $199=$198&1;
 var $200=($199|0)==0;
 var $201=HEAP32[(($17)>>2)];
 var $202=$198>>>1;
 var $203=($200?$202:$201);
 var $204=HEAP8[($5)];
 var $205=($204&255);
 var $206=$205&1;
 var $207=($206|0)==0;
 var $208=HEAP32[(($15)>>2)];
 var $209=$205>>>1;
 var $210=($207?$209:$208);
 var $211=(((-$210))|0);
 var $212=($203|0)==($211|0);
 if($212){var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}else{label=67;break;}
 case 67: 
 var $213=HEAP32[(($17)>>2)];
 var $214=$198>>>1;
 var $215=($200?$214:$213);
 var $216=($215|0)==0;
 if($216){label=69;break;}else{label=68;break;}
 case 68: 
 var $217=HEAP32[(($15)>>2)];
 var $218=$205>>>1;
 var $219=($207?$218:$217);
 var $220=($219|0)==0;
 if($220){label=69;break;}else{label=89;break;}
 case 69: 
 var $221=HEAP32[(($17)>>2)];
 var $222=$198>>>1;
 var $223=($200?$222:$221);
 var $224=($223|0)==0;
 var $225=HEAP32[(($11)>>2)];
 var $226=(($225+12)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($225+16)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($227|0)==($229|0);
 if($224){label=80;break;}else{label=70;break;}
 case 70: 
 if($230){label=71;break;}else{label=73;break;}
 case 71: 
 var $233=$225;
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+36)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 72: 
 var $_pre269=HEAP8[($4)];
 var $_033=$237;var $240=$_pre269;label=74;break;
 case 73: 
 var $239=HEAP32[(($227)>>2)];
 var $_033=$239;var $240=$197;label=74;break;
 case 74: 
 var $240;
 var $_033;
 var $241=$240&1;
 var $242=(($241<<24)>>24)==0;
 var $243=HEAP32[(($18)>>2)];
 var $_=($242?$17:$243);
 var $244=HEAP32[(($_)>>2)];
 var $245=($_033|0)==($244|0);
 if($245){label=75;break;}else{label=79;break;}
 case 75: 
 var $247=HEAP32[(($11)>>2)];
 var $248=(($247+12)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($247+16)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($249|0)==($251|0);
 if($252){label=76;break;}else{label=77;break;}
 case 76: 
 var $254=$247;
 var $255=HEAP32[(($254)>>2)];
 var $256=(($255+40)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$257]($247) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 77: 
 var $260=(($249+4)|0);
 HEAP32[(($248)>>2)]=$260;
 label=78;break;
 case 78: 
 var $261=HEAP8[($4)];
 var $262=($261&255);
 var $263=$262&1;
 var $264=($263|0)==0;
 var $265=HEAP32[(($17)>>2)];
 var $266=$262>>>1;
 var $267=($264?$266:$265);
 var $268=($267>>>0)>1;
 var $__psn___trailing_sign_0=($268?$__psn:$__trailing_sign_0203);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;
 case 79: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;
 case 80: 
 if($230){label=81;break;}else{label=83;break;}
 case 81: 
 var $272=$225;
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+36)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$275]($225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 82: 
 var $_pre268=HEAP8[($5)];
 var $_029=$276;var $279=$_pre268;label=84;break;
 case 83: 
 var $278=HEAP32[(($227)>>2)];
 var $_029=$278;var $279=$204;label=84;break;
 case 84: 
 var $279;
 var $_029;
 var $280=$279&1;
 var $281=(($280<<24)>>24)==0;
 var $282=HEAP32[(($16)>>2)];
 var $_288=($281?$15:$282);
 var $283=HEAP32[(($_288)>>2)];
 var $284=($_029|0)==($283|0);
 if($284){label=85;break;}else{var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}
 case 85: 
 var $286=HEAP32[(($11)>>2)];
 var $287=(($286+12)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(($286+16)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=($288|0)==($290|0);
 if($291){label=86;break;}else{label=87;break;}
 case 86: 
 var $293=$286;
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294+40)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$296]($286) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 87: 
 var $299=(($288+4)|0);
 HEAP32[(($287)>>2)]=$299;
 label=88;break;
 case 88: 
 HEAP8[($__neg)]=1;
 var $300=HEAP8[($5)];
 var $301=($300&255);
 var $302=$301&1;
 var $303=($302|0)==0;
 var $304=HEAP32[(($15)>>2)];
 var $305=$301>>>1;
 var $306=($303?$305:$304);
 var $307=($306>>>0)>1;
 var $__nsn___trailing_sign_0=($307?$__nsn:$__trailing_sign_0203);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;
 case 89: 
 var $309=HEAP32[(($11)>>2)];
 var $310=(($309+12)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=(($309+16)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=($311|0)==($313|0);
 if($314){label=90;break;}else{label=92;break;}
 case 90: 
 var $316=$309;
 var $317=HEAP32[(($316)>>2)];
 var $318=(($317+36)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$319]($309) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 91: 
 var $_pre270=HEAP8[($4)];
 var $_024=$320;var $323=$_pre270;label=93;break;
 case 92: 
 var $322=HEAP32[(($311)>>2)];
 var $_024=$322;var $323=$197;label=93;break;
 case 93: 
 var $323;
 var $_024;
 var $324=$323&1;
 var $325=(($324<<24)>>24)==0;
 var $326=HEAP32[(($18)>>2)];
 var $_289=($325?$17:$326);
 var $327=HEAP32[(($_289)>>2)];
 var $328=($_024|0)==($327|0);
 var $329=HEAP32[(($11)>>2)];
 var $330=(($329+12)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($329+16)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=($331|0)==($333|0);
 if($328){label=94;break;}else{label=98;break;}
 case 94: 
 if($334){label=95;break;}else{label=96;break;}
 case 95: 
 var $337=$329;
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338+40)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$340]($329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 96: 
 var $343=(($331+4)|0);
 HEAP32[(($330)>>2)]=$343;
 label=97;break;
 case 97: 
 var $344=HEAP8[($4)];
 var $345=($344&255);
 var $346=$345&1;
 var $347=($346|0)==0;
 var $348=HEAP32[(($17)>>2)];
 var $349=$345>>>1;
 var $350=($347?$349:$348);
 var $351=($350>>>0)>1;
 var $__psn___trailing_sign_072=($351?$__psn:$__trailing_sign_0203);
 var $__trailing_sign_1=$__psn___trailing_sign_072;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;
 case 98: 
 if($334){label=99;break;}else{label=100;break;}
 case 99: 
 var $354=$329;
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+36)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$357]($329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_020=$358;label=101;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 100: 
 var $360=HEAP32[(($331)>>2)];
 var $_020=$360;label=101;break;
 case 101: 
 var $_020;
 var $361=HEAP8[($5)];
 var $362=$361&1;
 var $363=(($362<<24)>>24)==0;
 var $364=HEAP32[(($16)>>2)];
 var $_290=($363?$15:$364);
 var $365=HEAP32[(($_290)>>2)];
 var $366=($_020|0)==($365|0);
 if($366){label=102;break;}else{label=106;break;}
 case 102: 
 var $368=HEAP32[(($11)>>2)];
 var $369=(($368+12)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=(($368+16)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=($370|0)==($372|0);
 if($373){label=103;break;}else{label=104;break;}
 case 103: 
 var $375=$368;
 var $376=HEAP32[(($375)>>2)];
 var $377=(($376+40)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$378]($368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$29;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free85200;label=25;break; }
 case 104: 
 var $381=(($370+4)|0);
 HEAP32[(($369)>>2)]=$381;
 label=105;break;
 case 105: 
 HEAP8[($__neg)]=1;
 var $382=HEAP8[($5)];
 var $383=($382&255);
 var $384=$383&1;
 var $385=($384|0)==0;
 var $386=HEAP32[(($15)>>2)];
 var $387=$383>>>1;
 var $388=($385?$387:$386);
 var $389=($388>>>0)>1;
 var $__nsn___trailing_sign_073=($389?$__nsn:$__trailing_sign_0203);
 var $__trailing_sign_1=$__nsn___trailing_sign_073;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;
 case 106: 
 var $391=HEAP32[(($__err)>>2)];
 var $392=$391|4;
 HEAP32[(($__err)>>2)]=$392;
 var $_026=0;var $1021=$29;var $free91=$free85200;label=290;break;
 case 107: 
 var $394=($__trailing_sign_0203|0)!=0;
 var $395=($__p_0205>>>0)<2;
 var $or_cond=$394|$395;
 if($or_cond){label=111;break;}else{label=108;break;}
 case 108: 
 var $397=($__p_0205|0)==2;
 if($397){label=109;break;}else{var $402=0;label=110;break;}
 case 109: 
 var $399=HEAP8[($25)];
 var $400=(($399<<24)>>24)!=0;
 var $402=$400;label=110;break;
 case 110: 
 var $402;
 var $brmerge=$20|$402;
 if($brmerge){label=111;break;}else{var $__trailing_sign_1=0;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}
 case 111: 
 var $403=HEAP8[($3)];
 var $404=$403&1;
 var $405=(($404<<24)>>24)==0;
 var $406=HEAP32[(($22)>>2)];
 var $_291=($405?$21:$406);
 var $407=($__p_0205|0)==0;
 if($407){var $__sym_curr_char_sroa_0_0=$_291;var $469=$403;var $468=$70;label=124;break;}else{label=112;break;}
 case 112: 
 var $409=((($__p_0205)-(1))|0);
 var $410=(($13+$409)|0);
 var $411=HEAP8[($410)];
 var $switch=($411&255)<2;
 if($switch){var $__sym_space_end_sroa_0_0=$_291;var $412=$403;label=113;break;}else{var $__sym_curr_char_sroa_0_0=$_291;var $469=$403;var $468=$70;label=124;break;}
 case 113: 
 var $412;
 var $__sym_space_end_sroa_0_0;
 var $413=$412&1;
 var $414=(($413<<24)>>24)==0;
 var $415=HEAP32[(($22)>>2)];
 var $_292=($414?$21:$415);
 var $416=($412&255);
 var $417=$416&1;
 var $418=($417|0)==0;
 var $419=HEAP32[(($21)>>2)];
 var $420=$416>>>1;
 var $421=($418?$420:$419);
 var $422=(($_292+($421<<2))|0);
 var $423=($__sym_space_end_sroa_0_0|0)==($422|0);
 if($423){var $431=$412;label=118;break;}else{label=114;break;}
 case 114: 
 var $425=HEAP32[(($__sym_space_end_sroa_0_0)>>2)];
 var $426=HEAP32[(($14)>>2)];
 var $427=(($426+12)|0);
 var $428=HEAP32[(($427)>>2)];
 var $429=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$428]($__ct,8192,$425) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=22;break; }
 case 115: 
 if($429){label=116;break;}else{label=117;break;}
 case 116: 
 var $430=(($__sym_space_end_sroa_0_0+4)|0);
 var $_pre271=HEAP8[($3)];
 var $__sym_space_end_sroa_0_0=$430;var $412=$_pre271;label=113;break;
 case 117: 
 var $_pre272=HEAP8[($3)];
 var $431=$_pre272;label=118;break;
 case 118: 
 var $431;
 var $432=$431&1;
 var $433=(($432<<24)>>24)==0;
 var $434=HEAP32[(($22)>>2)];
 var $_293=($433?$21:$434);
 var $435=$__sym_space_end_sroa_0_0;
 var $436=$_293;
 var $437=((($435)-($436))|0);
 var $438=$437>>2;
 var $439=HEAP8[($6)];
 var $440=($439&255);
 var $441=$440&1;
 var $442=($441|0)==0;
 var $443=HEAP32[(($23)>>2)];
 var $444=$440>>>1;
 var $445=($442?$444:$443);
 var $446=($438>>>0)>($445>>>0);
 if($446){label=123;break;}else{label=119;break;}
 case 119: 
 var $447=$439&1;
 var $448=(($447<<24)>>24)==0;
 var $449=HEAP32[(($24)>>2)];
 var $_294=($448?$23:$449);
 var $450=HEAP32[(($23)>>2)];
 var $451=$440>>>1;
 var $452=($442?$451:$450);
 var $_sum=((($452)-($438))|0);
 var $453=(($_294+($_sum<<2))|0);
 var $454=HEAP32[(($24)>>2)];
 var $_295=($448?$23:$454);
 var $455=HEAP32[(($23)>>2)];
 var $456=$440>>>1;
 var $457=($442?$456:$455);
 var $458=(($_295+($457<<2))|0);
 var $459=HEAP32[(($22)>>2)];
 var $_296=($433?$21:$459);
 var $460=($453|0)==($458|0);
 if($460){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $469=$431;var $468=$70;label=124;break;}else{var $_sroa_052_0122=$453;var $_sroa_051_0123=$_296;label=120;break;}
 case 120: 
 var $_sroa_051_0123;
 var $_sroa_052_0122;
 var $461=HEAP32[(($_sroa_052_0122)>>2)];
 var $462=HEAP32[(($_sroa_051_0123)>>2)];
 var $463=($461|0)==($462|0);
 if($463){label=121;break;}else{label=123;break;}
 case 121: 
 var $464=(($_sroa_052_0122+4)|0);
 var $465=($464|0)==($458|0);
 if($465){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $469=$431;var $468=$70;label=124;break;}else{label=122;break;}
 case 122: 
 var $466=(($_sroa_051_0123+4)|0);
 var $_sroa_052_0122=$464;var $_sroa_051_0123=$466;label=120;break;
 case 123: 
 var $467=HEAP32[(($22)>>2)];
 var $_297=($433?$21:$467);
 var $__sym_curr_char_sroa_0_0=$_297;var $469=$431;var $468=$70;label=124;break;
 case 124: 
 var $468;
 var $469;
 var $__sym_curr_char_sroa_0_0;
 var $470=$469&1;
 var $471=(($470<<24)>>24)==0;
 var $472=HEAP32[(($22)>>2)];
 var $_298=($471?$21:$472);
 var $473=($469&255);
 var $474=$473&1;
 var $475=($474|0)==0;
 var $476=HEAP32[(($21)>>2)];
 var $477=$473>>>1;
 var $478=($475?$477:$476);
 var $479=(($_298+($478<<2))|0);
 var $480=($__sym_curr_char_sroa_0_0|0)==($479|0);
 if($480){label=148;break;}else{label=125;break;}
 case 125: 
 var $482=HEAP32[(($11)>>2)];
 var $483=($482|0)==0;
 if($483){var $500=1;label=132;break;}else{label=126;break;}
 case 126: 
 var $485=(($482+12)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=(($482+16)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=($486|0)==($488|0);
 if($489){label=127;break;}else{label=128;break;}
 case 127: 
 var $491=$482;
 var $492=HEAP32[(($491)>>2)];
 var $493=(($492+36)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$494]($482) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_012=$495;label=129;break; } else { label=23;break; }
 case 128: 
 var $497=HEAP32[(($486)>>2)];
 var $_012=$497;label=129;break;
 case 129: 
 var $_012;
 var $498=($_012|0)==-1;
 if($498){label=131;break;}else{label=130;break;}
 case 130: 
 var $_pre273=HEAP32[(($11)>>2)];
 var $phitmp283=($_pre273|0)==0;
 var $500=$phitmp283;label=132;break;
 case 131: 
 HEAP32[(($11)>>2)]=0;
 var $500=1;label=132;break;
 case 132: 
 var $500;
 var $501=($468|0)==0;
 if($501){label=138;break;}else{label=133;break;}
 case 133: 
 var $503=(($468+12)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=(($468+16)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=($504|0)==($506|0);
 if($507){label=134;break;}else{label=135;break;}
 case 134: 
 var $509=$468;
 var $510=HEAP32[(($509)>>2)];
 var $511=(($510+36)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$512]($468) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_011=$513;label=136;break; } else { label=23;break; }
 case 135: 
 var $515=HEAP32[(($504)>>2)];
 var $_011=$515;label=136;break;
 case 136: 
 var $_011;
 var $516=($_011|0)==-1;
 if($516){label=137;break;}else{label=139;break;}
 case 137: 
 HEAP32[(($12)>>2)]=0;
 label=138;break;
 case 138: 
 if($500){label=148;break;}else{var $521=0;label=140;break;}
 case 139: 
 var $518=($468|0)==0;
 var $519=$500^$518;
 if($519){var $521=$468;label=140;break;}else{label=148;break;}
 case 140: 
 var $521;
 var $522=HEAP32[(($11)>>2)];
 var $523=(($522+12)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($522+16)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=($524|0)==($526|0);
 if($527){label=141;break;}else{label=142;break;}
 case 141: 
 var $529=$522;
 var $530=HEAP32[(($529)>>2)];
 var $531=(($530+36)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$532]($522) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_013=$533;label=143;break; } else { label=23;break; }
 case 142: 
 var $535=HEAP32[(($524)>>2)];
 var $_013=$535;label=143;break;
 case 143: 
 var $_013;
 var $536=HEAP32[(($__sym_curr_char_sroa_0_0)>>2)];
 var $537=($_013|0)==($536|0);
 if($537){label=144;break;}else{label=148;break;}
 case 144: 
 var $539=HEAP32[(($11)>>2)];
 var $540=(($539+12)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=(($539+16)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=($541|0)==($543|0);
 if($544){label=145;break;}else{label=146;break;}
 case 145: 
 var $546=$539;
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+40)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$549]($539) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=23;break; }
 case 146: 
 var $552=(($541+4)|0);
 HEAP32[(($540)>>2)]=$552;
 label=147;break;
 case 147: 
 var $553=(($__sym_curr_char_sroa_0_0+4)|0);
 var $_pre=HEAP8[($3)];
 var $__sym_curr_char_sroa_0_0=$553;var $469=$_pre;var $468=$521;label=124;break;
 case 148: 
 if($20){label=149;break;}else{var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}
 case 149: 
 var $554=HEAP8[($3)];
 var $555=$554&1;
 var $556=(($555<<24)>>24)==0;
 var $557=HEAP32[(($22)>>2)];
 var $_299=($556?$21:$557);
 var $558=($554&255);
 var $559=$558&1;
 var $560=($559|0)==0;
 var $561=HEAP32[(($21)>>2)];
 var $562=$558>>>1;
 var $563=($560?$562:$561);
 var $564=(($_299+($563<<2))|0);
 var $565=($__sym_curr_char_sroa_0_0|0)==($564|0);
 if($565){var $__trailing_sign_1=$__trailing_sign_0203;var $914=$27;var $913=$28;var $912=$29;var $free86=$free85200;label=255;break;}else{label=150;break;}
 case 150: 
 var $567=HEAP32[(($__err)>>2)];
 var $568=$567|4;
 HEAP32[(($__err)>>2)]=$568;
 var $_026=0;var $1021=$29;var $free91=$free85200;label=290;break;
 case 151: 
 var $free88;
 var $569;
 var $570;
 var $571;
 var $__ng_0;
 var $572=HEAP32[(($11)>>2)];
 var $573=($572|0)==0;
 if($573){var $590=1;label=158;break;}else{label=152;break;}
 case 152: 
 var $575=(($572+12)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=(($572+16)|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($576|0)==($578|0);
 if($579){label=153;break;}else{label=154;break;}
 case 153: 
 var $581=$572;
 var $582=HEAP32[(($581)>>2)];
 var $583=(($582+36)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$584]($572) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_016=$585;label=155;break; } else { var $_ph_ph=$569;var $free95_ph_ph=$free88;label=20;break; }
 case 154: 
 var $587=HEAP32[(($576)>>2)];
 var $_016=$587;label=155;break;
 case 155: 
 var $_016;
 var $588=($_016|0)==-1;
 if($588){label=157;break;}else{label=156;break;}
 case 156: 
 var $_pre274=HEAP32[(($11)>>2)];
 var $phitmp280=($_pre274|0)==0;
 var $590=$phitmp280;label=158;break;
 case 157: 
 HEAP32[(($11)>>2)]=0;
 var $590=1;label=158;break;
 case 158: 
 var $590;
 var $591=HEAP32[(($12)>>2)];
 var $592=($591|0)==0;
 if($592){label=164;break;}else{label=159;break;}
 case 159: 
 var $594=(($591+12)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=(($591+16)|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=($595|0)==($597|0);
 if($598){label=160;break;}else{label=161;break;}
 case 160: 
 var $600=$591;
 var $601=HEAP32[(($600)>>2)];
 var $602=(($601+36)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$603]($591) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_015=$604;label=162;break; } else { var $_ph_ph=$569;var $free95_ph_ph=$free88;label=20;break; }
 case 161: 
 var $606=HEAP32[(($595)>>2)];
 var $_015=$606;label=162;break;
 case 162: 
 var $_015;
 var $607=($_015|0)==-1;
 if($607){label=163;break;}else{label=165;break;}
 case 163: 
 HEAP32[(($12)>>2)]=0;
 label=164;break;
 case 164: 
 if($590){label=189;break;}else{label=166;break;}
 case 165: 
 var $609=($591|0)==0;
 var $610=$590^$609;
 if($610){label=166;break;}else{label=189;break;}
 case 166: 
 var $612=HEAP32[(($11)>>2)];
 var $613=(($612+12)|0);
 var $614=HEAP32[(($613)>>2)];
 var $615=(($612+16)|0);
 var $616=HEAP32[(($615)>>2)];
 var $617=($614|0)==($616|0);
 if($617){label=167;break;}else{label=168;break;}
 case 167: 
 var $619=$612;
 var $620=HEAP32[(($619)>>2)];
 var $621=(($620+36)|0);
 var $622=HEAP32[(($621)>>2)];
 var $623=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$622]($612) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_017=$623;label=169;break; } else { var $_ph_ph=$569;var $free95_ph_ph=$free88;label=20;break; }
 case 168: 
 var $625=HEAP32[(($614)>>2)];
 var $_017=$625;label=169;break;
 case 169: 
 var $_017;
 var $626=HEAP32[(($14)>>2)];
 var $627=(($626+12)|0);
 var $628=HEAP32[(($627)>>2)];
 var $629=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$628]($__ct,2048,$_017) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { var $_ph_ph=$569;var $free95_ph_ph=$free88;label=20;break; }
 case 170: 
 if($629){label=171;break;}else{label=175;break;}
 case 171: 
 var $631=HEAP32[(($__wn)>>2)];
 var $632=HEAP32[(($0)>>2)];
 var $633=($631|0)==($632|0);
 if($633){label=172;break;}else{var $636=$631;label=174;break;}
 case 172: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { var $_ph_ph=$569;var $free95_ph_ph=$free88;label=20;break; }
 case 173: 
 var $_pre275=HEAP32[(($__wn)>>2)];
 var $636=$_pre275;label=174;break;
 case 174: 
 var $636;
 var $637=(($636+4)|0);
 HEAP32[(($__wn)>>2)]=$637;
 HEAP32[(($636)>>2)]=$_017;
 var $638=((($__ng_0)+(1))|0);
 var $__ng_1=$638;var $681=$571;var $680=$570;var $679=$569;var $free89=$free88;label=186;break;
 case 175: 
 var $639=HEAP8[($1)];
 var $640=($639&255);
 var $641=$640&1;
 var $642=($641|0)==0;
 var $643=HEAP32[(($26)>>2)];
 var $644=$640>>>1;
 var $645=($642?$644:$643);
 var $646=($645|0)==0;
 var $647=($__ng_0|0)==0;
 var $or_cond75=$646|$647;
 if($or_cond75){label=189;break;}else{label=176;break;}
 case 176: 
 var $649=HEAP32[(($__ts)>>2)];
 var $650=($_017|0)==($649|0);
 if($650){label=177;break;}else{label=189;break;}
 case 177: 
 var $652=($570|0)==($571|0);
 if($652){label=178;break;}else{var $676=$571;var $675=$570;var $674=$569;var $free90=$free88;label=185;break;}
 case 178: 
 var $654=($free88|0)!=((512)|0);
 var $655=$570;
 var $656=$569;
 var $657=((($655)-($656))|0);
 var $658=($657>>>0)<2147483647;
 var $659=$657<<1;
 var $__i=($658?$659:-1);
 var $660=$657>>2;
 if($654){label=179;break;}else{var $663=0;label=180;break;}
 case 179: 
 var $phitmp_i=$569;
 var $663=$phitmp_i;label=180;break;
 case 180: 
 var $663;
 var $664=_realloc($663,$__i);
 var $665=$664;
 var $666=($664|0)==0;
 if($666){label=181;break;}else{label=182;break;}
 case 181: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { var $_ph_ph=$569;var $free95_ph_ph=$free88;label=20;break; }
 case 182: 
 var $668=($569|0)==0;
 var $or_cond97=$654|$668;
 if($or_cond97){label=184;break;}else{label=183;break;}
 case 183: 
 label=184;break;
 case 184: 
 var $670=$__i>>>2;
 var $671=(($665+($660<<2))|0);
 var $672=(($665+($670<<2))|0);
 var $676=$672;var $675=$671;var $674=$665;var $free90=260;label=185;break;
 case 185: 
 var $free90;
 var $674;
 var $675;
 var $676;
 var $677=(($675+4)|0);
 HEAP32[(($675)>>2)]=$__ng_0;
 var $__ng_1=0;var $681=$676;var $680=$677;var $679=$674;var $free89=$free90;label=186;break;
 case 186: 
 var $free89;
 var $679;
 var $680;
 var $681;
 var $__ng_1;
 var $682=HEAP32[(($11)>>2)];
 var $683=(($682+12)|0);
 var $684=HEAP32[(($683)>>2)];
 var $685=(($682+16)|0);
 var $686=HEAP32[(($685)>>2)];
 var $687=($684|0)==($686|0);
 if($687){label=187;break;}else{label=188;break;}
 case 187: 
 var $689=$682;
 var $690=HEAP32[(($689)>>2)];
 var $691=(($690+40)|0);
 var $692=HEAP32[(($691)>>2)];
 var $693=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$692]($682) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $571=$681;var $570=$680;var $569=$679;var $free88=$free89;label=151;break; } else { var $_ph_ph=$679;var $free95_ph_ph=$free89;label=20;break; }
 case 188: 
 var $695=(($684+4)|0);
 HEAP32[(($683)>>2)]=$695;
 var $__ng_0=$__ng_1;var $571=$681;var $570=$680;var $569=$679;var $free88=$free89;label=151;break;
 case 189: 
 var $697=($569|0)==($570|0);
 var $698=($__ng_0|0)==0;
 var $or_cond76=$697|$698;
 if($or_cond76){var $728=$571;var $727=$570;var $726=$569;var $free87=$free88;label=199;break;}else{label=190;break;}
 case 190: 
 var $700=($570|0)==($571|0);
 if($700){label=191;break;}else{var $724=$571;var $723=$570;var $722=$569;var $free=$free88;label=198;break;}
 case 191: 
 var $702=($free88|0)!=((512)|0);
 var $703=$570;
 var $704=$569;
 var $705=((($703)-($704))|0);
 var $706=($705>>>0)<2147483647;
 var $707=$705<<1;
 var $__i77=($706?$707:-1);
 var $708=$705>>2;
 if($702){label=192;break;}else{var $711=0;label=193;break;}
 case 192: 
 var $phitmp_i78=$569;
 var $711=$phitmp_i78;label=193;break;
 case 193: 
 var $711;
 var $712=_realloc($711,$__i77);
 var $713=$712;
 var $714=($712|0)==0;
 if($714){label=194;break;}else{label=195;break;}
 case 194: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$569;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free88;label=25;break; }
 case 195: 
 var $716=($569|0)==0;
 var $or_cond98=$702|$716;
 if($or_cond98){label=197;break;}else{label=196;break;}
 case 196: 
 label=197;break;
 case 197: 
 var $718=$__i77>>>2;
 var $719=(($713+($708<<2))|0);
 var $720=(($713+($718<<2))|0);
 var $724=$720;var $723=$719;var $722=$713;var $free=260;label=198;break;
 case 198: 
 var $free;
 var $722;
 var $723;
 var $724;
 var $725=(($723+4)|0);
 HEAP32[(($723)>>2)]=$__ng_0;
 var $728=$724;var $727=$725;var $726=$722;var $free87=$free;label=199;break;
 case 199: 
 var $free87;
 var $726;
 var $727;
 var $728;
 var $729=HEAP32[(($__fd)>>2)];
 var $730=($729|0)>0;
 if($730){label=200;break;}else{label=253;break;}
 case 200: 
 var $732=HEAP32[(($11)>>2)];
 var $733=($732|0)==0;
 if($733){var $750=1;label=207;break;}else{label=201;break;}
 case 201: 
 var $735=(($732+12)|0);
 var $736=HEAP32[(($735)>>2)];
 var $737=(($732+16)|0);
 var $738=HEAP32[(($737)>>2)];
 var $739=($736|0)==($738|0);
 if($739){label=202;break;}else{label=203;break;}
 case 202: 
 var $741=$732;
 var $742=HEAP32[(($741)>>2)];
 var $743=(($742+36)|0);
 var $744=HEAP32[(($743)>>2)];
 var $745=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$744]($732) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_023=$745;label=204;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$726;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free87;label=25;break; }
 case 203: 
 var $747=HEAP32[(($736)>>2)];
 var $_023=$747;label=204;break;
 case 204: 
 var $_023;
 var $748=($_023|0)==-1;
 if($748){label=206;break;}else{label=205;break;}
 case 205: 
 var $_pre276=HEAP32[(($11)>>2)];
 var $phitmp281=($_pre276|0)==0;
 var $750=$phitmp281;label=207;break;
 case 206: 
 HEAP32[(($11)>>2)]=0;
 var $750=1;label=207;break;
 case 207: 
 var $750;
 var $751=HEAP32[(($12)>>2)];
 var $752=($751|0)==0;
 if($752){label=213;break;}else{label=208;break;}
 case 208: 
 var $754=(($751+12)|0);
 var $755=HEAP32[(($754)>>2)];
 var $756=(($751+16)|0);
 var $757=HEAP32[(($756)>>2)];
 var $758=($755|0)==($757|0);
 if($758){label=209;break;}else{label=210;break;}
 case 209: 
 var $760=$751;
 var $761=HEAP32[(($760)>>2)];
 var $762=(($761+36)|0);
 var $763=HEAP32[(($762)>>2)];
 var $764=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$763]($751) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_022=$764;label=211;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$726;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free87;label=25;break; }
 case 210: 
 var $766=HEAP32[(($755)>>2)];
 var $_022=$766;label=211;break;
 case 211: 
 var $_022;
 var $767=($_022|0)==-1;
 if($767){label=212;break;}else{label=214;break;}
 case 212: 
 HEAP32[(($12)>>2)]=0;
 label=213;break;
 case 213: 
 if($750){label=219;break;}else{var $771=0;label=215;break;}
 case 214: 
 var $769=($751|0)==0;
 var $tmp68=$750^$769;
 if($tmp68){var $771=$751;label=215;break;}else{label=219;break;}
 case 215: 
 var $771;
 var $772=HEAP32[(($11)>>2)];
 var $773=(($772+12)|0);
 var $774=HEAP32[(($773)>>2)];
 var $775=(($772+16)|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=($774|0)==($776|0);
 if($777){label=216;break;}else{label=217;break;}
 case 216: 
 var $779=$772;
 var $780=HEAP32[(($779)>>2)];
 var $781=(($780+36)|0);
 var $782=HEAP32[(($781)>>2)];
 var $783=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$782]($772) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_025=$783;label=218;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$726;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free87;label=25;break; }
 case 217: 
 var $785=HEAP32[(($774)>>2)];
 var $_025=$785;label=218;break;
 case 218: 
 var $_025;
 var $786=HEAP32[(($__dp)>>2)];
 var $787=($_025|0)==($786|0);
 if($787){label=220;break;}else{label=219;break;}
 case 219: 
 var $789=HEAP32[(($__err)>>2)];
 var $790=$789|4;
 HEAP32[(($__err)>>2)]=$790;
 var $_026=0;var $1021=$726;var $free91=$free87;label=290;break;
 case 220: 
 var $792=HEAP32[(($11)>>2)];
 var $793=(($792+12)|0);
 var $794=HEAP32[(($793)>>2)];
 var $795=(($792+16)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=($794|0)==($796|0);
 if($797){label=221;break;}else{label=222;break;}
 case 221: 
 var $799=$792;
 var $800=HEAP32[(($799)>>2)];
 var $801=(($800+40)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$802]($792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $807=$771;var $806=$729;label=223;break; } else { var $_ph_ph101_ph_ph_ph_ph_ph=$726;var $free95_ph_ph100_ph_ph_ph_ph_ph=$free87;label=25;break; }
 case 222: 
 var $805=(($794+4)|0);
 HEAP32[(($793)>>2)]=$805;
 var $807=$771;var $806=$729;label=223;break;
 case 223: 
 var $806;
 var $807;
 var $808=HEAP32[(($11)>>2)];
 var $809=($808|0)==0;
 if($809){var $826=1;label=230;break;}else{label=224;break;}
 case 224: 
 var $811=(($808+12)|0);
 var $812=HEAP32[(($811)>>2)];
 var $813=(($808+16)|0);
 var $814=HEAP32[(($813)>>2)];
 var $815=($812|0)==($814|0);
 if($815){label=225;break;}else{label=226;break;}
 case 225: 
 var $817=$808;
 var $818=HEAP32[(($817)>>2)];
 var $819=(($818+36)|0);
 var $820=HEAP32[(($819)>>2)];
 var $821=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$820]($808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_032=$821;label=227;break; } else { label=21;break; }
 case 226: 
 var $823=HEAP32[(($812)>>2)];
 var $_032=$823;label=227;break;
 case 227: 
 var $_032;
 var $824=($_032|0)==-1;
 if($824){label=229;break;}else{label=228;break;}
 case 228: 
 var $_pre277=HEAP32[(($11)>>2)];
 var $phitmp282=($_pre277|0)==0;
 var $826=$phitmp282;label=230;break;
 case 229: 
 HEAP32[(($11)>>2)]=0;
 var $826=1;label=230;break;
 case 230: 
 var $826;
 var $827=($807|0)==0;
 if($827){label=236;break;}else{label=231;break;}
 case 231: 
 var $829=(($807+12)|0);
 var $830=HEAP32[(($829)>>2)];
 var $831=(($807+16)|0);
 var $832=HEAP32[(($831)>>2)];
 var $833=($830|0)==($832|0);
 if($833){label=232;break;}else{label=233;break;}
 case 232: 
 var $835=$807;
 var $836=HEAP32[(($835)>>2)];
 var $837=(($836+36)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$838]($807) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_031=$839;label=234;break; } else { label=21;break; }
 case 233: 
 var $841=HEAP32[(($830)>>2)];
 var $_031=$841;label=234;break;
 case 234: 
 var $_031;
 var $842=($_031|0)==-1;
 if($842){label=235;break;}else{label=237;break;}
 case 235: 
 HEAP32[(($12)>>2)]=0;
 label=236;break;
 case 236: 
 if($826){label=243;break;}else{var $846=0;label=238;break;}
 case 237: 
 var $844=($807|0)==0;
 var $tmp69=$826^$844;
 if($tmp69){var $846=$807;label=238;break;}else{label=243;break;}
 case 238: 
 var $846;
 var $847=HEAP32[(($11)>>2)];
 var $848=(($847+12)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850=(($847+16)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=($849|0)==($851|0);
 if($852){label=239;break;}else{label=240;break;}
 case 239: 
 var $854=$847;
 var $855=HEAP32[(($854)>>2)];
 var $856=(($855+36)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$857]($847) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_034=$858;label=241;break; } else { label=21;break; }
 case 240: 
 var $860=HEAP32[(($849)>>2)];
 var $_034=$860;label=241;break;
 case 241: 
 var $_034;
 var $861=HEAP32[(($14)>>2)];
 var $862=(($861+12)|0);
 var $863=HEAP32[(($862)>>2)];
 var $864=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$863]($__ct,2048,$_034) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=21;break; }
 case 242: 
 if($864){label=244;break;}else{label=243;break;}
 case 243: 
 var $866=HEAP32[(($__err)>>2)];
 var $867=$866|4;
 HEAP32[(($__err)>>2)]=$867;
 var $_026=0;var $1021=$726;var $free91=$free87;label=290;break;
 case 244: 
 var $869=HEAP32[(($__wn)>>2)];
 var $870=HEAP32[(($0)>>2)];
 var $871=($869|0)==($870|0);
 if($871){label=245;break;}else{label=246;break;}
 case 245: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=21;break; }
 case 246: 
 var $874=HEAP32[(($11)>>2)];
 var $875=(($874+12)|0);
 var $876=HEAP32[(($875)>>2)];
 var $877=(($874+16)|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=($876|0)==($878|0);
 if($879){label=247;break;}else{label=248;break;}
 case 247: 
 var $881=$874;
 var $882=HEAP32[(($881)>>2)];
 var $883=(($882+36)|0);
 var $884=HEAP32[(($883)>>2)];
 var $885=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$884]($874) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_035=$885;label=249;break; } else { label=21;break; }
 case 248: 
 var $887=HEAP32[(($876)>>2)];
 var $_035=$887;label=249;break;
 case 249: 
 var $_035;
 var $888=HEAP32[(($__wn)>>2)];
 var $889=(($888+4)|0);
 HEAP32[(($__wn)>>2)]=$889;
 HEAP32[(($888)>>2)]=$_035;
 var $890=((($806)-(1))|0);
 HEAP32[(($__fd)>>2)]=$890;
 var $891=HEAP32[(($11)>>2)];
 var $892=(($891+12)|0);
 var $893=HEAP32[(($892)>>2)];
 var $894=(($891+16)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=($893|0)==($895|0);
 if($896){label=250;break;}else{label=252;break;}
 case 250: 
 var $898=$891;
 var $899=HEAP32[(($898)>>2)];
 var $900=(($899+40)|0);
 var $901=HEAP32[(($900)>>2)];
 var $902=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$901]($891) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=21;break; }
 case 251: 
 var $903=($890|0)>0;
 if($903){var $807=$846;var $806=$890;label=223;break;}else{label=253;break;}
 case 252: 
 var $905=(($893+4)|0);
 HEAP32[(($892)>>2)]=$905;
 label=251;break;
 case 253: 
 var $906=HEAP32[(($__wn)>>2)];
 var $907=HEAP32[(($9)>>2)];
 var $908=($906|0)==($907|0);
 if($908){label=254;break;}else{var $__trailing_sign_1=$__trailing_sign_0203;var $914=$728;var $913=$727;var $912=$726;var $free86=$free87;label=255;break;}
 case 254: 
 var $910=HEAP32[(($__err)>>2)];
 var $911=$910|4;
 HEAP32[(($__err)>>2)]=$911;
 var $_026=0;var $1021=$726;var $free91=$free87;label=290;break;
 case 255: 
 var $free86;
 var $912;
 var $913;
 var $914;
 var $__trailing_sign_1;
 var $915=((($__p_0205)+(1))|0);
 var $916=($915>>>0)<4;
 if($916){var $free85200=$free86;var $29=$912;var $28=$913;var $27=$914;var $__trailing_sign_0203=$__trailing_sign_1;var $__p_0205=$915;label=3;break;}else{var $free85_lcssa=$free86;var $_lcssa=$912;var $_lcssa164=$913;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=256;break;}
 case 256: 
 var $__trailing_sign_0_lcssa;
 var $_lcssa164;
 var $_lcssa;
 var $free85_lcssa;
 var $917=($__trailing_sign_0_lcssa|0)==0;
 if($917){label=287;break;}else{label=257;break;}
 case 257: 
 var $918=$__trailing_sign_0_lcssa;
 var $919=(($__trailing_sign_0_lcssa+4)|0);
 var $920=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;label=258;break;
 case 258: 
 var $__i_0;
 var $921=HEAP8[($918)];
 var $922=($921&255);
 var $923=$922&1;
 var $924=($923|0)==0;
 if($924){label=260;break;}else{label=259;break;}
 case 259: 
 var $926=HEAP32[(($919)>>2)];
 var $929=$926;label=261;break;
 case 260: 
 var $928=$922>>>1;
 var $929=$928;label=261;break;
 case 261: 
 var $929;
 var $930=($__i_0>>>0)<($929>>>0);
 if($930){label=262;break;}else{label=287;break;}
 case 262: 
 var $932=HEAP32[(($11)>>2)];
 var $933=($932|0)==0;
 if($933){var $950=1;label=269;break;}else{label=263;break;}
 case 263: 
 var $935=(($932+12)|0);
 var $936=HEAP32[(($935)>>2)];
 var $937=(($932+16)|0);
 var $938=HEAP32[(($937)>>2)];
 var $939=($936|0)==($938|0);
 if($939){label=264;break;}else{label=265;break;}
 case 264: 
 var $941=$932;
 var $942=HEAP32[(($941)>>2)];
 var $943=(($942+36)|0);
 var $944=HEAP32[(($943)>>2)];
 var $945=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$944]($932) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_046=$945;label=266;break; } else { label=19;break; }
 case 265: 
 var $947=HEAP32[(($936)>>2)];
 var $_046=$947;label=266;break;
 case 266: 
 var $_046;
 var $948=($_046|0)==-1;
 if($948){label=268;break;}else{label=267;break;}
 case 267: 
 var $_pre278=HEAP32[(($11)>>2)];
 var $phitmp279=($_pre278|0)==0;
 var $950=$phitmp279;label=269;break;
 case 268: 
 HEAP32[(($11)>>2)]=0;
 var $950=1;label=269;break;
 case 269: 
 var $950;
 var $951=HEAP32[(($12)>>2)];
 var $952=($951|0)==0;
 if($952){label=275;break;}else{label=270;break;}
 case 270: 
 var $954=(($951+12)|0);
 var $955=HEAP32[(($954)>>2)];
 var $956=(($951+16)|0);
 var $957=HEAP32[(($956)>>2)];
 var $958=($955|0)==($957|0);
 if($958){label=271;break;}else{label=272;break;}
 case 271: 
 var $960=$951;
 var $961=HEAP32[(($960)>>2)];
 var $962=(($961+36)|0);
 var $963=HEAP32[(($962)>>2)];
 var $964=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$963]($951) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_045=$964;label=273;break; } else { label=19;break; }
 case 272: 
 var $966=HEAP32[(($955)>>2)];
 var $_045=$966;label=273;break;
 case 273: 
 var $_045;
 var $967=($_045|0)==-1;
 if($967){label=274;break;}else{label=276;break;}
 case 274: 
 HEAP32[(($12)>>2)]=0;
 label=275;break;
 case 275: 
 if($950){label=283;break;}else{label=277;break;}
 case 276: 
 var $969=($951|0)==0;
 var $tmp=$950^$969;
 if($tmp){label=277;break;}else{label=283;break;}
 case 277: 
 var $971=HEAP32[(($11)>>2)];
 var $972=(($971+12)|0);
 var $973=HEAP32[(($972)>>2)];
 var $974=(($971+16)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($973|0)==($975|0);
 if($976){label=278;break;}else{label=279;break;}
 case 278: 
 var $978=$971;
 var $979=HEAP32[(($978)>>2)];
 var $980=(($979+36)|0);
 var $981=HEAP32[(($980)>>2)];
 var $982=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$981]($971) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_047=$982;label=280;break; } else { label=19;break; }
 case 279: 
 var $984=HEAP32[(($973)>>2)];
 var $_047=$984;label=280;break;
 case 280: 
 var $_047;
 var $985=HEAP8[($918)];
 var $986=$985&1;
 var $987=(($986<<24)>>24)==0;
 if($987){var $990=$919;label=282;break;}else{label=281;break;}
 case 281: 
 var $989=HEAP32[(($920)>>2)];
 var $990=$989;label=282;break;
 case 282: 
 var $990;
 var $991=(($990+($__i_0<<2))|0);
 var $992=HEAP32[(($991)>>2)];
 var $993=($_047|0)==($992|0);
 if($993){label=284;break;}else{label=283;break;}
 case 283: 
 var $995=HEAP32[(($__err)>>2)];
 var $996=$995|4;
 HEAP32[(($__err)>>2)]=$996;
 var $_026=0;var $1021=$_lcssa;var $free91=$free85_lcssa;label=290;break;
 case 284: 
 var $998=((($__i_0)+(1))|0);
 var $999=HEAP32[(($11)>>2)];
 var $1000=(($999+12)|0);
 var $1001=HEAP32[(($1000)>>2)];
 var $1002=(($999+16)|0);
 var $1003=HEAP32[(($1002)>>2)];
 var $1004=($1001|0)==($1003|0);
 if($1004){label=285;break;}else{label=286;break;}
 case 285: 
 var $1006=$999;
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=(($1007+40)|0);
 var $1009=HEAP32[(($1008)>>2)];
 var $1010=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1009]($999) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$998;label=258;break; } else { label=19;break; }
 case 286: 
 var $1012=(($1001+4)|0);
 HEAP32[(($1000)>>2)]=$1012;
 var $__i_0=$998;label=258;break;
 case 287: 
 var $1013=($_lcssa|0)==($_lcssa164|0);
 if($1013){var $_026=1;var $1021=$_lcssa164;var $free91=$free85_lcssa;label=290;break;}else{label=288;break;}
 case 288: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$_lcssa164,$__et);
 var $1015=HEAP32[(($__et)>>2)];
 var $1016=($1015|0)==0;
 if($1016){var $_026=1;var $1021=$_lcssa;var $free91=$free85_lcssa;label=290;break;}else{label=289;break;}
 case 289: 
 var $1018=HEAP32[(($__err)>>2)];
 var $1019=$1018|4;
 HEAP32[(($__err)>>2)]=$1019;
 var $_026=0;var $1021=$_lcssa;var $free91=$free85_lcssa;label=290;break;
 case 290: 
 var $free91;
 var $1021;
 var $_026;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1022=($1021|0)==0;
 if($1022){label=293;break;}else{label=291;break;}
 case 291: 
 var $1024=$1021;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free91]($1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=293;break; } else { label=292;break; }
 case 292: 
 var $1026$0 = ___cxa_find_matching_catch(-1, -1,0); var $1026$1 = tempRet0;
 var $1027=$1026$0;
 ___clang_call_terminate($1027);
 throw "Reached an unreachable!";
 case 293: 
 STACKTOP=sp;return $_026;
 case 294: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=512;
 var $5=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $10=HEAP32[((17328)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i)|0);
 HEAP32[(($13)>>2)]=17328;
 var $14=(($__p_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(28);
 var $15=(($__p_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$9,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=41;break; }
 case 4: 
 var $16=HEAP32[((17332)>>2)];
 var $17=((($16)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $32=$28;
 HEAP8[($__neg)]=0;
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($1)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$37,$__err,$__neg,$32,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=41;break; }
 case 9: 
 if($38){label=10;break;}else{label=22;break;}
 case 10: 
 var $41=$__v;
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=12;break;}else{label=11;break;}
 case 11: 
 var $46=(($__v+8)|0);
 var $47=HEAP32[(($46)>>2)];
 HEAP32[(($47)>>2)]=0;
 var $48=(($__v+4)|0);
 HEAP32[(($48)>>2)]=0;
 label=13;break;
 case 12: 
 var $50=(($__v+4)|0);
 HEAP32[(($50)>>2)]=0;
 HEAP8[($41)]=0;
 label=13;break;
 case 13: 
 var $51=HEAP8[($__neg)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 var $_pre9=$28;
 if($53){label=17;break;}else{label=14;break;}
 case 14: 
 var $55=HEAP32[(($_pre9)>>2)];
 var $56=(($55+44)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($32,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=41;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=41;break; }
 case 16: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=$59$1;
 HEAP32[(($3)>>2)]=0;
 var $140=$2;var $_0311=$61;var $_0213=$60;label=42;break;
 case 17: 
 var $62=HEAP32[(($_pre9)>>2)];
 var $63=(($62+44)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($32,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($3)>>2)];
 var $67=HEAP32[(($__wn)>>2)];
 var $68=((($67)-(4))|0);
 var $69=($66>>>0)<($68>>>0);
 if($69){var $__w_05=$66;label=20;break;}else{var $__w_0_lcssa=$66;label=21;break;}
 case 19: 
 var $71=($74>>>0)<($68>>>0);
 if($71){var $__w_05=$74;label=20;break;}else{var $__w_0_lcssa=$74;label=21;break;}
 case 20: 
 var $__w_05;
 var $72=HEAP32[(($__w_05)>>2)];
 var $73=($72|0)==($65|0);
 var $74=(($__w_05+4)|0);
 if($73){label=19;break;}else{var $__w_0_lcssa=$__w_05;label=21;break;}
 case 21: 
 var $__w_0_lcssa;
 var $75=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0_lcssa,$67) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=41;break; }
 case 22: 
 var $77=(($__b)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($78|0)==0;
 if($79){var $96=0;label=28;break;}else{label=23;break;}
 case 23: 
 var $81=(($78+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($78+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($82|0)==($84|0);
 if($85){label=24;break;}else{label=25;break;}
 case 24: 
 var $87=$78;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_01=$91;label=26;break; } else { label=41;break; }
 case 25: 
 var $93=HEAP32[(($82)>>2)];
 var $_01=$93;label=26;break;
 case 26: 
 var $_01;
 var $94=($_01|0)==-1;
 if($94){label=27;break;}else{var $96=$78;label=28;break;}
 case 27: 
 HEAP32[(($77)>>2)]=0;
 var $96=0;label=28;break;
 case 28: 
 var $96;
 var $97=($96|0)==0;
 var $98=($34|0)==0;
 if($98){label=34;break;}else{label=29;break;}
 case 29: 
 var $100=(($34+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($34+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=30;break;}else{label=31;break;}
 case 30: 
 var $106=$34;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$110;label=32;break; } else { label=41;break; }
 case 31: 
 var $112=HEAP32[(($101)>>2)];
 var $_0=$112;label=32;break;
 case 32: 
 var $_0;
 var $113=($_0|0)==-1;
 if($113){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($33)>>2)]=0;
 label=34;break;
 case 34: 
 if($97){label=36;break;}else{label=37;break;}
 case 35: 
 var $115=($34|0)==0;
 var $tmp=$97^$115;
 if($tmp){label=37;break;}else{label=36;break;}
 case 36: 
 var $117=HEAP32[(($__err)>>2)];
 var $118=$117|2;
 HEAP32[(($__err)>>2)]=$118;
 label=37;break;
 case 37: 
 var $119=(($agg_result)|0);
 HEAP32[(($119)>>2)]=$96;
 var $120=HEAP32[(($7)>>2)];
 var $121=(($120)|0);
 var $122=__ZNSt3__114__shared_count16__release_sharedEv($121);
 var $123=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $124=($123|0)==0;
 if($124){label=40;break;}else{label=38;break;}
 case 38: 
 var $126=HEAP32[(($4)>>2)];
 var $127=$123;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$126]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1,0); var $129$1 = tempRet0;
 var $130=$129$0;
 ___clang_call_terminate($130);
 throw "Reached an unreachable!";
 case 40: 
 STACKTOP=sp;return;
 case 41: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=$132$1;
 var $135=HEAP32[(($7)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $138=($_pre|0)==0;
 if($138){var $_0312=$134;var $_0214=$133;label=44;break;}else{var $140=$_pre;var $_0311=$134;var $_0213=$133;label=42;break;}
 case 42: 
 var $_0213;
 var $_0311;
 var $140;
 var $141=HEAP32[(($4)>>2)];
 var $142=$140;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0312=$_0311;var $_0214=$_0213;label=44;break; } else { label=43;break; }
 case 43: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1,0); var $144$1 = tempRet0;
 var $145=$144$0;
 ___clang_call_terminate($145);
 throw "Reached an unreachable!";
 case 44: 
 var $_0214;
 var $_0312;
 var $146$0=$_0214;
 var $146$1=0;
 var $147$0=$146$0;
 var $147$1=$_0312;
 ___resumeException($147$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=$3&1;
 var $14=(($13<<24)>>24)==0;
 if($14){var $21=1;var $20=$3;label=6;break;}else{label=5;break;}
 case 5: 
 var $16=(($this)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&-2;
 var $phitmp=((($18)-(1))|0);
 var $19=(($17)&255);
 var $21=$phitmp;var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21;
 var $22=$__last;
 var $23=((($22)-($2))|0);
 var $24=$23>>2;
 var $25=($24|0)==0;
 if($25){label=19;break;}else{label=7;break;}
 case 7: 
 var $27=((($21)-($12))|0);
 var $28=($27>>>0)<($24>>>0);
 if($28){label=8;break;}else{var $33=$20;label=9;break;}
 case 8: 
 var $30=((($12)+($24))|0);
 var $31=((($30)-($21))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$21,$31,$12,$12,0,0);
 var $_pre=HEAP8[($1)];
 var $33=$_pre;label=9;break;
 case 9: 
 var $33;
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=12;break;
 case 11: 
 var $40=(($this+4)|0);
 var $41=$40;label=12;break;
 case 12: 
 var $41;
 var $42=(($41+($12<<2))|0);
 var $43=($__first|0)==($__last|0);
 if($43){var $__p_0_lcssa=$42;label=16;break;}else{label=13;break;}
 case 13: 
 var $scevgep=((($__last)-(4))|0);
 var $scevgep4=$scevgep;
 var $44=(((-$2))|0);
 var $uglygep=(($scevgep4+$44)|0);
 var $uglygep5=$uglygep;
 var $45=$uglygep5>>>2;
 var $46=((($12)+($45))|0);
 var $47=((($46)+(1))|0);
 var $_02=$__first;var $__p_03=$42;label=14;break;
 case 14: 
 var $__p_03;
 var $_02;
 var $49=HEAP32[(($_02)>>2)];
 HEAP32[(($__p_03)>>2)]=$49;
 var $50=(($__p_03+4)|0);
 var $51=(($_02+4)|0);
 var $52=($51|0)==($__last|0);
 if($52){label=15;break;}else{var $_02=$51;var $__p_03=$50;label=14;break;}
 case 15: 
 var $scevgep6=(($41+($47<<2))|0);
 var $__p_0_lcssa=$scevgep6;label=16;break;
 case 16: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 var $54=((($12)+($24))|0);
 var $55=HEAP8[($1)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+4)|0);
 HEAP32[(($59)>>2)]=$54;
 label=19;break;
 case 18: 
 var $61=$54<<1;
 var $62=(($61)&255);
 HEAP8[($1)]=$62;
 label=19;break;
 case 19: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i33=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$4;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$6;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=$8;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=$11;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=$13;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast32=$1;
 var $20=(($__loc)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $23=HEAP32[((17792)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $26=(($__p_i_i_i)|0);
 HEAP32[(($26)>>2)]=17792;
 var $27=(($__p_i_i_i+4)|0);
 HEAP32[(($27)>>2)]=(28);
 var $28=(($__p_i_i_i+8)|0);
 HEAP32[(($28)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17792,$22,304);
 label=4;break;
 case 4: 
 var $29=HEAP32[((17796)>>2)];
 var $30=((($29)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $31=(($21+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($21+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=5;break;}else{label=6;break;}
 case 5: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,11336,(432));
 throw "Reached an unreachable!";
 case 7: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+44)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($tmpcast32,$45);
 var $50=$__pat;
 var $51=HEAP32[(($1)>>2)];
 tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $52=$41;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+32)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($2,$45);
 var $56=$__nsn;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=9;break;}else{label=8;break;}
 case 8: 
 var $61=(($__nsn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP32[(($62)>>2)]=0;
 var $63=(($__nsn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=10;break;
 case 9: 
 var $65=(($__nsn+4)|0);
 HEAP32[(($65)>>2)]=0;
 HEAP8[($56)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1,0); var $67$1 = tempRet0;
 var $68=$67$0;
 ___clang_call_terminate($68);
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 var $69=HEAP32[(($52)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($4,$45);
 var $72=$__psn;
 var $73=HEAP8[($72)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=14;break;}else{label=13;break;}
 case 13: 
 var $77=(($__psn+8)|0);
 var $78=HEAP32[(($77)>>2)];
 HEAP32[(($78)>>2)]=0;
 var $79=(($__psn+4)|0);
 HEAP32[(($79)>>2)]=0;
 label=15;break;
 case 14: 
 var $81=(($__psn+4)|0);
 HEAP32[(($81)>>2)]=0;
 HEAP8[($72)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
 var $85=$41;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($45);
 HEAP32[(($__dp)>>2)]=$89;
 var $90=HEAP32[(($85)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($45);
 HEAP32[(($__ts)>>2)]=$93;
 var $94=$41;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+20)|0);
 var $97=HEAP32[(($96)>>2)];
 FUNCTION_TABLE[$97]($6,$45);
 var $98=$__grp;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=19;break;}else{label=18;break;}
 case 18: 
 var $103=(($__grp+8)|0);
 var $104=HEAP32[(($103)>>2)];
 HEAP8[($104)]=0;
 var $105=(($__grp+4)|0);
 HEAP32[(($105)>>2)]=0;
 label=20;break;
 case 19: 
 var $107=$__grp;
 var $108=(($107+1)|0);
 HEAP8[($108)]=0;
 HEAP8[($98)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1,0); var $110$1 = tempRet0;
 var $111=$110$0;
 ___clang_call_terminate($111);
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $112=HEAP32[(($52)>>2)];
 var $113=(($112+24)|0);
 var $114=HEAP32[(($113)>>2)];
 FUNCTION_TABLE[$114]($8,$45);
 var $115=$__sym;
 var $116=HEAP8[($115)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=24;break;}else{label=23;break;}
 case 23: 
 var $120=(($__sym+8)|0);
 var $121=HEAP32[(($120)>>2)];
 HEAP32[(($121)>>2)]=0;
 var $122=(($__sym+4)|0);
 HEAP32[(($122)>>2)]=0;
 label=25;break;
 case 24: 
 var $124=(($__sym+4)|0);
 HEAP32[(($124)>>2)]=0;
 HEAP8[($115)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1,0); var $126$1 = tempRet0;
 var $127=$126$0;
 ___clang_call_terminate($127);
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($115)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 var $128=HEAP32[(($85)>>2)];
 var $129=(($128+36)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=FUNCTION_TABLE[$130]($45);
 var $storemerge=$131;label=54;break;
 case 28: 
 var $tmpcast=$10;
 var $133=(($__loc)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=$__p_i_i_i33;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $136=HEAP32[((17800)>>2)];
 var $137=($136|0)==-1;
 if($137){label=30;break;}else{label=29;break;}
 case 29: 
 var $139=(($__p_i_i_i33)|0);
 HEAP32[(($139)>>2)]=17800;
 var $140=(($__p_i_i_i33+4)|0);
 HEAP32[(($140)>>2)]=(28);
 var $141=(($__p_i_i_i33+8)|0);
 HEAP32[(($141)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17800,$135,304);
 label=30;break;
 case 30: 
 var $142=HEAP32[((17804)>>2)];
 var $143=((($142)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $144=(($134+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($134+8)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=$145;
 var $149=$147;
 var $150=((($148)-($149))|0);
 var $151=$150>>2;
 var $152=($151>>>0)>($143>>>0);
 if($152){label=31;break;}else{label=32;break;}
 case 31: 
 var $153=(($147+($143<<2))|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($154|0)==0;
 if($155){label=32;break;}else{label=33;break;}
 case 32: 
 var $156=___cxa_allocate_exception(4);
 var $157=$156;
 __ZNSt8bad_castC2Ev($157);
 ___cxa_throw($156,11336,(432));
 throw "Reached an unreachable!";
 case 33: 
 var $158=$154;
 var $159=$154;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+44)|0);
 var $162=HEAP32[(($161)>>2)];
 FUNCTION_TABLE[$162]($tmpcast,$158);
 var $163=$__pat;
 var $164=HEAP32[(($10)>>2)];
 tempBigInt=$164;HEAP8[($163)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(3))|0)]=tempBigInt&0xff;
 var $165=$154;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+32)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($11,$158);
 var $169=$__nsn;
 var $170=HEAP8[($169)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=35;break;}else{label=34;break;}
 case 34: 
 var $174=(($__nsn+8)|0);
 var $175=HEAP32[(($174)>>2)];
 HEAP32[(($175)>>2)]=0;
 var $176=(($__nsn+4)|0);
 HEAP32[(($176)>>2)]=0;
 label=36;break;
 case 35: 
 var $178=(($__nsn+4)|0);
 HEAP32[(($178)>>2)]=0;
 HEAP8[($169)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1,0); var $180$1 = tempRet0;
 var $181=$180$0;
 ___clang_call_terminate($181);
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($169)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($169)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($169)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
 var $182=HEAP32[(($165)>>2)];
 var $183=(($182+28)|0);
 var $184=HEAP32[(($183)>>2)];
 FUNCTION_TABLE[$184]($13,$158);
 var $185=$__psn;
 var $186=HEAP8[($185)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=40;break;}else{label=39;break;}
 case 39: 
 var $190=(($__psn+8)|0);
 var $191=HEAP32[(($190)>>2)];
 HEAP32[(($191)>>2)]=0;
 var $192=(($__psn+4)|0);
 HEAP32[(($192)>>2)]=0;
 label=41;break;
 case 40: 
 var $194=(($__psn+4)|0);
 HEAP32[(($194)>>2)]=0;
 HEAP8[($185)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $196$0 = ___cxa_find_matching_catch(-1, -1,0); var $196$1 = tempRet0;
 var $197=$196$0;
 ___clang_call_terminate($197);
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($185)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($185)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($185)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($13);
 var $198=$154;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+12)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=FUNCTION_TABLE[$201]($158);
 HEAP32[(($__dp)>>2)]=$202;
 var $203=HEAP32[(($198)>>2)];
 var $204=(($203+16)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=FUNCTION_TABLE[$205]($158);
 HEAP32[(($__ts)>>2)]=$206;
 var $207=$154;
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+20)|0);
 var $210=HEAP32[(($209)>>2)];
 FUNCTION_TABLE[$210]($15,$158);
 var $211=$__grp;
 var $212=HEAP8[($211)];
 var $213=$212&1;
 var $214=(($213<<24)>>24)==0;
 if($214){label=45;break;}else{label=44;break;}
 case 44: 
 var $216=(($__grp+8)|0);
 var $217=HEAP32[(($216)>>2)];
 HEAP8[($217)]=0;
 var $218=(($__grp+4)|0);
 HEAP32[(($218)>>2)]=0;
 label=46;break;
 case 45: 
 var $220=$__grp;
 var $221=(($220+1)|0);
 HEAP8[($221)]=0;
 HEAP8[($211)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $223$0 = ___cxa_find_matching_catch(-1, -1,0); var $223$1 = tempRet0;
 var $224=$223$0;
 ___clang_call_terminate($224);
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($211)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 var $225=HEAP32[(($165)>>2)];
 var $226=(($225+24)|0);
 var $227=HEAP32[(($226)>>2)];
 FUNCTION_TABLE[$227]($17,$158);
 var $228=$__sym;
 var $229=HEAP8[($228)];
 var $230=$229&1;
 var $231=(($230<<24)>>24)==0;
 if($231){label=50;break;}else{label=49;break;}
 case 49: 
 var $233=(($__sym+8)|0);
 var $234=HEAP32[(($233)>>2)];
 HEAP32[(($234)>>2)]=0;
 var $235=(($__sym+4)|0);
 HEAP32[(($235)>>2)]=0;
 label=51;break;
 case 50: 
 var $237=(($__sym+4)|0);
 HEAP32[(($237)>>2)]=0;
 HEAP8[($228)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $239$0 = ___cxa_find_matching_catch(-1, -1,0); var $239$1 = tempRet0;
 var $240=$239$0;
 ___clang_call_terminate($240);
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($228)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($228)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($228)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($17);
 var $241=HEAP32[(($198)>>2)];
 var $242=(($241+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=FUNCTION_TABLE[$243]($158);
 var $storemerge=$244;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((512)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $_=($10?$11:-1);
 var $12=HEAP32[(($__n)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=$14>>2;
 if($3){label=2;break;}else{var $18=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $18=$phitmp;label=3;break;
 case 3: 
 var $18;
 var $19=_realloc($18,$_);
 var $20=$19;
 var $21=($19|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 __ZSt17__throw_bad_allocv();
 label=5;break;
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$20;
 var $32=$20;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$20;
 var $25=($_pr|0)==0;
 if($25){var $32=$20;label=11;break;}else{label=8;break;}
 case 8: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $32=$_pre;label=11;break;
 case 10: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 var $31=$30$0;
 ___clang_call_terminate($31);
 throw "Reached an unreachable!";
 case 11: 
 var $32;
 HEAP32[(($1)>>2)]=260;
 var $33=$_>>>2;
 var $34=(($32+($15<<2))|0);
 HEAP32[(($__n)>>2)]=$34;
 var $35=HEAP32[(($5)>>2)];
 var $36=(($35+($33<<2))|0);
 HEAP32[(($__e)>>2)]=$36;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(232);
 var $__pat=(sp)+(240);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp8=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$4;
 var $5=(($__digits)|0);
 var $6=_snprintf($4,100,3008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6>>>0)>99;
 if($7){label=2;break;}else{var $__db_0=$5;var $__n_0=$6;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $9=HEAP8[(18072)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=___cxa_guard_acquire(18072);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$15;

 label=7;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 var $eh_lpad_body$1=$18$1;var $eh_lpad_body$0=$18$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $20=HEAP32[((15792)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$20,3008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $23=HEAP32[(($__bb)>>2)];
 var $24=($23|0)==0;
 if($24){label=9;break;}else{var $30=$23;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $30=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $28=$eh_lpad_body$0;
 var $29=$eh_lpad_body$1;
 var $_2=$29;var $_23=$28;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=60;break;
 case 13: 
 var $30;
 var $31=_malloc($21);
 var $32=($31|0)==0;
 if($32){label=14;break;}else{var $__db_0=$31;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$31;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=0;label=15;break; } else { var $__hn_sroa_0_0=$30;var $__hd_sroa_0_0=0;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $36=(($__loc)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $39=HEAP32[((17336)>>2)];
 var $40=($39|0)==-1;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 var $42=(($__p_i_i_i)|0);
 HEAP32[(($42)>>2)]=17336;
 var $43=(($__p_i_i_i+4)|0);
 HEAP32[(($43)>>2)]=(28);
 var $44=(($__p_i_i_i+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$38,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $45=HEAP32[((17340)>>2)];
 var $46=((($45)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $47=(($37+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($37+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$48;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=$53>>2;
 var $55=($54>>>0)>($46>>>0);
 if($55){label=19;break;}else{label=20;break;}
 case 19: 
 var $56=(($50+($46<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=20;break;}else{label=22;break;}
 case 20: 
 var $59=___cxa_allocate_exception(4);
 var $60=$59;
 __ZNSt8bad_castC2Ev($60);
 (function() { try { __THREW__ = 0; return ___cxa_throw($59,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $61=$57;
 var $62=HEAP32[(($__bb)>>2)];
 var $63=(($62+$__n_0)|0);
 var $64=$57;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+32)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($61,$62,$63,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $69=($__n_0|0)==0;
 if($69){var $74=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $71=HEAP32[(($__bb)>>2)];
 var $72=HEAP8[($71)];
 var $73=(($72<<24)>>24)==45;
 var $74=$73;label=25;break;
 case 25: 
 var $74;
 HEAP32[(($__pat)>>2)]=0;
 HEAP32[(($__grp8)>>2)]=0; HEAP32[((($__grp8)+(4))>>2)]=0; HEAP32[((($__grp8)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$74,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $76=(($__mbuf)|0);
 var $77=HEAP32[(($__fd)>>2)];
 var $78=($__n_0|0)>($77|0);
 if($78){label=27;break;}else{label=34;break;}
 case 27: 
 var $80=((($__n_0)-($77))|0);
 var $81=$80<<1;
 var $82=HEAP8[($2)];
 var $83=($82&255);
 var $84=$83&1;
 var $85=($84|0)==0;
 if($85){label=29;break;}else{label=28;break;}
 case 28: 
 var $87=(($__sn+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $91=$88;label=30;break;
 case 29: 
 var $90=$83>>>1;
 var $91=$90;label=30;break;
 case 30: 
 var $91;
 var $92=HEAP8[($1)];
 var $93=($92&255);
 var $94=$93&1;
 var $95=($94|0)==0;
 if($95){label=32;break;}else{label=31;break;}
 case 31: 
 var $97=(($__sym+4)|0);
 var $98=HEAP32[(($97)>>2)];
 var $101=$98;label=33;break;
 case 32: 
 var $100=$93>>>1;
 var $101=$100;label=33;break;
 case 33: 
 var $101;
 var $102=$81|1;
 var $103=((($102)+($91))|0);
 var $104=((($103)+($101))|0);
 var $_pn=$104;label=41;break;
 case 34: 
 var $106=HEAP8[($2)];
 var $107=($106&255);
 var $108=$107&1;
 var $109=($108|0)==0;
 if($109){label=36;break;}else{label=35;break;}
 case 35: 
 var $111=(($__sn+4)|0);
 var $112=HEAP32[(($111)>>2)];
 var $115=$112;label=37;break;
 case 36: 
 var $114=$107>>>1;
 var $115=$114;label=37;break;
 case 37: 
 var $115;
 var $116=HEAP8[($1)];
 var $117=($116&255);
 var $118=$117&1;
 var $119=($118|0)==0;
 if($119){label=39;break;}else{label=38;break;}
 case 38: 
 var $121=(($__sym+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $125=$122;label=40;break;
 case 39: 
 var $124=$117>>>1;
 var $125=$124;label=40;break;
 case 40: 
 var $125;
 var $126=((($115)+(2))|0);
 var $127=((($126)+($125))|0);
 var $_pn=$127;label=41;break;
 case 41: 
 var $_pn;
 var $129=((($_pn)+($77))|0);
 var $130=($129>>>0)>100;
 if($130){label=42;break;}else{var $__mb_0=$76;var $__hw_sroa_0_1=0;label=49;break;}
 case 42: 
 var $131=_malloc($129);
 var $132=($131|0)==0;
 if($132){label=43;break;}else{var $__mb_0=$131;var $__hw_sroa_0_1=$131;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $__hw_sroa_0_1=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_0=$136;var $_01=$135;label=58;break;
 case 45: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 var $140=$138$1;
 var $_1=$140;var $_12=$139;label=59;break;
 case 46: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$142$1;
 var $_0=$144;var $_01=$143;label=58;break;
 case 47: 
 var $146$0 = ___cxa_find_matching_catch(-1, -1); var $146$1 = tempRet0;
 var $147=$146$0;
 var $148=$146$1;
 var $149=($__hw_sroa_0_1|0)==0;
 if($149){var $_0=$148;var $_01=$147;label=58;break;}else{label=48;break;}
 case 48: 
 _free($__hw_sroa_0_1);
 var $_0=$148;var $_01=$147;label=58;break;
 case 49: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $152=(($__iob+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($__db_0+$__n_0)|0);
 var $155=HEAP8[($__dp)];
 var $156=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$153,$__db_0,$154,$61,$74,$tmpcast,$155,$156,$__grp,$__sym,$__sn,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $158=(($__s)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($3)|0);
 HEAP32[(($160)>>2)]=$159;
 var $161=HEAP32[(($__mi)>>2)];
 var $162=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$161,$162,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $164=($__hw_sroa_0_1|0)==0;
 if($164){label=53;break;}else{label=52;break;}
 case 52: 
 _free($__hw_sroa_0_1);
 label=53;break;
 case 53: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $166=HEAP32[(($36)>>2)];
 var $167=(($166)|0);
 var $168=__ZNSt3__114__shared_count16__release_sharedEv($167);
 var $169=($__hd_sroa_0_1|0)==0;
 if($169){label=55;break;}else{label=54;break;}
 case 54: 
 _free($__hd_sroa_0_1);
 label=55;break;
 case 55: 
 var $171=($__hn_sroa_0_1|0)==0;
 if($171){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__hn_sroa_0_1);
 label=57;break;
 case 57: 
 STACKTOP=sp;return;
 case 58: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=59;break;
 case 59: 
 var $_12;
 var $_1;
 var $174=HEAP32[(($36)>>2)];
 var $175=(($174)|0);
 var $176=__ZNSt3__114__shared_count16__release_sharedEv($175);
 var $_2=$_1;var $_23=$_12;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=60;break;
 case 60: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_23;
 var $_2;
 var $178=($__hd_sroa_0_2|0)==0;
 if($178){label=62;break;}else{label=61;break;}
 case 61: 
 _free($__hd_sroa_0_2);
 label=62;break;
 case 62: 
 var $180=($__hn_sroa_0_2|0)==0;
 if($180){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__hn_sroa_0_2);
 label=64;break;
 case 64: 
 var $182$0=$_23;
 var $182$1=0;
 var $183$0=$182$0;
 var $183$1=$_2;
 ___resumeException($183$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i35=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast34=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast33=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast32=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 var $21=(($__loc)|0);
 var $22=HEAP32[(($21)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $24=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $25=HEAP32[((17808)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $28=(($__p_i_i_i)|0);
 HEAP32[(($28)>>2)]=17808;
 var $29=(($__p_i_i_i+4)|0);
 HEAP32[(($29)>>2)]=(28);
 var $30=(($__p_i_i_i+8)|0);
 HEAP32[(($30)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17808,$24,304);
 label=4;break;
 case 4: 
 var $31=HEAP32[((17812)>>2)];
 var $32=((($31)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $33=(($22+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($22+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$34;
 var $38=$36;
 var $39=((($37)-($38))|0);
 var $40=$39>>2;
 var $41=($40>>>0)>($32>>>0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $42=(($36+($32<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=6;break;}else{label=7;break;}
 case 6: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 __ZNSt8bad_castC2Ev($46);
 ___cxa_throw($45,11336,(432));
 throw "Reached an unreachable!";
 case 7: 
 var $47=$43;
 var $48=$43;
 var $49=HEAP32[(($48)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $51=(($49+44)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($tmpcast34,$47);
 var $53=$__pat;
 var $54=HEAP32[(($1)>>2)];
 tempBigInt=$54;HEAP8[($53)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(3))|0)]=tempBigInt&0xff;
 var $55=$43;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+32)|0);
 var $58=HEAP32[(($57)>>2)];
 FUNCTION_TABLE[$58]($2,$47);
 var $59=$__sn;
 var $60=HEAP8[($59)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=10;break;}else{label=9;break;}
 case 9: 
 var $64=(($__sn+8)|0);
 var $65=HEAP32[(($64)>>2)];
 HEAP8[($65)]=0;
 var $66=(($__sn+4)|0);
 HEAP32[(($66)>>2)]=0;
 label=11;break;
 case 10: 
 var $68=$__sn;
 var $69=(($68+1)|0);
 HEAP8[($69)]=0;
 HEAP8[($59)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1,0); var $71$1 = tempRet0;
 var $72=$71$0;
 ___clang_call_terminate($72);
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 label=20;break;
 case 14: 
 var $74=(($49+40)|0);
 var $75=HEAP32[(($74)>>2)];
 FUNCTION_TABLE[$75]($tmpcast33,$47);
 var $76=$__pat;
 var $77=HEAP32[(($4)>>2)];
 tempBigInt=$77;HEAP8[($76)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($76)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($76)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($76)+(3))|0)]=tempBigInt&0xff;
 var $78=$43;
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+28)|0);
 var $81=HEAP32[(($80)>>2)];
 FUNCTION_TABLE[$81]($5,$47);
 var $82=$__sn;
 var $83=HEAP8[($82)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=16;break;}else{label=15;break;}
 case 15: 
 var $87=(($__sn+8)|0);
 var $88=HEAP32[(($87)>>2)];
 HEAP8[($88)]=0;
 var $89=(($__sn+4)|0);
 HEAP32[(($89)>>2)]=0;
 label=17;break;
 case 16: 
 var $91=$__sn;
 var $92=(($91+1)|0);
 HEAP8[($92)]=0;
 HEAP8[($82)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $94$0 = ___cxa_find_matching_catch(-1, -1,0); var $94$1 = tempRet0;
 var $95=$94$0;
 ___clang_call_terminate($95);
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 label=20;break;
 case 20: 
 var $97=$43;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=FUNCTION_TABLE[$100]($47);
 HEAP8[($__dp)]=$101;
 var $102=HEAP32[(($97)>>2)];
 var $103=(($102+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($47);
 HEAP8[($__ts)]=$105;
 var $106=$43;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+20)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($7,$47);
 var $110=$__grp;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=22;break;}else{label=21;break;}
 case 21: 
 var $115=(($__grp+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP8[($116)]=0;
 var $117=(($__grp+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=23;break;
 case 22: 
 var $119=$__grp;
 var $120=(($119+1)|0);
 HEAP8[($120)]=0;
 HEAP8[($110)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 var $123=$122$0;
 ___clang_call_terminate($123);
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $124=HEAP32[(($106)>>2)];
 var $125=(($124+24)|0);
 var $126=HEAP32[(($125)>>2)];
 FUNCTION_TABLE[$126]($9,$47);
 var $127=$__sym;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=27;break;}else{label=26;break;}
 case 26: 
 var $132=(($__sym+8)|0);
 var $133=HEAP32[(($132)>>2)];
 HEAP8[($133)]=0;
 var $134=(($__sym+4)|0);
 HEAP32[(($134)>>2)]=0;
 label=28;break;
 case 27: 
 var $136=$__sym;
 var $137=(($136+1)|0);
 HEAP8[($137)]=0;
 HEAP8[($127)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1,0); var $139$1 = tempRet0;
 var $140=$139$0;
 ___clang_call_terminate($140);
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($127)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $141=$43;
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+36)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=FUNCTION_TABLE[$144]($47);
 var $storemerge=$145;label=60;break;
 case 31: 
 var $147=$__p_i_i_i35;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $148=HEAP32[((17816)>>2)];
 var $149=($148|0)==-1;
 if($149){label=33;break;}else{label=32;break;}
 case 32: 
 var $151=(($__p_i_i_i35)|0);
 HEAP32[(($151)>>2)]=17816;
 var $152=(($__p_i_i_i35+4)|0);
 HEAP32[(($152)>>2)]=(28);
 var $153=(($__p_i_i_i35+8)|0);
 HEAP32[(($153)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17816,$147,304);
 label=33;break;
 case 33: 
 var $154=HEAP32[((17820)>>2)];
 var $155=((($154)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $156=(($22+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($22+8)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$157;
 var $161=$159;
 var $162=((($160)-($161))|0);
 var $163=$162>>2;
 var $164=($163>>>0)>($155>>>0);
 if($164){label=34;break;}else{label=35;break;}
 case 34: 
 var $165=(($159+($155<<2))|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($166|0)==0;
 if($167){label=35;break;}else{label=36;break;}
 case 35: 
 var $168=___cxa_allocate_exception(4);
 var $169=$168;
 __ZNSt8bad_castC2Ev($169);
 ___cxa_throw($168,11336,(432));
 throw "Reached an unreachable!";
 case 36: 
 var $170=$166;
 var $171=$166;
 var $172=HEAP32[(($171)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $174=(($172+44)|0);
 var $175=HEAP32[(($174)>>2)];
 FUNCTION_TABLE[$175]($tmpcast32,$170);
 var $176=$__pat;
 var $177=HEAP32[(($11)>>2)];
 tempBigInt=$177;HEAP8[($176)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($176)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($176)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($176)+(3))|0)]=tempBigInt&0xff;
 var $178=$166;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+32)|0);
 var $181=HEAP32[(($180)>>2)];
 FUNCTION_TABLE[$181]($12,$170);
 var $182=$__sn;
 var $183=HEAP8[($182)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=39;break;}else{label=38;break;}
 case 38: 
 var $187=(($__sn+8)|0);
 var $188=HEAP32[(($187)>>2)];
 HEAP8[($188)]=0;
 var $189=(($__sn+4)|0);
 HEAP32[(($189)>>2)]=0;
 label=40;break;
 case 39: 
 var $191=$__sn;
 var $192=(($191+1)|0);
 HEAP8[($192)]=0;
 HEAP8[($182)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $194$0 = ___cxa_find_matching_catch(-1, -1,0); var $194$1 = tempRet0;
 var $195=$194$0;
 ___clang_call_terminate($195);
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
 label=49;break;
 case 43: 
 var $197=(($172+40)|0);
 var $198=HEAP32[(($197)>>2)];
 FUNCTION_TABLE[$198]($tmpcast,$170);
 var $199=$__pat;
 var $200=HEAP32[(($14)>>2)];
 tempBigInt=$200;HEAP8[($199)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($199)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($199)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($199)+(3))|0)]=tempBigInt&0xff;
 var $201=$166;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+28)|0);
 var $204=HEAP32[(($203)>>2)];
 FUNCTION_TABLE[$204]($15,$170);
 var $205=$__sn;
 var $206=HEAP8[($205)];
 var $207=$206&1;
 var $208=(($207<<24)>>24)==0;
 if($208){label=45;break;}else{label=44;break;}
 case 44: 
 var $210=(($__sn+8)|0);
 var $211=HEAP32[(($210)>>2)];
 HEAP8[($211)]=0;
 var $212=(($__sn+4)|0);
 HEAP32[(($212)>>2)]=0;
 label=46;break;
 case 45: 
 var $214=$__sn;
 var $215=(($214+1)|0);
 HEAP8[($215)]=0;
 HEAP8[($205)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $217$0 = ___cxa_find_matching_catch(-1, -1,0); var $217$1 = tempRet0;
 var $218=$217$0;
 ___clang_call_terminate($218);
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($205)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($205)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($205)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 label=49;break;
 case 49: 
 var $220=$166;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+12)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=FUNCTION_TABLE[$223]($170);
 HEAP8[($__dp)]=$224;
 var $225=HEAP32[(($220)>>2)];
 var $226=(($225+16)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=FUNCTION_TABLE[$227]($170);
 HEAP8[($__ts)]=$228;
 var $229=$166;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+20)|0);
 var $232=HEAP32[(($231)>>2)];
 FUNCTION_TABLE[$232]($17,$170);
 var $233=$__grp;
 var $234=HEAP8[($233)];
 var $235=$234&1;
 var $236=(($235<<24)>>24)==0;
 if($236){label=51;break;}else{label=50;break;}
 case 50: 
 var $238=(($__grp+8)|0);
 var $239=HEAP32[(($238)>>2)];
 HEAP8[($239)]=0;
 var $240=(($__grp+4)|0);
 HEAP32[(($240)>>2)]=0;
 label=52;break;
 case 51: 
 var $242=$__grp;
 var $243=(($242+1)|0);
 HEAP8[($243)]=0;
 HEAP8[($233)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $245$0 = ___cxa_find_matching_catch(-1, -1,0); var $245$1 = tempRet0;
 var $246=$245$0;
 ___clang_call_terminate($246);
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($233)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($233)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($233)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $247=HEAP32[(($229)>>2)];
 var $248=(($247+24)|0);
 var $249=HEAP32[(($248)>>2)];
 FUNCTION_TABLE[$249]($19,$170);
 var $250=$__sym;
 var $251=HEAP8[($250)];
 var $252=$251&1;
 var $253=(($252<<24)>>24)==0;
 if($253){label=56;break;}else{label=55;break;}
 case 55: 
 var $255=(($__sym+8)|0);
 var $256=HEAP32[(($255)>>2)];
 HEAP8[($256)]=0;
 var $257=(($__sym+4)|0);
 HEAP32[(($257)>>2)]=0;
 label=57;break;
 case 56: 
 var $259=$__sym;
 var $260=(($259+1)|0);
 HEAP8[($260)]=0;
 HEAP8[($250)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $262$0 = ___cxa_find_matching_catch(-1, -1,0); var $262$1 = tempRet0;
 var $263=$262$0;
 ___clang_call_terminate($263);
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($250)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($250)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($250)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($19);
 var $264=$166;
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+36)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=FUNCTION_TABLE[$267]($170);
 var $storemerge=$268;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($2+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__sym;
 var $9=$__flags&512;
 var $10=($9|0)==0;
 var $11=(($7+1)|0);
 var $12=(($__sym+4)|0);
 var $13=(($__sym+8)|0);
 var $14=($__fd|0)>0;
 var $15=$__grp;
 var $16=$__grp;
 var $17=(($15+1)|0);
 var $18=(($__grp+8)|0);
 var $19=(($__grp+4)|0);
 var $20=(($__ct+8)|0);
 var $21=(((-$__fd))|0);
 var $_02262=$__db;var $__p_063=0;label=2;break;
 case 2: 
 var $__p_063;
 var $_02262;
 var $23=(($__pat+$__p_063)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_02262;label=62;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_02262;label=62;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_02262;label=62;break;
 case 5: 
 var $37=HEAP8[($3)];
 var $38=($37&255);
 var $39=$38&1;
 var $40=($39|0)==0;
 if($40){label=7;break;}else{label=6;break;}
 case 6: 
 var $42=HEAP32[(($6)>>2)];
 var $45=$42;label=8;break;
 case 7: 
 var $44=$38>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_02262;label=62;break;}else{label=9;break;}
 case 9: 
 var $48=$37&1;
 var $49=(($48<<24)>>24)==0;
 if($49){var $52=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $51=HEAP32[(($5)>>2)];
 var $52=$51;label=11;break;
 case 11: 
 var $52;
 var $53=HEAP8[($52)];
 var $54=HEAP32[(($__me)>>2)];
 var $55=(($54+1)|0);
 HEAP32[(($__me)>>2)]=$55;
 HEAP8[($54)]=$53;
 var $_2=$_02262;label=62;break;
 case 12: 
 var $57=HEAP8[($8)];
 var $58=($57&255);
 var $59=$58&1;
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($12)>>2)];
 var $65=$62;label=15;break;
 case 14: 
 var $64=$58>>>1;
 var $65=$64;label=15;break;
 case 15: 
 var $65;
 var $66=($65|0)==0;
 var $brmerge=$66|$10;
 if($brmerge){var $_2=$_02262;label=62;break;}else{label=16;break;}
 case 16: 
 var $68=$57&1;
 var $69=(($68<<24)>>24)==0;
 if($69){var $73=$11;var $72=$11;label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($13)>>2)];
 var $73=$71;var $72=$71;label=18;break;
 case 18: 
 var $72;
 var $73;
 if($60){label=20;break;}else{label=19;break;}
 case 19: 
 var $75=HEAP32[(($12)>>2)];
 var $78=$75;label=21;break;
 case 20: 
 var $77=$58>>>1;
 var $78=$77;label=21;break;
 case 21: 
 var $78;
 var $79=(($73+$78)|0);
 var $80=HEAP32[(($__me)>>2)];
 var $81=($72|0)==($79|0);
 if($81){var $_0_lcssa=$80;label=23;break;}else{var $_sroa_023_058=$72;var $_059=$80;label=22;break;}
 case 22: 
 var $_059;
 var $_sroa_023_058;
 var $82=HEAP8[($_sroa_023_058)];
 HEAP8[($_059)]=$82;
 var $83=(($_sroa_023_058+1)|0);
 var $84=(($_059+1)|0);
 var $85=($83|0)==($79|0);
 if($85){var $_0_lcssa=$84;label=23;break;}else{var $_sroa_023_058=$83;var $_059=$84;label=22;break;}
 case 23: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_02262;label=62;break;
 case 24: 
 var $87=HEAP32[(($__me)>>2)];
 var $88=(($_02262+1)|0);
 var $__022=($__neg?$88:$_02262);
 var $89=($__022>>>0)<($__de>>>0);
 if($89){var $__d_035=$__022;label=26;break;}else{var $__d_0_lcssa=$__022;label=28;break;}
 case 25: 
 var $91=($99>>>0)<($__de>>>0);
 if($91){var $__d_035=$99;label=26;break;}else{var $__d_0_lcssa=$99;label=28;break;}
 case 26: 
 var $__d_035;
 var $92=HEAP8[($__d_035)];
 var $isascii31=(($92<<24)>>24)>-1;
 if($isascii31){label=27;break;}else{var $__d_0_lcssa=$__d_035;label=28;break;}
 case 27: 
 var $93=(($92<<24)>>24);
 var $94=HEAP32[(($20)>>2)];
 var $95=(($94+($93<<1))|0);
 var $96=HEAP16[(($95)>>1)];
 var $97=$96&2048;
 var $98=(($97<<16)>>16)==0;
 var $99=(($__d_035+1)|0);
 if($98){var $__d_0_lcssa=$__d_035;label=28;break;}else{label=25;break;}
 case 28: 
 var $__d_0_lcssa;
 var $__d_0_lcssa72=$__d_0_lcssa;
 if($14){label=29;break;}else{var $__d_2=$__d_0_lcssa;label=38;break;}
 case 29: 
 var $100=($__d_0_lcssa>>>0)>($__022>>>0);
 if($100){label=30;break;}else{var $__f_0_lcssa86=$__fd;var $__d_1_lcssa88=$__d_0_lcssa;label=34;break;}
 case 30: 
 var $101=(((-$__d_0_lcssa72))|0);
 var $scevgep=(($__022+$101)|0);
 var $scevgep73=$scevgep;
 var $102=($scevgep73>>>0)<($21>>>0);
 var $umax=($102?$21:$scevgep73);
 var $umax74=$umax;
 var $scevgep75=(($umax74+$__fd)|0);
 var $scevgep7576=$scevgep75;
 var $__d_139=$__d_0_lcssa;var $__f_040=$__fd;var $104=$87;label=31;break;
 case 31: 
 var $104;
 var $__f_040;
 var $__d_139;
 var $105=((($__d_139)-(1))|0);
 var $106=HEAP8[($105)];
 var $107=(($104+1)|0);
 HEAP32[(($__me)>>2)]=$107;
 HEAP8[($104)]=$106;
 var $108=((($__f_040)-(1))|0);
 var $109=($105>>>0)>($__022>>>0);
 var $110=($108|0)>0;
 var $or_cond=$109&$110;
 if($or_cond){label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_139=$105;var $__f_040=$108;var $104=$_pre;label=31;break;
 case 33: 
 var $scevgep77=(($__d_0_lcssa+$umax)|0);
 if($110){var $__f_0_lcssa86=$scevgep7576;var $__d_1_lcssa88=$scevgep77;label=34;break;}else{var $115=0;var $__f_0_lcssa85=$scevgep7576;var $__d_1_lcssa87=$scevgep77;label=35;break;}
 case 34: 
 var $__d_1_lcssa88;
 var $__f_0_lcssa86;
 var $111=HEAP32[(($1)>>2)];
 var $112=(($111+28)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=FUNCTION_TABLE[$113]($__ct,48);
 var $115=$114;var $__f_0_lcssa85=$__f_0_lcssa86;var $__d_1_lcssa87=$__d_1_lcssa88;label=35;break;
 case 35: 
 var $__d_1_lcssa87;
 var $__f_0_lcssa85;
 var $115;
 var $116=($__f_0_lcssa85|0)>0;
 var $117=HEAP32[(($__me)>>2)];
 var $118=(($117+1)|0);
 HEAP32[(($__me)>>2)]=$118;
 if($116){var $__f_146=$__f_0_lcssa85;var $119=$117;label=36;break;}else{var $_lcssa45=$117;label=37;break;}
 case 36: 
 var $119;
 var $__f_146;
 HEAP8[($119)]=$115;
 var $120=((($__f_146)-(1))|0);
 var $121=($120|0)>0;
 var $122=HEAP32[(($__me)>>2)];
 var $123=(($122+1)|0);
 HEAP32[(($__me)>>2)]=$123;
 if($121){var $__f_146=$120;var $119=$122;label=36;break;}else{var $_lcssa45=$122;label=37;break;}
 case 37: 
 var $_lcssa45;
 HEAP8[($_lcssa45)]=$__dp;
 var $__d_2=$__d_1_lcssa87;label=38;break;
 case 38: 
 var $__d_2;
 var $125=($__d_2|0)==($__022|0);
 if($125){label=39;break;}else{label=40;break;}
 case 39: 
 var $127=HEAP32[(($1)>>2)];
 var $128=(($127+28)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=FUNCTION_TABLE[$129]($__ct,48);
 var $131=HEAP32[(($__me)>>2)];
 var $132=(($131+1)|0);
 HEAP32[(($__me)>>2)]=$132;
 HEAP8[($131)]=$130;
 label=59;break;
 case 40: 
 var $134=HEAP8[($16)];
 var $135=($134&255);
 var $136=$135&1;
 var $137=($136|0)==0;
 if($137){label=42;break;}else{label=41;break;}
 case 41: 
 var $139=HEAP32[(($19)>>2)];
 var $142=$139;label=43;break;
 case 42: 
 var $141=$135>>>1;
 var $142=$141;label=43;break;
 case 43: 
 var $142;
 var $143=($142|0)==0;
 if($143){var $__d_350=$__d_2;var $__ng_051=0;var $__ig_052=0;var $__gl_053=-1;label=47;break;}else{label=44;break;}
 case 44: 
 var $145=$134&1;
 var $146=(($145<<24)>>24)==0;
 if($146){var $149=$17;label=46;break;}else{label=45;break;}
 case 45: 
 var $148=HEAP32[(($18)>>2)];
 var $149=$148;label=46;break;
 case 46: 
 var $149;
 var $150=HEAP8[($149)];
 var $151=(($150<<24)>>24);
 var $__d_350=$__d_2;var $__ng_051=0;var $__ig_052=0;var $__gl_053=$151;label=47;break;
 case 47: 
 var $__gl_053;
 var $__ig_052;
 var $__ng_051;
 var $__d_350;
 var $152=($__ng_051|0)==($__gl_053|0);
 if($152){label=48;break;}else{var $__gl_1=$__gl_053;var $__ig_1=$__ig_052;var $__ng_1=$__ng_051;label=58;break;}
 case 48: 
 var $154=HEAP32[(($__me)>>2)];
 var $155=(($154+1)|0);
 HEAP32[(($__me)>>2)]=$155;
 HEAP8[($154)]=$__ts;
 var $156=((($__ig_052)+(1))|0);
 var $157=HEAP8[($16)];
 var $158=($157&255);
 var $159=$158&1;
 var $160=($159|0)==0;
 if($160){label=50;break;}else{label=49;break;}
 case 49: 
 var $162=HEAP32[(($19)>>2)];
 var $165=$162;label=51;break;
 case 50: 
 var $164=$158>>>1;
 var $165=$164;label=51;break;
 case 51: 
 var $165;
 var $166=($156>>>0)<($165>>>0);
 if($166){label=52;break;}else{var $__gl_1=$__gl_053;var $__ig_1=$156;var $__ng_1=0;label=58;break;}
 case 52: 
 var $168=$157&1;
 var $169=(($168<<24)>>24)==0;
 if($169){var $172=$17;label=54;break;}else{label=53;break;}
 case 53: 
 var $171=HEAP32[(($18)>>2)];
 var $172=$171;label=54;break;
 case 54: 
 var $172;
 var $173=(($172+$156)|0);
 var $174=HEAP8[($173)];
 var $175=(($174<<24)>>24)==127;
 if($175){var $__gl_1=-1;var $__ig_1=$156;var $__ng_1=0;label=58;break;}else{label=55;break;}
 case 55: 
 if($169){var $179=$17;label=57;break;}else{label=56;break;}
 case 56: 
 var $178=HEAP32[(($18)>>2)];
 var $179=$178;label=57;break;
 case 57: 
 var $179;
 var $180=(($179+$156)|0);
 var $181=HEAP8[($180)];
 var $182=(($181<<24)>>24);
 var $__gl_1=$182;var $__ig_1=$156;var $__ng_1=0;label=58;break;
 case 58: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $183=((($__d_350)-(1))|0);
 var $184=HEAP8[($183)];
 var $185=HEAP32[(($__me)>>2)];
 var $186=(($185+1)|0);
 HEAP32[(($__me)>>2)]=$186;
 HEAP8[($185)]=$184;
 var $187=((($__ng_1)+(1))|0);
 var $188=($183|0)==($__022|0);
 if($188){label=59;break;}else{var $__d_350=$183;var $__ng_051=$187;var $__ig_052=$__ig_1;var $__gl_053=$__gl_1;label=47;break;}
 case 59: 
 var $189=HEAP32[(($__me)>>2)];
 var $190=($87|0)==($189|0);
 if($190){var $_2=$__022;label=62;break;}else{label=60;break;}
 case 60: 
 var $191=((($189)-(1))|0);
 var $192=($87>>>0)<($191>>>0);
 if($192){var $_01956=$87;var $193=$191;label=61;break;}else{var $_2=$__022;label=62;break;}
 case 61: 
 var $193;
 var $_01956;
 var $194=HEAP8[($_01956)];
 var $195=HEAP8[($193)];
 HEAP8[($_01956)]=$195;
 HEAP8[($193)]=$194;
 var $196=(($_01956+1)|0);
 var $197=((($193)-(1))|0);
 var $198=($196>>>0)<($197>>>0);
 if($198){var $_01956=$196;var $193=$197;label=61;break;}else{var $_2=$__022;label=62;break;}
 case 62: 
 var $_2;
 var $199=((($__p_063)+(1))|0);
 var $200=($199>>>0)<4;
 if($200){var $_02262=$_2;var $__p_063=$199;label=2;break;}else{label=63;break;}
 case 63: 
 var $202=HEAP8[($3)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 if($205){label=65;break;}else{label=64;break;}
 case 64: 
 var $207=HEAP32[(($6)>>2)];
 var $210=$207;label=66;break;
 case 65: 
 var $209=$203>>>1;
 var $210=$209;label=66;break;
 case 66: 
 var $210;
 var $211=($210>>>0)>1;
 if($211){label=67;break;}else{label=75;break;}
 case 67: 
 var $213=$202&1;
 var $214=(($213<<24)>>24)==0;
 if($214){var $218=$4;var $217=$4;label=69;break;}else{label=68;break;}
 case 68: 
 var $216=HEAP32[(($5)>>2)];
 var $218=$216;var $217=$216;label=69;break;
 case 69: 
 var $217;
 var $218;
 if($205){label=71;break;}else{label=70;break;}
 case 70: 
 var $220=HEAP32[(($6)>>2)];
 var $223=$220;label=72;break;
 case 71: 
 var $222=$203>>>1;
 var $223=$222;label=72;break;
 case 72: 
 var $223;
 var $224=(($218+$223)|0);
 var $225=HEAP32[(($__me)>>2)];
 var $_sroa_029_032=(($217+1)|0);
 var $226=($_sroa_029_032|0)==($224|0);
 if($226){var $_021_lcssa=$225;label=74;break;}else{var $_02133=$225;var $_sroa_029_034=$_sroa_029_032;label=73;break;}
 case 73: 
 var $_sroa_029_034;
 var $_02133;
 var $227=HEAP8[($_sroa_029_034)];
 HEAP8[($_02133)]=$227;
 var $228=(($_02133+1)|0);
 var $_sroa_029_0=(($_sroa_029_034+1)|0);
 var $229=($_sroa_029_0|0)==($224|0);
 if($229){var $_021_lcssa=$228;label=74;break;}else{var $_02133=$228;var $_sroa_029_034=$_sroa_029_0;label=73;break;}
 case 74: 
 var $_021_lcssa;
 HEAP32[(($__me)>>2)]=$_021_lcssa;
 label=75;break;
 case 75: 
 var $231=$__flags&176;
 if(($231|0)==32){ label=76;break;}else if(($231|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $233=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$233;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp7=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $4=(($__loc)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((17336)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i)|0);
 HEAP32[(($10)>>2)]=17336;
 var $11=(($__p_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(28);
 var $12=(($__p_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$6,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $13=HEAP32[((17340)>>2)];
 var $14=((($13)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $15=(($5+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($5+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$25;
 var $30=$__digits;
 var $31=$__digits;
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__digits+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=10;break;
 case 9: 
 var $40=$33>>>1;
 var $41=$40;label=10;break;
 case 10: 
 var $41;
 var $42=($41|0)==0;
 if($42){var $59=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $44=$32&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=13;break;}else{label=12;break;}
 case 12: 
 var $47=(($__digits+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $51=$48;label=14;break;
 case 13: 
 var $50=(($30+1)|0);
 var $51=$50;label=14;break;
 case 14: 
 var $51;
 var $52=HEAP8[($51)];
 var $53=$25;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+28)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($29,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $58=(($52<<24)>>24)==(($57<<24)>>24);
 var $59=$58;label=16;break;
 case 16: 
 var $59;
 HEAP32[(($__pat)>>2)]=0;
 HEAP32[(($__grp7)>>2)]=0; HEAP32[((($__grp7)+(4))>>2)]=0; HEAP32[((($__grp7)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$59,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $61=(($__mbuf)|0);
 var $62=HEAP8[($31)];
 var $63=($62&255);
 var $64=$63&1;
 var $65=($64|0)==0;
 if($65){label=19;break;}else{label=18;break;}
 case 18: 
 var $67=(($__digits+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $71=$68;label=20;break;
 case 19: 
 var $70=$63>>>1;
 var $71=$70;label=20;break;
 case 20: 
 var $71;
 var $72=HEAP32[(($__fd)>>2)];
 var $73=($71|0)>($72|0);
 if($73){label=21;break;}else{label=31;break;}
 case 21: 
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $76=(($__digits+4)|0);
 var $77=HEAP32[(($76)>>2)];
 var $80=$77;label=24;break;
 case 23: 
 var $79=$63>>>1;
 var $80=$79;label=24;break;
 case 24: 
 var $80;
 var $81=((($80)-($72))|0);
 var $82=$81<<1;
 var $83=HEAP8[($2)];
 var $84=($83&255);
 var $85=$84&1;
 var $86=($85|0)==0;
 if($86){label=26;break;}else{label=25;break;}
 case 25: 
 var $88=(($__sn+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $92=$89;label=27;break;
 case 26: 
 var $91=$84>>>1;
 var $92=$91;label=27;break;
 case 27: 
 var $92;
 var $93=HEAP8[($1)];
 var $94=($93&255);
 var $95=$94&1;
 var $96=($95|0)==0;
 if($96){label=29;break;}else{label=28;break;}
 case 28: 
 var $98=(($__sym+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $102=$99;label=30;break;
 case 29: 
 var $101=$94>>>1;
 var $102=$101;label=30;break;
 case 30: 
 var $102;
 var $103=$82|1;
 var $104=((($103)+($92))|0);
 var $105=((($104)+($102))|0);
 var $_pn=$105;label=38;break;
 case 31: 
 var $107=HEAP8[($2)];
 var $108=($107&255);
 var $109=$108&1;
 var $110=($109|0)==0;
 if($110){label=33;break;}else{label=32;break;}
 case 32: 
 var $112=(($__sn+4)|0);
 var $113=HEAP32[(($112)>>2)];
 var $116=$113;label=34;break;
 case 33: 
 var $115=$108>>>1;
 var $116=$115;label=34;break;
 case 34: 
 var $116;
 var $117=HEAP8[($1)];
 var $118=($117&255);
 var $119=$118&1;
 var $120=($119|0)==0;
 if($120){label=36;break;}else{label=35;break;}
 case 35: 
 var $122=(($__sym+4)|0);
 var $123=HEAP32[(($122)>>2)];
 var $126=$123;label=37;break;
 case 36: 
 var $125=$118>>>1;
 var $126=$125;label=37;break;
 case 37: 
 var $126;
 var $127=((($116)+(2))|0);
 var $128=((($127)+($126))|0);
 var $_pn=$128;label=38;break;
 case 38: 
 var $_pn;
 var $130=((($_pn)+($72))|0);
 var $131=($130>>>0)>100;
 if($131){label=39;break;}else{var $__mb_0=$61;var $__h_sroa_0_1=0;var $153=$62;label=47;break;}
 case 39: 
 var $132=_malloc($130);
 var $133=($132|0)==0;
 if($133){label=40;break;}else{var $__mb_0=$132;var $__h_sroa_0_1=$132;var $153=$62;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($31)];
 var $__mb_0=0;var $__h_sroa_0_1=0;var $153=$_pre;label=47;break;
 case 42: 
 var $135$0 = ___cxa_find_matching_catch(-1, -1); var $135$1 = tempRet0;
 var $136=$135$0;
 var $137=$135$1;
 var $_0=$137;var $_01=$136;label=58;break;
 case 43: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1); var $139$1 = tempRet0;
 var $140=$139$0;
 var $141=$139$1;
 var $_1=$141;var $_12=$140;label=59;break;
 case 44: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $_0=$145;var $_01=$144;label=58;break;
 case 45: 
 var $147$0 = ___cxa_find_matching_catch(-1, -1); var $147$1 = tempRet0;
 var $148=$147$0;
 var $149=$147$1;
 var $150=($__h_sroa_0_1|0)==0;
 if($150){var $_0=$149;var $_01=$148;label=58;break;}else{label=46;break;}
 case 46: 
 _free($__h_sroa_0_1);
 var $_0=$149;var $_01=$148;label=58;break;
 case 47: 
 var $153;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $154=(($__iob+4)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$153&1;
 var $157=(($156<<24)>>24)==0;
 if($157){label=49;break;}else{label=48;break;}
 case 48: 
 var $159=(($__digits+8)|0);
 var $160=HEAP32[(($159)>>2)];
 var $165=$160;var $164=$160;label=50;break;
 case 49: 
 var $162=(($30+1)|0);
 var $163=(($30+1)|0);
 var $165=$163;var $164=$162;label=50;break;
 case 50: 
 var $164;
 var $165;
 var $166=($153&255);
 var $167=$166&1;
 var $168=($167|0)==0;
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($__digits+4)|0);
 var $171=HEAP32[(($170)>>2)];
 var $174=$171;label=53;break;
 case 52: 
 var $173=$166>>>1;
 var $174=$173;label=53;break;
 case 53: 
 var $174;
 var $175=(($165+$174)|0);
 var $176=HEAP8[($__dp)];
 var $177=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$155,$164,$175,$29,$59,$tmpcast,$176,$177,$__grp,$__sym,$__sn,$72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=45;break; }
 case 54: 
 var $179=(($__s)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($3)|0);
 HEAP32[(($181)>>2)]=$180;
 var $182=HEAP32[(($__mi)>>2)];
 var $183=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$182,$183,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=45;break; }
 case 55: 
 var $185=($__h_sroa_0_1|0)==0;
 if($185){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__h_sroa_0_1);
 label=57;break;
 case 57: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $187=HEAP32[(($4)>>2)];
 var $188=(($187)|0);
 var $189=__ZNSt3__114__shared_count16__release_sharedEv($188);
 STACKTOP=sp;return;
 case 58: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=59;break;
 case 59: 
 var $_12;
 var $_1;
 var $191=HEAP32[(($4)>>2)];
 var $192=(($191)|0);
 var $193=__ZNSt3__114__shared_count16__release_sharedEv($192);
 var $194$0=$_12;
 var $194$1=0;
 var $195$0=$194$0;
 var $195$1=$_1;
 ___resumeException($195$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(528);
 var $__pat=(sp)+(536);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp8=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$4;
 var $5=(($__digits)|0);
 var $6=_snprintf($4,100,3008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6>>>0)>99;
 if($7){label=2;break;}else{var $__db_0=$5;var $__n_0=$6;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $9=HEAP8[(18072)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=___cxa_guard_acquire(18072);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$15;

 label=7;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 var $eh_lpad_body$1=$18$1;var $eh_lpad_body$0=$18$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $20=HEAP32[((15792)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$20,3008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $23=HEAP32[(($__bb)>>2)];
 var $24=($23|0)==0;
 if($24){label=9;break;}else{var $30=$23;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $30=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $28=$eh_lpad_body$0;
 var $29=$eh_lpad_body$1;
 var $_2=$29;var $_23=$28;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=59;break;
 case 13: 
 var $30;
 var $31=$21<<2;
 var $32=_malloc($31);
 var $33=$32;
 var $34=($32|0)==0;
 if($34){label=14;break;}else{var $__db_0=$33;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$33;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=$33;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$33;label=15;break; } else { var $__hn_sroa_0_0=$30;var $__hd_sroa_0_0=$33;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $38=(($__loc)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $41=HEAP32[((17328)>>2)];
 var $42=($41|0)==-1;
 if($42){label=18;break;}else{label=17;break;}
 case 17: 
 var $44=(($__p_i_i_i)|0);
 HEAP32[(($44)>>2)]=17328;
 var $45=(($__p_i_i_i+4)|0);
 HEAP32[(($45)>>2)]=(28);
 var $46=(($__p_i_i_i+8)|0);
 HEAP32[(($46)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$40,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=44;break; }
 case 18: 
 var $47=HEAP32[((17332)>>2)];
 var $48=((($47)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $49=(($39+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($39+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$50;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($48>>>0);
 if($57){label=19;break;}else{label=20;break;}
 case 19: 
 var $58=(($52+($48<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=20;break;}else{label=22;break;}
 case 20: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 __ZNSt8bad_castC2Ev($62);
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=44;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $63=$59;
 var $64=HEAP32[(($__bb)>>2)];
 var $65=(($64+$__n_0)|0);
 var $66=$59;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+48)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($63,$64,$65,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=44;break; }
 case 23: 
 var $71=($__n_0|0)==0;
 if($71){var $76=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $73=HEAP32[(($__bb)>>2)];
 var $74=HEAP8[($73)];
 var $75=(($74<<24)>>24)==45;
 var $76=$75;label=25;break;
 case 25: 
 var $76;
 HEAP32[(($__pat)>>2)]=0;
 HEAP32[(($__grp8)>>2)]=0; HEAP32[((($__grp8)+(4))>>2)]=0; HEAP32[((($__grp8)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$76,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=45;break; }
 case 26: 
 var $78=(($__mbuf)|0);
 var $79=HEAP32[(($__fd)>>2)];
 var $80=($__n_0|0)>($79|0);
 if($80){label=27;break;}else{label=34;break;}
 case 27: 
 var $82=((($__n_0)-($79))|0);
 var $83=$82<<1;
 var $84=HEAP8[($2)];
 var $85=($84&255);
 var $86=$85&1;
 var $87=($86|0)==0;
 if($87){label=29;break;}else{label=28;break;}
 case 28: 
 var $89=(($__sn+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $93=$90;label=30;break;
 case 29: 
 var $92=$85>>>1;
 var $93=$92;label=30;break;
 case 30: 
 var $93;
 var $94=HEAP8[($1)];
 var $95=($94&255);
 var $96=$95&1;
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=31;break;}
 case 31: 
 var $99=(($__sym+4)|0);
 var $100=HEAP32[(($99)>>2)];
 var $103=$100;label=33;break;
 case 32: 
 var $102=$95>>>1;
 var $103=$102;label=33;break;
 case 33: 
 var $103;
 var $104=$83|1;
 var $105=((($104)+($93))|0);
 var $106=((($105)+($103))|0);
 var $_pn=$106;label=41;break;
 case 34: 
 var $108=HEAP8[($2)];
 var $109=($108&255);
 var $110=$109&1;
 var $111=($110|0)==0;
 if($111){label=36;break;}else{label=35;break;}
 case 35: 
 var $113=(($__sn+4)|0);
 var $114=HEAP32[(($113)>>2)];
 var $117=$114;label=37;break;
 case 36: 
 var $116=$109>>>1;
 var $117=$116;label=37;break;
 case 37: 
 var $117;
 var $118=HEAP8[($1)];
 var $119=($118&255);
 var $120=$119&1;
 var $121=($120|0)==0;
 if($121){label=39;break;}else{label=38;break;}
 case 38: 
 var $123=(($__sym+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $127=$124;label=40;break;
 case 39: 
 var $126=$119>>>1;
 var $127=$126;label=40;break;
 case 40: 
 var $127;
 var $128=((($117)+(2))|0);
 var $129=((($128)+($127))|0);
 var $_pn=$129;label=41;break;
 case 41: 
 var $_pn;
 var $131=((($_pn)+($79))|0);
 var $132=($131>>>0)>100;
 if($132){label=42;break;}else{var $__mb_0=$78;var $__hw_sroa_0_1=0;label=48;break;}
 case 42: 
 var $133=$131<<2;
 var $134=_malloc($133);
 var $135=$134;
 var $136=($134|0)==0;
 if($136){label=43;break;}else{var $__mb_0=$135;var $__hw_sroa_0_1=$135;label=48;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=$135;var $__hw_sroa_0_1=$135;label=48;break; } else { var $__hw_sroa_0_0=$135;label=46;break; }
 case 44: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1); var $139$1 = tempRet0;
 var $140=$139$0;
 var $141=$139$1;
 var $_1=$141;var $_12=$140;label=58;break;
 case 45: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $_0=$145;var $_01=$144;label=57;break;
 case 46: 
 var $__hw_sroa_0_0;
 var $147$0 = ___cxa_find_matching_catch(-1, -1); var $147$1 = tempRet0;
 var $148=$147$0;
 var $149=$147$1;
 var $150=($__hw_sroa_0_0|0)==0;
 if($150){var $_0=$149;var $_01=$148;label=57;break;}else{label=47;break;}
 case 47: 
 var $152=$__hw_sroa_0_0;
 _free($152);
 var $_0=$149;var $_01=$148;label=57;break;
 case 48: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $154=(($__iob+4)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($__db_0+($__n_0<<2))|0);
 var $157=HEAP32[(($__dp)>>2)];
 var $158=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$155,$__db_0,$156,$63,$76,$tmpcast,$157,$158,$__grp,$__sym,$__sn,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 49: 
 var $160=(($__s)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($3)|0);
 HEAP32[(($162)>>2)]=$161;
 var $163=HEAP32[(($__mi)>>2)];
 var $164=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$163,$164,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 50: 
 var $166=($__hw_sroa_0_1|0)==0;
 if($166){label=52;break;}else{label=51;break;}
 case 51: 
 var $168=$__hw_sroa_0_1;
 _free($168);
 label=52;break;
 case 52: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $169=HEAP32[(($38)>>2)];
 var $170=(($169)|0);
 var $171=__ZNSt3__114__shared_count16__release_sharedEv($170);
 var $172=($__hd_sroa_0_1|0)==0;
 if($172){label=54;break;}else{label=53;break;}
 case 53: 
 var $174=$__hd_sroa_0_1;
 _free($174);
 label=54;break;
 case 54: 
 var $175=($__hn_sroa_0_1|0)==0;
 if($175){label=56;break;}else{label=55;break;}
 case 55: 
 _free($__hn_sroa_0_1);
 label=56;break;
 case 56: 
 STACKTOP=sp;return;
 case 57: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=58;break;
 case 58: 
 var $_12;
 var $_1;
 var $178=HEAP32[(($38)>>2)];
 var $179=(($178)|0);
 var $180=__ZNSt3__114__shared_count16__release_sharedEv($179);
 var $_2=$_1;var $_23=$_12;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=59;break;
 case 59: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_23;
 var $_2;
 var $182=($__hd_sroa_0_2|0)==0;
 if($182){label=61;break;}else{label=60;break;}
 case 60: 
 var $184=$__hd_sroa_0_2;
 _free($184);
 label=61;break;
 case 61: 
 var $185=($__hn_sroa_0_2|0)==0;
 if($185){label=63;break;}else{label=62;break;}
 case 62: 
 _free($__hn_sroa_0_2);
 label=63;break;
 case 63: 
 var $187$0=$_23;
 var $187$1=0;
 var $188$0=$187$0;
 var $188$1=$_2;
 ___resumeException($188$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i35=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast34=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast33=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast32=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 var $21=(($__loc)|0);
 var $22=HEAP32[(($21)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $24=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $25=HEAP32[((17792)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $28=(($__p_i_i_i)|0);
 HEAP32[(($28)>>2)]=17792;
 var $29=(($__p_i_i_i+4)|0);
 HEAP32[(($29)>>2)]=(28);
 var $30=(($__p_i_i_i+8)|0);
 HEAP32[(($30)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17792,$24,304);
 label=4;break;
 case 4: 
 var $31=HEAP32[((17796)>>2)];
 var $32=((($31)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $33=(($22+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($22+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$34;
 var $38=$36;
 var $39=((($37)-($38))|0);
 var $40=$39>>2;
 var $41=($40>>>0)>($32>>>0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $42=(($36+($32<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=6;break;}else{label=7;break;}
 case 6: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 __ZNSt8bad_castC2Ev($46);
 ___cxa_throw($45,11336,(432));
 throw "Reached an unreachable!";
 case 7: 
 var $47=$43;
 var $48=$43;
 var $49=HEAP32[(($48)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $51=(($49+44)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($tmpcast34,$47);
 var $53=$__pat;
 var $54=HEAP32[(($1)>>2)];
 tempBigInt=$54;HEAP8[($53)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(3))|0)]=tempBigInt&0xff;
 var $55=$43;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+32)|0);
 var $58=HEAP32[(($57)>>2)];
 FUNCTION_TABLE[$58]($2,$47);
 var $59=$__sn;
 var $60=HEAP8[($59)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=10;break;}else{label=9;break;}
 case 9: 
 var $64=(($__sn+8)|0);
 var $65=HEAP32[(($64)>>2)];
 HEAP32[(($65)>>2)]=0;
 var $66=(($__sn+4)|0);
 HEAP32[(($66)>>2)]=0;
 label=11;break;
 case 10: 
 var $68=(($__sn+4)|0);
 HEAP32[(($68)>>2)]=0;
 HEAP8[($59)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1,0); var $70$1 = tempRet0;
 var $71=$70$0;
 ___clang_call_terminate($71);
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 label=20;break;
 case 14: 
 var $73=(($49+40)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($tmpcast33,$47);
 var $75=$__pat;
 var $76=HEAP32[(($4)>>2)];
 tempBigInt=$76;HEAP8[($75)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($75)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($75)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($75)+(3))|0)]=tempBigInt&0xff;
 var $77=$43;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+28)|0);
 var $80=HEAP32[(($79)>>2)];
 FUNCTION_TABLE[$80]($5,$47);
 var $81=$__sn;
 var $82=HEAP8[($81)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=16;break;}else{label=15;break;}
 case 15: 
 var $86=(($__sn+8)|0);
 var $87=HEAP32[(($86)>>2)];
 HEAP32[(($87)>>2)]=0;
 var $88=(($__sn+4)|0);
 HEAP32[(($88)>>2)]=0;
 label=17;break;
 case 16: 
 var $90=(($__sn+4)|0);
 HEAP32[(($90)>>2)]=0;
 HEAP8[($81)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1,0); var $92$1 = tempRet0;
 var $93=$92$0;
 ___clang_call_terminate($93);
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
 label=20;break;
 case 20: 
 var $95=$43;
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($47);
 HEAP32[(($__dp)>>2)]=$99;
 var $100=HEAP32[(($95)>>2)];
 var $101=(($100+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($47);
 HEAP32[(($__ts)>>2)]=$103;
 var $104=$43;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+20)|0);
 var $107=HEAP32[(($106)>>2)];
 FUNCTION_TABLE[$107]($7,$47);
 var $108=$__grp;
 var $109=HEAP8[($108)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=22;break;}else{label=21;break;}
 case 21: 
 var $113=(($__grp+8)|0);
 var $114=HEAP32[(($113)>>2)];
 HEAP8[($114)]=0;
 var $115=(($__grp+4)|0);
 HEAP32[(($115)>>2)]=0;
 label=23;break;
 case 22: 
 var $117=$__grp;
 var $118=(($117+1)|0);
 HEAP8[($118)]=0;
 HEAP8[($108)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1,0); var $120$1 = tempRet0;
 var $121=$120$0;
 ___clang_call_terminate($121);
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($108)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $122=$43;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+24)|0);
 var $125=HEAP32[(($124)>>2)];
 FUNCTION_TABLE[$125]($9,$47);
 var $126=$__sym;
 var $127=HEAP8[($126)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=27;break;}else{label=26;break;}
 case 26: 
 var $131=(($__sym+8)|0);
 var $132=HEAP32[(($131)>>2)];
 HEAP32[(($132)>>2)]=0;
 var $133=(($__sym+4)|0);
 HEAP32[(($133)>>2)]=0;
 label=28;break;
 case 27: 
 var $135=(($__sym+4)|0);
 HEAP32[(($135)>>2)]=0;
 HEAP8[($126)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $137$0 = ___cxa_find_matching_catch(-1, -1,0); var $137$1 = tempRet0;
 var $138=$137$0;
 ___clang_call_terminate($138);
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
 var $139=HEAP32[(($95)>>2)];
 var $140=(($139+36)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=FUNCTION_TABLE[$141]($47);
 var $storemerge=$142;label=60;break;
 case 31: 
 var $144=$__p_i_i_i35;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $145=HEAP32[((17800)>>2)];
 var $146=($145|0)==-1;
 if($146){label=33;break;}else{label=32;break;}
 case 32: 
 var $148=(($__p_i_i_i35)|0);
 HEAP32[(($148)>>2)]=17800;
 var $149=(($__p_i_i_i35+4)|0);
 HEAP32[(($149)>>2)]=(28);
 var $150=(($__p_i_i_i35+8)|0);
 HEAP32[(($150)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17800,$144,304);
 label=33;break;
 case 33: 
 var $151=HEAP32[((17804)>>2)];
 var $152=((($151)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $153=(($22+12)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($22+8)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$154;
 var $158=$156;
 var $159=((($157)-($158))|0);
 var $160=$159>>2;
 var $161=($160>>>0)>($152>>>0);
 if($161){label=34;break;}else{label=35;break;}
 case 34: 
 var $162=(($156+($152<<2))|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){label=35;break;}else{label=36;break;}
 case 35: 
 var $165=___cxa_allocate_exception(4);
 var $166=$165;
 __ZNSt8bad_castC2Ev($166);
 ___cxa_throw($165,11336,(432));
 throw "Reached an unreachable!";
 case 36: 
 var $167=$163;
 var $168=$163;
 var $169=HEAP32[(($168)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $171=(($169+44)|0);
 var $172=HEAP32[(($171)>>2)];
 FUNCTION_TABLE[$172]($tmpcast32,$167);
 var $173=$__pat;
 var $174=HEAP32[(($11)>>2)];
 tempBigInt=$174;HEAP8[($173)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($173)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($173)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($173)+(3))|0)]=tempBigInt&0xff;
 var $175=$163;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+32)|0);
 var $178=HEAP32[(($177)>>2)];
 FUNCTION_TABLE[$178]($12,$167);
 var $179=$__sn;
 var $180=HEAP8[($179)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 if($182){label=39;break;}else{label=38;break;}
 case 38: 
 var $184=(($__sn+8)|0);
 var $185=HEAP32[(($184)>>2)];
 HEAP32[(($185)>>2)]=0;
 var $186=(($__sn+4)|0);
 HEAP32[(($186)>>2)]=0;
 label=40;break;
 case 39: 
 var $188=(($__sn+4)|0);
 HEAP32[(($188)>>2)]=0;
 HEAP8[($179)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1,0); var $190$1 = tempRet0;
 var $191=$190$0;
 ___clang_call_terminate($191);
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
 label=49;break;
 case 43: 
 var $193=(($169+40)|0);
 var $194=HEAP32[(($193)>>2)];
 FUNCTION_TABLE[$194]($tmpcast,$167);
 var $195=$__pat;
 var $196=HEAP32[(($14)>>2)];
 tempBigInt=$196;HEAP8[($195)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($195)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($195)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($195)+(3))|0)]=tempBigInt&0xff;
 var $197=$163;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+28)|0);
 var $200=HEAP32[(($199)>>2)];
 FUNCTION_TABLE[$200]($15,$167);
 var $201=$__sn;
 var $202=HEAP8[($201)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=45;break;}else{label=44;break;}
 case 44: 
 var $206=(($__sn+8)|0);
 var $207=HEAP32[(($206)>>2)];
 HEAP32[(($207)>>2)]=0;
 var $208=(($__sn+4)|0);
 HEAP32[(($208)>>2)]=0;
 label=46;break;
 case 45: 
 var $210=(($__sn+4)|0);
 HEAP32[(($210)>>2)]=0;
 HEAP8[($201)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1,0); var $212$1 = tempRet0;
 var $213=$212$0;
 ___clang_call_terminate($213);
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($201)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($201)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($201)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($15);
 label=49;break;
 case 49: 
 var $215=$163;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($167);
 HEAP32[(($__dp)>>2)]=$219;
 var $220=HEAP32[(($215)>>2)];
 var $221=(($220+16)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=FUNCTION_TABLE[$222]($167);
 HEAP32[(($__ts)>>2)]=$223;
 var $224=$163;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+20)|0);
 var $227=HEAP32[(($226)>>2)];
 FUNCTION_TABLE[$227]($17,$167);
 var $228=$__grp;
 var $229=HEAP8[($228)];
 var $230=$229&1;
 var $231=(($230<<24)>>24)==0;
 if($231){label=51;break;}else{label=50;break;}
 case 50: 
 var $233=(($__grp+8)|0);
 var $234=HEAP32[(($233)>>2)];
 HEAP8[($234)]=0;
 var $235=(($__grp+4)|0);
 HEAP32[(($235)>>2)]=0;
 label=52;break;
 case 51: 
 var $237=$__grp;
 var $238=(($237+1)|0);
 HEAP8[($238)]=0;
 HEAP8[($228)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $240$0 = ___cxa_find_matching_catch(-1, -1,0); var $240$1 = tempRet0;
 var $241=$240$0;
 ___clang_call_terminate($241);
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($228)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($228)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($228)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $242=$163;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243+24)|0);
 var $245=HEAP32[(($244)>>2)];
 FUNCTION_TABLE[$245]($19,$167);
 var $246=$__sym;
 var $247=HEAP8[($246)];
 var $248=$247&1;
 var $249=(($248<<24)>>24)==0;
 if($249){label=56;break;}else{label=55;break;}
 case 55: 
 var $251=(($__sym+8)|0);
 var $252=HEAP32[(($251)>>2)];
 HEAP32[(($252)>>2)]=0;
 var $253=(($__sym+4)|0);
 HEAP32[(($253)>>2)]=0;
 label=57;break;
 case 56: 
 var $255=(($__sym+4)|0);
 HEAP32[(($255)>>2)]=0;
 HEAP8[($246)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $257$0 = ___cxa_find_matching_catch(-1, -1,0); var $257$1 = tempRet0;
 var $258=$257$0;
 ___clang_call_terminate($258);
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($246)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($19);
 var $259=HEAP32[(($215)>>2)];
 var $260=(($259+36)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=FUNCTION_TABLE[$261]($167);
 var $storemerge=$262;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=($__fd|0)>0;
 var $11=$__grp;
 var $12=$__grp;
 var $13=(($11+1)|0);
 var $14=(($__grp+8)|0);
 var $15=(($__grp+4)|0);
 var $16=$__ct;
 var $_02163=$__db;var $__p_064=0;label=2;break;
 case 2: 
 var $__p_064;
 var $_02163;
 var $18=(($__pat+$__p_064)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=28;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_02163;label=63;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_02163;label=63;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_02163;label=63;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=($32&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=7;break;}else{label=6;break;}
 case 6: 
 var $37=HEAP32[(($3)>>2)];
 var $40=$37;label=8;break;
 case 7: 
 var $39=$33>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_02163;label=63;break;}else{label=9;break;}
 case 9: 
 var $43=$32&1;
 var $44=(($43<<24)>>24)==0;
 if($44){var $47=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $46=HEAP32[(($4)>>2)];
 var $47=$46;label=11;break;
 case 11: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=HEAP32[(($__me)>>2)];
 var $50=(($49+4)|0);
 HEAP32[(($__me)>>2)]=$50;
 HEAP32[(($49)>>2)]=$48;
 var $_2=$_02163;label=63;break;
 case 12: 
 var $52=HEAP8[($5)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=HEAP32[(($8)>>2)];
 var $60=$57;label=15;break;
 case 14: 
 var $59=$53>>>1;
 var $60=$59;label=15;break;
 case 15: 
 var $60;
 var $61=($60|0)==0;
 var $brmerge=$61|$7;
 if($brmerge){var $_2=$_02163;label=63;break;}else{label=16;break;}
 case 16: 
 var $63=$52&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=18;break;}else{label=17;break;}
 case 17: 
 var $66=HEAP32[(($9)>>2)];
 var $69=$66;var $68=$66;var $_in91=$66;label=19;break;
 case 18: 
 var $69=$8;var $68=$8;var $_in91=$8;label=19;break;
 case 19: 
 var $_in91;
 var $68;
 var $69;
 var $70=$_in91;
 if($55){label=21;break;}else{label=20;break;}
 case 20: 
 var $72=HEAP32[(($8)>>2)];
 var $75=$72;label=22;break;
 case 21: 
 var $74=$53>>>1;
 var $75=$74;label=22;break;
 case 22: 
 var $75;
 var $76=(($69+($75<<2))|0);
 var $77=HEAP32[(($__me)>>2)];
 var $78=($68|0)==($76|0);
 if($78){var $_0_lcssa=$77;label=27;break;}else{label=23;break;}
 case 23: 
 var $scevgep78_sum=((($75)-(1))|0);
 var $scevgep79=(($69+($scevgep78_sum<<2))|0);
 var $scevgep7980=$scevgep79;
 var $79=(((-$70))|0);
 var $uglygep81=(($scevgep7980+$79)|0);
 var $uglygep8182=$uglygep81;
 var $80=$uglygep8182>>>2;
 var $_sroa_022_059=$68;var $_060=$77;label=24;break;
 case 24: 
 var $_060;
 var $_sroa_022_059;
 var $82=HEAP32[(($_sroa_022_059)>>2)];
 HEAP32[(($_060)>>2)]=$82;
 var $83=(($_sroa_022_059+4)|0);
 var $84=($83|0)==($76|0);
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $85=(($_060+4)|0);
 var $_sroa_022_059=$83;var $_060=$85;label=24;break;
 case 26: 
 var $scevgep77_sum=((($80)+(1))|0);
 var $scevgep83=(($77+($scevgep77_sum<<2))|0);
 var $_0_lcssa=$scevgep83;label=27;break;
 case 27: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_02163;label=63;break;
 case 28: 
 var $87=HEAP32[(($__me)>>2)];
 var $88=(($_02163+4)|0);
 var $__021=($__neg?$88:$_02163);
 var $89=($__021>>>0)<($__de>>>0);
 if($89){var $__d_033=$__021;label=30;break;}else{var $__d_0_lcssa=$__021;label=31;break;}
 case 29: 
 var $91=($97>>>0)<($__de>>>0);
 if($91){var $__d_033=$97;label=30;break;}else{var $__d_0_lcssa=$97;label=31;break;}
 case 30: 
 var $__d_033;
 var $92=HEAP32[(($__d_033)>>2)];
 var $93=HEAP32[(($16)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($__ct,2048,$92);
 var $97=(($__d_033+4)|0);
 if($96){label=29;break;}else{var $__d_0_lcssa=$__d_033;label=31;break;}
 case 31: 
 var $__d_0_lcssa;
 if($10){label=32;break;}else{var $__d_2=$__d_0_lcssa;label=39;break;}
 case 32: 
 var $98=($__d_0_lcssa>>>0)>($__021>>>0);
 if($98){var $__d_138=$__d_0_lcssa;var $__f_039=$__fd;label=33;break;}else{var $__f_0_lcssa88=$__fd;var $__d_1_lcssa90=$__d_0_lcssa;label=35;break;}
 case 33: 
 var $__f_039;
 var $__d_138;
 var $99=((($__d_138)-(4))|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=HEAP32[(($__me)>>2)];
 var $102=(($101+4)|0);
 HEAP32[(($__me)>>2)]=$102;
 HEAP32[(($101)>>2)]=$100;
 var $103=((($__f_039)-(1))|0);
 var $104=($99>>>0)>($__021>>>0);
 var $105=($103|0)>0;
 var $or_cond=$104&$105;
 if($or_cond){var $__d_138=$99;var $__f_039=$103;label=33;break;}else{label=34;break;}
 case 34: 
 if($105){var $__f_0_lcssa88=$103;var $__d_1_lcssa90=$99;label=35;break;}else{var $110=0;var $__f_0_lcssa87=$103;var $__d_1_lcssa89=$99;label=36;break;}
 case 35: 
 var $__d_1_lcssa90;
 var $__f_0_lcssa88;
 var $106=HEAP32[(($1)>>2)];
 var $107=(($106+44)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($__ct,48);
 var $110=$109;var $__f_0_lcssa87=$__f_0_lcssa88;var $__d_1_lcssa89=$__d_1_lcssa90;label=36;break;
 case 36: 
 var $__d_1_lcssa89;
 var $__f_0_lcssa87;
 var $110;
 var $111=($__f_0_lcssa87|0)>0;
 var $112=HEAP32[(($__me)>>2)];
 var $113=(($112+4)|0);
 HEAP32[(($__me)>>2)]=$113;
 if($111){var $__f_145=$__f_0_lcssa87;var $114=$112;label=37;break;}else{var $_lcssa44=$112;label=38;break;}
 case 37: 
 var $114;
 var $__f_145;
 HEAP32[(($114)>>2)]=$110;
 var $115=((($__f_145)-(1))|0);
 var $116=($115|0)>0;
 var $117=HEAP32[(($__me)>>2)];
 var $118=(($117+4)|0);
 HEAP32[(($__me)>>2)]=$118;
 if($116){var $__f_145=$115;var $114=$117;label=37;break;}else{var $_lcssa44=$117;label=38;break;}
 case 38: 
 var $_lcssa44;
 HEAP32[(($_lcssa44)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa89;label=39;break;
 case 39: 
 var $__d_2;
 var $120=($__d_2|0)==($__021|0);
 if($120){label=40;break;}else{label=41;break;}
 case 40: 
 var $122=HEAP32[(($1)>>2)];
 var $123=(($122+44)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=FUNCTION_TABLE[$124]($__ct,48);
 var $126=HEAP32[(($__me)>>2)];
 var $127=(($126+4)|0);
 HEAP32[(($__me)>>2)]=$127;
 HEAP32[(($126)>>2)]=$125;
 label=60;break;
 case 41: 
 var $129=HEAP8[($12)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=HEAP32[(($15)>>2)];
 var $137=$134;label=44;break;
 case 43: 
 var $136=$130>>>1;
 var $137=$136;label=44;break;
 case 44: 
 var $137;
 var $138=($137|0)==0;
 if($138){var $__d_351=$__d_2;var $__ng_052=0;var $__ig_053=0;var $__gl_054=-1;label=48;break;}else{label=45;break;}
 case 45: 
 var $140=$129&1;
 var $141=(($140<<24)>>24)==0;
 if($141){var $144=$13;label=47;break;}else{label=46;break;}
 case 46: 
 var $143=HEAP32[(($14)>>2)];
 var $144=$143;label=47;break;
 case 47: 
 var $144;
 var $145=HEAP8[($144)];
 var $146=(($145<<24)>>24);
 var $__d_351=$__d_2;var $__ng_052=0;var $__ig_053=0;var $__gl_054=$146;label=48;break;
 case 48: 
 var $__gl_054;
 var $__ig_053;
 var $__ng_052;
 var $__d_351;
 var $147=($__ng_052|0)==($__gl_054|0);
 if($147){label=49;break;}else{var $__gl_1=$__gl_054;var $__ig_1=$__ig_053;var $__ng_1=$__ng_052;label=59;break;}
 case 49: 
 var $149=HEAP32[(($__me)>>2)];
 var $150=(($149+4)|0);
 HEAP32[(($__me)>>2)]=$150;
 HEAP32[(($149)>>2)]=$__ts;
 var $151=((($__ig_053)+(1))|0);
 var $152=HEAP8[($12)];
 var $153=($152&255);
 var $154=$153&1;
 var $155=($154|0)==0;
 if($155){label=51;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($15)>>2)];
 var $160=$157;label=52;break;
 case 51: 
 var $159=$153>>>1;
 var $160=$159;label=52;break;
 case 52: 
 var $160;
 var $161=($151>>>0)<($160>>>0);
 if($161){label=53;break;}else{var $__gl_1=$__gl_054;var $__ig_1=$151;var $__ng_1=0;label=59;break;}
 case 53: 
 var $163=$152&1;
 var $164=(($163<<24)>>24)==0;
 if($164){var $167=$13;label=55;break;}else{label=54;break;}
 case 54: 
 var $166=HEAP32[(($14)>>2)];
 var $167=$166;label=55;break;
 case 55: 
 var $167;
 var $168=(($167+$151)|0);
 var $169=HEAP8[($168)];
 var $170=(($169<<24)>>24)==127;
 if($170){var $__gl_1=-1;var $__ig_1=$151;var $__ng_1=0;label=59;break;}else{label=56;break;}
 case 56: 
 if($164){var $174=$13;label=58;break;}else{label=57;break;}
 case 57: 
 var $173=HEAP32[(($14)>>2)];
 var $174=$173;label=58;break;
 case 58: 
 var $174;
 var $175=(($174+$151)|0);
 var $176=HEAP8[($175)];
 var $177=(($176<<24)>>24);
 var $__gl_1=$177;var $__ig_1=$151;var $__ng_1=0;label=59;break;
 case 59: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $178=((($__d_351)-(4))|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=HEAP32[(($__me)>>2)];
 var $181=(($180+4)|0);
 HEAP32[(($__me)>>2)]=$181;
 HEAP32[(($180)>>2)]=$179;
 var $182=((($__ng_1)+(1))|0);
 var $183=($178|0)==($__021|0);
 if($183){label=60;break;}else{var $__d_351=$178;var $__ng_052=$182;var $__ig_053=$__ig_1;var $__gl_054=$__gl_1;label=48;break;}
 case 60: 
 var $184=HEAP32[(($__me)>>2)];
 var $185=($87|0)==($184|0);
 if($185){var $_2=$__021;label=63;break;}else{label=61;break;}
 case 61: 
 var $186=((($184)-(4))|0);
 var $187=($87>>>0)<($186>>>0);
 if($187){var $_01857=$87;var $188=$186;label=62;break;}else{var $_2=$__021;label=63;break;}
 case 62: 
 var $188;
 var $_01857;
 var $189=HEAP32[(($_01857)>>2)];
 var $190=HEAP32[(($188)>>2)];
 HEAP32[(($_01857)>>2)]=$190;
 HEAP32[(($188)>>2)]=$189;
 var $191=(($_01857+4)|0);
 var $192=((($188)-(4))|0);
 var $193=($191>>>0)<($192>>>0);
 if($193){var $_01857=$191;var $188=$192;label=62;break;}else{var $_2=$__021;label=63;break;}
 case 63: 
 var $_2;
 var $194=((($__p_064)+(1))|0);
 var $195=($194>>>0)<4;
 if($195){var $_02163=$_2;var $__p_064=$194;label=2;break;}else{label=64;break;}
 case 64: 
 var $197=HEAP8[($2)];
 var $198=($197&255);
 var $199=$198&1;
 var $200=($199|0)==0;
 if($200){label=66;break;}else{label=65;break;}
 case 65: 
 var $202=HEAP32[(($3)>>2)];
 var $205=$202;label=67;break;
 case 66: 
 var $204=$198>>>1;
 var $205=$204;label=67;break;
 case 67: 
 var $205;
 var $206=($205>>>0)>1;
 if($206){label=68;break;}else{label=79;break;}
 case 68: 
 var $208=$197&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=70;break;}else{label=69;break;}
 case 69: 
 var $211=HEAP32[(($4)>>2)];
 var $214=$211;var $213=$211;var $_in=$211;label=71;break;
 case 70: 
 var $214=$3;var $213=$3;var $_in=$3;label=71;break;
 case 71: 
 var $_in;
 var $213;
 var $214;
 var $215=$_in;
 if($200){label=73;break;}else{label=72;break;}
 case 72: 
 var $217=HEAP32[(($3)>>2)];
 var $220=$217;label=74;break;
 case 73: 
 var $219=$198>>>1;
 var $220=$219;label=74;break;
 case 74: 
 var $220;
 var $221=(($214+($220<<2))|0);
 var $222=HEAP32[(($__me)>>2)];
 var $_sroa_028_030=(($213+4)|0);
 var $223=($_sroa_028_030|0)==($221|0);
 if($223){var $_020_lcssa=$222;label=78;break;}else{label=75;break;}
 case 75: 
 var $224=((($220)-(2))|0);
 var $scevgep=(($214+($224<<2))|0);
 var $scevgep66=$scevgep;
 var $225=(((-$215))|0);
 var $uglygep=(($scevgep66+$225)|0);
 var $uglygep67=$uglygep;
 var $226=$uglygep67>>>2;
 var $227=((($226)+(1))|0);
 var $_02031=$222;var $_sroa_028_032=$_sroa_028_030;label=76;break;
 case 76: 
 var $_sroa_028_032;
 var $_02031;
 var $229=HEAP32[(($_sroa_028_032)>>2)];
 HEAP32[(($_02031)>>2)]=$229;
 var $230=(($_02031+4)|0);
 var $_sroa_028_0=(($_sroa_028_032+4)|0);
 var $231=($_sroa_028_0|0)==($221|0);
 if($231){label=77;break;}else{var $_02031=$230;var $_sroa_028_032=$_sroa_028_0;label=76;break;}
 case 77: 
 var $scevgep68=(($222+($227<<2))|0);
 var $_020_lcssa=$scevgep68;label=78;break;
 case 78: 
 var $_020_lcssa;
 HEAP32[(($__me)>>2)]=$_020_lcssa;
 label=79;break;
 case 79: 
 var $233=$__flags&176;
 if(($233|0)==32){ label=80;break;}else if(($233|0)==16){ label=82;break;}else{label=81;break;}
 case 80: 
 var $235=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$235;
 label=82;break;
 case 81: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=82;break;
 case 82: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp7=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $4=(($__loc)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((17328)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i)|0);
 HEAP32[(($10)>>2)]=17328;
 var $11=(($__p_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(28);
 var $12=(($__p_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$6,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=42;break; }
 case 3: 
 var $13=HEAP32[((17332)>>2)];
 var $14=((($13)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $15=(($5+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($5+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11336,(432)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$25;
 var $30=$__digits;
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$32&1;
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=(($__digits+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $40=$37;label=10;break;
 case 9: 
 var $39=$32>>>1;
 var $40=$39;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $58=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $43=$31&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($__digits+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $50=$47;label=14;break;
 case 13: 
 var $49=(($__digits+4)|0);
 var $50=$49;label=14;break;
 case 14: 
 var $50;
 var $51=HEAP32[(($50)>>2)];
 var $52=$25;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+44)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($29,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 var $57=($51|0)==($56|0);
 var $58=$57;label=16;break;
 case 16: 
 var $58;
 HEAP32[(($__pat)>>2)]=0;
 HEAP32[(($__grp7)>>2)]=0; HEAP32[((($__grp7)+(4))>>2)]=0; HEAP32[((($__grp7)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$58,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $60=(($__mbuf)|0);
 var $61=HEAP8[($30)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 if($64){label=19;break;}else{label=18;break;}
 case 18: 
 var $66=(($__digits+4)|0);
 var $67=HEAP32[(($66)>>2)];
 var $70=$67;label=20;break;
 case 19: 
 var $69=$62>>>1;
 var $70=$69;label=20;break;
 case 20: 
 var $70;
 var $71=HEAP32[(($__fd)>>2)];
 var $72=($70|0)>($71|0);
 if($72){label=21;break;}else{label=31;break;}
 case 21: 
 if($64){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=(($__digits+4)|0);
 var $76=HEAP32[(($75)>>2)];
 var $79=$76;label=24;break;
 case 23: 
 var $78=$62>>>1;
 var $79=$78;label=24;break;
 case 24: 
 var $79;
 var $80=((($79)-($71))|0);
 var $81=$80<<1;
 var $82=HEAP8[($2)];
 var $83=($82&255);
 var $84=$83&1;
 var $85=($84|0)==0;
 if($85){label=26;break;}else{label=25;break;}
 case 25: 
 var $87=(($__sn+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $91=$88;label=27;break;
 case 26: 
 var $90=$83>>>1;
 var $91=$90;label=27;break;
 case 27: 
 var $91;
 var $92=HEAP8[($1)];
 var $93=($92&255);
 var $94=$93&1;
 var $95=($94|0)==0;
 if($95){label=29;break;}else{label=28;break;}
 case 28: 
 var $97=(($__sym+4)|0);
 var $98=HEAP32[(($97)>>2)];
 var $101=$98;label=30;break;
 case 29: 
 var $100=$93>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=$81|1;
 var $103=((($102)+($91))|0);
 var $104=((($103)+($101))|0);
 var $_pn=$104;label=38;break;
 case 31: 
 var $106=HEAP8[($2)];
 var $107=($106&255);
 var $108=$107&1;
 var $109=($108|0)==0;
 if($109){label=33;break;}else{label=32;break;}
 case 32: 
 var $111=(($__sn+4)|0);
 var $112=HEAP32[(($111)>>2)];
 var $115=$112;label=34;break;
 case 33: 
 var $114=$107>>>1;
 var $115=$114;label=34;break;
 case 34: 
 var $115;
 var $116=HEAP8[($1)];
 var $117=($116&255);
 var $118=$117&1;
 var $119=($118|0)==0;
 if($119){label=36;break;}else{label=35;break;}
 case 35: 
 var $121=(($__sym+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $125=$122;label=37;break;
 case 36: 
 var $124=$117>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=((($115)+(2))|0);
 var $127=((($126)+($125))|0);
 var $_pn=$127;label=38;break;
 case 38: 
 var $_pn;
 var $129=((($_pn)+($71))|0);
 var $130=($129>>>0)>100;
 if($130){label=39;break;}else{var $__mb_0=$60;var $__h_sroa_0_1=0;var $152=$61;label=46;break;}
 case 39: 
 var $131=$129<<2;
 var $132=_malloc($131);
 var $133=$132;
 var $134=($132|0)==0;
 if($134){label=40;break;}else{var $__mb_0=$133;var $__h_sroa_0_1=$133;var $152=$61;label=46;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $__h_sroa_0_0=$133;label=44;break; }
 case 41: 
 var $_pre=HEAP8[($30)];
 var $__mb_0=$133;var $__h_sroa_0_1=$133;var $152=$_pre;label=46;break;
 case 42: 
 var $137$0 = ___cxa_find_matching_catch(-1, -1); var $137$1 = tempRet0;
 var $138=$137$0;
 var $139=$137$1;
 var $_1=$139;var $_12=$138;label=58;break;
 case 43: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1); var $141$1 = tempRet0;
 var $142=$141$0;
 var $143=$141$1;
 var $_0=$143;var $_01=$142;label=57;break;
 case 44: 
 var $__h_sroa_0_0;
 var $145$0 = ___cxa_find_matching_catch(-1, -1); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=$145$1;
 var $148=($__h_sroa_0_0|0)==0;
 if($148){var $_0=$147;var $_01=$146;label=57;break;}else{label=45;break;}
 case 45: 
 var $150=$__h_sroa_0_0;
 _free($150);
 var $_0=$147;var $_01=$146;label=57;break;
 case 46: 
 var $152;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $153=(($__iob+4)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$152&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($__digits+8)|0);
 var $159=HEAP32[(($158)>>2)];
 var $164=$159;var $163=$159;label=49;break;
 case 48: 
 var $161=(($__digits+4)|0);
 var $162=(($__digits+4)|0);
 var $164=$162;var $163=$161;label=49;break;
 case 49: 
 var $163;
 var $164;
 var $165=($152&255);
 var $166=$165&1;
 var $167=($166|0)==0;
 if($167){label=51;break;}else{label=50;break;}
 case 50: 
 var $169=(($__digits+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $173=$170;label=52;break;
 case 51: 
 var $172=$165>>>1;
 var $173=$172;label=52;break;
 case 52: 
 var $173;
 var $174=(($164+($173<<2))|0);
 var $175=HEAP32[(($__dp)>>2)];
 var $176=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$154,$163,$174,$29,$58,$tmpcast,$175,$176,$__grp,$__sym,$__sn,$71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 53: 
 var $178=(($__s)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($3)|0);
 HEAP32[(($180)>>2)]=$179;
 var $181=HEAP32[(($__mi)>>2)];
 var $182=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$181,$182,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 54: 
 var $184=($__h_sroa_0_1|0)==0;
 if($184){label=56;break;}else{label=55;break;}
 case 55: 
 var $186=$__h_sroa_0_1;
 _free($186);
 label=56;break;
 case 56: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $187=HEAP32[(($4)>>2)];
 var $188=(($187)|0);
 var $189=__ZNSt3__114__shared_count16__release_sharedEv($188);
 STACKTOP=sp;return;
 case 57: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=58;break;
 case 58: 
 var $_12;
 var $_1;
 var $191=HEAP32[(($4)>>2)];
 var $192=(($191)|0);
 var $193=__ZNSt3__114__shared_count16__release_sharedEv($192);
 var $194$0=$_12;
 var $194$1=0;
 var $195$0=$194$0;
 var $195$1=$_1;
 ___resumeException($195$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $0=$__ndflt;
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result14=$agg_result;
 var $1=$__dflt;
 var $2=$__dflt;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__dflt+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $13=$8;var $12=$8;label=4;break;
 case 3: 
 var $10=(($1+1)|0);
 var $11=(($1+1)|0);
 var $13=$11;var $12=$10;label=4;break;
 case 4: 
 var $12;
 var $13;
 var $14=($3&255);
 var $15=$14&1;
 var $16=($15|0)==0;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($__dflt+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $22=$19;label=7;break;
 case 6: 
 var $21=$14>>>1;
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23=(($13+$22)|0);
 var $24=($12>>>0)<($23>>>0);
 if($24){var $_011=$12;label=9;break;}else{label=8;break;}
 case 8: 
 var $25=($__c|0)==-1;
 var $26=$__c<<1;
 var $27=$26;
 var $28=($25?-1:$27);
 var $43=$28;label=16;break;
 case 9: 
 var $_011;
 var $29=HEAP8[($_011)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $30=(($_011+1)|0);
 var $31=($30>>>0)<($23>>>0);
 if($31){var $_011=$30;label=9;break;}else{label=11;break;}
 case 11: 
 var $_pre=HEAP8[($0)];
 var $phitmp=$_pre&1;
 var $phitmp15=(($phitmp<<24)>>24)==0;
 var $32=($__c|0)==-1;
 var $33=$__c<<1;
 var $34=$33;
 var $35=($32?-1:$34);
 if($phitmp15){var $43=$35;label=16;break;}else{label=15;break;}
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=$lpad_phi$0;
 var $38=$lpad_phi$1;
 var $_04=$38;var $_05=$37;label=23;break;
 case 15: 
 var $40=(($__ndflt+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $47=$41;var $46=$35;label=17;break;
 case 16: 
 var $43;
 var $44=$__ndflt;
 var $45=(($44+1)|0);
 var $47=$45;var $46=$43;label=17;break;
 case 17: 
 var $46;
 var $47;
 var $48=(function() { try { __THREW__ = 0; return _catgets($46,$__set,$__msgid,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 18: 
 HEAP32[(($agg_result14)>>2)]=0; HEAP32[((($agg_result14)+(4))>>2)]=0; HEAP32[((($agg_result14)+(8))>>2)]=0;
 var $50=_strlen($48);
 var $51=(($48+$50)|0);
 var $52=($50|0)>0;
 if($52){var $_029=$48;label=19;break;}else{label=22;break;}
 case 19: 
 var $_029;
 var $53=HEAP8[($_029)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 20: 
 var $54=(($_029+1)|0);
 var $55=($54>>>0)<($51>>>0);
 if($55){var $_029=$54;label=19;break;}else{label=22;break;}
 case 21: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $59=$57$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 var $_04=$59;var $_05=$58;label=23;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 23: 
 var $_05;
 var $_04;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $61$0=$_05;
 var $61$1=0;
 var $62$0=$61$0;
 var $62$1=$_04;
 ___resumeException($62$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i10=sp;
 var $__buf_i12=(sp)+(8);
 var $__bn_i13=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $0=$__ndflt;
 var $1=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result43=$agg_result;
 var $tmpcast=$__mb_i10;
 var $tmpcast9=$__mb_i;
 var $3=(($1)|0);
 var $4=(($1)|0);
 var $5=(($1+4)|0);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($4)>>2)]=6384;
 var $6=$__dflt;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__dflt+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $17=$12;var $16=$12;label=4;break;
 case 3: 
 var $14=(($__dflt+4)|0);
 var $15=(($__dflt+4)|0);
 var $17=$15;var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=($7&255);
 var $19=$18&1;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 var $22=(($__dflt+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $26=$23;label=7;break;
 case 6: 
 var $25=$18>>>1;
 var $26=$25;label=7;break;
 case 7: 
 var $26;
 var $27=(($17+($26<<2))|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($__mb_i10)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__mb_i10+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $28=($16>>>0)<($27>>>0);
 if($28){label=8;break;}else{label=21;break;}
 case 8: 
 var $29=$1;
 var $30=(($__buf_i12)|0);
 var $31=(($__buf_i12+32)|0);
 var $_040=$16;var $33=6384;label=9;break;
 case 9: 
 var $33;
 var $_040;
 HEAP32[(($__wn_i)>>2)]=$_040;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($3,$tmpcast,$_040,$27,$__wn_i,$30,$31,$__bn_i13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 var $37=($36|0)==2;
 var $38=HEAP32[(($__wn_i)>>2)];
 var $39=($38|0)==($_040|0);
 var $or_cond11=$37|$39;
 if($or_cond11){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=HEAP32[(($__bn_i13)>>2)];
 var $41=($30>>>0)<($40>>>0);
 if($41){var $__p_i14_035=$30;label=16;break;}else{var $53=$38;label=19;break;}
 case 12: 
 var $43=___cxa_allocate_exception(8);
 var $44=$43;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($44,1672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=15;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($43,11368,(50)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=25;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1); var $47$1 = tempRet0;
 ___cxa_free_exception($43);
 var $eh_lpad_body$1=$47$1;var $eh_lpad_body$0=$47$0;label=26;break;
 case 16: 
 var $__p_i14_035;
 var $48=HEAP8[($__p_i14_035)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=23;break; }
 case 17: 
 var $49=(($__p_i14_035+1)|0);
 var $50=HEAP32[(($__bn_i13)>>2)];
 var $51=($49>>>0)<($50>>>0);
 if($51){var $__p_i14_035=$49;label=16;break;}else{label=18;break;}
 case 18: 
 var $_pre44=HEAP32[(($__wn_i)>>2)];
 var $53=$_pre44;label=19;break;
 case 19: 
 var $53;
 var $54=($53>>>0)<($27>>>0);
 if($54){label=20;break;}else{label=21;break;}
 case 20: 
 var $_pre47=HEAP32[(($29)>>2)];
 var $_040=$53;var $33=$_pre47;label=9;break;
 case 21: 
 var $55=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($55);
 var $56=($__c|0)==-1;
 var $57=$__c<<1;
 var $58=$57;
 var $59=($56?-1:$58);
 var $60=HEAP8[($0)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=28;break;}else{label=27;break;}
 case 22: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=$64$0;
 var $66=$64$1;
 var $_03=$66;var $_04=$65;label=49;break;
 case 23: 
 var $lpad_loopexit33$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit33$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit33$1;var $eh_lpad_body$0=$lpad_loopexit33$0;label=26;break;
 case 24: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit37$1;var $eh_lpad_body$0=$lpad_loopexit37$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit38$1;var $eh_lpad_body$0=$lpad_nonloopexit38$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $67=$eh_lpad_body$0;
 var $68=$eh_lpad_body$1;
 var $69=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($69);
 var $_03=$68;var $_04=$67;label=49;break;
 case 27: 
 var $71=(($__ndflt+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $76=$72;label=29;break;
 case 28: 
 var $74=$__ndflt;
 var $75=(($74+1)|0);
 var $76=$75;label=29;break;
 case 29: 
 var $76;
 var $77=(function() { try { __THREW__ = 0; return _catgets($59,$__set,$__msgid,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=22;break; }
 case 30: 
 HEAP32[(($agg_result43)>>2)]=0; HEAP32[((($agg_result43)+(4))>>2)]=0; HEAP32[((($agg_result43)+(8))>>2)]=0;
 var $79=(($2)|0);
 var $80=(($2)|0);
 var $81=(($2+4)|0);
 HEAP32[(($81)>>2)]=0;
 HEAP32[(($80)>>2)]=6328;
 var $82=_strlen($77);
 var $83=(($77+$82)|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($__mb_i)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($__mb_i+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $84=($82|0)<1;
 if($84){label=44;break;}else{label=31;break;}
 case 31: 
 var $85=$2;
 var $86=$83;
 var $87=(($__buf_i)|0);
 var $88=(($__buf_i+128)|0);
 var $_0228=$77;var $90=6328;label=32;break;
 case 32: 
 var $90;
 var $_0228;
 HEAP32[(($__nn_i)>>2)]=$_0228;
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$_0228;
 var $94=((($86)-($93))|0);
 var $95=($94|0)>32;
 var $96=(($_0228+32)|0);
 var $97=($95?$96:$83);
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($79,$tmpcast9,$_0228,$97,$__nn_i,$87,$88,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=46;break; }
 case 33: 
 var $99=($98|0)==2;
 var $100=HEAP32[(($__nn_i)>>2)];
 var $101=($100|0)==($_0228|0);
 var $or_cond14=$99|$101;
 if($or_cond14){label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($__bn_i)>>2)];
 var $103=($87>>>0)<($102>>>0);
 if($103){var $__p_i_024=$87;label=39;break;}else{var $115=$100;label=42;break;}
 case 35: 
 var $105=___cxa_allocate_exception(8);
 var $106=$105;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($106,1672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=38;break; }
 case 36: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($105,11368,(50)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=47;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 ___cxa_free_exception($105);
 var $eh_lpad_body21$1=$109$1;var $eh_lpad_body21$0=$109$0;label=48;break;
 case 39: 
 var $__p_i_024;
 var $110=HEAP32[(($__p_i_024)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=45;break; }
 case 40: 
 var $111=(($__p_i_024+4)|0);
 var $112=HEAP32[(($__bn_i)>>2)];
 var $113=($111>>>0)<($112>>>0);
 if($113){var $__p_i_024=$111;label=39;break;}else{label=41;break;}
 case 41: 
 var $_pre=HEAP32[(($__nn_i)>>2)];
 var $115=$_pre;label=42;break;
 case 42: 
 var $115;
 var $116=($115>>>0)<($83>>>0);
 if($116){label=43;break;}else{label=44;break;}
 case 43: 
 var $_pre46=HEAP32[(($85)>>2)];
 var $_0228=$115;var $90=$_pre46;label=32;break;
 case 44: 
 var $117=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($117);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 45: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body21$1=$lpad_loopexit$1;var $eh_lpad_body21$0=$lpad_loopexit$0;label=48;break;
 case 46: 
 var $lpad_loopexit25$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit25$1 = tempRet0;
 var $eh_lpad_body21$1=$lpad_loopexit25$1;var $eh_lpad_body21$0=$lpad_loopexit25$0;label=48;break;
 case 47: 
 var $lpad_nonloopexit26$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit26$1 = tempRet0;
 var $eh_lpad_body21$1=$lpad_nonloopexit26$1;var $eh_lpad_body21$0=$lpad_nonloopexit26$0;label=48;break;
 case 48: 
 var $eh_lpad_body21$0;
 var $eh_lpad_body21$1;
 var $118=$eh_lpad_body21$0;
 var $119=$eh_lpad_body21$1;
 var $120=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($120);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
 var $_03=$119;var $_04=$118;label=49;break;
 case 49: 
 var $_04;
 var $_03;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $122$0=$_04;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_03;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5728;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(18072)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(18072);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((15792)>>2)]=$10;

 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;

 label=9;break;
 case 6: 
 var $15=HEAP32[((15792)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $23=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($23);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,2920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=$1;
 HEAP32[(($3)>>2)]=4640;
 ___cxa_throw($1,11384,(90));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i116=sp;
 var $__p_i_i_i112=(sp)+(16);
 var $__p_i_i_i108=(sp)+(32);
 var $__p_i_i_i101=(sp)+(48);
 var $__p_i_i_i95=(sp)+(64);
 var $__p_i_i_i91=(sp)+(80);
 var $__p_i_i_i87=(sp)+(96);
 var $__p_i_i_i83=(sp)+(112);
 var $__p_i_i_i79=(sp)+(128);
 var $__p_i_i_i75=(sp)+(144);
 var $__p_i_i_i71=(sp)+(160);
 var $__p_i_i_i67=(sp)+(176);
 var $__p_i_i_i63=(sp)+(192);
 var $__p_i_i_i59=(sp)+(208);
 var $__p_i_i_i55=(sp)+(224);
 var $__p_i_i_i51=(sp)+(240);
 var $__p_i_i_i47=(sp)+(256);
 var $__p_i_i_i43=(sp)+(272);
 var $__p_i_i_i39=(sp)+(288);
 var $__p_i_i_i35=(sp)+(304);
 var $__p_i_i_i31=(sp)+(320);
 var $__p_i_i_i27=(sp)+(336);
 var $__p_i_i_i23=(sp)+(352);
 var $__p_i_i_i19=(sp)+(368);
 var $__p_i_i_i15=(sp)+(384);
 var $__p_i_i_i11=(sp)+(400);
 var $__p_i_i_i7=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $1=((($refs)-(1))|0);
 var $2=(($this)|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$1;
 HEAP32[(($2)>>2)]=5984;
 var $4=(($this+8)|0);
 var $5=(($this+12)|0);
 var $6=(($this+16)|0);
 var $7=(($this+136)|0);
 HEAP8[($7)]=1;
 var $8=(($this+24)|0);
 var $9=$8;
 HEAP32[(($5)>>2)]=$9;
 HEAP32[(($4)>>2)]=$9;
 var $10=(($8+112)|0);
 var $11=$10;
 HEAP32[(($6)>>2)]=$11;
 var $_0_i2_i=28;var $13=$9;label=2;break;
 case 2: 
 var $13;
 var $_0_i2_i;
 var $14=($13|0)==0;
 if($14){var $16=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($13)>>2)]=0;
 var $_pre2_i_i=HEAP32[(($5)>>2)];
 var $16=$_pre2_i_i;label=4;break;
 case 4: 
 var $16;
 var $17=(($16+4)|0);
 HEAP32[(($5)>>2)]=$17;
 var $18=((($_0_i2_i)-(1))|0);
 var $19=($18|0)==0;
 if($19){label=5;break;}else{var $_0_i2_i=$18;var $13=$17;label=2;break;}
 case 5: 
 var $20=(($this+144)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($20,2864,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=110;break; }
 case 6: 
 var $21=HEAP32[(($4)>>2)];
 var $22=HEAP32[(($5)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $24=$21;
 var $scevgep=((($22)-(4))|0);
 var $scevgep120=$scevgep;
 var $25=(((-$24))|0);
 var $uglygep=(($scevgep120+$25)|0);
 var $uglygep121=$uglygep;
 var $26=$uglygep121>>>2;
 var $27=$26^-1;
 var $scevgep122=(($22+($27<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep122;
 label=8;break;
 case 8: 
 HEAP32[((16020)>>2)]=0;
 HEAP32[((16016)>>2)]=5688;
 var $29=$__p_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $30=HEAP32[((17016)>>2)];
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 var $33=(($__p_i_i_i)|0);
 HEAP32[(($33)>>2)]=17016;
 var $34=(($__p_i_i_i+4)|0);
 HEAP32[(($34)>>2)]=(28);
 var $35=(($__p_i_i_i+8)|0);
 HEAP32[(($35)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17016,$29,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=111;break; }
 case 10: 
 var $36=HEAP32[((17020)>>2)];
 var $37=((($36)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16016,$37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=111;break; }
 case 11: 
 HEAP32[((16012)>>2)]=0;
 HEAP32[((16008)>>2)]=5648;
 var $39=$__p_i_i_i7;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $40=HEAP32[((17008)>>2)];
 var $41=($40|0)==-1;
 if($41){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__p_i_i_i7)|0);
 HEAP32[(($43)>>2)]=17008;
 var $44=(($__p_i_i_i7+4)|0);
 HEAP32[(($44)>>2)]=(28);
 var $45=(($__p_i_i_i7+8)|0);
 HEAP32[(($45)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17008,$39,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=111;break; }
 case 13: 
 var $46=HEAP32[((17012)>>2)];
 var $47=((($46)-(1))|0);
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16008,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=111;break; }
 case 14: 
 HEAP32[((16236)>>2)]=0;
 HEAP32[((16232)>>2)]=6096;
 HEAP32[((16240)>>2)]=0;
 HEAP8[(16244)]=0;
 var $48=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 var $51=$50$0;
 ___clang_call_terminate($51);
 throw "Reached an unreachable!";
 case 16: 
 var $53=HEAP32[(($48)>>2)];
 HEAP32[((16240)>>2)]=$53;
 var $54=$__p_i_i_i11;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $55=HEAP32[((17336)>>2)];
 var $56=($55|0)==-1;
 if($56){label=18;break;}else{label=17;break;}
 case 17: 
 var $58=(($__p_i_i_i11)|0);
 HEAP32[(($58)>>2)]=17336;
 var $59=(($__p_i_i_i11+4)|0);
 HEAP32[(($59)>>2)]=(28);
 var $60=(($__p_i_i_i11+8)|0);
 HEAP32[(($60)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17336,$54,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=111;break; }
 case 18: 
 var $61=HEAP32[((17340)>>2)];
 var $62=((($61)-(1))|0);
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16232,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=111;break; }
 case 19: 
 HEAP32[((16228)>>2)]=0;
 HEAP32[((16224)>>2)]=6016;
 var $64=$__p_i_i_i15;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $65=HEAP32[((17328)>>2)];
 var $66=($65|0)==-1;
 if($66){label=21;break;}else{label=20;break;}
 case 20: 
 var $68=(($__p_i_i_i15)|0);
 HEAP32[(($68)>>2)]=17328;
 var $69=(($__p_i_i_i15+4)|0);
 HEAP32[(($69)>>2)]=(28);
 var $70=(($__p_i_i_i15+8)|0);
 HEAP32[(($70)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17328,$64,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=111;break; }
 case 21: 
 var $71=HEAP32[((17332)>>2)];
 var $72=((($71)-(1))|0);
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16224,$72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=111;break; }
 case 22: 
 HEAP32[((16044)>>2)]=0;
 HEAP32[((16040)>>2)]=5784;
 var $74=$__p_i_i_i19;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $75=HEAP32[((17032)>>2)];
 var $76=($75|0)==-1;
 if($76){label=24;break;}else{label=23;break;}
 case 23: 
 var $78=(($__p_i_i_i19)|0);
 HEAP32[(($78)>>2)]=17032;
 var $79=(($__p_i_i_i19+4)|0);
 HEAP32[(($79)>>2)]=(28);
 var $80=(($__p_i_i_i19+8)|0);
 HEAP32[(($80)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17032,$74,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=111;break; }
 case 24: 
 var $81=HEAP32[((17036)>>2)];
 var $82=((($81)-(1))|0);
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16040,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=111;break; }
 case 25: 
 HEAP32[((16028)>>2)]=0;
 HEAP32[((16024)>>2)]=5728;
 var $83=HEAP8[(18072)];
 var $84=(($83<<24)>>24)==0;
 if($84){label=26;break;}else{label=30;break;}
 case 26: 
 var $86=___cxa_guard_acquire(18072);
 var $87=($86|0)==0;
 if($87){label=30;break;}else{label=27;break;}
 case 27: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 HEAP32[((15792)>>2)]=$89;

 label=30;break;
 case 29: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(16024);
 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=112;break;
 case 30: 
 var $93=HEAP32[((15792)>>2)];
 HEAP32[((16032)>>2)]=$93;
 var $94=$__p_i_i_i23;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $95=HEAP32[((17024)>>2)];
 var $96=($95|0)==-1;
 if($96){label=32;break;}else{label=31;break;}
 case 31: 
 var $98=(($__p_i_i_i23)|0);
 HEAP32[(($98)>>2)]=17024;
 var $99=(($__p_i_i_i23+4)|0);
 HEAP32[(($99)>>2)]=(28);
 var $100=(($__p_i_i_i23+8)|0);
 HEAP32[(($100)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17024,$94,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=111;break; }
 case 32: 
 var $101=HEAP32[((17028)>>2)];
 var $102=((($101)-(1))|0);
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16024,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=111;break; }
 case 33: 
 HEAP32[((16052)>>2)]=0;
 HEAP32[((16048)>>2)]=5840;
 var $104=$__p_i_i_i27;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $105=HEAP32[((17040)>>2)];
 var $106=($105|0)==-1;
 if($106){label=35;break;}else{label=34;break;}
 case 34: 
 var $108=(($__p_i_i_i27)|0);
 HEAP32[(($108)>>2)]=17040;
 var $109=(($__p_i_i_i27+4)|0);
 HEAP32[(($109)>>2)]=(28);
 var $110=(($__p_i_i_i27+8)|0);
 HEAP32[(($110)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17040,$104,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=111;break; }
 case 35: 
 var $111=HEAP32[((17044)>>2)];
 var $112=((($111)-(1))|0);
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16048,$112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=111;break; }
 case 36: 
 HEAP32[((16060)>>2)]=0;
 HEAP32[((16056)>>2)]=5896;
 var $114=$__p_i_i_i31;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $115=HEAP32[((17048)>>2)];
 var $116=($115|0)==-1;
 if($116){label=38;break;}else{label=37;break;}
 case 37: 
 var $118=(($__p_i_i_i31)|0);
 HEAP32[(($118)>>2)]=17048;
 var $119=(($__p_i_i_i31+4)|0);
 HEAP32[(($119)>>2)]=(28);
 var $120=(($__p_i_i_i31+8)|0);
 HEAP32[(($120)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17048,$114,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=111;break; }
 case 38: 
 var $121=HEAP32[((17052)>>2)];
 var $122=((($121)-(1))|0);
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16056,$122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=111;break; }
 case 39: 
 HEAP32[((15940)>>2)]=0;
 HEAP32[((15936)>>2)]=5192;
 HEAP8[(15944)]=46;
 HEAP8[(15945)]=44;
 HEAP32[((15948)>>2)]=0; HEAP32[((15952)>>2)]=0; HEAP32[((15956)>>2)]=0;
 var $124=$__p_i_i_i35;
 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $125=HEAP32[((16952)>>2)];
 var $126=($125|0)==-1;
 if($126){label=41;break;}else{label=40;break;}
 case 40: 
 var $128=(($__p_i_i_i35)|0);
 HEAP32[(($128)>>2)]=16952;
 var $129=(($__p_i_i_i35+4)|0);
 HEAP32[(($129)>>2)]=(28);
 var $130=(($__p_i_i_i35+8)|0);
 HEAP32[(($130)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16952,$124,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=111;break; }
 case 41: 
 var $131=HEAP32[((16956)>>2)];
 var $132=((($131)-(1))|0);
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15936,$132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=111;break; }
 case 42: 
 HEAP32[((15908)>>2)]=0;
 HEAP32[((15904)>>2)]=5144;
 HEAP32[((15912)>>2)]=46;
 HEAP32[((15916)>>2)]=44;
 HEAP32[((15920)>>2)]=0; HEAP32[((15924)>>2)]=0; HEAP32[((15928)>>2)]=0;
 var $134=$__p_i_i_i39;
 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $135=HEAP32[((16944)>>2)];
 var $136=($135|0)==-1;
 if($136){label=44;break;}else{label=43;break;}
 case 43: 
 var $138=(($__p_i_i_i39)|0);
 HEAP32[(($138)>>2)]=16944;
 var $139=(($__p_i_i_i39+4)|0);
 HEAP32[(($139)>>2)]=(28);
 var $140=(($__p_i_i_i39+8)|0);
 HEAP32[(($140)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16944,$134,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=111;break; }
 case 44: 
 var $141=HEAP32[((16948)>>2)];
 var $142=((($141)-(1))|0);
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15904,$142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=111;break; }
 case 45: 
 HEAP32[((16004)>>2)]=0;
 HEAP32[((16000)>>2)]=5576;
 var $144=$__p_i_i_i43;
 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $145=HEAP32[((17000)>>2)];
 var $146=($145|0)==-1;
 if($146){label=47;break;}else{label=46;break;}
 case 46: 
 var $148=(($__p_i_i_i43)|0);
 HEAP32[(($148)>>2)]=17000;
 var $149=(($__p_i_i_i43+4)|0);
 HEAP32[(($149)>>2)]=(28);
 var $150=(($__p_i_i_i43+8)|0);
 HEAP32[(($150)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17000,$144,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=111;break; }
 case 47: 
 var $151=HEAP32[((17004)>>2)];
 var $152=((($151)-(1))|0);
 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16000,$152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=111;break; }
 case 48: 
 HEAP32[((15996)>>2)]=0;
 HEAP32[((15992)>>2)]=5504;
 var $154=$__p_i_i_i47;
 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $155=HEAP32[((16992)>>2)];
 var $156=($155|0)==-1;
 if($156){label=50;break;}else{label=49;break;}
 case 49: 
 var $158=(($__p_i_i_i47)|0);
 HEAP32[(($158)>>2)]=16992;
 var $159=(($__p_i_i_i47+4)|0);
 HEAP32[(($159)>>2)]=(28);
 var $160=(($__p_i_i_i47+8)|0);
 HEAP32[(($160)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16992,$154,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=111;break; }
 case 50: 
 var $161=HEAP32[((16996)>>2)];
 var $162=((($161)-(1))|0);
 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15992,$162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=111;break; }
 case 51: 
 HEAP32[((15988)>>2)]=0;
 HEAP32[((15984)>>2)]=5440;
 var $164=$__p_i_i_i51;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $165=HEAP32[((16984)>>2)];
 var $166=($165|0)==-1;
 if($166){label=53;break;}else{label=52;break;}
 case 52: 
 var $168=(($__p_i_i_i51)|0);
 HEAP32[(($168)>>2)]=16984;
 var $169=(($__p_i_i_i51+4)|0);
 HEAP32[(($169)>>2)]=(28);
 var $170=(($__p_i_i_i51+8)|0);
 HEAP32[(($170)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16984,$164,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=111;break; }
 case 53: 
 var $171=HEAP32[((16988)>>2)];
 var $172=((($171)-(1))|0);
 var $$etemp$25$0=12;
 var $$etemp$25$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15984,$172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=111;break; }
 case 54: 
 HEAP32[((15980)>>2)]=0;
 HEAP32[((15976)>>2)]=5376;
 var $174=$__p_i_i_i55;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $175=HEAP32[((16976)>>2)];
 var $176=($175|0)==-1;
 if($176){label=56;break;}else{label=55;break;}
 case 55: 
 var $178=(($__p_i_i_i55)|0);
 HEAP32[(($178)>>2)]=16976;
 var $179=(($__p_i_i_i55+4)|0);
 HEAP32[(($179)>>2)]=(28);
 var $180=(($__p_i_i_i55+8)|0);
 HEAP32[(($180)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16976,$174,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=111;break; }
 case 56: 
 var $181=HEAP32[((16980)>>2)];
 var $182=((($181)-(1))|0);
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15976,$182) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=111;break; }
 case 57: 
 HEAP32[((16276)>>2)]=0;
 HEAP32[((16272)>>2)]=7336;
 var $184=$__p_i_i_i59;
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $185=HEAP32[((17816)>>2)];
 var $186=($185|0)==-1;
 if($186){label=59;break;}else{label=58;break;}
 case 58: 
 var $188=(($__p_i_i_i59)|0);
 HEAP32[(($188)>>2)]=17816;
 var $189=(($__p_i_i_i59+4)|0);
 HEAP32[(($189)>>2)]=(28);
 var $190=(($__p_i_i_i59+8)|0);
 HEAP32[(($190)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17816,$184,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=111;break; }
 case 59: 
 var $191=HEAP32[((17820)>>2)];
 var $192=((($191)-(1))|0);
 var $$etemp$29$0=12;
 var $$etemp$29$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16272,$192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=111;break; }
 case 60: 
 HEAP32[((16268)>>2)]=0;
 HEAP32[((16264)>>2)]=7272;
 var $194=$__p_i_i_i63;
 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $195=HEAP32[((17808)>>2)];
 var $196=($195|0)==-1;
 if($196){label=62;break;}else{label=61;break;}
 case 61: 
 var $198=(($__p_i_i_i63)|0);
 HEAP32[(($198)>>2)]=17808;
 var $199=(($__p_i_i_i63+4)|0);
 HEAP32[(($199)>>2)]=(28);
 var $200=(($__p_i_i_i63+8)|0);
 HEAP32[(($200)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17808,$194,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=111;break; }
 case 62: 
 var $201=HEAP32[((17812)>>2)];
 var $202=((($201)-(1))|0);
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16264,$202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=111;break; }
 case 63: 
 HEAP32[((16260)>>2)]=0;
 HEAP32[((16256)>>2)]=7208;
 var $204=$__p_i_i_i67;
 var $$etemp$32$0=12;
 var $$etemp$32$1=0;

 var $205=HEAP32[((17800)>>2)];
 var $206=($205|0)==-1;
 if($206){label=65;break;}else{label=64;break;}
 case 64: 
 var $208=(($__p_i_i_i67)|0);
 HEAP32[(($208)>>2)]=17800;
 var $209=(($__p_i_i_i67+4)|0);
 HEAP32[(($209)>>2)]=(28);
 var $210=(($__p_i_i_i67+8)|0);
 HEAP32[(($210)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17800,$204,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=111;break; }
 case 65: 
 var $211=HEAP32[((17804)>>2)];
 var $212=((($211)-(1))|0);
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16256,$212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=111;break; }
 case 66: 
 HEAP32[((16252)>>2)]=0;
 HEAP32[((16248)>>2)]=7144;
 var $214=$__p_i_i_i71;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $215=HEAP32[((17792)>>2)];
 var $216=($215|0)==-1;
 if($216){label=68;break;}else{label=67;break;}
 case 67: 
 var $218=(($__p_i_i_i71)|0);
 HEAP32[(($218)>>2)]=17792;
 var $219=(($__p_i_i_i71+4)|0);
 HEAP32[(($219)>>2)]=(28);
 var $220=(($__p_i_i_i71+8)|0);
 HEAP32[(($220)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17792,$214,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=111;break; }
 case 68: 
 var $221=HEAP32[((17796)>>2)];
 var $222=((($221)-(1))|0);
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16248,$222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=111;break; }
 case 69: 
 HEAP32[((15836)>>2)]=0;
 HEAP32[((15832)>>2)]=4824;
 var $224=$__p_i_i_i75;
 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $225=HEAP32[((16904)>>2)];
 var $226=($225|0)==-1;
 if($226){label=71;break;}else{label=70;break;}
 case 70: 
 var $228=(($__p_i_i_i75)|0);
 HEAP32[(($228)>>2)]=16904;
 var $229=(($__p_i_i_i75+4)|0);
 HEAP32[(($229)>>2)]=(28);
 var $230=(($__p_i_i_i75+8)|0);
 HEAP32[(($230)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16904,$224,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=111;break; }
 case 71: 
 var $231=HEAP32[((16908)>>2)];
 var $232=((($231)-(1))|0);
 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15832,$232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=111;break; }
 case 72: 
 HEAP32[((15828)>>2)]=0;
 HEAP32[((15824)>>2)]=4784;
 var $234=$__p_i_i_i79;
 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $235=HEAP32[((16896)>>2)];
 var $236=($235|0)==-1;
 if($236){label=74;break;}else{label=73;break;}
 case 73: 
 var $238=(($__p_i_i_i79)|0);
 HEAP32[(($238)>>2)]=16896;
 var $239=(($__p_i_i_i79+4)|0);
 HEAP32[(($239)>>2)]=(28);
 var $240=(($__p_i_i_i79+8)|0);
 HEAP32[(($240)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16896,$234,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=111;break; }
 case 74: 
 var $241=HEAP32[((16900)>>2)];
 var $242=((($241)-(1))|0);
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15824,$242) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=111;break; }
 case 75: 
 HEAP32[((15820)>>2)]=0;
 HEAP32[((15816)>>2)]=4744;
 var $244=$__p_i_i_i83;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $245=HEAP32[((16888)>>2)];
 var $246=($245|0)==-1;
 if($246){label=77;break;}else{label=76;break;}
 case 76: 
 var $248=(($__p_i_i_i83)|0);
 HEAP32[(($248)>>2)]=16888;
 var $249=(($__p_i_i_i83+4)|0);
 HEAP32[(($249)>>2)]=(28);
 var $250=(($__p_i_i_i83+8)|0);
 HEAP32[(($250)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16888,$244,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=111;break; }
 case 77: 
 var $251=HEAP32[((16892)>>2)];
 var $252=((($251)-(1))|0);
 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15816,$252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=111;break; }
 case 78: 
 HEAP32[((15812)>>2)]=0;
 HEAP32[((15808)>>2)]=4704;
 var $254=$__p_i_i_i87;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $255=HEAP32[((16880)>>2)];
 var $256=($255|0)==-1;
 if($256){label=80;break;}else{label=79;break;}
 case 79: 
 var $258=(($__p_i_i_i87)|0);
 HEAP32[(($258)>>2)]=16880;
 var $259=(($__p_i_i_i87+4)|0);
 HEAP32[(($259)>>2)]=(28);
 var $260=(($__p_i_i_i87+8)|0);
 HEAP32[(($260)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16880,$254,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=111;break; }
 case 80: 
 var $261=HEAP32[((16884)>>2)];
 var $262=((($261)-(1))|0);
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15808,$262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=111;break; }
 case 81: 
 HEAP32[((15892)>>2)]=0;
 HEAP32[((15888)>>2)]=5048;
 HEAP32[((15896)>>2)]=5096;
 var $264=$__p_i_i_i91;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $265=HEAP32[((16936)>>2)];
 var $266=($265|0)==-1;
 if($266){label=83;break;}else{label=82;break;}
 case 82: 
 var $268=(($__p_i_i_i91)|0);
 HEAP32[(($268)>>2)]=16936;
 var $269=(($__p_i_i_i91+4)|0);
 HEAP32[(($269)>>2)]=(28);
 var $270=(($__p_i_i_i91+8)|0);
 HEAP32[(($270)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16936,$264,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=111;break; }
 case 83: 
 var $271=HEAP32[((16940)>>2)];
 var $272=((($271)-(1))|0);
 var $$etemp$45$0=12;
 var $$etemp$45$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15888,$272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=111;break; }
 case 84: 
 HEAP32[((15876)>>2)]=0;
 HEAP32[((15872)>>2)]=4952;
 HEAP32[((15880)>>2)]=5000;
 var $274=$__p_i_i_i95;
 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 var $275=HEAP32[((16928)>>2)];
 var $276=($275|0)==-1;
 if($276){label=86;break;}else{label=85;break;}
 case 85: 
 var $278=(($__p_i_i_i95)|0);
 HEAP32[(($278)>>2)]=16928;
 var $279=(($__p_i_i_i95+4)|0);
 HEAP32[(($279)>>2)]=(28);
 var $280=(($__p_i_i_i95+8)|0);
 HEAP32[(($280)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16928,$274,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=111;break; }
 case 86: 
 var $281=HEAP32[((16932)>>2)];
 var $282=((($281)-(1))|0);
 var $$etemp$47$0=12;
 var $$etemp$47$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15872,$282) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=111;break; }
 case 87: 
 HEAP32[((15860)>>2)]=0;
 HEAP32[((15856)>>2)]=5952;
 var $283=HEAP8[(18072)];
 var $284=(($283<<24)>>24)==0;
 if($284){label=88;break;}else{label=92;break;}
 case 88: 
 var $286=___cxa_guard_acquire(18072);
 var $287=($286|0)==0;
 if($287){label=92;break;}else{label=89;break;}
 case 89: 
 var $289=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 90: 
 HEAP32[((15792)>>2)]=$289;

 label=92;break;
 case 91: 
 var $291$0 = ___cxa_find_matching_catch(-1, -1); var $291$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(15856);
 var $eh_lpad_body$1=$291$1;var $eh_lpad_body$0=$291$0;label=112;break;
 case 92: 
 var $293=HEAP32[((15792)>>2)];
 HEAP32[((15864)>>2)]=$293;
 HEAP32[((15856)>>2)]=4920;
 var $294=$__p_i_i_i101;
 var $$etemp$48$0=12;
 var $$etemp$48$1=0;

 var $295=HEAP32[((16920)>>2)];
 var $296=($295|0)==-1;
 if($296){label=94;break;}else{label=93;break;}
 case 93: 
 var $298=(($__p_i_i_i101)|0);
 HEAP32[(($298)>>2)]=16920;
 var $299=(($__p_i_i_i101+4)|0);
 HEAP32[(($299)>>2)]=(28);
 var $300=(($__p_i_i_i101+8)|0);
 HEAP32[(($300)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16920,$294,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=111;break; }
 case 94: 
 var $301=HEAP32[((16924)>>2)];
 var $302=((($301)-(1))|0);
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15856,$302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=111;break; }
 case 95: 
 HEAP32[((15844)>>2)]=0;
 HEAP32[((15840)>>2)]=5952;
 var $303=HEAP8[(18072)];
 var $304=(($303<<24)>>24)==0;
 if($304){label=96;break;}else{label=100;break;}
 case 96: 
 var $306=___cxa_guard_acquire(18072);
 var $307=($306|0)==0;
 if($307){label=100;break;}else{label=97;break;}
 case 97: 
 var $309=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 HEAP32[((15792)>>2)]=$309;

 label=100;break;
 case 99: 
 var $311$0 = ___cxa_find_matching_catch(-1, -1); var $311$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(15840);
 var $eh_lpad_body$1=$311$1;var $eh_lpad_body$0=$311$0;label=112;break;
 case 100: 
 var $313=HEAP32[((15792)>>2)];
 HEAP32[((15848)>>2)]=$313;
 HEAP32[((15840)>>2)]=4888;
 var $314=$__p_i_i_i108;
 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $315=HEAP32[((16912)>>2)];
 var $316=($315|0)==-1;
 if($316){label=102;break;}else{label=101;break;}
 case 101: 
 var $318=(($__p_i_i_i108)|0);
 HEAP32[(($318)>>2)]=16912;
 var $319=(($__p_i_i_i108+4)|0);
 HEAP32[(($319)>>2)]=(28);
 var $320=(($__p_i_i_i108+8)|0);
 HEAP32[(($320)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16912,$314,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=111;break; }
 case 102: 
 var $321=HEAP32[((16916)>>2)];
 var $322=((($321)-(1))|0);
 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15840,$322) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=111;break; }
 case 103: 
 HEAP32[((15972)>>2)]=0;
 HEAP32[((15968)>>2)]=5280;
 var $324=$__p_i_i_i112;
 var $$etemp$52$0=12;
 var $$etemp$52$1=0;

 var $325=HEAP32[((16968)>>2)];
 var $326=($325|0)==-1;
 if($326){label=105;break;}else{label=104;break;}
 case 104: 
 var $328=(($__p_i_i_i112)|0);
 HEAP32[(($328)>>2)]=16968;
 var $329=(($__p_i_i_i112+4)|0);
 HEAP32[(($329)>>2)]=(28);
 var $330=(($__p_i_i_i112+8)|0);
 HEAP32[(($330)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16968,$324,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=111;break; }
 case 105: 
 var $331=HEAP32[((16972)>>2)];
 var $332=((($331)-(1))|0);
 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15968,$332) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 HEAP32[((15964)>>2)]=0;
 HEAP32[((15960)>>2)]=5240;
 var $334=$__p_i_i_i116;
 var $$etemp$54$0=12;
 var $$etemp$54$1=0;

 var $335=HEAP32[((16960)>>2)];
 var $336=($335|0)==-1;
 if($336){label=108;break;}else{label=107;break;}
 case 107: 
 var $338=(($__p_i_i_i116)|0);
 HEAP32[(($338)>>2)]=16960;
 var $339=(($__p_i_i_i116+4)|0);
 HEAP32[(($339)>>2)]=(28);
 var $340=(($__p_i_i_i116+8)|0);
 HEAP32[(($340)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(16960,$334,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=111;break; }
 case 108: 
 var $341=HEAP32[((16964)>>2)];
 var $342=((($341)-(1))|0);
 var $$etemp$55$0=12;
 var $$etemp$55$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,15960,$342) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $344$0 = ___cxa_find_matching_catch(-1, -1); var $344$1 = tempRet0;
 var $345=$344$0;
 var $346=$344$1;
 var $_0=$346;var $_02=$345;label=113;break;
 case 111: 
 var $348$0 = ___cxa_find_matching_catch(-1, -1); var $348$1 = tempRet0;
 var $eh_lpad_body$1=$348$1;var $eh_lpad_body$0=$348$0;label=112;break;
 case 112: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $349=$eh_lpad_body$0;
 var $350=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($20);
 var $_0=$350;var $_02=$349;label=113;break;
 case 113: 
 var $_02;
 var $_0;
 var $352=HEAP32[(($4)>>2)];
 var $353=$352;
 var $354=($352|0)==0;
 if($354){label=119;break;}else{label=114;break;}
 case 114: 
 var $355=HEAP32[(($5)>>2)];
 var $356=($352|0)==($355|0);
 if($356){label=116;break;}else{label=115;break;}
 case 115: 
 var $scevgep_i_i_i=((($355)-(4))|0);
 var $scevgep2_i_i_i=$scevgep_i_i_i;
 var $357=(((-$353))|0);
 var $uglygep_i_i_i=(($scevgep2_i_i_i+$357)|0);
 var $uglygep3_i_i_i=$uglygep_i_i_i;
 var $358=$uglygep3_i_i_i>>>2;
 var $359=$358^-1;
 var $scevgep4_i_i_i=(($355+($359<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep4_i_i_i;
 label=116;break;
 case 116: 
 var $360=(($this+24)|0);
 var $361=$360;
 var $362=($352|0)==($361|0);
 if($362){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($7)]=0;
 label=119;break;
 case 118: 
 var $365=$352;
 __ZdlPv($365);
 label=119;break;
 case 119: 
 var $366=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($366);
 var $367$0=$_02;
 var $367$1=0;
 var $368$0=$367$0;
 var $368$1=$_0;
 ___resumeException($368$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 var $2=(($this+8)|0);
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($10>>>0)>($id>>>0);
 if($11){var $30=$6;label=11;break;}else{label=2;break;}
 case 2: 
 var $13=((($id)+(1))|0);
 var $14=($10>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 var $16=((($13)-($10))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $_pre2=HEAP32[(($5)>>2)];
 var $30=$_pre2;label=11;break;
 case 5: 
 var $18=($10>>>0)>($13>>>0);
 if($18){label=6;break;}else{var $30=$6;label=11;break;}
 case 6: 
 var $20=(($6+($13<<2))|0);
 var $21=($20|0)==($4|0);
 if($21){var $30=$6;label=11;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($4)-(4))|0);
 var $scevgep2_i=$scevgep_i;
 var $scevgep34_i=$20;
 var $22=(((-$scevgep34_i))|0);
 var $uglygep_i=(($scevgep2_i+$22)|0);
 var $uglygep5_i=$uglygep_i;
 var $23=$uglygep5_i>>>2;
 var $24=$23^-1;
 var $scevgep6_i=(($4+($24<<2))|0);
 HEAP32[(($3)>>2)]=$scevgep6_i;
 var $30=$6;label=11;break;
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=($f|0)==0;
 if($27){label=10;break;}else{label=9;break;}
 case 9: 
 var $29=__ZNSt3__114__shared_count16__release_sharedEv($1);
 label=10;break;
 case 10: 
 ___resumeException($26$0)
 case 11: 
 var $30;
 var $31=(($30+($id<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){var $37=$30;label=13;break;}else{label=12;break;}
 case 12: 
 var $35=(($32)|0);
 var $36=__ZNSt3__114__shared_count16__release_sharedEv($35);
 var $_pre=HEAP32[(($5)>>2)];
 var $37=$_pre;label=13;break;
 case 13: 
 var $37;
 var $38=(($37+($id<<2))|0);
 HEAP32[(($38)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;


 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5984;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=5;break;}else{var $i_01=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_01;
 var $9=(($8+($i_01<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $17=$7;var $16=$8;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($10)|0);
 var $14=__ZNSt3__114__shared_count16__release_sharedEv($13);
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre2=HEAP32[(($4)>>2)];
 var $17=$_pre;var $16=$_pre2;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=((($i_01)+(1))|0);
 var $19=$17;
 var $20=$16;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($18>>>0)<($22>>>0);
 if($23){var $i_01=$18;var $8=$16;var $7=$17;label=2;break;}else{label=5;break;}
 case 5: 
 var $24=(($this+144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 var $25=HEAP32[(($4)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=11;break;}else{label=6;break;}
 case 6: 
 var $28=HEAP32[(($2)>>2)];
 var $29=($25|0)==($28|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i_i=((($28)-(4))|0);
 var $scevgep2_i_i_i=$scevgep_i_i_i;
 var $30=(((-$26))|0);
 var $uglygep_i_i_i=(($scevgep2_i_i_i+$30)|0);
 var $uglygep3_i_i_i=$uglygep_i_i_i;
 var $31=$uglygep3_i_i_i>>>2;
 var $32=$31^-1;
 var $scevgep4_i_i_i=(($28+($32<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep4_i_i_i;
 label=8;break;
 case 8: 
 var $33=(($this+24)|0);
 var $34=$33;
 var $35=($25|0)==($34|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=(($this+136)|0);
 HEAP8[($37)]=0;
 label=11;break;
 case 10: 
 var $39=$25;
 __ZdlPv($39);
 label=11;break;
 case 11: 
 var $40=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($40);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale8__globalEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18056)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=8;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18056);
 var $5=($4|0)==0;
 if($5){label=8;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18064)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18064);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(16064,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((15776)>>2)]=16064;
 HEAP32[((15768)>>2)]=15776;

 label=7;break;
 case 7: 
 var $15=HEAP32[((15768)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[((15784)>>2)]=$17;
 var $18=(($17)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($18);
 HEAP32[((15760)>>2)]=15784;

 label=8;break;
 case 8: 
 var $20=HEAP32[((15760)>>2)];
 return $20;
 case 9: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;


 ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=(($this)|0);
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 HEAP32[(($3)>>2)]=$5;
 var $6=(($5)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2ERKS0_($this,$l){
 var label=0;


 var $1=(($this)|0);
 var $2=(($l)|0);
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($1)>>2)]=$3;
 var $4=(($3)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 return;
}


function __ZNSt3__16localeD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=__ZNSt3__114__shared_count16__release_sharedEv($3);
 return;
}


function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i)|0);
 HEAP32[(($8)>>2)]=$x;
 var $9=(($__p_i_i+4)|0);
 HEAP32[(($9)>>2)]=(28);
 var $10=(($__p_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,304);
 label=3;break;
 case 3: 
 var $11=(($x+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($2+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($2+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{var $27=0;label=5;break;}
 case 4: 
 var $24=(($17+($13<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)!=0;
 var $27=$26;label=5;break;
 case 5: 
 var $27;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i)|0);
 HEAP32[(($8)>>2)]=$x;
 var $9=(($__p_i_i+4)|0);
 HEAP32[(($9)>>2)]=(28);
 var $10=(($__p_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,304);
 label=3;break;
 case 3: 
 var $11=(($x+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(1))|0);
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=(($2+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($2+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 ___cxa_throw($26,11336,(432));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale2id6__initEv($this){
 var label=0;


 var $1=(tempValue=HEAP32[((17056)>>2)],HEAP32[((17056)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}


function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $12=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<1))|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=$8&$m;
 var $10=(($9<<16)>>16)!=0;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=7;break;}else{var $_013=$low;var $_04=$vec;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP32[(($_013)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $_off0=$10;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_04)>>1)]=$_off0;
 var $12=(($_013+4)|0);
 var $13=(($_04+2)|0);
 var $14=($12|0)==($high|0);
 if($14){var $_01_lcssa=$high;label=7;break;}else{var $_013=$12;var $_04=$13;label=2;break;}
 case 7: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=$10&$m;
 var $12=(($11<<16)>>16)==0;
 if($12){label=6;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 6: 
 var $14=(($_02+4)|0);
 var $15=($14|0)==($high|0);
 if($15){var $_0_lcssa=$high;label=7;break;}else{var $_02=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=3;break;}
 case 2: 
 var $3=($15|0)==($high|0);
 if($3){var $_0_lcssa=$high;label=7;break;}else{var $_02=$15;label=3;break;}
 case 3: 
 var $_02;
 var $4=HEAP32[(($_02)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 6: 
 var $10=HEAP32[(($6)>>2)];
 var $11=(($10+($4<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 var $13=$12&$m;
 var $14=(($13<<16)>>16)==0;
 var $15=(($_02+4)|0);
 if($14){var $_0_lcssa=$_02;label=7;break;}else{label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;


 var $1=(($c<<24)>>24);
 return $1;
}


function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_03)>>2)]=$3;
 var $4=(($_012+1)|0);
 var $5=(($_03+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_01_lcssa=$high;label=3;break;}else{var $_012=$4;var $_03=$5;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;


 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}


function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low5=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep4=$scevgep;
 var $2=(((-$low5))|0);
 var $uglygep=(($scevgep4+$2)|0);
 var $uglygep6=$uglygep;
 var $3=$uglygep6>>>2;
 var $4=((($3)+(1))|0);
 var $_012=$low;var $_03=$dest;label=3;break;
 case 3: 
 var $_03;
 var $_012;
 var $6=HEAP32[(($_012)>>2)];
 var $isascii=($6>>>0)<128;
 var $7=(($6)&255);
 var $_dfault=($isascii?$7:$dfault);
 HEAP8[($_03)]=$_dfault;
 var $8=(($_012+4)|0);
 var $9=(($_03+1)|0);
 var $10=($8|0)==($high|0);
 if($10){label=4;break;}else{var $_012=$8;var $_03=$9;label=3;break;}
 case 4: 
 var $scevgep7=(($low+($4<<2))|0);
 var $_01_lcssa=$scevgep7;label=5;break;
 case 5: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6096;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$3;
 __ZdaPv($11);
 label=4;break;
 case 4: 
 var $12=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($12);
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6096;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$3;
 __ZdaPv($11);
 label=4;break;
 case 4: 
 var $13=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=(($c<<24)>>24);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;


 return $c;
}


function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 HEAP8[($_03)]=$2;
 var $3=(($_012+1)|0);
 var $4=(($_03+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_012=$3;var $_03=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;


 var $isascii1=(($c<<24)>>24)>-1;
 var $c_dfault=($isascii1?$c:$dfault);
 return $c_dfault;
}


function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_013=$low;var $_04=$dest;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP8[($_013)];
 var $isascii2=(($2<<24)>>24)>-1;
 var $_dfault=($isascii2?$2:$dfault);
 HEAP8[($_04)]=$_dfault;
 var $3=(($_013+1)|0);
 var $4=(($_04+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_013=$3;var $_04=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;


 var $1=$end;
 var $2=$frm;
 var $3=((($1)-($2))|0);
 var $4=($3>>>0)<($mx>>>0);
 var $5=($4?$3:$mx);
 return $5;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 1;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;


 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_049=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $119=$frm;label=50;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_049=$6;label=4;break;}
 case 4: 
 var $fend_049;
 var $4=HEAP32[(($fend_049)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_049+4)|0);
 if($5){var $fend_0_lcssa=$fend_049;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 var $or_cond43=$1|$7;
 if($or_cond43){var $119=$frm;label=50;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $11=(($tmp)|0);
 var $_0244=$to;var $_0145=$frm;var $fend_146=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_146;
 var $_0145;
 var $_0244;
 var $ld$0$0=(($8)|0);
 var $13$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $13$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$13$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$13$1;
 var $14=$fend_146;
 var $15=$_0145;
 var $16=((($14)-($15))|0);
 var $17=$16>>2;
 var $18=$_0244;
 var $19=((($9)-($18))|0);
 var $20=HEAP32[(($10)>>2)];
 var $21=_uselocale($20);
 var $22=(function() { try { __THREW__ = 0; return _wcsnrtombs($_0244,$frm_nxt,$17,$19,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $24=($21|0)==0;
 if($24){label=15;break;}else{label=9;break;}
 case 9: 
 var $26=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 10: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1,0); var $28$1 = tempRet0;
 var $29=$28$0;
 ___clang_call_terminate($29);
 throw "Reached an unreachable!";
 case 11: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=($21|0)==0;
 if($32){label=14;break;}else{label=12;break;}
 case 12: 
 var $34=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 ___clang_call_terminate($37);
 throw "Reached an unreachable!";
 case 14: 
 ___resumeException($31$0)
 case 15: 
 if(($22|0)==-1){ label=16;break;}else if(($22|0)==0){ var $_0=1;label=51;break;}else{label=28;break;}
 case 16: 
 HEAP32[(($to_nxt)>>2)]=$_0244;
 var $39=HEAP32[(($frm_nxt)>>2)];
 var $40=($_0145|0)==($39|0);
 if($40){var $_1_lcssa=$_0145;label=27;break;}else{var $_16=$_0145;var $41=$_0244;label=17;break;}
 case 17: 
 var $41;
 var $_16;
 var $42=HEAP32[(($_16)>>2)];
 var $43=HEAP32[(($10)>>2)];
 var $44=_uselocale($43);
 var $45=(function() { try { __THREW__ = 0; return _wcrtomb($41,$42,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 var $47=($44|0)==0;
 if($47){label=25;break;}else{label=19;break;}
 case 19: 
 var $49=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 ___clang_call_terminate($52);
 throw "Reached an unreachable!";
 case 21: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=($44|0)==0;
 if($55){label=24;break;}else{label=22;break;}
 case 22: 
 var $57=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 ___clang_call_terminate($60);
 throw "Reached an unreachable!";
 case 24: 
 ___resumeException($54$0)
 case 25: 
 var $61=($45|0)==-1;
 if($61){var $_1_lcssa=$_16;label=27;break;}else{label=26;break;}
 case 26: 
 var $63=HEAP32[(($to_nxt)>>2)];
 var $64=(($63+$45)|0);
 HEAP32[(($to_nxt)>>2)]=$64;
 var $65=(($_16+4)|0);
 var $66=HEAP32[(($frm_nxt)>>2)];
 var $67=($65|0)==($66|0);
 if($67){var $_1_lcssa=$65;label=27;break;}else{var $_16=$65;var $41=$64;label=17;break;}
 case 27: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=51;break;
 case 28: 
 var $69=HEAP32[(($to_nxt)>>2)];
 var $70=(($69+$22)|0);
 HEAP32[(($to_nxt)>>2)]=$70;
 var $71=($70|0)==($to_end|0);
 if($71){label=49;break;}else{label=29;break;}
 case 29: 
 var $73=($fend_146|0)==($frm_end|0);
 if($73){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre95=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $116=$70;var $115=$_pre95;label=48;break;
 case 31: 
 var $75=HEAP32[(($10)>>2)];
 var $76=_uselocale($75);
 var $77=(function() { try { __THREW__ = 0; return _wcrtomb($11,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $79=($76|0)==0;
 if($79){label=39;break;}else{label=33;break;}
 case 33: 
 var $81=(function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 34: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 35: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=($76|0)==0;
 if($87){label=38;break;}else{label=36;break;}
 case 36: 
 var $89=(function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1,0); var $91$1 = tempRet0;
 var $92=$91$0;
 ___clang_call_terminate($92);
 throw "Reached an unreachable!";
 case 38: 
 ___resumeException($86$0)
 case 39: 
 var $93=($77|0)==-1;
 if($93){var $_0=2;label=51;break;}else{label=40;break;}
 case 40: 
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=$95;
 var $97=((($9)-($96))|0);
 var $98=($77>>>0)>($97>>>0);
 if($98){var $_0=1;label=51;break;}else{label=41;break;}
 case 41: 
 var $99=($77|0)==0;
 if($99){label=44;break;}else{var $n_08=$77;var $p_09=$11;var $100=$95;label=42;break;}
 case 42: 
 var $100;
 var $p_09;
 var $n_08;
 var $101=HEAP8[($p_09)];
 var $102=(($100+1)|0);
 HEAP32[(($to_nxt)>>2)]=$102;
 HEAP8[($100)]=$101;
 var $103=((($n_08)-(1))|0);
 var $104=($103|0)==0;
 if($104){label=44;break;}else{label=43;break;}
 case 43: 
 var $105=(($p_09+1)|0);
 var $_pre96=HEAP32[(($to_nxt)>>2)];
 var $n_08=$103;var $p_09=$105;var $100=$_pre96;label=42;break;
 case 44: 
 var $106=HEAP32[(($frm_nxt)>>2)];
 var $107=(($106+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$107;
 var $108=($107|0)==($frm_end|0);
 if($108){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_212=$107;label=46;break;}
 case 45: 
 var $110=($113|0)==($frm_end|0);
 if($110){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_212=$113;label=46;break;}
 case 46: 
 var $fend_212;
 var $111=HEAP32[(($fend_212)>>2)];
 var $112=($111|0)==0;
 var $113=(($fend_212+4)|0);
 if($112){var $fend_2_lcssa=$fend_212;label=47;break;}else{label=45;break;}
 case 47: 
 var $fend_2_lcssa;
 var $_pre92=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $116=$_pre92;var $115=$107;label=48;break;
 case 48: 
 var $115;
 var $116;
 var $fend_3;
 var $117=($115|0)==($frm_end|0);
 var $118=($116|0)==($to_end|0);
 var $or_cond=$117|$118;
 if($or_cond){var $119=$115;label=50;break;}else{var $_0244=$116;var $_0145=$115;var $fend_146=$fend_3;label=7;break;}
 case 49: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $119=$_pre;label=50;break;
 case 50: 
 var $119;
 var $not_=($119|0)!=($frm_end|0);
 var $120=($not_&1);
 var $_0=$120;label=51;break;
 case 51: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_056=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $112=$frm;label=49;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_056=$6;label=4;break;}
 case 4: 
 var $fend_056;
 var $4=HEAP8[($fend_056)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_056+1)|0);
 if($5){var $fend_0_lcssa=$fend_056;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 var $or_cond50=$1|$7;
 if($or_cond50){var $112=$frm;label=49;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $_0251=$to;var $_0152=$frm;var $fend_153=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_153;
 var $_0152;
 var $_0251;
 var $ld$0$0=(($8)|0);
 var $12$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $12$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$12$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$12$1;
 var $13=$fend_153;
 var $14=$_0152;
 var $15=((($13)-($14))|0);
 var $16=$_0251;
 var $17=((($9)-($16))|0);
 var $18=$17>>2;
 var $19=HEAP32[(($10)>>2)];
 var $20=_uselocale($19);
 var $21=(function() { try { __THREW__ = 0; return _mbsnrtowcs($_0251,$frm_nxt,$15,$18,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $23=($20|0)==0;
 if($23){label=15;break;}else{label=9;break;}
 case 9: 
 var $25=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 10: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1,0); var $27$1 = tempRet0;
 var $28=$27$0;
 ___clang_call_terminate($28);
 throw "Reached an unreachable!";
 case 11: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $31=($20|0)==0;
 if($31){label=14;break;}else{label=12;break;}
 case 12: 
 var $33=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 var $36=$35$0;
 ___clang_call_terminate($36);
 throw "Reached an unreachable!";
 case 14: 
 ___resumeException($30$0)
 case 15: 
 if(($21|0)==-1){ label=16;break;}else if(($21|0)==0){ var $_0=2;label=50;break;}else{label=32;break;}
 case 16: 
 HEAP32[(($to_nxt)>>2)]=$_0251;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=($_0152|0)==($37|0);
 if($38){var $_1_lcssa=$_0152;label=31;break;}else{var $storemerge11=$_0251;var $_112=$_0152;label=17;break;}
 case 17: 
 var $_112;
 var $storemerge11;
 var $39=$_112;
 var $40=((($13)-($39))|0);
 var $41=HEAP32[(($10)>>2)];
 var $42=_uselocale($41);
 var $43=(function() { try { __THREW__ = 0; return _mbrtowc($storemerge11,$_112,$40,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 var $45=($42|0)==0;
 if($45){label=25;break;}else{label=19;break;}
 case 19: 
 var $47=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 var $50=$49$0;
 ___clang_call_terminate($50);
 throw "Reached an unreachable!";
 case 21: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=($42|0)==0;
 if($53){label=24;break;}else{label=22;break;}
 case 22: 
 var $55=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1,0); var $57$1 = tempRet0;
 var $58=$57$0;
 ___clang_call_terminate($58);
 throw "Reached an unreachable!";
 case 24: 
 ___resumeException($52$0)
 case 25: 
 if(($43|0)==0){ label=26;break;}else if(($43|0)==-1){ label=27;break;}else if(($43|0)==-2){ label=28;break;}else{label=29;break;}
 case 26: 
 var $60=(($_112+1)|0);
 var $_2=$60;label=30;break;
 case 27: 
 HEAP32[(($frm_nxt)>>2)]=$_112;
 var $_0=2;label=50;break;
 case 28: 
 HEAP32[(($frm_nxt)>>2)]=$_112;
 var $_0=1;label=50;break;
 case 29: 
 var $64=(($_112+$43)|0);
 var $_2=$64;label=30;break;
 case 30: 
 var $_2;
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+4)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 var $68=HEAP32[(($frm_nxt)>>2)];
 var $69=($_2|0)==($68|0);
 if($69){var $_1_lcssa=$_2;label=31;break;}else{var $storemerge11=$67;var $_112=$_2;label=17;break;}
 case 31: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_3=($_1_lcssa|0)!=($frm_end|0);
 var $70=($not_3&1);
 var $_0=$70;label=50;break;
 case 32: 
 var $72=HEAP32[(($to_nxt)>>2)];
 var $73=(($72+($21<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$73;
 var $74=($73|0)==($to_end|0);
 if($74){label=48;break;}else{label=33;break;}
 case 33: 
 var $76=($fend_153|0)==($frm_end|0);
 var $_pre110=HEAP32[(($frm_nxt)>>2)];
 if($76){var $fend_3=$frm_end;var $109=$73;var $108=$_pre110;label=47;break;}else{label=34;break;}
 case 34: 
 var $78=HEAP32[(($10)>>2)];
 var $79=_uselocale($78);
 var $80=(function() { try { __THREW__ = 0; return _mbrtowc($73,$_pre110,1,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $82=($79|0)==0;
 if($82){label=42;break;}else{label=36;break;}
 case 36: 
 var $84=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 37: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1,0); var $86$1 = tempRet0;
 var $87=$86$0;
 ___clang_call_terminate($87);
 throw "Reached an unreachable!";
 case 38: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;
 var $90=($79|0)==0;
 if($90){label=41;break;}else{label=39;break;}
 case 39: 
 var $92=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $94$0 = ___cxa_find_matching_catch(-1, -1,0); var $94$1 = tempRet0;
 var $95=$94$0;
 ___clang_call_terminate($95);
 throw "Reached an unreachable!";
 case 41: 
 ___resumeException($89$0)
 case 42: 
 var $96=($80|0)==0;
 if($96){label=43;break;}else{var $_0=2;label=50;break;}
 case 43: 
 var $98=HEAP32[(($to_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($to_nxt)>>2)]=$99;
 var $100=HEAP32[(($frm_nxt)>>2)];
 var $101=(($100+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$101;
 var $102=($101|0)==($frm_end|0);
 if($102){var $fend_2_lcssa=$frm_end;label=46;break;}else{var $fend_213=$101;label=45;break;}
 case 44: 
 var $104=($107|0)==($frm_end|0);
 if($104){var $fend_2_lcssa=$frm_end;label=46;break;}else{var $fend_213=$107;label=45;break;}
 case 45: 
 var $fend_213;
 var $105=HEAP8[($fend_213)];
 var $106=(($105<<24)>>24)==0;
 var $107=(($fend_213+1)|0);
 if($106){var $fend_2_lcssa=$fend_213;label=46;break;}else{label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre108=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $109=$_pre108;var $108=$101;label=47;break;
 case 47: 
 var $108;
 var $109;
 var $fend_3;
 var $110=($108|0)==($frm_end|0);
 var $111=($109|0)==($to_end|0);
 var $or_cond=$110|$111;
 if($or_cond){var $112=$108;label=49;break;}else{var $_0251=$109;var $_0152=$108;var $fend_153=$fend_3;label=7;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $112=$_pre;label=49;break;
 case 49: 
 var $112;
 var $not_=($112|0)!=($frm_end|0);
 var $113=($not_&1);
 var $_0=$113;label=50;break;
 case 50: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($tmp)|0);
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=_uselocale($3);
 var $5=(function() { try { __THREW__ = 0; return _wcrtomb($1,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $7=($4|0)==0;
 if($7){label=9;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=($4|0)==0;
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 8: 
 ___resumeException($14$0)
 case 9: 
 if(($5|0)==-1|($5|0)==0){ var $_0=2;label=14;break;}else{label=10;break;}
 case 10: 
 var $22=((($5)-(1))|0);
 var $23=HEAP32[(($to_nxt)>>2)];
 var $24=$to_end;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=($22>>>0)>($26>>>0);
 if($27){var $_0=1;label=14;break;}else{label=11;break;}
 case 11: 
 var $28=($22|0)==0;
 if($28){var $_0=0;label=14;break;}else{var $n_02=$22;var $p_03=$1;var $29=$23;label=12;break;}
 case 12: 
 var $29;
 var $p_03;
 var $n_02;
 var $30=HEAP8[($p_03)];
 var $31=(($29+1)|0);
 HEAP32[(($to_nxt)>>2)]=$31;
 HEAP8[($29)]=$30;
 var $32=((($n_02)-(1))|0);
 var $33=($32|0)==0;
 if($33){var $_0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $34=(($p_03+1)|0);
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $n_02=$32;var $p_03=$34;var $29=$_pre;label=12;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return _mbtowc(0,0,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $6=($3|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=17;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=17;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 var $20=($4|0)==0;
 if($20){label=10;break;}else{var $_0=-1;label=15;break;}
 case 10: 
 var $22=HEAP32[(($1)>>2)];
 var $23=($22|0)==0;
 if($23){var $_0=1;label=15;break;}else{label=11;break;}
 case 11: 
 var $25=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $26=($25|0)==0;
 if($26){var $_0=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $28=(function() { try { __THREW__ = 0; return _uselocale($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=15;break; } else { label=14;break; }
 case 14: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 var $31=$30$0;
 ___clang_call_terminate($31);
 throw "Reached an unreachable!";
 case 15: 
 var $_0;
 return $_0;
 case 16: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 var $eh_lpad_body$1=$33$1;var $eh_lpad_body$0=$33$0;label=17;break;
 case 17: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $34=$eh_lpad_body$0;
 ___clang_call_terminate($34);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond5=$1|$2;
 if($or_cond5){var $nbytes_0_lcssa=0;label=15;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $_016=$frm;var $nbytes_07=0;var $nwchar_t_08=0;label=3;break;
 case 3: 
 var $nwchar_t_08;
 var $nbytes_07;
 var $_016;
 var $6=$_016;
 var $7=((($3)-($6))|0);
 var $8=HEAP32[(($4)>>2)];
 var $9=_uselocale($8);
 var $10=(function() { try { __THREW__ = 0; return _mbrlen($_016,$7,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $12=($9|0)==0;
 if($12){label=11;break;}else{label=5;break;}
 case 5: 
 var $14=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 var $17=$16$0;
 ___clang_call_terminate($17);
 throw "Reached an unreachable!";
 case 7: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $20=($9|0)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($19$0)
 case 11: 
 if(($10|0)==0){ label=12;break;}else if(($10|0)==-1|($10|0)==-2){ var $nbytes_0_lcssa=$nbytes_07;label=15;break;}else{label=13;break;}
 case 12: 
 var $27=(($_016+1)|0);
 var $_pn=1;var $_1=$27;label=14;break;
 case 13: 
 var $29=(($_016+$10)|0);
 var $_pn=$10;var $_1=$29;label=14;break;
 case 14: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_07))|0);
 var $31=((($nwchar_t_08)+(1))|0);
 var $32=($31>>>0)>=($mx>>>0);
 var $33=($_1|0)==($frm_end|0);
 var $or_cond=$32|$33;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=15;break;}else{var $_016=$_1;var $nbytes_07=$nbytes_1;var $nwchar_t_08=$31;label=3;break;}
 case 15: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $12=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $12=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $12=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $12;
 return $12;
 case 7: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1,0); var $14$1 = tempRet0;
 var $15=$14$0;
 ___clang_call_terminate($15);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>1;
 var $8=(($frm+($7<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=26;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=$frm_end;
 var $15=HEAP32[(($frm_nxt)>>2)];
 var $16=($15>>>0)<($frm_end>>>0);
 if($16){label=5;break;}else{var $_0=0;label=26;break;}
 case 5: 
 var $17=$to_end;
 var $19=$15;label=6;break;
 case 6: 
 var $19;
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 var $22=($21>>>0)>($Maxcode>>>0);
 if($22){var $_0=2;label=26;break;}else{label=7;break;}
 case 7: 
 var $24=($20&65535)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($17)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=26;break;}else{label=9;break;}
 case 9: 
 var $31=(($20)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=25;break;
 case 10: 
 var $34=($20&65535)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($17)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=26;break;}else{label=12;break;}
 case 12: 
 var $41=$21>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$21&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=25;break;
 case 13: 
 var $51=($20&65535)<55296;
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $53=HEAP32[(($to_nxt)>>2)];
 var $54=$53;
 var $55=((($17)-($54))|0);
 var $56=($55|0)<3;
 if($56){var $_0=1;label=26;break;}else{label=15;break;}
 case 15: 
 var $58=$21>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($53+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($53)]=$60;
 var $62=$21>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$21&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=25;break;
 case 16: 
 var $74=($20&65535)<56320;
 if($74){label=17;break;}else{label=22;break;}
 case 17: 
 var $76=$19;
 var $77=((($14)-($76))|0);
 var $78=($77|0)<4;
 if($78){var $_0=1;label=26;break;}else{label=18;break;}
 case 18: 
 var $80=(($19+2)|0);
 var $81=HEAP16[(($80)>>1)];
 var $82=($81&65535);
 var $83=$82&64512;
 var $84=($83|0)==56320;
 if($84){label=19;break;}else{var $_0=2;label=26;break;}
 case 19: 
 var $86=HEAP32[(($to_nxt)>>2)];
 var $87=$86;
 var $88=((($17)-($87))|0);
 var $89=($88|0)<4;
 if($89){var $_0=1;label=26;break;}else{label=20;break;}
 case 20: 
 var $91=$21&960;
 var $92=$91<<10;
 var $93=((($92)+(65536))|0);
 var $94=$21<<10;
 var $95=$94&64512;
 var $96=$93|$95;
 var $97=$82&1023;
 var $98=$96|$97;
 var $99=($98>>>0)>($Maxcode>>>0);
 if($99){var $_0=2;label=26;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$80;
 var $101=$91>>>6;
 var $102=((($101)+(1))|0);
 var $103=$102>>>2;
 var $104=$103|240;
 var $105=(($104)&255);
 var $106=HEAP32[(($to_nxt)>>2)];
 var $107=(($106+1)|0);
 HEAP32[(($to_nxt)>>2)]=$107;
 HEAP8[($106)]=$105;
 var $108=$102<<4;
 var $109=$108&48;
 var $110=$21>>>2;
 var $111=$110&15;
 var $112=$111|$109;
 var $113=$112|128;
 var $114=(($113)&255);
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 HEAP8[($115)]=$114;
 var $117=$21<<4;
 var $118=$117&48;
 var $119=$82>>>6;
 var $120=$119&15;
 var $121=$118|$120;
 var $122=$121|128;
 var $123=(($122)&255);
 var $124=HEAP32[(($to_nxt)>>2)];
 var $125=(($124+1)|0);
 HEAP32[(($to_nxt)>>2)]=$125;
 HEAP8[($124)]=$123;
 var $126=$82&63;
 var $127=$126|128;
 var $128=(($127)&255);
 var $129=HEAP32[(($to_nxt)>>2)];
 var $130=(($129+1)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 HEAP8[($129)]=$128;
 label=25;break;
 case 22: 
 var $132=($20&65535)<57344;
 if($132){var $_0=2;label=26;break;}else{label=23;break;}
 case 23: 
 var $134=HEAP32[(($to_nxt)>>2)];
 var $135=$134;
 var $136=((($17)-($135))|0);
 var $137=($136|0)<3;
 if($137){var $_0=1;label=26;break;}else{label=24;break;}
 case 24: 
 var $139=$21>>>12;
 var $140=$139|224;
 var $141=(($140)&255);
 var $142=(($134+1)|0);
 HEAP32[(($to_nxt)>>2)]=$142;
 HEAP8[($134)]=$141;
 var $143=$21>>>6;
 var $144=$143&63;
 var $145=$144|128;
 var $146=(($145)&255);
 var $147=HEAP32[(($to_nxt)>>2)];
 var $148=(($147+1)|0);
 HEAP32[(($to_nxt)>>2)]=$148;
 HEAP8[($147)]=$146;
 var $149=$21&63;
 var $150=$149|128;
 var $151=(($150)&255);
 var $152=HEAP32[(($to_nxt)>>2)];
 var $153=(($152+1)|0);
 HEAP32[(($to_nxt)>>2)]=$153;
 HEAP8[($152)]=$151;
 label=25;break;
 case 25: 
 var $155=HEAP32[(($frm_nxt)>>2)];
 var $156=(($155+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$156;
 var $157=($156>>>0)<($frm_end>>>0);
 if($157){var $19=$156;label=6;break;}else{var $_0=0;label=26;break;}
 case 26: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>1;
 var $13=(($to+($12<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre5=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre5;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre5;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre5;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre5)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre5;label=7;break;}
 case 4: 
 var $12=(($_pre5+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre5;label=7;break;}
 case 5: 
 var $16=(($_pre5+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre5;label=7;break;}
 case 6: 
 var $20=(($_pre5+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $175=$21;label=40;break;}
 case 8: 
 var $23=$frm_end;
 var $24=$to_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $27=$_pre;var $26=$21;label=9;break;
 case 9: 
 var $26;
 var $27;
 var $28=($27>>>0)<($to_end>>>0);
 if($28){label=10;break;}else{var $175=$26;label=40;break;}
 case 10: 
 var $30=HEAP8[($26)];
 var $31=($30&255);
 var $32=($31>>>0)>($Maxcode>>>0);
 if($32){var $_0=2;label=41;break;}else{label=11;break;}
 case 11: 
 var $34=(($30<<24)>>24)>-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=($30&255);
 HEAP16[(($27)>>1)]=$36;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=(($37+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$38;
 label=39;break;
 case 13: 
 var $40=($30&255)<194;
 if($40){var $_0=2;label=41;break;}else{label=14;break;}
 case 14: 
 var $42=($30&255)<224;
 if($42){label=15;break;}else{label=19;break;}
 case 15: 
 var $44=$26;
 var $45=((($23)-($44))|0);
 var $46=($45|0)<2;
 if($46){var $_0=1;label=41;break;}else{label=16;break;}
 case 16: 
 var $48=(($26+1)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$50&192;
 var $52=($51|0)==128;
 if($52){label=17;break;}else{var $_0=2;label=41;break;}
 case 17: 
 var $54=$31<<6;
 var $55=$54&1984;
 var $56=$50&63;
 var $57=$56|$55;
 var $58=($57>>>0)>($Maxcode>>>0);
 if($58){var $_0=2;label=41;break;}else{label=18;break;}
 case 18: 
 var $60=(($57)&65535);
 HEAP16[(($27)>>1)]=$60;
 var $61=HEAP32[(($frm_nxt)>>2)];
 var $62=(($61+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$62;
 label=39;break;
 case 19: 
 var $64=($30&255)<240;
 if($64){label=20;break;}else{label=28;break;}
 case 20: 
 var $66=$26;
 var $67=((($23)-($66))|0);
 var $68=($67|0)<3;
 if($68){var $_0=1;label=41;break;}else{label=21;break;}
 case 21: 
 var $70=(($26+1)|0);
 var $71=HEAP8[($70)];
 var $72=(($26+2)|0);
 var $73=HEAP8[($72)];
 if(($31|0)==224){ label=22;break;}else if(($31|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $75=$71&-32;
 var $76=(($75<<24)>>24)==-96;
 if($76){label=25;break;}else{var $_0=2;label=41;break;}
 case 23: 
 var $78=$71&-32;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=25;break;}else{var $_0=2;label=41;break;}
 case 24: 
 var $81=$71&-64;
 var $82=(($81<<24)>>24)==-128;
 if($82){label=25;break;}else{var $_0=2;label=41;break;}
 case 25: 
 var $84=($73&255);
 var $85=$84&192;
 var $86=($85|0)==128;
 if($86){label=26;break;}else{var $_0=2;label=41;break;}
 case 26: 
 var $88=$31<<12;
 var $89=($71&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$84&63;
 var $94=$92|$93;
 var $95=$94&65535;
 var $96=($95>>>0)>($Maxcode>>>0);
 if($96){var $_0=2;label=41;break;}else{label=27;break;}
 case 27: 
 var $98=(($94)&65535);
 HEAP16[(($27)>>1)]=$98;
 var $99=HEAP32[(($frm_nxt)>>2)];
 var $100=(($99+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$100;
 label=39;break;
 case 28: 
 var $102=($30&255)<245;
 if($102){label=29;break;}else{var $_0=2;label=41;break;}
 case 29: 
 var $104=$26;
 var $105=((($23)-($104))|0);
 var $106=($105|0)<4;
 if($106){var $_0=1;label=41;break;}else{label=30;break;}
 case 30: 
 var $108=(($26+1)|0);
 var $109=HEAP8[($108)];
 var $110=(($26+2)|0);
 var $111=HEAP8[($110)];
 var $112=(($26+3)|0);
 var $113=HEAP8[($112)];
 if(($31|0)==240){ label=31;break;}else if(($31|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($109)+(112))&255);
 var $115=($_off&255)<48;
 if($115){label=34;break;}else{var $_0=2;label=41;break;}
 case 32: 
 var $117=$109&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=34;break;}else{var $_0=2;label=41;break;}
 case 33: 
 var $120=$109&-64;
 var $121=(($120<<24)>>24)==-128;
 if($121){label=34;break;}else{var $_0=2;label=41;break;}
 case 34: 
 var $123=($111&255);
 var $124=$123&192;
 var $125=($124|0)==128;
 if($125){label=35;break;}else{var $_0=2;label=41;break;}
 case 35: 
 var $127=($113&255);
 var $128=$127&192;
 var $129=($128|0)==128;
 if($129){label=36;break;}else{var $_0=2;label=41;break;}
 case 36: 
 var $131=$27;
 var $132=((($24)-($131))|0);
 var $133=($132|0)<4;
 if($133){var $_0=1;label=41;break;}else{label=37;break;}
 case 37: 
 var $135=$31&7;
 var $136=$135<<18;
 var $137=($109&255);
 var $138=$137<<12;
 var $139=$138&258048;
 var $140=$139|$136;
 var $141=$123<<6;
 var $142=$141&4032;
 var $143=$140|$142;
 var $144=$127&63;
 var $145=$143|$144;
 var $146=($145>>>0)>($Maxcode>>>0);
 if($146){var $_0=2;label=41;break;}else{label=38;break;}
 case 38: 
 var $148=$135<<2;
 var $149=$137>>>4;
 var $150=$149&3;
 var $151=$150|$148;
 var $152=$151<<6;
 var $153=((($152)+(16320))|0);
 var $154=$137<<2;
 var $155=$154&60;
 var $156=$123>>>4;
 var $157=$156&3;
 var $158=$155|$157;
 var $159=$158|$153;
 var $160=$159|55296;
 var $161=(($160)&65535);
 HEAP16[(($27)>>1)]=$161;
 var $162=$141&960;
 var $163=$144|$162;
 var $164=$163|56320;
 var $165=(($164)&65535);
 var $166=HEAP32[(($to_nxt)>>2)];
 var $167=(($166+2)|0);
 HEAP32[(($to_nxt)>>2)]=$167;
 HEAP16[(($167)>>1)]=$165;
 var $168=HEAP32[(($frm_nxt)>>2)];
 var $169=(($168+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$169;
 label=39;break;
 case 39: 
 var $171=HEAP32[(($to_nxt)>>2)];
 var $172=(($171+2)|0);
 HEAP32[(($to_nxt)>>2)]=$172;
 var $173=HEAP32[(($frm_nxt)>>2)];
 var $174=($173>>>0)<($frm_end>>>0);
 if($174){var $27=$172;var $26=$173;label=9;break;}else{var $175=$173;label=40;break;}
 case 40: 
 var $175;
 var $176=($175>>>0)<($frm_end>>>0);
 var $177=($176&1);
 var $_0=$177;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;


 var $2=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}


function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond13=$20&$21;
 if($or_cond13){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar16_t_014=0;var $frm_nxt_115=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_115;
 var $nchar16_t_014;
 var $23=HEAP8[($frm_nxt_115)];
 var $24=($23&255);
 var $25=($24>>>0)>($Maxcode>>>0);
 if($25){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=9;break;}
 case 9: 
 var $27=(($23<<24)>>24)>-1;
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=(($frm_nxt_115+1)|0);
 var $frm_nxt_2=$29;var $nchar16_t_1=$nchar16_t_014;label=43;break;
 case 11: 
 var $31=($23&255)<194;
 if($31){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=12;break;}
 case 12: 
 var $33=($23&255)<224;
 if($33){label=13;break;}else{label=17;break;}
 case 13: 
 var $35=$frm_nxt_115;
 var $36=((($22)-($35))|0);
 var $37=($36|0)<2;
 if($37){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=14;break;}
 case 14: 
 var $39=(($frm_nxt_115+1)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$41&192;
 var $43=($42|0)==128;
 if($43){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 15: 
 var $45=$24<<6;
 var $46=$45&1984;
 var $47=$41&63;
 var $48=$47|$46;
 var $49=($48>>>0)>($Maxcode>>>0);
 if($49){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=16;break;}
 case 16: 
 var $51=(($frm_nxt_115+2)|0);
 var $frm_nxt_2=$51;var $nchar16_t_1=$nchar16_t_014;label=43;break;
 case 17: 
 var $53=($23&255)<240;
 if($53){label=18;break;}else{label=29;break;}
 case 18: 
 var $55=$frm_nxt_115;
 var $56=((($22)-($55))|0);
 var $57=($56|0)<3;
 if($57){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=19;break;}
 case 19: 
 var $59=(($frm_nxt_115+1)|0);
 var $60=HEAP8[($59)];
 var $61=(($frm_nxt_115+2)|0);
 var $62=HEAP8[($61)];
 if(($24|0)==224){ label=20;break;}else if(($24|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $64=$60&-32;
 var $65=(($64<<24)>>24)==-96;
 if($65){label=26;break;}else{label=21;break;}
 case 21: 
 var $67=$frm;
 var $68=((($55)-($67))|0);
 var $_0=$68;label=45;break;
 case 22: 
 var $70=$60&-32;
 var $71=(($70<<24)>>24)==-128;
 if($71){label=26;break;}else{label=23;break;}
 case 23: 
 var $73=$frm;
 var $74=((($55)-($73))|0);
 var $_0=$74;label=45;break;
 case 24: 
 var $76=$60&-64;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=26;break;}else{label=25;break;}
 case 25: 
 var $79=$frm;
 var $80=((($55)-($79))|0);
 var $_0=$80;label=45;break;
 case 26: 
 var $82=($62&255);
 var $83=$82&192;
 var $84=($83|0)==128;
 if($84){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 27: 
 var $86=$24<<12;
 var $87=$86&61440;
 var $88=($60&255);
 var $89=$88<<6;
 var $90=$89&4032;
 var $91=$90|$87;
 var $92=$82&63;
 var $93=$91|$92;
 var $94=($93>>>0)>($Maxcode>>>0);
 if($94){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=28;break;}
 case 28: 
 var $96=(($frm_nxt_115+3)|0);
 var $frm_nxt_2=$96;var $nchar16_t_1=$nchar16_t_014;label=43;break;
 case 29: 
 var $98=($23&255)<245;
 if($98){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 30: 
 var $100=$frm_nxt_115;
 var $101=((($22)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=31;break;}
 case 31: 
 var $104=((($mx)-($nchar16_t_014))|0);
 var $105=($104>>>0)<2;
 if($105){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=32;break;}
 case 32: 
 var $107=(($frm_nxt_115+1)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_115+2)|0);
 var $110=HEAP8[($109)];
 var $111=(($frm_nxt_115+3)|0);
 var $112=HEAP8[($111)];
 if(($24|0)==240){ label=33;break;}else if(($24|0)==244){ label=35;break;}else{label=37;break;}
 case 33: 
 var $_off=((($108)+(112))&255);
 var $114=($_off&255)<48;
 if($114){label=39;break;}else{label=34;break;}
 case 34: 
 var $116=$frm;
 var $117=((($100)-($116))|0);
 var $_0=$117;label=45;break;
 case 35: 
 var $119=$108&-16;
 var $120=(($119<<24)>>24)==-128;
 if($120){label=39;break;}else{label=36;break;}
 case 36: 
 var $122=$frm;
 var $123=((($100)-($122))|0);
 var $_0=$123;label=45;break;
 case 37: 
 var $125=$108&-64;
 var $126=(($125<<24)>>24)==-128;
 if($126){label=39;break;}else{label=38;break;}
 case 38: 
 var $128=$frm;
 var $129=((($100)-($128))|0);
 var $_0=$129;label=45;break;
 case 39: 
 var $131=($110&255);
 var $132=$131&192;
 var $133=($132|0)==128;
 if($133){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 40: 
 var $135=($112&255);
 var $136=$135&192;
 var $137=($136|0)==128;
 if($137){label=41;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 41: 
 var $139=$24<<18;
 var $140=$139&1835008;
 var $141=($108&255);
 var $142=$141<<12;
 var $143=$142&258048;
 var $144=$143|$140;
 var $145=$131<<6;
 var $146=$145&4032;
 var $147=$144|$146;
 var $148=$135&63;
 var $149=$147|$148;
 var $150=($149>>>0)>($Maxcode>>>0);
 if($150){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=42;break;}
 case 42: 
 var $152=((($nchar16_t_014)+(1))|0);
 var $153=(($frm_nxt_115+4)|0);
 var $frm_nxt_2=$153;var $nchar16_t_1=$152;label=43;break;
 case 43: 
 var $nchar16_t_1;
 var $frm_nxt_2;
 var $155=((($nchar16_t_1)+(1))|0);
 var $156=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $157=($155>>>0)<($mx>>>0);
 var $or_cond=$156&$157;
 if($or_cond){var $nchar16_t_014=$155;var $frm_nxt_115=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 44: 
 var $frm_nxt_1_lcssa;
 var $158=$frm_nxt_1_lcssa;
 var $159=$frm;
 var $160=((($158)-($159))|0);
 var $_0=$160;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>2;
 var $8=(($frm+($7<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=HEAP32[(($frm_nxt)>>2)];
 var $15=($14>>>0)<($frm_end>>>0);
 if($15){label=5;break;}else{var $_0=0;label=19;break;}
 case 5: 
 var $16=$to_end;
 var $18=$14;label=6;break;
 case 6: 
 var $18;
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2048;
 var $21=($20|0)==55296;
 var $22=($19>>>0)>($Maxcode>>>0);
 var $or_cond=$21|$22;
 if($or_cond){var $_0=2;label=19;break;}else{label=7;break;}
 case 7: 
 var $24=($19>>>0)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($16)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=19;break;}else{label=9;break;}
 case 9: 
 var $31=(($19)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=18;break;
 case 10: 
 var $34=($19>>>0)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($16)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=19;break;}else{label=12;break;}
 case 12: 
 var $41=$19>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$19&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=18;break;
 case 13: 
 var $51=($19>>>0)<65536;
 var $52=HEAP32[(($to_nxt)>>2)];
 var $53=$52;
 var $54=((($16)-($53))|0);
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $56=($54|0)<3;
 if($56){var $_0=1;label=19;break;}else{label=15;break;}
 case 15: 
 var $58=$19>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($52)]=$60;
 var $62=$19>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$19&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=18;break;
 case 16: 
 var $74=($54|0)<4;
 if($74){var $_0=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $76=$19>>>18;
 var $77=$76|240;
 var $78=(($77)&255);
 var $79=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$79;
 HEAP8[($52)]=$78;
 var $80=$19>>>12;
 var $81=$80&63;
 var $82=$81|128;
 var $83=(($82)&255);
 var $84=HEAP32[(($to_nxt)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=$19>>>6;
 var $87=$86&63;
 var $88=$87|128;
 var $89=(($88)&255);
 var $90=HEAP32[(($to_nxt)>>2)];
 var $91=(($90+1)|0);
 HEAP32[(($to_nxt)>>2)]=$91;
 HEAP8[($90)]=$89;
 var $92=$19&63;
 var $93=$92|128;
 var $94=(($93)&255);
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=(($95+1)|0);
 HEAP32[(($to_nxt)>>2)]=$96;
 HEAP8[($95)]=$94;
 label=18;break;
 case 18: 
 var $98=HEAP32[(($frm_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$99;
 var $100=($99>>>0)<($frm_end>>>0);
 if($100){var $18=$99;label=6;break;}else{var $_0=0;label=19;break;}
 case 19: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>2;
 var $13=(($to+($12<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre5=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre5;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre5;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre5;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre5)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre5;label=7;break;}
 case 4: 
 var $12=(($_pre5+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre5;label=7;break;}
 case 5: 
 var $16=(($_pre5+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre5;label=7;break;}
 case 6: 
 var $20=(($_pre5+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $147=$21;label=39;break;}
 case 8: 
 var $23=$frm_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $26=$_pre;var $25=$21;label=9;break;
 case 9: 
 var $25;
 var $26;
 var $27=($26>>>0)<($to_end>>>0);
 if($27){label=10;break;}else{var $147=$25;label=39;break;}
 case 10: 
 var $29=HEAP8[($25)];
 var $30=($29&255);
 var $31=(($29<<24)>>24)>-1;
 if($31){label=11;break;}else{label=13;break;}
 case 11: 
 var $33=($30>>>0)>($Maxcode>>>0);
 if($33){var $_0=2;label=40;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($26)>>2)]=$30;
 var $35=HEAP32[(($frm_nxt)>>2)];
 var $36=(($35+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$36;
 label=38;break;
 case 13: 
 var $38=($29&255)<194;
 if($38){var $_0=2;label=40;break;}else{label=14;break;}
 case 14: 
 var $40=($29&255)<224;
 if($40){label=15;break;}else{label=19;break;}
 case 15: 
 var $42=$25;
 var $43=((($23)-($42))|0);
 var $44=($43|0)<2;
 if($44){var $_0=1;label=40;break;}else{label=16;break;}
 case 16: 
 var $46=(($25+1)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=$48&192;
 var $50=($49|0)==128;
 if($50){label=17;break;}else{var $_0=2;label=40;break;}
 case 17: 
 var $52=$30<<6;
 var $53=$52&1984;
 var $54=$48&63;
 var $55=$54|$53;
 var $56=($55>>>0)>($Maxcode>>>0);
 if($56){var $_0=2;label=40;break;}else{label=18;break;}
 case 18: 
 HEAP32[(($26)>>2)]=$55;
 var $58=HEAP32[(($frm_nxt)>>2)];
 var $59=(($58+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$59;
 label=38;break;
 case 19: 
 var $61=($29&255)<240;
 if($61){label=20;break;}else{label=28;break;}
 case 20: 
 var $63=$25;
 var $64=((($23)-($63))|0);
 var $65=($64|0)<3;
 if($65){var $_0=1;label=40;break;}else{label=21;break;}
 case 21: 
 var $67=(($25+1)|0);
 var $68=HEAP8[($67)];
 var $69=(($25+2)|0);
 var $70=HEAP8[($69)];
 if(($30|0)==224){ label=22;break;}else if(($30|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $72=$68&-32;
 var $73=(($72<<24)>>24)==-96;
 if($73){label=25;break;}else{var $_0=2;label=40;break;}
 case 23: 
 var $75=$68&-32;
 var $76=(($75<<24)>>24)==-128;
 if($76){label=25;break;}else{var $_0=2;label=40;break;}
 case 24: 
 var $78=$68&-64;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=25;break;}else{var $_0=2;label=40;break;}
 case 25: 
 var $81=($70&255);
 var $82=$81&192;
 var $83=($82|0)==128;
 if($83){label=26;break;}else{var $_0=2;label=40;break;}
 case 26: 
 var $85=$30<<12;
 var $86=$85&61440;
 var $87=($68&255);
 var $88=$87<<6;
 var $89=$88&4032;
 var $90=$89|$86;
 var $91=$81&63;
 var $92=$90|$91;
 var $93=($92>>>0)>($Maxcode>>>0);
 if($93){var $_0=2;label=40;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($26)>>2)]=$92;
 var $95=HEAP32[(($frm_nxt)>>2)];
 var $96=(($95+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$96;
 label=38;break;
 case 28: 
 var $98=($29&255)<245;
 if($98){label=29;break;}else{var $_0=2;label=40;break;}
 case 29: 
 var $100=$25;
 var $101=((($23)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $_0=1;label=40;break;}else{label=30;break;}
 case 30: 
 var $104=(($25+1)|0);
 var $105=HEAP8[($104)];
 var $106=(($25+2)|0);
 var $107=HEAP8[($106)];
 var $108=(($25+3)|0);
 var $109=HEAP8[($108)];
 if(($30|0)==240){ label=31;break;}else if(($30|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($105)+(112))&255);
 var $111=($_off&255)<48;
 if($111){label=34;break;}else{var $_0=2;label=40;break;}
 case 32: 
 var $113=$105&-16;
 var $114=(($113<<24)>>24)==-128;
 if($114){label=34;break;}else{var $_0=2;label=40;break;}
 case 33: 
 var $116=$105&-64;
 var $117=(($116<<24)>>24)==-128;
 if($117){label=34;break;}else{var $_0=2;label=40;break;}
 case 34: 
 var $119=($107&255);
 var $120=$119&192;
 var $121=($120|0)==128;
 if($121){label=35;break;}else{var $_0=2;label=40;break;}
 case 35: 
 var $123=($109&255);
 var $124=$123&192;
 var $125=($124|0)==128;
 if($125){label=36;break;}else{var $_0=2;label=40;break;}
 case 36: 
 var $127=$30<<18;
 var $128=$127&1835008;
 var $129=($105&255);
 var $130=$129<<12;
 var $131=$130&258048;
 var $132=$131|$128;
 var $133=$119<<6;
 var $134=$133&4032;
 var $135=$132|$134;
 var $136=$123&63;
 var $137=$135|$136;
 var $138=($137>>>0)>($Maxcode>>>0);
 if($138){var $_0=2;label=40;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($26)>>2)]=$137;
 var $140=HEAP32[(($frm_nxt)>>2)];
 var $141=(($140+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$141;
 label=38;break;
 case 38: 
 var $143=HEAP32[(($to_nxt)>>2)];
 var $144=(($143+4)|0);
 HEAP32[(($to_nxt)>>2)]=$144;
 var $145=HEAP32[(($frm_nxt)>>2)];
 var $146=($145>>>0)<($frm_end>>>0);
 if($146){var $26=$144;var $25=$145;label=9;break;}else{var $147=$145;label=39;break;}
 case 39: 
 var $147;
 var $148=($147>>>0)<($frm_end>>>0);
 var $149=($148&1);
 var $_0=$149;label=40;break;
 case 40: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;


 var $2=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}


function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond13=$20&$21;
 if($or_cond13){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar32_t_014=1;var $frm_nxt_115=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_115;
 var $nchar32_t_014;
 var $24=HEAP8[($frm_nxt_115)];
 var $25=($24&255);
 var $26=(($24<<24)>>24)>-1;
 if($26){label=9;break;}else{label=11;break;}
 case 9: 
 var $28=($25>>>0)>($Maxcode>>>0);
 if($28){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=10;break;}
 case 10: 
 var $30=(($frm_nxt_115+1)|0);
 var $frm_nxt_2=$30;label=42;break;
 case 11: 
 var $32=($24&255)<194;
 if($32){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=12;break;}
 case 12: 
 var $34=($24&255)<224;
 if($34){label=13;break;}else{label=17;break;}
 case 13: 
 var $36=$frm_nxt_115;
 var $37=((($22)-($36))|0);
 var $38=($37|0)<2;
 if($38){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=14;break;}
 case 14: 
 var $40=(($frm_nxt_115+1)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&192;
 var $44=($43|0)==128;
 if($44){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 15: 
 var $46=$25<<6;
 var $47=$46&1984;
 var $48=$42&63;
 var $49=$48|$47;
 var $50=($49>>>0)>($Maxcode>>>0);
 if($50){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=16;break;}
 case 16: 
 var $52=(($frm_nxt_115+2)|0);
 var $frm_nxt_2=$52;label=42;break;
 case 17: 
 var $54=($24&255)<240;
 if($54){label=18;break;}else{label=29;break;}
 case 18: 
 var $56=$frm_nxt_115;
 var $57=((($22)-($56))|0);
 var $58=($57|0)<3;
 if($58){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=19;break;}
 case 19: 
 var $60=(($frm_nxt_115+1)|0);
 var $61=HEAP8[($60)];
 var $62=(($frm_nxt_115+2)|0);
 var $63=HEAP8[($62)];
 if(($25|0)==224){ label=20;break;}else if(($25|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $65=$61&-32;
 var $66=(($65<<24)>>24)==-96;
 if($66){label=26;break;}else{label=21;break;}
 case 21: 
 var $68=$frm;
 var $69=((($56)-($68))|0);
 var $_0=$69;label=45;break;
 case 22: 
 var $71=$61&-32;
 var $72=(($71<<24)>>24)==-128;
 if($72){label=26;break;}else{label=23;break;}
 case 23: 
 var $74=$frm;
 var $75=((($56)-($74))|0);
 var $_0=$75;label=45;break;
 case 24: 
 var $77=$61&-64;
 var $78=(($77<<24)>>24)==-128;
 if($78){label=26;break;}else{label=25;break;}
 case 25: 
 var $80=$frm;
 var $81=((($56)-($80))|0);
 var $_0=$81;label=45;break;
 case 26: 
 var $83=($63&255);
 var $84=$83&192;
 var $85=($84|0)==128;
 if($85){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 27: 
 var $87=$25<<12;
 var $88=$87&61440;
 var $89=($61&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$83&63;
 var $94=$92|$93;
 var $95=($94>>>0)>($Maxcode>>>0);
 if($95){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=28;break;}
 case 28: 
 var $97=(($frm_nxt_115+3)|0);
 var $frm_nxt_2=$97;label=42;break;
 case 29: 
 var $99=($24&255)<245;
 if($99){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 30: 
 var $101=$frm_nxt_115;
 var $102=((($22)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=31;break;}
 case 31: 
 var $105=(($frm_nxt_115+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($frm_nxt_115+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_115+3)|0);
 var $110=HEAP8[($109)];
 if(($25|0)==240){ label=32;break;}else if(($25|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=38;break;}else{label=33;break;}
 case 33: 
 var $114=$frm;
 var $115=((($101)-($114))|0);
 var $_0=$115;label=45;break;
 case 34: 
 var $117=$106&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=38;break;}else{label=35;break;}
 case 35: 
 var $120=$frm;
 var $121=((($101)-($120))|0);
 var $_0=$121;label=45;break;
 case 36: 
 var $123=$106&-64;
 var $124=(($123<<24)>>24)==-128;
 if($124){label=38;break;}else{label=37;break;}
 case 37: 
 var $126=$frm;
 var $127=((($101)-($126))|0);
 var $_0=$127;label=45;break;
 case 38: 
 var $129=($108&255);
 var $130=$129&192;
 var $131=($130|0)==128;
 if($131){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 39: 
 var $133=($110&255);
 var $134=$133&192;
 var $135=($134|0)==128;
 if($135){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}
 case 40: 
 var $137=$25<<18;
 var $138=$137&1835008;
 var $139=($106&255);
 var $140=$139<<12;
 var $141=$140&258048;
 var $142=$141|$138;
 var $143=$129<<6;
 var $144=$143&4032;
 var $145=$142|$144;
 var $146=$133&63;
 var $147=$145|$146;
 var $148=($147>>>0)>($Maxcode>>>0);
 if($148){var $frm_nxt_1_lcssa=$frm_nxt_115;label=44;break;}else{label=41;break;}
 case 41: 
 var $150=(($frm_nxt_115+4)|0);
 var $frm_nxt_2=$150;label=42;break;
 case 42: 
 var $frm_nxt_2;
 var $152=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $153=($nchar32_t_014>>>0)<($mx>>>0);
 var $or_cond=$152&$153;
 if($or_cond){label=43;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 43: 
 var $phitmp=((($nchar32_t_014)+(1))|0);
 var $nchar32_t_014=$phitmp;var $frm_nxt_115=$frm_nxt_2;label=8;break;
 case 44: 
 var $frm_nxt_1_lcssa;
 var $154=$frm_nxt_1_lcssa;
 var $155=$frm;
 var $156=((($154)-($155))|0);
 var $_0=$156;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5192;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}


function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5192;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}


function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5144;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}


function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5144;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}


function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,2448,4);
 return;
}


function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;


 var $1=_wcslen(2400);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,2400,$1);
 return;
}


function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,2392,5);
 return;
}


function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;


 var $1=_wcslen(2360);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,2360,$1);
 return;
}


function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18152)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18152);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18040)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18040);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15304, 0, 168)|0;
 var $12=_atexit(904,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15304,3480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15316,3440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15328,3432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15340,3416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15352,3376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15364,3368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15376,3352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15388,3328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15400,3320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15412,3280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15424,3264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15436,3208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15448,3176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15460,3168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((16376)>>2)]=15304;

 label=21;break;
 case 21: 
 var $29=HEAP32[((16376)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;

 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18096)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18096);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18016)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18016);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14560, 0, 168)|0;
 var $12=_atexit(468,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14560,4016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14572,3976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14584,3944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14596,3904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14608,3832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14620,3800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14632,3712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14644,3696) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14656,3624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14668,3584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14680,3568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14692,3544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14704,3528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14716,3512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((16288)>>2)]=14560;

 label=21;break;
 case 21: 
 var $29=HEAP32[((16288)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;

 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18144)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18144);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18032)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18032);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15016, 0, 288)|0;
 var $12=_atexit(516,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15016,408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15028,392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15040,384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15052,352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15064,344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15076,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15088,296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15100,288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15112,232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15124,224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15136,152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15148,136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15160,128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15172,112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15184,104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15196,80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15208,344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15220,72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15232,64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15244,4104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15256,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15268,4072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15280,4064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15292,4056) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((16368)>>2)]=15016;

 label=31;break;
 case 31: 
 var $39=HEAP32[((16368)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;

 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18088)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18088);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18008)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18008);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14272, 0, 288)|0;
 var $12=_atexit(396,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14272,1184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14284,1120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14296,1096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14308,1032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14320,624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14332,1000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14344,952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14356,920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14368,880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14380,832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14392,776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14404,736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14416,720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14428,680) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14440,664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14452,640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14464,624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14476,608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14488,584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14500,568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14512,536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14524,520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14536,504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14548,448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((16280)>>2)]=14272;

 label=31;break;
 case 31: 
 var $39=HEAP32[((16280)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;

 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18160)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18160);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18048)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18048);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15472, 0, 288)|0;
 var $12=_atexit(390,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15472,1240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15484,1232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((16384)>>2)]=15472;

 label=9;break;
 case 9: 
 var $17=HEAP32[((16384)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;

 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18104)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18104);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18024)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18024);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14728, 0, 288)|0;
 var $12=_atexit(850,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14728,1312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14740,1264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((16296)>>2)]=14728;

 label=9;break;
 case 9: 
 var $17=HEAP32[((16296)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;

 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18168)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18168);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16392,2264,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((896),16392,___dso_handle);

 label=5;break;
 case 5: 
 return 16392;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;

 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18112)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18112);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(2216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16304,2216,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((596),16304,___dso_handle);

 label=6;break;
 case 6: 
 return 16304;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18192)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18192);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16440,2200,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((896),16440,___dso_handle);

 label=5;break;
 case 5: 
 return 16440;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;

 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18136)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18136);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(2160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16352,2160,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((596),16352,___dso_handle);

 label=6;break;
 case 6: 
 return 16352;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18184)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18184);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16424,2088,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((896),16424,___dso_handle);

 label=5;break;
 case 5: 
 return 16424;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;

 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18128)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18128);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16336,1976,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((596),16336,___dso_handle);

 label=6;break;
 case 6: 
 return 16336;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18176)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18176);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16408,1896,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((896),16408,___dso_handle);

 label=5;break;
 case 5: 
 return 16408;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;

 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18120)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18120);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16320,1816,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((596),16320,___dso_handle);

 label=6;break;
 case 6: 
 return 16320;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15792)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15792)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15792)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $28=$16;
 var $_0=$28;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18072)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18072);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15792)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15792)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18072)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18072);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15792)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15792)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18072)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18072);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15792)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15792)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18072)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18072);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((15792)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((15792)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15792)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($27?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($27?$$etemp$1$1:$$etemp$2$1);
 var $_0$1=$_$1;var $_0$0=$_$0;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18072)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18072);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2864,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((15792)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((15792)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $26=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 var $or_cond=$25|$26;
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $27=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 var $or_cond1=$or_cond|$27;
 if($or_cond1){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $29=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 var $_=($29?2147483647:-2147483648);
 var $_0=$_;label=15;break;
 case 13: 
 var $31$0=$16$0;
 var $31=$31$0;
 var $_0=$31;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_idx=$__vp;
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($__vp+4)|0);
 var $1=$_idx2;
 var $ld$0$0=(($1)|0);
 var $_idx2_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $_idx2_val$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$_idx2_val$1;
 var $3=$2>>1;
 var $4=$_idx_val;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=$_idx2_val$0;
 var $8=$2&1;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$7)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$7;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 FUNCTION_TABLE[$18]($6);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $13=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($10)>>2)]=0;
 var $_pre2_i=HEAP32[(($3)>>2)];
 var $13=$_pre2_i;label=4;break;
 case 4: 
 var $13;
 var $14=(($13+4)|0);
 HEAP32[(($3)>>2)]=$14;
 var $15=((($_0_i)-(1))|0);
 var $16=($15|0)==0;
 if($16){label=20;break;}else{var $_0_i=$15;var $10=$14;label=2;break;}
 case 5: 
 var $18=(($this+16)|0);
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=$22>>2;
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>1073741823;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 7: 
 var $28=((($5)-($21))|0);
 var $29=$28>>2;
 var $30=($29>>>0)>536870910;
 if($30){var $_058=1073741823;label=11;break;}else{label=8;break;}
 case 8: 
 var $31=$28>>1;
 var $32=($31>>>0)<($24>>>0);
 var $33=($32?$24:$31);
 var $34=($33|0)==0;
 if($34){var $46=0;var $_06=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $36=(($this+128)|0);
 var $37=HEAP8[($36)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 var $40=($33>>>0)<29;
 var $or_cond_i_i=$39&$40;
 if($or_cond_i_i){label=10;break;}else{var $_058=$33;label=11;break;}
 case 10: 
 HEAP8[($36)]=1;
 var $42=$18;
 var $46=$42;var $_06=$33;label=12;break;
 case 11: 
 var $_058;
 var $43=$_058<<2;
 var $44=__Znwj($43);
 var $45=$44;
 var $46=$45;var $_06=$_058;label=12;break;
 case 12: 
 var $_06;
 var $46;
 var $47=(($46+($23<<2))|0);
 var $_0_i2=$__n;var $49=$47;label=13;break;
 case 13: 
 var $49;
 var $_0_i2;
 var $50=($49|0)==0;
 if($50){var $52=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($49)>>2)]=0;
 var $52=$49;label=15;break;
 case 15: 
 var $52;
 var $53=(($52+4)|0);
 var $54=((($_0_i2)-(1))|0);
 var $55=($54|0)==0;
 if($55){label=16;break;}else{var $_0_i2=$54;var $49=$53;label=13;break;}
 case 16: 
 var $56=(($46+($_06<<2))|0);
 var $57=HEAP32[(($19)>>2)];
 var $58=HEAP32[(($3)>>2)];
 var $59=$58;
 var $60=$57;
 var $61=((($59)-($60))|0);
 var $62=$61>>2;
 var $_sum=((($23)-($62))|0);
 var $63=(($46+($_sum<<2))|0);
 var $64=$63;
 var $65=$57;
 assert($61 % 1 === 0);(_memcpy($64, $65, $61)|0);
 HEAP32[(($19)>>2)]=$63;
 HEAP32[(($3)>>2)]=$53;
 HEAP32[(($1)>>2)]=$56;
 var $66=($57|0)==0;
 if($66){label=20;break;}else{label=17;break;}
 case 17: 
 var $68=$18;
 var $69=($57|0)==($68|0);
 if($69){label=18;break;}else{label=19;break;}
 case 18: 
 var $71=(($this+128)|0);
 HEAP8[($71)]=0;
 label=20;break;
 case 19: 
 __ZdlPv($65);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15004);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14992);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14980);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14968);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14956);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14944);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14932);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14920);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14908);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14896);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14884);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14872);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14860);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14848);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14836);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14824);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14812);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14800);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14788);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14776);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14764);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14752);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14740);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14728);
 return;
}


function ___cxx_global_array_dtor53($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15748);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15736);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15724);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15712);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15700);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15688);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15676);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15664);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15652);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15640);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15628);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15616);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15604);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15592);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15580);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15568);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15556);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15544);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15532);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15520);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15508);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15496);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15484);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15472);
 return;
}


function ___cxx_global_array_dtor56($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14548);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14524);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14512);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14500);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14476);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14440);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14344);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14332);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14284);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14272);
 return;
}


function ___cxx_global_array_dtor81($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15292);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15280);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15268);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15256);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15244);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15220);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15196);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15184);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15040);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15016);
 return;
}


function ___cxx_global_array_dtor105($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14716);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14704);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14692);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14680);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14668);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14656);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14644);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14632);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14620);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14608);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14596);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14584);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14572);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14560);
 return;
}


function ___cxx_global_array_dtor120($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15460);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15448);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15436);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15424);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15412);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15400);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15388);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15376);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15364);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15352);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15340);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15328);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15316);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15304);
 return;
}


function _mbrlen($s,$n,$st){
 var label=0;


 var $1=($st|0)!=0;
 var $2=($1?$st:13760);
 var $3=_mbrtowc(0,$s,$n,$2);
 return $3;
}


function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_01=($2?13752:$st);
 var $3=(($_01)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_02=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((___fsmu8+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_02=$31;label=11;break;
 case 11: 
 var $_02;
 var $c_0;
 var $s_0;
 var $33=($_02|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_02;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $1=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$1;
 var $2=($wcs|0)!=0;
 var $3=(($wbuf)|0);
 var $wn_=($2?$wn:256);
 var $wcs_=($2?$wcs:$3);
 var $4=($1|0)==0;
 var $5=($wn_|0)==0;
 var $or_cond22=$4|$5;
 if($or_cond22){var $cnt_1=0;var $_1=$n;var $_26=$wn_;var $ws_019=$wcs_;var $22=$1;label=8;break;}else{var $_0423=$wn_;var $_024=$n;var $cnt_025=0;var $ws_026=$wcs_;var $_pr41=$1;label=2;break;}
 case 2: 
 var $_pr41;
 var $ws_026;
 var $cnt_025;
 var $_024;
 var $_0423;
 var $6=$_024>>>2;
 var $7=($6>>>0)>=($_0423>>>0);
 var $8=($_024>>>0)>131;
 var $or_cond7=$7|$8;
 if($or_cond7){label=3;break;}else{var $cnt_1=$cnt_025;var $_1=$_024;var $_26=$_0423;var $ws_019=$ws_026;var $22=$_pr41;label=8;break;}
 case 3: 
 var $_04_=($7?$_0423:$6);
 var $9=((($_024)-($_04_))|0);
 var $10=_mbsrtowcs($ws_026,$s,$_04_,$st);
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pr_pre=HEAP32[(($s)>>2)];
 var $cnt_1=-1;var $_1=$9;var $_26=0;var $ws_019=$ws_026;var $22=$_pr_pre;label=8;break;
 case 5: 
 var $13=($ws_026|0)==($3|0);
 if($13){var $ws_1=$3;var $_15=$_0423;label=7;break;}else{label=6;break;}
 case 6: 
 var $15=(($ws_026+($10<<2))|0);
 var $16=((($_0423)-($10))|0);
 var $ws_1=$15;var $_15=$16;label=7;break;
 case 7: 
 var $_15;
 var $ws_1;
 var $18=((($10)+($cnt_025))|0);
 var $19=HEAP32[(($s)>>2)];
 var $20=($19|0)==0;
 var $21=($_15|0)==0;
 var $or_cond=$20|$21;
 if($or_cond){var $cnt_1=$18;var $_1=$9;var $_26=$_15;var $ws_019=$ws_1;var $22=$19;label=8;break;}else{var $_0423=$_15;var $_024=$9;var $cnt_025=$18;var $ws_026=$ws_1;var $_pr41=$19;label=2;break;}
 case 8: 
 var $22;
 var $ws_019;
 var $_26;
 var $_1;
 var $cnt_1;
 var $23=($22|0)==0;
 if($23){var $cnt_3=$cnt_1;label=15;break;}else{label=9;break;}
 case 9: 
 var $24=($_26|0)==0;
 var $25=($_1|0)==0;
 var $or_cond810=$24|$25;
 if($or_cond810){var $cnt_3=$cnt_1;label=15;break;}else{var $_311=$_26;var $_212=$_1;var $cnt_213=$cnt_1;var $ws_214=$ws_019;var $26=$22;label=10;break;}
 case 10: 
 var $26;
 var $ws_214;
 var $cnt_213;
 var $_212;
 var $_311;
 var $27=_mbrtowc($ws_214,$26,$_212,$st);
 var $28=((($27)+(2))|0);
 var $29=($28>>>0)<3;
 if($29){label=11;break;}else{label=14;break;}
 case 11: 
 if(($27|0)==0){ label=12;break;}else if(($27|0)==-1){ var $cnt_3=-1;label=15;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_213;label=15;break;
 case 13: 
 var $33=(($st)|0);
 HEAP32[(($33)>>2)]=0;
 var $cnt_3=$cnt_213;label=15;break;
 case 14: 
 var $35=HEAP32[(($s)>>2)];
 var $36=(($35+$27)|0);
 HEAP32[(($s)>>2)]=$36;
 var $37=((($_212)-($27))|0);
 var $38=(($ws_214+4)|0);
 var $39=((($_311)-(1))|0);
 var $40=((($cnt_213)+(1))|0);
 var $41=($39|0)==0;
 var $42=($_212|0)==($27|0);
 var $or_cond8=$41|$42;
 if($or_cond8){var $cnt_3=$40;label=15;break;}else{var $_311=$39;var $_212=$37;var $cnt_213=$40;var $ws_214=$38;var $26=$36;label=10;break;}
 case 15: 
 var $cnt_3;
 if($2){label=16;break;}else{label=17;break;}
 case 16: 
 var $44=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$44;
 label=17;break;
 case 17: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_35=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=36;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_02=$wn;label=7;break;}else{var $s_5_ph=$1;var $_01_ph=$ws;var $_46_ph=$wn;label=6;break;}
 case 6: 
 var $_46_ph;
 var $_01_ph;
 var $s_5_ph;
 var $12=($_46_ph|0)==0;
 if($12){var $_0=$wn;label=53;break;}else{var $_4622=$_46_ph;var $_0123=$_01_ph;var $s_524=$s_5_ph;label=26;break;}
 case 7: 
 var $_02;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=12;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=12;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_137=$_02;var $s_18=$s_0;label=10;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$27;label=12;break;}
 case 10: 
 var $s_18;
 var $_137;
 var $28=(($s_18+4)|0);
 var $29=((($_137)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 if($35){var $_137=$29;var $s_18=$28;label=10;break;}else{label=11;break;}
 case 11: 
 var $36=(($31)&255);
 var $s_2=$28;var $_24=$29;var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $_24;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=(($s_2+1)|0);
 var $43=((($_24)-(1))|0);
 var $s_0=$42;var $_02=$43;label=7;break;
 case 14: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_840=$_24;var $_442=$ws;var $s_1044=$s_2;label=47;break;}else{label=15;break;}
 case 15: 
 var $48=(($s_2+1)|0);
 var $49=((___fsmu8+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_35=$_24;label=16;break;
 case 16: 
 var $_35;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_35;label=46;break;
 case 18: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=25;break;}else{label=19;break;}
 case 19: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=20;break;}else{label=21;break;}
 case 20: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_35;label=46;break;
 case 21: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=25;break;}else{label=22;break;}
 case 22: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_35;label=46;break;
 case 24: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=25;break;
 case 25: 
 var $s_4;
 var $87=((($_35)-(1))|0);
 var $s_0=$s_4;var $_02=$87;label=7;break;
 case 26: 
 var $s_524;
 var $_0123;
 var $_4622;
 var $88=HEAP8[($s_524)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=27;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=32;break;}
 case 27: 
 var $93=$s_524;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_4622>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_512=$_4622;var $_113=$_0123;var $s_614=$s_524;label=28;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=32;break;}
 case 28: 
 var $s_614;
 var $_113;
 var $_512;
 var $97=$s_614;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 var $104=(($s_614+1)|0);
 var $105=$98&255;
 var $106=(($_113+4)|0);
 HEAP32[(($_113)>>2)]=$105;
 var $107=(($s_614+2)|0);
 var $108=HEAP8[($104)];
 var $109=($108&255);
 var $110=(($_113+8)|0);
 HEAP32[(($106)>>2)]=$109;
 var $111=(($s_614+3)|0);
 var $112=HEAP8[($107)];
 var $113=($112&255);
 var $114=(($_113+12)|0);
 HEAP32[(($110)>>2)]=$113;
 var $115=(($s_614+4)|0);
 var $116=HEAP8[($111)];
 var $117=($116&255);
 var $118=(($_113+16)|0);
 HEAP32[(($114)>>2)]=$117;
 var $119=((($_512)-(4))|0);
 var $120=($119>>>0)>3;
 if($120){var $_512=$119;var $_113=$118;var $s_614=$115;label=28;break;}else{label=31;break;}
 case 30: 
 var $121=(($98)&255);
 var $s_7=$s_614;var $_2=$_113;var $_6=$_512;var $122=$121;label=32;break;
 case 31: 
 var $_pre_pre=HEAP8[($115)];
 var $s_7=$115;var $_2=$118;var $_6=$119;var $122=$_pre_pre;label=32;break;
 case 32: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=53;break;}else{var $_4622=$129;var $_0123=$128;var $s_524=$127;label=26;break;}
 case 34: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_840=$_6;var $_442=$_2;var $s_1044=$s_7;label=47;break;}else{label=35;break;}
 case 35: 
 var $135=(($s_7+1)|0);
 var $136=((___fsmu8+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=36;break;
 case 36: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=46;break;
 case 38: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=39;break;}else{var $c_5=$153;var $s_9=$151;label=45;break;}
 case 39: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=40;break;}else{label=41;break;}
 case 40: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=46;break;
 case 41: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=42;break;}else{var $c_5=$165;var $s_9=$164;label=45;break;}
 case 42: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=43;break;}else{label=44;break;}
 case 43: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=46;break;
 case 44: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=45;break;
 case 45: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_01_ph=$179;var $_46_ph=$180;label=6;break;
 case 46: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){var $_840=$_8;var $_442=$_4;var $s_1044=$s_10;label=47;break;}else{var $_441=$_4;var $s_1043=$s_10;label=51;break;}
 case 47: 
 var $s_1044;
 var $_442;
 var $_840;
 var $183=HEAP8[($s_1044)];
 var $184=(($183<<24)>>24)==0;
 if($184){label=48;break;}else{var $_441=$_442;var $s_1043=$s_1044;label=51;break;}
 case 48: 
 var $186=($_442|0)==0;
 if($186){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($_442)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $189=((($wn)-($_840))|0);
 var $_0=$189;label=53;break;
 case 51: 
 var $s_1043;
 var $_441;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_441|0)==0;
 if($192){var $_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_1043;
 var $_0=-1;label=53;break;
 case 53: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($src|0)==0;
 if($2){var $_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $4=($n|0)==0;
 if($4){label=18;break;}else{label=3;break;}
 case 3: 
 var $6=($wc|0)==0;
 if($6){label=4;break;}else{var $10=$wc;label=5;break;}
 case 4: 
 var $8=$1;
 HEAP32[(($1)>>2)]=$8;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 var $11=HEAP8[($src)];
 var $12=($11&255);
 var $13=(($11<<24)>>24)>-1;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($10)>>2)]=$12;
 var $15=(($11<<24)>>24)!=0;
 var $16=($15&1);
 var $_0=$16;label=19;break;
 case 7: 
 var $18=((($12)-(194))|0);
 var $19=($18>>>0)>50;
 if($19){label=18;break;}else{label=8;break;}
 case 8: 
 var $21=(($src+1)|0);
 var $22=((___fsmu8+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($n>>>0)<4;
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $26=((($n)*(6))&-1);
 var $27=((($26)-(6))|0);
 var $28=-2147483648>>>($27>>>0);
 var $29=$23&$28;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=18;break;}
 case 10: 
 var $32=HEAP8[($21)];
 var $33=($32&255);
 var $34=$33>>>3;
 var $35=((($34)-(16))|0);
 var $36=$23>>26;
 var $37=((($34)+($36))|0);
 var $38=$35|$37;
 var $39=($38>>>0)>7;
 if($39){label=18;break;}else{label=11;break;}
 case 11: 
 var $41=$23<<6;
 var $42=((($33)-(128))|0);
 var $43=$42|$41;
 var $44=($43|0)<0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($10)>>2)]=$43;
 var $_0=2;label=19;break;
 case 13: 
 var $47=(($src+2)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=((($49)-(128))|0);
 var $51=($50>>>0)>63;
 if($51){label=18;break;}else{label=14;break;}
 case 14: 
 var $53=$43<<6;
 var $54=$50|$53;
 var $55=($54|0)<0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($10)>>2)]=$54;
 var $_0=3;label=19;break;
 case 16: 
 var $58=(($src+3)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=((($60)-(128))|0);
 var $62=($61>>>0)>63;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=$54<<6;
 var $65=$61|$64;
 HEAP32[(($10)>>2)]=$65;
 var $_0=4;label=19;break;
 case 18: 
 var $67=___errno_location();
 HEAP32[(($67)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $1=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$1;
 var $2=($dst|0)!=0;
 var $3=(($buf)|0);
 var $n_=($2?$n:256);
 var $dst_=($2?$dst:$3);
 var $4=($1|0)==0;
 var $5=($n_|0)==0;
 var $or_cond22=$4|$5;
 if($or_cond22){var $cnt_1=0;var $_1=$wn;var $_26=$n_;var $s_019=$dst_;var $21=$1;label=8;break;}else{var $_0423=$n_;var $_024=$wn;var $cnt_025=0;var $s_026=$dst_;var $_pr41=$1;label=2;break;}
 case 2: 
 var $_pr41;
 var $s_026;
 var $cnt_025;
 var $_024;
 var $_0423;
 var $6=($_024>>>0)>=($_0423>>>0);
 var $7=($_024>>>0)>32;
 var $or_cond7=$6|$7;
 if($or_cond7){label=3;break;}else{var $cnt_1=$cnt_025;var $_1=$_024;var $_26=$_0423;var $s_019=$s_026;var $21=$_pr41;label=8;break;}
 case 3: 
 var $_04__0=($6?$_0423:$_024);
 var $8=((($_024)-($_04__0))|0);
 var $9=_wcsrtombs($s_026,$ws,$_04__0,0);
 var $10=($9|0)==-1;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pr_pre=HEAP32[(($ws)>>2)];
 var $cnt_1=-1;var $_1=$8;var $_26=0;var $s_019=$s_026;var $21=$_pr_pre;label=8;break;
 case 5: 
 var $12=($s_026|0)==($3|0);
 if($12){var $s_1=$3;var $_15=$_0423;label=7;break;}else{label=6;break;}
 case 6: 
 var $14=(($s_026+$9)|0);
 var $15=((($_0423)-($9))|0);
 var $s_1=$14;var $_15=$15;label=7;break;
 case 7: 
 var $_15;
 var $s_1;
 var $17=((($9)+($cnt_025))|0);
 var $18=HEAP32[(($ws)>>2)];
 var $19=($18|0)==0;
 var $20=($_15|0)==0;
 var $or_cond=$19|$20;
 if($or_cond){var $cnt_1=$17;var $_1=$8;var $_26=$_15;var $s_019=$s_1;var $21=$18;label=8;break;}else{var $_0423=$_15;var $_024=$8;var $cnt_025=$17;var $s_026=$s_1;var $_pr41=$18;label=2;break;}
 case 8: 
 var $21;
 var $s_019;
 var $_26;
 var $_1;
 var $cnt_1;
 var $22=($21|0)==0;
 if($22){var $cnt_3=$cnt_1;label=14;break;}else{label=9;break;}
 case 9: 
 var $23=($_26|0)==0;
 var $24=($_1|0)==0;
 var $or_cond810=$23|$24;
 if($or_cond810){var $cnt_3=$cnt_1;label=14;break;}else{var $_311=$_26;var $_212=$_1;var $cnt_213=$cnt_1;var $s_214=$s_019;var $25=$21;label=10;break;}
 case 10: 
 var $25;
 var $s_214;
 var $cnt_213;
 var $_212;
 var $_311;
 var $26=HEAP32[(($25)>>2)];
 var $27=_wcrtomb($s_214,$26,0);
 var $28=((($27)+(1))|0);
 var $29=($28>>>0)<2;
 if($29){label=11;break;}else{label=13;break;}
 case 11: 
 var $31=($27|0)==0;
 if($31){label=12;break;}else{var $cnt_3=-1;label=14;break;}
 case 12: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_213;label=14;break;
 case 13: 
 var $34=HEAP32[(($ws)>>2)];
 var $35=(($34+4)|0);
 HEAP32[(($ws)>>2)]=$35;
 var $36=((($_212)-(1))|0);
 var $37=(($s_214+$27)|0);
 var $38=((($_311)-($27))|0);
 var $39=((($cnt_213)+(1))|0);
 var $40=($_311|0)==($27|0);
 var $41=($36|0)==0;
 var $or_cond8=$40|$41;
 if($or_cond8){var $cnt_3=$39;label=14;break;}else{var $_311=$38;var $_212=$36;var $cnt_213=$39;var $s_214=$37;var $25=$35;label=10;break;}
 case 14: 
 var $cnt_3;
 if($2){label=15;break;}else{label=16;break;}
 case 15: 
 var $43=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$43;
 label=16;break;
 case 16: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_25_lcssa=$n;var $_02_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre41=HEAP32[(($ws)>>2)];
 var $_2525=$n;var $_0226=$s;var $18=$_pre41;label=8;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_038=0;var $ws2_09=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_09;
 var $_038;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8,0);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_14=((($_pn)+($_038))|0);
 var $14=(($ws2_09+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_14;label=26;break;}else{var $_038=$_14;var $ws2_09=$14;var $8=$15;label=5;break;}
 case 8: 
 var $18;
 var $_0226;
 var $_2525;
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){var $_25_lcssa=$_2525;var $_02_lcssa=$_0226;label=9;break;}else{label=11;break;}
 case 9: 
 var $_02_lcssa;
 var $_25_lcssa;
 var $21=($_25_lcssa|0)==0;
 if($21){var $_414=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $22=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_418=$_25_lcssa;var $_219=$_02_lcssa;var $40=$_pre;label=16;break;
 case 11: 
 var $24=($19>>>0)>127;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=_wcrtomb($_0226,$19,0);
 var $27=($26|0)==-1;
 if($27){var $_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $29=(($_0226+$26)|0);
 var $30=((($_2525)-($26))|0);
 var $_1=$29;var $_36=$30;var $36=$18;label=15;break;
 case 14: 
 var $32=(($19)&255);
 var $33=(($_0226+1)|0);
 HEAP8[($_0226)]=$32;
 var $34=((($_2525)-(1))|0);
 var $_pre42=HEAP32[(($ws)>>2)];
 var $_1=$33;var $_36=$34;var $36=$_pre42;label=15;break;
 case 15: 
 var $36;
 var $_36;
 var $_1;
 var $37=(($36+4)|0);
 HEAP32[(($ws)>>2)]=$37;
 var $38=($_36>>>0)>3;
 if($38){var $_2525=$_36;var $_0226=$_1;var $18=$37;label=8;break;}else{var $_25_lcssa=$_36;var $_02_lcssa=$_1;label=9;break;}
 case 16: 
 var $40;
 var $_219;
 var $_418;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=24;break;}else{label=17;break;}
 case 17: 
 var $44=($41>>>0)>127;
 if($44){label=18;break;}else{label=22;break;}
 case 18: 
 var $46=_wcrtomb($22,$41,0);
 var $47=($46|0)==-1;
 if($47){var $_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $49=($46>>>0)>($_418>>>0);
 if($49){label=20;break;}else{label=21;break;}
 case 20: 
 var $51=((($n)-($_418))|0);
 var $_0=$51;label=26;break;
 case 21: 
 var $53=HEAP32[(($40)>>2)];
 var $54=_wcrtomb($_219,$53,0);
 var $55=(($_219+$46)|0);
 var $56=((($_418)-($46))|0);
 var $_3=$55;var $_5=$56;var $61=$40;label=23;break;
 case 22: 
 var $58=(($41)&255);
 var $59=(($_219+1)|0);
 HEAP8[($_219)]=$58;
 var $60=((($_418)-(1))|0);
 var $_pre40=HEAP32[(($ws)>>2)];
 var $_3=$59;var $_5=$60;var $61=$_pre40;label=23;break;
 case 23: 
 var $61;
 var $_5;
 var $_3;
 var $62=(($61+4)|0);
 HEAP32[(($ws)>>2)]=$62;
 var $63=($_5|0)==0;
 if($63){var $_414=0;label=25;break;}else{var $_418=$_5;var $_219=$_3;var $40=$62;label=16;break;}
 case 24: 
 HEAP8[($_219)]=0;
 var $_414=$_418;label=25;break;
 case 25: 
 var $_414;
 HEAP32[(($ws)>>2)]=0;
 var $65=((($n)-($_414))|0);
 var $_0=$65;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcslen($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP32[(($_0)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0+4)|0);
 if($3){label=3;break;}else{var $_0=$4;label=2;break;}
 case 3: 
 var $6=$_0;
 var $7=$s;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemcpy($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_023=$s;var $_014=$n;var $_05=$d;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $2=((($_014)-(1))|0);
 var $3=(($_023+4)|0);
 var $4=HEAP32[(($_023)>>2)];
 var $5=(($_05+4)|0);
 HEAP32[(($_05)>>2)]=$4;
 var $6=($2|0)==0;
 if($6){label=3;break;}else{var $_023=$3;var $_014=$2;var $_05=$5;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemmove($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_025=$s;var $_16=$n;var $_07=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_07;
 var $_16;
 var $_025;
 var $12=((($_16)-(1))|0);
 var $13=(($_025+4)|0);
 var $14=HEAP32[(($_025)>>2)];
 var $15=(($_07+4)|0);
 HEAP32[(($_07)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_025=$13;var $_16=$12;var $_07=$15;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemset($d,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_012=$n;var $_03=$d;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=((($_012)-(1))|0);
 var $3=(($_03+4)|0);
 HEAP32[(($_03)>>2)]=$c;
 var $4=($2|0)==0;
 if($4){label=3;break;}else{var $_012=$2;var $_03=$3;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZNSt8bad_castC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4544;
 return;
}


function __ZNSt8bad_castD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt8bad_castD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt8bad_cast4whatEv($this){
 var label=0;


 return 1248;
}


function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_0=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_0=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,13008,12992,0);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_0=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_0=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_0=1;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i1=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i1=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i1;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i1)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=(($p_0+8)|0);
 var $81=($80>>>0)<($29>>>0);
 if($81){var $p_0=$80;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=(($info)|0);
 HEAP32[(($10)>>2)]=$dst_type;
 var $11=(($info+4)|0);
 HEAP32[(($11)>>2)]=$static_ptr;
 var $12=(($info+8)|0);
 HEAP32[(($12)>>2)]=$static_type;
 var $13=(($info+12)|0);
 HEAP32[(($13)>>2)]=$src2dst_offset;
 var $14=(($info+16)|0);
 var $15=(($info+20)|0);
 var $16=(($info+24)|0);
 var $17=(($info+28)|0);
 var $18=(($info+32)|0);
 var $19=(($info+40)|0);
 var $20=$8;
 var $21=(($dst_type)|0);
 var $22=($20|0)==($21|0);
 var $23=$14;
 _memset($23, 0, 39)|0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $25=(($info+48)|0);
 HEAP32[(($25)>>2)]=1;
 var $26=$8;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+20)|0);
 var $29=HEAP32[(($28)>>2)];
 FUNCTION_TABLE[$29]($9,$info,$6,$6,1,0);
 var $30=HEAP32[(($16)>>2)];
 var $31=($30|0)==1;
 var $_=($31?$6:0);
 STACKTOP=sp;return $_;
 case 3: 
 var $33=(($info+36)|0);
 var $34=$8;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($9,$info,$6,1,0);
 var $38=HEAP32[(($33)>>2)];
 if(($38|0)==0){ label=4;break;}else if(($38|0)==1){ label=7;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 4: 
 var $40=HEAP32[(($19)>>2)];
 var $41=($40|0)==1;
 if($41){label=5;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 5: 
 var $43=HEAP32[(($17)>>2)];
 var $44=($43|0)==1;
 if($44){label=6;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 6: 
 var $46=HEAP32[(($18)>>2)];
 var $47=($46|0)==1;
 var $48=HEAP32[(($15)>>2)];
 var $_1=($47?$48:0);
 var $dst_ptr_0=$_1;label=12;break;
 case 7: 
 var $50=HEAP32[(($16)>>2)];
 var $51=($50|0)==1;
 if($51){label=11;break;}else{label=8;break;}
 case 8: 
 var $53=HEAP32[(($19)>>2)];
 var $54=($53|0)==0;
 if($54){label=9;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 9: 
 var $56=HEAP32[(($17)>>2)];
 var $57=($56|0)==1;
 if($57){label=10;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 10: 
 var $59=HEAP32[(($18)>>2)];
 var $60=($59|0)==1;
 if($60){label=11;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 11: 
 var $62=HEAP32[(($14)>>2)];
 var $dst_ptr_0=$62;label=12;break;
 case 12: 
 var $dst_ptr_0;
 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off030=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off019=0;var $p_020=$42;var $is_dst_type_derived_from_static_type_0_off021=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off021;
 var $p_020;
 var $does_dst_type_point_to_our_static_type_0_off019;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_020+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i13=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i13=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i13;
 var $60=(($p_020)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i13)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}
 case 16: 
 var $74=HEAP8[($44)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}else{label=17;break;}
 case 17: 
 var $78=HEAP8[($43)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=20;break;}else{label=18;break;}
 case 18: 
 var $82=HEAP32[(($47)>>2)];
 var $83=($82|0)==1;
 if($83){label=27;break;}else{label=19;break;}
 case 19: 
 var $85=HEAP32[(($46)>>2)];
 var $86=$85&2;
 var $87=($86|0)==0;
 if($87){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $89=HEAP32[(($46)>>2)];
 var $90=$89&1;
 var $91=($90|0)==0;
 if($91){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $93=(($p_020+8)|0);
 var $94=($93>>>0)<($40>>>0);
 if($94){var $does_dst_type_point_to_our_static_type_0_off019=$does_dst_type_point_to_our_static_type_1_off0;var $p_020=$93;var $is_dst_type_derived_from_static_type_0_off021=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off030=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off030;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $95=(($info+40)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)+(1))|0);
 HEAP32[(($95)>>2)]=$97;
 var $98=(($info+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==1;
 if($100){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 24: 
 var $102=(($info+24)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==2;
 if($104){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 25: 
 var $106=(($info+54)|0);
 HEAP8[($106)]=1;
 if($is_dst_type_derived_from_static_type_2_off030){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off031;
 if($is_dst_type_derived_from_static_type_2_off031){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $110=(($this+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($this+16+($111<<3))|0);
 var $113=(($this+20)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114>>8;
 var $116=$114&1;
 var $117=($116|0)==0;
 if($117){var $offset_to_base_0_i14=$115;label=31;break;}else{label=30;break;}
 case 30: 
 var $119=$current_ptr;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+$115)|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $offset_to_base_0_i14=$123;label=31;break;
 case 31: 
 var $offset_to_base_0_i14;
 var $124=(($this+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+24)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($current_ptr+$offset_to_base_0_i14)|0);
 var $131=$114&2;
 var $132=($131|0)!=0;
 var $133=($132?$path_below:2);
 FUNCTION_TABLE[$129]($125,$info,$130,$133,$use_strcmp);
 var $134=(($this+24)|0);
 var $135=($111|0)>1;
 if($135){label=32;break;}else{label=53;break;}
 case 32: 
 var $137=(($this+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&2;
 var $140=($139|0)==0;
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 var $142=(($info+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==1;
 if($144){label=34;break;}else{label=39;break;}
 case 34: 
 var $145=(($info+54)|0);
 var $146=$current_ptr;
 var $p2_0=$134;label=35;break;
 case 35: 
 var $p2_0;
 var $148=HEAP8[($145)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=36;break;}else{label=53;break;}
 case 36: 
 var $152=(($p2_0+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153>>8;
 var $155=$153&1;
 var $156=($155|0)==0;
 if($156){var $offset_to_base_0_i11=$154;label=38;break;}else{label=37;break;}
 case 37: 
 var $158=HEAP32[(($146)>>2)];
 var $159=(($158+$154)|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $offset_to_base_0_i11=$161;label=38;break;
 case 38: 
 var $offset_to_base_0_i11;
 var $162=(($p2_0)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+24)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($current_ptr+$offset_to_base_0_i11)|0);
 var $169=$153&2;
 var $170=($169|0)!=0;
 var $171=($170?$path_below:2);
 FUNCTION_TABLE[$167]($163,$info,$168,$171,$use_strcmp);
 var $172=(($p2_0+8)|0);
 var $173=($172>>>0)<($112>>>0);
 if($173){var $p2_0=$172;label=35;break;}else{label=53;break;}
 case 39: 
 var $175=$138&1;
 var $176=($175|0)==0;
 if($176){label=41;break;}else{label=40;break;}
 case 40: 
 var $177=(($info+24)|0);
 var $178=(($info+54)|0);
 var $179=$current_ptr;
 var $p2_1=$134;label=42;break;
 case 41: 
 var $180=(($info+54)|0);
 var $181=$current_ptr;
 var $p2_2=$134;label=48;break;
 case 42: 
 var $p2_1;
 var $183=HEAP8[($178)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=43;break;}else{label=53;break;}
 case 43: 
 var $187=HEAP32[(($142)>>2)];
 var $188=($187|0)==1;
 if($188){label=44;break;}else{label=45;break;}
 case 44: 
 var $190=HEAP32[(($177)>>2)];
 var $191=($190|0)==1;
 if($191){label=53;break;}else{label=45;break;}
 case 45: 
 var $193=(($p2_1+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$194>>8;
 var $196=$194&1;
 var $197=($196|0)==0;
 if($197){var $offset_to_base_0_i9=$195;label=47;break;}else{label=46;break;}
 case 46: 
 var $199=HEAP32[(($179)>>2)];
 var $200=(($199+$195)|0);
 var $201=$200;
 var $202=HEAP32[(($201)>>2)];
 var $offset_to_base_0_i9=$202;label=47;break;
 case 47: 
 var $offset_to_base_0_i9;
 var $203=(($p2_1)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$204;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+24)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($current_ptr+$offset_to_base_0_i9)|0);
 var $210=$194&2;
 var $211=($210|0)!=0;
 var $212=($211?$path_below:2);
 FUNCTION_TABLE[$208]($204,$info,$209,$212,$use_strcmp);
 var $213=(($p2_1+8)|0);
 var $214=($213>>>0)<($112>>>0);
 if($214){var $p2_1=$213;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $216=HEAP8[($180)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=49;break;}else{label=53;break;}
 case 49: 
 var $220=HEAP32[(($142)>>2)];
 var $221=($220|0)==1;
 if($221){label=53;break;}else{label=50;break;}
 case 50: 
 var $223=(($p2_2+4)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224>>8;
 var $226=$224&1;
 var $227=($226|0)==0;
 if($227){var $offset_to_base_0_i=$225;label=52;break;}else{label=51;break;}
 case 51: 
 var $229=HEAP32[(($181)>>2)];
 var $230=(($229+$225)|0);
 var $231=$230;
 var $232=HEAP32[(($231)>>2)];
 var $offset_to_base_0_i=$232;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $233=(($p2_2)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$234;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+24)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($current_ptr+$offset_to_base_0_i)|0);
 var $240=$224&2;
 var $241=($240|0)!=0;
 var $242=($241?$path_below:2);
 FUNCTION_TABLE[$238]($234,$info,$239,$242,$use_strcmp);
 var $243=(($p2_2+8)|0);
 var $244=($243>>>0)<($112>>>0);
 if($244){var $p2_2=$243;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $is_dst_type_derived_from_static_type_0_off01=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $50=HEAP8[($38)];
 var $51=$50&1;
 var $not_=(($51<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off01=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off01;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $52=(($info+40)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)+(1))|0);
 HEAP32[(($52)>>2)]=$54;
 var $55=(($info+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==1;
 if($57){label=14;break;}else{label=16;break;}
 case 14: 
 var $59=(($info+24)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==2;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=(($info+54)|0);
 HEAP8[($63)]=1;
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $67=(($this+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+24)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=$47&1;
 var $49=(($info+53)|0);
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($this+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($this+16+($53<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $55=(($this+20)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56>>8;
 var $58=$56&1;
 var $59=($58|0)==0;
 if($59){var $offset_to_base_0_i1=$57;label=14;break;}else{label=13;break;}
 case 13: 
 var $61=$current_ptr;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+$57)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i1=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i1;
 var $66=(($this+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($current_ptr+$offset_to_base_0_i1)|0);
 var $73=$56&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$dst_ptr,$72,$75,$use_strcmp);
 var $76=($53|0)>1;
 if($76){label=15;break;}else{label=25;break;}
 case 15: 
 var $77=(($this+24)|0);
 var $78=(($info+24)|0);
 var $79=(($this+8)|0);
 var $80=(($info+54)|0);
 var $81=$current_ptr;
 var $p_0=$77;label=16;break;
 case 16: 
 var $p_0;
 var $83=HEAP8[($80)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=17;break;}else{label=25;break;}
 case 17: 
 var $87=HEAP8[($46)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=20;break;}else{label=18;break;}
 case 18: 
 var $91=HEAP32[(($78)>>2)];
 var $92=($91|0)==1;
 if($92){label=25;break;}else{label=19;break;}
 case 19: 
 var $94=HEAP32[(($79)>>2)];
 var $95=$94&2;
 var $96=($95|0)==0;
 if($96){label=25;break;}else{label=22;break;}
 case 20: 
 var $98=HEAP8[($49)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $102=HEAP32[(($79)>>2)];
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $106=(($p_0+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107>>8;
 var $109=$107&1;
 var $110=($109|0)==0;
 if($110){var $offset_to_base_0_i=$108;label=24;break;}else{label=23;break;}
 case 23: 
 var $112=HEAP32[(($81)>>2)];
 var $113=(($112+$108)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $offset_to_base_0_i=$115;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $116=(($p_0)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+20)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($current_ptr+$offset_to_base_0_i)|0);
 var $123=$107&2;
 var $124=($123|0)!=0;
 var $125=($124?$path_below:2);
 FUNCTION_TABLE[$121]($117,$info,$dst_ptr,$122,$125,$use_strcmp);
 var $126=(($p_0+8)|0);
 var $127=($126>>>0)<($54>>>0);
 if($127){var $p_0=$126;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$48;
 HEAP8[($49)]=$51;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond1_i=$34&$35;
 if($or_cond1_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((13800)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((13840+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((13840+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((13800)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((13816)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=344;break;
 case 12: 
 var $50=HEAP32[((13808)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=161;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((13840+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((13840+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((13800)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((13816)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((13808)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((13820)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((13840+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((13800)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((13800)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((13840+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((13840+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((13816)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((13808)>>2)]=$106;
 HEAP32[((13820)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=344;break;
 case 27: 
 var $145=HEAP32[((13804)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=161;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((14104+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((13816)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((14104+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((13804)>>2)];
 var $252=$251&$250;
 HEAP32[((13804)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((13816)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((13816)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((13816)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((13816)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i37=$8|4;
 var $311=(($192+$_sum_i37)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((13808)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((13820)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((13840+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((13800)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((13800)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((13840+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((13840+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((13816)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((13808)>>2)]=$rsize_0_i;
 HEAP32[((13820)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $mem_0=$343;label=344;break;
 case 78: 
 var $345=($bytes>>>0)>4294967231;
 if($345){var $nb_0=-1;label=161;break;}else{label=79;break;}
 case 79: 
 var $347=((($bytes)+(11))|0);
 var $348=$347&-8;
 var $349=HEAP32[((13804)>>2)];
 var $350=($349|0)==0;
 if($350){var $nb_0=$348;label=161;break;}else{label=80;break;}
 case 80: 
 var $352=(((-$348))|0);
 var $353=$347>>>8;
 var $354=($353|0)==0;
 if($354){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $356=($348>>>0)>16777215;
 if($356){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $358=((($353)+(1048320))|0);
 var $359=$358>>>16;
 var $360=$359&8;
 var $361=$353<<$360;
 var $362=((($361)+(520192))|0);
 var $363=$362>>>16;
 var $364=$363&4;
 var $365=$364|$360;
 var $366=$361<<$364;
 var $367=((($366)+(245760))|0);
 var $368=$367>>>16;
 var $369=$368&2;
 var $370=$365|$369;
 var $371=(((14)-($370))|0);
 var $372=$366<<$369;
 var $373=$372>>>15;
 var $374=((($371)+($373))|0);
 var $375=$374<<1;
 var $376=((($374)+(7))|0);
 var $377=$348>>>($376>>>0);
 var $378=$377&1;
 var $379=$378|$375;
 var $idx_0_i=$379;label=83;break;
 case 83: 
 var $idx_0_i;
 var $381=((14104+($idx_0_i<<2))|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=($382|0)==0;
 if($383){var $v_2_i=0;var $rsize_2_i=$352;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $385=($idx_0_i|0)==31;
 if($385){var $390=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $387=$idx_0_i>>>1;
 var $388=(((25)-($387))|0);
 var $390=$388;label=86;break;
 case 86: 
 var $390;
 var $391=$348<<$390;
 var $v_0_i18=0;var $rsize_0_i17=$352;var $t_0_i16=$382;var $sizebits_0_i=$391;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $393=(($t_0_i16+4)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$394&-8;
 var $396=((($395)-($348))|0);
 var $397=($396>>>0)<($rsize_0_i17>>>0);
 if($397){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $399=($395|0)==($348|0);
 if($399){var $v_2_i=$t_0_i16;var $rsize_2_i=$396;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$396;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $401=(($t_0_i16+20)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=$sizebits_0_i>>>31;
 var $404=(($t_0_i16+16+($403<<2))|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=($402|0)==0;
 var $407=($402|0)==($405|0);
 var $or_cond_i=$406|$407;
 var $rst_1_i=($or_cond_i?$rst_0_i:$402);
 var $408=($405|0)==0;
 var $409=$sizebits_0_i<<1;
 if($408){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$405;var $sizebits_0_i=$409;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $410=($t_1_i|0)==0;
 var $411=($v_2_i|0)==0;
 var $or_cond21_i=$410&$411;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $413=2<<$idx_0_i;
 var $414=(((-$413))|0);
 var $415=$413|$414;
 var $416=$349&$415;
 var $417=($416|0)==0;
 if($417){var $nb_0=$348;label=161;break;}else{label=92;break;}
 case 92: 
 var $419=(((-$416))|0);
 var $420=$416&$419;
 var $421=((($420)-(1))|0);
 var $422=$421>>>12;
 var $423=$422&16;
 var $424=$421>>>($423>>>0);
 var $425=$424>>>5;
 var $426=$425&8;
 var $427=$426|$423;
 var $428=$424>>>($426>>>0);
 var $429=$428>>>2;
 var $430=$429&4;
 var $431=$427|$430;
 var $432=$428>>>($430>>>0);
 var $433=$432>>>1;
 var $434=$433&2;
 var $435=$431|$434;
 var $436=$432>>>($434>>>0);
 var $437=$436>>>1;
 var $438=$437&1;
 var $439=$435|$438;
 var $440=$436>>>($438>>>0);
 var $441=((($439)+($440))|0);
 var $442=((14104+($441<<2))|0);
 var $443=HEAP32[(($442)>>2)];
 var $t_2_ph_i=$443;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $444=($t_2_ph_i|0)==0;
 if($444){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_230_i=$t_2_ph_i;var $rsize_331_i=$rsize_2_i;var $v_332_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_332_i;
 var $rsize_331_i;
 var $t_230_i;
 var $445=(($t_230_i+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=((($447)-($348))|0);
 var $449=($448>>>0)<($rsize_331_i>>>0);
 var $_rsize_3_i=($449?$448:$rsize_331_i);
 var $t_2_v_3_i=($449?$t_230_i:$v_332_i);
 var $450=(($t_230_i+16)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=($451|0)==0;
 if($452){label=95;break;}else{var $t_230_i=$451;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $453=(($t_230_i+20)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=($454|0)==0;
 if($455){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_230_i=$454;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $456=($v_3_lcssa_i|0)==0;
 if($456){var $nb_0=$348;label=161;break;}else{label=97;break;}
 case 97: 
 var $458=HEAP32[((13808)>>2)];
 var $459=((($458)-($348))|0);
 var $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
 if($460){label=98;break;}else{var $nb_0=$348;label=161;break;}
 case 98: 
 var $462=$v_3_lcssa_i;
 var $463=HEAP32[((13816)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=159;break;}else{label=99;break;}
 case 99: 
 var $466=(($462+$348)|0);
 var $467=$466;
 var $468=($462>>>0)<($466>>>0);
 if($468){label=100;break;}else{label=159;break;}
 case 100: 
 var $470=(($v_3_lcssa_i+24)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=(($v_3_lcssa_i+12)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($473|0)==($v_3_lcssa_i|0);
 if($474){label=106;break;}else{label=101;break;}
 case 101: 
 var $476=(($v_3_lcssa_i+8)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=$477;
 var $479=($478>>>0)<($463>>>0);
 if($479){label=105;break;}else{label=102;break;}
 case 102: 
 var $481=(($477+12)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=($482|0)==($v_3_lcssa_i|0);
 if($483){label=103;break;}else{label=105;break;}
 case 103: 
 var $485=(($473+8)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=($486|0)==($v_3_lcssa_i|0);
 if($487){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($481)>>2)]=$473;
 HEAP32[(($485)>>2)]=$477;
 var $R_1_i22=$473;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $490=(($v_3_lcssa_i+20)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=($491|0)==0;
 if($492){label=107;break;}else{var $R_0_i20=$491;var $RP_0_i19=$490;label=108;break;}
 case 107: 
 var $494=(($v_3_lcssa_i+16)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=($495|0)==0;
 if($496){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$495;var $RP_0_i19=$494;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $497=(($R_0_i20+20)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($498|0)==0;
 if($499){label=109;break;}else{var $R_0_i20=$498;var $RP_0_i19=$497;label=108;break;}
 case 109: 
 var $501=(($R_0_i20+16)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=($502|0)==0;
 if($503){label=110;break;}else{var $R_0_i20=$502;var $RP_0_i19=$501;label=108;break;}
 case 110: 
 var $505=$RP_0_i19;
 var $506=($505>>>0)<($463>>>0);
 if($506){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $510=($471|0)==0;
 if($510){label=133;break;}else{label=114;break;}
 case 114: 
 var $512=(($v_3_lcssa_i+28)|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=((14104+($513<<2))|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=($v_3_lcssa_i|0)==($515|0);
 if($516){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($514)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $518=HEAP32[(($512)>>2)];
 var $519=1<<$518;
 var $520=$519^-1;
 var $521=HEAP32[((13804)>>2)];
 var $522=$521&$520;
 HEAP32[((13804)>>2)]=$522;
 label=133;break;
 case 117: 
 var $524=$471;
 var $525=HEAP32[((13816)>>2)];
 var $526=($524>>>0)<($525>>>0);
 if($526){label=121;break;}else{label=118;break;}
 case 118: 
 var $528=(($471+16)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=($529|0)==($v_3_lcssa_i|0);
 if($530){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($528)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $533=(($471+20)|0);
 HEAP32[(($533)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $536=($R_1_i22|0)==0;
 if($536){label=133;break;}else{label=123;break;}
 case 123: 
 var $538=$R_1_i22;
 var $539=HEAP32[((13816)>>2)];
 var $540=($538>>>0)<($539>>>0);
 if($540){label=132;break;}else{label=124;break;}
 case 124: 
 var $542=(($R_1_i22+24)|0);
 HEAP32[(($542)>>2)]=$471;
 var $543=(($v_3_lcssa_i+16)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=($544|0)==0;
 if($545){label=128;break;}else{label=125;break;}
 case 125: 
 var $547=$544;
 var $548=HEAP32[((13816)>>2)];
 var $549=($547>>>0)<($548>>>0);
 if($549){label=127;break;}else{label=126;break;}
 case 126: 
 var $551=(($R_1_i22+16)|0);
 HEAP32[(($551)>>2)]=$544;
 var $552=(($544+24)|0);
 HEAP32[(($552)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $555=(($v_3_lcssa_i+20)|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=($556|0)==0;
 if($557){label=133;break;}else{label=129;break;}
 case 129: 
 var $559=$556;
 var $560=HEAP32[((13816)>>2)];
 var $561=($559>>>0)<($560>>>0);
 if($561){label=131;break;}else{label=130;break;}
 case 130: 
 var $563=(($R_1_i22+20)|0);
 HEAP32[(($563)>>2)]=$556;
 var $564=(($556+24)|0);
 HEAP32[(($564)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $568=($rsize_3_lcssa_i>>>0)<16;
 if($568){label=134;break;}else{label=135;break;}
 case 134: 
 var $570=((($rsize_3_lcssa_i)+($348))|0);
 var $571=$570|3;
 var $572=(($v_3_lcssa_i+4)|0);
 HEAP32[(($572)>>2)]=$571;
 var $_sum19_i=((($570)+(4))|0);
 var $573=(($462+$_sum19_i)|0);
 var $574=$573;
 var $575=HEAP32[(($574)>>2)];
 var $576=$575|1;
 HEAP32[(($574)>>2)]=$576;
 label=160;break;
 case 135: 
 var $578=$348|3;
 var $579=(($v_3_lcssa_i+4)|0);
 HEAP32[(($579)>>2)]=$578;
 var $580=$rsize_3_lcssa_i|1;
 var $_sum_i2536=$348|4;
 var $581=(($462+$_sum_i2536)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$580;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
 var $583=(($462+$_sum1_i26)|0);
 var $584=$583;
 HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
 var $585=$rsize_3_lcssa_i>>>3;
 var $586=($rsize_3_lcssa_i>>>0)<256;
 if($586){label=136;break;}else{label=141;break;}
 case 136: 
 var $588=$585<<1;
 var $589=((13840+($588<<2))|0);
 var $590=$589;
 var $591=HEAP32[((13800)>>2)];
 var $592=1<<$585;
 var $593=$591&$592;
 var $594=($593|0)==0;
 if($594){label=137;break;}else{label=138;break;}
 case 137: 
 var $596=$591|$592;
 HEAP32[((13800)>>2)]=$596;
 var $_sum15_pre_i=((($588)+(2))|0);
 var $_pre_i27=((13840+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$590;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($588)+(2))|0);
 var $598=((13840+($_sum18_i<<2))|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=$599;
 var $601=HEAP32[((13816)>>2)];
 var $602=($600>>>0)<($601>>>0);
 if($602){label=139;break;}else{var $F5_0_i=$599;var $_pre_phi_i28=$598;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$467;
 var $605=(($F5_0_i+12)|0);
 HEAP32[(($605)>>2)]=$467;
 var $_sum16_i=((($348)+(8))|0);
 var $606=(($462+$_sum16_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$F5_0_i;
 var $_sum17_i=((($348)+(12))|0);
 var $608=(($462+$_sum17_i)|0);
 var $609=$608;
 HEAP32[(($609)>>2)]=$590;
 label=160;break;
 case 141: 
 var $611=$466;
 var $612=$rsize_3_lcssa_i>>>8;
 var $613=($612|0)==0;
 if($613){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $615=($rsize_3_lcssa_i>>>0)>16777215;
 if($615){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $617=((($612)+(1048320))|0);
 var $618=$617>>>16;
 var $619=$618&8;
 var $620=$612<<$619;
 var $621=((($620)+(520192))|0);
 var $622=$621>>>16;
 var $623=$622&4;
 var $624=$623|$619;
 var $625=$620<<$623;
 var $626=((($625)+(245760))|0);
 var $627=$626>>>16;
 var $628=$627&2;
 var $629=$624|$628;
 var $630=(((14)-($629))|0);
 var $631=$625<<$628;
 var $632=$631>>>15;
 var $633=((($630)+($632))|0);
 var $634=$633<<1;
 var $635=((($633)+(7))|0);
 var $636=$rsize_3_lcssa_i>>>($635>>>0);
 var $637=$636&1;
 var $638=$637|$634;
 var $I7_0_i=$638;label=144;break;
 case 144: 
 var $I7_0_i;
 var $640=((14104+($I7_0_i<<2))|0);
 var $_sum2_i=((($348)+(28))|0);
 var $641=(($462+$_sum2_i)|0);
 var $642=$641;
 HEAP32[(($642)>>2)]=$I7_0_i;
 var $_sum3_i29=((($348)+(16))|0);
 var $643=(($462+$_sum3_i29)|0);
 var $_sum4_i30=((($348)+(20))|0);
 var $644=(($462+$_sum4_i30)|0);
 var $645=$644;
 HEAP32[(($645)>>2)]=0;
 var $646=$643;
 HEAP32[(($646)>>2)]=0;
 var $647=HEAP32[((13804)>>2)];
 var $648=1<<$I7_0_i;
 var $649=$647&$648;
 var $650=($649|0)==0;
 if($650){label=145;break;}else{label=146;break;}
 case 145: 
 var $652=$647|$648;
 HEAP32[((13804)>>2)]=$652;
 HEAP32[(($640)>>2)]=$611;
 var $653=$640;
 var $_sum5_i=((($348)+(24))|0);
 var $654=(($462+$_sum5_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$653;
 var $_sum6_i=((($348)+(12))|0);
 var $656=(($462+$_sum6_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$611;
 var $_sum7_i=((($348)+(8))|0);
 var $658=(($462+$_sum7_i)|0);
 var $659=$658;
 HEAP32[(($659)>>2)]=$611;
 label=160;break;
 case 146: 
 var $661=HEAP32[(($640)>>2)];
 var $662=($I7_0_i|0)==31;
 if($662){var $667=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $664=$I7_0_i>>>1;
 var $665=(((25)-($664))|0);
 var $667=$665;label=148;break;
 case 148: 
 var $667;
 var $668=(($661+4)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=$669&-8;
 var $671=($670|0)==($rsize_3_lcssa_i|0);
 if($671){var $T_0_lcssa_i=$661;label=155;break;}else{label=149;break;}
 case 149: 
 var $672=$rsize_3_lcssa_i<<$667;
 var $T_026_i=$661;var $K12_027_i=$672;label=151;break;
 case 150: 
 var $674=$K12_027_i<<1;
 var $675=(($682+4)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=$676&-8;
 var $678=($677|0)==($rsize_3_lcssa_i|0);
 if($678){var $T_0_lcssa_i=$682;label=155;break;}else{var $T_026_i=$682;var $K12_027_i=$674;label=151;break;}
 case 151: 
 var $K12_027_i;
 var $T_026_i;
 var $680=$K12_027_i>>>31;
 var $681=(($T_026_i+16+($680<<2))|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=($682|0)==0;
 if($683){label=152;break;}else{label=150;break;}
 case 152: 
 var $685=$681;
 var $686=HEAP32[((13816)>>2)];
 var $687=($685>>>0)<($686>>>0);
 if($687){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($681)>>2)]=$611;
 var $_sum12_i=((($348)+(24))|0);
 var $689=(($462+$_sum12_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$T_026_i;
 var $_sum13_i=((($348)+(12))|0);
 var $691=(($462+$_sum13_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$611;
 var $_sum14_i=((($348)+(8))|0);
 var $693=(($462+$_sum14_i)|0);
 var $694=$693;
 HEAP32[(($694)>>2)]=$611;
 label=160;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $696=(($T_0_lcssa_i+8)|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$T_0_lcssa_i;
 var $699=HEAP32[((13816)>>2)];
 var $700=($698>>>0)<($699>>>0);
 if($700){label=158;break;}else{label=156;break;}
 case 156: 
 var $702=$697;
 var $703=($702>>>0)<($699>>>0);
 if($703){label=158;break;}else{label=157;break;}
 case 157: 
 var $705=(($697+12)|0);
 HEAP32[(($705)>>2)]=$611;
 HEAP32[(($696)>>2)]=$611;
 var $_sum9_i=((($348)+(8))|0);
 var $706=(($462+$_sum9_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$697;
 var $_sum10_i=((($348)+(12))|0);
 var $708=(($462+$_sum10_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($348)+(24))|0);
 var $710=(($462+$_sum11_i)|0);
 var $711=$710;
 HEAP32[(($711)>>2)]=0;
 label=160;break;
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 _abort();
 throw "Reached an unreachable!";
 case 160: 
 var $713=(($v_3_lcssa_i+8)|0);
 var $714=$713;
 var $mem_0=$714;label=344;break;
 case 161: 
 var $nb_0;
 var $715=HEAP32[((13808)>>2)];
 var $716=($nb_0>>>0)>($715>>>0);
 if($716){label=166;break;}else{label=162;break;}
 case 162: 
 var $718=((($715)-($nb_0))|0);
 var $719=HEAP32[((13820)>>2)];
 var $720=($718>>>0)>15;
 if($720){label=163;break;}else{label=164;break;}
 case 163: 
 var $722=$719;
 var $723=(($722+$nb_0)|0);
 var $724=$723;
 HEAP32[((13820)>>2)]=$724;
 HEAP32[((13808)>>2)]=$718;
 var $725=$718|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $726=(($722+$_sum2)|0);
 var $727=$726;
 HEAP32[(($727)>>2)]=$725;
 var $728=(($722+$715)|0);
 var $729=$728;
 HEAP32[(($729)>>2)]=$718;
 var $730=$nb_0|3;
 var $731=(($719+4)|0);
 HEAP32[(($731)>>2)]=$730;
 label=165;break;
 case 164: 
 HEAP32[((13808)>>2)]=0;
 HEAP32[((13820)>>2)]=0;
 var $733=$715|3;
 var $734=(($719+4)|0);
 HEAP32[(($734)>>2)]=$733;
 var $735=$719;
 var $_sum1=((($715)+(4))|0);
 var $736=(($735+$_sum1)|0);
 var $737=$736;
 var $738=HEAP32[(($737)>>2)];
 var $739=$738|1;
 HEAP32[(($737)>>2)]=$739;
 label=165;break;
 case 165: 
 var $741=(($719+8)|0);
 var $742=$741;
 var $mem_0=$742;label=344;break;
 case 166: 
 var $744=HEAP32[((13812)>>2)];
 var $745=($nb_0>>>0)<($744>>>0);
 if($745){label=167;break;}else{label=168;break;}
 case 167: 
 var $747=((($744)-($nb_0))|0);
 HEAP32[((13812)>>2)]=$747;
 var $748=HEAP32[((13824)>>2)];
 var $749=$748;
 var $750=(($749+$nb_0)|0);
 var $751=$750;
 HEAP32[((13824)>>2)]=$751;
 var $752=$747|1;
 var $_sum=((($nb_0)+(4))|0);
 var $753=(($749+$_sum)|0);
 var $754=$753;
 HEAP32[(($754)>>2)]=$752;
 var $755=$nb_0|3;
 var $756=(($748+4)|0);
 HEAP32[(($756)>>2)]=$755;
 var $757=(($748+8)|0);
 var $758=$757;
 var $mem_0=$758;label=344;break;
 case 168: 
 var $760=HEAP32[((13728)>>2)];
 var $761=($760|0)==0;
 if($761){label=169;break;}else{label=172;break;}
 case 169: 
 var $763=_sysconf(30);
 var $764=((($763)-(1))|0);
 var $765=$764&$763;
 var $766=($765|0)==0;
 if($766){label=171;break;}else{label=170;break;}
 case 170: 
 _abort();
 throw "Reached an unreachable!";
 case 171: 
 HEAP32[((13736)>>2)]=$763;
 HEAP32[((13732)>>2)]=$763;
 HEAP32[((13740)>>2)]=-1;
 HEAP32[((13744)>>2)]=-1;
 HEAP32[((13748)>>2)]=0;
 HEAP32[((14244)>>2)]=0;
 var $768=_time(0);
 var $769=$768&-16;
 var $770=$769^1431655768;
 HEAP32[((13728)>>2)]=$770;
 label=172;break;
 case 172: 
 var $772=((($nb_0)+(48))|0);
 var $773=HEAP32[((13736)>>2)];
 var $774=((($nb_0)+(47))|0);
 var $775=((($773)+($774))|0);
 var $776=(((-$773))|0);
 var $777=$775&$776;
 var $778=($777>>>0)>($nb_0>>>0);
 if($778){label=173;break;}else{var $mem_0=0;label=344;break;}
 case 173: 
 var $780=HEAP32[((14240)>>2)];
 var $781=($780|0)==0;
 if($781){label=175;break;}else{label=174;break;}
 case 174: 
 var $783=HEAP32[((14232)>>2)];
 var $784=((($783)+($777))|0);
 var $785=($784>>>0)<=($783>>>0);
 var $786=($784>>>0)>($780>>>0);
 var $or_cond1_i=$785|$786;
 if($or_cond1_i){var $mem_0=0;label=344;break;}else{label=175;break;}
 case 175: 
 var $788=HEAP32[((14244)>>2)];
 var $789=$788&4;
 var $790=($789|0)==0;
 if($790){label=176;break;}else{var $tsize_1_i=0;label=199;break;}
 case 176: 
 var $792=HEAP32[((13824)>>2)];
 var $793=($792|0)==0;
 if($793){label=182;break;}else{label=177;break;}
 case 177: 
 var $795=$792;
 var $sp_0_i_i=14248;label=178;break;
 case 178: 
 var $sp_0_i_i;
 var $797=(($sp_0_i_i)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=($798>>>0)>($795>>>0);
 if($799){label=180;break;}else{label=179;break;}
 case 179: 
 var $801=(($sp_0_i_i+4)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=(($798+$802)|0);
 var $804=($803>>>0)>($795>>>0);
 if($804){label=181;break;}else{label=180;break;}
 case 180: 
 var $806=(($sp_0_i_i+8)|0);
 var $807=HEAP32[(($806)>>2)];
 var $808=($807|0)==0;
 if($808){label=182;break;}else{var $sp_0_i_i=$807;label=178;break;}
 case 181: 
 var $809=($sp_0_i_i|0)==0;
 if($809){label=182;break;}else{label=189;break;}
 case 182: 
 var $810=_sbrk(0);
 var $811=($810|0)==-1;
 if($811){var $tsize_0323841_i=0;label=198;break;}else{label=183;break;}
 case 183: 
 var $813=$810;
 var $814=HEAP32[((13732)>>2)];
 var $815=((($814)-(1))|0);
 var $816=$815&$813;
 var $817=($816|0)==0;
 if($817){var $ssize_0_i=$777;label=185;break;}else{label=184;break;}
 case 184: 
 var $819=((($815)+($813))|0);
 var $820=(((-$814))|0);
 var $821=$819&$820;
 var $822=((($777)-($813))|0);
 var $823=((($822)+($821))|0);
 var $ssize_0_i=$823;label=185;break;
 case 185: 
 var $ssize_0_i;
 var $825=HEAP32[((14232)>>2)];
 var $826=((($825)+($ssize_0_i))|0);
 var $827=($ssize_0_i>>>0)>($nb_0>>>0);
 var $828=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$827&$828;
 if($or_cond_i31){label=186;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 186: 
 var $830=HEAP32[((14240)>>2)];
 var $831=($830|0)==0;
 if($831){label=188;break;}else{label=187;break;}
 case 187: 
 var $833=($826>>>0)<=($825>>>0);
 var $834=($826>>>0)>($830>>>0);
 var $or_cond2_i=$833|$834;
 if($or_cond2_i){var $tsize_0323841_i=0;label=198;break;}else{label=188;break;}
 case 188: 
 var $836=_sbrk($ssize_0_i);
 var $837=($836|0)==($810|0);
 var $ssize_0__i=($837?$ssize_0_i:0);
 var $__i=($837?$810:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$836;var $ssize_1_i=$ssize_0_i;label=191;break;
 case 189: 
 var $839=HEAP32[((13812)>>2)];
 var $840=((($775)-($839))|0);
 var $841=$840&$776;
 var $842=($841>>>0)<2147483647;
 if($842){label=190;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 190: 
 var $844=_sbrk($841);
 var $845=HEAP32[(($797)>>2)];
 var $846=HEAP32[(($801)>>2)];
 var $847=(($845+$846)|0);
 var $848=($844|0)==($847|0);
 var $_3_i=($848?$841:0);
 var $_4_i=($848?$844:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$844;var $ssize_1_i=$841;label=191;break;
 case 191: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $850=(((-$ssize_1_i))|0);
 var $851=($tbase_0_i|0)==-1;
 if($851){label=192;break;}else{var $tsize_246_i=$tsize_0_i;var $tbase_247_i=$tbase_0_i;label=202;break;}
 case 192: 
 var $853=($br_0_i|0)!=-1;
 var $854=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$853&$854;
 var $855=($ssize_1_i>>>0)<($772>>>0);
 var $or_cond6_i=$or_cond5_i&$855;
 if($or_cond6_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 193: 
 var $857=HEAP32[((13736)>>2)];
 var $858=((($774)-($ssize_1_i))|0);
 var $859=((($858)+($857))|0);
 var $860=(((-$857))|0);
 var $861=$859&$860;
 var $862=($861>>>0)<2147483647;
 if($862){label=194;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 194: 
 var $864=_sbrk($861);
 var $865=($864|0)==-1;
 if($865){label=196;break;}else{label=195;break;}
 case 195: 
 var $867=((($861)+($ssize_1_i))|0);
 var $ssize_2_i=$867;label=197;break;
 case 196: 
 var $869=_sbrk($850);
 var $tsize_0323841_i=$tsize_0_i;label=198;break;
 case 197: 
 var $ssize_2_i;
 var $871=($br_0_i|0)==-1;
 if($871){var $tsize_0323841_i=$tsize_0_i;label=198;break;}else{var $tsize_246_i=$ssize_2_i;var $tbase_247_i=$br_0_i;label=202;break;}
 case 198: 
 var $tsize_0323841_i;
 var $872=HEAP32[((14244)>>2)];
 var $873=$872|4;
 HEAP32[((14244)>>2)]=$873;
 var $tsize_1_i=$tsize_0323841_i;label=199;break;
 case 199: 
 var $tsize_1_i;
 var $875=($777>>>0)<2147483647;
 if($875){label=200;break;}else{label=343;break;}
 case 200: 
 var $877=_sbrk($777);
 var $878=_sbrk(0);
 var $notlhs_i=($877|0)!=-1;
 var $notrhs_i=($878|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $879=($877>>>0)<($878>>>0);
 var $or_cond9_i=$or_cond8_not_i&$879;
 if($or_cond9_i){label=201;break;}else{label=343;break;}
 case 201: 
 var $880=$878;
 var $881=$877;
 var $882=((($880)-($881))|0);
 var $883=((($nb_0)+(40))|0);
 var $884=($882>>>0)>($883>>>0);
 var $_tsize_1_i=($884?$882:$tsize_1_i);
 if($884){var $tsize_246_i=$_tsize_1_i;var $tbase_247_i=$877;label=202;break;}else{label=343;break;}
 case 202: 
 var $tbase_247_i;
 var $tsize_246_i;
 var $885=HEAP32[((14232)>>2)];
 var $886=((($885)+($tsize_246_i))|0);
 HEAP32[((14232)>>2)]=$886;
 var $887=HEAP32[((14236)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=203;break;}else{label=204;break;}
 case 203: 
 HEAP32[((14236)>>2)]=$886;
 label=204;break;
 case 204: 
 var $890=HEAP32[((13824)>>2)];
 var $891=($890|0)==0;
 if($891){label=205;break;}else{var $sp_075_i=14248;label=212;break;}
 case 205: 
 var $893=HEAP32[((13816)>>2)];
 var $894=($893|0)==0;
 var $895=($tbase_247_i>>>0)<($893>>>0);
 var $or_cond10_i=$894|$895;
 if($or_cond10_i){label=206;break;}else{label=207;break;}
 case 206: 
 HEAP32[((13816)>>2)]=$tbase_247_i;
 label=207;break;
 case 207: 
 HEAP32[((14248)>>2)]=$tbase_247_i;
 HEAP32[((14252)>>2)]=$tsize_246_i;
 HEAP32[((14260)>>2)]=0;
 var $897=HEAP32[((13728)>>2)];
 HEAP32[((13836)>>2)]=$897;
 HEAP32[((13832)>>2)]=-1;
 var $i_02_i_i=0;label=208;break;
 case 208: 
 var $i_02_i_i;
 var $899=$i_02_i_i<<1;
 var $900=((13840+($899<<2))|0);
 var $901=$900;
 var $_sum_i_i=((($899)+(3))|0);
 var $902=((13840+($_sum_i_i<<2))|0);
 HEAP32[(($902)>>2)]=$901;
 var $_sum1_i_i=((($899)+(2))|0);
 var $903=((13840+($_sum1_i_i<<2))|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=((($i_02_i_i)+(1))|0);
 var $905=($904>>>0)<32;
 if($905){var $i_02_i_i=$904;label=208;break;}else{label=209;break;}
 case 209: 
 var $906=((($tsize_246_i)-(40))|0);
 var $907=(($tbase_247_i+8)|0);
 var $908=$907;
 var $909=$908&7;
 var $910=($909|0)==0;
 if($910){var $914=0;label=211;break;}else{label=210;break;}
 case 210: 
 var $912=(((-$908))|0);
 var $913=$912&7;
 var $914=$913;label=211;break;
 case 211: 
 var $914;
 var $915=(($tbase_247_i+$914)|0);
 var $916=$915;
 var $917=((($906)-($914))|0);
 HEAP32[((13824)>>2)]=$916;
 HEAP32[((13812)>>2)]=$917;
 var $918=$917|1;
 var $_sum_i14_i=((($914)+(4))|0);
 var $919=(($tbase_247_i+$_sum_i14_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=$918;
 var $_sum2_i_i=((($tsize_246_i)-(36))|0);
 var $921=(($tbase_247_i+$_sum2_i_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=40;
 var $923=HEAP32[((13744)>>2)];
 HEAP32[((13828)>>2)]=$923;
 label=341;break;
 case 212: 
 var $sp_075_i;
 var $924=(($sp_075_i)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($sp_075_i+4)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($925+$927)|0);
 var $929=($tbase_247_i|0)==($928|0);
 if($929){label=214;break;}else{label=213;break;}
 case 213: 
 var $931=(($sp_075_i+8)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($932|0)==0;
 if($933){label=219;break;}else{var $sp_075_i=$932;label=212;break;}
 case 214: 
 var $934=(($sp_075_i+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=$935&8;
 var $937=($936|0)==0;
 if($937){label=215;break;}else{label=219;break;}
 case 215: 
 var $939=$890;
 var $940=($939>>>0)>=($925>>>0);
 var $941=($939>>>0)<($tbase_247_i>>>0);
 var $or_cond49_i=$940&$941;
 if($or_cond49_i){label=216;break;}else{label=219;break;}
 case 216: 
 var $943=((($927)+($tsize_246_i))|0);
 HEAP32[(($926)>>2)]=$943;
 var $944=HEAP32[((13824)>>2)];
 var $945=HEAP32[((13812)>>2)];
 var $946=((($945)+($tsize_246_i))|0);
 var $947=$944;
 var $948=(($944+8)|0);
 var $949=$948;
 var $950=$949&7;
 var $951=($950|0)==0;
 if($951){var $955=0;label=218;break;}else{label=217;break;}
 case 217: 
 var $953=(((-$949))|0);
 var $954=$953&7;
 var $955=$954;label=218;break;
 case 218: 
 var $955;
 var $956=(($947+$955)|0);
 var $957=$956;
 var $958=((($946)-($955))|0);
 HEAP32[((13824)>>2)]=$957;
 HEAP32[((13812)>>2)]=$958;
 var $959=$958|1;
 var $_sum_i18_i=((($955)+(4))|0);
 var $960=(($947+$_sum_i18_i)|0);
 var $961=$960;
 HEAP32[(($961)>>2)]=$959;
 var $_sum2_i19_i=((($946)+(4))|0);
 var $962=(($947+$_sum2_i19_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=40;
 var $964=HEAP32[((13744)>>2)];
 HEAP32[((13828)>>2)]=$964;
 label=341;break;
 case 219: 
 var $965=HEAP32[((13816)>>2)];
 var $966=($tbase_247_i>>>0)<($965>>>0);
 if($966){label=220;break;}else{label=221;break;}
 case 220: 
 HEAP32[((13816)>>2)]=$tbase_247_i;
 label=221;break;
 case 221: 
 var $968=(($tbase_247_i+$tsize_246_i)|0);
 var $sp_168_i=14248;label=222;break;
 case 222: 
 var $sp_168_i;
 var $970=(($sp_168_i)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==($968|0);
 if($972){label=224;break;}else{label=223;break;}
 case 223: 
 var $974=(($sp_168_i+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){label=306;break;}else{var $sp_168_i=$975;label=222;break;}
 case 224: 
 var $977=(($sp_168_i+12)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978&8;
 var $980=($979|0)==0;
 if($980){label=225;break;}else{label=306;break;}
 case 225: 
 HEAP32[(($970)>>2)]=$tbase_247_i;
 var $982=(($sp_168_i+4)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=((($983)+($tsize_246_i))|0);
 HEAP32[(($982)>>2)]=$984;
 var $985=(($tbase_247_i+8)|0);
 var $986=$985;
 var $987=$986&7;
 var $988=($987|0)==0;
 if($988){var $993=0;label=227;break;}else{label=226;break;}
 case 226: 
 var $990=(((-$986))|0);
 var $991=$990&7;
 var $993=$991;label=227;break;
 case 227: 
 var $993;
 var $994=(($tbase_247_i+$993)|0);
 var $_sum107_i=((($tsize_246_i)+(8))|0);
 var $995=(($tbase_247_i+$_sum107_i)|0);
 var $996=$995;
 var $997=$996&7;
 var $998=($997|0)==0;
 if($998){var $1003=0;label=229;break;}else{label=228;break;}
 case 228: 
 var $1000=(((-$996))|0);
 var $1001=$1000&7;
 var $1003=$1001;label=229;break;
 case 229: 
 var $1003;
 var $_sum108_i=((($1003)+($tsize_246_i))|0);
 var $1004=(($tbase_247_i+$_sum108_i)|0);
 var $1005=$1004;
 var $1006=$1004;
 var $1007=$994;
 var $1008=((($1006)-($1007))|0);
 var $_sum_i21_i=((($993)+($nb_0))|0);
 var $1009=(($tbase_247_i+$_sum_i21_i)|0);
 var $1010=$1009;
 var $1011=((($1008)-($nb_0))|0);
 var $1012=$nb_0|3;
 var $_sum1_i22_i=((($993)+(4))|0);
 var $1013=(($tbase_247_i+$_sum1_i22_i)|0);
 var $1014=$1013;
 HEAP32[(($1014)>>2)]=$1012;
 var $1015=HEAP32[((13824)>>2)];
 var $1016=($1005|0)==($1015|0);
 if($1016){label=230;break;}else{label=231;break;}
 case 230: 
 var $1018=HEAP32[((13812)>>2)];
 var $1019=((($1018)+($1011))|0);
 HEAP32[((13812)>>2)]=$1019;
 HEAP32[((13824)>>2)]=$1010;
 var $1020=$1019|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1021=(($tbase_247_i+$_sum46_i_i)|0);
 var $1022=$1021;
 HEAP32[(($1022)>>2)]=$1020;
 label=305;break;
 case 231: 
 var $1024=HEAP32[((13820)>>2)];
 var $1025=($1005|0)==($1024|0);
 if($1025){label=232;break;}else{label=233;break;}
 case 232: 
 var $1027=HEAP32[((13808)>>2)];
 var $1028=((($1027)+($1011))|0);
 HEAP32[((13808)>>2)]=$1028;
 HEAP32[((13820)>>2)]=$1010;
 var $1029=$1028|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1030=(($tbase_247_i+$_sum44_i_i)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1029;
 var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
 var $1032=(($tbase_247_i+$_sum45_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1028;
 label=305;break;
 case 233: 
 var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
 var $_sum109_i=((($_sum2_i23_i)+($1003))|0);
 var $1035=(($tbase_247_i+$_sum109_i)|0);
 var $1036=$1035;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=$1037&3;
 var $1039=($1038|0)==1;
 if($1039){label=234;break;}else{var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;label=281;break;}
 case 234: 
 var $1041=$1037&-8;
 var $1042=$1037>>>3;
 var $1043=($1037>>>0)<256;
 if($1043){label=235;break;}else{label=247;break;}
 case 235: 
 var $_sum3940_i_i=$1003|8;
 var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
 var $1045=(($tbase_247_i+$_sum119_i)|0);
 var $1046=$1045;
 var $1047=HEAP32[(($1046)>>2)];
 var $_sum41_i_i=((($tsize_246_i)+(12))|0);
 var $_sum120_i=((($_sum41_i_i)+($1003))|0);
 var $1048=(($tbase_247_i+$_sum120_i)|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=$1042<<1;
 var $1052=((13840+($1051<<2))|0);
 var $1053=$1052;
 var $1054=($1047|0)==($1053|0);
 if($1054){label=238;break;}else{label=236;break;}
 case 236: 
 var $1056=$1047;
 var $1057=HEAP32[((13816)>>2)];
 var $1058=($1056>>>0)<($1057>>>0);
 if($1058){label=246;break;}else{label=237;break;}
 case 237: 
 var $1060=(($1047+12)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1061|0)==($1005|0);
 if($1062){label=238;break;}else{label=246;break;}
 case 238: 
 var $1063=($1050|0)==($1047|0);
 if($1063){label=239;break;}else{label=240;break;}
 case 239: 
 var $1065=1<<$1042;
 var $1066=$1065^-1;
 var $1067=HEAP32[((13800)>>2)];
 var $1068=$1067&$1066;
 HEAP32[((13800)>>2)]=$1068;
 label=280;break;
 case 240: 
 var $1070=($1050|0)==($1053|0);
 if($1070){label=241;break;}else{label=242;break;}
 case 241: 
 var $_pre61_i_i=(($1050+8)|0);
 var $_pre_phi62_i_i=$_pre61_i_i;label=244;break;
 case 242: 
 var $1072=$1050;
 var $1073=HEAP32[((13816)>>2)];
 var $1074=($1072>>>0)<($1073>>>0);
 if($1074){label=245;break;}else{label=243;break;}
 case 243: 
 var $1076=(($1050+8)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=($1077|0)==($1005|0);
 if($1078){var $_pre_phi62_i_i=$1076;label=244;break;}else{label=245;break;}
 case 244: 
 var $_pre_phi62_i_i;
 var $1079=(($1047+12)|0);
 HEAP32[(($1079)>>2)]=$1050;
 HEAP32[(($_pre_phi62_i_i)>>2)]=$1047;
 label=280;break;
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 _abort();
 throw "Reached an unreachable!";
 case 247: 
 var $1081=$1004;
 var $_sum34_i_i=$1003|24;
 var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
 var $1082=(($tbase_247_i+$_sum110_i)|0);
 var $1083=$1082;
 var $1084=HEAP32[(($1083)>>2)];
 var $_sum5_i_i=((($tsize_246_i)+(12))|0);
 var $_sum111_i=((($_sum5_i_i)+($1003))|0);
 var $1085=(($tbase_247_i+$_sum111_i)|0);
 var $1086=$1085;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=($1087|0)==($1081|0);
 if($1088){label=253;break;}else{label=248;break;}
 case 248: 
 var $_sum3637_i_i=$1003|8;
 var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
 var $1090=(($tbase_247_i+$_sum112_i)|0);
 var $1091=$1090;
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=$1092;
 var $1094=HEAP32[((13816)>>2)];
 var $1095=($1093>>>0)<($1094>>>0);
 if($1095){label=252;break;}else{label=249;break;}
 case 249: 
 var $1097=(($1092+12)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1081|0);
 if($1099){label=250;break;}else{label=252;break;}
 case 250: 
 var $1101=(($1087+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==($1081|0);
 if($1103){label=251;break;}else{label=252;break;}
 case 251: 
 HEAP32[(($1097)>>2)]=$1087;
 HEAP32[(($1101)>>2)]=$1092;
 var $R_1_i_i=$1087;label=260;break;
 case 252: 
 _abort();
 throw "Reached an unreachable!";
 case 253: 
 var $_sum67_i_i=$1003|16;
 var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1106=(($tbase_247_i+$_sum117_i)|0);
 var $1107=$1106;
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=($1108|0)==0;
 if($1109){label=254;break;}else{var $R_0_i_i=$1108;var $RP_0_i_i=$1107;label=255;break;}
 case 254: 
 var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
 var $1111=(($tbase_247_i+$_sum118_i)|0);
 var $1112=$1111;
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){var $R_1_i_i=0;label=260;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=255;break;}
 case 255: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1115=(($R_0_i_i+20)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=256;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=255;break;}
 case 256: 
 var $1119=(($R_0_i_i+16)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=($1120|0)==0;
 if($1121){label=257;break;}else{var $R_0_i_i=$1120;var $RP_0_i_i=$1119;label=255;break;}
 case 257: 
 var $1123=$RP_0_i_i;
 var $1124=HEAP32[((13816)>>2)];
 var $1125=($1123>>>0)<($1124>>>0);
 if($1125){label=259;break;}else{label=258;break;}
 case 258: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=260;break;
 case 259: 
 _abort();
 throw "Reached an unreachable!";
 case 260: 
 var $R_1_i_i;
 var $1129=($1084|0)==0;
 if($1129){label=280;break;}else{label=261;break;}
 case 261: 
 var $_sum31_i_i=((($tsize_246_i)+(28))|0);
 var $_sum113_i=((($_sum31_i_i)+($1003))|0);
 var $1131=(($tbase_247_i+$_sum113_i)|0);
 var $1132=$1131;
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=((14104+($1133<<2))|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1081|0)==($1135|0);
 if($1136){label=262;break;}else{label=264;break;}
 case 262: 
 HEAP32[(($1134)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=263;break;}else{label=270;break;}
 case 263: 
 var $1138=HEAP32[(($1132)>>2)];
 var $1139=1<<$1138;
 var $1140=$1139^-1;
 var $1141=HEAP32[((13804)>>2)];
 var $1142=$1141&$1140;
 HEAP32[((13804)>>2)]=$1142;
 label=280;break;
 case 264: 
 var $1144=$1084;
 var $1145=HEAP32[((13816)>>2)];
 var $1146=($1144>>>0)<($1145>>>0);
 if($1146){label=268;break;}else{label=265;break;}
 case 265: 
 var $1148=(($1084+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1149|0)==($1081|0);
 if($1150){label=266;break;}else{label=267;break;}
 case 266: 
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=269;break;
 case 267: 
 var $1153=(($1084+20)|0);
 HEAP32[(($1153)>>2)]=$R_1_i_i;
 label=269;break;
 case 268: 
 _abort();
 throw "Reached an unreachable!";
 case 269: 
 var $1156=($R_1_i_i|0)==0;
 if($1156){label=280;break;}else{label=270;break;}
 case 270: 
 var $1158=$R_1_i_i;
 var $1159=HEAP32[((13816)>>2)];
 var $1160=($1158>>>0)<($1159>>>0);
 if($1160){label=279;break;}else{label=271;break;}
 case 271: 
 var $1162=(($R_1_i_i+24)|0);
 HEAP32[(($1162)>>2)]=$1084;
 var $_sum3233_i_i=$1003|16;
 var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
 var $1163=(($tbase_247_i+$_sum114_i)|0);
 var $1164=$1163;
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=($1165|0)==0;
 if($1166){label=275;break;}else{label=272;break;}
 case 272: 
 var $1168=$1165;
 var $1169=HEAP32[((13816)>>2)];
 var $1170=($1168>>>0)<($1169>>>0);
 if($1170){label=274;break;}else{label=273;break;}
 case 273: 
 var $1172=(($R_1_i_i+16)|0);
 HEAP32[(($1172)>>2)]=$1165;
 var $1173=(($1165+24)|0);
 HEAP32[(($1173)>>2)]=$R_1_i_i;
 label=275;break;
 case 274: 
 _abort();
 throw "Reached an unreachable!";
 case 275: 
 var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1176=(($tbase_247_i+$_sum115_i)|0);
 var $1177=$1176;
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=($1178|0)==0;
 if($1179){label=280;break;}else{label=276;break;}
 case 276: 
 var $1181=$1178;
 var $1182=HEAP32[((13816)>>2)];
 var $1183=($1181>>>0)<($1182>>>0);
 if($1183){label=278;break;}else{label=277;break;}
 case 277: 
 var $1185=(($R_1_i_i+20)|0);
 HEAP32[(($1185)>>2)]=$1178;
 var $1186=(($1178+24)|0);
 HEAP32[(($1186)>>2)]=$R_1_i_i;
 label=280;break;
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 _abort();
 throw "Reached an unreachable!";
 case 280: 
 var $_sum9_i_i=$1041|$1003;
 var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
 var $1190=(($tbase_247_i+$_sum116_i)|0);
 var $1191=$1190;
 var $1192=((($1041)+($1011))|0);
 var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;label=281;break;
 case 281: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1194=(($oldfirst_0_i_i+4)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=$1195&-2;
 HEAP32[(($1194)>>2)]=$1196;
 var $1197=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1198=(($tbase_247_i+$_sum10_i_i)|0);
 var $1199=$1198;
 HEAP32[(($1199)>>2)]=$1197;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1200=(($tbase_247_i+$_sum11_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$qsize_0_i_i;
 var $1202=$qsize_0_i_i>>>3;
 var $1203=($qsize_0_i_i>>>0)<256;
 if($1203){label=282;break;}else{label=287;break;}
 case 282: 
 var $1205=$1202<<1;
 var $1206=((13840+($1205<<2))|0);
 var $1207=$1206;
 var $1208=HEAP32[((13800)>>2)];
 var $1209=1<<$1202;
 var $1210=$1208&$1209;
 var $1211=($1210|0)==0;
 if($1211){label=283;break;}else{label=284;break;}
 case 283: 
 var $1213=$1208|$1209;
 HEAP32[((13800)>>2)]=$1213;
 var $_sum27_pre_i_i=((($1205)+(2))|0);
 var $_pre_i24_i=((13840+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;label=286;break;
 case 284: 
 var $_sum30_i_i=((($1205)+(2))|0);
 var $1215=((13840+($_sum30_i_i<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=$1216;
 var $1218=HEAP32[((13816)>>2)];
 var $1219=($1217>>>0)<($1218>>>0);
 if($1219){label=285;break;}else{var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;label=286;break;}
 case 285: 
 _abort();
 throw "Reached an unreachable!";
 case 286: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
 var $1222=(($F4_0_i_i+12)|0);
 HEAP32[(($1222)>>2)]=$1010;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1223=(($tbase_247_i+$_sum28_i_i)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1225=(($tbase_247_i+$_sum29_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$1207;
 label=305;break;
 case 287: 
 var $1228=$1009;
 var $1229=$qsize_0_i_i>>>8;
 var $1230=($1229|0)==0;
 if($1230){var $I7_0_i_i=0;label=290;break;}else{label=288;break;}
 case 288: 
 var $1232=($qsize_0_i_i>>>0)>16777215;
 if($1232){var $I7_0_i_i=31;label=290;break;}else{label=289;break;}
 case 289: 
 var $1234=((($1229)+(1048320))|0);
 var $1235=$1234>>>16;
 var $1236=$1235&8;
 var $1237=$1229<<$1236;
 var $1238=((($1237)+(520192))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&4;
 var $1241=$1240|$1236;
 var $1242=$1237<<$1240;
 var $1243=((($1242)+(245760))|0);
 var $1244=$1243>>>16;
 var $1245=$1244&2;
 var $1246=$1241|$1245;
 var $1247=(((14)-($1246))|0);
 var $1248=$1242<<$1245;
 var $1249=$1248>>>15;
 var $1250=((($1247)+($1249))|0);
 var $1251=$1250<<1;
 var $1252=((($1250)+(7))|0);
 var $1253=$qsize_0_i_i>>>($1252>>>0);
 var $1254=$1253&1;
 var $1255=$1254|$1251;
 var $I7_0_i_i=$1255;label=290;break;
 case 290: 
 var $I7_0_i_i;
 var $1257=((14104+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1258=(($tbase_247_i+$_sum12_i26_i)|0);
 var $1259=$1258;
 HEAP32[(($1259)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1260=(($tbase_247_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1261=(($tbase_247_i+$_sum14_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=0;
 var $1263=$1260;
 HEAP32[(($1263)>>2)]=0;
 var $1264=HEAP32[((13804)>>2)];
 var $1265=1<<$I7_0_i_i;
 var $1266=$1264&$1265;
 var $1267=($1266|0)==0;
 if($1267){label=291;break;}else{label=292;break;}
 case 291: 
 var $1269=$1264|$1265;
 HEAP32[((13804)>>2)]=$1269;
 HEAP32[(($1257)>>2)]=$1228;
 var $1270=$1257;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1271=(($tbase_247_i+$_sum15_i_i)|0);
 var $1272=$1271;
 HEAP32[(($1272)>>2)]=$1270;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1273=(($tbase_247_i+$_sum16_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1228;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1275=(($tbase_247_i+$_sum17_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1228;
 label=305;break;
 case 292: 
 var $1278=HEAP32[(($1257)>>2)];
 var $1279=($I7_0_i_i|0)==31;
 if($1279){var $1284=0;label=294;break;}else{label=293;break;}
 case 293: 
 var $1281=$I7_0_i_i>>>1;
 var $1282=(((25)-($1281))|0);
 var $1284=$1282;label=294;break;
 case 294: 
 var $1284;
 var $1285=(($1278+4)|0);
 var $1286=HEAP32[(($1285)>>2)];
 var $1287=$1286&-8;
 var $1288=($1287|0)==($qsize_0_i_i|0);
 if($1288){var $T_0_lcssa_i28_i=$1278;label=301;break;}else{label=295;break;}
 case 295: 
 var $1289=$qsize_0_i_i<<$1284;
 var $T_055_i_i=$1278;var $K8_056_i_i=$1289;label=297;break;
 case 296: 
 var $1291=$K8_056_i_i<<1;
 var $1292=(($1299+4)|0);
 var $1293=HEAP32[(($1292)>>2)];
 var $1294=$1293&-8;
 var $1295=($1294|0)==($qsize_0_i_i|0);
 if($1295){var $T_0_lcssa_i28_i=$1299;label=301;break;}else{var $T_055_i_i=$1299;var $K8_056_i_i=$1291;label=297;break;}
 case 297: 
 var $K8_056_i_i;
 var $T_055_i_i;
 var $1297=$K8_056_i_i>>>31;
 var $1298=(($T_055_i_i+16+($1297<<2))|0);
 var $1299=HEAP32[(($1298)>>2)];
 var $1300=($1299|0)==0;
 if($1300){label=298;break;}else{label=296;break;}
 case 298: 
 var $1302=$1298;
 var $1303=HEAP32[((13816)>>2)];
 var $1304=($1302>>>0)<($1303>>>0);
 if($1304){label=300;break;}else{label=299;break;}
 case 299: 
 HEAP32[(($1298)>>2)]=$1228;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1306=(($tbase_247_i+$_sum24_i_i)|0);
 var $1307=$1306;
 HEAP32[(($1307)>>2)]=$T_055_i_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1308=(($tbase_247_i+$_sum25_i_i)|0);
 var $1309=$1308;
 HEAP32[(($1309)>>2)]=$1228;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1310=(($tbase_247_i+$_sum26_i_i)|0);
 var $1311=$1310;
 HEAP32[(($1311)>>2)]=$1228;
 label=305;break;
 case 300: 
 _abort();
 throw "Reached an unreachable!";
 case 301: 
 var $T_0_lcssa_i28_i;
 var $1313=(($T_0_lcssa_i28_i+8)|0);
 var $1314=HEAP32[(($1313)>>2)];
 var $1315=$T_0_lcssa_i28_i;
 var $1316=HEAP32[((13816)>>2)];
 var $1317=($1315>>>0)<($1316>>>0);
 if($1317){label=304;break;}else{label=302;break;}
 case 302: 
 var $1319=$1314;
 var $1320=($1319>>>0)<($1316>>>0);
 if($1320){label=304;break;}else{label=303;break;}
 case 303: 
 var $1322=(($1314+12)|0);
 HEAP32[(($1322)>>2)]=$1228;
 HEAP32[(($1313)>>2)]=$1228;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1323=(($tbase_247_i+$_sum21_i_i)|0);
 var $1324=$1323;
 HEAP32[(($1324)>>2)]=$1314;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1325=(($tbase_247_i+$_sum22_i_i)|0);
 var $1326=$1325;
 HEAP32[(($1326)>>2)]=$T_0_lcssa_i28_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1327=(($tbase_247_i+$_sum23_i_i)|0);
 var $1328=$1327;
 HEAP32[(($1328)>>2)]=0;
 label=305;break;
 case 304: 
 _abort();
 throw "Reached an unreachable!";
 case 305: 
 var $_sum1819_i_i=$993|8;
 var $1329=(($tbase_247_i+$_sum1819_i_i)|0);
 var $mem_0=$1329;label=344;break;
 case 306: 
 var $1330=$890;
 var $sp_0_i_i_i=14248;label=307;break;
 case 307: 
 var $sp_0_i_i_i;
 var $1332=(($sp_0_i_i_i)|0);
 var $1333=HEAP32[(($1332)>>2)];
 var $1334=($1333>>>0)>($1330>>>0);
 if($1334){label=309;break;}else{label=308;break;}
 case 308: 
 var $1336=(($sp_0_i_i_i+4)|0);
 var $1337=HEAP32[(($1336)>>2)];
 var $1338=(($1333+$1337)|0);
 var $1339=($1338>>>0)>($1330>>>0);
 if($1339){label=310;break;}else{label=309;break;}
 case 309: 
 var $1341=(($sp_0_i_i_i+8)|0);
 var $1342=HEAP32[(($1341)>>2)];
 var $sp_0_i_i_i=$1342;label=307;break;
 case 310: 
 var $_sum_i15_i=((($1337)-(47))|0);
 var $_sum1_i16_i=((($1337)-(39))|0);
 var $1343=(($1333+$_sum1_i16_i)|0);
 var $1344=$1343;
 var $1345=$1344&7;
 var $1346=($1345|0)==0;
 if($1346){var $1351=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1348=(((-$1344))|0);
 var $1349=$1348&7;
 var $1351=$1349;label=312;break;
 case 312: 
 var $1351;
 var $_sum2_i17_i=((($_sum_i15_i)+($1351))|0);
 var $1352=(($1333+$_sum2_i17_i)|0);
 var $1353=(($890+16)|0);
 var $1354=$1353;
 var $1355=($1352>>>0)<($1354>>>0);
 var $1356=($1355?$1330:$1352);
 var $1357=(($1356+8)|0);
 var $1358=$1357;
 var $1359=((($tsize_246_i)-(40))|0);
 var $1360=(($tbase_247_i+8)|0);
 var $1361=$1360;
 var $1362=$1361&7;
 var $1363=($1362|0)==0;
 if($1363){var $1367=0;label=314;break;}else{label=313;break;}
 case 313: 
 var $1365=(((-$1361))|0);
 var $1366=$1365&7;
 var $1367=$1366;label=314;break;
 case 314: 
 var $1367;
 var $1368=(($tbase_247_i+$1367)|0);
 var $1369=$1368;
 var $1370=((($1359)-($1367))|0);
 HEAP32[((13824)>>2)]=$1369;
 HEAP32[((13812)>>2)]=$1370;
 var $1371=$1370|1;
 var $_sum_i_i_i=((($1367)+(4))|0);
 var $1372=(($tbase_247_i+$_sum_i_i_i)|0);
 var $1373=$1372;
 HEAP32[(($1373)>>2)]=$1371;
 var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
 var $1374=(($tbase_247_i+$_sum2_i_i_i)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=40;
 var $1376=HEAP32[((13744)>>2)];
 HEAP32[((13828)>>2)]=$1376;
 var $1377=(($1356+4)|0);
 var $1378=$1377;
 HEAP32[(($1378)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1357)>>2)]=HEAP32[((14248)>>2)];HEAP32[((($1357)+(4))>>2)]=HEAP32[((14252)>>2)];HEAP32[((($1357)+(8))>>2)]=HEAP32[((14256)>>2)];HEAP32[((($1357)+(12))>>2)]=HEAP32[((14260)>>2)];
 HEAP32[((14248)>>2)]=$tbase_247_i;
 HEAP32[((14252)>>2)]=$tsize_246_i;
 HEAP32[((14260)>>2)]=0;
 HEAP32[((14256)>>2)]=$1358;
 var $1379=(($1356+28)|0);
 var $1380=$1379;
 HEAP32[(($1380)>>2)]=7;
 var $1381=(($1356+32)|0);
 var $1382=($1381>>>0)<($1338>>>0);
 if($1382){var $1383=$1380;label=315;break;}else{label=316;break;}
 case 315: 
 var $1383;
 var $1384=(($1383+4)|0);
 HEAP32[(($1384)>>2)]=7;
 var $1385=(($1383+8)|0);
 var $1386=$1385;
 var $1387=($1386>>>0)<($1338>>>0);
 if($1387){var $1383=$1384;label=315;break;}else{label=316;break;}
 case 316: 
 var $1388=($1356|0)==($1330|0);
 if($1388){label=341;break;}else{label=317;break;}
 case 317: 
 var $1390=$1356;
 var $1391=$890;
 var $1392=((($1390)-($1391))|0);
 var $1393=(($1330+$1392)|0);
 var $_sum3_i_i=((($1392)+(4))|0);
 var $1394=(($1330+$_sum3_i_i)|0);
 var $1395=$1394;
 var $1396=HEAP32[(($1395)>>2)];
 var $1397=$1396&-2;
 HEAP32[(($1395)>>2)]=$1397;
 var $1398=$1392|1;
 var $1399=(($890+4)|0);
 HEAP32[(($1399)>>2)]=$1398;
 var $1400=$1393;
 HEAP32[(($1400)>>2)]=$1392;
 var $1401=$1392>>>3;
 var $1402=($1392>>>0)<256;
 if($1402){label=318;break;}else{label=323;break;}
 case 318: 
 var $1404=$1401<<1;
 var $1405=((13840+($1404<<2))|0);
 var $1406=$1405;
 var $1407=HEAP32[((13800)>>2)];
 var $1408=1<<$1401;
 var $1409=$1407&$1408;
 var $1410=($1409|0)==0;
 if($1410){label=319;break;}else{label=320;break;}
 case 319: 
 var $1412=$1407|$1408;
 HEAP32[((13800)>>2)]=$1412;
 var $_sum11_pre_i_i=((($1404)+(2))|0);
 var $_pre_i_i=((13840+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1406;var $_pre_phi_i_i=$_pre_i_i;label=322;break;
 case 320: 
 var $_sum12_i_i=((($1404)+(2))|0);
 var $1414=((13840+($_sum12_i_i<<2))|0);
 var $1415=HEAP32[(($1414)>>2)];
 var $1416=$1415;
 var $1417=HEAP32[((13816)>>2)];
 var $1418=($1416>>>0)<($1417>>>0);
 if($1418){label=321;break;}else{var $F_0_i_i=$1415;var $_pre_phi_i_i=$1414;label=322;break;}
 case 321: 
 _abort();
 throw "Reached an unreachable!";
 case 322: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$890;
 var $1421=(($F_0_i_i+12)|0);
 HEAP32[(($1421)>>2)]=$890;
 var $1422=(($890+8)|0);
 HEAP32[(($1422)>>2)]=$F_0_i_i;
 var $1423=(($890+12)|0);
 HEAP32[(($1423)>>2)]=$1406;
 label=341;break;
 case 323: 
 var $1425=$890;
 var $1426=$1392>>>8;
 var $1427=($1426|0)==0;
 if($1427){var $I1_0_i_i=0;label=326;break;}else{label=324;break;}
 case 324: 
 var $1429=($1392>>>0)>16777215;
 if($1429){var $I1_0_i_i=31;label=326;break;}else{label=325;break;}
 case 325: 
 var $1431=((($1426)+(1048320))|0);
 var $1432=$1431>>>16;
 var $1433=$1432&8;
 var $1434=$1426<<$1433;
 var $1435=((($1434)+(520192))|0);
 var $1436=$1435>>>16;
 var $1437=$1436&4;
 var $1438=$1437|$1433;
 var $1439=$1434<<$1437;
 var $1440=((($1439)+(245760))|0);
 var $1441=$1440>>>16;
 var $1442=$1441&2;
 var $1443=$1438|$1442;
 var $1444=(((14)-($1443))|0);
 var $1445=$1439<<$1442;
 var $1446=$1445>>>15;
 var $1447=((($1444)+($1446))|0);
 var $1448=$1447<<1;
 var $1449=((($1447)+(7))|0);
 var $1450=$1392>>>($1449>>>0);
 var $1451=$1450&1;
 var $1452=$1451|$1448;
 var $I1_0_i_i=$1452;label=326;break;
 case 326: 
 var $I1_0_i_i;
 var $1454=((14104+($I1_0_i_i<<2))|0);
 var $1455=(($890+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1455)>>2)]=$I1_0_c_i_i;
 var $1456=(($890+20)|0);
 HEAP32[(($1456)>>2)]=0;
 var $1457=(($890+16)|0);
 HEAP32[(($1457)>>2)]=0;
 var $1458=HEAP32[((13804)>>2)];
 var $1459=1<<$I1_0_i_i;
 var $1460=$1458&$1459;
 var $1461=($1460|0)==0;
 if($1461){label=327;break;}else{label=328;break;}
 case 327: 
 var $1463=$1458|$1459;
 HEAP32[((13804)>>2)]=$1463;
 HEAP32[(($1454)>>2)]=$1425;
 var $1464=(($890+24)|0);
 var $_c_i_i=$1454;
 HEAP32[(($1464)>>2)]=$_c_i_i;
 var $1465=(($890+12)|0);
 HEAP32[(($1465)>>2)]=$890;
 var $1466=(($890+8)|0);
 HEAP32[(($1466)>>2)]=$890;
 label=341;break;
 case 328: 
 var $1468=HEAP32[(($1454)>>2)];
 var $1469=($I1_0_i_i|0)==31;
 if($1469){var $1474=0;label=330;break;}else{label=329;break;}
 case 329: 
 var $1471=$I1_0_i_i>>>1;
 var $1472=(((25)-($1471))|0);
 var $1474=$1472;label=330;break;
 case 330: 
 var $1474;
 var $1475=(($1468+4)|0);
 var $1476=HEAP32[(($1475)>>2)];
 var $1477=$1476&-8;
 var $1478=($1477|0)==($1392|0);
 if($1478){var $T_0_lcssa_i_i=$1468;label=337;break;}else{label=331;break;}
 case 331: 
 var $1479=$1392<<$1474;
 var $T_014_i_i=$1468;var $K2_015_i_i=$1479;label=333;break;
 case 332: 
 var $1481=$K2_015_i_i<<1;
 var $1482=(($1489+4)|0);
 var $1483=HEAP32[(($1482)>>2)];
 var $1484=$1483&-8;
 var $1485=($1484|0)==($1392|0);
 if($1485){var $T_0_lcssa_i_i=$1489;label=337;break;}else{var $T_014_i_i=$1489;var $K2_015_i_i=$1481;label=333;break;}
 case 333: 
 var $K2_015_i_i;
 var $T_014_i_i;
 var $1487=$K2_015_i_i>>>31;
 var $1488=(($T_014_i_i+16+($1487<<2))|0);
 var $1489=HEAP32[(($1488)>>2)];
 var $1490=($1489|0)==0;
 if($1490){label=334;break;}else{label=332;break;}
 case 334: 
 var $1492=$1488;
 var $1493=HEAP32[((13816)>>2)];
 var $1494=($1492>>>0)<($1493>>>0);
 if($1494){label=336;break;}else{label=335;break;}
 case 335: 
 HEAP32[(($1488)>>2)]=$1425;
 var $1496=(($890+24)|0);
 var $T_0_c8_i_i=$T_014_i_i;
 HEAP32[(($1496)>>2)]=$T_0_c8_i_i;
 var $1497=(($890+12)|0);
 HEAP32[(($1497)>>2)]=$890;
 var $1498=(($890+8)|0);
 HEAP32[(($1498)>>2)]=$890;
 label=341;break;
 case 336: 
 _abort();
 throw "Reached an unreachable!";
 case 337: 
 var $T_0_lcssa_i_i;
 var $1500=(($T_0_lcssa_i_i+8)|0);
 var $1501=HEAP32[(($1500)>>2)];
 var $1502=$T_0_lcssa_i_i;
 var $1503=HEAP32[((13816)>>2)];
 var $1504=($1502>>>0)<($1503>>>0);
 if($1504){label=340;break;}else{label=338;break;}
 case 338: 
 var $1506=$1501;
 var $1507=($1506>>>0)<($1503>>>0);
 if($1507){label=340;break;}else{label=339;break;}
 case 339: 
 var $1509=(($1501+12)|0);
 HEAP32[(($1509)>>2)]=$1425;
 HEAP32[(($1500)>>2)]=$1425;
 var $1510=(($890+8)|0);
 var $_c7_i_i=$1501;
 HEAP32[(($1510)>>2)]=$_c7_i_i;
 var $1511=(($890+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1511)>>2)]=$T_0_c_i_i;
 var $1512=(($890+24)|0);
 HEAP32[(($1512)>>2)]=0;
 label=341;break;
 case 340: 
 _abort();
 throw "Reached an unreachable!";
 case 341: 
 var $1513=HEAP32[((13812)>>2)];
 var $1514=($1513>>>0)>($nb_0>>>0);
 if($1514){label=342;break;}else{label=343;break;}
 case 342: 
 var $1516=((($1513)-($nb_0))|0);
 HEAP32[((13812)>>2)]=$1516;
 var $1517=HEAP32[((13824)>>2)];
 var $1518=$1517;
 var $1519=(($1518+$nb_0)|0);
 var $1520=$1519;
 HEAP32[((13824)>>2)]=$1520;
 var $1521=$1516|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1522=(($1518+$_sum_i34)|0);
 var $1523=$1522;
 HEAP32[(($1523)>>2)]=$1521;
 var $1524=$nb_0|3;
 var $1525=(($1517+4)|0);
 HEAP32[(($1525)>>2)]=$1524;
 var $1526=(($1517+8)|0);
 var $1527=$1526;
 var $mem_0=$1527;label=344;break;
 case 343: 
 var $1528=___errno_location();
 HEAP32[(($1528)>>2)]=12;
 var $mem_0=0;label=344;break;
 case 344: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=141;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((13816)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=140;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=140;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=141;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=140;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((13820)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((13840+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((13800)>>2)];
 var $57=$56&$55;
 HEAP32[((13800)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre81=(($40+8)|0);
 var $_pre_phi82=$_pre81;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi82=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi82;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi82)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((14104+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((13804)>>2)];
 var $128=$127&$126;
 HEAP32[((13804)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((13816)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((13816)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $149=(($mem+$_sum42)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((13816)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $162=(($mem+$_sum43)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((13816)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $176=(($mem+$_sum4)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((13808)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $185=(($mem+$_sum35)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=141;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=140;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $192=(($mem+$_sum34)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=140;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((13824)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((13812)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((13812)>>2)]=$204;
 HEAP32[((13824)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((13820)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=141;break;}
 case 61: 
 HEAP32[((13820)>>2)]=0;
 HEAP32[((13808)>>2)]=0;
 label=141;break;
 case 62: 
 var $211=HEAP32[((13820)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((13808)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((13808)>>2)]=$215;
 HEAP32[((13820)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=141;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum2829=$14|4;
 var $229=(($mem+$_sum2829)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((13840+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((13816)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((13800)>>2)];
 var $249=$248&$247;
 HEAP32[((13800)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre79=(($231+8)|0);
 var $_pre_phi80=$_pre79;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((13816)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi80=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi80;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi80)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum6=((($14)+(16))|0);
 var $263=(($mem+$_sum6)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum78=$14|4;
 var $266=(($mem+$_sum78)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((13816)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $287=(($mem+$_sum10)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $292=(($mem+$_sum9)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((13816)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $312=(($mem+$_sum21)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((14104+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((13804)>>2)];
 var $323=$322&$321;
 HEAP32[((13804)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((13816)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((13816)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum22=((($14)+(8))|0);
 var $344=(($mem+$_sum22)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((13816)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $357=(($mem+$_sum23)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((13816)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((13820)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((13808)>>2)]=$222;
 label=141;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((13840+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((13800)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((13800)>>2)]=$396;
 var $_sum19_pre=((($388)+(2))|0);
 var $_pre=((13840+($_sum19_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($388)+(2))|0);
 var $398=((13840+($_sum20<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((13816)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=141;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((14104+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((13804)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((13804)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=137;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=(($452+4)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=$460&-8;
 var $462=($461|0)==($psize_1|0);
 if($462){var $T_0_lcssa=$452;label=133;break;}else{label=127;break;}
 case 127: 
 var $463=$psize_1<<$458;
 var $T_071=$452;var $K19_072=$463;label=129;break;
 case 128: 
 var $465=$K19_072<<1;
 var $466=(($473+4)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=$467&-8;
 var $469=($468|0)==($psize_1|0);
 if($469){var $T_0_lcssa=$473;label=133;break;}else{var $T_071=$473;var $K19_072=$465;label=129;break;}
 case 129: 
 var $K19_072;
 var $T_071;
 var $471=$K19_072>>>31;
 var $472=(($T_071+16+($471<<2))|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($473|0)==0;
 if($474){label=130;break;}else{label=128;break;}
 case 130: 
 var $476=$472;
 var $477=HEAP32[((13816)>>2)];
 var $478=($476>>>0)<($477>>>0);
 if($478){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($472)>>2)]=$409;
 var $480=(($p_0+24)|0);
 var $T_0_c16=$T_071;
 HEAP32[(($480)>>2)]=$T_0_c16;
 var $481=(($p_0+12)|0);
 HEAP32[(($481)>>2)]=$p_0;
 var $482=(($p_0+8)|0);
 HEAP32[(($482)>>2)]=$p_0;
 label=137;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $484=(($T_0_lcssa+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=$T_0_lcssa;
 var $487=HEAP32[((13816)>>2)];
 var $488=($486>>>0)<($487>>>0);
 if($488){label=136;break;}else{label=134;break;}
 case 134: 
 var $490=$485;
 var $491=($490>>>0)<($487>>>0);
 if($491){label=136;break;}else{label=135;break;}
 case 135: 
 var $493=(($485+12)|0);
 HEAP32[(($493)>>2)]=$409;
 HEAP32[(($484)>>2)]=$409;
 var $494=(($p_0+8)|0);
 var $_c15=$485;
 HEAP32[(($494)>>2)]=$_c15;
 var $495=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($495)>>2)]=$T_0_c;
 var $496=(($p_0+24)|0);
 HEAP32[(($496)>>2)]=0;
 label=137;break;
 case 136: 
 _abort();
 throw "Reached an unreachable!";
 case 137: 
 var $498=HEAP32[((13832)>>2)];
 var $499=((($498)-(1))|0);
 HEAP32[((13832)>>2)]=$499;
 var $500=($499|0)==0;
 if($500){var $sp_0_in_i=14256;label=138;break;}else{label=141;break;}
 case 138: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $501=($sp_0_i|0)==0;
 var $502=(($sp_0_i+8)|0);
 if($501){label=139;break;}else{var $sp_0_in_i=$502;label=138;break;}
 case 139: 
 HEAP32[((13832)>>2)]=-1;
 label=141;break;
 case 140: 
 _abort();
 throw "Reached an unreachable!";
 case 141: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function _try_realloc_chunk($p,$nb){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((13816)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((13736)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((13824)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((13812)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((13824)>>2)]=$57;
 HEAP32[((13812)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((13820)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((13808)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((13808)>>2)]=$storemerge27;
 HEAP32[((13820)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((13840+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((13800)>>2)];
 var $132=$131&$130;
 HEAP32[((13800)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((14104+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=HEAP32[(($193)>>2)];
 var $200=1<<$199;
 var $201=$200^-1;
 var $202=HEAP32[((13804)>>2)];
 var $203=$202&$201;
 HEAP32[((13804)>>2)]=$203;
 label=69;break;
 case 53: 
 var $205=$147;
 var $206=HEAP32[((13816)>>2)];
 var $207=($205>>>0)<($206>>>0);
 if($207){label=57;break;}else{label=54;break;}
 case 54: 
 var $209=(($147+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==($144|0);
 if($211){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($209)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $214=(($147+20)|0);
 HEAP32[(($214)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $217=($R_1|0)==0;
 if($217){label=69;break;}else{label=59;break;}
 case 59: 
 var $219=$R_1;
 var $220=HEAP32[((13816)>>2)];
 var $221=($219>>>0)<($220>>>0);
 if($221){label=68;break;}else{label=60;break;}
 case 60: 
 var $223=(($R_1+24)|0);
 HEAP32[(($223)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $224=(($4+$_sum12)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=64;break;}else{label=61;break;}
 case 61: 
 var $229=$226;
 var $230=HEAP32[((13816)>>2)];
 var $231=($229>>>0)<($230>>>0);
 if($231){label=63;break;}else{label=62;break;}
 case 62: 
 var $233=(($R_1+16)|0);
 HEAP32[(($233)>>2)]=$226;
 var $234=(($226+24)|0);
 HEAP32[(($234)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $237=(($4+$_sum13)|0);
 var $238=$237;
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=69;break;}else{label=65;break;}
 case 65: 
 var $242=$239;
 var $243=HEAP32[((13816)>>2)];
 var $244=($242>>>0)<($243>>>0);
 if($244){label=67;break;}else{label=66;break;}
 case 66: 
 var $246=(($R_1+20)|0);
 HEAP32[(($246)>>2)]=$239;
 var $247=(($239+24)|0);
 HEAP32[(($247)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $251=($106>>>0)<16;
 if($251){label=70;break;}else{label=71;break;}
 case 70: 
 var $253=HEAP32[(($1)>>2)];
 var $254=$253&1;
 var $255=$103|$254;
 var $256=$255|2;
 HEAP32[(($1)>>2)]=$256;
 var $_sum910=$103|4;
 var $257=(($4+$_sum910)|0);
 var $258=$257;
 var $259=HEAP32[(($258)>>2)];
 var $260=$259|1;
 HEAP32[(($258)>>2)]=$260;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $262=(($4+$nb)|0);
 var $263=$262;
 var $264=HEAP32[(($1)>>2)];
 var $265=$264&1;
 var $266=$265|$nb;
 var $267=$266|2;
 HEAP32[(($1)>>2)]=$267;
 var $_sum5=((($nb)+(4))|0);
 var $268=(($4+$_sum5)|0);
 var $269=$268;
 var $270=$106|3;
 HEAP32[(($269)>>2)]=$270;
 var $_sum78=$103|4;
 var $271=(($4+$_sum78)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273|1;
 HEAP32[(($272)>>2)]=$274;
 _dispose_chunk($263,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }

}


function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=135;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((13816)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((13820)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((13840+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((13800)>>2)];
 var $49=$48&$47;
 HEAP32[((13800)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre68=(($32+8)|0);
 var $_pre_phi69=$_pre68;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi69=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi69;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi69)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((14104+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=HEAP32[(($110)>>2)];
 var $117=1<<$116;
 var $118=$117^-1;
 var $119=HEAP32[((13804)>>2)];
 var $120=$119&$118;
 HEAP32[((13804)>>2)]=$120;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $122=$64;
 var $123=HEAP32[((13816)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=39;break;}else{label=36;break;}
 case 36: 
 var $126=(($64+16)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==($61|0);
 if($128){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($126)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $131=(($64+20)|0);
 HEAP32[(($131)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $134=($R_1|0)==0;
 if($134){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $136=$R_1;
 var $137=HEAP32[((13816)>>2)];
 var $138=($136>>>0)<($137>>>0);
 if($138){label=50;break;}else{label=42;break;}
 case 42: 
 var $140=(($R_1+24)|0);
 HEAP32[(($140)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $141=(($1+$_sum31)|0);
 var $142=$141;
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){label=46;break;}else{label=43;break;}
 case 43: 
 var $146=$143;
 var $147=HEAP32[((13816)>>2)];
 var $148=($146>>>0)<($147>>>0);
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 var $150=(($R_1+16)|0);
 HEAP32[(($150)>>2)]=$143;
 var $151=(($143+24)|0);
 HEAP32[(($151)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $154=(($1+$_sum32)|0);
 var $155=$154;
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $159=$156;
 var $160=HEAP32[((13816)>>2)];
 var $161=($159>>>0)<($160>>>0);
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($R_1+20)|0);
 HEAP32[(($163)>>2)]=$156;
 var $164=(($156+24)|0);
 HEAP32[(($164)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $168=(($1+$_sum)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=$170&3;
 var $172=($171|0)==3;
 if($172){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((13808)>>2)]=$17;
 var $174=HEAP32[(($169)>>2)];
 var $175=$174&-2;
 HEAP32[(($169)>>2)]=$175;
 var $176=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $177=(($1+$_sum24)|0);
 var $178=$177;
 HEAP32[(($178)>>2)]=$176;
 var $179=$2;
 HEAP32[(($179)>>2)]=$17;
 label=135;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $181=HEAP32[((13816)>>2)];
 var $182=($2>>>0)<($181>>>0);
 if($182){label=134;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $184=(($1+$_sum1)|0);
 var $185=$184;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&2;
 var $188=($187|0)==0;
 if($188){label=56;break;}else{label=109;break;}
 case 56: 
 var $190=HEAP32[((13824)>>2)];
 var $191=($3|0)==($190|0);
 if($191){label=57;break;}else{label=59;break;}
 case 57: 
 var $193=HEAP32[((13812)>>2)];
 var $194=((($193)+($_02))|0);
 HEAP32[((13812)>>2)]=$194;
 HEAP32[((13824)>>2)]=$_0;
 var $195=$194|1;
 var $196=(($_0+4)|0);
 HEAP32[(($196)>>2)]=$195;
 var $197=HEAP32[((13820)>>2)];
 var $198=($_0|0)==($197|0);
 if($198){label=58;break;}else{label=135;break;}
 case 58: 
 HEAP32[((13820)>>2)]=0;
 HEAP32[((13808)>>2)]=0;
 label=135;break;
 case 59: 
 var $201=HEAP32[((13820)>>2)];
 var $202=($3|0)==($201|0);
 if($202){label=60;break;}else{label=61;break;}
 case 60: 
 var $204=HEAP32[((13808)>>2)];
 var $205=((($204)+($_02))|0);
 HEAP32[((13808)>>2)]=$205;
 HEAP32[((13820)>>2)]=$_0;
 var $206=$205|1;
 var $207=(($_0+4)|0);
 HEAP32[(($207)>>2)]=$206;
 var $208=$_0;
 var $209=(($208+$205)|0);
 var $210=$209;
 HEAP32[(($210)>>2)]=$205;
 label=135;break;
 case 61: 
 var $212=$186&-8;
 var $213=((($212)+($_02))|0);
 var $214=$186>>>3;
 var $215=($186>>>0)<256;
 if($215){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $217=(($1+$_sum20)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $220=(($1+$_sum21)|0);
 var $221=$220;
 var $222=HEAP32[(($221)>>2)];
 var $223=$214<<1;
 var $224=((13840+($223<<2))|0);
 var $225=$224;
 var $226=($219|0)==($225|0);
 if($226){label=65;break;}else{label=63;break;}
 case 63: 
 var $228=$219;
 var $229=($228>>>0)<($181>>>0);
 if($229){label=73;break;}else{label=64;break;}
 case 64: 
 var $231=(($219+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==($3|0);
 if($233){label=65;break;}else{label=73;break;}
 case 65: 
 var $234=($222|0)==($219|0);
 if($234){label=66;break;}else{label=67;break;}
 case 66: 
 var $236=1<<$214;
 var $237=$236^-1;
 var $238=HEAP32[((13800)>>2)];
 var $239=$238&$237;
 HEAP32[((13800)>>2)]=$239;
 label=107;break;
 case 67: 
 var $241=($222|0)==($225|0);
 if($241){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre66=(($222+8)|0);
 var $_pre_phi67=$_pre66;label=71;break;
 case 69: 
 var $243=$222;
 var $244=($243>>>0)<($181>>>0);
 if($244){label=72;break;}else{label=70;break;}
 case 70: 
 var $246=(($222+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==($3|0);
 if($248){var $_pre_phi67=$246;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi67;
 var $249=(($219+12)|0);
 HEAP32[(($249)>>2)]=$222;
 HEAP32[(($_pre_phi67)>>2)]=$219;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $251=$2;
 var $_sum2=((($psize)+(24))|0);
 var $252=(($1+$_sum2)|0);
 var $253=$252;
 var $254=HEAP32[(($253)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $255=(($1+$_sum3)|0);
 var $256=$255;
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($251|0);
 if($258){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $260=(($1+$_sum18)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $263=$262;
 var $264=($263>>>0)<($181>>>0);
 if($264){label=79;break;}else{label=76;break;}
 case 76: 
 var $266=(($262+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($251|0);
 if($268){label=77;break;}else{label=79;break;}
 case 77: 
 var $270=(($257+8)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==($251|0);
 if($272){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($266)>>2)]=$257;
 HEAP32[(($270)>>2)]=$262;
 var $R7_1=$257;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $275=(($1+$_sum5)|0);
 var $276=$275;
 var $277=HEAP32[(($276)>>2)];
 var $278=($277|0)==0;
 if($278){label=81;break;}else{var $R7_0=$277;var $RP9_0=$276;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $280=(($1+$_sum4)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==0;
 if($283){var $R7_1=0;label=87;break;}else{var $R7_0=$282;var $RP9_0=$281;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $284=(($R7_0+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=83;break;}else{var $R7_0=$285;var $RP9_0=$284;label=82;break;}
 case 83: 
 var $288=(($R7_0+16)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=82;break;}
 case 84: 
 var $292=$RP9_0;
 var $293=($292>>>0)<($181>>>0);
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $297=($254|0)==0;
 if($297){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $299=(($1+$_sum15)|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $302=((14104+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($251|0)==($303|0);
 if($304){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($302)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $306=HEAP32[(($300)>>2)];
 var $307=1<<$306;
 var $308=$307^-1;
 var $309=HEAP32[((13804)>>2)];
 var $310=$309&$308;
 HEAP32[((13804)>>2)]=$310;
 label=107;break;
 case 91: 
 var $312=$254;
 var $313=HEAP32[((13816)>>2)];
 var $314=($312>>>0)<($313>>>0);
 if($314){label=95;break;}else{label=92;break;}
 case 92: 
 var $316=(($254+16)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=($317|0)==($251|0);
 if($318){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($316)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $321=(($254+20)|0);
 HEAP32[(($321)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $324=($R7_1|0)==0;
 if($324){label=107;break;}else{label=97;break;}
 case 97: 
 var $326=$R7_1;
 var $327=HEAP32[((13816)>>2)];
 var $328=($326>>>0)<($327>>>0);
 if($328){label=106;break;}else{label=98;break;}
 case 98: 
 var $330=(($R7_1+24)|0);
 HEAP32[(($330)>>2)]=$254;
 var $_sum16=((($psize)+(16))|0);
 var $331=(($1+$_sum16)|0);
 var $332=$331;
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)==0;
 if($334){label=102;break;}else{label=99;break;}
 case 99: 
 var $336=$333;
 var $337=HEAP32[((13816)>>2)];
 var $338=($336>>>0)<($337>>>0);
 if($338){label=101;break;}else{label=100;break;}
 case 100: 
 var $340=(($R7_1+16)|0);
 HEAP32[(($340)>>2)]=$333;
 var $341=(($333+24)|0);
 HEAP32[(($341)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $344=(($1+$_sum17)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=107;break;}else{label=103;break;}
 case 103: 
 var $349=$346;
 var $350=HEAP32[((13816)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=105;break;}else{label=104;break;}
 case 104: 
 var $353=(($R7_1+20)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $358=$213|1;
 var $359=(($_0+4)|0);
 HEAP32[(($359)>>2)]=$358;
 var $360=$_0;
 var $361=(($360+$213)|0);
 var $362=$361;
 HEAP32[(($362)>>2)]=$213;
 var $363=HEAP32[((13820)>>2)];
 var $364=($_0|0)==($363|0);
 if($364){label=108;break;}else{var $_1=$213;label=110;break;}
 case 108: 
 HEAP32[((13808)>>2)]=$213;
 label=135;break;
 case 109: 
 var $367=$186&-2;
 HEAP32[(($185)>>2)]=$367;
 var $368=$_02|1;
 var $369=(($_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=$_0;
 var $371=(($370+$_02)|0);
 var $372=$371;
 HEAP32[(($372)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $374=$_1>>>3;
 var $375=($_1>>>0)<256;
 if($375){label=111;break;}else{label=116;break;}
 case 111: 
 var $377=$374<<1;
 var $378=((13840+($377<<2))|0);
 var $379=$378;
 var $380=HEAP32[((13800)>>2)];
 var $381=1<<$374;
 var $382=$380&$381;
 var $383=($382|0)==0;
 if($383){label=112;break;}else{label=113;break;}
 case 112: 
 var $385=$380|$381;
 HEAP32[((13800)>>2)]=$385;
 var $_sum13_pre=((($377)+(2))|0);
 var $_pre=((13840+($_sum13_pre<<2))|0);
 var $F16_0=$379;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($377)+(2))|0);
 var $387=((13840+($_sum14<<2))|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$388;
 var $390=HEAP32[((13816)>>2)];
 var $391=($389>>>0)<($390>>>0);
 if($391){label=114;break;}else{var $F16_0=$388;var $_pre_phi=$387;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $394=(($F16_0+12)|0);
 HEAP32[(($394)>>2)]=$_0;
 var $395=(($_0+8)|0);
 HEAP32[(($395)>>2)]=$F16_0;
 var $396=(($_0+12)|0);
 HEAP32[(($396)>>2)]=$379;
 label=135;break;
 case 116: 
 var $398=$_0;
 var $399=$_1>>>8;
 var $400=($399|0)==0;
 if($400){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $402=($_1>>>0)>16777215;
 if($402){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $404=((($399)+(1048320))|0);
 var $405=$404>>>16;
 var $406=$405&8;
 var $407=$399<<$406;
 var $408=((($407)+(520192))|0);
 var $409=$408>>>16;
 var $410=$409&4;
 var $411=$410|$406;
 var $412=$407<<$410;
 var $413=((($412)+(245760))|0);
 var $414=$413>>>16;
 var $415=$414&2;
 var $416=$411|$415;
 var $417=(((14)-($416))|0);
 var $418=$412<<$415;
 var $419=$418>>>15;
 var $420=((($417)+($419))|0);
 var $421=$420<<1;
 var $422=((($420)+(7))|0);
 var $423=$_1>>>($422>>>0);
 var $424=$423&1;
 var $425=$424|$421;
 var $I19_0=$425;label=119;break;
 case 119: 
 var $I19_0;
 var $427=((14104+($I19_0<<2))|0);
 var $428=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 var $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[((13804)>>2)];
 var $432=1<<$I19_0;
 var $433=$431&$432;
 var $434=($433|0)==0;
 if($434){label=120;break;}else{label=121;break;}
 case 120: 
 var $436=$431|$432;
 HEAP32[((13804)>>2)]=$436;
 HEAP32[(($427)>>2)]=$398;
 var $437=(($_0+24)|0);
 var $_c=$427;
 HEAP32[(($437)>>2)]=$_c;
 var $438=(($_0+12)|0);
 HEAP32[(($438)>>2)]=$_0;
 var $439=(($_0+8)|0);
 HEAP32[(($439)>>2)]=$_0;
 label=135;break;
 case 121: 
 var $441=HEAP32[(($427)>>2)];
 var $442=($I19_0|0)==31;
 if($442){var $447=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $444=$I19_0>>>1;
 var $445=(((25)-($444))|0);
 var $447=$445;label=123;break;
 case 123: 
 var $447;
 var $448=(($441+4)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=$449&-8;
 var $451=($450|0)==($_1|0);
 if($451){var $T_0_lcssa=$441;label=130;break;}else{label=124;break;}
 case 124: 
 var $452=$_1<<$447;
 var $T_055=$441;var $K20_056=$452;label=126;break;
 case 125: 
 var $454=$K20_056<<1;
 var $455=(($462+4)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=$456&-8;
 var $458=($457|0)==($_1|0);
 if($458){var $T_0_lcssa=$462;label=130;break;}else{var $T_055=$462;var $K20_056=$454;label=126;break;}
 case 126: 
 var $K20_056;
 var $T_055;
 var $460=$K20_056>>>31;
 var $461=(($T_055+16+($460<<2))|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=($462|0)==0;
 if($463){label=127;break;}else{label=125;break;}
 case 127: 
 var $465=$461;
 var $466=HEAP32[((13816)>>2)];
 var $467=($465>>>0)<($466>>>0);
 if($467){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($461)>>2)]=$398;
 var $469=(($_0+24)|0);
 var $T_0_c10=$T_055;
 HEAP32[(($469)>>2)]=$T_0_c10;
 var $470=(($_0+12)|0);
 HEAP32[(($470)>>2)]=$_0;
 var $471=(($_0+8)|0);
 HEAP32[(($471)>>2)]=$_0;
 label=135;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $473=(($T_0_lcssa+8)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=$T_0_lcssa;
 var $476=HEAP32[((13816)>>2)];
 var $477=($475>>>0)<($476>>>0);
 if($477){label=133;break;}else{label=131;break;}
 case 131: 
 var $479=$474;
 var $480=($479>>>0)<($476>>>0);
 if($480){label=133;break;}else{label=132;break;}
 case 132: 
 var $482=(($474+12)|0);
 HEAP32[(($482)>>2)]=$398;
 HEAP32[(($473)>>2)]=$398;
 var $483=(($_0+8)|0);
 var $_c9=$474;
 HEAP32[(($483)>>2)]=$_c9;
 var $484=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($484)>>2)]=$T_0_c;
 var $485=(($_0+24)|0);
 HEAP32[(($485)>>2)]=0;
 label=135;break;
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 _abort();
 throw "Reached an unreachable!";
 case 135: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __Znwj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((18000)>>2)],HEAP32[((18000)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=4512;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,11320,(84)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __Znaj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $1;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$1;
 var $6=($5|0)<0;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$4$0;
 ___cxa_call_unexpected($8);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZdlPv($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZdaPv($ptr){
 var label=0;


 __ZdlPv($ptr);
 return;
}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 1960;
}


function __ZSt17__throw_bad_allocv(){
 var label=0;


 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=4512;
 ___cxa_throw($1,11320,(84));
 throw "Reached an unreachable!";
}


function ___floatscan($f,$prec,$pok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i=sp;
 if(($prec|0)==1){ label=2;break;}else if(($prec|0)==2){ label=3;break;}else if(($prec|0)==0){ var $emin_0_ph=-149;var $bits_0_ph=24;label=4;break;}else{var $_0=0;label=273;break;}
 case 2: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 3: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 4: 
 var $bits_0_ph;
 var $emin_0_ph;
 var $3=(($f+4)|0);
 var $4=(($f+100)|0);
 label=5;break;
 case 5: 
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=6;break;}else{label=7;break;}
 case 6: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $12=($11&255);
 var $16=$12;label=8;break;
 case 7: 
 var $14=___shgetc($f);
 var $16=$14;label=8;break;
 case 8: 
 var $16;
 var $17=_isspace($16);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=5;break;}
 case 9: 
 var $20=($16|0)==45;
 if(($16|0)==45|($16|0)==43){ label=10;break;}else{var $c_0=$16;var $sign_0=1;label=13;break;}
 case 10: 
 var $22=($20&1);
 var $23=$22<<1;
 var $24=(((1)-($23))|0);
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($4)>>2)];
 var $27=($25>>>0)<($26>>>0);
 if($27){label=11;break;}else{label=12;break;}
 case 11: 
 var $29=(($25+1)|0);
 HEAP32[(($3)>>2)]=$29;
 var $30=HEAP8[($25)];
 var $31=($30&255);
 var $c_0=$31;var $sign_0=$24;label=13;break;
 case 12: 
 var $33=___shgetc($f);
 var $c_0=$33;var $sign_0=$24;label=13;break;
 case 13: 
 var $sign_0;
 var $c_0;
 var $i_068=0;var $c_169=$c_0;label=14;break;
 case 14: 
 var $c_169;
 var $i_068;
 var $36=$c_169|32;
 var $37=((864+$i_068)|0);
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=($36|0)==($39|0);
 if($40){label=15;break;}else{var $i_0_lcssa=$i_068;var $c_1_lcssa=$c_169;label=20;break;}
 case 15: 
 var $42=($i_068>>>0)<7;
 if($42){label=16;break;}else{var $c_2=$c_169;label=19;break;}
 case 16: 
 var $44=HEAP32[(($3)>>2)];
 var $45=HEAP32[(($4)>>2)];
 var $46=($44>>>0)<($45>>>0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=(($44+1)|0);
 HEAP32[(($3)>>2)]=$48;
 var $49=HEAP8[($44)];
 var $50=($49&255);
 var $c_2=$50;label=19;break;
 case 18: 
 var $52=___shgetc($f);
 var $c_2=$52;label=19;break;
 case 19: 
 var $c_2;
 var $54=((($i_068)+(1))|0);
 var $55=($54>>>0)<8;
 if($55){var $i_068=$54;var $c_169=$c_2;label=14;break;}else{var $i_0_lcssa=$54;var $c_1_lcssa=$c_2;label=20;break;}
 case 20: 
 var $c_1_lcssa;
 var $i_0_lcssa;
 if(($i_0_lcssa|0)==3){ label=23;break;}else if(($i_0_lcssa|0)==8){ label=27;break;}else{label=21;break;}
 case 21: 
 var $57=($i_0_lcssa>>>0)<4;
 var $58=($pok|0)==0;
 var $or_cond=$57|$58;
 if($or_cond){label=28;break;}else{label=22;break;}
 case 22: 
 var $60=($i_0_lcssa|0)==8;
 if($60){label=27;break;}else{label=23;break;}
 case 23: 
 var $61=HEAP32[(($4)>>2)];
 var $62=($61|0)==0;
 if($62){label=25;break;}else{label=24;break;}
 case 24: 
 var $64=HEAP32[(($3)>>2)];
 var $65=((($64)-(1))|0);
 HEAP32[(($3)>>2)]=$65;
 label=25;break;
 case 25: 
 var $notlhs=($pok|0)==0;
 var $notrhs=($i_0_lcssa>>>0)<4;
 var $or_cond106_not=$notrhs|$notlhs;
 var $brmerge=$or_cond106_not|$62;
 if($brmerge){label=27;break;}else{var $i_166=$i_0_lcssa;label=26;break;}
 case 26: 
 var $i_166;
 var $68=HEAP32[(($3)>>2)];
 var $69=((($68)-(1))|0);
 HEAP32[(($3)>>2)]=$69;
 var $70=((($i_166)-(1))|0);
 var $71=($70>>>0)>3;
 if($71){var $i_166=$70;label=26;break;}else{label=27;break;}
 case 27: 
 var $72=($sign_0|0);
 var $73=($72)*(Infinity);
 var $74=$73;
 var $_0=$74;label=273;break;
 case 28: 
 var $76=($i_0_lcssa|0)==0;
 if($76){var $i_263=0;var $c_364=$c_1_lcssa;label=29;break;}else{var $c_5=$c_1_lcssa;var $i_3=$i_0_lcssa;label=35;break;}
 case 29: 
 var $c_364;
 var $i_263;
 var $77=$c_364|32;
 var $78=((2856+$i_263)|0);
 var $79=HEAP8[($78)];
 var $80=(($79<<24)>>24);
 var $81=($77|0)==($80|0);
 if($81){label=30;break;}else{var $c_5=$c_364;var $i_3=$i_263;label=35;break;}
 case 30: 
 var $83=($i_263>>>0)<2;
 if($83){label=31;break;}else{var $c_4=$c_364;label=34;break;}
 case 31: 
 var $85=HEAP32[(($3)>>2)];
 var $86=HEAP32[(($4)>>2)];
 var $87=($85>>>0)<($86>>>0);
 if($87){label=32;break;}else{label=33;break;}
 case 32: 
 var $89=(($85+1)|0);
 HEAP32[(($3)>>2)]=$89;
 var $90=HEAP8[($85)];
 var $91=($90&255);
 var $c_4=$91;label=34;break;
 case 33: 
 var $93=___shgetc($f);
 var $c_4=$93;label=34;break;
 case 34: 
 var $c_4;
 var $95=((($i_263)+(1))|0);
 var $96=($95>>>0)<3;
 if($96){var $i_263=$95;var $c_364=$c_4;label=29;break;}else{var $c_5=$c_4;var $i_3=$95;label=35;break;}
 case 35: 
 var $i_3;
 var $c_5;
 if(($i_3|0)==3){ label=36;break;}else if(($i_3|0)==0){ label=58;break;}else{label=55;break;}
 case 36: 
 var $98=HEAP32[(($3)>>2)];
 var $99=HEAP32[(($4)>>2)];
 var $100=($98>>>0)<($99>>>0);
 if($100){label=37;break;}else{label=38;break;}
 case 37: 
 var $102=(($98+1)|0);
 HEAP32[(($3)>>2)]=$102;
 var $103=HEAP8[($98)];
 var $104=($103&255);
 var $108=$104;label=39;break;
 case 38: 
 var $106=___shgetc($f);
 var $108=$106;label=39;break;
 case 39: 
 var $108;
 var $109=($108|0)==40;
 if($109){var $i_4=1;label=42;break;}else{label=40;break;}
 case 40: 
 var $111=HEAP32[(($4)>>2)];
 var $112=($111|0)==0;
 if($112){var $_0=NaN;label=273;break;}else{label=41;break;}
 case 41: 
 var $114=HEAP32[(($3)>>2)];
 var $115=((($114)-(1))|0);
 HEAP32[(($3)>>2)]=$115;
 var $_0=NaN;label=273;break;
 case 42: 
 var $i_4;
 var $116=HEAP32[(($3)>>2)];
 var $117=HEAP32[(($4)>>2)];
 var $118=($116>>>0)<($117>>>0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=(($116+1)|0);
 HEAP32[(($3)>>2)]=$120;
 var $121=HEAP8[($116)];
 var $122=($121&255);
 var $126=$122;label=45;break;
 case 44: 
 var $124=___shgetc($f);
 var $126=$124;label=45;break;
 case 45: 
 var $126;
 var $127=((($126)-(48))|0);
 var $128=($127>>>0)<10;
 var $129=((($126)-(65))|0);
 var $130=($129>>>0)<26;
 var $or_cond8=$128|$130;
 if($or_cond8){label=54;break;}else{label=46;break;}
 case 46: 
 var $132=((($126)-(97))|0);
 var $133=($132>>>0)<26;
 var $134=($126|0)==95;
 var $or_cond5=$133|$134;
 if($or_cond5){label=54;break;}else{label=47;break;}
 case 47: 
 var $136=($126|0)==41;
 if($136){var $_0=NaN;label=273;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($4)>>2)];
 var $139=($138|0)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=HEAP32[(($3)>>2)];
 var $142=((($141)-(1))|0);
 HEAP32[(($3)>>2)]=$142;
 label=50;break;
 case 50: 
 if($58){label=52;break;}else{label=51;break;}
 case 51: 
 var $144=($i_4|0)==0;
 var $brmerge107=$144|$139;
 if($brmerge107){var $_0=NaN;label=273;break;}else{var $_in=$i_4;label=53;break;}
 case 52: 
 var $146=___errno_location();
 HEAP32[(($146)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 53: 
 var $_in;
 var $147=((($_in)-(1))|0);
 var $148=HEAP32[(($3)>>2)];
 var $149=((($148)-(1))|0);
 HEAP32[(($3)>>2)]=$149;
 var $150=($147|0)==0;
 if($150){var $_0=NaN;label=273;break;}else{var $_in=$147;label=53;break;}
 case 54: 
 var $152=((($i_4)+(1))|0);
 var $i_4=$152;label=42;break;
 case 55: 
 var $154=HEAP32[(($4)>>2)];
 var $155=($154|0)==0;
 if($155){label=57;break;}else{label=56;break;}
 case 56: 
 var $157=HEAP32[(($3)>>2)];
 var $158=((($157)-(1))|0);
 HEAP32[(($3)>>2)]=$158;
 label=57;break;
 case 57: 
 var $160=___errno_location();
 HEAP32[(($160)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 58: 
 var $162=($c_5|0)==48;
 if($162){label=59;break;}else{var $c_6=$c_5;label=134;break;}
 case 59: 
 var $164=HEAP32[(($3)>>2)];
 var $165=HEAP32[(($4)>>2)];
 var $166=($164>>>0)<($165>>>0);
 if($166){label=60;break;}else{label=61;break;}
 case 60: 
 var $168=(($164+1)|0);
 HEAP32[(($3)>>2)]=$168;
 var $169=HEAP8[($164)];
 var $170=($169&255);
 var $174=$170;label=62;break;
 case 61: 
 var $172=___shgetc($f);
 var $174=$172;label=62;break;
 case 62: 
 var $174;
 var $175=$174|32;
 var $176=($175|0)==120;
 if($176){label=63;break;}else{label=132;break;}
 case 63: 
 var $178=HEAP32[(($3)>>2)];
 var $179=HEAP32[(($4)>>2)];
 var $180=($178>>>0)<($179>>>0);
 if($180){label=64;break;}else{label=65;break;}
 case 64: 
 var $182=(($178+1)|0);
 HEAP32[(($3)>>2)]=$182;
 var $183=HEAP8[($178)];
 var $184=($183&255);
 var $c_0_i=$184;var $gotdig_0_i=0;label=66;break;
 case 65: 
 var $186=___shgetc($f);
 var $c_0_i=$186;var $gotdig_0_i=0;label=66;break;
 case 66: 
 var $gotdig_0_i;
 var $c_0_i;
 if(($c_0_i|0)==48){ label=67;break;}else if(($c_0_i|0)==46){ label=70;break;}else{var $c_2_i=$c_0_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=0;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 67: 
 var $188=HEAP32[(($3)>>2)];
 var $189=HEAP32[(($4)>>2)];
 var $190=($188>>>0)<($189>>>0);
 if($190){label=68;break;}else{label=69;break;}
 case 68: 
 var $192=(($188+1)|0);
 HEAP32[(($3)>>2)]=$192;
 var $193=HEAP8[($188)];
 var $194=($193&255);
 var $c_0_i=$194;var $gotdig_0_i=1;label=66;break;
 case 69: 
 var $196=___shgetc($f);
 var $c_0_i=$196;var $gotdig_0_i=1;label=66;break;
 case 70: 
 var $198=HEAP32[(($3)>>2)];
 var $199=HEAP32[(($4)>>2)];
 var $200=($198>>>0)<($199>>>0);
 if($200){label=71;break;}else{label=72;break;}
 case 71: 
 var $202=(($198+1)|0);
 HEAP32[(($3)>>2)]=$202;
 var $203=HEAP8[($198)];
 var $204=($203&255);
 var $c_1_ph_i=$204;label=73;break;
 case 72: 
 var $206=___shgetc($f);
 var $c_1_ph_i=$206;label=73;break;
 case 73: 
 var $c_1_ph_i;
 var $207=($c_1_ph_i|0)==48;
 if($207){var $rp_021_i$1=-1;var $rp_021_i$0=-1;label=74;break;}else{var $c_2_i=$c_1_ph_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 74: 
 var $rp_021_i$0;
 var $rp_021_i$1;
 var $208=HEAP32[(($3)>>2)];
 var $209=HEAP32[(($4)>>2)];
 var $210=($208>>>0)<($209>>>0);
 if($210){label=75;break;}else{label=76;break;}
 case 75: 
 var $212=(($208+1)|0);
 HEAP32[(($3)>>2)]=$212;
 var $213=HEAP8[($208)];
 var $214=($213&255);
 var $218=$214;label=77;break;
 case 76: 
 var $216=___shgetc($f);
 var $218=$216;label=77;break;
 case 77: 
 var $218;
 var $219=($218|0)==48;
 if($219){label=78;break;}else{var $c_2_i=$218;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=$rp_021_i$1;var $rp_1_i$0=$rp_021_i$0;var $gotdig_2_i=1;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 78: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $phitmp_i$0=_i64Add($rp_021_i$0,$rp_021_i$1,$$etemp$0$0,$$etemp$0$1);var $phitmp_i$1=tempRet0;
 var $rp_021_i$1=$phitmp_i$1;var $rp_021_i$0=$phitmp_i$0;label=74;break;
 case 79: 
 var $x_0_i;
 var $y_0_i;
 var $scale_0_i;
 var $gottail_0_i;
 var $gotrad_0_i;
 var $gotdig_2_i;
 var $rp_1_i$0;
 var $rp_1_i$1;
 var $dc_0_i$0;
 var $dc_0_i$1;
 var $c_2_i;
 var $220=((($c_2_i)-(48))|0);
 var $221=($220>>>0)<10;
 if($221){var $d_0_i=$220;label=84;break;}else{label=80;break;}
 case 80: 
 var $223=$c_2_i|32;
 var $224=((($223)-(97))|0);
 var $225=($224>>>0)<6;
 var $226=($c_2_i|0)==46;
 var $or_cond_i=$225|$226;
 if($or_cond_i){label=81;break;}else{var $c_2_lcssa_i=$c_2_i;label=94;break;}
 case 81: 
 if($226){label=82;break;}else{label=83;break;}
 case 82: 
 var $228=($gotrad_0_i|0)==0;
 if($228){var $dc_1_i$1=$dc_0_i$1;var $dc_1_i$0=$dc_0_i$0;var $rp_2_i$1=$dc_0_i$1;var $rp_2_i$0=$dc_0_i$0;var $gotdig_3_i=$gotdig_2_i;var $gotrad_1_i=1;var $gottail_2_i=$gottail_0_i;var $scale_2_i=$scale_0_i;var $y_2_i=$y_0_i;var $x_2_i=$x_0_i;label=91;break;}else{var $c_2_lcssa_i=46;label=94;break;}
 case 83: 
 var $230=($c_2_i|0)>57;
 var $231=((($223)-(87))|0);
 var $_38_i=($230?$231:$220);
 var $d_0_i=$_38_i;label=84;break;
 case 84: 
 var $d_0_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $232=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($232){label=85;break;}else{label=86;break;}
 case 85: 
 var $234=$x_0_i<<4;
 var $235=((($d_0_i)+($234))|0);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$235;label=90;break;
 case 86: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $237=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($237){label=87;break;}else{label=88;break;}
 case 87: 
 var $239=($d_0_i|0);
 var $240=($scale_0_i)*((0.0625));
 var $241=($240)*($239);
 var $242=($y_0_i)+($241);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$240;var $y_1_i=$242;var $x_1_i=$x_0_i;label=90;break;
 case 88: 
 var $244=($d_0_i|0)!=0;
 var $245=($gottail_0_i|0)==0;
 var $or_cond3_i=$244&$245;
 if($or_cond3_i){label=89;break;}else{var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$x_0_i;label=90;break;}
 case 89: 
 var $247=($scale_0_i)*((0.5));
 var $248=($y_0_i)+($247);
 var $gottail_1_i=1;var $scale_1_i=$scale_0_i;var $y_1_i=$248;var $x_1_i=$x_0_i;label=90;break;
 case 90: 
 var $x_1_i;
 var $y_1_i;
 var $scale_1_i;
 var $gottail_1_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $250$0=_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1);var $250$1=tempRet0;
 var $dc_1_i$1=$250$1;var $dc_1_i$0=$250$0;var $rp_2_i$1=$rp_1_i$1;var $rp_2_i$0=$rp_1_i$0;var $gotdig_3_i=1;var $gotrad_1_i=$gotrad_0_i;var $gottail_2_i=$gottail_1_i;var $scale_2_i=$scale_1_i;var $y_2_i=$y_1_i;var $x_2_i=$x_1_i;label=91;break;
 case 91: 
 var $x_2_i;
 var $y_2_i;
 var $scale_2_i;
 var $gottail_2_i;
 var $gotrad_1_i;
 var $gotdig_3_i;
 var $rp_2_i$0;
 var $rp_2_i$1;
 var $dc_1_i$0;
 var $dc_1_i$1;
 var $251=HEAP32[(($3)>>2)];
 var $252=HEAP32[(($4)>>2)];
 var $253=($251>>>0)<($252>>>0);
 if($253){label=92;break;}else{label=93;break;}
 case 92: 
 var $255=(($251+1)|0);
 HEAP32[(($3)>>2)]=$255;
 var $256=HEAP8[($251)];
 var $257=($256&255);
 var $c_2_i=$257;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 93: 
 var $259=___shgetc($f);
 var $c_2_i=$259;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 94: 
 var $c_2_lcssa_i;
 var $261=($gotdig_2_i|0)==0;
 if($261){label=95;break;}else{label=103;break;}
 case 95: 
 var $263=HEAP32[(($4)>>2)];
 var $264=($263|0)==0;
 if($264){label=97;break;}else{label=96;break;}
 case 96: 
 var $266=HEAP32[(($3)>>2)];
 var $267=((($266)-(1))|0);
 HEAP32[(($3)>>2)]=$267;
 label=97;break;
 case 97: 
 if($58){label=101;break;}else{label=98;break;}
 case 98: 
 if($264){label=102;break;}else{label=99;break;}
 case 99: 
 var $271=HEAP32[(($3)>>2)];
 var $272=((($271)-(1))|0);
 HEAP32[(($3)>>2)]=$272;
 var $273=($gotrad_0_i|0)==0;
 if($273){label=102;break;}else{label=100;break;}
 case 100: 
 var $275=((($271)-(2))|0);
 HEAP32[(($3)>>2)]=$275;
 label=102;break;
 case 101: 
 ___shlim($f,0);
 label=102;break;
 case 102: 
 var $277=($sign_0|0);
 var $278=($277)*(0);
 var $_0=$278;label=273;break;
 case 103: 
 var $280=($gotrad_0_i|0)==0;
 var $dc_0_rp_1_i$0=($280?$dc_0_i$0:$rp_1_i$0);
 var $dc_0_rp_1_i$1=($280?$dc_0_i$1:$rp_1_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $281=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($281){var $x_313_i=$x_0_i;var $dc_214_i$1=$dc_0_i$1;var $dc_214_i$0=$dc_0_i$0;label=104;break;}else{var $x_3_lcssa_i=$x_0_i;label=105;break;}
 case 104: 
 var $dc_214_i$0;
 var $dc_214_i$1;
 var $x_313_i;
 var $282=$x_313_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $283$0=_i64Add($dc_214_i$0,$dc_214_i$1,$$etemp$5$0,$$etemp$5$1);var $283$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $284=(($283$1|0) < ($$etemp$6$1|0)) | (((($283$1|0) == ($$etemp$6$1|0) & ($283$0>>>0) <  ($$etemp$6$0>>>0))));
 if($284){var $x_313_i=$282;var $dc_214_i$1=$283$1;var $dc_214_i$0=$283$0;label=104;break;}else{var $x_3_lcssa_i=$282;label=105;break;}
 case 105: 
 var $x_3_lcssa_i;
 var $285=$c_2_lcssa_i|32;
 var $286=($285|0)==112;
 if($286){label=106;break;}else{label=111;break;}
 case 106: 
 var $288$0=_scanexp($f,$pok);
 var $288$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $289=(($288$0|0) == ($$etemp$7$0|0)) & (($288$1|0) == ($$etemp$7$1|0));
 if($289){label=107;break;}else{var $e2_0_i$1=$288$1;var $e2_0_i$0=$288$0;label=113;break;}
 case 107: 
 if($58){label=110;break;}else{label=108;break;}
 case 108: 
 var $292=HEAP32[(($4)>>2)];
 var $293=($292|0)==0;
 if($293){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=109;break;}
 case 109: 
 var $295=HEAP32[(($3)>>2)];
 var $296=((($295)-(1))|0);
 HEAP32[(($3)>>2)]=$296;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 110: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 111: 
 var $299=HEAP32[(($4)>>2)];
 var $300=($299|0)==0;
 if($300){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=112;break;}
 case 112: 
 var $302=HEAP32[(($3)>>2)];
 var $303=((($302)-(1))|0);
 HEAP32[(($3)>>2)]=$303;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 113: 
 var $e2_0_i$0;
 var $e2_0_i$1;
 var $305$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
 var $305$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $306$0=_i64Add($305$0,$305$1,$$etemp$8$0,$$etemp$8$1);var $306$1=tempRet0;
 var $307$0=_i64Add($306$0,$306$1,$e2_0_i$0,$e2_0_i$1);var $307$1=tempRet0;
 var $308=($x_3_lcssa_i|0)==0;
 if($308){label=114;break;}else{label=115;break;}
 case 114: 
 var $310=($sign_0|0);
 var $311=($310)*(0);
 var $_0=$311;label=273;break;
 case 115: 
 var $313=(((-$emin_0_ph))|0);
 var $314$0=$313;
 var $314$1=0;
 var $315=(($307$1|0) > ($314$1|0)) | (((($307$1|0) == ($314$1|0) & ($307$0>>>0) >  ($314$0>>>0))));
 if($315){label=116;break;}else{label=117;break;}
 case 116: 
 var $317=___errno_location();
 HEAP32[(($317)>>2)]=34;
 var $318=($sign_0|0);
 var $319=($318)*((1.7976931348623157e+308));
 var $320=($319)*((1.7976931348623157e+308));
 var $_0=$320;label=273;break;
 case 117: 
 var $322=((($emin_0_ph)-(106))|0);
 var $323$0=$322;
 var $323$1=((((($322|0)<0))|0)?-1:0);
 var $324=(($307$1|0) < ($323$1|0)) | (((($307$1|0) == ($323$1|0) & ($307$0>>>0) <  ($323$0>>>0))));
 if($324){label=119;break;}else{label=118;break;}
 case 118: 
 var $325=($x_3_lcssa_i|0)>-1;
 if($325){var $x_48_i=$x_3_lcssa_i;var $y_39_i=$y_0_i;var $e2_110_i$1=$307$1;var $e2_110_i$0=$307$0;label=120;break;}else{var $x_4_lcssa_i=$x_3_lcssa_i;var $y_3_lcssa_i=$y_0_i;var $e2_1_lcssa_i$1=$307$1;var $e2_1_lcssa_i$0=$307$0;label=123;break;}
 case 119: 
 var $327=___errno_location();
 HEAP32[(($327)>>2)]=34;
 var $328=($sign_0|0);
 var $329=($328)*((2.2250738585072014e-308));
 var $330=($329)*((2.2250738585072014e-308));
 var $_0=$330;label=273;break;
 case 120: 
 var $e2_110_i$0;
 var $e2_110_i$1;
 var $y_39_i;
 var $x_48_i;
 var $331=$y_39_i<(0.5);
 var $332=$x_48_i<<1;
 if($331){var $_pn_i=$y_39_i;var $x_5_i=$332;label=122;break;}else{label=121;break;}
 case 121: 
 var $334=$332|1;
 var $335=($y_39_i)-(1);
 var $_pn_i=$335;var $x_5_i=$334;label=122;break;
 case 122: 
 var $x_5_i;
 var $_pn_i;
 var $y_4_i=($y_39_i)+($_pn_i);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $337$0=_i64Add($e2_110_i$0,$e2_110_i$1,$$etemp$9$0,$$etemp$9$1);var $337$1=tempRet0;
 var $338=($x_5_i|0)>-1;
 if($338){var $x_48_i=$x_5_i;var $y_39_i=$y_4_i;var $e2_110_i$1=$337$1;var $e2_110_i$0=$337$0;label=120;break;}else{var $x_4_lcssa_i=$x_5_i;var $y_3_lcssa_i=$y_4_i;var $e2_1_lcssa_i$1=$337$1;var $e2_1_lcssa_i$0=$337$0;label=123;break;}
 case 123: 
 var $e2_1_lcssa_i$0;
 var $e2_1_lcssa_i$1;
 var $y_3_lcssa_i;
 var $x_4_lcssa_i;
 var $339$0=$bits_0_ph;
 var $339$1=0;
 var $340$0=$emin_0_ph;
 var $340$1=((((($emin_0_ph|0)<0))|0)?-1:0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;
 var $341$0=_i64Subtract($$etemp$10$0,$$etemp$10$1,$340$0,$340$1);var $341$1=tempRet0;
 var $342$0=_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$341$0,$341$1);var $342$1=tempRet0;
 var $343=(($339$1|0) > ($342$1|0)) | (((($339$1|0) == ($342$1|0) & ($339$0>>>0) >  ($342$0>>>0))));
 if($343){label=124;break;}else{var $_02_i=$bits_0_ph;label=125;break;}
 case 124: 
 var $345$0=$342$0;
 var $345=$345$0;
 var $346=($345|0)<0;
 var $__i=($346?0:$345);
 var $_02_i=$__i;label=125;break;
 case 125: 
 var $_02_i;
 var $348=($_02_i|0)<53;
 if($348){label=127;break;}else{label=126;break;}
 case 126: 
 var $_pre_i=($sign_0|0);
 var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=0;var $_pre_phi_i=$_pre_i;label=129;break;
 case 127: 
 var $350=(((84)-($_02_i))|0);
 var $351=_scalbn(1,$350);
 var $352=($sign_0|0);
 var $353=_copysign($351,$352);
 var $354=($_02_i|0)<32;
 var $355=$y_3_lcssa_i!=0;
 var $or_cond4_i=$354&$355;
 if($or_cond4_i){label=128;break;}else{var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;}
 case 128: 
 var $357=$x_4_lcssa_i&1;
 var $358=($357|0)==0;
 var $359=$357^1;
 var $_x_4_i=((($359)+($x_4_lcssa_i))|0);
 var $_y_3_i=($358?0:$y_3_lcssa_i);
 var $y_5_i=$_y_3_i;var $x_6_i=$_x_4_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;
 case 129: 
 var $_pre_phi_i;
 var $bias_07_i;
 var $x_6_i;
 var $y_5_i;
 var $360=($x_6_i>>>0);
 var $361=($_pre_phi_i)*($360);
 var $362=($bias_07_i)+($361);
 var $363=($_pre_phi_i)*($y_5_i);
 var $364=($363)+($362);
 var $365=($364)-($bias_07_i);
 var $366=$365!=0;
 if($366){label=131;break;}else{label=130;break;}
 case 130: 
 var $368=___errno_location();
 HEAP32[(($368)>>2)]=34;
 label=131;break;
 case 131: 
 var $370$0=$e2_1_lcssa_i$0;
 var $370=$370$0;
 var $371=_scalbnl($365,$370);
 var $_0=$371;label=273;break;
 case 132: 
 var $373=HEAP32[(($4)>>2)];
 var $374=($373|0)==0;
 if($374){var $c_6=48;label=134;break;}else{label=133;break;}
 case 133: 
 var $376=HEAP32[(($3)>>2)];
 var $377=((($376)-(1))|0);
 HEAP32[(($3)>>2)]=$377;
 var $c_6=48;label=134;break;
 case 134: 
 var $c_6;
 var $379=$x_i;
 var $$etemp$11$0=512;
 var $$etemp$11$1=0;

 var $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
 var $380=(((-$sum_i))|0);
 var $_08_i=$c_6;var $gotdig_0_i9=0;label=135;break;
 case 135: 
 var $gotdig_0_i9;
 var $_08_i;
 if(($_08_i|0)==48){ label=136;break;}else if(($_08_i|0)==46){ label=139;break;}else{var $_2_i=$_08_i;var $gotrad_0_i12=0;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 136: 
 var $382=HEAP32[(($3)>>2)];
 var $383=HEAP32[(($4)>>2)];
 var $384=($382>>>0)<($383>>>0);
 if($384){label=137;break;}else{label=138;break;}
 case 137: 
 var $386=(($382+1)|0);
 HEAP32[(($3)>>2)]=$386;
 var $387=HEAP8[($382)];
 var $388=($387&255);
 var $_08_i=$388;var $gotdig_0_i9=1;label=135;break;
 case 138: 
 var $390=___shgetc($f);
 var $_08_i=$390;var $gotdig_0_i9=1;label=135;break;
 case 139: 
 var $392=HEAP32[(($3)>>2)];
 var $393=HEAP32[(($4)>>2)];
 var $394=($392>>>0)<($393>>>0);
 if($394){label=140;break;}else{label=141;break;}
 case 140: 
 var $396=(($392+1)|0);
 HEAP32[(($3)>>2)]=$396;
 var $397=HEAP8[($392)];
 var $398=($397&255);
 var $_1_ph_i=$398;label=142;break;
 case 141: 
 var $400=___shgetc($f);
 var $_1_ph_i=$400;label=142;break;
 case 142: 
 var $_1_ph_i;
 var $401=($_1_ph_i|0)==48;
 if($401){var $lrp_0110_i$1=-1;var $lrp_0110_i$0=-1;label=143;break;}else{var $_2_i=$_1_ph_i;var $gotrad_0_i12=1;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 143: 
 var $lrp_0110_i$0;
 var $lrp_0110_i$1;
 var $402=HEAP32[(($3)>>2)];
 var $403=HEAP32[(($4)>>2)];
 var $404=($402>>>0)<($403>>>0);
 if($404){label=144;break;}else{label=145;break;}
 case 144: 
 var $406=(($402+1)|0);
 HEAP32[(($3)>>2)]=$406;
 var $407=HEAP8[($402)];
 var $408=($407&255);
 var $_1_be_i=$408;label=146;break;
 case 145: 
 var $410=___shgetc($f);
 var $_1_be_i=$410;label=146;break;
 case 146: 
 var $_1_be_i;
 var $411=($_1_be_i|0)==48;
 if($411){label=147;break;}else{var $_2_i=$_1_be_i;var $gotrad_0_i12=1;var $gotdig_2_i11=1;var $lrp_1_i$1=$lrp_0110_i$1;var $lrp_1_i$0=$lrp_0110_i$0;label=148;break;}
 case 147: 
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $phitmp_i10$0=_i64Add($lrp_0110_i$0,$lrp_0110_i$1,$$etemp$12$0,$$etemp$12$1);var $phitmp_i10$1=tempRet0;
 var $lrp_0110_i$1=$phitmp_i10$1;var $lrp_0110_i$0=$phitmp_i10$0;label=143;break;
 case 148: 
 var $lrp_1_i$0;
 var $lrp_1_i$1;
 var $gotdig_2_i11;
 var $gotrad_0_i12;
 var $_2_i;
 var $412=(($x_i)|0);
 HEAP32[(($412)>>2)]=0;
 var $413=((($_2_i)-(48))|0);
 var $414=($413>>>0)<10;
 var $415=($_2_i|0)==46;
 var $or_cond789_i=$414|$415;
 if($or_cond789_i){label=149;break;}else{var $lrp_2_lcssa_i$1=$lrp_1_i$1;var $lrp_2_lcssa_i$0=$lrp_1_i$0;var $dc_0_lcssa_i$1=0;var $dc_0_lcssa_i$0=0;var $lnz_0_lcssa_i=0;var $gotdig_3_lcssa_i=$gotdig_2_i11;var $gotrad_1_lcssa_i=$gotrad_0_i12;var $k_0_lcssa_i=0;var $j_0_lcssa_i=0;var $_3_lcssa_i=$_2_i;label=162;break;}
 case 149: 
 var $416=(($x_i+496)|0);
 var $lrp_290_i$1=$lrp_1_i$1;var $lrp_290_i$0=$lrp_1_i$0;var $dc_091_i$1=0;var $dc_091_i$0=0;var $lnz_092_i=0;var $gotdig_393_i=$gotdig_2_i11;var $gotrad_194_i=$gotrad_0_i12;var $k_095_i=0;var $j_096_i=0;var $_397_i=$_2_i;var $418=$413;var $417=$415;label=150;break;
 case 150: 
 var $417;
 var $418;
 var $_397_i;
 var $j_096_i;
 var $k_095_i;
 var $gotrad_194_i;
 var $gotdig_393_i;
 var $lnz_092_i;
 var $dc_091_i$0;
 var $dc_091_i$1;
 var $lrp_290_i$0;
 var $lrp_290_i$1;
 if($417){label=151;break;}else{label=152;break;}
 case 151: 
 var $cond_i=($gotrad_194_i|0)==0;
 if($cond_i){var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=1;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$dc_091_i$1;var $dc_1_i14$0=$dc_091_i$0;var $lrp_3_i$1=$dc_091_i$1;var $lrp_3_i$0=$dc_091_i$0;label=158;break;}else{var $lrp_4_i$1=$lrp_290_i$1;var $lrp_4_i$0=$lrp_290_i$0;var $dc_077_i$1=$dc_091_i$1;var $dc_077_i$0=$dc_091_i$0;var $lnz_079_i=$lnz_092_i;var $gotdig_381_i=$gotdig_393_i;var $k_084_i=$k_095_i;var $j_086_i=$j_096_i;var $_388_i=$_397_i;label=163;break;}
 case 152: 
 var $421=($k_095_i|0)<125;
 var $$etemp$13$0=1;
 var $$etemp$13$1=0;
 var $422$0=_i64Add($dc_091_i$0,$dc_091_i$1,$$etemp$13$0,$$etemp$13$1);var $422$1=tempRet0;
 var $423=($_397_i|0)!=48;
 if($421){label=153;break;}else{label=156;break;}
 case 153: 
 var $425$0=$422$0;
 var $425=$425$0;
 var $_lnz_0_i=($423?$425:$lnz_092_i);
 var $426=($j_096_i|0)==0;
 var $427=(($x_i+($k_095_i<<2))|0);
 if($426){var $storemerge_i=$418;label=155;break;}else{label=154;break;}
 case 154: 
 var $429=HEAP32[(($427)>>2)];
 var $430=((($429)*(10))&-1);
 var $431=((($_397_i)-(48))|0);
 var $432=((($431)+($430))|0);
 var $storemerge_i=$432;label=155;break;
 case 155: 
 var $storemerge_i;
 HEAP32[(($427)>>2)]=$storemerge_i;
 var $434=((($j_096_i)+(1))|0);
 var $435=($434|0)==9;
 var $436=($435&1);
 var $_k_0_i=((($436)+($k_095_i))|0);
 var $_10_i=($435?0:$434);
 var $j_2_i=$_10_i;var $k_2_i=$_k_0_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=1;var $lnz_2_i=$_lnz_0_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 156: 
 if($423){label=157;break;}else{var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;}
 case 157: 
 var $439=HEAP32[(($416)>>2)];
 var $440=$439|1;
 HEAP32[(($416)>>2)]=$440;
 var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 158: 
 var $lrp_3_i$0;
 var $lrp_3_i$1;
 var $dc_1_i14$0;
 var $dc_1_i14$1;
 var $lnz_2_i;
 var $gotdig_4_i;
 var $gotrad_2_i;
 var $k_2_i;
 var $j_2_i;
 var $441=HEAP32[(($3)>>2)];
 var $442=HEAP32[(($4)>>2)];
 var $443=($441>>>0)<($442>>>0);
 if($443){label=159;break;}else{label=160;break;}
 case 159: 
 var $445=(($441+1)|0);
 HEAP32[(($3)>>2)]=$445;
 var $446=HEAP8[($441)];
 var $447=($446&255);
 var $_3_be_i=$447;label=161;break;
 case 160: 
 var $449=___shgetc($f);
 var $_3_be_i=$449;label=161;break;
 case 161: 
 var $_3_be_i;
 var $450=((($_3_be_i)-(48))|0);
 var $451=($450>>>0)<10;
 var $452=($_3_be_i|0)==46;
 var $or_cond7_i=$451|$452;
 if($or_cond7_i){var $lrp_290_i$1=$lrp_3_i$1;var $lrp_290_i$0=$lrp_3_i$0;var $dc_091_i$1=$dc_1_i14$1;var $dc_091_i$0=$dc_1_i14$0;var $lnz_092_i=$lnz_2_i;var $gotdig_393_i=$gotdig_4_i;var $gotrad_194_i=$gotrad_2_i;var $k_095_i=$k_2_i;var $j_096_i=$j_2_i;var $_397_i=$_3_be_i;var $418=$450;var $417=$452;label=150;break;}else{var $lrp_2_lcssa_i$1=$lrp_3_i$1;var $lrp_2_lcssa_i$0=$lrp_3_i$0;var $dc_0_lcssa_i$1=$dc_1_i14$1;var $dc_0_lcssa_i$0=$dc_1_i14$0;var $lnz_0_lcssa_i=$lnz_2_i;var $gotdig_3_lcssa_i=$gotdig_4_i;var $gotrad_1_lcssa_i=$gotrad_2_i;var $k_0_lcssa_i=$k_2_i;var $j_0_lcssa_i=$j_2_i;var $_3_lcssa_i=$_3_be_i;label=162;break;}
 case 162: 
 var $_3_lcssa_i;
 var $j_0_lcssa_i;
 var $k_0_lcssa_i;
 var $gotrad_1_lcssa_i;
 var $gotdig_3_lcssa_i;
 var $lnz_0_lcssa_i;
 var $dc_0_lcssa_i$0;
 var $dc_0_lcssa_i$1;
 var $lrp_2_lcssa_i$0;
 var $lrp_2_lcssa_i$1;
 var $453=($gotrad_1_lcssa_i|0)==0;
 var $dc_0_lrp_2_i$0=($453?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
 var $dc_0_lrp_2_i$1=($453?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
 var $lrp_4_i$1=$dc_0_lrp_2_i$1;var $lrp_4_i$0=$dc_0_lrp_2_i$0;var $dc_077_i$1=$dc_0_lcssa_i$1;var $dc_077_i$0=$dc_0_lcssa_i$0;var $lnz_079_i=$lnz_0_lcssa_i;var $gotdig_381_i=$gotdig_3_lcssa_i;var $k_084_i=$k_0_lcssa_i;var $j_086_i=$j_0_lcssa_i;var $_388_i=$_3_lcssa_i;label=163;break;
 case 163: 
 var $_388_i;
 var $j_086_i;
 var $k_084_i;
 var $gotdig_381_i;
 var $lnz_079_i;
 var $dc_077_i$0;
 var $dc_077_i$1;
 var $lrp_4_i$0;
 var $lrp_4_i$1;
 var $454=($gotdig_381_i|0)!=0;
 if($454){label=164;break;}else{label=171;break;}
 case 164: 
 var $456=$_388_i|32;
 var $457=($456|0)==101;
 if($457){label=165;break;}else{label=171;break;}
 case 165: 
 var $459$0=_scanexp($f,$pok);
 var $459$1=tempRet0;
 var $$etemp$14$0=0;
 var $$etemp$14$1=-2147483648;
 var $460=(($459$0|0) == ($$etemp$14$0|0)) & (($459$1|0) == ($$etemp$14$1|0));
 if($460){label=166;break;}else{var $e10_0_i$1=$459$1;var $e10_0_i$0=$459$0;label=170;break;}
 case 166: 
 if($58){label=169;break;}else{label=167;break;}
 case 167: 
 var $463=HEAP32[(($4)>>2)];
 var $464=($463|0)==0;
 if($464){var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;}else{label=168;break;}
 case 168: 
 var $466=HEAP32[(($3)>>2)];
 var $467=((($466)-(1))|0);
 HEAP32[(($3)>>2)]=$467;
 var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;
 case 169: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 170: 
 var $e10_0_i$0;
 var $e10_0_i$1;
 var $470$0=_i64Add($e10_0_i$0,$e10_0_i$1,$lrp_4_i$0,$lrp_4_i$1);var $470$1=tempRet0;
 var $lrp_5_i$1=$470$1;var $lrp_5_i$0=$470$0;label=174;break;
 case 171: 
 var $472=($_388_i|0)>-1;
 if($472){label=172;break;}else{var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}
 case 172: 
 var $474=HEAP32[(($4)>>2)];
 var $475=($474|0)==0;
 if($475){var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}else{label=173;break;}
 case 173: 
 var $477=HEAP32[(($3)>>2)];
 var $478=((($477)-(1))|0);
 HEAP32[(($3)>>2)]=$478;
 var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;
 case 174: 
 var $lrp_5_i$0;
 var $lrp_5_i$1;
 if($454){label=176;break;}else{label=175;break;}
 case 175: 
 var $481=___errno_location();
 HEAP32[(($481)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 176: 
 var $483=HEAP32[(($412)>>2)];
 var $484=($483|0)==0;
 if($484){label=177;break;}else{label=178;break;}
 case 177: 
 var $486=($sign_0|0);
 var $487=($486)*(0);
 var $_0=$487;label=273;break;
 case 178: 
 var $489=(($lrp_5_i$0|0) == ($dc_077_i$0|0)) & (($lrp_5_i$1|0) == ($dc_077_i$1|0));
 var $$etemp$15$0=10;
 var $$etemp$15$1=0;
 var $490=(($dc_077_i$1|0) < ($$etemp$15$1|0)) | (((($dc_077_i$1|0) == ($$etemp$15$1|0) & ($dc_077_i$0>>>0) <  ($$etemp$15$0>>>0))));
 var $or_cond_i15=$489&$490;
 if($or_cond_i15){label=179;break;}else{label=182;break;}
 case 179: 
 var $492=($bits_0_ph>>>0)>30;
 if($492){label=181;break;}else{label=180;break;}
 case 180: 
 var $494=$483>>>($bits_0_ph>>>0);
 var $495=($494|0)==0;
 if($495){label=181;break;}else{label=182;break;}
 case 181: 
 var $497=($sign_0|0);
 var $498=($483>>>0);
 var $499=($497)*($498);
 var $_0=$499;label=273;break;
 case 182: 
 var $501=(((($emin_0_ph|0))/(-2))&-1);
 var $502$0=$501;
 var $502$1=((((($501|0)<0))|0)?-1:0);
 var $503=(($lrp_5_i$1|0) > ($502$1|0)) | (((($lrp_5_i$1|0) == ($502$1|0) & ($lrp_5_i$0>>>0) >  ($502$0>>>0))));
 if($503){label=183;break;}else{label=184;break;}
 case 183: 
 var $505=___errno_location();
 HEAP32[(($505)>>2)]=34;
 var $506=($sign_0|0);
 var $507=($506)*((1.7976931348623157e+308));
 var $508=($507)*((1.7976931348623157e+308));
 var $_0=$508;label=273;break;
 case 184: 
 var $510=((($emin_0_ph)-(106))|0);
 var $511$0=$510;
 var $511$1=((((($510|0)<0))|0)?-1:0);
 var $512=(($lrp_5_i$1|0) < ($511$1|0)) | (((($lrp_5_i$1|0) == ($511$1|0) & ($lrp_5_i$0>>>0) <  ($511$0>>>0))));
 if($512){label=185;break;}else{label=186;break;}
 case 185: 
 var $514=___errno_location();
 HEAP32[(($514)>>2)]=34;
 var $515=($sign_0|0);
 var $516=($515)*((2.2250738585072014e-308));
 var $517=($516)*((2.2250738585072014e-308));
 var $_0=$517;label=273;break;
 case 186: 
 var $519=($j_086_i|0)==0;
 if($519){var $k_3_i=$k_084_i;label=192;break;}else{label=187;break;}
 case 187: 
 var $520=($j_086_i|0)<9;
 if($520){label=188;break;}else{label=191;break;}
 case 188: 
 var $521=(($x_i+($k_084_i<<2))|0);
 var $_promoted_i=HEAP32[(($521)>>2)];
 var $j_371_i=$j_086_i;var $523=$_promoted_i;label=189;break;
 case 189: 
 var $523;
 var $j_371_i;
 var $524=((($523)*(10))&-1);
 var $525=((($j_371_i)+(1))|0);
 var $526=($525|0)<9;
 if($526){var $j_371_i=$525;var $523=$524;label=189;break;}else{label=190;break;}
 case 190: 
 HEAP32[(($521)>>2)]=$524;
 label=191;break;
 case 191: 
 var $528=((($k_084_i)+(1))|0);
 var $k_3_i=$528;label=192;break;
 case 192: 
 var $k_3_i;
 var $530$0=$lrp_5_i$0;
 var $530=$530$0;
 var $531=($lnz_079_i|0)<9;
 if($531){label=193;break;}else{label=201;break;}
 case 193: 
 var $533=($lnz_079_i|0)<=($530|0);
 var $534=($530|0)<18;
 var $or_cond3_i16=$533&$534;
 if($or_cond3_i16){label=194;break;}else{label=201;break;}
 case 194: 
 var $536=($530|0)==9;
 if($536){label=195;break;}else{label=196;break;}
 case 195: 
 var $538=($sign_0|0);
 var $539=HEAP32[(($412)>>2)];
 var $540=($539>>>0);
 var $541=($538)*($540);
 var $_0=$541;label=273;break;
 case 196: 
 var $543=($530|0)<9;
 if($543){label=197;break;}else{label=198;break;}
 case 197: 
 var $545=($sign_0|0);
 var $546=HEAP32[(($412)>>2)];
 var $547=($546>>>0);
 var $548=($545)*($547);
 var $549=(((8)-($530))|0);
 var $550=((16+($549<<2))|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=($551|0);
 var $553=($548)/($552);
 var $_0=$553;label=273;break;
 case 198: 
 var $555=((($530)*(-3))&-1);
 var $_neg20_i=((($bits_0_ph)+(27))|0);
 var $556=((($_neg20_i)+($555))|0);
 var $557=($556|0)>30;
 var $_pre_i17=HEAP32[(($412)>>2)];
 if($557){label=200;break;}else{label=199;break;}
 case 199: 
 var $559=$_pre_i17>>>($556>>>0);
 var $560=($559|0)==0;
 if($560){label=200;break;}else{label=201;break;}
 case 200: 
 var $561=($sign_0|0);
 var $562=($_pre_i17>>>0);
 var $563=($561)*($562);
 var $564=((($530)-(10))|0);
 var $565=((16+($564<<2))|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=($566|0);
 var $568=($563)*($567);
 var $_0=$568;label=273;break;
 case 201: 
 var $570=(((($530|0))%(9))&-1);
 var $571=($570|0)==0;
 if($571){var $a_2_ph40_i=0;var $z_1_ph39_i=$k_3_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$530;label=210;break;}else{label=202;break;}
 case 202: 
 var $573=($530|0)>-1;
 var $574=((($570)+(9))|0);
 var $575=($573?$570:$574);
 var $576=(((8)-($575))|0);
 var $577=((16+($576<<2))|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($k_3_i|0)==0;
 if($579){var $z_0_i=0;var $a_0_lcssa161_i=0;var $rp_0_lcssa162_i=$530;label=209;break;}else{label=203;break;}
 case 203: 
 var $580=(((1000000000)/(($578|0)))&-1);
 var $rp_060_i=$530;var $a_061_i=0;var $k_462_i=0;var $carry_063_i=0;label=204;break;
 case 204: 
 var $carry_063_i;
 var $k_462_i;
 var $a_061_i;
 var $rp_060_i;
 var $581=(($x_i+($k_462_i<<2))|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(((($582>>>0))%(($578>>>0)))&-1);
 var $584=(((($582>>>0))/(($578>>>0)))&-1);
 var $585=((($584)+($carry_063_i))|0);
 HEAP32[(($581)>>2)]=$585;
 var $586=(Math_imul($583,$580)|0);
 var $587=($k_462_i|0)==($a_061_i|0);
 var $588=($585|0)==0;
 var $or_cond11_i=$587&$588;
 var $589=((($k_462_i)+(1))|0);
 if($or_cond11_i){label=205;break;}else{var $a_1_i=$a_061_i;var $rp_1_i18=$rp_060_i;label=206;break;}
 case 205: 
 var $591=$589&127;
 var $592=((($rp_060_i)-(9))|0);
 var $a_1_i=$591;var $rp_1_i18=$592;label=206;break;
 case 206: 
 var $rp_1_i18;
 var $a_1_i;
 var $593=($589|0)==($k_3_i|0);
 if($593){label=207;break;}else{var $rp_060_i=$rp_1_i18;var $a_061_i=$a_1_i;var $k_462_i=$589;var $carry_063_i=$586;label=204;break;}
 case 207: 
 var $594=($586|0)==0;
 if($594){var $z_0_i=$k_3_i;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;}else{label=208;break;}
 case 208: 
 var $596=((($k_3_i)+(1))|0);
 var $597=(($x_i+($k_3_i<<2))|0);
 HEAP32[(($597)>>2)]=$586;
 var $z_0_i=$596;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;
 case 209: 
 var $rp_0_lcssa162_i;
 var $a_0_lcssa161_i;
 var $z_0_i;
 var $598=(((9)-($575))|0);
 var $599=((($598)+($rp_0_lcssa162_i))|0);
 var $a_2_ph40_i=$a_0_lcssa161_i;var $z_1_ph39_i=$z_0_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$599;label=210;break;
 case 210: 
 var $rp_2_ph38_i;
 var $e2_0_ph_i;
 var $z_1_ph39_i;
 var $a_2_ph40_i;
 var $600=($rp_2_ph38_i|0)<18;
 var $601=(($x_i+($a_2_ph40_i<<2))|0);
 if($600){var $z_1_us_i=$z_1_ph39_i;var $e2_0_us_i=$e2_0_ph_i;label=212;break;}else{label=211;break;}
 case 211: 
 var $602=($rp_2_ph38_i|0)==18;
 if($602){var $z_1_us45_i=$z_1_ph39_i;var $e2_0_us44_i=$e2_0_ph_i;label=219;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_ph39_i;var $e2_1_ph_i=$e2_0_ph_i;var $rp_3_ph33_i=$rp_2_ph38_i;label=243;break;}
 case 212: 
 var $e2_0_us_i;
 var $z_1_us_i;
 var $603=((($z_1_us_i)+(127))|0);
 var $carry1_0_us_i=0;var $k_5_in_us_i=$603;var $z_2_us_i=$z_1_us_i;label=213;break;
 case 213: 
 var $z_2_us_i;
 var $k_5_in_us_i;
 var $carry1_0_us_i;
 var $k_5_us_i=$k_5_in_us_i&127;
 var $605=(($x_i+($k_5_us_i<<2))|0);
 var $606=HEAP32[(($605)>>2)];
 var $607$0=$606;
 var $607$1=0;
 var $608$0=($607$0<<29)|(0>>>3);
 var $608$1=($607$1<<29)|($607$0>>>3);
 var $609$0=$carry1_0_us_i;
 var $609$1=0;
 var $610$0=_i64Add($608$0,$608$1,$609$0,$609$1);var $610$1=tempRet0;
 var $$etemp$16$0=1000000000;
 var $$etemp$16$1=0;
 var $611=(($610$1>>>0) > ($$etemp$16$1>>>0)) | (((($610$1>>>0) == ($$etemp$16$1>>>0) & ($610$0>>>0) >  ($$etemp$16$0>>>0))));
 var $extract_t19_us_i$0=$610$0;
 var $extract_t19_us_i=$extract_t19_us_i$0;
 if($611){label=214;break;}else{var $carry1_1_us_i=0;var $_sink_off0_us_i=$extract_t19_us_i;label=215;break;}
 case 214: 
 var $$etemp$17$0=1000000000;
 var $$etemp$17$1=0;
 var $613$0=___udivdi3($610$0,$610$1,$$etemp$17$0,$$etemp$17$1);var $613$1=tempRet0;
 var $614$0=$613$0;
 var $614=$614$0;
 var $$etemp$18$0=1000000000;
 var $$etemp$18$1=0;
 var $615$0=___uremdi3($610$0,$610$1,$$etemp$18$0,$$etemp$18$1);var $615$1=tempRet0;
 var $extract_t_us_i$0=$615$0;
 var $extract_t_us_i=$extract_t_us_i$0;
 var $carry1_1_us_i=$614;var $_sink_off0_us_i=$extract_t_us_i;label=215;break;
 case 215: 
 var $_sink_off0_us_i;
 var $carry1_1_us_i;
 HEAP32[(($605)>>2)]=$_sink_off0_us_i;
 var $617=((($z_2_us_i)+(127))|0);
 var $618=$617&127;
 var $619=($k_5_us_i|0)!=($618|0);
 var $620=($k_5_us_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us_i=$619|$620;
 if($or_cond12_us_i){var $z_3_us_i=$z_2_us_i;label=217;break;}else{label=216;break;}
 case 216: 
 var $622=($_sink_off0_us_i|0)==0;
 var $k_5_z_2_us_i=($622?$k_5_us_i:$z_2_us_i);
 var $z_3_us_i=$k_5_z_2_us_i;label=217;break;
 case 217: 
 var $z_3_us_i;
 var $624=((($k_5_us_i)-(1))|0);
 if($620){label=218;break;}else{var $carry1_0_us_i=$carry1_1_us_i;var $k_5_in_us_i=$624;var $z_2_us_i=$z_3_us_i;label=213;break;}
 case 218: 
 var $626=((($e2_0_us_i)-(29))|0);
 var $627=($carry1_1_us_i|0)==0;
 if($627){var $z_1_us_i=$z_3_us_i;var $e2_0_us_i=$626;label=212;break;}else{var $_lcssa43_i=$626;var $z_3_lcssa_lcssa_i=$z_3_us_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us_i;label=227;break;}
 case 219: 
 var $e2_0_us44_i;
 var $z_1_us45_i;
 var $628=HEAP32[(($601)>>2)];
 var $629=($628>>>0)<9007199;
 if($629){label=220;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_us45_i;var $e2_1_ph_i=$e2_0_us44_i;var $rp_3_ph33_i=18;label=243;break;}
 case 220: 
 var $630=((($z_1_us45_i)+(127))|0);
 var $carry1_0_us49_i=0;var $k_5_in_us48_i=$630;var $z_2_us47_i=$z_1_us45_i;label=221;break;
 case 221: 
 var $z_2_us47_i;
 var $k_5_in_us48_i;
 var $carry1_0_us49_i;
 var $k_5_us50_i=$k_5_in_us48_i&127;
 var $632=(($x_i+($k_5_us50_i<<2))|0);
 var $633=HEAP32[(($632)>>2)];
 var $634$0=$633;
 var $634$1=0;
 var $635$0=($634$0<<29)|(0>>>3);
 var $635$1=($634$1<<29)|($634$0>>>3);
 var $636$0=$carry1_0_us49_i;
 var $636$1=0;
 var $637$0=_i64Add($635$0,$635$1,$636$0,$636$1);var $637$1=tempRet0;
 var $$etemp$19$0=1000000000;
 var $$etemp$19$1=0;
 var $638=(($637$1>>>0) > ($$etemp$19$1>>>0)) | (((($637$1>>>0) == ($$etemp$19$1>>>0) & ($637$0>>>0) >  ($$etemp$19$0>>>0))));
 var $extract_t19_us51_i$0=$637$0;
 var $extract_t19_us51_i=$extract_t19_us51_i$0;
 if($638){label=222;break;}else{var $carry1_1_us54_i=0;var $_sink_off0_us53_i=$extract_t19_us51_i;label=223;break;}
 case 222: 
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $640$0=___udivdi3($637$0,$637$1,$$etemp$20$0,$$etemp$20$1);var $640$1=tempRet0;
 var $641$0=$640$0;
 var $641=$641$0;
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $642$0=___uremdi3($637$0,$637$1,$$etemp$21$0,$$etemp$21$1);var $642$1=tempRet0;
 var $extract_t_us52_i$0=$642$0;
 var $extract_t_us52_i=$extract_t_us52_i$0;
 var $carry1_1_us54_i=$641;var $_sink_off0_us53_i=$extract_t_us52_i;label=223;break;
 case 223: 
 var $_sink_off0_us53_i;
 var $carry1_1_us54_i;
 HEAP32[(($632)>>2)]=$_sink_off0_us53_i;
 var $644=((($z_2_us47_i)+(127))|0);
 var $645=$644&127;
 var $646=($k_5_us50_i|0)!=($645|0);
 var $647=($k_5_us50_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us55_i=$646|$647;
 if($or_cond12_us55_i){var $z_3_us57_i=$z_2_us47_i;label=225;break;}else{label=224;break;}
 case 224: 
 var $649=($_sink_off0_us53_i|0)==0;
 var $k_5_z_2_us56_i=($649?$k_5_us50_i:$z_2_us47_i);
 var $z_3_us57_i=$k_5_z_2_us56_i;label=225;break;
 case 225: 
 var $z_3_us57_i;
 var $651=((($k_5_us50_i)-(1))|0);
 if($647){label=226;break;}else{var $carry1_0_us49_i=$carry1_1_us54_i;var $k_5_in_us48_i=$651;var $z_2_us47_i=$z_3_us57_i;label=221;break;}
 case 226: 
 var $653=((($e2_0_us44_i)-(29))|0);
 var $654=($carry1_1_us54_i|0)==0;
 if($654){var $z_1_us45_i=$z_3_us57_i;var $e2_0_us44_i=$653;label=219;break;}else{var $_lcssa43_i=$653;var $z_3_lcssa_lcssa_i=$z_3_us57_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us54_i;label=227;break;}
 case 227: 
 var $carry1_1_lcssa_lcssa_i;
 var $z_3_lcssa_lcssa_i;
 var $_lcssa43_i;
 var $655=((($rp_2_ph38_i)+(9))|0);
 var $656=((($a_2_ph40_i)+(127))|0);
 var $657=$656&127;
 var $658=($657|0)==($z_3_lcssa_lcssa_i|0);
 if($658){label=228;break;}else{var $z_4_i=$z_3_lcssa_lcssa_i;label=229;break;}
 case 228: 
 var $660=((($z_3_lcssa_lcssa_i)+(127))|0);
 var $661=$660&127;
 var $662=(($x_i+($661<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=((($z_3_lcssa_lcssa_i)+(126))|0);
 var $665=$664&127;
 var $666=(($x_i+($665<<2))|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667|$663;
 HEAP32[(($666)>>2)]=$668;
 var $z_4_i=$661;label=229;break;
 case 229: 
 var $z_4_i;
 var $670=(($x_i+($657<<2))|0);
 HEAP32[(($670)>>2)]=$carry1_1_lcssa_lcssa_i;
 var $a_2_ph40_i=$657;var $z_1_ph39_i=$z_4_i;var $e2_0_ph_i=$_lcssa43_i;var $rp_2_ph38_i=$655;label=210;break;
 case 230: 
 var $e2_1_i;
 var $a_3_i;
 var $i_025_i=0;label=232;break;
 case 231: 
 var $672=($685|0)<2;
 if($672){var $i_025_i=$685;label=232;break;}else{var $i_1_i=$685;label=235;break;}
 case 232: 
 var $i_025_i;
 var $674=((($i_025_i)+($a_3_i))|0);
 var $675=$674&127;
 var $676=($675|0)==($z_5_ph_i|0);
 if($676){var $i_1_i=2;label=235;break;}else{label=233;break;}
 case 233: 
 var $678=(($x_i+($675<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=((8+($i_025_i<<2))|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=($679>>>0)<($681>>>0);
 if($682){var $i_1_i=2;label=235;break;}else{label=234;break;}
 case 234: 
 var $684=($679>>>0)>($681>>>0);
 var $685=((($i_025_i)+(1))|0);
 if($684){var $i_1_i=$i_025_i;label=235;break;}else{label=231;break;}
 case 235: 
 var $i_1_i;
 var $687=($i_1_i|0)==2;
 var $or_cond13_i=$687&$718;
 if($or_cond13_i){label=236;break;}else{label=237;break;}
 case 236: 
 var $688=$a_3_i&127;
 var $689=($688|0)==($z_5_ph_i|0);
 if($689){label=246;break;}else{var $z_7_i=$z_5_ph_i;label=247;break;}
 case 237: 
 var $691=((($_14_i)+($e2_1_i))|0);
 var $692=($a_3_i|0)==($z_5_ph_i|0);
 if($692){var $a_3_i=$z_5_ph_i;var $e2_1_i=$691;label=230;break;}else{label=238;break;}
 case 238: 
 var $693=1<<$_14_i;
 var $694=((($693)-(1))|0);
 var $695=1000000000>>>($_14_i>>>0);
 var $rp_426_i=$rp_3_i_ph;var $a_427_i=$a_3_i;var $k_628_i=$a_3_i;var $carry3_030_i=0;label=239;break;
 case 239: 
 var $carry3_030_i;
 var $k_628_i;
 var $a_427_i;
 var $rp_426_i;
 var $696=(($x_i+($k_628_i<<2))|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$697&$694;
 var $699=$697>>>($_14_i>>>0);
 var $700=((($699)+($carry3_030_i))|0);
 HEAP32[(($696)>>2)]=$700;
 var $701=(Math_imul($698,$695)|0);
 var $702=($k_628_i|0)==($a_427_i|0);
 var $703=($700|0)==0;
 var $or_cond15_i=$702&$703;
 var $704=((($k_628_i)+(1))|0);
 var $705=$704&127;
 var $706=((($rp_426_i)-(9))|0);
 var $rp_5_i=($or_cond15_i?$706:$rp_426_i);
 var $a_5_i=($or_cond15_i?$705:$a_427_i);
 var $707=($705|0)==($z_5_ph_i|0);
 if($707){label=240;break;}else{var $rp_426_i=$rp_5_i;var $a_427_i=$a_5_i;var $k_628_i=$705;var $carry3_030_i=$701;label=239;break;}
 case 240: 
 var $708=($701|0)==0;
 if($708){var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;}else{label=241;break;}
 case 241: 
 var $710=($714|0)==($a_5_i|0);
 if($710){label=245;break;}else{label=242;break;}
 case 242: 
 var $712=(($x_i+($z_5_ph_i<<2))|0);
 HEAP32[(($712)>>2)]=$701;
 var $a_3_ph_i=$a_5_i;var $z_5_ph_i=$714;var $e2_1_ph_i=$691;var $rp_3_ph33_i=$rp_5_i;label=243;break;
 case 243: 
 var $rp_3_ph33_i;
 var $e2_1_ph_i;
 var $z_5_ph_i;
 var $a_3_ph_i;
 var $713=((($z_5_ph_i)+(1))|0);
 var $714=$713&127;
 var $715=((($z_5_ph_i)+(127))|0);
 var $716=$715&127;
 var $717=(($x_i+($716<<2))|0);
 var $a_3_i_ph=$a_3_ph_i;var $e2_1_i_ph=$e2_1_ph_i;var $rp_3_i_ph=$rp_3_ph33_i;label=244;break;
 case 244: 
 var $rp_3_i_ph;
 var $e2_1_i_ph;
 var $a_3_i_ph;
 var $718=($rp_3_i_ph|0)==18;
 var $719=($rp_3_i_ph|0)>27;
 var $_14_i=($719?9:1);
 var $a_3_i=$a_3_i_ph;var $e2_1_i=$e2_1_i_ph;label=230;break;
 case 245: 
 var $721=HEAP32[(($717)>>2)];
 var $722=$721|1;
 HEAP32[(($717)>>2)]=$722;
 var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;
 case 246: 
 var $724=((($714)-(1))|0);
 var $725=(($x_i+($724<<2))|0);
 HEAP32[(($725)>>2)]=0;
 var $z_7_i=$714;label=247;break;
 case 247: 
 var $z_7_i;
 var $727=(($x_i+($688<<2))|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=($728>>>0);
 var $730=((($a_3_i)+(1))|0);
 var $731=$730&127;
 var $732=($731|0)==($z_7_i|0);
 if($732){label=271;break;}else{var $z_7_1_i=$z_7_i;label=272;break;}
 case 248: 
 var $734=($824|0)<0;
 var $__i22=($734?0:$824);
 var $_09_i=$__i22;var $denormal_0_i=1;label=249;break;
 case 249: 
 var $denormal_0_i;
 var $_09_i;
 var $736=($_09_i|0)<53;
 if($736){label=250;break;}else{var $bias_0_i=0;var $frac_0_i=0;var $y_1_i23=$822;label=251;break;}
 case 250: 
 var $738=(((105)-($_09_i))|0);
 var $739=_scalbn(1,$738);
 var $740=_copysign($739,$822);
 var $741=(((53)-($_09_i))|0);
 var $742=_scalbn(1,$741);
 var $743=_fmod($822,$742);
 var $744=($822)-($743);
 var $745=($740)+($744);
 var $bias_0_i=$740;var $frac_0_i=$743;var $y_1_i23=$745;label=251;break;
 case 251: 
 var $y_1_i23;
 var $frac_0_i;
 var $bias_0_i;
 var $747=((($a_3_i)+(2))|0);
 var $748=$747&127;
 var $749=($748|0)==($z_7_1_i|0);
 if($749){var $frac_2_i=$frac_0_i;label=264;break;}else{label=252;break;}
 case 252: 
 var $751=(($x_i+($748<<2))|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=($752>>>0)<500000000;
 if($753){label=253;break;}else{label=256;break;}
 case 253: 
 var $755=($752|0)==0;
 if($755){label=254;break;}else{label=255;break;}
 case 254: 
 var $757=((($a_3_i)+(3))|0);
 var $758=$757&127;
 var $759=($758|0)==($z_7_1_i|0);
 if($759){var $frac_1_i=$frac_0_i;label=261;break;}else{label=255;break;}
 case 255: 
 var $761=($821)*((0.25));
 var $762=($761)+($frac_0_i);
 var $frac_1_i=$762;label=261;break;
 case 256: 
 var $764=($752>>>0)>500000000;
 if($764){label=257;break;}else{label=258;break;}
 case 257: 
 var $766=($821)*((0.75));
 var $767=($766)+($frac_0_i);
 var $frac_1_i=$767;label=261;break;
 case 258: 
 var $769=((($a_3_i)+(3))|0);
 var $770=$769&127;
 var $771=($770|0)==($z_7_1_i|0);
 if($771){label=259;break;}else{label=260;break;}
 case 259: 
 var $773=($821)*((0.5));
 var $774=($773)+($frac_0_i);
 var $frac_1_i=$774;label=261;break;
 case 260: 
 var $776=($821)*((0.75));
 var $777=($776)+($frac_0_i);
 var $frac_1_i=$777;label=261;break;
 case 261: 
 var $frac_1_i;
 var $779=(((53)-($_09_i))|0);
 var $780=($779|0)>1;
 if($780){label=262;break;}else{var $frac_2_i=$frac_1_i;label=264;break;}
 case 262: 
 var $782=_fmod($frac_1_i,1);
 var $783=$782!=0;
 if($783){var $frac_2_i=$frac_1_i;label=264;break;}else{label=263;break;}
 case 263: 
 var $785=($frac_1_i)+(1);
 var $frac_2_i=$785;label=264;break;
 case 264: 
 var $frac_2_i;
 var $787=($y_1_i23)+($frac_2_i);
 var $788=($787)-($bias_0_i);
 var $789=$823&2147483647;
 var $790=(((-2)-($sum_i))|0);
 var $791=($789|0)>($790|0);
 if($791){label=265;break;}else{var $y_3_i=$788;var $e2_3_i=$e2_1_i;label=270;break;}
 case 265: 
 var $793=Math_abs($788);
 var $794=$793<9007199254740992;
 if($794){var $y_2_i24=$788;var $denormal_2_i=$denormal_0_i;var $e2_2_i=$e2_1_i;label=267;break;}else{label=266;break;}
 case 266: 
 var $796=($denormal_0_i|0)!=0;
 var $797=($_09_i|0)==($824|0);
 var $or_cond16_i=$796&$797;
 var $denormal_1_i=($or_cond16_i?0:$denormal_0_i);
 var $798=($788)*((0.5));
 var $799=((($e2_1_i)+(1))|0);
 var $y_2_i24=$798;var $denormal_2_i=$denormal_1_i;var $e2_2_i=$799;label=267;break;
 case 267: 
 var $e2_2_i;
 var $denormal_2_i;
 var $y_2_i24;
 var $801=((($e2_2_i)+(50))|0);
 var $802=($801|0)>($380|0);
 if($802){label=269;break;}else{label=268;break;}
 case 268: 
 var $804=($denormal_2_i|0)!=0;
 var $805=$frac_2_i!=0;
 var $or_cond17_i=$804&$805;
 if($or_cond17_i){label=269;break;}else{var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;}
 case 269: 
 var $807=___errno_location();
 HEAP32[(($807)>>2)]=34;
 var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;
 case 270: 
 var $e2_3_i;
 var $y_3_i;
 var $809=_scalbnl($y_3_i,$e2_3_i);
 var $_0=$809;label=273;break;
 case 271: 
 var $811=((($z_7_i)+(1))|0);
 var $812=$811&127;
 var $813=((($812)-(1))|0);
 var $814=(($x_i+($813<<2))|0);
 HEAP32[(($814)>>2)]=0;
 var $z_7_1_i=$812;label=272;break;
 case 272: 
 var $z_7_1_i;
 var $816=($729)*(1000000000);
 var $817=(($x_i+($731<<2))|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=($818>>>0);
 var $820=($816)+($819);
 var $821=($sign_0|0);
 var $822=($821)*($820);
 var $823=((($e2_1_i)+(53))|0);
 var $824=((($823)-($emin_0_ph))|0);
 var $825=($824|0)<($bits_0_ph|0);
 if($825){label=248;break;}else{var $_09_i=$bits_0_ph;var $denormal_0_i=0;label=249;break;}
 case 273: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scanexp($f,$pok){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[($2)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=($14&1);
 var $16=HEAP32[(($1)>>2)];
 var $17=HEAP32[(($3)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($16+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[($16)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)<10;
 var $29=($pok|0)==0;
 var $or_cond=$28|$29;
 if($or_cond){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=9;break;}
 case 9: 
 var $31=HEAP32[(($3)>>2)];
 var $32=($31|0)==0;
 if($32){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($1)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($1)>>2)]=$35;
 var $neg_0=$15;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $37=((($c_0)-(48))|0);
 var $38=($37>>>0)>9;
 if($38){label=12;break;}else{var $c_18=$c_0;var $x_09=0;label=14;break;}
 case 12: 
 var $40=HEAP32[(($3)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0$1=-2147483648;var $_0$0=0;label=32;break;}else{label=13;break;}
 case 13: 
 var $43=HEAP32[(($1)>>2)];
 var $44=((($43)-(1))|0);
 HEAP32[(($1)>>2)]=$44;
 var $_0$1=-2147483648;var $_0$0=0;label=32;break;
 case 14: 
 var $x_09;
 var $c_18;
 var $45=((($c_18)-(48))|0);
 var $46=((($45)+($x_09))|0);
 var $47=HEAP32[(($1)>>2)];
 var $48=HEAP32[(($3)>>2)];
 var $49=($47>>>0)<($48>>>0);
 if($49){label=15;break;}else{label=16;break;}
 case 15: 
 var $51=(($47+1)|0);
 HEAP32[(($1)>>2)]=$51;
 var $52=HEAP8[($47)];
 var $53=($52&255);
 var $c_1_be=$53;label=17;break;
 case 16: 
 var $55=___shgetc($f);
 var $c_1_be=$55;label=17;break;
 case 17: 
 var $c_1_be;
 var $56=((($c_1_be)-(48))|0);
 var $57=($56>>>0)<10;
 var $58=($46|0)<214748364;
 var $_=$57&$58;
 if($_){label=18;break;}else{label=19;break;}
 case 18: 
 var $phitmp16=((($46)*(10))&-1);
 var $c_18=$c_1_be;var $x_09=$phitmp16;label=14;break;
 case 19: 
 var $phitmp$0=$46;
 var $phitmp$1=((((($46|0)<0))|0)?-1:0);
 var $60=((($c_1_be)-(48))|0);
 var $61=($60>>>0)<10;
 if($61){var $c_23=$c_1_be;var $y_04$1=$phitmp$1;var $y_04$0=$phitmp$0;label=21;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=20;break;}
 case 20: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $62=((($c_2_lcssa)-(48))|0);
 var $63=($62>>>0)<10;
 if($63){label=25;break;}else{label=29;break;}
 case 21: 
 var $y_04$0;
 var $y_04$1;
 var $c_23;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $64$0=___muldi3($y_04$0,$y_04$1,$$etemp$0$0,$$etemp$0$1);var $64$1=tempRet0;
 var $65$0=$c_23;
 var $65$1=((((($c_23|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $66$0=_i64Add($65$0,$65$1,$$etemp$1$0,$$etemp$1$1);var $66$1=tempRet0;
 var $67$0=_i64Add($66$0,$66$1,$64$0,$64$1);var $67$1=tempRet0;
 var $68=HEAP32[(($1)>>2)];
 var $69=HEAP32[(($3)>>2)];
 var $70=($68>>>0)<($69>>>0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=(($68+1)|0);
 HEAP32[(($1)>>2)]=$72;
 var $73=HEAP8[($68)];
 var $74=($73&255);
 var $c_2_be=$74;label=24;break;
 case 23: 
 var $76=___shgetc($f);
 var $c_2_be=$76;label=24;break;
 case 24: 
 var $c_2_be;
 var $77=((($c_2_be)-(48))|0);
 var $78=($77>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $79=(($67$1|0) < ($$etemp$2$1|0)) | (((($67$1|0) == ($$etemp$2$1|0) & ($67$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond2=$78&$79;
 if($or_cond2){var $c_23=$c_2_be;var $y_04$1=$67$1;var $y_04$0=$67$0;label=21;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$67$1;var $y_0_lcssa$0=$67$0;label=20;break;}
 case 25: 
 var $80=HEAP32[(($1)>>2)];
 var $81=HEAP32[(($3)>>2)];
 var $82=($80>>>0)<($81>>>0);
 if($82){label=26;break;}else{label=27;break;}
 case 26: 
 var $84=(($80+1)|0);
 HEAP32[(($1)>>2)]=$84;
 var $85=HEAP8[($80)];
 var $86=($85&255);
 var $c_3_be=$86;label=28;break;
 case 27: 
 var $88=___shgetc($f);
 var $c_3_be=$88;label=28;break;
 case 28: 
 var $c_3_be;
 var $89=((($c_3_be)-(48))|0);
 var $90=($89>>>0)<10;
 if($90){label=25;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($3)>>2)];
 var $92=($91|0)==0;
 if($92){label=31;break;}else{label=30;break;}
 case 30: 
 var $94=HEAP32[(($1)>>2)];
 var $95=((($94)-(1))|0);
 HEAP32[(($1)>>2)]=$95;
 label=31;break;
 case 31: 
 var $97=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $98$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $98$1=tempRet0;
 var $99$0=($97?$98$0:$y_0_lcssa$0);
 var $99$1=($97?$98$1:$y_0_lcssa$1);
 var $_0$1=$99$1;var $_0$0=$99$0;label=32;break;
 case 32: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___shlim($f,$lim){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 HEAP32[(($1)>>2)]=$lim;
 var $2=(($f+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($f+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 var $7=$5;
 var $8=((($6)-($7))|0);
 var $9=(($f+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=($lim|0)!=0;
 var $11=($8|0)>($lim|0);
 var $or_cond=$10&$11;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(($5+$lim)|0);
 var $14=(($f+100)|0);
 HEAP32[(($14)>>2)]=$13;
 label=4;break;
 case 3: 
 var $16=(($f+100)|0);
 HEAP32[(($16)>>2)]=$3;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___uflow($f);
 var $10=($9|0)<0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($f+100)|0);
 HEAP32[(($12)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $14=HEAP32[(($1)>>2)];
 var $15=($14|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(($f+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$_pre;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=(($f+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($14)-($23))|0);
 var $25=((($24)-(1))|0);
 var $26=($21|0)>($25|0);
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=(($18+$25)|0);
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$28;
 label=9;break;
 case 8: 
 var $30=(($f+100)|0);
 HEAP32[(($30)>>2)]=$_pre;
 label=9;break;
 case 9: 
 var $32=($_pre|0)==0;
 var $_phi_trans_insert2=(($f+4)|0);
 var $_pre3=HEAP32[(($_phi_trans_insert2)>>2)];
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=$_pre;
 var $35=$_pre3;
 var $36=(($f+108)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($34)+(1))|0);
 var $39=((($38)-($35))|0);
 var $40=((($39)+($37))|0);
 HEAP32[(($36)>>2)]=$40;
 label=11;break;
 case 11: 
 var $41=((($_pre3)-(1))|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)==($9|0);
 if($44){var $_0=$9;label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($9)&255);
 HEAP8[($41)]=$46;
 var $_0=$9;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbn($x,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)>1023;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=($x)*((8.98846567431158e+307));
 var $4=((($n)-(1023))|0);
 var $5=($4|0)>1023;
 if($5){label=3;break;}else{var $y_0=$3;var $_0=$4;label=7;break;}
 case 3: 
 var $7=($3)*((8.98846567431158e+307));
 var $8=((($n)-(2046))|0);
 var $9=($8|0)>1023;
 var $_=($9?1023:$8);
 var $y_0=$7;var $_0=$_;label=7;break;
 case 4: 
 var $11=($n|0)<-1022;
 if($11){label=5;break;}else{var $y_0=$x;var $_0=$n;label=7;break;}
 case 5: 
 var $13=($x)*((2.2250738585072014e-308));
 var $14=((($n)+(1022))|0);
 var $15=($14|0)<-1022;
 if($15){label=6;break;}else{var $y_0=$13;var $_0=$14;label=7;break;}
 case 6: 
 var $17=($13)*((2.2250738585072014e-308));
 var $18=((($n)+(2044))|0);
 var $19=($18|0)<-1022;
 var $_1=($19?-1022:$18);
 var $y_0=$17;var $_0=$_1;label=7;break;
 case 7: 
 var $_0;
 var $y_0;
 var $21=((($_0)+(1023))|0);
 var $22$0=$21;
 var $22$1=0;
 var $23$0=(0<<20)|(0>>>12);
 var $23$1=($22$0<<20)|(0>>>12);
 var $24=(HEAP32[((tempDoublePtr)>>2)]=$23$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$23$1, HEAPF64[(tempDoublePtr)>>3]);
 var $25=($y_0)*($24);
 return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbnl($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function ___toread($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[($1)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[($1)]=$4;
 var $5=(($f+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($f+44)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6>>>0)>($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($f+36)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($f,0,0);
 label=3;break;
 case 3: 
 var $15=(($f+16)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 var $17=(($f)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&20;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=$18&4;
 var $23=($22|0)==0;
 if($23){var $_0=-1;label=7;break;}else{label=5;break;}
 case 5: 
 var $25=$18|32;
 HEAP32[(($17)>>2)]=$25;
 var $_0=-1;label=7;break;
 case 6: 
 var $27=HEAP32[(($7)>>2)];
 var $28=(($f+8)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($f+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=___toread($f);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 var $8=(($f+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($f,$c,1);
 var $11=($10|0)==1;
 if($11){label=4;break;}else{var $_0=-1;label=5;break;}
 case 4: 
 var $13=HEAP8[($c)];
 var $14=($13&255);
 var $_0=$14;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold_l($s,$p,$loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i_i,0);
 var $6=___floatscan($f_i_i,2,1);
 var $7=(($f_i_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



