// Copyright (c) 2013 Andrey Tuganov
//
// The zlib/libpng license
//
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.

__kernel void kernelStep( __global float4 *posArray,
					__global float4 *colorArray,
					__global float *lifetimeArray,
					float4 baseColor,					
					float4 par,
					float time,
					float deltaTime ) 	
{
	int gid = get_global_id(0);
	
	float4 pos = posArray[gid];
	
	lifetimeArray[gid] -= deltaTime;	
	if ( lifetimeArray[gid] < 0.f )
	{
		lifetimeArray[gid] = 32.f;
		float fgid = as_float(gid);		
		pos = (float4) ( 5.f*sin(fgid*36245.434+pos.x), 5.f*sin(fgid*56509.678+pos.y), 64.f+sin(fgid*12655.678+pos.z), 1.f );
	}
	 	
	float4 vel = (float4)(par.x*(pos.y-pos.x), pos.x*(par.z-pos.z)-pos.y, pos.y*pos.x-par.y*pos.z, 0.f);
			
	posArray[gid] = pos + vel*(deltaTime*par.w);
	colorArray[gid] = baseColor + 0.1f*fast_normalize(vel);
}
// Copyright (c) 2013 Andrey Tuganov
//
// The zlib/libpng license
//
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.                                

#version 100

precision mediump float;

uniform int u_task;

uniform float u_width;
uniform float u_height;

varying vec4 v_color;
varying vec2 v_texCoord;

uniform sampler2D Texture0;

vec4 gammaCorrection()
{
    float gamma = 0.1;
    vec4 c = texture2D(Texture0, gl_PointCoord);
    float l = (c.r+c.g+c.b)/3.0;
    c.xyz *= pow(l,gamma)/l; 
    return c;
}

vec4 blurX()
{    
    float step = 1./u_height;
    vec4 c = 0.6 * texture2D(Texture0, gl_PointCoord);      
    
    c += 0.15 * texture2D( Texture0, gl_PointCoord + vec2(0,step));
    c += 0.15 * texture2D( Texture0, gl_PointCoord - vec2(0,step));

    c += 0.05 * texture2D( Texture0, gl_PointCoord + vec2(0,step * 2.0));
    c += 0.05 * texture2D( Texture0, gl_PointCoord - vec2(0,step * 2.0));
      
    return c;      
}

vec4 blurY()
{   
    float step = 1./u_width;
    vec4 c = 0.6 * texture2D(Texture0, gl_PointCoord);      

    c += 0.15 * texture2D( Texture0, gl_PointCoord + vec2(0,step));
    c += 0.15 * texture2D( Texture0, gl_PointCoord - vec2(0,step));

    c += 0.05 * texture2D( Texture0, gl_PointCoord + vec2(0,step * 2.0));
    c += 0.05 * texture2D( Texture0, gl_PointCoord - vec2(0,step * 2.0));
      
    return c;    
}

vec4 render()
{    
    vec4 color = (0.6 + 0.4 * v_color) * texture2D(Texture0, gl_PointCoord);
    return color * mix(vec4(v_color.r, v_color.g, v_color.b, color.w), vec4(0.0, 0.2, 0.2, color.w), color.w);
}

void main()
{    
    if ( u_task == 0 )
        gl_FragColor = render(); 
}
// Copyright (c) 2013 Andrey Tuganov
//
// The zlib/libpng license
//
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.

#version 100

uniform mat4 u_matViewProjection;
uniform float u_pointSize;

attribute vec4 a_position;
attribute vec4 a_color;
attribute vec2 a_texCoord0;

varying vec4 v_color;
varying vec2 v_texCoord;

void main() {
	float pointSize = 500.0 * u_pointSize;
	vec4 vert = vec4(a_position);
	vert.w = 1.0;
	vec4 pos_eye = vec4(u_matViewProjection * vert);
	
	gl_PointSize = max(2.0, pointSize / (1.0-pos_eye.z));
	gl_Position = pos_eye;           
	
	v_color = a_color;
	v_texCoord = a_texCoord0;
}